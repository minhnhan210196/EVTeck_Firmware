
EVTeck_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b7c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f18  0801b958  0801b958  0002b958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f870  0801f870  0003014c  2**0
                  CONTENTS
  4 .ARM          00000008  0801f870  0801f870  0002f870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f878  0801f878  0003014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f878  0801f878  0002f878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f87c  0801f87c  0002f87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  0801f880  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000120d8  2000014c  0801f9cc  0003014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012224  0801f9cc  00032224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003014c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00058352  00000000  00000000  0003017c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a1ab  00000000  00000000  000884ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002910  00000000  00000000  00092680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002760  00000000  00000000  00094f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b61  00000000  00000000  000976f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00041bd7  00000000  00000000  000ad251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f410a  00000000  00000000  000eee28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e2f32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b25c  00000000  00000000  001e2f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b940 	.word	0x0801b940

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	0801b940 	.word	0x0801b940

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f000 fd78 	bl	8001070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f824 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 f986 	bl	8000894 <MX_GPIO_Init>
  MX_DMA_Init();
 8000588:	f000 f95c 	bl	8000844 <MX_DMA_Init>
  MX_SPI1_Init();
 800058c:	f000 f888 	bl	80006a0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000590:	f000 f8bc 	bl	800070c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000594:	f000 f90a 	bl	80007ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000598:	4808      	ldr	r0, [pc, #32]	; (80005bc <main+0x44>)
 800059a:	f003 fce7 	bl	8003f6c <HAL_TIM_Base_Start>
  board_init();
 800059e:	f018 fd49 	bl	8019034 <board_init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005a2:	f004 ff2f 	bl	8005404 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005a6:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <main+0x48>)
 80005a8:	2100      	movs	r1, #0
 80005aa:	4806      	ldr	r0, [pc, #24]	; (80005c4 <main+0x4c>)
 80005ac:	f004 ff89 	bl	80054c2 <osThreadNew>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a05      	ldr	r2, [pc, #20]	; (80005c8 <main+0x50>)
 80005b4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005b6:	f004 ff49 	bl	800544c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <main+0x42>
 80005bc:	2000b5f4 	.word	0x2000b5f4
 80005c0:	0801f448 	.word	0x0801f448
 80005c4:	08000a7d 	.word	0x08000a7d
 80005c8:	2000b5f0 	.word	0x2000b5f0

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	; 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	; 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f01a f816 	bl	801a60c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b28      	ldr	r3, [pc, #160]	; (8000698 <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	4a27      	ldr	r2, [pc, #156]	; (8000698 <SystemClock_Config+0xcc>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b22      	ldr	r3, [pc, #136]	; (800069c <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a21      	ldr	r2, [pc, #132]	; (800069c <SystemClock_Config+0xd0>)
 8000616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000628:	2301      	movs	r3, #1
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000636:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000640:	23a8      	movs	r3, #168	; 0xa8
 8000642:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000648:	2304      	movs	r3, #4
 800064a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0320 	add.w	r3, r7, #32
 8000650:	4618      	mov	r0, r3
 8000652:	f002 fcb3 	bl	8002fbc <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800065c:	f000 fa36 	bl	8000acc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000664:	2302      	movs	r3, #2
 8000666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000670:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000676:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2105      	movs	r1, #5
 800067e:	4618      	mov	r0, r3
 8000680:	f002 ff14 	bl	80034ac <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800068a:	f000 fa1f 	bl	8000acc <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3750      	adds	r7, #80	; 0x50
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006a4:	4b17      	ldr	r3, [pc, #92]	; (8000704 <MX_SPI1_Init+0x64>)
 80006a6:	4a18      	ldr	r2, [pc, #96]	; (8000708 <MX_SPI1_Init+0x68>)
 80006a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006aa:	4b16      	ldr	r3, [pc, #88]	; (8000704 <MX_SPI1_Init+0x64>)
 80006ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_SPI1_Init+0x64>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_SPI1_Init+0x64>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_SPI1_Init+0x64>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_SPI1_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_SPI1_Init+0x64>)
 80006cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_SPI1_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <MX_SPI1_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_SPI1_Init+0x64>)
 80006ec:	220a      	movs	r2, #10
 80006ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <MX_SPI1_Init+0x64>)
 80006f2:	f003 f8f5 	bl	80038e0 <HAL_SPI_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006fc:	f000 f9e6 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	2000b63c 	.word	0x2000b63c
 8000708:	40013000 	.word	0x40013000

0800070c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000712:	f107 0308 	add.w	r3, r7, #8
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000720:	463b      	mov	r3, r7
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000728:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <MX_TIM1_Init+0x98>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <MX_TIM1_Init+0x9c>)
 800072c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 800072e:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <MX_TIM1_Init+0x98>)
 8000730:	22a7      	movs	r2, #167	; 0xa7
 8000732:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <MX_TIM1_Init+0x98>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800073a:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <MX_TIM1_Init+0x98>)
 800073c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000740:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_TIM1_Init+0x98>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_TIM1_Init+0x98>)
 800074a:	2200      	movs	r2, #0
 800074c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_TIM1_Init+0x98>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000754:	4813      	ldr	r0, [pc, #76]	; (80007a4 <MX_TIM1_Init+0x98>)
 8000756:	f003 fbb9 	bl	8003ecc <HAL_TIM_Base_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000760:	f000 f9b4 	bl	8000acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000768:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	4619      	mov	r1, r3
 8000770:	480c      	ldr	r0, [pc, #48]	; (80007a4 <MX_TIM1_Init+0x98>)
 8000772:	f003 fddb 	bl	800432c <HAL_TIM_ConfigClockSource>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800077c:	f000 f9a6 	bl	8000acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000780:	2300      	movs	r3, #0
 8000782:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000788:	463b      	mov	r3, r7
 800078a:	4619      	mov	r1, r3
 800078c:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_TIM1_Init+0x98>)
 800078e:	f003 fff7 	bl	8004780 <HAL_TIMEx_MasterConfigSynchronization>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000798:	f000 f998 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000b5f4 	.word	0x2000b5f4
 80007a8:	40010000 	.word	0x40010000

080007ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c0:	463b      	mov	r3, r7
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007c8:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_TIM2_Init+0x94>)
 80007ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_TIM2_Init+0x94>)
 80007d2:	22a7      	movs	r2, #167	; 0xa7
 80007d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_TIM2_Init+0x94>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_TIM2_Init+0x94>)
 80007de:	f04f 32ff 	mov.w	r2, #4294967295
 80007e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <MX_TIM2_Init+0x94>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_TIM2_Init+0x94>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007f0:	4813      	ldr	r0, [pc, #76]	; (8000840 <MX_TIM2_Init+0x94>)
 80007f2:	f003 fb6b 	bl	8003ecc <HAL_TIM_Base_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007fc:	f000 f966 	bl	8000acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	4619      	mov	r1, r3
 800080c:	480c      	ldr	r0, [pc, #48]	; (8000840 <MX_TIM2_Init+0x94>)
 800080e:	f003 fd8d 	bl	800432c <HAL_TIM_ConfigClockSource>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000818:	f000 f958 	bl	8000acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081c:	2300      	movs	r3, #0
 800081e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000824:	463b      	mov	r3, r7
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_TIM2_Init+0x94>)
 800082a:	f003 ffa9 	bl	8004780 <HAL_TIMEx_MasterConfigSynchronization>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000834:	f000 f94a 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	3718      	adds	r7, #24
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	2000b694 	.word	0x2000b694

08000844 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <MX_DMA_Init+0x4c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a0f      	ldr	r2, [pc, #60]	; (8000890 <MX_DMA_Init+0x4c>)
 8000854:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <MX_DMA_Init+0x4c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2105      	movs	r1, #5
 800086a:	2038      	movs	r0, #56	; 0x38
 800086c:	f000 fd1e 	bl	80012ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000870:	2038      	movs	r0, #56	; 0x38
 8000872:	f000 fd37 	bl	80012e4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2105      	movs	r1, #5
 800087a:	203b      	movs	r0, #59	; 0x3b
 800087c:	f000 fd16 	bl	80012ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000880:	203b      	movs	r0, #59	; 0x3b
 8000882:	f000 fd2f 	bl	80012e4 <HAL_NVIC_EnableIRQ>

}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800

08000894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08e      	sub	sp, #56	; 0x38
 8000898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
 80008ae:	4b6e      	ldr	r3, [pc, #440]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a6d      	ldr	r2, [pc, #436]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 80008b4:	f043 0310 	orr.w	r3, r3, #16
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b6b      	ldr	r3, [pc, #428]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0310 	and.w	r3, r3, #16
 80008c2:	623b      	str	r3, [r7, #32]
 80008c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
 80008ca:	4b67      	ldr	r3, [pc, #412]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a66      	ldr	r2, [pc, #408]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 80008d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b64      	ldr	r3, [pc, #400]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008de:	61fb      	str	r3, [r7, #28]
 80008e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
 80008e6:	4b60      	ldr	r3, [pc, #384]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a5f      	ldr	r2, [pc, #380]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b5d      	ldr	r3, [pc, #372]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	61bb      	str	r3, [r7, #24]
 80008fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	4b59      	ldr	r3, [pc, #356]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a58      	ldr	r2, [pc, #352]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b56      	ldr	r3, [pc, #344]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b52      	ldr	r3, [pc, #328]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a51      	ldr	r2, [pc, #324]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 8000924:	f043 0320 	orr.w	r3, r3, #32
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b4f      	ldr	r3, [pc, #316]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0320 	and.w	r3, r3, #32
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b4b      	ldr	r3, [pc, #300]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a4a      	ldr	r2, [pc, #296]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 8000940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b48      	ldr	r3, [pc, #288]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	4b44      	ldr	r3, [pc, #272]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a43      	ldr	r2, [pc, #268]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b41      	ldr	r3, [pc, #260]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b3d      	ldr	r3, [pc, #244]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a3c      	ldr	r2, [pc, #240]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 8000978:	f043 0308 	orr.w	r3, r3, #8
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b3a      	ldr	r3, [pc, #232]	; (8000a68 <MX_GPIO_Init+0x1d4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0308 	and.w	r3, r3, #8
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VAL_Pin|MOTOR_Pin|MUX_B3_Pin|MUX_A4_Pin
 800098a:	2200      	movs	r2, #0
 800098c:	f44f 7163 	mov.w	r1, #908	; 0x38c
 8000990:	4836      	ldr	r0, [pc, #216]	; (8000a6c <MX_GPIO_Init+0x1d8>)
 8000992:	f002 faf9 	bl	8002f88 <HAL_GPIO_WritePin>
                          |MUX_B4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MUX_A1_Pin|MUX_B1_Pin|MUX_A2_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800099c:	4834      	ldr	r0, [pc, #208]	; (8000a70 <MX_GPIO_Init+0x1dc>)
 800099e:	f002 faf3 	bl	8002f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MUX_B2_Pin|MUX_A3_Pin|ADC_CNV2_Pin|ADC_RS2_Pin
 80009a2:	2200      	movs	r2, #0
 80009a4:	2137      	movs	r1, #55	; 0x37
 80009a6:	4833      	ldr	r0, [pc, #204]	; (8000a74 <MX_GPIO_Init+0x1e0>)
 80009a8:	f002 faee 	bl	8002f88 <HAL_GPIO_WritePin>
                          |ADC_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ADC_CNV1_Pin|ADC_RS1_Pin|ADC_CS1_Pin, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	f44f 6150 	mov.w	r1, #3328	; 0xd00
 80009b2:	4831      	ldr	r0, [pc, #196]	; (8000a78 <MX_GPIO_Init+0x1e4>)
 80009b4:	f002 fae8 	bl	8002f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VAL_Pin MOTOR_Pin MUX_B3_Pin MUX_A4_Pin
                           MUX_B4_Pin */
  GPIO_InitStruct.Pin = VAL_Pin|MOTOR_Pin|MUX_B3_Pin|MUX_A4_Pin
 80009b8:	f44f 7363 	mov.w	r3, #908	; 0x38c
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |MUX_B4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ce:	4619      	mov	r1, r3
 80009d0:	4826      	ldr	r0, [pc, #152]	; (8000a6c <MX_GPIO_Init+0x1d8>)
 80009d2:	f002 f925 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_A1_Pin MUX_B1_Pin MUX_A2_Pin */
  GPIO_InitStruct.Pin = MUX_A1_Pin|MUX_B1_Pin|MUX_A2_Pin;
 80009d6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	4619      	mov	r1, r3
 80009ee:	4820      	ldr	r0, [pc, #128]	; (8000a70 <MX_GPIO_Init+0x1dc>)
 80009f0:	f002 f916 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_B2_Pin MUX_A3_Pin ADC_CNV2_Pin ADC_RS2_Pin
                           ADC_CS2_Pin */
  GPIO_InitStruct.Pin = MUX_B2_Pin|MUX_A3_Pin|ADC_CNV2_Pin|ADC_RS2_Pin
 80009f4:	2337      	movs	r3, #55	; 0x37
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
                          |ADC_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a08:	4619      	mov	r1, r3
 8000a0a:	481a      	ldr	r0, [pc, #104]	; (8000a74 <MX_GPIO_Init+0x1e0>)
 8000a0c:	f002 f908 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_CNV1_Pin ADC_RS1_Pin ADC_CS1_Pin */
  GPIO_InitStruct.Pin = ADC_CNV1_Pin|ADC_RS1_Pin|ADC_CS1_Pin;
 8000a10:	f44f 6350 	mov.w	r3, #3328	; 0xd00
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a26:	4619      	mov	r1, r3
 8000a28:	4813      	ldr	r0, [pc, #76]	; (8000a78 <MX_GPIO_Init+0x1e4>)
 8000a2a:	f002 f8f9 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_BUSY1_Pin */
  GPIO_InitStruct.Pin = ADC_BUSY1_Pin;
 8000a2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ADC_BUSY1_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a40:	4619      	mov	r1, r3
 8000a42:	480d      	ldr	r0, [pc, #52]	; (8000a78 <MX_GPIO_Init+0x1e4>)
 8000a44:	f002 f8ec 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_BUSY2_Pin */
  GPIO_InitStruct.Pin = ADC_BUSY2_Pin;
 8000a48:	2308      	movs	r3, #8
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ADC_BUSY2_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4806      	ldr	r0, [pc, #24]	; (8000a74 <MX_GPIO_Init+0x1e0>)
 8000a5c:	f002 f8e0 	bl	8002c20 <HAL_GPIO_Init>

}
 8000a60:	bf00      	nop
 8000a62:	3738      	adds	r7, #56	; 0x38
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40021400 	.word	0x40021400
 8000a74:	40021800 	.word	0x40021800
 8000a78:	40020c00 	.word	0x40020c00

08000a7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000a84:	f003 ff0c 	bl	80048a0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  app_init();
 8000a88:	f017 fe9a 	bl	80187c0 <app_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f004 fdab 	bl	80055e8 <osDelay>
 8000a92:	e7fb      	b.n	8000a8c <StartDefaultTask+0x10>

08000a94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a08      	ldr	r2, [pc, #32]	; (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d101      	bne.n	8000aaa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aa6:	f000 fb05 	bl	80010b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == htim2.Instance){
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d102      	bne.n	8000abc <HAL_TIM_PeriodElapsedCallback+0x28>
	  app_read_sensor_task((void*)htim);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f018 f837 	bl	8018b2a <app_read_sensor_task>
  }
  /* USER CODE END Callback 1 */
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40001000 	.word	0x40001000
 8000ac8:	2000b694 	.word	0x2000b694

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>
	...

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_MspInit+0x54>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	4a11      	ldr	r2, [pc, #68]	; (8000b2c <HAL_MspInit+0x54>)
 8000ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aec:	6453      	str	r3, [r2, #68]	; 0x44
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <HAL_MspInit+0x54>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <HAL_MspInit+0x54>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <HAL_MspInit+0x54>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <HAL_MspInit+0x54>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	210f      	movs	r1, #15
 8000b1a:	f06f 0001 	mvn.w	r0, #1
 8000b1e:	f000 fbc5 	bl	80012ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800

08000b30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a48      	ldr	r2, [pc, #288]	; (8000c70 <HAL_SPI_MspInit+0x140>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	f040 808a 	bne.w	8000c68 <HAL_SPI_MspInit+0x138>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	4b46      	ldr	r3, [pc, #280]	; (8000c74 <HAL_SPI_MspInit+0x144>)
 8000b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5c:	4a45      	ldr	r2, [pc, #276]	; (8000c74 <HAL_SPI_MspInit+0x144>)
 8000b5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b62:	6453      	str	r3, [r2, #68]	; 0x44
 8000b64:	4b43      	ldr	r3, [pc, #268]	; (8000c74 <HAL_SPI_MspInit+0x144>)
 8000b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	4b3f      	ldr	r3, [pc, #252]	; (8000c74 <HAL_SPI_MspInit+0x144>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	4a3e      	ldr	r2, [pc, #248]	; (8000c74 <HAL_SPI_MspInit+0x144>)
 8000b7a:	f043 0302 	orr.w	r3, r3, #2
 8000b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b80:	4b3c      	ldr	r3, [pc, #240]	; (8000c74 <HAL_SPI_MspInit+0x144>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000b8c:	2338      	movs	r3, #56	; 0x38
 8000b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b9c:	2305      	movs	r3, #5
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4834      	ldr	r0, [pc, #208]	; (8000c78 <HAL_SPI_MspInit+0x148>)
 8000ba8:	f002 f83a 	bl	8002c20 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000bac:	4b33      	ldr	r3, [pc, #204]	; (8000c7c <HAL_SPI_MspInit+0x14c>)
 8000bae:	4a34      	ldr	r2, [pc, #208]	; (8000c80 <HAL_SPI_MspInit+0x150>)
 8000bb0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000bb2:	4b32      	ldr	r3, [pc, #200]	; (8000c7c <HAL_SPI_MspInit+0x14c>)
 8000bb4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000bb8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bba:	4b30      	ldr	r3, [pc, #192]	; (8000c7c <HAL_SPI_MspInit+0x14c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc0:	4b2e      	ldr	r3, [pc, #184]	; (8000c7c <HAL_SPI_MspInit+0x14c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bc6:	4b2d      	ldr	r3, [pc, #180]	; (8000c7c <HAL_SPI_MspInit+0x14c>)
 8000bc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bcc:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bce:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <HAL_SPI_MspInit+0x14c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bd4:	4b29      	ldr	r3, [pc, #164]	; (8000c7c <HAL_SPI_MspInit+0x14c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000bda:	4b28      	ldr	r3, [pc, #160]	; (8000c7c <HAL_SPI_MspInit+0x14c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000be0:	4b26      	ldr	r3, [pc, #152]	; (8000c7c <HAL_SPI_MspInit+0x14c>)
 8000be2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000be6:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000be8:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <HAL_SPI_MspInit+0x14c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000bee:	4823      	ldr	r0, [pc, #140]	; (8000c7c <HAL_SPI_MspInit+0x14c>)
 8000bf0:	f000 fb86 	bl	8001300 <HAL_DMA_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8000bfa:	f7ff ff67 	bl	8000acc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a1e      	ldr	r2, [pc, #120]	; (8000c7c <HAL_SPI_MspInit+0x14c>)
 8000c02:	64da      	str	r2, [r3, #76]	; 0x4c
 8000c04:	4a1d      	ldr	r2, [pc, #116]	; (8000c7c <HAL_SPI_MspInit+0x14c>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <HAL_SPI_MspInit+0x154>)
 8000c0c:	4a1e      	ldr	r2, [pc, #120]	; (8000c88 <HAL_SPI_MspInit+0x158>)
 8000c0e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000c10:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <HAL_SPI_MspInit+0x154>)
 8000c12:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000c16:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <HAL_SPI_MspInit+0x154>)
 8000c1a:	2240      	movs	r2, #64	; 0x40
 8000c1c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <HAL_SPI_MspInit+0x154>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <HAL_SPI_MspInit+0x154>)
 8000c26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c2a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <HAL_SPI_MspInit+0x154>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <HAL_SPI_MspInit+0x154>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_SPI_MspInit+0x154>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <HAL_SPI_MspInit+0x154>)
 8000c40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c44:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <HAL_SPI_MspInit+0x154>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <HAL_SPI_MspInit+0x154>)
 8000c4e:	f000 fb57 	bl	8001300 <HAL_DMA_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8000c58:	f7ff ff38 	bl	8000acc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a09      	ldr	r2, [pc, #36]	; (8000c84 <HAL_SPI_MspInit+0x154>)
 8000c60:	649a      	str	r2, [r3, #72]	; 0x48
 8000c62:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <HAL_SPI_MspInit+0x154>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c68:	bf00      	nop
 8000c6a:	3728      	adds	r7, #40	; 0x28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40013000 	.word	0x40013000
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020400 	.word	0x40020400
 8000c7c:	2000b6dc 	.word	0x2000b6dc
 8000c80:	40026410 	.word	0x40026410
 8000c84:	2000b73c 	.word	0x2000b73c
 8000c88:	40026458 	.word	0x40026458

08000c8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a28      	ldr	r2, [pc, #160]	; (8000d3c <HAL_TIM_Base_MspInit+0xb0>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d12e      	bne.n	8000cfc <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b27      	ldr	r3, [pc, #156]	; (8000d40 <HAL_TIM_Base_MspInit+0xb4>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	4a26      	ldr	r2, [pc, #152]	; (8000d40 <HAL_TIM_Base_MspInit+0xb4>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6453      	str	r3, [r2, #68]	; 0x44
 8000cae:	4b24      	ldr	r3, [pc, #144]	; (8000d40 <HAL_TIM_Base_MspInit+0xb4>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2018      	movs	r0, #24
 8000cc0:	f000 faf4 	bl	80012ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000cc4:	2018      	movs	r0, #24
 8000cc6:	f000 fb0d 	bl	80012e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2105      	movs	r1, #5
 8000cce:	2019      	movs	r0, #25
 8000cd0:	f000 faec 	bl	80012ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000cd4:	2019      	movs	r0, #25
 8000cd6:	f000 fb05 	bl	80012e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2105      	movs	r1, #5
 8000cde:	201a      	movs	r0, #26
 8000ce0:	f000 fae4 	bl	80012ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000ce4:	201a      	movs	r0, #26
 8000ce6:	f000 fafd 	bl	80012e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2105      	movs	r1, #5
 8000cee:	201b      	movs	r0, #27
 8000cf0:	f000 fadc 	bl	80012ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000cf4:	201b      	movs	r0, #27
 8000cf6:	f000 faf5 	bl	80012e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cfa:	e01a      	b.n	8000d32 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d04:	d115      	bne.n	8000d32 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <HAL_TIM_Base_MspInit+0xb4>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	4a0c      	ldr	r2, [pc, #48]	; (8000d40 <HAL_TIM_Base_MspInit+0xb4>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6413      	str	r3, [r2, #64]	; 0x40
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_TIM_Base_MspInit+0xb4>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2105      	movs	r1, #5
 8000d26:	201c      	movs	r0, #28
 8000d28:	f000 fac0 	bl	80012ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d2c:	201c      	movs	r0, #28
 8000d2e:	f000 fad9 	bl	80012e4 <HAL_NVIC_EnableIRQ>
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40010000 	.word	0x40010000
 8000d40:	40023800 	.word	0x40023800

08000d44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08c      	sub	sp, #48	; 0x30
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d54:	2200      	movs	r2, #0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	2036      	movs	r0, #54	; 0x36
 8000d5a:	f000 faa7 	bl	80012ac <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d5e:	2036      	movs	r0, #54	; 0x36
 8000d60:	f000 fac0 	bl	80012e4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <HAL_InitTick+0xa4>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	4a1e      	ldr	r2, [pc, #120]	; (8000de8 <HAL_InitTick+0xa4>)
 8000d6e:	f043 0310 	orr.w	r3, r3, #16
 8000d72:	6413      	str	r3, [r2, #64]	; 0x40
 8000d74:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <HAL_InitTick+0xa4>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	f003 0310 	and.w	r3, r3, #16
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d80:	f107 0210 	add.w	r2, r7, #16
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4611      	mov	r1, r2
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f002 fd76 	bl	800387c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d90:	f002 fd60 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 8000d94:	4603      	mov	r3, r0
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9c:	4a13      	ldr	r2, [pc, #76]	; (8000dec <HAL_InitTick+0xa8>)
 8000d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000da2:	0c9b      	lsrs	r3, r3, #18
 8000da4:	3b01      	subs	r3, #1
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000da8:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <HAL_InitTick+0xac>)
 8000daa:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <HAL_InitTick+0xb0>)
 8000dac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <HAL_InitTick+0xac>)
 8000db0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000db4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000db6:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <HAL_InitTick+0xac>)
 8000db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <HAL_InitTick+0xac>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <HAL_InitTick+0xac>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000dc8:	4809      	ldr	r0, [pc, #36]	; (8000df0 <HAL_InitTick+0xac>)
 8000dca:	f003 f87f 	bl	8003ecc <HAL_TIM_Base_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d104      	bne.n	8000dde <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000dd4:	4806      	ldr	r0, [pc, #24]	; (8000df0 <HAL_InitTick+0xac>)
 8000dd6:	f003 f931 	bl	800403c <HAL_TIM_Base_Start_IT>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	e000      	b.n	8000de0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3730      	adds	r7, #48	; 0x30
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40023800 	.word	0x40023800
 8000dec:	431bde83 	.word	0x431bde83
 8000df0:	2000b79c 	.word	0x2000b79c
 8000df4:	40001000 	.word	0x40001000

08000df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <NMI_Handler+0x4>

08000dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <HardFault_Handler+0x4>

08000e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <MemManage_Handler+0x4>

08000e0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <BusFault_Handler+0x4>

08000e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <UsageFault_Handler+0x4>

08000e16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000e2a:	f003 f977 	bl	800411c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	2000b5f4 	.word	0x2000b5f4

08000e38 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e3e:	f003 f96d 	bl	800411c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	2000b5f4 	.word	0x2000b5f4

08000e4c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000e52:	f003 f963 	bl	800411c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	2000b5f4 	.word	0x2000b5f4

08000e60 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <TIM1_CC_IRQHandler+0x10>)
 8000e66:	f003 f959 	bl	800411c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	2000b5f4 	.word	0x2000b5f4

08000e74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <TIM2_IRQHandler+0x10>)
 8000e7a:	f003 f94f 	bl	800411c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	2000b694 	.word	0x2000b694

08000e88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e8c:	4802      	ldr	r0, [pc, #8]	; (8000e98 <TIM6_DAC_IRQHandler+0x10>)
 8000e8e:	f003 f945 	bl	800411c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	2000b79c 	.word	0x2000b79c

08000e9c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000ea0:	4802      	ldr	r0, [pc, #8]	; (8000eac <DMA2_Stream0_IRQHandler+0x10>)
 8000ea2:	f000 fadb 	bl	800145c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	2000b6dc 	.word	0x2000b6dc

08000eb0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000eb4:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <DMA2_Stream3_IRQHandler+0x10>)
 8000eb6:	f000 fad1 	bl	800145c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	2000b73c 	.word	0x2000b73c

08000ec4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <ETH_IRQHandler+0x10>)
 8000eca:	f001 f8e7 	bl	800209c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	2000d130 	.word	0x2000d130

08000ed8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
	return 1;
 8000edc:	2301      	movs	r3, #1
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <_kill>:

int _kill(int pid, int sig)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ef2:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <_kill+0x20>)
 8000ef4:	2216      	movs	r2, #22
 8000ef6:	601a      	str	r2, [r3, #0]
	return -1;
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	200120bc 	.word	0x200120bc

08000f0c <_exit>:

void _exit (int status)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f14:	f04f 31ff 	mov.w	r1, #4294967295
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ffe5 	bl	8000ee8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f1e:	e7fe      	b.n	8000f1e <_exit+0x12>

08000f20 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	return -1;
 8000f28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f48:	605a      	str	r2, [r3, #4]
	return 0;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <_isatty>:

int _isatty(int file)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	return 1;
 8000f60:	2301      	movs	r3, #1
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b085      	sub	sp, #20
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	60f8      	str	r0, [r7, #12]
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
	return 0;
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b087      	sub	sp, #28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f90:	4a14      	ldr	r2, [pc, #80]	; (8000fe4 <_sbrk+0x5c>)
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <_sbrk+0x60>)
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f9c:	4b13      	ldr	r3, [pc, #76]	; (8000fec <_sbrk+0x64>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d102      	bne.n	8000faa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <_sbrk+0x64>)
 8000fa6:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <_sbrk+0x68>)
 8000fa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <_sbrk+0x64>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d205      	bcs.n	8000fc4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <_sbrk+0x6c>)
 8000fba:	220c      	movs	r2, #12
 8000fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	e009      	b.n	8000fd8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a06      	ldr	r2, [pc, #24]	; (8000fec <_sbrk+0x64>)
 8000fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	371c      	adds	r7, #28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	20020000 	.word	0x20020000
 8000fe8:	00000400 	.word	0x00000400
 8000fec:	20000168 	.word	0x20000168
 8000ff0:	20012228 	.word	0x20012228
 8000ff4:	200120bc 	.word	0x200120bc

08000ff8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <SystemInit+0x20>)
 8000ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <SystemInit+0x20>)
 8001004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800101c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001054 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001022:	490e      	ldr	r1, [pc, #56]	; (800105c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001024:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001038:	4c0b      	ldr	r4, [pc, #44]	; (8001068 <LoopFillZerobss+0x26>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001046:	f7ff ffd7 	bl	8000ff8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800104a:	f019 fa71 	bl	801a530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104e:	f7ff fa93 	bl	8000578 <main>
  bx  lr    
 8001052:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001054:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800105c:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8001060:	0801f880 	.word	0x0801f880
  ldr r2, =_sbss
 8001064:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001068:	20012224 	.word	0x20012224

0800106c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC_IRQHandler>
	...

08001070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <HAL_Init+0x40>)
 800107a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800107e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <HAL_Init+0x40>)
 8001086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800108a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <HAL_Init+0x40>)
 8001092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001096:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001098:	2003      	movs	r0, #3
 800109a:	f000 f8fc 	bl	8001296 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff fe50 	bl	8000d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a4:	f7ff fd18 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023c00 	.word	0x40023c00

080010b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x20>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_IncTick+0x24>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <HAL_IncTick+0x24>)
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000008 	.word	0x20000008
 80010d8:	2000b7e4 	.word	0x2000b7e4

080010dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return uwTick;
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_GetTick+0x14>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	2000b7e4 	.word	0x2000b7e4

080010f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010fc:	f7ff ffee 	bl	80010dc <HAL_GetTick>
 8001100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800110c:	d005      	beq.n	800111a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <HAL_Delay+0x44>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4413      	add	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800111a:	bf00      	nop
 800111c:	f7ff ffde 	bl	80010dc <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	429a      	cmp	r2, r3
 800112a:	d8f7      	bhi.n	800111c <HAL_Delay+0x28>
  {
  }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000008 	.word	0x20000008

0800113c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001158:	4013      	ands	r3, r2
 800115a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800116c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116e:	4a04      	ldr	r2, [pc, #16]	; (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	60d3      	str	r3, [r2, #12]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <__NVIC_GetPriorityGrouping+0x18>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	f003 0307 	and.w	r3, r3, #7
}
 8001192:	4618      	mov	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	db0b      	blt.n	80011ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	f003 021f 	and.w	r2, r3, #31
 80011b8:	4907      	ldr	r1, [pc, #28]	; (80011d8 <__NVIC_EnableIRQ+0x38>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	095b      	lsrs	r3, r3, #5
 80011c0:	2001      	movs	r0, #1
 80011c2:	fa00 f202 	lsl.w	r2, r0, r2
 80011c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000e100 	.word	0xe000e100

080011dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db0a      	blt.n	8001206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	490c      	ldr	r1, [pc, #48]	; (8001228 <__NVIC_SetPriority+0x4c>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	440b      	add	r3, r1
 8001200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001204:	e00a      	b.n	800121c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4908      	ldr	r1, [pc, #32]	; (800122c <__NVIC_SetPriority+0x50>)
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	3b04      	subs	r3, #4
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	440b      	add	r3, r1
 800121a:	761a      	strb	r2, [r3, #24]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f1c3 0307 	rsb	r3, r3, #7
 800124a:	2b04      	cmp	r3, #4
 800124c:	bf28      	it	cs
 800124e:	2304      	movcs	r3, #4
 8001250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3304      	adds	r3, #4
 8001256:	2b06      	cmp	r3, #6
 8001258:	d902      	bls.n	8001260 <NVIC_EncodePriority+0x30>
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3b03      	subs	r3, #3
 800125e:	e000      	b.n	8001262 <NVIC_EncodePriority+0x32>
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	f04f 32ff 	mov.w	r2, #4294967295
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001278:	f04f 31ff 	mov.w	r1, #4294967295
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	43d9      	mvns	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	4313      	orrs	r3, r2
         );
}
 800128a:	4618      	mov	r0, r3
 800128c:	3724      	adds	r7, #36	; 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ff4c 	bl	800113c <__NVIC_SetPriorityGrouping>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
 80012b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012be:	f7ff ff61 	bl	8001184 <__NVIC_GetPriorityGrouping>
 80012c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	68b9      	ldr	r1, [r7, #8]
 80012c8:	6978      	ldr	r0, [r7, #20]
 80012ca:	f7ff ffb1 	bl	8001230 <NVIC_EncodePriority>
 80012ce:	4602      	mov	r2, r0
 80012d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d4:	4611      	mov	r1, r2
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ff80 	bl	80011dc <__NVIC_SetPriority>
}
 80012dc:	bf00      	nop
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ff54 	bl	80011a0 <__NVIC_EnableIRQ>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff fee6 	bl	80010dc <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d101      	bne.n	800131c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e099      	b.n	8001450 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2202      	movs	r2, #2
 8001320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0201 	bic.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800133c:	e00f      	b.n	800135e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800133e:	f7ff fecd 	bl	80010dc <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b05      	cmp	r3, #5
 800134a:	d908      	bls.n	800135e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2220      	movs	r2, #32
 8001350:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2203      	movs	r2, #3
 8001356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e078      	b.n	8001450 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1e8      	bne.n	800133e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	4b38      	ldr	r3, [pc, #224]	; (8001458 <HAL_DMA_Init+0x158>)
 8001378:	4013      	ands	r3, r2
 800137a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800138a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001396:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d107      	bne.n	80013c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c0:	4313      	orrs	r3, r2
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f023 0307 	bic.w	r3, r3, #7
 80013de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	d117      	bne.n	8001422 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00e      	beq.n	8001422 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f9e9 	bl	80017dc <DMA_CheckFifoParam>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d008      	beq.n	8001422 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2240      	movs	r2, #64	; 0x40
 8001414:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800141e:	2301      	movs	r3, #1
 8001420:	e016      	b.n	8001450 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f9a0 	bl	8001770 <DMA_CalcBaseAndBitshift>
 8001430:	4603      	mov	r3, r0
 8001432:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001438:	223f      	movs	r2, #63	; 0x3f
 800143a:	409a      	lsls	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2201      	movs	r2, #1
 800144a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	f010803f 	.word	0xf010803f

0800145c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001468:	4b92      	ldr	r3, [pc, #584]	; (80016b4 <HAL_DMA_IRQHandler+0x258>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a92      	ldr	r2, [pc, #584]	; (80016b8 <HAL_DMA_IRQHandler+0x25c>)
 800146e:	fba2 2303 	umull	r2, r3, r2, r3
 8001472:	0a9b      	lsrs	r3, r3, #10
 8001474:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001486:	2208      	movs	r2, #8
 8001488:	409a      	lsls	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4013      	ands	r3, r2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d01a      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	d013      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0204 	bic.w	r2, r2, #4
 80014ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b4:	2208      	movs	r2, #8
 80014b6:	409a      	lsls	r2, r3
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c0:	f043 0201 	orr.w	r2, r3, #1
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014cc:	2201      	movs	r2, #1
 80014ce:	409a      	lsls	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4013      	ands	r3, r2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d012      	beq.n	80014fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00b      	beq.n	80014fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ea:	2201      	movs	r2, #1
 80014ec:	409a      	lsls	r2, r3
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f6:	f043 0202 	orr.w	r2, r3, #2
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001502:	2204      	movs	r2, #4
 8001504:	409a      	lsls	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4013      	ands	r3, r2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d012      	beq.n	8001534 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00b      	beq.n	8001534 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001520:	2204      	movs	r2, #4
 8001522:	409a      	lsls	r2, r3
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152c:	f043 0204 	orr.w	r2, r3, #4
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001538:	2210      	movs	r2, #16
 800153a:	409a      	lsls	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4013      	ands	r3, r2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d043      	beq.n	80015cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d03c      	beq.n	80015cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001556:	2210      	movs	r2, #16
 8001558:	409a      	lsls	r2, r3
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d018      	beq.n	800159e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d108      	bne.n	800158c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	2b00      	cmp	r3, #0
 8001580:	d024      	beq.n	80015cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	4798      	blx	r3
 800158a:	e01f      	b.n	80015cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001590:	2b00      	cmp	r3, #0
 8001592:	d01b      	beq.n	80015cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	4798      	blx	r3
 800159c:	e016      	b.n	80015cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d107      	bne.n	80015bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0208 	bic.w	r2, r2, #8
 80015ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d0:	2220      	movs	r2, #32
 80015d2:	409a      	lsls	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 808e 	beq.w	80016fa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0310 	and.w	r3, r3, #16
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 8086 	beq.w	80016fa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f2:	2220      	movs	r2, #32
 80015f4:	409a      	lsls	r2, r3
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b05      	cmp	r3, #5
 8001604:	d136      	bne.n	8001674 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 0216 	bic.w	r2, r2, #22
 8001614:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	695a      	ldr	r2, [r3, #20]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001624:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	2b00      	cmp	r3, #0
 800162c:	d103      	bne.n	8001636 <HAL_DMA_IRQHandler+0x1da>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001632:	2b00      	cmp	r3, #0
 8001634:	d007      	beq.n	8001646 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0208 	bic.w	r2, r2, #8
 8001644:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164a:	223f      	movs	r2, #63	; 0x3f
 800164c:	409a      	lsls	r2, r3
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001666:	2b00      	cmp	r3, #0
 8001668:	d07d      	beq.n	8001766 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	4798      	blx	r3
        }
        return;
 8001672:	e078      	b.n	8001766 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d01c      	beq.n	80016bc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d108      	bne.n	80016a2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001694:	2b00      	cmp	r3, #0
 8001696:	d030      	beq.n	80016fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	4798      	blx	r3
 80016a0:	e02b      	b.n	80016fa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d027      	beq.n	80016fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	4798      	blx	r3
 80016b2:	e022      	b.n	80016fa <HAL_DMA_IRQHandler+0x29e>
 80016b4:	20000000 	.word	0x20000000
 80016b8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10f      	bne.n	80016ea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0210 	bic.w	r2, r2, #16
 80016d8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d032      	beq.n	8001768 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d022      	beq.n	8001754 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2205      	movs	r2, #5
 8001712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0201 	bic.w	r2, r2, #1
 8001724:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	3301      	adds	r3, #1
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	429a      	cmp	r2, r3
 8001730:	d307      	bcc.n	8001742 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1f2      	bne.n	8001726 <HAL_DMA_IRQHandler+0x2ca>
 8001740:	e000      	b.n	8001744 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001742:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	4798      	blx	r3
 8001764:	e000      	b.n	8001768 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001766:	bf00      	nop
    }
  }
}
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop

08001770 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	3b10      	subs	r3, #16
 8001780:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <DMA_CalcBaseAndBitshift+0x64>)
 8001782:	fba2 2303 	umull	r2, r3, r2, r3
 8001786:	091b      	lsrs	r3, r3, #4
 8001788:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800178a:	4a13      	ldr	r2, [pc, #76]	; (80017d8 <DMA_CalcBaseAndBitshift+0x68>)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4413      	add	r3, r2
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b03      	cmp	r3, #3
 800179c:	d909      	bls.n	80017b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017a6:	f023 0303 	bic.w	r3, r3, #3
 80017aa:	1d1a      	adds	r2, r3, #4
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	659a      	str	r2, [r3, #88]	; 0x58
 80017b0:	e007      	b.n	80017c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017ba:	f023 0303 	bic.w	r3, r3, #3
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	aaaaaaab 	.word	0xaaaaaaab
 80017d8:	0801f484 	.word	0x0801f484

080017dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d11f      	bne.n	8001836 <DMA_CheckFifoParam+0x5a>
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	d856      	bhi.n	80018aa <DMA_CheckFifoParam+0xce>
 80017fc:	a201      	add	r2, pc, #4	; (adr r2, 8001804 <DMA_CheckFifoParam+0x28>)
 80017fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001802:	bf00      	nop
 8001804:	08001815 	.word	0x08001815
 8001808:	08001827 	.word	0x08001827
 800180c:	08001815 	.word	0x08001815
 8001810:	080018ab 	.word	0x080018ab
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001818:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d046      	beq.n	80018ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001824:	e043      	b.n	80018ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800182e:	d140      	bne.n	80018b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001834:	e03d      	b.n	80018b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800183e:	d121      	bne.n	8001884 <DMA_CheckFifoParam+0xa8>
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	2b03      	cmp	r3, #3
 8001844:	d837      	bhi.n	80018b6 <DMA_CheckFifoParam+0xda>
 8001846:	a201      	add	r2, pc, #4	; (adr r2, 800184c <DMA_CheckFifoParam+0x70>)
 8001848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800184c:	0800185d 	.word	0x0800185d
 8001850:	08001863 	.word	0x08001863
 8001854:	0800185d 	.word	0x0800185d
 8001858:	08001875 	.word	0x08001875
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
      break;
 8001860:	e030      	b.n	80018c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d025      	beq.n	80018ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001872:	e022      	b.n	80018ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001878:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800187c:	d11f      	bne.n	80018be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001882:	e01c      	b.n	80018be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d903      	bls.n	8001892 <DMA_CheckFifoParam+0xb6>
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	2b03      	cmp	r3, #3
 800188e:	d003      	beq.n	8001898 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001890:	e018      	b.n	80018c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	73fb      	strb	r3, [r7, #15]
      break;
 8001896:	e015      	b.n	80018c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00e      	beq.n	80018c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	73fb      	strb	r3, [r7, #15]
      break;
 80018a8:	e00b      	b.n	80018c2 <DMA_CheckFifoParam+0xe6>
      break;
 80018aa:	bf00      	nop
 80018ac:	e00a      	b.n	80018c4 <DMA_CheckFifoParam+0xe8>
      break;
 80018ae:	bf00      	nop
 80018b0:	e008      	b.n	80018c4 <DMA_CheckFifoParam+0xe8>
      break;
 80018b2:	bf00      	nop
 80018b4:	e006      	b.n	80018c4 <DMA_CheckFifoParam+0xe8>
      break;
 80018b6:	bf00      	nop
 80018b8:	e004      	b.n	80018c4 <DMA_CheckFifoParam+0xe8>
      break;
 80018ba:	bf00      	nop
 80018bc:	e002      	b.n	80018c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80018be:	bf00      	nop
 80018c0:	e000      	b.n	80018c4 <DMA_CheckFifoParam+0xe8>
      break;
 80018c2:	bf00      	nop
    }
  } 
  
  return status; 
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop

080018d4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80018e4:	4baa      	ldr	r3, [pc, #680]	; (8001b90 <HAL_ETH_Init+0x2bc>)
 80018e6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80018ec:	2300      	movs	r3, #0
 80018ee:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e183      	b.n	8001c02 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d106      	bne.n	8001914 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f003 f928 	bl	8004b64 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	4b9e      	ldr	r3, [pc, #632]	; (8001b94 <HAL_ETH_Init+0x2c0>)
 800191a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191c:	4a9d      	ldr	r2, [pc, #628]	; (8001b94 <HAL_ETH_Init+0x2c0>)
 800191e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001922:	6453      	str	r3, [r2, #68]	; 0x44
 8001924:	4b9b      	ldr	r3, [pc, #620]	; (8001b94 <HAL_ETH_Init+0x2c0>)
 8001926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001930:	4b99      	ldr	r3, [pc, #612]	; (8001b98 <HAL_ETH_Init+0x2c4>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	4a98      	ldr	r2, [pc, #608]	; (8001b98 <HAL_ETH_Init+0x2c4>)
 8001936:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800193a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800193c:	4b96      	ldr	r3, [pc, #600]	; (8001b98 <HAL_ETH_Init+0x2c4>)
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	4994      	ldr	r1, [pc, #592]	; (8001b98 <HAL_ETH_Init+0x2c4>)
 8001946:	4313      	orrs	r3, r2
 8001948:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f042 0201 	orr.w	r2, r2, #1
 800195c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001960:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001962:	f7ff fbbb 	bl	80010dc <HAL_GetTick>
 8001966:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001968:	e011      	b.n	800198e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800196a:	f7ff fbb7 	bl	80010dc <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001978:	d909      	bls.n	800198e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2203      	movs	r2, #3
 800197e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e139      	b.n	8001c02 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1e4      	bne.n	800196a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f023 031c 	bic.w	r3, r3, #28
 80019ae:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80019b0:	f001 ff44 	bl	800383c <HAL_RCC_GetHCLKFreq>
 80019b4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	4a78      	ldr	r2, [pc, #480]	; (8001b9c <HAL_ETH_Init+0x2c8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d908      	bls.n	80019d0 <HAL_ETH_Init+0xfc>
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	4a77      	ldr	r2, [pc, #476]	; (8001ba0 <HAL_ETH_Init+0x2cc>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d804      	bhi.n	80019d0 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	f043 0308 	orr.w	r3, r3, #8
 80019cc:	61fb      	str	r3, [r7, #28]
 80019ce:	e027      	b.n	8001a20 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	4a73      	ldr	r2, [pc, #460]	; (8001ba0 <HAL_ETH_Init+0x2cc>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d908      	bls.n	80019ea <HAL_ETH_Init+0x116>
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	4a6d      	ldr	r2, [pc, #436]	; (8001b90 <HAL_ETH_Init+0x2bc>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d204      	bcs.n	80019ea <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f043 030c 	orr.w	r3, r3, #12
 80019e6:	61fb      	str	r3, [r7, #28]
 80019e8:	e01a      	b.n	8001a20 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	4a68      	ldr	r2, [pc, #416]	; (8001b90 <HAL_ETH_Init+0x2bc>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d303      	bcc.n	80019fa <HAL_ETH_Init+0x126>
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	4a6b      	ldr	r2, [pc, #428]	; (8001ba4 <HAL_ETH_Init+0x2d0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d911      	bls.n	8001a1e <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	4a69      	ldr	r2, [pc, #420]	; (8001ba4 <HAL_ETH_Init+0x2d0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d908      	bls.n	8001a14 <HAL_ETH_Init+0x140>
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	4a68      	ldr	r2, [pc, #416]	; (8001ba8 <HAL_ETH_Init+0x2d4>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d804      	bhi.n	8001a14 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	f043 0304 	orr.w	r3, r3, #4
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	e005      	b.n	8001a20 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f043 0310 	orr.w	r3, r3, #16
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	e000      	b.n	8001a20 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001a1e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	69fa      	ldr	r2, [r7, #28]
 8001a26:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001a28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 fc17 	bl	8002262 <HAL_ETH_WritePHYRegister>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00b      	beq.n	8001a52 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001a3e:	6939      	ldr	r1, [r7, #16]
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 fdcd 	bl	80025e0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e0d7      	b.n	8001c02 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001a52:	20ff      	movs	r0, #255	; 0xff
 8001a54:	f7ff fb4e 	bl	80010f4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80a5 	beq.w	8001bac <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001a62:	f7ff fb3b 	bl	80010dc <HAL_GetTick>
 8001a66:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001a68:	f107 030c 	add.w	r3, r7, #12
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	2101      	movs	r1, #1
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 fb8e 	bl	8002192 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001a76:	f7ff fb31 	bl	80010dc <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d90f      	bls.n	8001aa8 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001a8c:	6939      	ldr	r1, [r7, #16]
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 fda6 	bl	80025e0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e0ac      	b.n	8001c02 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0da      	beq.n	8001a68 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001ab2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 fbd2 	bl	8002262 <HAL_ETH_WritePHYRegister>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00b      	beq.n	8001adc <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001ac8:	6939      	ldr	r1, [r7, #16]
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 fd88 	bl	80025e0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e092      	b.n	8001c02 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001adc:	f7ff fafe 	bl	80010dc <HAL_GetTick>
 8001ae0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	2101      	movs	r1, #1
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 fb51 	bl	8002192 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001af0:	f7ff faf4 	bl	80010dc <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d90f      	bls.n	8001b22 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001b06:	6939      	ldr	r1, [r7, #16]
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 fd69 	bl	80025e0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e06f      	b.n	8001c02 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f003 0320 	and.w	r3, r3, #32
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0da      	beq.n	8001ae2 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001b2c:	f107 030c 	add.w	r3, r7, #12
 8001b30:	461a      	mov	r2, r3
 8001b32:	2110      	movs	r1, #16
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 fb2c 	bl	8002192 <HAL_ETH_ReadPHYRegister>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00b      	beq.n	8001b58 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001b44:	6939      	ldr	r1, [r7, #16]
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 fd4a 	bl	80025e0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001b54:	2301      	movs	r3, #1
 8001b56:	e054      	b.n	8001c02 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d004      	beq.n	8001b6c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	e002      	b.n	8001b72 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	e035      	b.n	8001bf0 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	e030      	b.n	8001bf0 <HAL_ETH_Init+0x31c>
 8001b8e:	bf00      	nop
 8001b90:	03938700 	.word	0x03938700
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40013800 	.word	0x40013800
 8001b9c:	01312cff 	.word	0x01312cff
 8001ba0:	02160ebf 	.word	0x02160ebf
 8001ba4:	05f5e0ff 	.word	0x05f5e0ff
 8001ba8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	08db      	lsrs	r3, r3, #3
 8001bb2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	085b      	lsrs	r3, r3, #1
 8001bba:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 fb4c 	bl	8002262 <HAL_ETH_WritePHYRegister>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00b      	beq.n	8001be8 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001bd4:	6939      	ldr	r1, [r7, #16]
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 fd02 	bl	80025e0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e00c      	b.n	8001c02 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001be8:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001bec:	f7ff fa82 	bl	80010f4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001bf0:	6939      	ldr	r1, [r7, #16]
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 fcf4 	bl	80025e0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3720      	adds	r7, #32
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop

08001c0c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
 8001c18:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_ETH_DMATxDescListInit+0x20>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e052      	b.n	8001cd2 <HAL_ETH_DMATxDescListInit+0xc6>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2202      	movs	r2, #2
 8001c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	e030      	b.n	8001caa <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	015b      	lsls	r3, r3, #5
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	4413      	add	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c58:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001c60:	fb02 f303 	mul.w	r3, r2, r3
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	4413      	add	r3, r2
 8001c68:	461a      	mov	r2, r3
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d105      	bne.n	8001c82 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d208      	bcs.n	8001c9e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	015b      	lsls	r3, r3, #5
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	4413      	add	r3, r2
 8001c96:	461a      	mov	r2, r3
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	60da      	str	r2, [r3, #12]
 8001c9c:	e002      	b.n	8001ca4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d3ca      	bcc.n	8001c48 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cbc:	3310      	adds	r3, #16
 8001cbe:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	371c      	adds	r7, #28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b087      	sub	sp, #28
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_ETH_DMARxDescListInit+0x20>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e056      	b.n	8001dac <HAL_ETH_DMARxDescListInit+0xce>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2202      	movs	r2, #2
 8001d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	e034      	b.n	8001d84 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	015b      	lsls	r3, r3, #5
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	4413      	add	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001d2a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001d32:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d3a:	fb02 f303 	mul.w	r3, r2, r3
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	461a      	mov	r2, r3
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d105      	bne.n	8001d5c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d208      	bcs.n	8001d78 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	015b      	lsls	r3, r3, #5
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	4413      	add	r3, r2
 8001d70:	461a      	mov	r2, r3
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	e002      	b.n	8001d7e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	3301      	adds	r3, #1
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d3c6      	bcc.n	8001d1a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d96:	330c      	adds	r3, #12
 8001d98:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	371c      	adds	r7, #28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d101      	bne.n	8001ddc <HAL_ETH_TransmitFrame+0x24>
 8001dd8:	2302      	movs	r3, #2
 8001dda:	e0cd      	b.n	8001f78 <HAL_ETH_TransmitFrame+0x1c0>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2202      	movs	r2, #2
 8001de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001e02:	2301      	movs	r3, #1
 8001e04:	e0b8      	b.n	8001f78 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	da09      	bge.n	8001e24 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2212      	movs	r2, #18
 8001e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0a9      	b.n	8001f78 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d915      	bls.n	8001e5a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	4a54      	ldr	r2, [pc, #336]	; (8001f84 <HAL_ETH_TransmitFrame+0x1cc>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	0a9b      	lsrs	r3, r3, #10
 8001e38:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	4b51      	ldr	r3, [pc, #324]	; (8001f84 <HAL_ETH_TransmitFrame+0x1cc>)
 8001e3e:	fba3 1302 	umull	r1, r3, r3, r2
 8001e42:	0a9b      	lsrs	r3, r3, #10
 8001e44:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001e48:	fb01 f303 	mul.w	r3, r1, r3
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d005      	beq.n	8001e5e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	3301      	adds	r3, #1
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	e001      	b.n	8001e5e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d11c      	bne.n	8001e9e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001e72:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001e7e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e8e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	461a      	mov	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e9c:	e04b      	b.n	8001f36 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	e044      	b.n	8001f2e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eae:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001eb2:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d107      	bne.n	8001eca <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ec8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ece:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001ed2:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d116      	bne.n	8001f0c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001eec:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	4a25      	ldr	r2, [pc, #148]	; (8001f88 <HAL_ETH_TransmitFrame+0x1d0>)
 8001ef2:	fb02 f203 	mul.w	r2, r2, r3
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001efe:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001f0a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f16:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f1a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	461a      	mov	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d3b6      	bcc.n	8001ea4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f3e:	3314      	adds	r3, #20
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00d      	beq.n	8001f66 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f52:	3314      	adds	r3, #20
 8001f54:	2204      	movs	r2, #4
 8001f56:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f60:	3304      	adds	r3, #4
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	371c      	adds	r7, #28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	ac02b00b 	.word	0xac02b00b
 8001f88:	fffffa0c 	.word	0xfffffa0c

08001f8c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d101      	bne.n	8001fa6 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e074      	b.n	8002090 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001fb6:	e05a      	b.n	800206e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fcc:	d10d      	bne.n	8001fea <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	629a      	str	r2, [r3, #40]	; 0x28
 8001fe8:	e041      	b.n	800206e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10b      	bne.n	8002010 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	461a      	mov	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	629a      	str	r2, [r3, #40]	; 0x28
 800200e:	e02e      	b.n	800206e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002026:	2b01      	cmp	r3, #1
 8002028:	d103      	bne.n	8002032 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	0c1b      	lsrs	r3, r3, #16
 800203a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800203e:	1f1a      	subs	r2, r3, #4
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	461a      	mov	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800206a:	2300      	movs	r3, #0
 800206c:	e010      	b.n	8002090 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	db02      	blt.n	800207e <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2b03      	cmp	r3, #3
 800207c:	d99c      	bls.n	8001fb8 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
}
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ac:	3314      	adds	r3, #20
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b4:	2b40      	cmp	r3, #64	; 0x40
 80020b6:	d112      	bne.n	80020de <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f002 fe01 	bl	8004cc0 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020c6:	3314      	adds	r3, #20
 80020c8:	2240      	movs	r2, #64	; 0x40
 80020ca:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80020dc:	e01b      	b.n	8002116 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e6:	3314      	adds	r3, #20
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d111      	bne.n	8002116 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f839 	bl	800216a <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002100:	3314      	adds	r3, #20
 8002102:	2201      	movs	r2, #1
 8002104:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800211e:	3314      	adds	r3, #20
 8002120:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002124:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800212e:	3314      	adds	r3, #20
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800213a:	d112      	bne.n	8002162 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f81e 	bl	800217e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800214a:	3314      	adds	r3, #20
 800214c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002150:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b086      	sub	sp, #24
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	460b      	mov	r3, r1
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b82      	cmp	r3, #130	; 0x82
 80021b2:	d101      	bne.n	80021b8 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80021b4:	2302      	movs	r3, #2
 80021b6:	e050      	b.n	800225a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2282      	movs	r2, #130	; 0x82
 80021bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f003 031c 	and.w	r3, r3, #28
 80021ce:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8a1b      	ldrh	r3, [r3, #16]
 80021d4:	02db      	lsls	r3, r3, #11
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	4313      	orrs	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80021de:	897b      	ldrh	r3, [r7, #10]
 80021e0:	019b      	lsls	r3, r3, #6
 80021e2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f023 0302 	bic.w	r3, r3, #2
 80021f2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002204:	f7fe ff6a 	bl	80010dc <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800220a:	e015      	b.n	8002238 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800220c:	f7fe ff66 	bl	80010dc <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221a:	d309      	bcc.n	8002230 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e014      	b.n	800225a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1e4      	bne.n	800220c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	b29b      	uxth	r3, r3
 800224a:	461a      	mov	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b086      	sub	sp, #24
 8002266:	af00      	add	r7, sp, #0
 8002268:	60f8      	str	r0, [r7, #12]
 800226a:	460b      	mov	r3, r1
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b42      	cmp	r3, #66	; 0x42
 8002282:	d101      	bne.n	8002288 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002284:	2302      	movs	r3, #2
 8002286:	e04e      	b.n	8002326 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2242      	movs	r2, #66	; 0x42
 800228c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	f003 031c 	and.w	r3, r3, #28
 800229e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8a1b      	ldrh	r3, [r3, #16]
 80022a4:	02db      	lsls	r3, r3, #11
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80022ae:	897b      	ldrh	r3, [r7, #10]
 80022b0:	019b      	lsls	r3, r3, #6
 80022b2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f043 0302 	orr.w	r3, r3, #2
 80022c2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80022de:	f7fe fefd 	bl	80010dc <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022e4:	e015      	b.n	8002312 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80022e6:	f7fe fef9 	bl	80010dc <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f4:	d309      	bcc.n	800230a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e00d      	b.n	8002326 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1e4      	bne.n	80022e6 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_ETH_Start+0x16>
 8002340:	2302      	movs	r3, #2
 8002342:	e01f      	b.n	8002384 <HAL_ETH_Start+0x56>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 fb45 	bl	80029e4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 fb7c 	bl	8002a58 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 fc13 	bl	8002b8c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 fbb0 	bl	8002acc <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 fbdd 	bl	8002b2c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_ETH_Stop+0x16>
 800239e:	2302      	movs	r3, #2
 80023a0:	e01f      	b.n	80023e2 <HAL_ETH_Stop+0x56>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2202      	movs	r2, #2
 80023ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fba2 	bl	8002afc <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 fbcf 	bl	8002b5c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 fb67 	bl	8002a92 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 fbe1 	bl	8002b8c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 fb27 	bl	8002a1e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_ETH_ConfigMAC+0x1c>
 8002404:	2302      	movs	r3, #2
 8002406:	e0e4      	b.n	80025d2 <HAL_ETH_ConfigMAC+0x1e6>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2202      	movs	r2, #2
 8002414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 80b1 	beq.w	8002582 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	4b6c      	ldr	r3, [pc, #432]	; (80025dc <HAL_ETH_ConfigMAC+0x1f0>)
 800242c:	4013      	ands	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002438:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800243e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002444:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800244a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002450:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002456:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 800245c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002462:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002468:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800246e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002474:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800247a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002492:	2001      	movs	r0, #1
 8002494:	f7fe fe2e 	bl	80010f4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80024a8:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80024ae:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80024b4:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80024ba:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80024c0:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80024c6:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80024d2:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80024d4:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80024de:	2001      	movs	r0, #1
 80024e0:	f7fe fe08 	bl	80010f4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80024f4:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024fe:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800250e:	4013      	ands	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002516:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800251c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002522:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002528:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800252e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002534:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4313      	orrs	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800254c:	2001      	movs	r0, #1
 800254e:	f7fe fdd1 	bl	80010f4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002572:	2001      	movs	r0, #1
 8002574:	f7fe fdbe 	bl	80010f4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	61da      	str	r2, [r3, #28]
 8002580:	e01e      	b.n	80025c0 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002590:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025b2:	2001      	movs	r0, #1
 80025b4:	f7fe fd9e 	bl	80010f4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	ff20810f 	.word	0xff20810f

080025e0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b0b0      	sub	sp, #192	; 0xc0
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d007      	beq.n	8002606 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025fc:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002604:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002606:	2300      	movs	r3, #0
 8002608:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800260a:	2300      	movs	r3, #0
 800260c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800260e:	2300      	movs	r3, #0
 8002610:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002612:	2300      	movs	r3, #0
 8002614:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002616:	2300      	movs	r3, #0
 8002618:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800261a:	2300      	movs	r3, #0
 800261c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d103      	bne.n	800262e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800262a:	663b      	str	r3, [r7, #96]	; 0x60
 800262c:	e001      	b.n	8002632 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800262e:	2300      	movs	r3, #0
 8002630:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002632:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002636:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002638:	2300      	movs	r3, #0
 800263a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800263c:	2300      	movs	r3, #0
 800263e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002640:	2300      	movs	r3, #0
 8002642:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002644:	2300      	movs	r3, #0
 8002646:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002648:	2300      	movs	r3, #0
 800264a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800264c:	2340      	movs	r3, #64	; 0x40
 800264e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002650:	2300      	movs	r3, #0
 8002652:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002656:	2300      	movs	r3, #0
 8002658:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800265c:	2300      	movs	r3, #0
 800265e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002662:	2300      	movs	r3, #0
 8002664:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002668:	2300      	movs	r3, #0
 800266a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800266e:	2300      	movs	r3, #0
 8002670:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002674:	2300      	movs	r3, #0
 8002676:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800267a:	2300      	movs	r3, #0
 800267c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002686:	2300      	movs	r3, #0
 8002688:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800268c:	2300      	movs	r3, #0
 800268e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002692:	2300      	movs	r3, #0
 8002694:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002698:	2300      	movs	r3, #0
 800269a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800269e:	2300      	movs	r3, #0
 80026a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80026b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026b8:	4bac      	ldr	r3, [pc, #688]	; (800296c <ETH_MACDMAConfig+0x38c>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80026c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80026c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80026c4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80026c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80026c8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80026ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80026cc:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80026d2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80026d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80026d6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80026d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80026da:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80026e0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80026e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80026e4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80026e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80026e8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80026ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80026ec:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80026ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80026f0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80026f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80026f4:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80026f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002708:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002714:	2001      	movs	r0, #1
 8002716:	f7fe fced 	bl	80010f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002722:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002724:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002728:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800272a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800272c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800272e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002732:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002734:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002738:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800273a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800273e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002740:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002744:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002748:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002750:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002752:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800275e:	2001      	movs	r0, #1
 8002760:	f7fe fcc8 	bl	80010f4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800276c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002776:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002780:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800278c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002790:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002794:	4013      	ands	r3, r2
 8002796:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800279a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800279e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80027a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80027a4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80027a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80027aa:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80027ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80027b0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80027b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80027b6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80027b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80027bc:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80027be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027d0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80027dc:	2001      	movs	r0, #1
 80027de:	f7fe fc89 	bl	80010f4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027ea:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80027ec:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80027f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002806:	2001      	movs	r0, #1
 8002808:	f7fe fc74 	bl	80010f4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002814:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002816:	2300      	movs	r3, #0
 8002818:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800281a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800281e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002820:	2300      	movs	r3, #0
 8002822:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002824:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002828:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800282a:	2300      	movs	r3, #0
 800282c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800282e:	2300      	movs	r3, #0
 8002830:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002832:	2300      	movs	r3, #0
 8002834:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002836:	2300      	movs	r3, #0
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800283a:	2304      	movs	r3, #4
 800283c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800283e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002842:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002844:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002848:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800284a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800284e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002854:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002856:	2380      	movs	r3, #128	; 0x80
 8002858:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800285a:	2300      	movs	r3, #0
 800285c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800285e:	2300      	movs	r3, #0
 8002860:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800286a:	3318      	adds	r3, #24
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002872:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002876:	4b3e      	ldr	r3, [pc, #248]	; (8002970 <ETH_MACDMAConfig+0x390>)
 8002878:	4013      	ands	r3, r2
 800287a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800287e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002880:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002882:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002884:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002886:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002888:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800288a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800288c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800288e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002890:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002892:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002894:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002896:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800289a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800289c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800289e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80028a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028b2:	3318      	adds	r3, #24
 80028b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028b8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028c2:	3318      	adds	r3, #24
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80028ca:	2001      	movs	r0, #1
 80028cc:	f7fe fc12 	bl	80010f4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d8:	3318      	adds	r3, #24
 80028da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028de:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80028e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80028e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80028e4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80028e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80028e8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80028ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80028ec:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80028ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80028f0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80028f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028f4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80028f6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80028f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80028fa:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002908:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002918:	2001      	movs	r0, #1
 800291a:	f7fe fbeb 	bl	80010f4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002926:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800292a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d10f      	bne.n	8002954 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800293c:	331c      	adds	r3, #28
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002948:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800294c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002950:	331c      	adds	r3, #28
 8002952:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	461a      	mov	r2, r3
 800295a:	2100      	movs	r1, #0
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f809 	bl	8002974 <ETH_MACAddressConfig>
}
 8002962:	bf00      	nop
 8002964:	37c0      	adds	r7, #192	; 0xc0
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	ff20810f 	.word	0xff20810f
 8002970:	f8de3f23 	.word	0xf8de3f23

08002974 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3305      	adds	r3, #5
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	3204      	adds	r2, #4
 800298c:	7812      	ldrb	r2, [r2, #0]
 800298e:	4313      	orrs	r3, r2
 8002990:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	4b11      	ldr	r3, [pc, #68]	; (80029dc <ETH_MACAddressConfig+0x68>)
 8002996:	4413      	add	r3, r2
 8002998:	461a      	mov	r2, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3303      	adds	r3, #3
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	061a      	lsls	r2, r3, #24
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3302      	adds	r3, #2
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	041b      	lsls	r3, r3, #16
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3301      	adds	r3, #1
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	021b      	lsls	r3, r3, #8
 80029b8:	4313      	orrs	r3, r2
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	7812      	ldrb	r2, [r2, #0]
 80029be:	4313      	orrs	r3, r2
 80029c0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <ETH_MACAddressConfig+0x6c>)
 80029c6:	4413      	add	r3, r2
 80029c8:	461a      	mov	r2, r3
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	6013      	str	r3, [r2, #0]
}
 80029ce:	bf00      	nop
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40028040 	.word	0x40028040
 80029e0:	40028044 	.word	0x40028044

080029e4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0208 	orr.w	r2, r2, #8
 80029fe:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002a08:	2001      	movs	r0, #1
 8002a0a:	f000 f8e9 	bl	8002be0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	601a      	str	r2, [r3, #0]
}
 8002a16:	bf00      	nop
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0208 	bic.w	r2, r2, #8
 8002a38:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002a42:	2001      	movs	r0, #1
 8002a44:	f000 f8cc 	bl	8002be0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	601a      	str	r2, [r3, #0]
}
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0204 	orr.w	r2, r2, #4
 8002a72:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	f000 f8af 	bl	8002be0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	601a      	str	r2, [r3, #0]
}
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b084      	sub	sp, #16
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0204 	bic.w	r2, r2, #4
 8002aac:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002ab6:	2001      	movs	r0, #1
 8002ab8:	f000 f892 	bl	8002be0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	601a      	str	r2, [r3, #0]
}
 8002ac4:	bf00      	nop
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002adc:	3318      	adds	r3, #24
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aec:	3318      	adds	r3, #24
 8002aee:	601a      	str	r2, [r3, #0]
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b0c:	3318      	adds	r3, #24
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b1c:	3318      	adds	r3, #24
 8002b1e:	601a      	str	r2, [r3, #0]
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b3c:	3318      	adds	r3, #24
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 0202 	orr.w	r2, r2, #2
 8002b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b4c:	3318      	adds	r3, #24
 8002b4e:	601a      	str	r2, [r3, #0]
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b6c:	3318      	adds	r3, #24
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0202 	bic.w	r2, r2, #2
 8002b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b7c:	3318      	adds	r3, #24
 8002b7e:	601a      	str	r2, [r3, #0]
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ba0:	3318      	adds	r3, #24
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bb0:	3318      	adds	r3, #24
 8002bb2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bbc:	3318      	adds	r3, #24
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002bc2:	2001      	movs	r0, #1
 8002bc4:	f000 f80c 	bl	8002be0 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bd2:	3318      	adds	r3, #24
 8002bd4:	601a      	str	r2, [r3, #0]
}
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <ETH_Delay+0x38>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a0b      	ldr	r2, [pc, #44]	; (8002c1c <ETH_Delay+0x3c>)
 8002bee:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf2:	0a5b      	lsrs	r3, r3, #9
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	fb02 f303 	mul.w	r3, r2, r3
 8002bfa:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002bfc:	bf00      	nop
  } 
  while (Delay --);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1e5a      	subs	r2, r3, #1
 8002c02:	60fa      	str	r2, [r7, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1f9      	bne.n	8002bfc <ETH_Delay+0x1c>
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000000 	.word	0x20000000
 8002c1c:	10624dd3 	.word	0x10624dd3

08002c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b089      	sub	sp, #36	; 0x24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	e16b      	b.n	8002f14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	f040 815a 	bne.w	8002f0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d005      	beq.n	8002c72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d130      	bne.n	8002cd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	43db      	mvns	r3, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4013      	ands	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ca8:	2201      	movs	r2, #1
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 0201 	and.w	r2, r3, #1
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 0303 	and.w	r3, r3, #3
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d017      	beq.n	8002d10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	2203      	movs	r2, #3
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d123      	bne.n	8002d64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	08da      	lsrs	r2, r3, #3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3208      	adds	r2, #8
 8002d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	220f      	movs	r2, #15
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	08da      	lsrs	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3208      	adds	r2, #8
 8002d5e:	69b9      	ldr	r1, [r7, #24]
 8002d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	2203      	movs	r2, #3
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0203 	and.w	r2, r3, #3
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 80b4 	beq.w	8002f0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	4b60      	ldr	r3, [pc, #384]	; (8002f2c <HAL_GPIO_Init+0x30c>)
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	4a5f      	ldr	r2, [pc, #380]	; (8002f2c <HAL_GPIO_Init+0x30c>)
 8002db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002db4:	6453      	str	r3, [r2, #68]	; 0x44
 8002db6:	4b5d      	ldr	r3, [pc, #372]	; (8002f2c <HAL_GPIO_Init+0x30c>)
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dc2:	4a5b      	ldr	r2, [pc, #364]	; (8002f30 <HAL_GPIO_Init+0x310>)
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	089b      	lsrs	r3, r3, #2
 8002dc8:	3302      	adds	r3, #2
 8002dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	220f      	movs	r2, #15
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a52      	ldr	r2, [pc, #328]	; (8002f34 <HAL_GPIO_Init+0x314>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d02b      	beq.n	8002e46 <HAL_GPIO_Init+0x226>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a51      	ldr	r2, [pc, #324]	; (8002f38 <HAL_GPIO_Init+0x318>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d025      	beq.n	8002e42 <HAL_GPIO_Init+0x222>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a50      	ldr	r2, [pc, #320]	; (8002f3c <HAL_GPIO_Init+0x31c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d01f      	beq.n	8002e3e <HAL_GPIO_Init+0x21e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a4f      	ldr	r2, [pc, #316]	; (8002f40 <HAL_GPIO_Init+0x320>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d019      	beq.n	8002e3a <HAL_GPIO_Init+0x21a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a4e      	ldr	r2, [pc, #312]	; (8002f44 <HAL_GPIO_Init+0x324>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d013      	beq.n	8002e36 <HAL_GPIO_Init+0x216>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a4d      	ldr	r2, [pc, #308]	; (8002f48 <HAL_GPIO_Init+0x328>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d00d      	beq.n	8002e32 <HAL_GPIO_Init+0x212>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a4c      	ldr	r2, [pc, #304]	; (8002f4c <HAL_GPIO_Init+0x32c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d007      	beq.n	8002e2e <HAL_GPIO_Init+0x20e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a4b      	ldr	r2, [pc, #300]	; (8002f50 <HAL_GPIO_Init+0x330>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d101      	bne.n	8002e2a <HAL_GPIO_Init+0x20a>
 8002e26:	2307      	movs	r3, #7
 8002e28:	e00e      	b.n	8002e48 <HAL_GPIO_Init+0x228>
 8002e2a:	2308      	movs	r3, #8
 8002e2c:	e00c      	b.n	8002e48 <HAL_GPIO_Init+0x228>
 8002e2e:	2306      	movs	r3, #6
 8002e30:	e00a      	b.n	8002e48 <HAL_GPIO_Init+0x228>
 8002e32:	2305      	movs	r3, #5
 8002e34:	e008      	b.n	8002e48 <HAL_GPIO_Init+0x228>
 8002e36:	2304      	movs	r3, #4
 8002e38:	e006      	b.n	8002e48 <HAL_GPIO_Init+0x228>
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e004      	b.n	8002e48 <HAL_GPIO_Init+0x228>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e002      	b.n	8002e48 <HAL_GPIO_Init+0x228>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <HAL_GPIO_Init+0x228>
 8002e46:	2300      	movs	r3, #0
 8002e48:	69fa      	ldr	r2, [r7, #28]
 8002e4a:	f002 0203 	and.w	r2, r2, #3
 8002e4e:	0092      	lsls	r2, r2, #2
 8002e50:	4093      	lsls	r3, r2
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e58:	4935      	ldr	r1, [pc, #212]	; (8002f30 <HAL_GPIO_Init+0x310>)
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	089b      	lsrs	r3, r3, #2
 8002e5e:	3302      	adds	r3, #2
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e66:	4b3b      	ldr	r3, [pc, #236]	; (8002f54 <HAL_GPIO_Init+0x334>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e8a:	4a32      	ldr	r2, [pc, #200]	; (8002f54 <HAL_GPIO_Init+0x334>)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e90:	4b30      	ldr	r3, [pc, #192]	; (8002f54 <HAL_GPIO_Init+0x334>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eb4:	4a27      	ldr	r2, [pc, #156]	; (8002f54 <HAL_GPIO_Init+0x334>)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eba:	4b26      	ldr	r3, [pc, #152]	; (8002f54 <HAL_GPIO_Init+0x334>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ede:	4a1d      	ldr	r2, [pc, #116]	; (8002f54 <HAL_GPIO_Init+0x334>)
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ee4:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <HAL_GPIO_Init+0x334>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f08:	4a12      	ldr	r2, [pc, #72]	; (8002f54 <HAL_GPIO_Init+0x334>)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	3301      	adds	r3, #1
 8002f12:	61fb      	str	r3, [r7, #28]
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	2b0f      	cmp	r3, #15
 8002f18:	f67f ae90 	bls.w	8002c3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f1c:	bf00      	nop
 8002f1e:	bf00      	nop
 8002f20:	3724      	adds	r7, #36	; 0x24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	40013800 	.word	0x40013800
 8002f34:	40020000 	.word	0x40020000
 8002f38:	40020400 	.word	0x40020400
 8002f3c:	40020800 	.word	0x40020800
 8002f40:	40020c00 	.word	0x40020c00
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40021400 	.word	0x40021400
 8002f4c:	40021800 	.word	0x40021800
 8002f50:	40021c00 	.word	0x40021c00
 8002f54:	40013c00 	.word	0x40013c00

08002f58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	887b      	ldrh	r3, [r7, #2]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f70:	2301      	movs	r3, #1
 8002f72:	73fb      	strb	r3, [r7, #15]
 8002f74:	e001      	b.n	8002f7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f76:	2300      	movs	r3, #0
 8002f78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	807b      	strh	r3, [r7, #2]
 8002f94:	4613      	mov	r3, r2
 8002f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f98:	787b      	ldrb	r3, [r7, #1]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f9e:	887a      	ldrh	r2, [r7, #2]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fa4:	e003      	b.n	8002fae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fa6:	887b      	ldrh	r3, [r7, #2]
 8002fa8:	041a      	lsls	r2, r3, #16
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	619a      	str	r2, [r3, #24]
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
	...

08002fbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e264      	b.n	8003498 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d075      	beq.n	80030c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fda:	4ba3      	ldr	r3, [pc, #652]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d00c      	beq.n	8003000 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fe6:	4ba0      	ldr	r3, [pc, #640]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d112      	bne.n	8003018 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ff2:	4b9d      	ldr	r3, [pc, #628]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ffe:	d10b      	bne.n	8003018 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003000:	4b99      	ldr	r3, [pc, #612]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d05b      	beq.n	80030c4 <HAL_RCC_OscConfig+0x108>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d157      	bne.n	80030c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e23f      	b.n	8003498 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003020:	d106      	bne.n	8003030 <HAL_RCC_OscConfig+0x74>
 8003022:	4b91      	ldr	r3, [pc, #580]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a90      	ldr	r2, [pc, #576]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 8003028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	e01d      	b.n	800306c <HAL_RCC_OscConfig+0xb0>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003038:	d10c      	bne.n	8003054 <HAL_RCC_OscConfig+0x98>
 800303a:	4b8b      	ldr	r3, [pc, #556]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a8a      	ldr	r2, [pc, #552]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 8003040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	4b88      	ldr	r3, [pc, #544]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a87      	ldr	r2, [pc, #540]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 800304c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	e00b      	b.n	800306c <HAL_RCC_OscConfig+0xb0>
 8003054:	4b84      	ldr	r3, [pc, #528]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a83      	ldr	r2, [pc, #524]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 800305a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	4b81      	ldr	r3, [pc, #516]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a80      	ldr	r2, [pc, #512]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 8003066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800306a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d013      	beq.n	800309c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7fe f832 	bl	80010dc <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800307c:	f7fe f82e 	bl	80010dc <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	; 0x64
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e204      	b.n	8003498 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308e:	4b76      	ldr	r3, [pc, #472]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0xc0>
 800309a:	e014      	b.n	80030c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7fe f81e 	bl	80010dc <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a4:	f7fe f81a 	bl	80010dc <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b64      	cmp	r3, #100	; 0x64
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e1f0      	b.n	8003498 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030b6:	4b6c      	ldr	r3, [pc, #432]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0xe8>
 80030c2:	e000      	b.n	80030c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d063      	beq.n	800319a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030d2:	4b65      	ldr	r3, [pc, #404]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00b      	beq.n	80030f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030de:	4b62      	ldr	r3, [pc, #392]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d11c      	bne.n	8003124 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ea:	4b5f      	ldr	r3, [pc, #380]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d116      	bne.n	8003124 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f6:	4b5c      	ldr	r3, [pc, #368]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <HAL_RCC_OscConfig+0x152>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d001      	beq.n	800310e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e1c4      	b.n	8003498 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310e:	4b56      	ldr	r3, [pc, #344]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4952      	ldr	r1, [pc, #328]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 800311e:	4313      	orrs	r3, r2
 8003120:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003122:	e03a      	b.n	800319a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d020      	beq.n	800316e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800312c:	4b4f      	ldr	r3, [pc, #316]	; (800326c <HAL_RCC_OscConfig+0x2b0>)
 800312e:	2201      	movs	r2, #1
 8003130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003132:	f7fd ffd3 	bl	80010dc <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800313a:	f7fd ffcf 	bl	80010dc <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e1a5      	b.n	8003498 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314c:	4b46      	ldr	r3, [pc, #280]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0f0      	beq.n	800313a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003158:	4b43      	ldr	r3, [pc, #268]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4940      	ldr	r1, [pc, #256]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 8003168:	4313      	orrs	r3, r2
 800316a:	600b      	str	r3, [r1, #0]
 800316c:	e015      	b.n	800319a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800316e:	4b3f      	ldr	r3, [pc, #252]	; (800326c <HAL_RCC_OscConfig+0x2b0>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7fd ffb2 	bl	80010dc <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800317c:	f7fd ffae 	bl	80010dc <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e184      	b.n	8003498 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800318e:	4b36      	ldr	r3, [pc, #216]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d030      	beq.n	8003208 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d016      	beq.n	80031dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ae:	4b30      	ldr	r3, [pc, #192]	; (8003270 <HAL_RCC_OscConfig+0x2b4>)
 80031b0:	2201      	movs	r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b4:	f7fd ff92 	bl	80010dc <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031bc:	f7fd ff8e 	bl	80010dc <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e164      	b.n	8003498 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ce:	4b26      	ldr	r3, [pc, #152]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 80031d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0x200>
 80031da:	e015      	b.n	8003208 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031dc:	4b24      	ldr	r3, [pc, #144]	; (8003270 <HAL_RCC_OscConfig+0x2b4>)
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e2:	f7fd ff7b 	bl	80010dc <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ea:	f7fd ff77 	bl	80010dc <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e14d      	b.n	8003498 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031fc:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 80031fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1f0      	bne.n	80031ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80a0 	beq.w	8003356 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003216:	2300      	movs	r3, #0
 8003218:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800321a:	4b13      	ldr	r3, [pc, #76]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10f      	bne.n	8003246 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	60bb      	str	r3, [r7, #8]
 800322a:	4b0f      	ldr	r3, [pc, #60]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	4a0e      	ldr	r2, [pc, #56]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 8003230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003234:	6413      	str	r3, [r2, #64]	; 0x40
 8003236:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <HAL_RCC_OscConfig+0x2ac>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323e:	60bb      	str	r3, [r7, #8]
 8003240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003242:	2301      	movs	r3, #1
 8003244:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003246:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <HAL_RCC_OscConfig+0x2b8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324e:	2b00      	cmp	r3, #0
 8003250:	d121      	bne.n	8003296 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003252:	4b08      	ldr	r3, [pc, #32]	; (8003274 <HAL_RCC_OscConfig+0x2b8>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a07      	ldr	r2, [pc, #28]	; (8003274 <HAL_RCC_OscConfig+0x2b8>)
 8003258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800325c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800325e:	f7fd ff3d 	bl	80010dc <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003264:	e011      	b.n	800328a <HAL_RCC_OscConfig+0x2ce>
 8003266:	bf00      	nop
 8003268:	40023800 	.word	0x40023800
 800326c:	42470000 	.word	0x42470000
 8003270:	42470e80 	.word	0x42470e80
 8003274:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003278:	f7fd ff30 	bl	80010dc <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e106      	b.n	8003498 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328a:	4b85      	ldr	r3, [pc, #532]	; (80034a0 <HAL_RCC_OscConfig+0x4e4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0f0      	beq.n	8003278 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d106      	bne.n	80032ac <HAL_RCC_OscConfig+0x2f0>
 800329e:	4b81      	ldr	r3, [pc, #516]	; (80034a4 <HAL_RCC_OscConfig+0x4e8>)
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	4a80      	ldr	r2, [pc, #512]	; (80034a4 <HAL_RCC_OscConfig+0x4e8>)
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	6713      	str	r3, [r2, #112]	; 0x70
 80032aa:	e01c      	b.n	80032e6 <HAL_RCC_OscConfig+0x32a>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	2b05      	cmp	r3, #5
 80032b2:	d10c      	bne.n	80032ce <HAL_RCC_OscConfig+0x312>
 80032b4:	4b7b      	ldr	r3, [pc, #492]	; (80034a4 <HAL_RCC_OscConfig+0x4e8>)
 80032b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b8:	4a7a      	ldr	r2, [pc, #488]	; (80034a4 <HAL_RCC_OscConfig+0x4e8>)
 80032ba:	f043 0304 	orr.w	r3, r3, #4
 80032be:	6713      	str	r3, [r2, #112]	; 0x70
 80032c0:	4b78      	ldr	r3, [pc, #480]	; (80034a4 <HAL_RCC_OscConfig+0x4e8>)
 80032c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c4:	4a77      	ldr	r2, [pc, #476]	; (80034a4 <HAL_RCC_OscConfig+0x4e8>)
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	6713      	str	r3, [r2, #112]	; 0x70
 80032cc:	e00b      	b.n	80032e6 <HAL_RCC_OscConfig+0x32a>
 80032ce:	4b75      	ldr	r3, [pc, #468]	; (80034a4 <HAL_RCC_OscConfig+0x4e8>)
 80032d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d2:	4a74      	ldr	r2, [pc, #464]	; (80034a4 <HAL_RCC_OscConfig+0x4e8>)
 80032d4:	f023 0301 	bic.w	r3, r3, #1
 80032d8:	6713      	str	r3, [r2, #112]	; 0x70
 80032da:	4b72      	ldr	r3, [pc, #456]	; (80034a4 <HAL_RCC_OscConfig+0x4e8>)
 80032dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032de:	4a71      	ldr	r2, [pc, #452]	; (80034a4 <HAL_RCC_OscConfig+0x4e8>)
 80032e0:	f023 0304 	bic.w	r3, r3, #4
 80032e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d015      	beq.n	800331a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ee:	f7fd fef5 	bl	80010dc <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f4:	e00a      	b.n	800330c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f6:	f7fd fef1 	bl	80010dc <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	f241 3288 	movw	r2, #5000	; 0x1388
 8003304:	4293      	cmp	r3, r2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e0c5      	b.n	8003498 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330c:	4b65      	ldr	r3, [pc, #404]	; (80034a4 <HAL_RCC_OscConfig+0x4e8>)
 800330e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0ee      	beq.n	80032f6 <HAL_RCC_OscConfig+0x33a>
 8003318:	e014      	b.n	8003344 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800331a:	f7fd fedf 	bl	80010dc <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003320:	e00a      	b.n	8003338 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003322:	f7fd fedb 	bl	80010dc <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003330:	4293      	cmp	r3, r2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e0af      	b.n	8003498 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003338:	4b5a      	ldr	r3, [pc, #360]	; (80034a4 <HAL_RCC_OscConfig+0x4e8>)
 800333a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1ee      	bne.n	8003322 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003344:	7dfb      	ldrb	r3, [r7, #23]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d105      	bne.n	8003356 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800334a:	4b56      	ldr	r3, [pc, #344]	; (80034a4 <HAL_RCC_OscConfig+0x4e8>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	4a55      	ldr	r2, [pc, #340]	; (80034a4 <HAL_RCC_OscConfig+0x4e8>)
 8003350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003354:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 809b 	beq.w	8003496 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003360:	4b50      	ldr	r3, [pc, #320]	; (80034a4 <HAL_RCC_OscConfig+0x4e8>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 030c 	and.w	r3, r3, #12
 8003368:	2b08      	cmp	r3, #8
 800336a:	d05c      	beq.n	8003426 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	2b02      	cmp	r3, #2
 8003372:	d141      	bne.n	80033f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003374:	4b4c      	ldr	r3, [pc, #304]	; (80034a8 <HAL_RCC_OscConfig+0x4ec>)
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337a:	f7fd feaf 	bl	80010dc <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003382:	f7fd feab 	bl	80010dc <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e081      	b.n	8003498 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003394:	4b43      	ldr	r3, [pc, #268]	; (80034a4 <HAL_RCC_OscConfig+0x4e8>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1f0      	bne.n	8003382 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69da      	ldr	r2, [r3, #28]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	019b      	lsls	r3, r3, #6
 80033b0:	431a      	orrs	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b6:	085b      	lsrs	r3, r3, #1
 80033b8:	3b01      	subs	r3, #1
 80033ba:	041b      	lsls	r3, r3, #16
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	061b      	lsls	r3, r3, #24
 80033c4:	4937      	ldr	r1, [pc, #220]	; (80034a4 <HAL_RCC_OscConfig+0x4e8>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ca:	4b37      	ldr	r3, [pc, #220]	; (80034a8 <HAL_RCC_OscConfig+0x4ec>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d0:	f7fd fe84 	bl	80010dc <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d8:	f7fd fe80 	bl	80010dc <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e056      	b.n	8003498 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ea:	4b2e      	ldr	r3, [pc, #184]	; (80034a4 <HAL_RCC_OscConfig+0x4e8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0x41c>
 80033f6:	e04e      	b.n	8003496 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f8:	4b2b      	ldr	r3, [pc, #172]	; (80034a8 <HAL_RCC_OscConfig+0x4ec>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fe:	f7fd fe6d 	bl	80010dc <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003406:	f7fd fe69 	bl	80010dc <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e03f      	b.n	8003498 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003418:	4b22      	ldr	r3, [pc, #136]	; (80034a4 <HAL_RCC_OscConfig+0x4e8>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1f0      	bne.n	8003406 <HAL_RCC_OscConfig+0x44a>
 8003424:	e037      	b.n	8003496 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e032      	b.n	8003498 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003432:	4b1c      	ldr	r3, [pc, #112]	; (80034a4 <HAL_RCC_OscConfig+0x4e8>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d028      	beq.n	8003492 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800344a:	429a      	cmp	r2, r3
 800344c:	d121      	bne.n	8003492 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003458:	429a      	cmp	r2, r3
 800345a:	d11a      	bne.n	8003492 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003462:	4013      	ands	r3, r2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003468:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800346a:	4293      	cmp	r3, r2
 800346c:	d111      	bne.n	8003492 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003478:	085b      	lsrs	r3, r3, #1
 800347a:	3b01      	subs	r3, #1
 800347c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800347e:	429a      	cmp	r2, r3
 8003480:	d107      	bne.n	8003492 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800348e:	429a      	cmp	r2, r3
 8003490:	d001      	beq.n	8003496 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40007000 	.word	0x40007000
 80034a4:	40023800 	.word	0x40023800
 80034a8:	42470060 	.word	0x42470060

080034ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0cc      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034c0:	4b68      	ldr	r3, [pc, #416]	; (8003664 <HAL_RCC_ClockConfig+0x1b8>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d90c      	bls.n	80034e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ce:	4b65      	ldr	r3, [pc, #404]	; (8003664 <HAL_RCC_ClockConfig+0x1b8>)
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d6:	4b63      	ldr	r3, [pc, #396]	; (8003664 <HAL_RCC_ClockConfig+0x1b8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d001      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e0b8      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d020      	beq.n	8003536 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003500:	4b59      	ldr	r3, [pc, #356]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	4a58      	ldr	r2, [pc, #352]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800350a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003518:	4b53      	ldr	r3, [pc, #332]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4a52      	ldr	r2, [pc, #328]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003522:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003524:	4b50      	ldr	r3, [pc, #320]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	494d      	ldr	r1, [pc, #308]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	4313      	orrs	r3, r2
 8003534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d044      	beq.n	80035cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d107      	bne.n	800355a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354a:	4b47      	ldr	r3, [pc, #284]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d119      	bne.n	800358a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e07f      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d003      	beq.n	800356a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003566:	2b03      	cmp	r3, #3
 8003568:	d107      	bne.n	800357a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356a:	4b3f      	ldr	r3, [pc, #252]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d109      	bne.n	800358a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e06f      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357a:	4b3b      	ldr	r3, [pc, #236]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e067      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800358a:	4b37      	ldr	r3, [pc, #220]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f023 0203 	bic.w	r2, r3, #3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	4934      	ldr	r1, [pc, #208]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003598:	4313      	orrs	r3, r2
 800359a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800359c:	f7fd fd9e 	bl	80010dc <HAL_GetTick>
 80035a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a2:	e00a      	b.n	80035ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a4:	f7fd fd9a 	bl	80010dc <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e04f      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ba:	4b2b      	ldr	r3, [pc, #172]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 020c 	and.w	r2, r3, #12
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d1eb      	bne.n	80035a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035cc:	4b25      	ldr	r3, [pc, #148]	; (8003664 <HAL_RCC_ClockConfig+0x1b8>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d20c      	bcs.n	80035f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035da:	4b22      	ldr	r3, [pc, #136]	; (8003664 <HAL_RCC_ClockConfig+0x1b8>)
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e2:	4b20      	ldr	r3, [pc, #128]	; (8003664 <HAL_RCC_ClockConfig+0x1b8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e032      	b.n	800365a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003600:	4b19      	ldr	r3, [pc, #100]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	4916      	ldr	r1, [pc, #88]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	4313      	orrs	r3, r2
 8003610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d009      	beq.n	8003632 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800361e:	4b12      	ldr	r3, [pc, #72]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	490e      	ldr	r1, [pc, #56]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003632:	f000 f821 	bl	8003678 <HAL_RCC_GetSysClockFreq>
 8003636:	4602      	mov	r2, r0
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	091b      	lsrs	r3, r3, #4
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	490a      	ldr	r1, [pc, #40]	; (800366c <HAL_RCC_ClockConfig+0x1c0>)
 8003644:	5ccb      	ldrb	r3, [r1, r3]
 8003646:	fa22 f303 	lsr.w	r3, r2, r3
 800364a:	4a09      	ldr	r2, [pc, #36]	; (8003670 <HAL_RCC_ClockConfig+0x1c4>)
 800364c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800364e:	4b09      	ldr	r3, [pc, #36]	; (8003674 <HAL_RCC_ClockConfig+0x1c8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fd fb76 	bl	8000d44 <HAL_InitTick>

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40023c00 	.word	0x40023c00
 8003668:	40023800 	.word	0x40023800
 800366c:	0801f46c 	.word	0x0801f46c
 8003670:	20000000 	.word	0x20000000
 8003674:	20000004 	.word	0x20000004

08003678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003678:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	607b      	str	r3, [r7, #4]
 8003684:	2300      	movs	r3, #0
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	2300      	movs	r3, #0
 800368a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003690:	4b67      	ldr	r3, [pc, #412]	; (8003830 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 030c 	and.w	r3, r3, #12
 8003698:	2b08      	cmp	r3, #8
 800369a:	d00d      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0x40>
 800369c:	2b08      	cmp	r3, #8
 800369e:	f200 80bd 	bhi.w	800381c <HAL_RCC_GetSysClockFreq+0x1a4>
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <HAL_RCC_GetSysClockFreq+0x34>
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d003      	beq.n	80036b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80036aa:	e0b7      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036ac:	4b61      	ldr	r3, [pc, #388]	; (8003834 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80036ae:	60bb      	str	r3, [r7, #8]
       break;
 80036b0:	e0b7      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036b2:	4b61      	ldr	r3, [pc, #388]	; (8003838 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80036b4:	60bb      	str	r3, [r7, #8]
      break;
 80036b6:	e0b4      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036b8:	4b5d      	ldr	r3, [pc, #372]	; (8003830 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036c2:	4b5b      	ldr	r3, [pc, #364]	; (8003830 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d04d      	beq.n	800376a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ce:	4b58      	ldr	r3, [pc, #352]	; (8003830 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	099b      	lsrs	r3, r3, #6
 80036d4:	461a      	mov	r2, r3
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036de:	f04f 0100 	mov.w	r1, #0
 80036e2:	ea02 0800 	and.w	r8, r2, r0
 80036e6:	ea03 0901 	and.w	r9, r3, r1
 80036ea:	4640      	mov	r0, r8
 80036ec:	4649      	mov	r1, r9
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	014b      	lsls	r3, r1, #5
 80036f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036fc:	0142      	lsls	r2, r0, #5
 80036fe:	4610      	mov	r0, r2
 8003700:	4619      	mov	r1, r3
 8003702:	ebb0 0008 	subs.w	r0, r0, r8
 8003706:	eb61 0109 	sbc.w	r1, r1, r9
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	018b      	lsls	r3, r1, #6
 8003714:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003718:	0182      	lsls	r2, r0, #6
 800371a:	1a12      	subs	r2, r2, r0
 800371c:	eb63 0301 	sbc.w	r3, r3, r1
 8003720:	f04f 0000 	mov.w	r0, #0
 8003724:	f04f 0100 	mov.w	r1, #0
 8003728:	00d9      	lsls	r1, r3, #3
 800372a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800372e:	00d0      	lsls	r0, r2, #3
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	eb12 0208 	adds.w	r2, r2, r8
 8003738:	eb43 0309 	adc.w	r3, r3, r9
 800373c:	f04f 0000 	mov.w	r0, #0
 8003740:	f04f 0100 	mov.w	r1, #0
 8003744:	0259      	lsls	r1, r3, #9
 8003746:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800374a:	0250      	lsls	r0, r2, #9
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	4610      	mov	r0, r2
 8003752:	4619      	mov	r1, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	461a      	mov	r2, r3
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	f7fc fd90 	bl	8000280 <__aeabi_uldivmod>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4613      	mov	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	e04a      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800376a:	4b31      	ldr	r3, [pc, #196]	; (8003830 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	099b      	lsrs	r3, r3, #6
 8003770:	461a      	mov	r2, r3
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	f240 10ff 	movw	r0, #511	; 0x1ff
 800377a:	f04f 0100 	mov.w	r1, #0
 800377e:	ea02 0400 	and.w	r4, r2, r0
 8003782:	ea03 0501 	and.w	r5, r3, r1
 8003786:	4620      	mov	r0, r4
 8003788:	4629      	mov	r1, r5
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	014b      	lsls	r3, r1, #5
 8003794:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003798:	0142      	lsls	r2, r0, #5
 800379a:	4610      	mov	r0, r2
 800379c:	4619      	mov	r1, r3
 800379e:	1b00      	subs	r0, r0, r4
 80037a0:	eb61 0105 	sbc.w	r1, r1, r5
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	018b      	lsls	r3, r1, #6
 80037ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037b2:	0182      	lsls	r2, r0, #6
 80037b4:	1a12      	subs	r2, r2, r0
 80037b6:	eb63 0301 	sbc.w	r3, r3, r1
 80037ba:	f04f 0000 	mov.w	r0, #0
 80037be:	f04f 0100 	mov.w	r1, #0
 80037c2:	00d9      	lsls	r1, r3, #3
 80037c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037c8:	00d0      	lsls	r0, r2, #3
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	1912      	adds	r2, r2, r4
 80037d0:	eb45 0303 	adc.w	r3, r5, r3
 80037d4:	f04f 0000 	mov.w	r0, #0
 80037d8:	f04f 0100 	mov.w	r1, #0
 80037dc:	0299      	lsls	r1, r3, #10
 80037de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80037e2:	0290      	lsls	r0, r2, #10
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4610      	mov	r0, r2
 80037ea:	4619      	mov	r1, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	461a      	mov	r2, r3
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	f7fc fd44 	bl	8000280 <__aeabi_uldivmod>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4613      	mov	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	0c1b      	lsrs	r3, r3, #16
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	3301      	adds	r3, #1
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	fbb2 f3f3 	udiv	r3, r2, r3
 8003818:	60bb      	str	r3, [r7, #8]
      break;
 800381a:	e002      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800381c:	4b05      	ldr	r3, [pc, #20]	; (8003834 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800381e:	60bb      	str	r3, [r7, #8]
      break;
 8003820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003822:	68bb      	ldr	r3, [r7, #8]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800382e:	bf00      	nop
 8003830:	40023800 	.word	0x40023800
 8003834:	00f42400 	.word	0x00f42400
 8003838:	007a1200 	.word	0x007a1200

0800383c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003840:	4b03      	ldr	r3, [pc, #12]	; (8003850 <HAL_RCC_GetHCLKFreq+0x14>)
 8003842:	681b      	ldr	r3, [r3, #0]
}
 8003844:	4618      	mov	r0, r3
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	20000000 	.word	0x20000000

08003854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003858:	f7ff fff0 	bl	800383c <HAL_RCC_GetHCLKFreq>
 800385c:	4602      	mov	r2, r0
 800385e:	4b05      	ldr	r3, [pc, #20]	; (8003874 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	0a9b      	lsrs	r3, r3, #10
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	4903      	ldr	r1, [pc, #12]	; (8003878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800386a:	5ccb      	ldrb	r3, [r1, r3]
 800386c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003870:	4618      	mov	r0, r3
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40023800 	.word	0x40023800
 8003878:	0801f47c 	.word	0x0801f47c

0800387c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	220f      	movs	r2, #15
 800388a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800388c:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <HAL_RCC_GetClockConfig+0x5c>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0203 	and.w	r2, r3, #3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003898:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <HAL_RCC_GetClockConfig+0x5c>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80038a4:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <HAL_RCC_GetClockConfig+0x5c>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80038b0:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <HAL_RCC_GetClockConfig+0x5c>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	08db      	lsrs	r3, r3, #3
 80038b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038be:	4b07      	ldr	r3, [pc, #28]	; (80038dc <HAL_RCC_GetClockConfig+0x60>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0207 	and.w	r2, r3, #7
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	601a      	str	r2, [r3, #0]
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40023c00 	.word	0x40023c00

080038e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e07b      	b.n	80039ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d108      	bne.n	800390c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003902:	d009      	beq.n	8003918 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	61da      	str	r2, [r3, #28]
 800390a:	e005      	b.n	8003918 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d106      	bne.n	8003938 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7fd f8fc 	bl	8000b30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800394e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003960:	431a      	orrs	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	431a      	orrs	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399c:	ea42 0103 	orr.w	r1, r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	0c1b      	lsrs	r3, r3, #16
 80039b6:	f003 0104 	and.w	r1, r3, #4
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	f003 0210 	and.w	r2, r3, #16
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69da      	ldr	r2, [r3, #28]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b08c      	sub	sp, #48	; 0x30
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	60f8      	str	r0, [r7, #12]
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	607a      	str	r2, [r7, #4]
 80039fe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a00:	2301      	movs	r3, #1
 8003a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_SPI_TransmitReceive+0x26>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e18a      	b.n	8003d2e <HAL_SPI_TransmitReceive+0x33c>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a20:	f7fd fb5c 	bl	80010dc <HAL_GetTick>
 8003a24:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a36:	887b      	ldrh	r3, [r7, #2]
 8003a38:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d00f      	beq.n	8003a62 <HAL_SPI_TransmitReceive+0x70>
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a48:	d107      	bne.n	8003a5a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d103      	bne.n	8003a5a <HAL_SPI_TransmitReceive+0x68>
 8003a52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d003      	beq.n	8003a62 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a60:	e15b      	b.n	8003d1a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <HAL_SPI_TransmitReceive+0x82>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <HAL_SPI_TransmitReceive+0x82>
 8003a6e:	887b      	ldrh	r3, [r7, #2]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d103      	bne.n	8003a7c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a7a:	e14e      	b.n	8003d1a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d003      	beq.n	8003a90 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2205      	movs	r2, #5
 8003a8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	887a      	ldrh	r2, [r7, #2]
 8003aa0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	887a      	ldrh	r2, [r7, #2]
 8003aa6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	887a      	ldrh	r2, [r7, #2]
 8003ab2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	887a      	ldrh	r2, [r7, #2]
 8003ab8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad0:	2b40      	cmp	r3, #64	; 0x40
 8003ad2:	d007      	beq.n	8003ae4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ae2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aec:	d178      	bne.n	8003be0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <HAL_SPI_TransmitReceive+0x10a>
 8003af6:	8b7b      	ldrh	r3, [r7, #26]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d166      	bne.n	8003bca <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b00:	881a      	ldrh	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	1c9a      	adds	r2, r3, #2
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b20:	e053      	b.n	8003bca <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d11b      	bne.n	8003b68 <HAL_SPI_TransmitReceive+0x176>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d016      	beq.n	8003b68 <HAL_SPI_TransmitReceive+0x176>
 8003b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d113      	bne.n	8003b68 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b44:	881a      	ldrh	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b50:	1c9a      	adds	r2, r3, #2
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d119      	bne.n	8003baa <HAL_SPI_TransmitReceive+0x1b8>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d014      	beq.n	8003baa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	b292      	uxth	r2, r2
 8003b8c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b92:	1c9a      	adds	r2, r3, #2
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003baa:	f7fd fa97 	bl	80010dc <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d807      	bhi.n	8003bca <HAL_SPI_TransmitReceive+0x1d8>
 8003bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc0:	d003      	beq.n	8003bca <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003bc8:	e0a7      	b.n	8003d1a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1a6      	bne.n	8003b22 <HAL_SPI_TransmitReceive+0x130>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1a1      	bne.n	8003b22 <HAL_SPI_TransmitReceive+0x130>
 8003bde:	e07c      	b.n	8003cda <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <HAL_SPI_TransmitReceive+0x1fc>
 8003be8:	8b7b      	ldrh	r3, [r7, #26]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d16b      	bne.n	8003cc6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	330c      	adds	r3, #12
 8003bf8:	7812      	ldrb	r2, [r2, #0]
 8003bfa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c00:	1c5a      	adds	r2, r3, #1
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c14:	e057      	b.n	8003cc6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d11c      	bne.n	8003c5e <HAL_SPI_TransmitReceive+0x26c>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d017      	beq.n	8003c5e <HAL_SPI_TransmitReceive+0x26c>
 8003c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d114      	bne.n	8003c5e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	330c      	adds	r3, #12
 8003c3e:	7812      	ldrb	r2, [r2, #0]
 8003c40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d119      	bne.n	8003ca0 <HAL_SPI_TransmitReceive+0x2ae>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d014      	beq.n	8003ca0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ca0:	f7fd fa1c 	bl	80010dc <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d803      	bhi.n	8003cb8 <HAL_SPI_TransmitReceive+0x2c6>
 8003cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb6:	d102      	bne.n	8003cbe <HAL_SPI_TransmitReceive+0x2cc>
 8003cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d103      	bne.n	8003cc6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003cc4:	e029      	b.n	8003d1a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1a2      	bne.n	8003c16 <HAL_SPI_TransmitReceive+0x224>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d19d      	bne.n	8003c16 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 f8b2 	bl	8003e48 <SPI_EndRxTxTransaction>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d006      	beq.n	8003cf8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003cf6:	e010      	b.n	8003d1a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10b      	bne.n	8003d18 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	e000      	b.n	8003d1a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3730      	adds	r7, #48	; 0x30
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	4613      	mov	r3, r2
 8003d46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d48:	f7fd f9c8 	bl	80010dc <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d50:	1a9b      	subs	r3, r3, r2
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	4413      	add	r3, r2
 8003d56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d58:	f7fd f9c0 	bl	80010dc <HAL_GetTick>
 8003d5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d5e:	4b39      	ldr	r3, [pc, #228]	; (8003e44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	015b      	lsls	r3, r3, #5
 8003d64:	0d1b      	lsrs	r3, r3, #20
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	fb02 f303 	mul.w	r3, r2, r3
 8003d6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d6e:	e054      	b.n	8003e1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d76:	d050      	beq.n	8003e1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d78:	f7fd f9b0 	bl	80010dc <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	69fa      	ldr	r2, [r7, #28]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d902      	bls.n	8003d8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d13d      	bne.n	8003e0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003da6:	d111      	bne.n	8003dcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003db0:	d004      	beq.n	8003dbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dba:	d107      	bne.n	8003dcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dd4:	d10f      	bne.n	8003df6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003df4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e017      	b.n	8003e3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4013      	ands	r3, r2
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	bf0c      	ite	eq
 8003e2a:	2301      	moveq	r3, #1
 8003e2c:	2300      	movne	r3, #0
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	461a      	mov	r2, r3
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d19b      	bne.n	8003d70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3720      	adds	r7, #32
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000000 	.word	0x20000000

08003e48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e54:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <SPI_EndRxTxTransaction+0x7c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a1b      	ldr	r2, [pc, #108]	; (8003ec8 <SPI_EndRxTxTransaction+0x80>)
 8003e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5e:	0d5b      	lsrs	r3, r3, #21
 8003e60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e64:	fb02 f303 	mul.w	r3, r2, r3
 8003e68:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e72:	d112      	bne.n	8003e9a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	2180      	movs	r1, #128	; 0x80
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f7ff ff5a 	bl	8003d38 <SPI_WaitFlagStateUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d016      	beq.n	8003eb8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8e:	f043 0220 	orr.w	r2, r3, #32
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e00f      	b.n	8003eba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb0:	2b80      	cmp	r3, #128	; 0x80
 8003eb2:	d0f2      	beq.n	8003e9a <SPI_EndRxTxTransaction+0x52>
 8003eb4:	e000      	b.n	8003eb8 <SPI_EndRxTxTransaction+0x70>
        break;
 8003eb6:	bf00      	nop
  }

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20000000 	.word	0x20000000
 8003ec8:	165e9f81 	.word	0x165e9f81

08003ecc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e041      	b.n	8003f62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fc feca 	bl	8000c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3304      	adds	r3, #4
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	f000 fafe 	bl	800450c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
	...

08003f6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d001      	beq.n	8003f84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e046      	b.n	8004012 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a23      	ldr	r2, [pc, #140]	; (8004020 <HAL_TIM_Base_Start+0xb4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d022      	beq.n	8003fdc <HAL_TIM_Base_Start+0x70>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9e:	d01d      	beq.n	8003fdc <HAL_TIM_Base_Start+0x70>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a1f      	ldr	r2, [pc, #124]	; (8004024 <HAL_TIM_Base_Start+0xb8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d018      	beq.n	8003fdc <HAL_TIM_Base_Start+0x70>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a1e      	ldr	r2, [pc, #120]	; (8004028 <HAL_TIM_Base_Start+0xbc>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d013      	beq.n	8003fdc <HAL_TIM_Base_Start+0x70>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a1c      	ldr	r2, [pc, #112]	; (800402c <HAL_TIM_Base_Start+0xc0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00e      	beq.n	8003fdc <HAL_TIM_Base_Start+0x70>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a1b      	ldr	r2, [pc, #108]	; (8004030 <HAL_TIM_Base_Start+0xc4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d009      	beq.n	8003fdc <HAL_TIM_Base_Start+0x70>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a19      	ldr	r2, [pc, #100]	; (8004034 <HAL_TIM_Base_Start+0xc8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d004      	beq.n	8003fdc <HAL_TIM_Base_Start+0x70>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a18      	ldr	r2, [pc, #96]	; (8004038 <HAL_TIM_Base_Start+0xcc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d111      	bne.n	8004000 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b06      	cmp	r3, #6
 8003fec:	d010      	beq.n	8004010 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f042 0201 	orr.w	r2, r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ffe:	e007      	b.n	8004010 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0201 	orr.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40010000 	.word	0x40010000
 8004024:	40000400 	.word	0x40000400
 8004028:	40000800 	.word	0x40000800
 800402c:	40000c00 	.word	0x40000c00
 8004030:	40010400 	.word	0x40010400
 8004034:	40014000 	.word	0x40014000
 8004038:	40001800 	.word	0x40001800

0800403c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b01      	cmp	r3, #1
 800404e:	d001      	beq.n	8004054 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e04e      	b.n	80040f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0201 	orr.w	r2, r2, #1
 800406a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a23      	ldr	r2, [pc, #140]	; (8004100 <HAL_TIM_Base_Start_IT+0xc4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d022      	beq.n	80040bc <HAL_TIM_Base_Start_IT+0x80>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800407e:	d01d      	beq.n	80040bc <HAL_TIM_Base_Start_IT+0x80>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a1f      	ldr	r2, [pc, #124]	; (8004104 <HAL_TIM_Base_Start_IT+0xc8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d018      	beq.n	80040bc <HAL_TIM_Base_Start_IT+0x80>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1e      	ldr	r2, [pc, #120]	; (8004108 <HAL_TIM_Base_Start_IT+0xcc>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d013      	beq.n	80040bc <HAL_TIM_Base_Start_IT+0x80>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a1c      	ldr	r2, [pc, #112]	; (800410c <HAL_TIM_Base_Start_IT+0xd0>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00e      	beq.n	80040bc <HAL_TIM_Base_Start_IT+0x80>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a1b      	ldr	r2, [pc, #108]	; (8004110 <HAL_TIM_Base_Start_IT+0xd4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d009      	beq.n	80040bc <HAL_TIM_Base_Start_IT+0x80>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a19      	ldr	r2, [pc, #100]	; (8004114 <HAL_TIM_Base_Start_IT+0xd8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d004      	beq.n	80040bc <HAL_TIM_Base_Start_IT+0x80>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a18      	ldr	r2, [pc, #96]	; (8004118 <HAL_TIM_Base_Start_IT+0xdc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d111      	bne.n	80040e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b06      	cmp	r3, #6
 80040cc:	d010      	beq.n	80040f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f042 0201 	orr.w	r2, r2, #1
 80040dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040de:	e007      	b.n	80040f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40010000 	.word	0x40010000
 8004104:	40000400 	.word	0x40000400
 8004108:	40000800 	.word	0x40000800
 800410c:	40000c00 	.word	0x40000c00
 8004110:	40010400 	.word	0x40010400
 8004114:	40014000 	.word	0x40014000
 8004118:	40001800 	.word	0x40001800

0800411c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b02      	cmp	r3, #2
 8004130:	d122      	bne.n	8004178 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b02      	cmp	r3, #2
 800413e:	d11b      	bne.n	8004178 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f06f 0202 	mvn.w	r2, #2
 8004148:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f9b5 	bl	80044ce <HAL_TIM_IC_CaptureCallback>
 8004164:	e005      	b.n	8004172 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f9a7 	bl	80044ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f9b8 	bl	80044e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	2b04      	cmp	r3, #4
 8004184:	d122      	bne.n	80041cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b04      	cmp	r3, #4
 8004192:	d11b      	bne.n	80041cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f06f 0204 	mvn.w	r2, #4
 800419c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2202      	movs	r2, #2
 80041a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f98b 	bl	80044ce <HAL_TIM_IC_CaptureCallback>
 80041b8:	e005      	b.n	80041c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f97d 	bl	80044ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f98e 	bl	80044e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d122      	bne.n	8004220 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d11b      	bne.n	8004220 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0208 	mvn.w	r2, #8
 80041f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2204      	movs	r2, #4
 80041f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f961 	bl	80044ce <HAL_TIM_IC_CaptureCallback>
 800420c:	e005      	b.n	800421a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f953 	bl	80044ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f964 	bl	80044e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f003 0310 	and.w	r3, r3, #16
 800422a:	2b10      	cmp	r3, #16
 800422c:	d122      	bne.n	8004274 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	2b10      	cmp	r3, #16
 800423a:	d11b      	bne.n	8004274 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f06f 0210 	mvn.w	r2, #16
 8004244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2208      	movs	r2, #8
 800424a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f937 	bl	80044ce <HAL_TIM_IC_CaptureCallback>
 8004260:	e005      	b.n	800426e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f929 	bl	80044ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f93a 	bl	80044e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b01      	cmp	r3, #1
 8004280:	d10e      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b01      	cmp	r3, #1
 800428e:	d107      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0201 	mvn.w	r2, #1
 8004298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7fc fbfa 	bl	8000a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042aa:	2b80      	cmp	r3, #128	; 0x80
 80042ac:	d10e      	bne.n	80042cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b8:	2b80      	cmp	r3, #128	; 0x80
 80042ba:	d107      	bne.n	80042cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fae0 	bl	800488c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d6:	2b40      	cmp	r3, #64	; 0x40
 80042d8:	d10e      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e4:	2b40      	cmp	r3, #64	; 0x40
 80042e6:	d107      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f8ff 	bl	80044f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	2b20      	cmp	r3, #32
 8004304:	d10e      	bne.n	8004324 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f003 0320 	and.w	r3, r3, #32
 8004310:	2b20      	cmp	r3, #32
 8004312:	d107      	bne.n	8004324 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f06f 0220 	mvn.w	r2, #32
 800431c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 faaa 	bl	8004878 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004324:	bf00      	nop
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_TIM_ConfigClockSource+0x1c>
 8004344:	2302      	movs	r3, #2
 8004346:	e0b4      	b.n	80044b2 <HAL_TIM_ConfigClockSource+0x186>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800436e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004380:	d03e      	beq.n	8004400 <HAL_TIM_ConfigClockSource+0xd4>
 8004382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004386:	f200 8087 	bhi.w	8004498 <HAL_TIM_ConfigClockSource+0x16c>
 800438a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800438e:	f000 8086 	beq.w	800449e <HAL_TIM_ConfigClockSource+0x172>
 8004392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004396:	d87f      	bhi.n	8004498 <HAL_TIM_ConfigClockSource+0x16c>
 8004398:	2b70      	cmp	r3, #112	; 0x70
 800439a:	d01a      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0xa6>
 800439c:	2b70      	cmp	r3, #112	; 0x70
 800439e:	d87b      	bhi.n	8004498 <HAL_TIM_ConfigClockSource+0x16c>
 80043a0:	2b60      	cmp	r3, #96	; 0x60
 80043a2:	d050      	beq.n	8004446 <HAL_TIM_ConfigClockSource+0x11a>
 80043a4:	2b60      	cmp	r3, #96	; 0x60
 80043a6:	d877      	bhi.n	8004498 <HAL_TIM_ConfigClockSource+0x16c>
 80043a8:	2b50      	cmp	r3, #80	; 0x50
 80043aa:	d03c      	beq.n	8004426 <HAL_TIM_ConfigClockSource+0xfa>
 80043ac:	2b50      	cmp	r3, #80	; 0x50
 80043ae:	d873      	bhi.n	8004498 <HAL_TIM_ConfigClockSource+0x16c>
 80043b0:	2b40      	cmp	r3, #64	; 0x40
 80043b2:	d058      	beq.n	8004466 <HAL_TIM_ConfigClockSource+0x13a>
 80043b4:	2b40      	cmp	r3, #64	; 0x40
 80043b6:	d86f      	bhi.n	8004498 <HAL_TIM_ConfigClockSource+0x16c>
 80043b8:	2b30      	cmp	r3, #48	; 0x30
 80043ba:	d064      	beq.n	8004486 <HAL_TIM_ConfigClockSource+0x15a>
 80043bc:	2b30      	cmp	r3, #48	; 0x30
 80043be:	d86b      	bhi.n	8004498 <HAL_TIM_ConfigClockSource+0x16c>
 80043c0:	2b20      	cmp	r3, #32
 80043c2:	d060      	beq.n	8004486 <HAL_TIM_ConfigClockSource+0x15a>
 80043c4:	2b20      	cmp	r3, #32
 80043c6:	d867      	bhi.n	8004498 <HAL_TIM_ConfigClockSource+0x16c>
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d05c      	beq.n	8004486 <HAL_TIM_ConfigClockSource+0x15a>
 80043cc:	2b10      	cmp	r3, #16
 80043ce:	d05a      	beq.n	8004486 <HAL_TIM_ConfigClockSource+0x15a>
 80043d0:	e062      	b.n	8004498 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6899      	ldr	r1, [r3, #8]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f000 f9ad 	bl	8004740 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	609a      	str	r2, [r3, #8]
      break;
 80043fe:	e04f      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	6899      	ldr	r1, [r3, #8]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f000 f996 	bl	8004740 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689a      	ldr	r2, [r3, #8]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004422:	609a      	str	r2, [r3, #8]
      break;
 8004424:	e03c      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6818      	ldr	r0, [r3, #0]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	6859      	ldr	r1, [r3, #4]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	461a      	mov	r2, r3
 8004434:	f000 f90a 	bl	800464c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2150      	movs	r1, #80	; 0x50
 800443e:	4618      	mov	r0, r3
 8004440:	f000 f963 	bl	800470a <TIM_ITRx_SetConfig>
      break;
 8004444:	e02c      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	6859      	ldr	r1, [r3, #4]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	461a      	mov	r2, r3
 8004454:	f000 f929 	bl	80046aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2160      	movs	r1, #96	; 0x60
 800445e:	4618      	mov	r0, r3
 8004460:	f000 f953 	bl	800470a <TIM_ITRx_SetConfig>
      break;
 8004464:	e01c      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6818      	ldr	r0, [r3, #0]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	6859      	ldr	r1, [r3, #4]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	461a      	mov	r2, r3
 8004474:	f000 f8ea 	bl	800464c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2140      	movs	r1, #64	; 0x40
 800447e:	4618      	mov	r0, r3
 8004480:	f000 f943 	bl	800470a <TIM_ITRx_SetConfig>
      break;
 8004484:	e00c      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4619      	mov	r1, r3
 8004490:	4610      	mov	r0, r2
 8004492:	f000 f93a 	bl	800470a <TIM_ITRx_SetConfig>
      break;
 8004496:	e003      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	73fb      	strb	r3, [r7, #15]
      break;
 800449c:	e000      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800449e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
	...

0800450c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a40      	ldr	r2, [pc, #256]	; (8004620 <TIM_Base_SetConfig+0x114>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d013      	beq.n	800454c <TIM_Base_SetConfig+0x40>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452a:	d00f      	beq.n	800454c <TIM_Base_SetConfig+0x40>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a3d      	ldr	r2, [pc, #244]	; (8004624 <TIM_Base_SetConfig+0x118>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d00b      	beq.n	800454c <TIM_Base_SetConfig+0x40>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a3c      	ldr	r2, [pc, #240]	; (8004628 <TIM_Base_SetConfig+0x11c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d007      	beq.n	800454c <TIM_Base_SetConfig+0x40>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a3b      	ldr	r2, [pc, #236]	; (800462c <TIM_Base_SetConfig+0x120>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d003      	beq.n	800454c <TIM_Base_SetConfig+0x40>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a3a      	ldr	r2, [pc, #232]	; (8004630 <TIM_Base_SetConfig+0x124>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d108      	bne.n	800455e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a2f      	ldr	r2, [pc, #188]	; (8004620 <TIM_Base_SetConfig+0x114>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d02b      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800456c:	d027      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a2c      	ldr	r2, [pc, #176]	; (8004624 <TIM_Base_SetConfig+0x118>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d023      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a2b      	ldr	r2, [pc, #172]	; (8004628 <TIM_Base_SetConfig+0x11c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d01f      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a2a      	ldr	r2, [pc, #168]	; (800462c <TIM_Base_SetConfig+0x120>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d01b      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a29      	ldr	r2, [pc, #164]	; (8004630 <TIM_Base_SetConfig+0x124>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d017      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a28      	ldr	r2, [pc, #160]	; (8004634 <TIM_Base_SetConfig+0x128>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d013      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a27      	ldr	r2, [pc, #156]	; (8004638 <TIM_Base_SetConfig+0x12c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00f      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a26      	ldr	r2, [pc, #152]	; (800463c <TIM_Base_SetConfig+0x130>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00b      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a25      	ldr	r2, [pc, #148]	; (8004640 <TIM_Base_SetConfig+0x134>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d007      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a24      	ldr	r2, [pc, #144]	; (8004644 <TIM_Base_SetConfig+0x138>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d003      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a23      	ldr	r2, [pc, #140]	; (8004648 <TIM_Base_SetConfig+0x13c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d108      	bne.n	80045d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a0a      	ldr	r2, [pc, #40]	; (8004620 <TIM_Base_SetConfig+0x114>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d003      	beq.n	8004604 <TIM_Base_SetConfig+0xf8>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a0c      	ldr	r2, [pc, #48]	; (8004630 <TIM_Base_SetConfig+0x124>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d103      	bne.n	800460c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	615a      	str	r2, [r3, #20]
}
 8004612:	bf00      	nop
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	40010000 	.word	0x40010000
 8004624:	40000400 	.word	0x40000400
 8004628:	40000800 	.word	0x40000800
 800462c:	40000c00 	.word	0x40000c00
 8004630:	40010400 	.word	0x40010400
 8004634:	40014000 	.word	0x40014000
 8004638:	40014400 	.word	0x40014400
 800463c:	40014800 	.word	0x40014800
 8004640:	40001800 	.word	0x40001800
 8004644:	40001c00 	.word	0x40001c00
 8004648:	40002000 	.word	0x40002000

0800464c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	f023 0201 	bic.w	r2, r3, #1
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	4313      	orrs	r3, r2
 8004680:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f023 030a 	bic.w	r3, r3, #10
 8004688:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4313      	orrs	r3, r2
 8004690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	621a      	str	r2, [r3, #32]
}
 800469e:	bf00      	nop
 80046a0:	371c      	adds	r7, #28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b087      	sub	sp, #28
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	60f8      	str	r0, [r7, #12]
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	f023 0210 	bic.w	r2, r3, #16
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	031b      	lsls	r3, r3, #12
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	4313      	orrs	r3, r2
 80046de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	011b      	lsls	r3, r3, #4
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	621a      	str	r2, [r3, #32]
}
 80046fe:	bf00      	nop
 8004700:	371c      	adds	r7, #28
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800470a:	b480      	push	{r7}
 800470c:	b085      	sub	sp, #20
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004720:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4313      	orrs	r3, r2
 8004728:	f043 0307 	orr.w	r3, r3, #7
 800472c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	609a      	str	r2, [r3, #8]
}
 8004734:	bf00      	nop
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800475a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	021a      	lsls	r2, r3, #8
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	431a      	orrs	r2, r3
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	4313      	orrs	r3, r2
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	4313      	orrs	r3, r2
 800476c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	609a      	str	r2, [r3, #8]
}
 8004774:	bf00      	nop
 8004776:	371c      	adds	r7, #28
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004794:	2302      	movs	r3, #2
 8004796:	e05a      	b.n	800484e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a21      	ldr	r2, [pc, #132]	; (800485c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d022      	beq.n	8004822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e4:	d01d      	beq.n	8004822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a1d      	ldr	r2, [pc, #116]	; (8004860 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d018      	beq.n	8004822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a1b      	ldr	r2, [pc, #108]	; (8004864 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d013      	beq.n	8004822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a1a      	ldr	r2, [pc, #104]	; (8004868 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d00e      	beq.n	8004822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a18      	ldr	r2, [pc, #96]	; (800486c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d009      	beq.n	8004822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a17      	ldr	r2, [pc, #92]	; (8004870 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d004      	beq.n	8004822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a15      	ldr	r2, [pc, #84]	; (8004874 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d10c      	bne.n	800483c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004828:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	4313      	orrs	r3, r2
 8004832:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40010000 	.word	0x40010000
 8004860:	40000400 	.word	0x40000400
 8004864:	40000800 	.word	0x40000800
 8004868:	40000c00 	.word	0x40000c00
 800486c:	40010400 	.word	0x40010400
 8004870:	40014000 	.word	0x40014000
 8004874:	40001800 	.word	0x40001800

08004878 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80048a6:	4ba0      	ldr	r3, [pc, #640]	; (8004b28 <MX_LWIP_Init+0x288>)
 80048a8:	22c0      	movs	r2, #192	; 0xc0
 80048aa:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80048ac:	4b9e      	ldr	r3, [pc, #632]	; (8004b28 <MX_LWIP_Init+0x288>)
 80048ae:	22a8      	movs	r2, #168	; 0xa8
 80048b0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80048b2:	4b9d      	ldr	r3, [pc, #628]	; (8004b28 <MX_LWIP_Init+0x288>)
 80048b4:	2201      	movs	r2, #1
 80048b6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 80048b8:	4b9b      	ldr	r3, [pc, #620]	; (8004b28 <MX_LWIP_Init+0x288>)
 80048ba:	2202      	movs	r2, #2
 80048bc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80048be:	4b9b      	ldr	r3, [pc, #620]	; (8004b2c <MX_LWIP_Init+0x28c>)
 80048c0:	22ff      	movs	r2, #255	; 0xff
 80048c2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80048c4:	4b99      	ldr	r3, [pc, #612]	; (8004b2c <MX_LWIP_Init+0x28c>)
 80048c6:	22ff      	movs	r2, #255	; 0xff
 80048c8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80048ca:	4b98      	ldr	r3, [pc, #608]	; (8004b2c <MX_LWIP_Init+0x28c>)
 80048cc:	22ff      	movs	r2, #255	; 0xff
 80048ce:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80048d0:	4b96      	ldr	r3, [pc, #600]	; (8004b2c <MX_LWIP_Init+0x28c>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80048d6:	4b96      	ldr	r3, [pc, #600]	; (8004b30 <MX_LWIP_Init+0x290>)
 80048d8:	22c0      	movs	r2, #192	; 0xc0
 80048da:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80048dc:	4b94      	ldr	r3, [pc, #592]	; (8004b30 <MX_LWIP_Init+0x290>)
 80048de:	22a8      	movs	r2, #168	; 0xa8
 80048e0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80048e2:	4b93      	ldr	r3, [pc, #588]	; (8004b30 <MX_LWIP_Init+0x290>)
 80048e4:	2201      	movs	r2, #1
 80048e6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80048e8:	4b91      	ldr	r3, [pc, #580]	; (8004b30 <MX_LWIP_Init+0x290>)
 80048ea:	2201      	movs	r2, #1
 80048ec:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80048ee:	2100      	movs	r1, #0
 80048f0:	2000      	movs	r0, #0
 80048f2:	f008 fc3b 	bl	800d16c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80048f6:	4b8c      	ldr	r3, [pc, #560]	; (8004b28 <MX_LWIP_Init+0x288>)
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	061a      	lsls	r2, r3, #24
 80048fc:	4b8a      	ldr	r3, [pc, #552]	; (8004b28 <MX_LWIP_Init+0x288>)
 80048fe:	785b      	ldrb	r3, [r3, #1]
 8004900:	041b      	lsls	r3, r3, #16
 8004902:	431a      	orrs	r2, r3
 8004904:	4b88      	ldr	r3, [pc, #544]	; (8004b28 <MX_LWIP_Init+0x288>)
 8004906:	789b      	ldrb	r3, [r3, #2]
 8004908:	021b      	lsls	r3, r3, #8
 800490a:	4313      	orrs	r3, r2
 800490c:	4a86      	ldr	r2, [pc, #536]	; (8004b28 <MX_LWIP_Init+0x288>)
 800490e:	78d2      	ldrb	r2, [r2, #3]
 8004910:	4313      	orrs	r3, r2
 8004912:	061a      	lsls	r2, r3, #24
 8004914:	4b84      	ldr	r3, [pc, #528]	; (8004b28 <MX_LWIP_Init+0x288>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	0619      	lsls	r1, r3, #24
 800491a:	4b83      	ldr	r3, [pc, #524]	; (8004b28 <MX_LWIP_Init+0x288>)
 800491c:	785b      	ldrb	r3, [r3, #1]
 800491e:	041b      	lsls	r3, r3, #16
 8004920:	4319      	orrs	r1, r3
 8004922:	4b81      	ldr	r3, [pc, #516]	; (8004b28 <MX_LWIP_Init+0x288>)
 8004924:	789b      	ldrb	r3, [r3, #2]
 8004926:	021b      	lsls	r3, r3, #8
 8004928:	430b      	orrs	r3, r1
 800492a:	497f      	ldr	r1, [pc, #508]	; (8004b28 <MX_LWIP_Init+0x288>)
 800492c:	78c9      	ldrb	r1, [r1, #3]
 800492e:	430b      	orrs	r3, r1
 8004930:	021b      	lsls	r3, r3, #8
 8004932:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004936:	431a      	orrs	r2, r3
 8004938:	4b7b      	ldr	r3, [pc, #492]	; (8004b28 <MX_LWIP_Init+0x288>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	0619      	lsls	r1, r3, #24
 800493e:	4b7a      	ldr	r3, [pc, #488]	; (8004b28 <MX_LWIP_Init+0x288>)
 8004940:	785b      	ldrb	r3, [r3, #1]
 8004942:	041b      	lsls	r3, r3, #16
 8004944:	4319      	orrs	r1, r3
 8004946:	4b78      	ldr	r3, [pc, #480]	; (8004b28 <MX_LWIP_Init+0x288>)
 8004948:	789b      	ldrb	r3, [r3, #2]
 800494a:	021b      	lsls	r3, r3, #8
 800494c:	430b      	orrs	r3, r1
 800494e:	4976      	ldr	r1, [pc, #472]	; (8004b28 <MX_LWIP_Init+0x288>)
 8004950:	78c9      	ldrb	r1, [r1, #3]
 8004952:	430b      	orrs	r3, r1
 8004954:	0a1b      	lsrs	r3, r3, #8
 8004956:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800495a:	431a      	orrs	r2, r3
 800495c:	4b72      	ldr	r3, [pc, #456]	; (8004b28 <MX_LWIP_Init+0x288>)
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	0619      	lsls	r1, r3, #24
 8004962:	4b71      	ldr	r3, [pc, #452]	; (8004b28 <MX_LWIP_Init+0x288>)
 8004964:	785b      	ldrb	r3, [r3, #1]
 8004966:	041b      	lsls	r3, r3, #16
 8004968:	4319      	orrs	r1, r3
 800496a:	4b6f      	ldr	r3, [pc, #444]	; (8004b28 <MX_LWIP_Init+0x288>)
 800496c:	789b      	ldrb	r3, [r3, #2]
 800496e:	021b      	lsls	r3, r3, #8
 8004970:	430b      	orrs	r3, r1
 8004972:	496d      	ldr	r1, [pc, #436]	; (8004b28 <MX_LWIP_Init+0x288>)
 8004974:	78c9      	ldrb	r1, [r1, #3]
 8004976:	430b      	orrs	r3, r1
 8004978:	0e1b      	lsrs	r3, r3, #24
 800497a:	4313      	orrs	r3, r2
 800497c:	4a6d      	ldr	r2, [pc, #436]	; (8004b34 <MX_LWIP_Init+0x294>)
 800497e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004980:	4b6a      	ldr	r3, [pc, #424]	; (8004b2c <MX_LWIP_Init+0x28c>)
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	061a      	lsls	r2, r3, #24
 8004986:	4b69      	ldr	r3, [pc, #420]	; (8004b2c <MX_LWIP_Init+0x28c>)
 8004988:	785b      	ldrb	r3, [r3, #1]
 800498a:	041b      	lsls	r3, r3, #16
 800498c:	431a      	orrs	r2, r3
 800498e:	4b67      	ldr	r3, [pc, #412]	; (8004b2c <MX_LWIP_Init+0x28c>)
 8004990:	789b      	ldrb	r3, [r3, #2]
 8004992:	021b      	lsls	r3, r3, #8
 8004994:	4313      	orrs	r3, r2
 8004996:	4a65      	ldr	r2, [pc, #404]	; (8004b2c <MX_LWIP_Init+0x28c>)
 8004998:	78d2      	ldrb	r2, [r2, #3]
 800499a:	4313      	orrs	r3, r2
 800499c:	061a      	lsls	r2, r3, #24
 800499e:	4b63      	ldr	r3, [pc, #396]	; (8004b2c <MX_LWIP_Init+0x28c>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	0619      	lsls	r1, r3, #24
 80049a4:	4b61      	ldr	r3, [pc, #388]	; (8004b2c <MX_LWIP_Init+0x28c>)
 80049a6:	785b      	ldrb	r3, [r3, #1]
 80049a8:	041b      	lsls	r3, r3, #16
 80049aa:	4319      	orrs	r1, r3
 80049ac:	4b5f      	ldr	r3, [pc, #380]	; (8004b2c <MX_LWIP_Init+0x28c>)
 80049ae:	789b      	ldrb	r3, [r3, #2]
 80049b0:	021b      	lsls	r3, r3, #8
 80049b2:	430b      	orrs	r3, r1
 80049b4:	495d      	ldr	r1, [pc, #372]	; (8004b2c <MX_LWIP_Init+0x28c>)
 80049b6:	78c9      	ldrb	r1, [r1, #3]
 80049b8:	430b      	orrs	r3, r1
 80049ba:	021b      	lsls	r3, r3, #8
 80049bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80049c0:	431a      	orrs	r2, r3
 80049c2:	4b5a      	ldr	r3, [pc, #360]	; (8004b2c <MX_LWIP_Init+0x28c>)
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	0619      	lsls	r1, r3, #24
 80049c8:	4b58      	ldr	r3, [pc, #352]	; (8004b2c <MX_LWIP_Init+0x28c>)
 80049ca:	785b      	ldrb	r3, [r3, #1]
 80049cc:	041b      	lsls	r3, r3, #16
 80049ce:	4319      	orrs	r1, r3
 80049d0:	4b56      	ldr	r3, [pc, #344]	; (8004b2c <MX_LWIP_Init+0x28c>)
 80049d2:	789b      	ldrb	r3, [r3, #2]
 80049d4:	021b      	lsls	r3, r3, #8
 80049d6:	430b      	orrs	r3, r1
 80049d8:	4954      	ldr	r1, [pc, #336]	; (8004b2c <MX_LWIP_Init+0x28c>)
 80049da:	78c9      	ldrb	r1, [r1, #3]
 80049dc:	430b      	orrs	r3, r1
 80049de:	0a1b      	lsrs	r3, r3, #8
 80049e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80049e4:	431a      	orrs	r2, r3
 80049e6:	4b51      	ldr	r3, [pc, #324]	; (8004b2c <MX_LWIP_Init+0x28c>)
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	0619      	lsls	r1, r3, #24
 80049ec:	4b4f      	ldr	r3, [pc, #316]	; (8004b2c <MX_LWIP_Init+0x28c>)
 80049ee:	785b      	ldrb	r3, [r3, #1]
 80049f0:	041b      	lsls	r3, r3, #16
 80049f2:	4319      	orrs	r1, r3
 80049f4:	4b4d      	ldr	r3, [pc, #308]	; (8004b2c <MX_LWIP_Init+0x28c>)
 80049f6:	789b      	ldrb	r3, [r3, #2]
 80049f8:	021b      	lsls	r3, r3, #8
 80049fa:	430b      	orrs	r3, r1
 80049fc:	494b      	ldr	r1, [pc, #300]	; (8004b2c <MX_LWIP_Init+0x28c>)
 80049fe:	78c9      	ldrb	r1, [r1, #3]
 8004a00:	430b      	orrs	r3, r1
 8004a02:	0e1b      	lsrs	r3, r3, #24
 8004a04:	4313      	orrs	r3, r2
 8004a06:	4a4c      	ldr	r2, [pc, #304]	; (8004b38 <MX_LWIP_Init+0x298>)
 8004a08:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004a0a:	4b49      	ldr	r3, [pc, #292]	; (8004b30 <MX_LWIP_Init+0x290>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	061a      	lsls	r2, r3, #24
 8004a10:	4b47      	ldr	r3, [pc, #284]	; (8004b30 <MX_LWIP_Init+0x290>)
 8004a12:	785b      	ldrb	r3, [r3, #1]
 8004a14:	041b      	lsls	r3, r3, #16
 8004a16:	431a      	orrs	r2, r3
 8004a18:	4b45      	ldr	r3, [pc, #276]	; (8004b30 <MX_LWIP_Init+0x290>)
 8004a1a:	789b      	ldrb	r3, [r3, #2]
 8004a1c:	021b      	lsls	r3, r3, #8
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	4a43      	ldr	r2, [pc, #268]	; (8004b30 <MX_LWIP_Init+0x290>)
 8004a22:	78d2      	ldrb	r2, [r2, #3]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	061a      	lsls	r2, r3, #24
 8004a28:	4b41      	ldr	r3, [pc, #260]	; (8004b30 <MX_LWIP_Init+0x290>)
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	0619      	lsls	r1, r3, #24
 8004a2e:	4b40      	ldr	r3, [pc, #256]	; (8004b30 <MX_LWIP_Init+0x290>)
 8004a30:	785b      	ldrb	r3, [r3, #1]
 8004a32:	041b      	lsls	r3, r3, #16
 8004a34:	4319      	orrs	r1, r3
 8004a36:	4b3e      	ldr	r3, [pc, #248]	; (8004b30 <MX_LWIP_Init+0x290>)
 8004a38:	789b      	ldrb	r3, [r3, #2]
 8004a3a:	021b      	lsls	r3, r3, #8
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	493c      	ldr	r1, [pc, #240]	; (8004b30 <MX_LWIP_Init+0x290>)
 8004a40:	78c9      	ldrb	r1, [r1, #3]
 8004a42:	430b      	orrs	r3, r1
 8004a44:	021b      	lsls	r3, r3, #8
 8004a46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	4b38      	ldr	r3, [pc, #224]	; (8004b30 <MX_LWIP_Init+0x290>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	0619      	lsls	r1, r3, #24
 8004a52:	4b37      	ldr	r3, [pc, #220]	; (8004b30 <MX_LWIP_Init+0x290>)
 8004a54:	785b      	ldrb	r3, [r3, #1]
 8004a56:	041b      	lsls	r3, r3, #16
 8004a58:	4319      	orrs	r1, r3
 8004a5a:	4b35      	ldr	r3, [pc, #212]	; (8004b30 <MX_LWIP_Init+0x290>)
 8004a5c:	789b      	ldrb	r3, [r3, #2]
 8004a5e:	021b      	lsls	r3, r3, #8
 8004a60:	430b      	orrs	r3, r1
 8004a62:	4933      	ldr	r1, [pc, #204]	; (8004b30 <MX_LWIP_Init+0x290>)
 8004a64:	78c9      	ldrb	r1, [r1, #3]
 8004a66:	430b      	orrs	r3, r1
 8004a68:	0a1b      	lsrs	r3, r3, #8
 8004a6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	4b2f      	ldr	r3, [pc, #188]	; (8004b30 <MX_LWIP_Init+0x290>)
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	0619      	lsls	r1, r3, #24
 8004a76:	4b2e      	ldr	r3, [pc, #184]	; (8004b30 <MX_LWIP_Init+0x290>)
 8004a78:	785b      	ldrb	r3, [r3, #1]
 8004a7a:	041b      	lsls	r3, r3, #16
 8004a7c:	4319      	orrs	r1, r3
 8004a7e:	4b2c      	ldr	r3, [pc, #176]	; (8004b30 <MX_LWIP_Init+0x290>)
 8004a80:	789b      	ldrb	r3, [r3, #2]
 8004a82:	021b      	lsls	r3, r3, #8
 8004a84:	430b      	orrs	r3, r1
 8004a86:	492a      	ldr	r1, [pc, #168]	; (8004b30 <MX_LWIP_Init+0x290>)
 8004a88:	78c9      	ldrb	r1, [r1, #3]
 8004a8a:	430b      	orrs	r3, r1
 8004a8c:	0e1b      	lsrs	r3, r3, #24
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	4a2a      	ldr	r2, [pc, #168]	; (8004b3c <MX_LWIP_Init+0x29c>)
 8004a92:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004a94:	4b2a      	ldr	r3, [pc, #168]	; (8004b40 <MX_LWIP_Init+0x2a0>)
 8004a96:	9302      	str	r3, [sp, #8]
 8004a98:	4b2a      	ldr	r3, [pc, #168]	; (8004b44 <MX_LWIP_Init+0x2a4>)
 8004a9a:	9301      	str	r3, [sp, #4]
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	4b26      	ldr	r3, [pc, #152]	; (8004b3c <MX_LWIP_Init+0x29c>)
 8004aa2:	4a25      	ldr	r2, [pc, #148]	; (8004b38 <MX_LWIP_Init+0x298>)
 8004aa4:	4923      	ldr	r1, [pc, #140]	; (8004b34 <MX_LWIP_Init+0x294>)
 8004aa6:	4828      	ldr	r0, [pc, #160]	; (8004b48 <MX_LWIP_Init+0x2a8>)
 8004aa8:	f009 f8e4 	bl	800dc74 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004aac:	4826      	ldr	r0, [pc, #152]	; (8004b48 <MX_LWIP_Init+0x2a8>)
 8004aae:	f009 fa93 	bl	800dfd8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004ab2:	4b25      	ldr	r3, [pc, #148]	; (8004b48 <MX_LWIP_Init+0x2a8>)
 8004ab4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004ab8:	089b      	lsrs	r3, r3, #2
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004ac4:	4820      	ldr	r0, [pc, #128]	; (8004b48 <MX_LWIP_Init+0x2a8>)
 8004ac6:	f009 fa97 	bl	800dff8 <netif_set_up>
 8004aca:	e002      	b.n	8004ad2 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004acc:	481e      	ldr	r0, [pc, #120]	; (8004b48 <MX_LWIP_Init+0x2a8>)
 8004ace:	f009 faff 	bl	800e0d0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004ad2:	491e      	ldr	r1, [pc, #120]	; (8004b4c <MX_LWIP_Init+0x2ac>)
 8004ad4:	481c      	ldr	r0, [pc, #112]	; (8004b48 <MX_LWIP_Init+0x2a8>)
 8004ad6:	f009 fb91 	bl	800e1fc <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8004ada:	2200      	movs	r2, #0
 8004adc:	2101      	movs	r1, #1
 8004ade:	2001      	movs	r0, #1
 8004ae0:	f000 feab 	bl	800583a <osSemaphoreNew>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	4a1a      	ldr	r2, [pc, #104]	; (8004b50 <MX_LWIP_Init+0x2b0>)
 8004ae8:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8004aea:	4b1a      	ldr	r3, [pc, #104]	; (8004b54 <MX_LWIP_Init+0x2b4>)
 8004aec:	4a16      	ldr	r2, [pc, #88]	; (8004b48 <MX_LWIP_Init+0x2a8>)
 8004aee:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8004af0:	4b17      	ldr	r3, [pc, #92]	; (8004b50 <MX_LWIP_Init+0x2b0>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a17      	ldr	r2, [pc, #92]	; (8004b54 <MX_LWIP_Init+0x2b4>)
 8004af6:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004af8:	2224      	movs	r2, #36	; 0x24
 8004afa:	2100      	movs	r1, #0
 8004afc:	4816      	ldr	r0, [pc, #88]	; (8004b58 <MX_LWIP_Init+0x2b8>)
 8004afe:	f015 fd85 	bl	801a60c <memset>
  attributes.name = "LinkThr";
 8004b02:	4b15      	ldr	r3, [pc, #84]	; (8004b58 <MX_LWIP_Init+0x2b8>)
 8004b04:	4a15      	ldr	r2, [pc, #84]	; (8004b5c <MX_LWIP_Init+0x2bc>)
 8004b06:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004b08:	4b13      	ldr	r3, [pc, #76]	; (8004b58 <MX_LWIP_Init+0x2b8>)
 8004b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b0e:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8004b10:	4b11      	ldr	r3, [pc, #68]	; (8004b58 <MX_LWIP_Init+0x2b8>)
 8004b12:	2210      	movs	r2, #16
 8004b14:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8004b16:	4a10      	ldr	r2, [pc, #64]	; (8004b58 <MX_LWIP_Init+0x2b8>)
 8004b18:	490e      	ldr	r1, [pc, #56]	; (8004b54 <MX_LWIP_Init+0x2b4>)
 8004b1a:	4811      	ldr	r0, [pc, #68]	; (8004b60 <MX_LWIP_Init+0x2c0>)
 8004b1c:	f000 fcd1 	bl	80054c2 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004b20:	bf00      	nop
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	2000b854 	.word	0x2000b854
 8004b2c:	2000b850 	.word	0x2000b850
 8004b30:	2000b7f0 	.word	0x2000b7f0
 8004b34:	2000b84c 	.word	0x2000b84c
 8004b38:	2000b858 	.word	0x2000b858
 8004b3c:	2000b85c 	.word	0x2000b85c
 8004b40:	0800d07d 	.word	0x0800d07d
 8004b44:	0800518d 	.word	0x0800518d
 8004b48:	2000b818 	.word	0x2000b818
 8004b4c:	08005271 	.word	0x08005271
 8004b50:	2000016c 	.word	0x2000016c
 8004b54:	2000b7e8 	.word	0x2000b7e8
 8004b58:	2000b7f4 	.word	0x2000b7f4
 8004b5c:	0801b964 	.word	0x0801b964
 8004b60:	080051f9 	.word	0x080051f9

08004b64 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08e      	sub	sp, #56	; 0x38
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	605a      	str	r2, [r3, #4]
 8004b76:	609a      	str	r2, [r3, #8]
 8004b78:	60da      	str	r2, [r3, #12]
 8004b7a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a4a      	ldr	r2, [pc, #296]	; (8004cac <HAL_ETH_MspInit+0x148>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	f040 808d 	bne.w	8004ca2 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004b88:	2300      	movs	r3, #0
 8004b8a:	623b      	str	r3, [r7, #32]
 8004b8c:	4b48      	ldr	r3, [pc, #288]	; (8004cb0 <HAL_ETH_MspInit+0x14c>)
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	4a47      	ldr	r2, [pc, #284]	; (8004cb0 <HAL_ETH_MspInit+0x14c>)
 8004b92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b96:	6313      	str	r3, [r2, #48]	; 0x30
 8004b98:	4b45      	ldr	r3, [pc, #276]	; (8004cb0 <HAL_ETH_MspInit+0x14c>)
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba0:	623b      	str	r3, [r7, #32]
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	61fb      	str	r3, [r7, #28]
 8004ba8:	4b41      	ldr	r3, [pc, #260]	; (8004cb0 <HAL_ETH_MspInit+0x14c>)
 8004baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bac:	4a40      	ldr	r2, [pc, #256]	; (8004cb0 <HAL_ETH_MspInit+0x14c>)
 8004bae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8004bb4:	4b3e      	ldr	r3, [pc, #248]	; (8004cb0 <HAL_ETH_MspInit+0x14c>)
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	61bb      	str	r3, [r7, #24]
 8004bc4:	4b3a      	ldr	r3, [pc, #232]	; (8004cb0 <HAL_ETH_MspInit+0x14c>)
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc8:	4a39      	ldr	r2, [pc, #228]	; (8004cb0 <HAL_ETH_MspInit+0x14c>)
 8004bca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004bce:	6313      	str	r3, [r2, #48]	; 0x30
 8004bd0:	4b37      	ldr	r3, [pc, #220]	; (8004cb0 <HAL_ETH_MspInit+0x14c>)
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bd8:	61bb      	str	r3, [r7, #24]
 8004bda:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bdc:	2300      	movs	r3, #0
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	4b33      	ldr	r3, [pc, #204]	; (8004cb0 <HAL_ETH_MspInit+0x14c>)
 8004be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be4:	4a32      	ldr	r2, [pc, #200]	; (8004cb0 <HAL_ETH_MspInit+0x14c>)
 8004be6:	f043 0304 	orr.w	r3, r3, #4
 8004bea:	6313      	str	r3, [r2, #48]	; 0x30
 8004bec:	4b30      	ldr	r3, [pc, #192]	; (8004cb0 <HAL_ETH_MspInit+0x14c>)
 8004bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	617b      	str	r3, [r7, #20]
 8004bf6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	4b2c      	ldr	r3, [pc, #176]	; (8004cb0 <HAL_ETH_MspInit+0x14c>)
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c00:	4a2b      	ldr	r2, [pc, #172]	; (8004cb0 <HAL_ETH_MspInit+0x14c>)
 8004c02:	f043 0301 	orr.w	r3, r3, #1
 8004c06:	6313      	str	r3, [r2, #48]	; 0x30
 8004c08:	4b29      	ldr	r3, [pc, #164]	; (8004cb0 <HAL_ETH_MspInit+0x14c>)
 8004c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	613b      	str	r3, [r7, #16]
 8004c12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c14:	2300      	movs	r3, #0
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	4b25      	ldr	r3, [pc, #148]	; (8004cb0 <HAL_ETH_MspInit+0x14c>)
 8004c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1c:	4a24      	ldr	r2, [pc, #144]	; (8004cb0 <HAL_ETH_MspInit+0x14c>)
 8004c1e:	f043 0302 	orr.w	r3, r3, #2
 8004c22:	6313      	str	r3, [r2, #48]	; 0x30
 8004c24:	4b22      	ldr	r3, [pc, #136]	; (8004cb0 <HAL_ETH_MspInit+0x14c>)
 8004c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	60fb      	str	r3, [r7, #12]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004c30:	2332      	movs	r3, #50	; 0x32
 8004c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c34:	2302      	movs	r3, #2
 8004c36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c40:	230b      	movs	r3, #11
 8004c42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c48:	4619      	mov	r1, r3
 8004c4a:	481a      	ldr	r0, [pc, #104]	; (8004cb4 <HAL_ETH_MspInit+0x150>)
 8004c4c:	f7fd ffe8 	bl	8002c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004c50:	2386      	movs	r3, #134	; 0x86
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c54:	2302      	movs	r3, #2
 8004c56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c60:	230b      	movs	r3, #11
 8004c62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4813      	ldr	r0, [pc, #76]	; (8004cb8 <HAL_ETH_MspInit+0x154>)
 8004c6c:	f7fd ffd8 	bl	8002c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004c70:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c76:	2302      	movs	r3, #2
 8004c78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c82:	230b      	movs	r3, #11
 8004c84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	480b      	ldr	r0, [pc, #44]	; (8004cbc <HAL_ETH_MspInit+0x158>)
 8004c8e:	f7fd ffc7 	bl	8002c20 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004c92:	2200      	movs	r2, #0
 8004c94:	2105      	movs	r1, #5
 8004c96:	203d      	movs	r0, #61	; 0x3d
 8004c98:	f7fc fb08 	bl	80012ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004c9c:	203d      	movs	r0, #61	; 0x3d
 8004c9e:	f7fc fb21 	bl	80012e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004ca2:	bf00      	nop
 8004ca4:	3738      	adds	r7, #56	; 0x38
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	40028000 	.word	0x40028000
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	40020800 	.word	0x40020800
 8004cb8:	40020000 	.word	0x40020000
 8004cbc:	40020400 	.word	0x40020400

08004cc0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8004cc8:	4b04      	ldr	r3, [pc, #16]	; (8004cdc <HAL_ETH_RxCpltCallback+0x1c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fe8f 	bl	80059f0 <osSemaphoreRelease>
}
 8004cd2:	bf00      	nop
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000170 	.word	0x20000170

08004ce0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b090      	sub	sp, #64	; 0x40
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004cec:	4b5d      	ldr	r3, [pc, #372]	; (8004e64 <low_level_init+0x184>)
 8004cee:	4a5e      	ldr	r2, [pc, #376]	; (8004e68 <low_level_init+0x188>)
 8004cf0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004cf2:	4b5c      	ldr	r3, [pc, #368]	; (8004e64 <low_level_init+0x184>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004cf8:	4b5a      	ldr	r3, [pc, #360]	; (8004e64 <low_level_init+0x184>)
 8004cfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004cfe:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004d00:	4b58      	ldr	r3, [pc, #352]	; (8004e64 <low_level_init+0x184>)
 8004d02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d06:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004d08:	4b56      	ldr	r3, [pc, #344]	; (8004e64 <low_level_init+0x184>)
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8004d12:	2380      	movs	r3, #128	; 0x80
 8004d14:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8004d16:	23e1      	movs	r3, #225	; 0xe1
 8004d18:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8004d22:	2300      	movs	r3, #0
 8004d24:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8004d26:	4a4f      	ldr	r2, [pc, #316]	; (8004e64 <low_level_init+0x184>)
 8004d28:	f107 030c 	add.w	r3, r7, #12
 8004d2c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8004d2e:	4b4d      	ldr	r3, [pc, #308]	; (8004e64 <low_level_init+0x184>)
 8004d30:	2201      	movs	r2, #1
 8004d32:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004d34:	4b4b      	ldr	r3, [pc, #300]	; (8004e64 <low_level_init+0x184>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004d3a:	4b4a      	ldr	r3, [pc, #296]	; (8004e64 <low_level_init+0x184>)
 8004d3c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004d40:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004d42:	4848      	ldr	r0, [pc, #288]	; (8004e64 <low_level_init+0x184>)
 8004d44:	f7fc fdc6 	bl	80018d4 <HAL_ETH_Init>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8004d4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d108      	bne.n	8004d68 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d5c:	f043 0304 	orr.w	r3, r3, #4
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004d68:	2304      	movs	r3, #4
 8004d6a:	4a40      	ldr	r2, [pc, #256]	; (8004e6c <low_level_init+0x18c>)
 8004d6c:	4940      	ldr	r1, [pc, #256]	; (8004e70 <low_level_init+0x190>)
 8004d6e:	483d      	ldr	r0, [pc, #244]	; (8004e64 <low_level_init+0x184>)
 8004d70:	f7fc ff4c 	bl	8001c0c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004d74:	2304      	movs	r3, #4
 8004d76:	4a3f      	ldr	r2, [pc, #252]	; (8004e74 <low_level_init+0x194>)
 8004d78:	493f      	ldr	r1, [pc, #252]	; (8004e78 <low_level_init+0x198>)
 8004d7a:	483a      	ldr	r0, [pc, #232]	; (8004e64 <low_level_init+0x184>)
 8004d7c:	f7fc ffaf 	bl	8001cde <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2206      	movs	r2, #6
 8004d84:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004d88:	4b36      	ldr	r3, [pc, #216]	; (8004e64 <low_level_init+0x184>)
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	781a      	ldrb	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004d94:	4b33      	ldr	r3, [pc, #204]	; (8004e64 <low_level_init+0x184>)
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	785a      	ldrb	r2, [r3, #1]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004da0:	4b30      	ldr	r3, [pc, #192]	; (8004e64 <low_level_init+0x184>)
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	789a      	ldrb	r2, [r3, #2]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004dac:	4b2d      	ldr	r3, [pc, #180]	; (8004e64 <low_level_init+0x184>)
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	78da      	ldrb	r2, [r3, #3]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004db8:	4b2a      	ldr	r3, [pc, #168]	; (8004e64 <low_level_init+0x184>)
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	791a      	ldrb	r2, [r3, #4]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004dc4:	4b27      	ldr	r3, [pc, #156]	; (8004e64 <low_level_init+0x184>)
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	795a      	ldrb	r2, [r3, #5]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004dd6:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004dde:	f043 030a 	orr.w	r3, r3, #10
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8004dea:	2200      	movs	r2, #0
 8004dec:	2101      	movs	r1, #1
 8004dee:	2001      	movs	r0, #1
 8004df0:	f000 fd23 	bl	800583a <osSemaphoreNew>
 8004df4:	4603      	mov	r3, r0
 8004df6:	4a21      	ldr	r2, [pc, #132]	; (8004e7c <low_level_init+0x19c>)
 8004df8:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004dfa:	f107 0314 	add.w	r3, r7, #20
 8004dfe:	2224      	movs	r2, #36	; 0x24
 8004e00:	2100      	movs	r1, #0
 8004e02:	4618      	mov	r0, r3
 8004e04:	f015 fc02 	bl	801a60c <memset>
  attributes.name = "EthIf";
 8004e08:	4b1d      	ldr	r3, [pc, #116]	; (8004e80 <low_level_init+0x1a0>)
 8004e0a:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004e0c:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8004e10:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8004e12:	2330      	movs	r3, #48	; 0x30
 8004e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8004e16:	f107 0314 	add.w	r3, r7, #20
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	4819      	ldr	r0, [pc, #100]	; (8004e84 <low_level_init+0x1a4>)
 8004e20:	f000 fb4f 	bl	80054c2 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004e24:	480f      	ldr	r0, [pc, #60]	; (8004e64 <low_level_init+0x184>)
 8004e26:	f7fd fa82 	bl	800232e <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004e2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004e2e:	461a      	mov	r2, r3
 8004e30:	211d      	movs	r1, #29
 8004e32:	480c      	ldr	r0, [pc, #48]	; (8004e64 <low_level_init+0x184>)
 8004e34:	f7fd f9ad 	bl	8002192 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3a:	f043 030b 	orr.w	r3, r3, #11
 8004e3e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e42:	461a      	mov	r2, r3
 8004e44:	211d      	movs	r1, #29
 8004e46:	4807      	ldr	r0, [pc, #28]	; (8004e64 <low_level_init+0x184>)
 8004e48:	f7fd fa0b 	bl	8002262 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004e4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004e50:	461a      	mov	r2, r3
 8004e52:	211d      	movs	r1, #29
 8004e54:	4803      	ldr	r0, [pc, #12]	; (8004e64 <low_level_init+0x184>)
 8004e56:	f7fd f99c 	bl	8002192 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004e5a:	bf00      	nop
 8004e5c:	3740      	adds	r7, #64	; 0x40
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	2000d130 	.word	0x2000d130
 8004e68:	40028000 	.word	0x40028000
 8004e6c:	2000d178 	.word	0x2000d178
 8004e70:	2000b860 	.word	0x2000b860
 8004e74:	2000b8e0 	.word	0x2000b8e0
 8004e78:	2000d0b0 	.word	0x2000d0b0
 8004e7c:	20000170 	.word	0x20000170
 8004e80:	0801b96c 	.word	0x0801b96c
 8004e84:	0800512d 	.word	0x0800512d

08004e88 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08a      	sub	sp, #40	; 0x28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004e92:	4b4b      	ldr	r3, [pc, #300]	; (8004fc0 <low_level_output+0x138>)
 8004e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004eaa:	4b45      	ldr	r3, [pc, #276]	; (8004fc0 <low_level_output+0x138>)
 8004eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eae:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	623b      	str	r3, [r7, #32]
 8004eb8:	e05a      	b.n	8004f70 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	da03      	bge.n	8004eca <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004ec2:	23f8      	movs	r3, #248	; 0xf8
 8004ec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004ec8:	e05c      	b.n	8004f84 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	895b      	ldrh	r3, [r3, #10]
 8004ece:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004ed4:	e02f      	b.n	8004f36 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	18d0      	adds	r0, r2, r3
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	18d1      	adds	r1, r2, r3
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004eea:	3304      	adds	r3, #4
 8004eec:	461a      	mov	r2, r3
 8004eee:	f015 fb65 	bl	801a5bc <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	da03      	bge.n	8004f08 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004f00:	23f8      	movs	r3, #248	; 0xf8
 8004f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004f06:	e03d      	b.n	8004f84 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4413      	add	r3, r2
 8004f14:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004f18:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004f24:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004f30:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004f32:	2300      	movs	r3, #0
 8004f34:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d8c8      	bhi.n	8004ed6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004f44:	69fa      	ldr	r2, [r7, #28]
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	18d0      	adds	r0, r2, r3
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	4413      	add	r3, r2
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	4619      	mov	r1, r3
 8004f56:	f015 fb31 	bl	801a5bc <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4413      	add	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4413      	add	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	623b      	str	r3, [r7, #32]
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1a1      	bne.n	8004eba <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004f76:	6979      	ldr	r1, [r7, #20]
 8004f78:	4811      	ldr	r0, [pc, #68]	; (8004fc0 <low_level_output+0x138>)
 8004f7a:	f7fc ff1d 	bl	8001db8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004f84:	4b0e      	ldr	r3, [pc, #56]	; (8004fc0 <low_level_output+0x138>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f8c:	3314      	adds	r3, #20
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0320 	and.w	r3, r3, #32
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00d      	beq.n	8004fb4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004f98:	4b09      	ldr	r3, [pc, #36]	; (8004fc0 <low_level_output+0x138>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fa0:	3314      	adds	r3, #20
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004fa6:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <low_level_output+0x138>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fae:	3304      	adds	r3, #4
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004fb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3728      	adds	r7, #40	; 0x28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	2000d130 	.word	0x2000d130

08004fc4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08c      	sub	sp, #48	; 0x30
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8004fe8:	484f      	ldr	r0, [pc, #316]	; (8005128 <low_level_input+0x164>)
 8004fea:	f7fc ffcf 	bl	8001f8c <HAL_ETH_GetReceivedFrame_IT>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <low_level_input+0x34>

    return NULL;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	e092      	b.n	800511e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004ff8:	4b4b      	ldr	r3, [pc, #300]	; (8005128 <low_level_input+0x164>)
 8004ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffc:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004ffe:	4b4a      	ldr	r3, [pc, #296]	; (8005128 <low_level_input+0x164>)
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005004:	89fb      	ldrh	r3, [r7, #14]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d007      	beq.n	800501a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800500a:	89fb      	ldrh	r3, [r7, #14]
 800500c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005010:	4619      	mov	r1, r3
 8005012:	2000      	movs	r0, #0
 8005014:	f009 f9f4 	bl	800e400 <pbuf_alloc>
 8005018:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800501a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d04b      	beq.n	80050b8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005020:	4b41      	ldr	r3, [pc, #260]	; (8005128 <low_level_input+0x164>)
 8005022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005024:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005026:	2300      	movs	r3, #0
 8005028:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800502a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502c:	62bb      	str	r3, [r7, #40]	; 0x28
 800502e:	e040      	b.n	80050b2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005032:	895b      	ldrh	r3, [r3, #10]
 8005034:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005036:	2300      	movs	r3, #0
 8005038:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800503a:	e021      	b.n	8005080 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800503c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	18d0      	adds	r0, r2, r3
 8005044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	18d1      	adds	r1, r2, r3
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8005050:	3304      	adds	r3, #4
 8005052:	461a      	mov	r2, r3
 8005054:	f015 fab2 	bl	801a5bc <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005064:	69fa      	ldr	r2, [r7, #28]
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	4413      	add	r3, r2
 800506a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800506e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800507a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800507c:	2300      	movs	r3, #0
 800507e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	4413      	add	r3, r2
 8005086:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800508a:	4293      	cmp	r3, r2
 800508c:	d8d6      	bhi.n	800503c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	18d0      	adds	r0, r2, r3
 8005096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	4413      	add	r3, r2
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	4619      	mov	r1, r3
 80050a0:	f015 fa8c 	bl	801a5bc <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80050a4:	69fa      	ldr	r2, [r7, #28]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	4413      	add	r3, r2
 80050aa:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80050b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1bb      	bne.n	8005030 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80050b8:	4b1b      	ldr	r3, [pc, #108]	; (8005128 <low_level_input+0x164>)
 80050ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050bc:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80050be:	2300      	movs	r3, #0
 80050c0:	613b      	str	r3, [r7, #16]
 80050c2:	e00b      	b.n	80050dc <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80050d0:	6a3b      	ldr	r3, [r7, #32]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	3301      	adds	r3, #1
 80050da:	613b      	str	r3, [r7, #16]
 80050dc:	4b12      	ldr	r3, [pc, #72]	; (8005128 <low_level_input+0x164>)
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d3ee      	bcc.n	80050c4 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80050e6:	4b10      	ldr	r3, [pc, #64]	; (8005128 <low_level_input+0x164>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80050ec:	4b0e      	ldr	r3, [pc, #56]	; (8005128 <low_level_input+0x164>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050f4:	3314      	adds	r3, #20
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00d      	beq.n	800511c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005100:	4b09      	ldr	r3, [pc, #36]	; (8005128 <low_level_input+0x164>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005108:	3314      	adds	r3, #20
 800510a:	2280      	movs	r2, #128	; 0x80
 800510c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800510e:	4b06      	ldr	r3, [pc, #24]	; (8005128 <low_level_input+0x164>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005116:	3308      	adds	r3, #8
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]
  }
  return p;
 800511c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800511e:	4618      	mov	r0, r3
 8005120:	3730      	adds	r7, #48	; 0x30
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	2000d130 	.word	0x2000d130

0800512c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005138:	4b12      	ldr	r3, [pc, #72]	; (8005184 <ethernetif_input+0x58>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f04f 31ff 	mov.w	r1, #4294967295
 8005140:	4618      	mov	r0, r3
 8005142:	f000 fc03 	bl	800594c <osSemaphoreAcquire>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1f5      	bne.n	8005138 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800514c:	480e      	ldr	r0, [pc, #56]	; (8005188 <ethernetif_input+0x5c>)
 800514e:	f013 facf 	bl	80186f0 <sys_mutex_lock>
        p = low_level_input( netif );
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f7ff ff36 	bl	8004fc4 <low_level_input>
 8005158:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	68f9      	ldr	r1, [r7, #12]
 8005166:	68b8      	ldr	r0, [r7, #8]
 8005168:	4798      	blx	r3
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8005170:	68b8      	ldr	r0, [r7, #8]
 8005172:	f009 fc5b 	bl	800ea2c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8005176:	4804      	ldr	r0, [pc, #16]	; (8005188 <ethernetif_input+0x5c>)
 8005178:	f013 fac9 	bl	801870e <sys_mutex_unlock>
      } while(p!=NULL);
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1e4      	bne.n	800514c <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005182:	e7d9      	b.n	8005138 <ethernetif_input+0xc>
 8005184:	20000170 	.word	0x20000170
 8005188:	2000e988 	.word	0x2000e988

0800518c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d106      	bne.n	80051a8 <ethernetif_init+0x1c>
 800519a:	4b0e      	ldr	r3, [pc, #56]	; (80051d4 <ethernetif_init+0x48>)
 800519c:	f44f 720c 	mov.w	r2, #560	; 0x230
 80051a0:	490d      	ldr	r1, [pc, #52]	; (80051d8 <ethernetif_init+0x4c>)
 80051a2:	480e      	ldr	r0, [pc, #56]	; (80051dc <ethernetif_init+0x50>)
 80051a4:	f015 fdd2 	bl	801ad4c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2273      	movs	r2, #115	; 0x73
 80051ac:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2274      	movs	r2, #116	; 0x74
 80051b4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a09      	ldr	r2, [pc, #36]	; (80051e0 <ethernetif_init+0x54>)
 80051bc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a08      	ldr	r2, [pc, #32]	; (80051e4 <ethernetif_init+0x58>)
 80051c2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7ff fd8b 	bl	8004ce0 <low_level_init>

  return ERR_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	0801b974 	.word	0x0801b974
 80051d8:	0801b990 	.word	0x0801b990
 80051dc:	0801b9a0 	.word	0x0801b9a0
 80051e0:	0801664d 	.word	0x0801664d
 80051e4:	08004e89 	.word	0x08004e89

080051e8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80051ec:	f7fb ff76 	bl	80010dc <HAL_GetTick>
 80051f0:	4603      	mov	r3, r0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	bd80      	pop	{r7, pc}
	...

080051f8 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005200:	2300      	movs	r3, #0
 8005202:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005208:	f107 0308 	add.w	r3, r7, #8
 800520c:	461a      	mov	r2, r3
 800520e:	2101      	movs	r1, #1
 8005210:	4816      	ldr	r0, [pc, #88]	; (800526c <ethernetif_set_link+0x74>)
 8005212:	f7fc ffbe 	bl	8002192 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b00      	cmp	r3, #0
 800522c:	d108      	bne.n	8005240 <ethernetif_set_link+0x48>
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4618      	mov	r0, r3
 800523a:	f008 ff7b 	bl	800e134 <netif_set_link_up>
 800523e:	e011      	b.n	8005264 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005248:	089b      	lsrs	r3, r3, #2
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d007      	beq.n	8005264 <ethernetif_set_link+0x6c>
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d104      	bne.n	8005264 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4618      	mov	r0, r3
 8005260:	f008 ff9c 	bl	800e19c <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8005264:	20c8      	movs	r0, #200	; 0xc8
 8005266:	f000 f9bf 	bl	80055e8 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800526a:	e7cd      	b.n	8005208 <ethernetif_set_link+0x10>
 800526c:	2000d130 	.word	0x2000d130

08005270 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005278:	2300      	movs	r3, #0
 800527a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800527c:	2300      	movs	r3, #0
 800527e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005286:	089b      	lsrs	r3, r3, #2
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d05d      	beq.n	800534e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005292:	4b34      	ldr	r3, [pc, #208]	; (8005364 <ethernetif_update_config+0xf4>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d03f      	beq.n	800531a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800529a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800529e:	2100      	movs	r1, #0
 80052a0:	4830      	ldr	r0, [pc, #192]	; (8005364 <ethernetif_update_config+0xf4>)
 80052a2:	f7fc ffde 	bl	8002262 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80052a6:	f7fb ff19 	bl	80010dc <HAL_GetTick>
 80052aa:	4603      	mov	r3, r0
 80052ac:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80052ae:	f107 0308 	add.w	r3, r7, #8
 80052b2:	461a      	mov	r2, r3
 80052b4:	2101      	movs	r1, #1
 80052b6:	482b      	ldr	r0, [pc, #172]	; (8005364 <ethernetif_update_config+0xf4>)
 80052b8:	f7fc ff6b 	bl	8002192 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80052bc:	f7fb ff0e 	bl	80010dc <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052ca:	d828      	bhi.n	800531e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f003 0320 	and.w	r3, r3, #32
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0eb      	beq.n	80052ae <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80052d6:	f107 0308 	add.w	r3, r7, #8
 80052da:	461a      	mov	r2, r3
 80052dc:	2110      	movs	r1, #16
 80052de:	4821      	ldr	r0, [pc, #132]	; (8005364 <ethernetif_update_config+0xf4>)
 80052e0:	f7fc ff57 	bl	8002192 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d004      	beq.n	80052f8 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80052ee:	4b1d      	ldr	r3, [pc, #116]	; (8005364 <ethernetif_update_config+0xf4>)
 80052f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052f4:	60da      	str	r2, [r3, #12]
 80052f6:	e002      	b.n	80052fe <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80052f8:	4b1a      	ldr	r3, [pc, #104]	; (8005364 <ethernetif_update_config+0xf4>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d003      	beq.n	8005310 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005308:	4b16      	ldr	r3, [pc, #88]	; (8005364 <ethernetif_update_config+0xf4>)
 800530a:	2200      	movs	r2, #0
 800530c:	609a      	str	r2, [r3, #8]
 800530e:	e016      	b.n	800533e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005310:	4b14      	ldr	r3, [pc, #80]	; (8005364 <ethernetif_update_config+0xf4>)
 8005312:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005316:	609a      	str	r2, [r3, #8]
 8005318:	e011      	b.n	800533e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800531a:	bf00      	nop
 800531c:	e000      	b.n	8005320 <ethernetif_update_config+0xb0>
          goto error;
 800531e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005320:	4b10      	ldr	r3, [pc, #64]	; (8005364 <ethernetif_update_config+0xf4>)
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	08db      	lsrs	r3, r3, #3
 8005326:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005328:	4b0e      	ldr	r3, [pc, #56]	; (8005364 <ethernetif_update_config+0xf4>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	085b      	lsrs	r3, r3, #1
 800532e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005330:	4313      	orrs	r3, r2
 8005332:	b29b      	uxth	r3, r3
 8005334:	461a      	mov	r2, r3
 8005336:	2100      	movs	r1, #0
 8005338:	480a      	ldr	r0, [pc, #40]	; (8005364 <ethernetif_update_config+0xf4>)
 800533a:	f7fc ff92 	bl	8002262 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800533e:	2100      	movs	r1, #0
 8005340:	4808      	ldr	r0, [pc, #32]	; (8005364 <ethernetif_update_config+0xf4>)
 8005342:	f7fd f853 	bl	80023ec <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005346:	4807      	ldr	r0, [pc, #28]	; (8005364 <ethernetif_update_config+0xf4>)
 8005348:	f7fc fff1 	bl	800232e <HAL_ETH_Start>
 800534c:	e002      	b.n	8005354 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800534e:	4805      	ldr	r0, [pc, #20]	; (8005364 <ethernetif_update_config+0xf4>)
 8005350:	f7fd f81c 	bl	800238c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f807 	bl	8005368 <ethernetif_notify_conn_changed>
}
 800535a:	bf00      	nop
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	2000d130 	.word	0x2000d130

08005368 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <__NVIC_SetPriority>:
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	4603      	mov	r3, r0
 8005384:	6039      	str	r1, [r7, #0]
 8005386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800538c:	2b00      	cmp	r3, #0
 800538e:	db0a      	blt.n	80053a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	b2da      	uxtb	r2, r3
 8005394:	490c      	ldr	r1, [pc, #48]	; (80053c8 <__NVIC_SetPriority+0x4c>)
 8005396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800539a:	0112      	lsls	r2, r2, #4
 800539c:	b2d2      	uxtb	r2, r2
 800539e:	440b      	add	r3, r1
 80053a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80053a4:	e00a      	b.n	80053bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	4908      	ldr	r1, [pc, #32]	; (80053cc <__NVIC_SetPriority+0x50>)
 80053ac:	79fb      	ldrb	r3, [r7, #7]
 80053ae:	f003 030f 	and.w	r3, r3, #15
 80053b2:	3b04      	subs	r3, #4
 80053b4:	0112      	lsls	r2, r2, #4
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	440b      	add	r3, r1
 80053ba:	761a      	strb	r2, [r3, #24]
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	e000e100 	.word	0xe000e100
 80053cc:	e000ed00 	.word	0xe000ed00

080053d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80053d0:	b580      	push	{r7, lr}
 80053d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80053d4:	4b05      	ldr	r3, [pc, #20]	; (80053ec <SysTick_Handler+0x1c>)
 80053d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80053d8:	f002 fdac 	bl	8007f34 <xTaskGetSchedulerState>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d001      	beq.n	80053e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80053e2:	f003 fc91 	bl	8008d08 <xPortSysTickHandler>
  }
}
 80053e6:	bf00      	nop
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	e000e010 	.word	0xe000e010

080053f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80053f4:	2100      	movs	r1, #0
 80053f6:	f06f 0004 	mvn.w	r0, #4
 80053fa:	f7ff ffbf 	bl	800537c <__NVIC_SetPriority>
#endif
}
 80053fe:	bf00      	nop
 8005400:	bd80      	pop	{r7, pc}
	...

08005404 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800540a:	f3ef 8305 	mrs	r3, IPSR
 800540e:	603b      	str	r3, [r7, #0]
  return(result);
 8005410:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005416:	f06f 0305 	mvn.w	r3, #5
 800541a:	607b      	str	r3, [r7, #4]
 800541c:	e00c      	b.n	8005438 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800541e:	4b0a      	ldr	r3, [pc, #40]	; (8005448 <osKernelInitialize+0x44>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d105      	bne.n	8005432 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005426:	4b08      	ldr	r3, [pc, #32]	; (8005448 <osKernelInitialize+0x44>)
 8005428:	2201      	movs	r2, #1
 800542a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800542c:	2300      	movs	r3, #0
 800542e:	607b      	str	r3, [r7, #4]
 8005430:	e002      	b.n	8005438 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005432:	f04f 33ff 	mov.w	r3, #4294967295
 8005436:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005438:	687b      	ldr	r3, [r7, #4]
}
 800543a:	4618      	mov	r0, r3
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	20000174 	.word	0x20000174

0800544c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005452:	f3ef 8305 	mrs	r3, IPSR
 8005456:	603b      	str	r3, [r7, #0]
  return(result);
 8005458:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <osKernelStart+0x1a>
    stat = osErrorISR;
 800545e:	f06f 0305 	mvn.w	r3, #5
 8005462:	607b      	str	r3, [r7, #4]
 8005464:	e010      	b.n	8005488 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005466:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <osKernelStart+0x48>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d109      	bne.n	8005482 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800546e:	f7ff ffbf 	bl	80053f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005472:	4b08      	ldr	r3, [pc, #32]	; (8005494 <osKernelStart+0x48>)
 8005474:	2202      	movs	r2, #2
 8005476:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005478:	f002 f8de 	bl	8007638 <vTaskStartScheduler>
      stat = osOK;
 800547c:	2300      	movs	r3, #0
 800547e:	607b      	str	r3, [r7, #4]
 8005480:	e002      	b.n	8005488 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005482:	f04f 33ff 	mov.w	r3, #4294967295
 8005486:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005488:	687b      	ldr	r3, [r7, #4]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3708      	adds	r7, #8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	20000174 	.word	0x20000174

08005498 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800549e:	f3ef 8305 	mrs	r3, IPSR
 80054a2:	603b      	str	r3, [r7, #0]
  return(result);
 80054a4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80054aa:	f002 f9f1 	bl	8007890 <xTaskGetTickCountFromISR>
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	e002      	b.n	80054b8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80054b2:	f002 f9dd 	bl	8007870 <xTaskGetTickCount>
 80054b6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80054b8:	687b      	ldr	r3, [r7, #4]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b08e      	sub	sp, #56	; 0x38
 80054c6:	af04      	add	r7, sp, #16
 80054c8:	60f8      	str	r0, [r7, #12]
 80054ca:	60b9      	str	r1, [r7, #8]
 80054cc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054d2:	f3ef 8305 	mrs	r3, IPSR
 80054d6:	617b      	str	r3, [r7, #20]
  return(result);
 80054d8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d17f      	bne.n	80055de <osThreadNew+0x11c>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d07c      	beq.n	80055de <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 80054e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80054ea:	2318      	movs	r3, #24
 80054ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80054ee:	2300      	movs	r3, #0
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80054f2:	f04f 33ff 	mov.w	r3, #4294967295
 80054f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d045      	beq.n	800558a <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <osThreadNew+0x4a>
        name = attr->name;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d008      	beq.n	8005532 <osThreadNew+0x70>
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	2b38      	cmp	r3, #56	; 0x38
 8005524:	d805      	bhi.n	8005532 <osThreadNew+0x70>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <osThreadNew+0x74>
        return (NULL);
 8005532:	2300      	movs	r3, #0
 8005534:	e054      	b.n	80055e0 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	089b      	lsrs	r3, r3, #2
 8005544:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00e      	beq.n	800556c <osThreadNew+0xaa>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	2bbb      	cmp	r3, #187	; 0xbb
 8005554:	d90a      	bls.n	800556c <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800555a:	2b00      	cmp	r3, #0
 800555c:	d006      	beq.n	800556c <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d002      	beq.n	800556c <osThreadNew+0xaa>
        mem = 1;
 8005566:	2301      	movs	r3, #1
 8005568:	61bb      	str	r3, [r7, #24]
 800556a:	e010      	b.n	800558e <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10c      	bne.n	800558e <osThreadNew+0xcc>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d108      	bne.n	800558e <osThreadNew+0xcc>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d104      	bne.n	800558e <osThreadNew+0xcc>
          mem = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	61bb      	str	r3, [r7, #24]
 8005588:	e001      	b.n	800558e <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800558a:	2300      	movs	r3, #0
 800558c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d110      	bne.n	80055b6 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800559c:	9202      	str	r2, [sp, #8]
 800559e:	9301      	str	r3, [sp, #4]
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	6a3a      	ldr	r2, [r7, #32]
 80055a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f001 fde6 	bl	800717c <xTaskCreateStatic>
 80055b0:	4603      	mov	r3, r0
 80055b2:	613b      	str	r3, [r7, #16]
 80055b4:	e013      	b.n	80055de <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d110      	bne.n	80055de <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	b29a      	uxth	r2, r3
 80055c0:	f107 0310 	add.w	r3, r7, #16
 80055c4:	9301      	str	r3, [sp, #4]
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f001 fe31 	bl	8007236 <xTaskCreate>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d001      	beq.n	80055de <osThreadNew+0x11c>
            hTask = NULL;
 80055da:	2300      	movs	r3, #0
 80055dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80055de:	693b      	ldr	r3, [r7, #16]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3728      	adds	r7, #40	; 0x28
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055f0:	f3ef 8305 	mrs	r3, IPSR
 80055f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80055f6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <osDelay+0x1c>
    stat = osErrorISR;
 80055fc:	f06f 0305 	mvn.w	r3, #5
 8005600:	60fb      	str	r3, [r7, #12]
 8005602:	e007      	b.n	8005614 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005604:	2300      	movs	r3, #0
 8005606:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d002      	beq.n	8005614 <osDelay+0x2c>
      vTaskDelay(ticks);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f001 ffde 	bl	80075d0 <vTaskDelay>
    }
  }

  return (stat);
 8005614:	68fb      	ldr	r3, [r7, #12]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800561e:	b580      	push	{r7, lr}
 8005620:	b088      	sub	sp, #32
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005626:	2300      	movs	r3, #0
 8005628:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800562a:	f3ef 8305 	mrs	r3, IPSR
 800562e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005630:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005632:	2b00      	cmp	r3, #0
 8005634:	d174      	bne.n	8005720 <osMutexNew+0x102>
    if (attr != NULL) {
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d003      	beq.n	8005644 <osMutexNew+0x26>
      type = attr->attr_bits;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	61bb      	str	r3, [r7, #24]
 8005642:	e001      	b.n	8005648 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d002      	beq.n	8005658 <osMutexNew+0x3a>
      rmtx = 1U;
 8005652:	2301      	movs	r3, #1
 8005654:	617b      	str	r3, [r7, #20]
 8005656:	e001      	b.n	800565c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b00      	cmp	r3, #0
 8005664:	d15c      	bne.n	8005720 <osMutexNew+0x102>
      mem = -1;
 8005666:	f04f 33ff 	mov.w	r3, #4294967295
 800566a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d015      	beq.n	800569e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d006      	beq.n	8005688 <osMutexNew+0x6a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	2b4f      	cmp	r3, #79	; 0x4f
 8005680:	d902      	bls.n	8005688 <osMutexNew+0x6a>
          mem = 1;
 8005682:	2301      	movs	r3, #1
 8005684:	613b      	str	r3, [r7, #16]
 8005686:	e00c      	b.n	80056a2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d108      	bne.n	80056a2 <osMutexNew+0x84>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d104      	bne.n	80056a2 <osMutexNew+0x84>
            mem = 0;
 8005698:	2300      	movs	r3, #0
 800569a:	613b      	str	r3, [r7, #16]
 800569c:	e001      	b.n	80056a2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800569e:	2300      	movs	r3, #0
 80056a0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d112      	bne.n	80056ce <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d007      	beq.n	80056be <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	4619      	mov	r1, r3
 80056b4:	2004      	movs	r0, #4
 80056b6:	f000 fdd0 	bl	800625a <xQueueCreateMutexStatic>
 80056ba:	61f8      	str	r0, [r7, #28]
 80056bc:	e016      	b.n	80056ec <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	4619      	mov	r1, r3
 80056c4:	2001      	movs	r0, #1
 80056c6:	f000 fdc8 	bl	800625a <xQueueCreateMutexStatic>
 80056ca:	61f8      	str	r0, [r7, #28]
 80056cc:	e00e      	b.n	80056ec <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10b      	bne.n	80056ec <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d004      	beq.n	80056e4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80056da:	2004      	movs	r0, #4
 80056dc:	f000 fda5 	bl	800622a <xQueueCreateMutex>
 80056e0:	61f8      	str	r0, [r7, #28]
 80056e2:	e003      	b.n	80056ec <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80056e4:	2001      	movs	r0, #1
 80056e6:	f000 fda0 	bl	800622a <xQueueCreateMutex>
 80056ea:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00c      	beq.n	800570c <osMutexNew+0xee>
        if (attr != NULL) {
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <osMutexNew+0xe2>
          name = attr->name;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	e001      	b.n	8005704 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005700:	2300      	movs	r3, #0
 8005702:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005704:	68f9      	ldr	r1, [r7, #12]
 8005706:	69f8      	ldr	r0, [r7, #28]
 8005708:	f001 fcb0 	bl	800706c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d006      	beq.n	8005720 <osMutexNew+0x102>
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d003      	beq.n	8005720 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	f043 0301 	orr.w	r3, r3, #1
 800571e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005720:	69fb      	ldr	r3, [r7, #28]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3720      	adds	r7, #32
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800572a:	b580      	push	{r7, lr}
 800572c:	b086      	sub	sp, #24
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f023 0301 	bic.w	r3, r3, #1
 800573a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005744:	2300      	movs	r3, #0
 8005746:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005748:	f3ef 8305 	mrs	r3, IPSR
 800574c:	60bb      	str	r3, [r7, #8]
  return(result);
 800574e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005750:	2b00      	cmp	r3, #0
 8005752:	d003      	beq.n	800575c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005754:	f06f 0305 	mvn.w	r3, #5
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	e02c      	b.n	80057b6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d103      	bne.n	800576a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005762:	f06f 0303 	mvn.w	r3, #3
 8005766:	617b      	str	r3, [r7, #20]
 8005768:	e025      	b.n	80057b6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d011      	beq.n	8005794 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005770:	6839      	ldr	r1, [r7, #0]
 8005772:	6938      	ldr	r0, [r7, #16]
 8005774:	f000 fdc0 	bl	80062f8 <xQueueTakeMutexRecursive>
 8005778:	4603      	mov	r3, r0
 800577a:	2b01      	cmp	r3, #1
 800577c:	d01b      	beq.n	80057b6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005784:	f06f 0301 	mvn.w	r3, #1
 8005788:	617b      	str	r3, [r7, #20]
 800578a:	e014      	b.n	80057b6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800578c:	f06f 0302 	mvn.w	r3, #2
 8005790:	617b      	str	r3, [r7, #20]
 8005792:	e010      	b.n	80057b6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005794:	6839      	ldr	r1, [r7, #0]
 8005796:	6938      	ldr	r0, [r7, #16]
 8005798:	f001 f954 	bl	8006a44 <xQueueSemaphoreTake>
 800579c:	4603      	mov	r3, r0
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d009      	beq.n	80057b6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d003      	beq.n	80057b0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80057a8:	f06f 0301 	mvn.w	r3, #1
 80057ac:	617b      	str	r3, [r7, #20]
 80057ae:	e002      	b.n	80057b6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80057b0:	f06f 0302 	mvn.w	r3, #2
 80057b4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80057b6:	697b      	ldr	r3, [r7, #20]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3718      	adds	r7, #24
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f023 0301 	bic.w	r3, r3, #1
 80057ce:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80057d8:	2300      	movs	r3, #0
 80057da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057dc:	f3ef 8305 	mrs	r3, IPSR
 80057e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80057e2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <osMutexRelease+0x30>
    stat = osErrorISR;
 80057e8:	f06f 0305 	mvn.w	r3, #5
 80057ec:	617b      	str	r3, [r7, #20]
 80057ee:	e01f      	b.n	8005830 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d103      	bne.n	80057fe <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80057f6:	f06f 0303 	mvn.w	r3, #3
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	e018      	b.n	8005830 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d009      	beq.n	8005818 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005804:	6938      	ldr	r0, [r7, #16]
 8005806:	f000 fd43 	bl	8006290 <xQueueGiveMutexRecursive>
 800580a:	4603      	mov	r3, r0
 800580c:	2b01      	cmp	r3, #1
 800580e:	d00f      	beq.n	8005830 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005810:	f06f 0302 	mvn.w	r3, #2
 8005814:	617b      	str	r3, [r7, #20]
 8005816:	e00b      	b.n	8005830 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005818:	2300      	movs	r3, #0
 800581a:	2200      	movs	r2, #0
 800581c:	2100      	movs	r1, #0
 800581e:	6938      	ldr	r0, [r7, #16]
 8005820:	f000 fe0a 	bl	8006438 <xQueueGenericSend>
 8005824:	4603      	mov	r3, r0
 8005826:	2b01      	cmp	r3, #1
 8005828:	d002      	beq.n	8005830 <osMutexRelease+0x70>
        stat = osErrorResource;
 800582a:	f06f 0302 	mvn.w	r3, #2
 800582e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005830:	697b      	ldr	r3, [r7, #20]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800583a:	b580      	push	{r7, lr}
 800583c:	b08a      	sub	sp, #40	; 0x28
 800583e:	af02      	add	r7, sp, #8
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	60b9      	str	r1, [r7, #8]
 8005844:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005846:	2300      	movs	r3, #0
 8005848:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800584a:	f3ef 8305 	mrs	r3, IPSR
 800584e:	613b      	str	r3, [r7, #16]
  return(result);
 8005850:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005852:	2b00      	cmp	r3, #0
 8005854:	d175      	bne.n	8005942 <osSemaphoreNew+0x108>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d072      	beq.n	8005942 <osSemaphoreNew+0x108>
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	429a      	cmp	r2, r3
 8005862:	d86e      	bhi.n	8005942 <osSemaphoreNew+0x108>
    mem = -1;
 8005864:	f04f 33ff 	mov.w	r3, #4294967295
 8005868:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d015      	beq.n	800589c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d006      	beq.n	8005886 <osSemaphoreNew+0x4c>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	2b4f      	cmp	r3, #79	; 0x4f
 800587e:	d902      	bls.n	8005886 <osSemaphoreNew+0x4c>
        mem = 1;
 8005880:	2301      	movs	r3, #1
 8005882:	61bb      	str	r3, [r7, #24]
 8005884:	e00c      	b.n	80058a0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d108      	bne.n	80058a0 <osSemaphoreNew+0x66>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d104      	bne.n	80058a0 <osSemaphoreNew+0x66>
          mem = 0;
 8005896:	2300      	movs	r3, #0
 8005898:	61bb      	str	r3, [r7, #24]
 800589a:	e001      	b.n	80058a0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800589c:	2300      	movs	r3, #0
 800589e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a6:	d04c      	beq.n	8005942 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d128      	bne.n	8005900 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d10a      	bne.n	80058ca <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	2203      	movs	r2, #3
 80058ba:	9200      	str	r2, [sp, #0]
 80058bc:	2200      	movs	r2, #0
 80058be:	2100      	movs	r1, #0
 80058c0:	2001      	movs	r0, #1
 80058c2:	f000 fbc3 	bl	800604c <xQueueGenericCreateStatic>
 80058c6:	61f8      	str	r0, [r7, #28]
 80058c8:	e005      	b.n	80058d6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80058ca:	2203      	movs	r2, #3
 80058cc:	2100      	movs	r1, #0
 80058ce:	2001      	movs	r0, #1
 80058d0:	f000 fc34 	bl	800613c <xQueueGenericCreate>
 80058d4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d022      	beq.n	8005922 <osSemaphoreNew+0xe8>
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d01f      	beq.n	8005922 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80058e2:	2300      	movs	r3, #0
 80058e4:	2200      	movs	r2, #0
 80058e6:	2100      	movs	r1, #0
 80058e8:	69f8      	ldr	r0, [r7, #28]
 80058ea:	f000 fda5 	bl	8006438 <xQueueGenericSend>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d016      	beq.n	8005922 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80058f4:	69f8      	ldr	r0, [r7, #28]
 80058f6:	f001 fa6d 	bl	8006dd4 <vQueueDelete>
            hSemaphore = NULL;
 80058fa:	2300      	movs	r3, #0
 80058fc:	61fb      	str	r3, [r7, #28]
 80058fe:	e010      	b.n	8005922 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d108      	bne.n	8005918 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	461a      	mov	r2, r3
 800590c:	68b9      	ldr	r1, [r7, #8]
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 fd28 	bl	8006364 <xQueueCreateCountingSemaphoreStatic>
 8005914:	61f8      	str	r0, [r7, #28]
 8005916:	e004      	b.n	8005922 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005918:	68b9      	ldr	r1, [r7, #8]
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f000 fd59 	bl	80063d2 <xQueueCreateCountingSemaphore>
 8005920:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00c      	beq.n	8005942 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <osSemaphoreNew+0xfc>
          name = attr->name;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	e001      	b.n	800593a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005936:	2300      	movs	r3, #0
 8005938:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800593a:	6979      	ldr	r1, [r7, #20]
 800593c:	69f8      	ldr	r0, [r7, #28]
 800593e:	f001 fb95 	bl	800706c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005942:	69fb      	ldr	r3, [r7, #28]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3720      	adds	r7, #32
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800595a:	2300      	movs	r3, #0
 800595c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d103      	bne.n	800596c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005964:	f06f 0303 	mvn.w	r3, #3
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	e039      	b.n	80059e0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800596c:	f3ef 8305 	mrs	r3, IPSR
 8005970:	60fb      	str	r3, [r7, #12]
  return(result);
 8005972:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005974:	2b00      	cmp	r3, #0
 8005976:	d022      	beq.n	80059be <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800597e:	f06f 0303 	mvn.w	r3, #3
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	e02c      	b.n	80059e0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005986:	2300      	movs	r3, #0
 8005988:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800598a:	f107 0308 	add.w	r3, r7, #8
 800598e:	461a      	mov	r2, r3
 8005990:	2100      	movs	r1, #0
 8005992:	6938      	ldr	r0, [r7, #16]
 8005994:	f001 f962 	bl	8006c5c <xQueueReceiveFromISR>
 8005998:	4603      	mov	r3, r0
 800599a:	2b01      	cmp	r3, #1
 800599c:	d003      	beq.n	80059a6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800599e:	f06f 0302 	mvn.w	r3, #2
 80059a2:	617b      	str	r3, [r7, #20]
 80059a4:	e01c      	b.n	80059e0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d019      	beq.n	80059e0 <osSemaphoreAcquire+0x94>
 80059ac:	4b0f      	ldr	r3, [pc, #60]	; (80059ec <osSemaphoreAcquire+0xa0>)
 80059ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	e010      	b.n	80059e0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80059be:	6839      	ldr	r1, [r7, #0]
 80059c0:	6938      	ldr	r0, [r7, #16]
 80059c2:	f001 f83f 	bl	8006a44 <xQueueSemaphoreTake>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d009      	beq.n	80059e0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80059d2:	f06f 0301 	mvn.w	r3, #1
 80059d6:	617b      	str	r3, [r7, #20]
 80059d8:	e002      	b.n	80059e0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80059da:	f06f 0302 	mvn.w	r3, #2
 80059de:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80059e0:	697b      	ldr	r3, [r7, #20]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3718      	adds	r7, #24
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	e000ed04 	.word	0xe000ed04

080059f0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80059fc:	2300      	movs	r3, #0
 80059fe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d103      	bne.n	8005a0e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005a06:	f06f 0303 	mvn.w	r3, #3
 8005a0a:	617b      	str	r3, [r7, #20]
 8005a0c:	e02c      	b.n	8005a68 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a0e:	f3ef 8305 	mrs	r3, IPSR
 8005a12:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a14:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d01a      	beq.n	8005a50 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005a1e:	f107 0308 	add.w	r3, r7, #8
 8005a22:	4619      	mov	r1, r3
 8005a24:	6938      	ldr	r0, [r7, #16]
 8005a26:	f000 fea0 	bl	800676a <xQueueGiveFromISR>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d003      	beq.n	8005a38 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005a30:	f06f 0302 	mvn.w	r3, #2
 8005a34:	617b      	str	r3, [r7, #20]
 8005a36:	e017      	b.n	8005a68 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d014      	beq.n	8005a68 <osSemaphoreRelease+0x78>
 8005a3e:	4b0d      	ldr	r3, [pc, #52]	; (8005a74 <osSemaphoreRelease+0x84>)
 8005a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	e00b      	b.n	8005a68 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005a50:	2300      	movs	r3, #0
 8005a52:	2200      	movs	r2, #0
 8005a54:	2100      	movs	r1, #0
 8005a56:	6938      	ldr	r0, [r7, #16]
 8005a58:	f000 fcee 	bl	8006438 <xQueueGenericSend>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d002      	beq.n	8005a68 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005a62:	f06f 0302 	mvn.w	r3, #2
 8005a66:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005a68:	697b      	ldr	r3, [r7, #20]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3718      	adds	r7, #24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	e000ed04 	.word	0xe000ed04

08005a78 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a84:	f3ef 8305 	mrs	r3, IPSR
 8005a88:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d003      	beq.n	8005a98 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8005a90:	f06f 0305 	mvn.w	r3, #5
 8005a94:	617b      	str	r3, [r7, #20]
 8005a96:	e00e      	b.n	8005ab6 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d103      	bne.n	8005aa6 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8005a9e:	f06f 0303 	mvn.w	r3, #3
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	e007      	b.n	8005ab6 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8005aa6:	6938      	ldr	r0, [r7, #16]
 8005aa8:	f001 fb0a 	bl	80070c0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005aac:	2300      	movs	r3, #0
 8005aae:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8005ab0:	6938      	ldr	r0, [r7, #16]
 8005ab2:	f001 f98f 	bl	8006dd4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005ab6:	697b      	ldr	r3, [r7, #20]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3718      	adds	r7, #24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b08a      	sub	sp, #40	; 0x28
 8005ac4:	af02      	add	r7, sp, #8
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005acc:	2300      	movs	r3, #0
 8005ace:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ad0:	f3ef 8305 	mrs	r3, IPSR
 8005ad4:	613b      	str	r3, [r7, #16]
  return(result);
 8005ad6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d15f      	bne.n	8005b9c <osMessageQueueNew+0xdc>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d05c      	beq.n	8005b9c <osMessageQueueNew+0xdc>
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d059      	beq.n	8005b9c <osMessageQueueNew+0xdc>
    mem = -1;
 8005ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8005aec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d029      	beq.n	8005b48 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d012      	beq.n	8005b22 <osMessageQueueNew+0x62>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	2b4f      	cmp	r3, #79	; 0x4f
 8005b02:	d90e      	bls.n	8005b22 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	695a      	ldr	r2, [r3, #20]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	68b9      	ldr	r1, [r7, #8]
 8005b14:	fb01 f303 	mul.w	r3, r1, r3
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d302      	bcc.n	8005b22 <osMessageQueueNew+0x62>
        mem = 1;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	61bb      	str	r3, [r7, #24]
 8005b20:	e014      	b.n	8005b4c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d110      	bne.n	8005b4c <osMessageQueueNew+0x8c>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10c      	bne.n	8005b4c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d108      	bne.n	8005b4c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d104      	bne.n	8005b4c <osMessageQueueNew+0x8c>
          mem = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	61bb      	str	r3, [r7, #24]
 8005b46:	e001      	b.n	8005b4c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d10b      	bne.n	8005b6a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691a      	ldr	r2, [r3, #16]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	9100      	str	r1, [sp, #0]
 8005b5e:	68b9      	ldr	r1, [r7, #8]
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 fa73 	bl	800604c <xQueueGenericCreateStatic>
 8005b66:	61f8      	str	r0, [r7, #28]
 8005b68:	e008      	b.n	8005b7c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d105      	bne.n	8005b7c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005b70:	2200      	movs	r2, #0
 8005b72:	68b9      	ldr	r1, [r7, #8]
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 fae1 	bl	800613c <xQueueGenericCreate>
 8005b7a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00c      	beq.n	8005b9c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d003      	beq.n	8005b90 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	617b      	str	r3, [r7, #20]
 8005b8e:	e001      	b.n	8005b94 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005b90:	2300      	movs	r3, #0
 8005b92:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005b94:	6979      	ldr	r1, [r7, #20]
 8005b96:	69f8      	ldr	r0, [r7, #28]
 8005b98:	f001 fa68 	bl	800706c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005b9c:	69fb      	ldr	r3, [r7, #28]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3720      	adds	r7, #32
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
	...

08005ba8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b088      	sub	sp, #32
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	603b      	str	r3, [r7, #0]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bc0:	f3ef 8305 	mrs	r3, IPSR
 8005bc4:	617b      	str	r3, [r7, #20]
  return(result);
 8005bc6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d028      	beq.n	8005c1e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d005      	beq.n	8005bde <osMessageQueuePut+0x36>
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <osMessageQueuePut+0x36>
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005bde:	f06f 0303 	mvn.w	r3, #3
 8005be2:	61fb      	str	r3, [r7, #28]
 8005be4:	e038      	b.n	8005c58 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005be6:	2300      	movs	r3, #0
 8005be8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005bea:	f107 0210 	add.w	r2, r7, #16
 8005bee:	2300      	movs	r3, #0
 8005bf0:	68b9      	ldr	r1, [r7, #8]
 8005bf2:	69b8      	ldr	r0, [r7, #24]
 8005bf4:	f000 fd1e 	bl	8006634 <xQueueGenericSendFromISR>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d003      	beq.n	8005c06 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005bfe:	f06f 0302 	mvn.w	r3, #2
 8005c02:	61fb      	str	r3, [r7, #28]
 8005c04:	e028      	b.n	8005c58 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d025      	beq.n	8005c58 <osMessageQueuePut+0xb0>
 8005c0c:	4b15      	ldr	r3, [pc, #84]	; (8005c64 <osMessageQueuePut+0xbc>)
 8005c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	e01c      	b.n	8005c58 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <osMessageQueuePut+0x82>
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d103      	bne.n	8005c32 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005c2a:	f06f 0303 	mvn.w	r3, #3
 8005c2e:	61fb      	str	r3, [r7, #28]
 8005c30:	e012      	b.n	8005c58 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005c32:	2300      	movs	r3, #0
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	68b9      	ldr	r1, [r7, #8]
 8005c38:	69b8      	ldr	r0, [r7, #24]
 8005c3a:	f000 fbfd 	bl	8006438 <xQueueGenericSend>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d009      	beq.n	8005c58 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005c4a:	f06f 0301 	mvn.w	r3, #1
 8005c4e:	61fb      	str	r3, [r7, #28]
 8005c50:	e002      	b.n	8005c58 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005c52:	f06f 0302 	mvn.w	r3, #2
 8005c56:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005c58:	69fb      	ldr	r3, [r7, #28]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3720      	adds	r7, #32
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	e000ed04 	.word	0xe000ed04

08005c68 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b088      	sub	sp, #32
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
 8005c74:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c7e:	f3ef 8305 	mrs	r3, IPSR
 8005c82:	617b      	str	r3, [r7, #20]
  return(result);
 8005c84:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d028      	beq.n	8005cdc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d005      	beq.n	8005c9c <osMessageQueueGet+0x34>
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d002      	beq.n	8005c9c <osMessageQueueGet+0x34>
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d003      	beq.n	8005ca4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005c9c:	f06f 0303 	mvn.w	r3, #3
 8005ca0:	61fb      	str	r3, [r7, #28]
 8005ca2:	e037      	b.n	8005d14 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005ca8:	f107 0310 	add.w	r3, r7, #16
 8005cac:	461a      	mov	r2, r3
 8005cae:	68b9      	ldr	r1, [r7, #8]
 8005cb0:	69b8      	ldr	r0, [r7, #24]
 8005cb2:	f000 ffd3 	bl	8006c5c <xQueueReceiveFromISR>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d003      	beq.n	8005cc4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005cbc:	f06f 0302 	mvn.w	r3, #2
 8005cc0:	61fb      	str	r3, [r7, #28]
 8005cc2:	e027      	b.n	8005d14 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d024      	beq.n	8005d14 <osMessageQueueGet+0xac>
 8005cca:	4b15      	ldr	r3, [pc, #84]	; (8005d20 <osMessageQueueGet+0xb8>)
 8005ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	e01b      	b.n	8005d14 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <osMessageQueueGet+0x80>
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d103      	bne.n	8005cf0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005ce8:	f06f 0303 	mvn.w	r3, #3
 8005cec:	61fb      	str	r3, [r7, #28]
 8005cee:	e011      	b.n	8005d14 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	68b9      	ldr	r1, [r7, #8]
 8005cf4:	69b8      	ldr	r0, [r7, #24]
 8005cf6:	f000 fdc5 	bl	8006884 <xQueueReceive>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d009      	beq.n	8005d14 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005d06:	f06f 0301 	mvn.w	r3, #1
 8005d0a:	61fb      	str	r3, [r7, #28]
 8005d0c:	e002      	b.n	8005d14 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005d0e:	f06f 0302 	mvn.w	r3, #2
 8005d12:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005d14:	69fb      	ldr	r3, [r7, #28]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3720      	adds	r7, #32
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	e000ed04 	.word	0xe000ed04

08005d24 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d102      	bne.n	8005d3c <osMessageQueueGetCount+0x18>
    count = 0U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	617b      	str	r3, [r7, #20]
 8005d3a:	e00e      	b.n	8005d5a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d3c:	f3ef 8305 	mrs	r3, IPSR
 8005d40:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d42:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d004      	beq.n	8005d52 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8005d48:	6938      	ldr	r0, [r7, #16]
 8005d4a:	f001 f825 	bl	8006d98 <uxQueueMessagesWaitingFromISR>
 8005d4e:	6178      	str	r0, [r7, #20]
 8005d50:	e003      	b.n	8005d5a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005d52:	6938      	ldr	r0, [r7, #16]
 8005d54:	f001 f802 	bl	8006d5c <uxQueueMessagesWaiting>
 8005d58:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8005d5a:	697b      	ldr	r3, [r7, #20]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3718      	adds	r7, #24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d70:	f3ef 8305 	mrs	r3, IPSR
 8005d74:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d76:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 8005d7c:	f06f 0305 	mvn.w	r3, #5
 8005d80:	617b      	str	r3, [r7, #20]
 8005d82:	e00e      	b.n	8005da2 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d103      	bne.n	8005d92 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 8005d8a:	f06f 0303 	mvn.w	r3, #3
 8005d8e:	617b      	str	r3, [r7, #20]
 8005d90:	e007      	b.n	8005da2 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8005d92:	6938      	ldr	r0, [r7, #16]
 8005d94:	f001 f994 	bl	80070c0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 8005d9c:	6938      	ldr	r0, [r7, #16]
 8005d9e:	f001 f819 	bl	8006dd4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005da2:	697b      	ldr	r3, [r7, #20]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3718      	adds	r7, #24
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4a07      	ldr	r2, [pc, #28]	; (8005dd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8005dbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	4a06      	ldr	r2, [pc, #24]	; (8005ddc <vApplicationGetIdleTaskMemory+0x30>)
 8005dc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dca:	601a      	str	r2, [r3, #0]
}
 8005dcc:	bf00      	nop
 8005dce:	3714      	adds	r7, #20
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	20000178 	.word	0x20000178
 8005ddc:	20000234 	.word	0x20000234

08005de0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4a07      	ldr	r2, [pc, #28]	; (8005e0c <vApplicationGetTimerTaskMemory+0x2c>)
 8005df0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	4a06      	ldr	r2, [pc, #24]	; (8005e10 <vApplicationGetTimerTaskMemory+0x30>)
 8005df6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dfe:	601a      	str	r2, [r3, #0]
}
 8005e00:	bf00      	nop
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	20000634 	.word	0x20000634
 8005e10:	200006f0 	.word	0x200006f0

08005e14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f103 0208 	add.w	r2, r3, #8
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f103 0208 	add.w	r2, r3, #8
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f103 0208 	add.w	r2, r3, #8
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e62:	bf00      	nop
 8005e64:	370c      	adds	r7, #12
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr

08005e6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b085      	sub	sp, #20
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	1c5a      	adds	r2, r3, #1
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	601a      	str	r2, [r3, #0]
}
 8005eaa:	bf00      	nop
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b085      	sub	sp, #20
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
 8005ebe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ecc:	d103      	bne.n	8005ed6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	e00c      	b.n	8005ef0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	3308      	adds	r3, #8
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	e002      	b.n	8005ee4 <vListInsert+0x2e>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d2f6      	bcs.n	8005ede <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	601a      	str	r2, [r3, #0]
}
 8005f1c:	bf00      	nop
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	6892      	ldr	r2, [r2, #8]
 8005f3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	6852      	ldr	r2, [r2, #4]
 8005f48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d103      	bne.n	8005f5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	1e5a      	subs	r2, r3, #1
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10a      	bne.n	8005fa6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005fa2:	bf00      	nop
 8005fa4:	e7fe      	b.n	8005fa4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005fa6:	f002 fe1d 	bl	8008be4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb2:	68f9      	ldr	r1, [r7, #12]
 8005fb4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005fb6:	fb01 f303 	mul.w	r3, r1, r3
 8005fba:	441a      	add	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	68f9      	ldr	r1, [r7, #12]
 8005fda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005fdc:	fb01 f303 	mul.w	r3, r1, r3
 8005fe0:	441a      	add	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	22ff      	movs	r2, #255	; 0xff
 8005fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	22ff      	movs	r2, #255	; 0xff
 8005ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d114      	bne.n	8006026 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d01a      	beq.n	800603a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	3310      	adds	r3, #16
 8006008:	4618      	mov	r0, r3
 800600a:	f001 fdc1 	bl	8007b90 <xTaskRemoveFromEventList>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d012      	beq.n	800603a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006014:	4b0c      	ldr	r3, [pc, #48]	; (8006048 <xQueueGenericReset+0xcc>)
 8006016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	e009      	b.n	800603a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	3310      	adds	r3, #16
 800602a:	4618      	mov	r0, r3
 800602c:	f7ff fef2 	bl	8005e14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3324      	adds	r3, #36	; 0x24
 8006034:	4618      	mov	r0, r3
 8006036:	f7ff feed 	bl	8005e14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800603a:	f002 fe03 	bl	8008c44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800603e:	2301      	movs	r3, #1
}
 8006040:	4618      	mov	r0, r3
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	e000ed04 	.word	0xe000ed04

0800604c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800604c:	b580      	push	{r7, lr}
 800604e:	b08e      	sub	sp, #56	; 0x38
 8006050:	af02      	add	r7, sp, #8
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
 8006058:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10a      	bne.n	8006076 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006072:	bf00      	nop
 8006074:	e7fe      	b.n	8006074 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10a      	bne.n	8006092 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800607c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006080:	f383 8811 	msr	BASEPRI, r3
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800608e:	bf00      	nop
 8006090:	e7fe      	b.n	8006090 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d002      	beq.n	800609e <xQueueGenericCreateStatic+0x52>
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <xQueueGenericCreateStatic+0x56>
 800609e:	2301      	movs	r3, #1
 80060a0:	e000      	b.n	80060a4 <xQueueGenericCreateStatic+0x58>
 80060a2:	2300      	movs	r3, #0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10a      	bne.n	80060be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80060a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ac:	f383 8811 	msr	BASEPRI, r3
 80060b0:	f3bf 8f6f 	isb	sy
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	623b      	str	r3, [r7, #32]
}
 80060ba:	bf00      	nop
 80060bc:	e7fe      	b.n	80060bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d102      	bne.n	80060ca <xQueueGenericCreateStatic+0x7e>
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <xQueueGenericCreateStatic+0x82>
 80060ca:	2301      	movs	r3, #1
 80060cc:	e000      	b.n	80060d0 <xQueueGenericCreateStatic+0x84>
 80060ce:	2300      	movs	r3, #0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10a      	bne.n	80060ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	61fb      	str	r3, [r7, #28]
}
 80060e6:	bf00      	nop
 80060e8:	e7fe      	b.n	80060e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80060ea:	2350      	movs	r3, #80	; 0x50
 80060ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2b50      	cmp	r3, #80	; 0x50
 80060f2:	d00a      	beq.n	800610a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	61bb      	str	r3, [r7, #24]
}
 8006106:	bf00      	nop
 8006108:	e7fe      	b.n	8006108 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800610a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00d      	beq.n	8006132 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800611e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	4613      	mov	r3, r2
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	68b9      	ldr	r1, [r7, #8]
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 f83f 	bl	80061b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006134:	4618      	mov	r0, r3
 8006136:	3730      	adds	r7, #48	; 0x30
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08a      	sub	sp, #40	; 0x28
 8006140:	af02      	add	r7, sp, #8
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	4613      	mov	r3, r2
 8006148:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10a      	bne.n	8006166 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	613b      	str	r3, [r7, #16]
}
 8006162:	bf00      	nop
 8006164:	e7fe      	b.n	8006164 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	fb02 f303 	mul.w	r3, r2, r3
 800616e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	3350      	adds	r3, #80	; 0x50
 8006174:	4618      	mov	r0, r3
 8006176:	f002 fe57 	bl	8008e28 <pvPortMalloc>
 800617a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d011      	beq.n	80061a6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	3350      	adds	r3, #80	; 0x50
 800618a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006194:	79fa      	ldrb	r2, [r7, #7]
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	4613      	mov	r3, r2
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	68b9      	ldr	r1, [r7, #8]
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 f805 	bl	80061b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80061a6:	69bb      	ldr	r3, [r7, #24]
	}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3720      	adds	r7, #32
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
 80061bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d103      	bne.n	80061cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	e002      	b.n	80061d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80061de:	2101      	movs	r1, #1
 80061e0:	69b8      	ldr	r0, [r7, #24]
 80061e2:	f7ff fecb 	bl	8005f7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	78fa      	ldrb	r2, [r7, #3]
 80061ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80061ee:	bf00      	nop
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b082      	sub	sp, #8
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00e      	beq.n	8006222 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006216:	2300      	movs	r3, #0
 8006218:	2200      	movs	r2, #0
 800621a:	2100      	movs	r1, #0
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f90b 	bl	8006438 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006222:	bf00      	nop
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800622a:	b580      	push	{r7, lr}
 800622c:	b086      	sub	sp, #24
 800622e:	af00      	add	r7, sp, #0
 8006230:	4603      	mov	r3, r0
 8006232:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006234:	2301      	movs	r3, #1
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	2300      	movs	r3, #0
 800623a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800623c:	79fb      	ldrb	r3, [r7, #7]
 800623e:	461a      	mov	r2, r3
 8006240:	6939      	ldr	r1, [r7, #16]
 8006242:	6978      	ldr	r0, [r7, #20]
 8006244:	f7ff ff7a 	bl	800613c <xQueueGenericCreate>
 8006248:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f7ff ffd3 	bl	80061f6 <prvInitialiseMutex>

		return xNewQueue;
 8006250:	68fb      	ldr	r3, [r7, #12]
	}
 8006252:	4618      	mov	r0, r3
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800625a:	b580      	push	{r7, lr}
 800625c:	b088      	sub	sp, #32
 800625e:	af02      	add	r7, sp, #8
 8006260:	4603      	mov	r3, r0
 8006262:	6039      	str	r1, [r7, #0]
 8006264:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006266:	2301      	movs	r3, #1
 8006268:	617b      	str	r3, [r7, #20]
 800626a:	2300      	movs	r3, #0
 800626c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800626e:	79fb      	ldrb	r3, [r7, #7]
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2200      	movs	r2, #0
 8006276:	6939      	ldr	r1, [r7, #16]
 8006278:	6978      	ldr	r0, [r7, #20]
 800627a:	f7ff fee7 	bl	800604c <xQueueGenericCreateStatic>
 800627e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f7ff ffb8 	bl	80061f6 <prvInitialiseMutex>

		return xNewQueue;
 8006286:	68fb      	ldr	r3, [r7, #12]
	}
 8006288:	4618      	mov	r0, r3
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006290:	b590      	push	{r4, r7, lr}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10a      	bne.n	80062b8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	60fb      	str	r3, [r7, #12]
}
 80062b4:	bf00      	nop
 80062b6:	e7fe      	b.n	80062b6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	689c      	ldr	r4, [r3, #8]
 80062bc:	f001 fe2a 	bl	8007f14 <xTaskGetCurrentTaskHandle>
 80062c0:	4603      	mov	r3, r0
 80062c2:	429c      	cmp	r4, r3
 80062c4:	d111      	bne.n	80062ea <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	1e5a      	subs	r2, r3, #1
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d105      	bne.n	80062e4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80062d8:	2300      	movs	r3, #0
 80062da:	2200      	movs	r2, #0
 80062dc:	2100      	movs	r1, #0
 80062de:	6938      	ldr	r0, [r7, #16]
 80062e0:	f000 f8aa 	bl	8006438 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80062e4:	2301      	movs	r3, #1
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	e001      	b.n	80062ee <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80062ee:	697b      	ldr	r3, [r7, #20]
	}
 80062f0:	4618      	mov	r0, r3
 80062f2:	371c      	adds	r7, #28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd90      	pop	{r4, r7, pc}

080062f8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80062f8:	b590      	push	{r4, r7, lr}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10a      	bne.n	8006322 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	60fb      	str	r3, [r7, #12]
}
 800631e:	bf00      	nop
 8006320:	e7fe      	b.n	8006320 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	689c      	ldr	r4, [r3, #8]
 8006326:	f001 fdf5 	bl	8007f14 <xTaskGetCurrentTaskHandle>
 800632a:	4603      	mov	r3, r0
 800632c:	429c      	cmp	r4, r3
 800632e:	d107      	bne.n	8006340 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	1c5a      	adds	r2, r3, #1
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800633a:	2301      	movs	r3, #1
 800633c:	617b      	str	r3, [r7, #20]
 800633e:	e00c      	b.n	800635a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006340:	6839      	ldr	r1, [r7, #0]
 8006342:	6938      	ldr	r0, [r7, #16]
 8006344:	f000 fb7e 	bl	8006a44 <xQueueSemaphoreTake>
 8006348:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d004      	beq.n	800635a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800635a:	697b      	ldr	r3, [r7, #20]
	}
 800635c:	4618      	mov	r0, r3
 800635e:	371c      	adds	r7, #28
 8006360:	46bd      	mov	sp, r7
 8006362:	bd90      	pop	{r4, r7, pc}

08006364 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006364:	b580      	push	{r7, lr}
 8006366:	b08a      	sub	sp, #40	; 0x28
 8006368:	af02      	add	r7, sp, #8
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10a      	bne.n	800638c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	61bb      	str	r3, [r7, #24]
}
 8006388:	bf00      	nop
 800638a:	e7fe      	b.n	800638a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	429a      	cmp	r2, r3
 8006392:	d90a      	bls.n	80063aa <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	617b      	str	r3, [r7, #20]
}
 80063a6:	bf00      	nop
 80063a8:	e7fe      	b.n	80063a8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80063aa:	2302      	movs	r3, #2
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	2100      	movs	r1, #0
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f7ff fe49 	bl	800604c <xQueueGenericCreateStatic>
 80063ba:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d002      	beq.n	80063c8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80063c8:	69fb      	ldr	r3, [r7, #28]
	}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3720      	adds	r7, #32
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b086      	sub	sp, #24
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10a      	bne.n	80063f8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	613b      	str	r3, [r7, #16]
}
 80063f4:	bf00      	nop
 80063f6:	e7fe      	b.n	80063f6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d90a      	bls.n	8006416 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006404:	f383 8811 	msr	BASEPRI, r3
 8006408:	f3bf 8f6f 	isb	sy
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	60fb      	str	r3, [r7, #12]
}
 8006412:	bf00      	nop
 8006414:	e7fe      	b.n	8006414 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006416:	2202      	movs	r2, #2
 8006418:	2100      	movs	r1, #0
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7ff fe8e 	bl	800613c <xQueueGenericCreate>
 8006420:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800642e:	697b      	ldr	r3, [r7, #20]
	}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b08e      	sub	sp, #56	; 0x38
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
 8006444:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006446:	2300      	movs	r3, #0
 8006448:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10a      	bne.n	800646a <xQueueGenericSend+0x32>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006466:	bf00      	nop
 8006468:	e7fe      	b.n	8006468 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d103      	bne.n	8006478 <xQueueGenericSend+0x40>
 8006470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <xQueueGenericSend+0x44>
 8006478:	2301      	movs	r3, #1
 800647a:	e000      	b.n	800647e <xQueueGenericSend+0x46>
 800647c:	2300      	movs	r3, #0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10a      	bne.n	8006498 <xQueueGenericSend+0x60>
	__asm volatile
 8006482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006494:	bf00      	nop
 8006496:	e7fe      	b.n	8006496 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	2b02      	cmp	r3, #2
 800649c:	d103      	bne.n	80064a6 <xQueueGenericSend+0x6e>
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d101      	bne.n	80064aa <xQueueGenericSend+0x72>
 80064a6:	2301      	movs	r3, #1
 80064a8:	e000      	b.n	80064ac <xQueueGenericSend+0x74>
 80064aa:	2300      	movs	r3, #0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10a      	bne.n	80064c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	623b      	str	r3, [r7, #32]
}
 80064c2:	bf00      	nop
 80064c4:	e7fe      	b.n	80064c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064c6:	f001 fd35 	bl	8007f34 <xTaskGetSchedulerState>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d102      	bne.n	80064d6 <xQueueGenericSend+0x9e>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <xQueueGenericSend+0xa2>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e000      	b.n	80064dc <xQueueGenericSend+0xa4>
 80064da:	2300      	movs	r3, #0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10a      	bne.n	80064f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	61fb      	str	r3, [r7, #28]
}
 80064f2:	bf00      	nop
 80064f4:	e7fe      	b.n	80064f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064f6:	f002 fb75 	bl	8008be4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006502:	429a      	cmp	r2, r3
 8006504:	d302      	bcc.n	800650c <xQueueGenericSend+0xd4>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b02      	cmp	r3, #2
 800650a:	d129      	bne.n	8006560 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	68b9      	ldr	r1, [r7, #8]
 8006510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006512:	f000 fc9a 	bl	8006e4a <prvCopyDataToQueue>
 8006516:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	2b00      	cmp	r3, #0
 800651e:	d010      	beq.n	8006542 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006522:	3324      	adds	r3, #36	; 0x24
 8006524:	4618      	mov	r0, r3
 8006526:	f001 fb33 	bl	8007b90 <xTaskRemoveFromEventList>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d013      	beq.n	8006558 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006530:	4b3f      	ldr	r3, [pc, #252]	; (8006630 <xQueueGenericSend+0x1f8>)
 8006532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	e00a      	b.n	8006558 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006544:	2b00      	cmp	r3, #0
 8006546:	d007      	beq.n	8006558 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006548:	4b39      	ldr	r3, [pc, #228]	; (8006630 <xQueueGenericSend+0x1f8>)
 800654a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006558:	f002 fb74 	bl	8008c44 <vPortExitCritical>
				return pdPASS;
 800655c:	2301      	movs	r3, #1
 800655e:	e063      	b.n	8006628 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d103      	bne.n	800656e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006566:	f002 fb6d 	bl	8008c44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800656a:	2300      	movs	r3, #0
 800656c:	e05c      	b.n	8006628 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800656e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006570:	2b00      	cmp	r3, #0
 8006572:	d106      	bne.n	8006582 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006574:	f107 0314 	add.w	r3, r7, #20
 8006578:	4618      	mov	r0, r3
 800657a:	f001 fb6d 	bl	8007c58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800657e:	2301      	movs	r3, #1
 8006580:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006582:	f002 fb5f 	bl	8008c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006586:	f001 f8c7 	bl	8007718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800658a:	f002 fb2b 	bl	8008be4 <vPortEnterCritical>
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006594:	b25b      	sxtb	r3, r3
 8006596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659a:	d103      	bne.n	80065a4 <xQueueGenericSend+0x16c>
 800659c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065aa:	b25b      	sxtb	r3, r3
 80065ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b0:	d103      	bne.n	80065ba <xQueueGenericSend+0x182>
 80065b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065ba:	f002 fb43 	bl	8008c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065be:	1d3a      	adds	r2, r7, #4
 80065c0:	f107 0314 	add.w	r3, r7, #20
 80065c4:	4611      	mov	r1, r2
 80065c6:	4618      	mov	r0, r3
 80065c8:	f001 fb5c 	bl	8007c84 <xTaskCheckForTimeOut>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d124      	bne.n	800661c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80065d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065d4:	f000 fd31 	bl	800703a <prvIsQueueFull>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d018      	beq.n	8006610 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80065de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e0:	3310      	adds	r3, #16
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	4611      	mov	r1, r2
 80065e6:	4618      	mov	r0, r3
 80065e8:	f001 fa82 	bl	8007af0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80065ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065ee:	f000 fcbc 	bl	8006f6a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80065f2:	f001 f89f 	bl	8007734 <xTaskResumeAll>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f47f af7c 	bne.w	80064f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80065fe:	4b0c      	ldr	r3, [pc, #48]	; (8006630 <xQueueGenericSend+0x1f8>)
 8006600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	e772      	b.n	80064f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006612:	f000 fcaa 	bl	8006f6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006616:	f001 f88d 	bl	8007734 <xTaskResumeAll>
 800661a:	e76c      	b.n	80064f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800661c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800661e:	f000 fca4 	bl	8006f6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006622:	f001 f887 	bl	8007734 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006626:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006628:	4618      	mov	r0, r3
 800662a:	3738      	adds	r7, #56	; 0x38
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	e000ed04 	.word	0xe000ed04

08006634 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b090      	sub	sp, #64	; 0x40
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
 8006640:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10a      	bne.n	8006662 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800664c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006650:	f383 8811 	msr	BASEPRI, r3
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800665e:	bf00      	nop
 8006660:	e7fe      	b.n	8006660 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d103      	bne.n	8006670 <xQueueGenericSendFromISR+0x3c>
 8006668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <xQueueGenericSendFromISR+0x40>
 8006670:	2301      	movs	r3, #1
 8006672:	e000      	b.n	8006676 <xQueueGenericSendFromISR+0x42>
 8006674:	2300      	movs	r3, #0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10a      	bne.n	8006690 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800668c:	bf00      	nop
 800668e:	e7fe      	b.n	800668e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	2b02      	cmp	r3, #2
 8006694:	d103      	bne.n	800669e <xQueueGenericSendFromISR+0x6a>
 8006696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800669a:	2b01      	cmp	r3, #1
 800669c:	d101      	bne.n	80066a2 <xQueueGenericSendFromISR+0x6e>
 800669e:	2301      	movs	r3, #1
 80066a0:	e000      	b.n	80066a4 <xQueueGenericSendFromISR+0x70>
 80066a2:	2300      	movs	r3, #0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10a      	bne.n	80066be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80066a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	623b      	str	r3, [r7, #32]
}
 80066ba:	bf00      	nop
 80066bc:	e7fe      	b.n	80066bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066be:	f002 fb73 	bl	8008da8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80066c2:	f3ef 8211 	mrs	r2, BASEPRI
 80066c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	61fa      	str	r2, [r7, #28]
 80066d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80066da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80066dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d302      	bcc.n	80066f0 <xQueueGenericSendFromISR+0xbc>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d12f      	bne.n	8006750 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80066f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	68b9      	ldr	r1, [r7, #8]
 8006704:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006706:	f000 fba0 	bl	8006e4a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800670a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800670e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006712:	d112      	bne.n	800673a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006718:	2b00      	cmp	r3, #0
 800671a:	d016      	beq.n	800674a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800671c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671e:	3324      	adds	r3, #36	; 0x24
 8006720:	4618      	mov	r0, r3
 8006722:	f001 fa35 	bl	8007b90 <xTaskRemoveFromEventList>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00e      	beq.n	800674a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00b      	beq.n	800674a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	601a      	str	r2, [r3, #0]
 8006738:	e007      	b.n	800674a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800673a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800673e:	3301      	adds	r3, #1
 8006740:	b2db      	uxtb	r3, r3
 8006742:	b25a      	sxtb	r2, r3
 8006744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800674a:	2301      	movs	r3, #1
 800674c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800674e:	e001      	b.n	8006754 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006750:	2300      	movs	r3, #0
 8006752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006756:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800675e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006762:	4618      	mov	r0, r3
 8006764:	3740      	adds	r7, #64	; 0x40
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b08e      	sub	sp, #56	; 0x38
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10a      	bne.n	8006794 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	623b      	str	r3, [r7, #32]
}
 8006790:	bf00      	nop
 8006792:	e7fe      	b.n	8006792 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00a      	beq.n	80067b2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800679c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a0:	f383 8811 	msr	BASEPRI, r3
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	61fb      	str	r3, [r7, #28]
}
 80067ae:	bf00      	nop
 80067b0:	e7fe      	b.n	80067b0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80067b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d103      	bne.n	80067c2 <xQueueGiveFromISR+0x58>
 80067ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <xQueueGiveFromISR+0x5c>
 80067c2:	2301      	movs	r3, #1
 80067c4:	e000      	b.n	80067c8 <xQueueGiveFromISR+0x5e>
 80067c6:	2300      	movs	r3, #0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10a      	bne.n	80067e2 <xQueueGiveFromISR+0x78>
	__asm volatile
 80067cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d0:	f383 8811 	msr	BASEPRI, r3
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	61bb      	str	r3, [r7, #24]
}
 80067de:	bf00      	nop
 80067e0:	e7fe      	b.n	80067e0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067e2:	f002 fae1 	bl	8008da8 <vPortValidateInterruptPriority>
	__asm volatile
 80067e6:	f3ef 8211 	mrs	r2, BASEPRI
 80067ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	617a      	str	r2, [r7, #20]
 80067fc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80067fe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006800:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006806:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800680e:	429a      	cmp	r2, r3
 8006810:	d22b      	bcs.n	800686a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006814:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800681c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006822:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006824:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800682c:	d112      	bne.n	8006854 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800682e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006832:	2b00      	cmp	r3, #0
 8006834:	d016      	beq.n	8006864 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006838:	3324      	adds	r3, #36	; 0x24
 800683a:	4618      	mov	r0, r3
 800683c:	f001 f9a8 	bl	8007b90 <xTaskRemoveFromEventList>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00e      	beq.n	8006864 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00b      	beq.n	8006864 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	2201      	movs	r2, #1
 8006850:	601a      	str	r2, [r3, #0]
 8006852:	e007      	b.n	8006864 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006858:	3301      	adds	r3, #1
 800685a:	b2db      	uxtb	r3, r3
 800685c:	b25a      	sxtb	r2, r3
 800685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006864:	2301      	movs	r3, #1
 8006866:	637b      	str	r3, [r7, #52]	; 0x34
 8006868:	e001      	b.n	800686e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800686a:	2300      	movs	r3, #0
 800686c:	637b      	str	r3, [r7, #52]	; 0x34
 800686e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006870:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f383 8811 	msr	BASEPRI, r3
}
 8006878:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800687a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800687c:	4618      	mov	r0, r3
 800687e:	3738      	adds	r7, #56	; 0x38
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b08c      	sub	sp, #48	; 0x30
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006890:	2300      	movs	r3, #0
 8006892:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10a      	bne.n	80068b4 <xQueueReceive+0x30>
	__asm volatile
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	623b      	str	r3, [r7, #32]
}
 80068b0:	bf00      	nop
 80068b2:	e7fe      	b.n	80068b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d103      	bne.n	80068c2 <xQueueReceive+0x3e>
 80068ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <xQueueReceive+0x42>
 80068c2:	2301      	movs	r3, #1
 80068c4:	e000      	b.n	80068c8 <xQueueReceive+0x44>
 80068c6:	2300      	movs	r3, #0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10a      	bne.n	80068e2 <xQueueReceive+0x5e>
	__asm volatile
 80068cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d0:	f383 8811 	msr	BASEPRI, r3
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	61fb      	str	r3, [r7, #28]
}
 80068de:	bf00      	nop
 80068e0:	e7fe      	b.n	80068e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068e2:	f001 fb27 	bl	8007f34 <xTaskGetSchedulerState>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d102      	bne.n	80068f2 <xQueueReceive+0x6e>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <xQueueReceive+0x72>
 80068f2:	2301      	movs	r3, #1
 80068f4:	e000      	b.n	80068f8 <xQueueReceive+0x74>
 80068f6:	2300      	movs	r3, #0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10a      	bne.n	8006912 <xQueueReceive+0x8e>
	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	61bb      	str	r3, [r7, #24]
}
 800690e:	bf00      	nop
 8006910:	e7fe      	b.n	8006910 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006912:	f002 f967 	bl	8008be4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	2b00      	cmp	r3, #0
 8006920:	d01f      	beq.n	8006962 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006922:	68b9      	ldr	r1, [r7, #8]
 8006924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006926:	f000 fafa 	bl	8006f1e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	1e5a      	subs	r2, r3, #1
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00f      	beq.n	800695a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800693a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693c:	3310      	adds	r3, #16
 800693e:	4618      	mov	r0, r3
 8006940:	f001 f926 	bl	8007b90 <xTaskRemoveFromEventList>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d007      	beq.n	800695a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800694a:	4b3d      	ldr	r3, [pc, #244]	; (8006a40 <xQueueReceive+0x1bc>)
 800694c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006950:	601a      	str	r2, [r3, #0]
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800695a:	f002 f973 	bl	8008c44 <vPortExitCritical>
				return pdPASS;
 800695e:	2301      	movs	r3, #1
 8006960:	e069      	b.n	8006a36 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d103      	bne.n	8006970 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006968:	f002 f96c 	bl	8008c44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800696c:	2300      	movs	r3, #0
 800696e:	e062      	b.n	8006a36 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006972:	2b00      	cmp	r3, #0
 8006974:	d106      	bne.n	8006984 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006976:	f107 0310 	add.w	r3, r7, #16
 800697a:	4618      	mov	r0, r3
 800697c:	f001 f96c 	bl	8007c58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006980:	2301      	movs	r3, #1
 8006982:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006984:	f002 f95e 	bl	8008c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006988:	f000 fec6 	bl	8007718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800698c:	f002 f92a 	bl	8008be4 <vPortEnterCritical>
 8006990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006992:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006996:	b25b      	sxtb	r3, r3
 8006998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800699c:	d103      	bne.n	80069a6 <xQueueReceive+0x122>
 800699e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069ac:	b25b      	sxtb	r3, r3
 80069ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b2:	d103      	bne.n	80069bc <xQueueReceive+0x138>
 80069b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069bc:	f002 f942 	bl	8008c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069c0:	1d3a      	adds	r2, r7, #4
 80069c2:	f107 0310 	add.w	r3, r7, #16
 80069c6:	4611      	mov	r1, r2
 80069c8:	4618      	mov	r0, r3
 80069ca:	f001 f95b 	bl	8007c84 <xTaskCheckForTimeOut>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d123      	bne.n	8006a1c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069d6:	f000 fb1a 	bl	800700e <prvIsQueueEmpty>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d017      	beq.n	8006a10 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80069e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e2:	3324      	adds	r3, #36	; 0x24
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	4611      	mov	r1, r2
 80069e8:	4618      	mov	r0, r3
 80069ea:	f001 f881 	bl	8007af0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80069ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069f0:	f000 fabb 	bl	8006f6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80069f4:	f000 fe9e 	bl	8007734 <xTaskResumeAll>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d189      	bne.n	8006912 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80069fe:	4b10      	ldr	r3, [pc, #64]	; (8006a40 <xQueueReceive+0x1bc>)
 8006a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	e780      	b.n	8006912 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006a10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a12:	f000 faaa 	bl	8006f6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a16:	f000 fe8d 	bl	8007734 <xTaskResumeAll>
 8006a1a:	e77a      	b.n	8006912 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a1e:	f000 faa4 	bl	8006f6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a22:	f000 fe87 	bl	8007734 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a28:	f000 faf1 	bl	800700e <prvIsQueueEmpty>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f43f af6f 	beq.w	8006912 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3730      	adds	r7, #48	; 0x30
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	e000ed04 	.word	0xe000ed04

08006a44 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b08e      	sub	sp, #56	; 0x38
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006a56:	2300      	movs	r3, #0
 8006a58:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10a      	bne.n	8006a76 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	623b      	str	r3, [r7, #32]
}
 8006a72:	bf00      	nop
 8006a74:	e7fe      	b.n	8006a74 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00a      	beq.n	8006a94 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a82:	f383 8811 	msr	BASEPRI, r3
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	61fb      	str	r3, [r7, #28]
}
 8006a90:	bf00      	nop
 8006a92:	e7fe      	b.n	8006a92 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a94:	f001 fa4e 	bl	8007f34 <xTaskGetSchedulerState>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d102      	bne.n	8006aa4 <xQueueSemaphoreTake+0x60>
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <xQueueSemaphoreTake+0x64>
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e000      	b.n	8006aaa <xQueueSemaphoreTake+0x66>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10a      	bne.n	8006ac4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	61bb      	str	r3, [r7, #24]
}
 8006ac0:	bf00      	nop
 8006ac2:	e7fe      	b.n	8006ac2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ac4:	f002 f88e 	bl	8008be4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006acc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d024      	beq.n	8006b1e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad6:	1e5a      	subs	r2, r3, #1
 8006ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ada:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d104      	bne.n	8006aee <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006ae4:	f001 fb9c 	bl	8008220 <pvTaskIncrementMutexHeldCount>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aec:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00f      	beq.n	8006b16 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af8:	3310      	adds	r3, #16
 8006afa:	4618      	mov	r0, r3
 8006afc:	f001 f848 	bl	8007b90 <xTaskRemoveFromEventList>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d007      	beq.n	8006b16 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b06:	4b54      	ldr	r3, [pc, #336]	; (8006c58 <xQueueSemaphoreTake+0x214>)
 8006b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b0c:	601a      	str	r2, [r3, #0]
 8006b0e:	f3bf 8f4f 	dsb	sy
 8006b12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b16:	f002 f895 	bl	8008c44 <vPortExitCritical>
				return pdPASS;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e097      	b.n	8006c4e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d111      	bne.n	8006b48 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	617b      	str	r3, [r7, #20]
}
 8006b3c:	bf00      	nop
 8006b3e:	e7fe      	b.n	8006b3e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006b40:	f002 f880 	bl	8008c44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b44:	2300      	movs	r3, #0
 8006b46:	e082      	b.n	8006c4e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d106      	bne.n	8006b5c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b4e:	f107 030c 	add.w	r3, r7, #12
 8006b52:	4618      	mov	r0, r3
 8006b54:	f001 f880 	bl	8007c58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b5c:	f002 f872 	bl	8008c44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b60:	f000 fdda 	bl	8007718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b64:	f002 f83e 	bl	8008be4 <vPortEnterCritical>
 8006b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b6e:	b25b      	sxtb	r3, r3
 8006b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b74:	d103      	bne.n	8006b7e <xQueueSemaphoreTake+0x13a>
 8006b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b84:	b25b      	sxtb	r3, r3
 8006b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8a:	d103      	bne.n	8006b94 <xQueueSemaphoreTake+0x150>
 8006b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b94:	f002 f856 	bl	8008c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b98:	463a      	mov	r2, r7
 8006b9a:	f107 030c 	add.w	r3, r7, #12
 8006b9e:	4611      	mov	r1, r2
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f001 f86f 	bl	8007c84 <xTaskCheckForTimeOut>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d132      	bne.n	8006c12 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006bae:	f000 fa2e 	bl	800700e <prvIsQueueEmpty>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d026      	beq.n	8006c06 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d109      	bne.n	8006bd4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006bc0:	f002 f810 	bl	8008be4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f001 f9d1 	bl	8007f70 <xTaskPriorityInherit>
 8006bce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006bd0:	f002 f838 	bl	8008c44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd6:	3324      	adds	r3, #36	; 0x24
 8006bd8:	683a      	ldr	r2, [r7, #0]
 8006bda:	4611      	mov	r1, r2
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 ff87 	bl	8007af0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006be2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006be4:	f000 f9c1 	bl	8006f6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006be8:	f000 fda4 	bl	8007734 <xTaskResumeAll>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f47f af68 	bne.w	8006ac4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006bf4:	4b18      	ldr	r3, [pc, #96]	; (8006c58 <xQueueSemaphoreTake+0x214>)
 8006bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bfa:	601a      	str	r2, [r3, #0]
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	e75e      	b.n	8006ac4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006c06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c08:	f000 f9af 	bl	8006f6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c0c:	f000 fd92 	bl	8007734 <xTaskResumeAll>
 8006c10:	e758      	b.n	8006ac4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006c12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c14:	f000 f9a9 	bl	8006f6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c18:	f000 fd8c 	bl	8007734 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c1e:	f000 f9f6 	bl	800700e <prvIsQueueEmpty>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f43f af4d 	beq.w	8006ac4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00d      	beq.n	8006c4c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006c30:	f001 ffd8 	bl	8008be4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006c34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c36:	f000 f8f0 	bl	8006e1a <prvGetDisinheritPriorityAfterTimeout>
 8006c3a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c42:	4618      	mov	r0, r3
 8006c44:	f001 fa6a 	bl	800811c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006c48:	f001 fffc 	bl	8008c44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3738      	adds	r7, #56	; 0x38
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	e000ed04 	.word	0xe000ed04

08006c5c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b08e      	sub	sp, #56	; 0x38
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10a      	bne.n	8006c88 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	623b      	str	r3, [r7, #32]
}
 8006c84:	bf00      	nop
 8006c86:	e7fe      	b.n	8006c86 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d103      	bne.n	8006c96 <xQueueReceiveFromISR+0x3a>
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <xQueueReceiveFromISR+0x3e>
 8006c96:	2301      	movs	r3, #1
 8006c98:	e000      	b.n	8006c9c <xQueueReceiveFromISR+0x40>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10a      	bne.n	8006cb6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	61fb      	str	r3, [r7, #28]
}
 8006cb2:	bf00      	nop
 8006cb4:	e7fe      	b.n	8006cb4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006cb6:	f002 f877 	bl	8008da8 <vPortValidateInterruptPriority>
	__asm volatile
 8006cba:	f3ef 8211 	mrs	r2, BASEPRI
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	61ba      	str	r2, [r7, #24]
 8006cd0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006cd2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cda:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d02f      	beq.n	8006d42 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006cec:	68b9      	ldr	r1, [r7, #8]
 8006cee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cf0:	f000 f915 	bl	8006f1e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf6:	1e5a      	subs	r2, r3, #1
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006cfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d04:	d112      	bne.n	8006d2c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d016      	beq.n	8006d3c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d10:	3310      	adds	r3, #16
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 ff3c 	bl	8007b90 <xTaskRemoveFromEventList>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00e      	beq.n	8006d3c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00b      	beq.n	8006d3c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	601a      	str	r2, [r3, #0]
 8006d2a:	e007      	b.n	8006d3c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d30:	3301      	adds	r3, #1
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	b25a      	sxtb	r2, r3
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d40:	e001      	b.n	8006d46 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006d42:	2300      	movs	r3, #0
 8006d44:	637b      	str	r3, [r7, #52]	; 0x34
 8006d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d48:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f383 8811 	msr	BASEPRI, r3
}
 8006d50:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3738      	adds	r7, #56	; 0x38
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10a      	bne.n	8006d80 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8006d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	60bb      	str	r3, [r7, #8]
}
 8006d7c:	bf00      	nop
 8006d7e:	e7fe      	b.n	8006d7e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006d80:	f001 ff30 	bl	8008be4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d88:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006d8a:	f001 ff5b 	bl	8008c44 <vPortExitCritical>

	return uxReturn;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b087      	sub	sp, #28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10a      	bne.n	8006dc0 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8006daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dae:	f383 8811 	msr	BASEPRI, r3
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	60fb      	str	r3, [r7, #12]
}
 8006dbc:	bf00      	nop
 8006dbe:	e7fe      	b.n	8006dbe <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006dc6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006dc8:	4618      	mov	r0, r3
 8006dca:	371c      	adds	r7, #28
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10a      	bne.n	8006dfc <vQueueDelete+0x28>
	__asm volatile
 8006de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dea:	f383 8811 	msr	BASEPRI, r3
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	60bb      	str	r3, [r7, #8]
}
 8006df8:	bf00      	nop
 8006dfa:	e7fe      	b.n	8006dfa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f000 f95f 	bl	80070c0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d102      	bne.n	8006e12 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f002 f8d7 	bl	8008fc0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006e12:	bf00      	nop
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b085      	sub	sp, #20
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d006      	beq.n	8006e38 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006e34:	60fb      	str	r3, [r7, #12]
 8006e36:	e001      	b.n	8006e3c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
	}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b086      	sub	sp, #24
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	60f8      	str	r0, [r7, #12]
 8006e52:	60b9      	str	r1, [r7, #8]
 8006e54:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006e56:	2300      	movs	r3, #0
 8006e58:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10d      	bne.n	8006e84 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d14d      	bne.n	8006f0c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f001 f8e3 	bl	8008040 <xTaskPriorityDisinherit>
 8006e7a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	609a      	str	r2, [r3, #8]
 8006e82:	e043      	b.n	8006f0c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d119      	bne.n	8006ebe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6858      	ldr	r0, [r3, #4]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e92:	461a      	mov	r2, r3
 8006e94:	68b9      	ldr	r1, [r7, #8]
 8006e96:	f013 fb91 	bl	801a5bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea2:	441a      	add	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d32b      	bcc.n	8006f0c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	605a      	str	r2, [r3, #4]
 8006ebc:	e026      	b.n	8006f0c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	68d8      	ldr	r0, [r3, #12]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	68b9      	ldr	r1, [r7, #8]
 8006eca:	f013 fb77 	bl	801a5bc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	68da      	ldr	r2, [r3, #12]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	425b      	negs	r3, r3
 8006ed8:	441a      	add	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d207      	bcs.n	8006efa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	689a      	ldr	r2, [r3, #8]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef2:	425b      	negs	r3, r3
 8006ef4:	441a      	add	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d105      	bne.n	8006f0c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d002      	beq.n	8006f0c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	1c5a      	adds	r2, r3, #1
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f14:	697b      	ldr	r3, [r7, #20]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3718      	adds	r7, #24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b082      	sub	sp, #8
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d018      	beq.n	8006f62 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	68da      	ldr	r2, [r3, #12]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f38:	441a      	add	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68da      	ldr	r2, [r3, #12]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d303      	bcc.n	8006f52 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	68d9      	ldr	r1, [r3, #12]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	6838      	ldr	r0, [r7, #0]
 8006f5e:	f013 fb2d 	bl	801a5bc <memcpy>
	}
}
 8006f62:	bf00      	nop
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b084      	sub	sp, #16
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006f72:	f001 fe37 	bl	8008be4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f7c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f7e:	e011      	b.n	8006fa4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d012      	beq.n	8006fae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	3324      	adds	r3, #36	; 0x24
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 fdff 	bl	8007b90 <xTaskRemoveFromEventList>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006f98:	f000 fed6 	bl	8007d48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006f9c:	7bfb      	ldrb	r3, [r7, #15]
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	dce9      	bgt.n	8006f80 <prvUnlockQueue+0x16>
 8006fac:	e000      	b.n	8006fb0 <prvUnlockQueue+0x46>
					break;
 8006fae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	22ff      	movs	r2, #255	; 0xff
 8006fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006fb8:	f001 fe44 	bl	8008c44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006fbc:	f001 fe12 	bl	8008be4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fc6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006fc8:	e011      	b.n	8006fee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d012      	beq.n	8006ff8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	3310      	adds	r3, #16
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 fdda 	bl	8007b90 <xTaskRemoveFromEventList>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006fe2:	f000 feb1 	bl	8007d48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006fe6:	7bbb      	ldrb	r3, [r7, #14]
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006fee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	dce9      	bgt.n	8006fca <prvUnlockQueue+0x60>
 8006ff6:	e000      	b.n	8006ffa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006ff8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	22ff      	movs	r2, #255	; 0xff
 8006ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007002:	f001 fe1f 	bl	8008c44 <vPortExitCritical>
}
 8007006:	bf00      	nop
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b084      	sub	sp, #16
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007016:	f001 fde5 	bl	8008be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701e:	2b00      	cmp	r3, #0
 8007020:	d102      	bne.n	8007028 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007022:	2301      	movs	r3, #1
 8007024:	60fb      	str	r3, [r7, #12]
 8007026:	e001      	b.n	800702c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007028:	2300      	movs	r3, #0
 800702a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800702c:	f001 fe0a 	bl	8008c44 <vPortExitCritical>

	return xReturn;
 8007030:	68fb      	ldr	r3, [r7, #12]
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b084      	sub	sp, #16
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007042:	f001 fdcf 	bl	8008be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704e:	429a      	cmp	r2, r3
 8007050:	d102      	bne.n	8007058 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007052:	2301      	movs	r3, #1
 8007054:	60fb      	str	r3, [r7, #12]
 8007056:	e001      	b.n	800705c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007058:	2300      	movs	r3, #0
 800705a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800705c:	f001 fdf2 	bl	8008c44 <vPortExitCritical>

	return xReturn;
 8007060:	68fb      	ldr	r3, [r7, #12]
}
 8007062:	4618      	mov	r0, r3
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
	...

0800706c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007076:	2300      	movs	r3, #0
 8007078:	60fb      	str	r3, [r7, #12]
 800707a:	e014      	b.n	80070a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800707c:	4a0f      	ldr	r2, [pc, #60]	; (80070bc <vQueueAddToRegistry+0x50>)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10b      	bne.n	80070a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007088:	490c      	ldr	r1, [pc, #48]	; (80070bc <vQueueAddToRegistry+0x50>)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007092:	4a0a      	ldr	r2, [pc, #40]	; (80070bc <vQueueAddToRegistry+0x50>)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	00db      	lsls	r3, r3, #3
 8007098:	4413      	add	r3, r2
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800709e:	e006      	b.n	80070ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	3301      	adds	r3, #1
 80070a4:	60fb      	str	r3, [r7, #12]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2b07      	cmp	r3, #7
 80070aa:	d9e7      	bls.n	800707c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80070ac:	bf00      	nop
 80070ae:	bf00      	nop
 80070b0:	3714      	adds	r7, #20
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	2000e948 	.word	0x2000e948

080070c0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070c8:	2300      	movs	r3, #0
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	e016      	b.n	80070fc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80070ce:	4a10      	ldr	r2, [pc, #64]	; (8007110 <vQueueUnregisterQueue+0x50>)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	00db      	lsls	r3, r3, #3
 80070d4:	4413      	add	r3, r2
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d10b      	bne.n	80070f6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80070de:	4a0c      	ldr	r2, [pc, #48]	; (8007110 <vQueueUnregisterQueue+0x50>)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2100      	movs	r1, #0
 80070e4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80070e8:	4a09      	ldr	r2, [pc, #36]	; (8007110 <vQueueUnregisterQueue+0x50>)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	00db      	lsls	r3, r3, #3
 80070ee:	4413      	add	r3, r2
 80070f0:	2200      	movs	r2, #0
 80070f2:	605a      	str	r2, [r3, #4]
				break;
 80070f4:	e006      	b.n	8007104 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	3301      	adds	r3, #1
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2b07      	cmp	r3, #7
 8007100:	d9e5      	bls.n	80070ce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007102:	bf00      	nop
 8007104:	bf00      	nop
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	2000e948 	.word	0x2000e948

08007114 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007124:	f001 fd5e 	bl	8008be4 <vPortEnterCritical>
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800712e:	b25b      	sxtb	r3, r3
 8007130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007134:	d103      	bne.n	800713e <vQueueWaitForMessageRestricted+0x2a>
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007144:	b25b      	sxtb	r3, r3
 8007146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800714a:	d103      	bne.n	8007154 <vQueueWaitForMessageRestricted+0x40>
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007154:	f001 fd76 	bl	8008c44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715c:	2b00      	cmp	r3, #0
 800715e:	d106      	bne.n	800716e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	3324      	adds	r3, #36	; 0x24
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	68b9      	ldr	r1, [r7, #8]
 8007168:	4618      	mov	r0, r3
 800716a:	f000 fce5 	bl	8007b38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800716e:	6978      	ldr	r0, [r7, #20]
 8007170:	f7ff fefb 	bl	8006f6a <prvUnlockQueue>
	}
 8007174:	bf00      	nop
 8007176:	3718      	adds	r7, #24
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800717c:	b580      	push	{r7, lr}
 800717e:	b08e      	sub	sp, #56	; 0x38
 8007180:	af04      	add	r7, sp, #16
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
 8007188:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800718a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10a      	bne.n	80071a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007194:	f383 8811 	msr	BASEPRI, r3
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	623b      	str	r3, [r7, #32]
}
 80071a2:	bf00      	nop
 80071a4:	e7fe      	b.n	80071a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80071a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10a      	bne.n	80071c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	61fb      	str	r3, [r7, #28]
}
 80071be:	bf00      	nop
 80071c0:	e7fe      	b.n	80071c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071c2:	23bc      	movs	r3, #188	; 0xbc
 80071c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	2bbc      	cmp	r3, #188	; 0xbc
 80071ca:	d00a      	beq.n	80071e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80071cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	61bb      	str	r3, [r7, #24]
}
 80071de:	bf00      	nop
 80071e0:	e7fe      	b.n	80071e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80071e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80071e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d01e      	beq.n	8007228 <xTaskCreateStatic+0xac>
 80071ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d01b      	beq.n	8007228 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80071f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80071fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fc:	2202      	movs	r2, #2
 80071fe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007202:	2300      	movs	r3, #0
 8007204:	9303      	str	r3, [sp, #12]
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	9302      	str	r3, [sp, #8]
 800720a:	f107 0314 	add.w	r3, r7, #20
 800720e:	9301      	str	r3, [sp, #4]
 8007210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	68b9      	ldr	r1, [r7, #8]
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f000 f850 	bl	80072c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007220:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007222:	f000 f8f3 	bl	800740c <prvAddNewTaskToReadyList>
 8007226:	e001      	b.n	800722c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007228:	2300      	movs	r3, #0
 800722a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800722c:	697b      	ldr	r3, [r7, #20]
	}
 800722e:	4618      	mov	r0, r3
 8007230:	3728      	adds	r7, #40	; 0x28
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007236:	b580      	push	{r7, lr}
 8007238:	b08c      	sub	sp, #48	; 0x30
 800723a:	af04      	add	r7, sp, #16
 800723c:	60f8      	str	r0, [r7, #12]
 800723e:	60b9      	str	r1, [r7, #8]
 8007240:	603b      	str	r3, [r7, #0]
 8007242:	4613      	mov	r3, r2
 8007244:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007246:	88fb      	ldrh	r3, [r7, #6]
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4618      	mov	r0, r3
 800724c:	f001 fdec 	bl	8008e28 <pvPortMalloc>
 8007250:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00e      	beq.n	8007276 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007258:	20bc      	movs	r0, #188	; 0xbc
 800725a:	f001 fde5 	bl	8008e28 <pvPortMalloc>
 800725e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d003      	beq.n	800726e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	631a      	str	r2, [r3, #48]	; 0x30
 800726c:	e005      	b.n	800727a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800726e:	6978      	ldr	r0, [r7, #20]
 8007270:	f001 fea6 	bl	8008fc0 <vPortFree>
 8007274:	e001      	b.n	800727a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007276:	2300      	movs	r3, #0
 8007278:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d017      	beq.n	80072b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007288:	88fa      	ldrh	r2, [r7, #6]
 800728a:	2300      	movs	r3, #0
 800728c:	9303      	str	r3, [sp, #12]
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	9302      	str	r3, [sp, #8]
 8007292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007294:	9301      	str	r3, [sp, #4]
 8007296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	68b9      	ldr	r1, [r7, #8]
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 f80e 	bl	80072c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072a4:	69f8      	ldr	r0, [r7, #28]
 80072a6:	f000 f8b1 	bl	800740c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072aa:	2301      	movs	r3, #1
 80072ac:	61bb      	str	r3, [r7, #24]
 80072ae:	e002      	b.n	80072b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072b0:	f04f 33ff 	mov.w	r3, #4294967295
 80072b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072b6:	69bb      	ldr	r3, [r7, #24]
	}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3720      	adds	r7, #32
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b088      	sub	sp, #32
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
 80072cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80072ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	461a      	mov	r2, r3
 80072d8:	21a5      	movs	r1, #165	; 0xa5
 80072da:	f013 f997 	bl	801a60c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80072de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072e8:	3b01      	subs	r3, #1
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4413      	add	r3, r2
 80072ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	f023 0307 	bic.w	r3, r3, #7
 80072f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	f003 0307 	and.w	r3, r3, #7
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00a      	beq.n	8007318 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007306:	f383 8811 	msr	BASEPRI, r3
 800730a:	f3bf 8f6f 	isb	sy
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	617b      	str	r3, [r7, #20]
}
 8007314:	bf00      	nop
 8007316:	e7fe      	b.n	8007316 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d01f      	beq.n	800735e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800731e:	2300      	movs	r3, #0
 8007320:	61fb      	str	r3, [r7, #28]
 8007322:	e012      	b.n	800734a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	4413      	add	r3, r2
 800732a:	7819      	ldrb	r1, [r3, #0]
 800732c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	4413      	add	r3, r2
 8007332:	3334      	adds	r3, #52	; 0x34
 8007334:	460a      	mov	r2, r1
 8007336:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	4413      	add	r3, r2
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d006      	beq.n	8007352 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	3301      	adds	r3, #1
 8007348:	61fb      	str	r3, [r7, #28]
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	2b0f      	cmp	r3, #15
 800734e:	d9e9      	bls.n	8007324 <prvInitialiseNewTask+0x64>
 8007350:	e000      	b.n	8007354 <prvInitialiseNewTask+0x94>
			{
				break;
 8007352:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007356:	2200      	movs	r2, #0
 8007358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800735c:	e003      	b.n	8007366 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800735e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007360:	2200      	movs	r2, #0
 8007362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007368:	2b37      	cmp	r3, #55	; 0x37
 800736a:	d901      	bls.n	8007370 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800736c:	2337      	movs	r3, #55	; 0x37
 800736e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007372:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007374:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007378:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800737a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800737c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737e:	2200      	movs	r2, #0
 8007380:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007384:	3304      	adds	r3, #4
 8007386:	4618      	mov	r0, r3
 8007388:	f7fe fd64 	bl	8005e54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	3318      	adds	r3, #24
 8007390:	4618      	mov	r0, r3
 8007392:	f7fe fd5f 	bl	8005e54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800739a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ae:	2200      	movs	r2, #0
 80073b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80073bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073be:	3354      	adds	r3, #84	; 0x54
 80073c0:	2260      	movs	r2, #96	; 0x60
 80073c2:	2100      	movs	r1, #0
 80073c4:	4618      	mov	r0, r3
 80073c6:	f013 f921 	bl	801a60c <memset>
 80073ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073cc:	4a0c      	ldr	r2, [pc, #48]	; (8007400 <prvInitialiseNewTask+0x140>)
 80073ce:	659a      	str	r2, [r3, #88]	; 0x58
 80073d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d2:	4a0c      	ldr	r2, [pc, #48]	; (8007404 <prvInitialiseNewTask+0x144>)
 80073d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	4a0b      	ldr	r2, [pc, #44]	; (8007408 <prvInitialiseNewTask+0x148>)
 80073da:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073dc:	683a      	ldr	r2, [r7, #0]
 80073de:	68f9      	ldr	r1, [r7, #12]
 80073e0:	69b8      	ldr	r0, [r7, #24]
 80073e2:	f001 fad3 	bl	800898c <pxPortInitialiseStack>
 80073e6:	4602      	mov	r2, r0
 80073e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80073ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073f8:	bf00      	nop
 80073fa:	3720      	adds	r7, #32
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	0801f780 	.word	0x0801f780
 8007404:	0801f7a0 	.word	0x0801f7a0
 8007408:	0801f760 	.word	0x0801f760

0800740c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007414:	f001 fbe6 	bl	8008be4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007418:	4b2d      	ldr	r3, [pc, #180]	; (80074d0 <prvAddNewTaskToReadyList+0xc4>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	3301      	adds	r3, #1
 800741e:	4a2c      	ldr	r2, [pc, #176]	; (80074d0 <prvAddNewTaskToReadyList+0xc4>)
 8007420:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007422:	4b2c      	ldr	r3, [pc, #176]	; (80074d4 <prvAddNewTaskToReadyList+0xc8>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d109      	bne.n	800743e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800742a:	4a2a      	ldr	r2, [pc, #168]	; (80074d4 <prvAddNewTaskToReadyList+0xc8>)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007430:	4b27      	ldr	r3, [pc, #156]	; (80074d0 <prvAddNewTaskToReadyList+0xc4>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d110      	bne.n	800745a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007438:	f000 fcaa 	bl	8007d90 <prvInitialiseTaskLists>
 800743c:	e00d      	b.n	800745a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800743e:	4b26      	ldr	r3, [pc, #152]	; (80074d8 <prvAddNewTaskToReadyList+0xcc>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d109      	bne.n	800745a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007446:	4b23      	ldr	r3, [pc, #140]	; (80074d4 <prvAddNewTaskToReadyList+0xc8>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007450:	429a      	cmp	r2, r3
 8007452:	d802      	bhi.n	800745a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007454:	4a1f      	ldr	r2, [pc, #124]	; (80074d4 <prvAddNewTaskToReadyList+0xc8>)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800745a:	4b20      	ldr	r3, [pc, #128]	; (80074dc <prvAddNewTaskToReadyList+0xd0>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	3301      	adds	r3, #1
 8007460:	4a1e      	ldr	r2, [pc, #120]	; (80074dc <prvAddNewTaskToReadyList+0xd0>)
 8007462:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007464:	4b1d      	ldr	r3, [pc, #116]	; (80074dc <prvAddNewTaskToReadyList+0xd0>)
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007470:	4b1b      	ldr	r3, [pc, #108]	; (80074e0 <prvAddNewTaskToReadyList+0xd4>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	429a      	cmp	r2, r3
 8007476:	d903      	bls.n	8007480 <prvAddNewTaskToReadyList+0x74>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747c:	4a18      	ldr	r2, [pc, #96]	; (80074e0 <prvAddNewTaskToReadyList+0xd4>)
 800747e:	6013      	str	r3, [r2, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007484:	4613      	mov	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4413      	add	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4a15      	ldr	r2, [pc, #84]	; (80074e4 <prvAddNewTaskToReadyList+0xd8>)
 800748e:	441a      	add	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	3304      	adds	r3, #4
 8007494:	4619      	mov	r1, r3
 8007496:	4610      	mov	r0, r2
 8007498:	f7fe fce9 	bl	8005e6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800749c:	f001 fbd2 	bl	8008c44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80074a0:	4b0d      	ldr	r3, [pc, #52]	; (80074d8 <prvAddNewTaskToReadyList+0xcc>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00e      	beq.n	80074c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074a8:	4b0a      	ldr	r3, [pc, #40]	; (80074d4 <prvAddNewTaskToReadyList+0xc8>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d207      	bcs.n	80074c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80074b6:	4b0c      	ldr	r3, [pc, #48]	; (80074e8 <prvAddNewTaskToReadyList+0xdc>)
 80074b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074bc:	601a      	str	r2, [r3, #0]
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074c6:	bf00      	nop
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	200013c4 	.word	0x200013c4
 80074d4:	20000ef0 	.word	0x20000ef0
 80074d8:	200013d0 	.word	0x200013d0
 80074dc:	200013e0 	.word	0x200013e0
 80074e0:	200013cc 	.word	0x200013cc
 80074e4:	20000ef4 	.word	0x20000ef4
 80074e8:	e000ed04 	.word	0xe000ed04

080074ec <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80074f4:	f001 fb76 	bl	8008be4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d102      	bne.n	8007504 <vTaskDelete+0x18>
 80074fe:	4b2c      	ldr	r3, [pc, #176]	; (80075b0 <vTaskDelete+0xc4>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	e000      	b.n	8007506 <vTaskDelete+0x1a>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	3304      	adds	r3, #4
 800750c:	4618      	mov	r0, r3
 800750e:	f7fe fd0b 	bl	8005f28 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007516:	2b00      	cmp	r3, #0
 8007518:	d004      	beq.n	8007524 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	3318      	adds	r3, #24
 800751e:	4618      	mov	r0, r3
 8007520:	f7fe fd02 	bl	8005f28 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007524:	4b23      	ldr	r3, [pc, #140]	; (80075b4 <vTaskDelete+0xc8>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	3301      	adds	r3, #1
 800752a:	4a22      	ldr	r2, [pc, #136]	; (80075b4 <vTaskDelete+0xc8>)
 800752c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800752e:	4b20      	ldr	r3, [pc, #128]	; (80075b0 <vTaskDelete+0xc4>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	429a      	cmp	r2, r3
 8007536:	d10b      	bne.n	8007550 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	3304      	adds	r3, #4
 800753c:	4619      	mov	r1, r3
 800753e:	481e      	ldr	r0, [pc, #120]	; (80075b8 <vTaskDelete+0xcc>)
 8007540:	f7fe fc95 	bl	8005e6e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007544:	4b1d      	ldr	r3, [pc, #116]	; (80075bc <vTaskDelete+0xd0>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3301      	adds	r3, #1
 800754a:	4a1c      	ldr	r2, [pc, #112]	; (80075bc <vTaskDelete+0xd0>)
 800754c:	6013      	str	r3, [r2, #0]
 800754e:	e009      	b.n	8007564 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007550:	4b1b      	ldr	r3, [pc, #108]	; (80075c0 <vTaskDelete+0xd4>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	3b01      	subs	r3, #1
 8007556:	4a1a      	ldr	r2, [pc, #104]	; (80075c0 <vTaskDelete+0xd4>)
 8007558:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f000 fc86 	bl	8007e6c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007560:	f000 fcb8 	bl	8007ed4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8007564:	f001 fb6e 	bl	8008c44 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007568:	4b16      	ldr	r3, [pc, #88]	; (80075c4 <vTaskDelete+0xd8>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d01b      	beq.n	80075a8 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8007570:	4b0f      	ldr	r3, [pc, #60]	; (80075b0 <vTaskDelete+0xc4>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	429a      	cmp	r2, r3
 8007578:	d116      	bne.n	80075a8 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800757a:	4b13      	ldr	r3, [pc, #76]	; (80075c8 <vTaskDelete+0xdc>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00a      	beq.n	8007598 <vTaskDelete+0xac>
	__asm volatile
 8007582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007586:	f383 8811 	msr	BASEPRI, r3
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	60bb      	str	r3, [r7, #8]
}
 8007594:	bf00      	nop
 8007596:	e7fe      	b.n	8007596 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8007598:	4b0c      	ldr	r3, [pc, #48]	; (80075cc <vTaskDelete+0xe0>)
 800759a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800759e:	601a      	str	r2, [r3, #0]
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80075a8:	bf00      	nop
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	20000ef0 	.word	0x20000ef0
 80075b4:	200013e0 	.word	0x200013e0
 80075b8:	20001398 	.word	0x20001398
 80075bc:	200013ac 	.word	0x200013ac
 80075c0:	200013c4 	.word	0x200013c4
 80075c4:	200013d0 	.word	0x200013d0
 80075c8:	200013ec 	.word	0x200013ec
 80075cc:	e000ed04 	.word	0xe000ed04

080075d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80075d8:	2300      	movs	r3, #0
 80075da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d017      	beq.n	8007612 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80075e2:	4b13      	ldr	r3, [pc, #76]	; (8007630 <vTaskDelay+0x60>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00a      	beq.n	8007600 <vTaskDelay+0x30>
	__asm volatile
 80075ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ee:	f383 8811 	msr	BASEPRI, r3
 80075f2:	f3bf 8f6f 	isb	sy
 80075f6:	f3bf 8f4f 	dsb	sy
 80075fa:	60bb      	str	r3, [r7, #8]
}
 80075fc:	bf00      	nop
 80075fe:	e7fe      	b.n	80075fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007600:	f000 f88a 	bl	8007718 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007604:	2100      	movs	r1, #0
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fe1e 	bl	8008248 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800760c:	f000 f892 	bl	8007734 <xTaskResumeAll>
 8007610:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d107      	bne.n	8007628 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007618:	4b06      	ldr	r3, [pc, #24]	; (8007634 <vTaskDelay+0x64>)
 800761a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800761e:	601a      	str	r2, [r3, #0]
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007628:	bf00      	nop
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	200013ec 	.word	0x200013ec
 8007634:	e000ed04 	.word	0xe000ed04

08007638 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b08a      	sub	sp, #40	; 0x28
 800763c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800763e:	2300      	movs	r3, #0
 8007640:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007642:	2300      	movs	r3, #0
 8007644:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007646:	463a      	mov	r2, r7
 8007648:	1d39      	adds	r1, r7, #4
 800764a:	f107 0308 	add.w	r3, r7, #8
 800764e:	4618      	mov	r0, r3
 8007650:	f7fe fbac 	bl	8005dac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	9202      	str	r2, [sp, #8]
 800765c:	9301      	str	r3, [sp, #4]
 800765e:	2300      	movs	r3, #0
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	2300      	movs	r3, #0
 8007664:	460a      	mov	r2, r1
 8007666:	4924      	ldr	r1, [pc, #144]	; (80076f8 <vTaskStartScheduler+0xc0>)
 8007668:	4824      	ldr	r0, [pc, #144]	; (80076fc <vTaskStartScheduler+0xc4>)
 800766a:	f7ff fd87 	bl	800717c <xTaskCreateStatic>
 800766e:	4603      	mov	r3, r0
 8007670:	4a23      	ldr	r2, [pc, #140]	; (8007700 <vTaskStartScheduler+0xc8>)
 8007672:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007674:	4b22      	ldr	r3, [pc, #136]	; (8007700 <vTaskStartScheduler+0xc8>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d002      	beq.n	8007682 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800767c:	2301      	movs	r3, #1
 800767e:	617b      	str	r3, [r7, #20]
 8007680:	e001      	b.n	8007686 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007682:	2300      	movs	r3, #0
 8007684:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d102      	bne.n	8007692 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800768c:	f000 fe30 	bl	80082f0 <xTimerCreateTimerTask>
 8007690:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d11b      	bne.n	80076d0 <vTaskStartScheduler+0x98>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	613b      	str	r3, [r7, #16]
}
 80076aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80076ac:	4b15      	ldr	r3, [pc, #84]	; (8007704 <vTaskStartScheduler+0xcc>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3354      	adds	r3, #84	; 0x54
 80076b2:	4a15      	ldr	r2, [pc, #84]	; (8007708 <vTaskStartScheduler+0xd0>)
 80076b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076b6:	4b15      	ldr	r3, [pc, #84]	; (800770c <vTaskStartScheduler+0xd4>)
 80076b8:	f04f 32ff 	mov.w	r2, #4294967295
 80076bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80076be:	4b14      	ldr	r3, [pc, #80]	; (8007710 <vTaskStartScheduler+0xd8>)
 80076c0:	2201      	movs	r2, #1
 80076c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80076c4:	4b13      	ldr	r3, [pc, #76]	; (8007714 <vTaskStartScheduler+0xdc>)
 80076c6:	2200      	movs	r2, #0
 80076c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80076ca:	f001 f9e9 	bl	8008aa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80076ce:	e00e      	b.n	80076ee <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d6:	d10a      	bne.n	80076ee <vTaskStartScheduler+0xb6>
	__asm volatile
 80076d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	60fb      	str	r3, [r7, #12]
}
 80076ea:	bf00      	nop
 80076ec:	e7fe      	b.n	80076ec <vTaskStartScheduler+0xb4>
}
 80076ee:	bf00      	nop
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	0801b9c8 	.word	0x0801b9c8
 80076fc:	08007d61 	.word	0x08007d61
 8007700:	200013e8 	.word	0x200013e8
 8007704:	20000ef0 	.word	0x20000ef0
 8007708:	200000e8 	.word	0x200000e8
 800770c:	200013e4 	.word	0x200013e4
 8007710:	200013d0 	.word	0x200013d0
 8007714:	200013c8 	.word	0x200013c8

08007718 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007718:	b480      	push	{r7}
 800771a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800771c:	4b04      	ldr	r3, [pc, #16]	; (8007730 <vTaskSuspendAll+0x18>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3301      	adds	r3, #1
 8007722:	4a03      	ldr	r2, [pc, #12]	; (8007730 <vTaskSuspendAll+0x18>)
 8007724:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007726:	bf00      	nop
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	200013ec 	.word	0x200013ec

08007734 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800773a:	2300      	movs	r3, #0
 800773c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800773e:	2300      	movs	r3, #0
 8007740:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007742:	4b42      	ldr	r3, [pc, #264]	; (800784c <xTaskResumeAll+0x118>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10a      	bne.n	8007760 <xTaskResumeAll+0x2c>
	__asm volatile
 800774a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	603b      	str	r3, [r7, #0]
}
 800775c:	bf00      	nop
 800775e:	e7fe      	b.n	800775e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007760:	f001 fa40 	bl	8008be4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007764:	4b39      	ldr	r3, [pc, #228]	; (800784c <xTaskResumeAll+0x118>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3b01      	subs	r3, #1
 800776a:	4a38      	ldr	r2, [pc, #224]	; (800784c <xTaskResumeAll+0x118>)
 800776c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800776e:	4b37      	ldr	r3, [pc, #220]	; (800784c <xTaskResumeAll+0x118>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d162      	bne.n	800783c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007776:	4b36      	ldr	r3, [pc, #216]	; (8007850 <xTaskResumeAll+0x11c>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d05e      	beq.n	800783c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800777e:	e02f      	b.n	80077e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007780:	4b34      	ldr	r3, [pc, #208]	; (8007854 <xTaskResumeAll+0x120>)
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	3318      	adds	r3, #24
 800778c:	4618      	mov	r0, r3
 800778e:	f7fe fbcb 	bl	8005f28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	3304      	adds	r3, #4
 8007796:	4618      	mov	r0, r3
 8007798:	f7fe fbc6 	bl	8005f28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a0:	4b2d      	ldr	r3, [pc, #180]	; (8007858 <xTaskResumeAll+0x124>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d903      	bls.n	80077b0 <xTaskResumeAll+0x7c>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ac:	4a2a      	ldr	r2, [pc, #168]	; (8007858 <xTaskResumeAll+0x124>)
 80077ae:	6013      	str	r3, [r2, #0]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b4:	4613      	mov	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4a27      	ldr	r2, [pc, #156]	; (800785c <xTaskResumeAll+0x128>)
 80077be:	441a      	add	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	3304      	adds	r3, #4
 80077c4:	4619      	mov	r1, r3
 80077c6:	4610      	mov	r0, r2
 80077c8:	f7fe fb51 	bl	8005e6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d0:	4b23      	ldr	r3, [pc, #140]	; (8007860 <xTaskResumeAll+0x12c>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d302      	bcc.n	80077e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80077da:	4b22      	ldr	r3, [pc, #136]	; (8007864 <xTaskResumeAll+0x130>)
 80077dc:	2201      	movs	r2, #1
 80077de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077e0:	4b1c      	ldr	r3, [pc, #112]	; (8007854 <xTaskResumeAll+0x120>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1cb      	bne.n	8007780 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80077ee:	f000 fb71 	bl	8007ed4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80077f2:	4b1d      	ldr	r3, [pc, #116]	; (8007868 <xTaskResumeAll+0x134>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d010      	beq.n	8007820 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80077fe:	f000 f859 	bl	80078b4 <xTaskIncrementTick>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d002      	beq.n	800780e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007808:	4b16      	ldr	r3, [pc, #88]	; (8007864 <xTaskResumeAll+0x130>)
 800780a:	2201      	movs	r2, #1
 800780c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	3b01      	subs	r3, #1
 8007812:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1f1      	bne.n	80077fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800781a:	4b13      	ldr	r3, [pc, #76]	; (8007868 <xTaskResumeAll+0x134>)
 800781c:	2200      	movs	r2, #0
 800781e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007820:	4b10      	ldr	r3, [pc, #64]	; (8007864 <xTaskResumeAll+0x130>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d009      	beq.n	800783c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007828:	2301      	movs	r3, #1
 800782a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800782c:	4b0f      	ldr	r3, [pc, #60]	; (800786c <xTaskResumeAll+0x138>)
 800782e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800783c:	f001 fa02 	bl	8008c44 <vPortExitCritical>

	return xAlreadyYielded;
 8007840:	68bb      	ldr	r3, [r7, #8]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	200013ec 	.word	0x200013ec
 8007850:	200013c4 	.word	0x200013c4
 8007854:	20001384 	.word	0x20001384
 8007858:	200013cc 	.word	0x200013cc
 800785c:	20000ef4 	.word	0x20000ef4
 8007860:	20000ef0 	.word	0x20000ef0
 8007864:	200013d8 	.word	0x200013d8
 8007868:	200013d4 	.word	0x200013d4
 800786c:	e000ed04 	.word	0xe000ed04

08007870 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007876:	4b05      	ldr	r3, [pc, #20]	; (800788c <xTaskGetTickCount+0x1c>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800787c:	687b      	ldr	r3, [r7, #4]
}
 800787e:	4618      	mov	r0, r3
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	200013c8 	.word	0x200013c8

08007890 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007896:	f001 fa87 	bl	8008da8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800789a:	2300      	movs	r3, #0
 800789c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800789e:	4b04      	ldr	r3, [pc, #16]	; (80078b0 <xTaskGetTickCountFromISR+0x20>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80078a4:	683b      	ldr	r3, [r7, #0]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	200013c8 	.word	0x200013c8

080078b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078ba:	2300      	movs	r3, #0
 80078bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078be:	4b4f      	ldr	r3, [pc, #316]	; (80079fc <xTaskIncrementTick+0x148>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f040 808f 	bne.w	80079e6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078c8:	4b4d      	ldr	r3, [pc, #308]	; (8007a00 <xTaskIncrementTick+0x14c>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	3301      	adds	r3, #1
 80078ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078d0:	4a4b      	ldr	r2, [pc, #300]	; (8007a00 <xTaskIncrementTick+0x14c>)
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d120      	bne.n	800791e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80078dc:	4b49      	ldr	r3, [pc, #292]	; (8007a04 <xTaskIncrementTick+0x150>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00a      	beq.n	80078fc <xTaskIncrementTick+0x48>
	__asm volatile
 80078e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ea:	f383 8811 	msr	BASEPRI, r3
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f3bf 8f4f 	dsb	sy
 80078f6:	603b      	str	r3, [r7, #0]
}
 80078f8:	bf00      	nop
 80078fa:	e7fe      	b.n	80078fa <xTaskIncrementTick+0x46>
 80078fc:	4b41      	ldr	r3, [pc, #260]	; (8007a04 <xTaskIncrementTick+0x150>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	60fb      	str	r3, [r7, #12]
 8007902:	4b41      	ldr	r3, [pc, #260]	; (8007a08 <xTaskIncrementTick+0x154>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a3f      	ldr	r2, [pc, #252]	; (8007a04 <xTaskIncrementTick+0x150>)
 8007908:	6013      	str	r3, [r2, #0]
 800790a:	4a3f      	ldr	r2, [pc, #252]	; (8007a08 <xTaskIncrementTick+0x154>)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6013      	str	r3, [r2, #0]
 8007910:	4b3e      	ldr	r3, [pc, #248]	; (8007a0c <xTaskIncrementTick+0x158>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	3301      	adds	r3, #1
 8007916:	4a3d      	ldr	r2, [pc, #244]	; (8007a0c <xTaskIncrementTick+0x158>)
 8007918:	6013      	str	r3, [r2, #0]
 800791a:	f000 fadb 	bl	8007ed4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800791e:	4b3c      	ldr	r3, [pc, #240]	; (8007a10 <xTaskIncrementTick+0x15c>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	429a      	cmp	r2, r3
 8007926:	d349      	bcc.n	80079bc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007928:	4b36      	ldr	r3, [pc, #216]	; (8007a04 <xTaskIncrementTick+0x150>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d104      	bne.n	800793c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007932:	4b37      	ldr	r3, [pc, #220]	; (8007a10 <xTaskIncrementTick+0x15c>)
 8007934:	f04f 32ff 	mov.w	r2, #4294967295
 8007938:	601a      	str	r2, [r3, #0]
					break;
 800793a:	e03f      	b.n	80079bc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800793c:	4b31      	ldr	r3, [pc, #196]	; (8007a04 <xTaskIncrementTick+0x150>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800794c:	693a      	ldr	r2, [r7, #16]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	429a      	cmp	r2, r3
 8007952:	d203      	bcs.n	800795c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007954:	4a2e      	ldr	r2, [pc, #184]	; (8007a10 <xTaskIncrementTick+0x15c>)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800795a:	e02f      	b.n	80079bc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	3304      	adds	r3, #4
 8007960:	4618      	mov	r0, r3
 8007962:	f7fe fae1 	bl	8005f28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800796a:	2b00      	cmp	r3, #0
 800796c:	d004      	beq.n	8007978 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	3318      	adds	r3, #24
 8007972:	4618      	mov	r0, r3
 8007974:	f7fe fad8 	bl	8005f28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800797c:	4b25      	ldr	r3, [pc, #148]	; (8007a14 <xTaskIncrementTick+0x160>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	429a      	cmp	r2, r3
 8007982:	d903      	bls.n	800798c <xTaskIncrementTick+0xd8>
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007988:	4a22      	ldr	r2, [pc, #136]	; (8007a14 <xTaskIncrementTick+0x160>)
 800798a:	6013      	str	r3, [r2, #0]
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007990:	4613      	mov	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	4a1f      	ldr	r2, [pc, #124]	; (8007a18 <xTaskIncrementTick+0x164>)
 800799a:	441a      	add	r2, r3
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	3304      	adds	r3, #4
 80079a0:	4619      	mov	r1, r3
 80079a2:	4610      	mov	r0, r2
 80079a4:	f7fe fa63 	bl	8005e6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ac:	4b1b      	ldr	r3, [pc, #108]	; (8007a1c <xTaskIncrementTick+0x168>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d3b8      	bcc.n	8007928 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80079b6:	2301      	movs	r3, #1
 80079b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079ba:	e7b5      	b.n	8007928 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079bc:	4b17      	ldr	r3, [pc, #92]	; (8007a1c <xTaskIncrementTick+0x168>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c2:	4915      	ldr	r1, [pc, #84]	; (8007a18 <xTaskIncrementTick+0x164>)
 80079c4:	4613      	mov	r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	4413      	add	r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	440b      	add	r3, r1
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d901      	bls.n	80079d8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80079d4:	2301      	movs	r3, #1
 80079d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80079d8:	4b11      	ldr	r3, [pc, #68]	; (8007a20 <xTaskIncrementTick+0x16c>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d007      	beq.n	80079f0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80079e0:	2301      	movs	r3, #1
 80079e2:	617b      	str	r3, [r7, #20]
 80079e4:	e004      	b.n	80079f0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80079e6:	4b0f      	ldr	r3, [pc, #60]	; (8007a24 <xTaskIncrementTick+0x170>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3301      	adds	r3, #1
 80079ec:	4a0d      	ldr	r2, [pc, #52]	; (8007a24 <xTaskIncrementTick+0x170>)
 80079ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80079f0:	697b      	ldr	r3, [r7, #20]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3718      	adds	r7, #24
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	200013ec 	.word	0x200013ec
 8007a00:	200013c8 	.word	0x200013c8
 8007a04:	2000137c 	.word	0x2000137c
 8007a08:	20001380 	.word	0x20001380
 8007a0c:	200013dc 	.word	0x200013dc
 8007a10:	200013e4 	.word	0x200013e4
 8007a14:	200013cc 	.word	0x200013cc
 8007a18:	20000ef4 	.word	0x20000ef4
 8007a1c:	20000ef0 	.word	0x20000ef0
 8007a20:	200013d8 	.word	0x200013d8
 8007a24:	200013d4 	.word	0x200013d4

08007a28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a2e:	4b2a      	ldr	r3, [pc, #168]	; (8007ad8 <vTaskSwitchContext+0xb0>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d003      	beq.n	8007a3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a36:	4b29      	ldr	r3, [pc, #164]	; (8007adc <vTaskSwitchContext+0xb4>)
 8007a38:	2201      	movs	r2, #1
 8007a3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a3c:	e046      	b.n	8007acc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007a3e:	4b27      	ldr	r3, [pc, #156]	; (8007adc <vTaskSwitchContext+0xb4>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a44:	4b26      	ldr	r3, [pc, #152]	; (8007ae0 <vTaskSwitchContext+0xb8>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	60fb      	str	r3, [r7, #12]
 8007a4a:	e010      	b.n	8007a6e <vTaskSwitchContext+0x46>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10a      	bne.n	8007a68 <vTaskSwitchContext+0x40>
	__asm volatile
 8007a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	607b      	str	r3, [r7, #4]
}
 8007a64:	bf00      	nop
 8007a66:	e7fe      	b.n	8007a66 <vTaskSwitchContext+0x3e>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	60fb      	str	r3, [r7, #12]
 8007a6e:	491d      	ldr	r1, [pc, #116]	; (8007ae4 <vTaskSwitchContext+0xbc>)
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	4613      	mov	r3, r2
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4413      	add	r3, r2
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	440b      	add	r3, r1
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d0e4      	beq.n	8007a4c <vTaskSwitchContext+0x24>
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	4613      	mov	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4a15      	ldr	r2, [pc, #84]	; (8007ae4 <vTaskSwitchContext+0xbc>)
 8007a8e:	4413      	add	r3, r2
 8007a90:	60bb      	str	r3, [r7, #8]
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	685a      	ldr	r2, [r3, #4]
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	605a      	str	r2, [r3, #4]
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	3308      	adds	r3, #8
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d104      	bne.n	8007ab2 <vTaskSwitchContext+0x8a>
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	605a      	str	r2, [r3, #4]
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	4a0b      	ldr	r2, [pc, #44]	; (8007ae8 <vTaskSwitchContext+0xc0>)
 8007aba:	6013      	str	r3, [r2, #0]
 8007abc:	4a08      	ldr	r2, [pc, #32]	; (8007ae0 <vTaskSwitchContext+0xb8>)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ac2:	4b09      	ldr	r3, [pc, #36]	; (8007ae8 <vTaskSwitchContext+0xc0>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	3354      	adds	r3, #84	; 0x54
 8007ac8:	4a08      	ldr	r2, [pc, #32]	; (8007aec <vTaskSwitchContext+0xc4>)
 8007aca:	6013      	str	r3, [r2, #0]
}
 8007acc:	bf00      	nop
 8007ace:	3714      	adds	r7, #20
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr
 8007ad8:	200013ec 	.word	0x200013ec
 8007adc:	200013d8 	.word	0x200013d8
 8007ae0:	200013cc 	.word	0x200013cc
 8007ae4:	20000ef4 	.word	0x20000ef4
 8007ae8:	20000ef0 	.word	0x20000ef0
 8007aec:	200000e8 	.word	0x200000e8

08007af0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10a      	bne.n	8007b16 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b04:	f383 8811 	msr	BASEPRI, r3
 8007b08:	f3bf 8f6f 	isb	sy
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	60fb      	str	r3, [r7, #12]
}
 8007b12:	bf00      	nop
 8007b14:	e7fe      	b.n	8007b14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b16:	4b07      	ldr	r3, [pc, #28]	; (8007b34 <vTaskPlaceOnEventList+0x44>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3318      	adds	r3, #24
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7fe f9c9 	bl	8005eb6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b24:	2101      	movs	r1, #1
 8007b26:	6838      	ldr	r0, [r7, #0]
 8007b28:	f000 fb8e 	bl	8008248 <prvAddCurrentTaskToDelayedList>
}
 8007b2c:	bf00      	nop
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	20000ef0 	.word	0x20000ef0

08007b38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10a      	bne.n	8007b60 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4e:	f383 8811 	msr	BASEPRI, r3
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	f3bf 8f4f 	dsb	sy
 8007b5a:	617b      	str	r3, [r7, #20]
}
 8007b5c:	bf00      	nop
 8007b5e:	e7fe      	b.n	8007b5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b60:	4b0a      	ldr	r3, [pc, #40]	; (8007b8c <vTaskPlaceOnEventListRestricted+0x54>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3318      	adds	r3, #24
 8007b66:	4619      	mov	r1, r3
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f7fe f980 	bl	8005e6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d002      	beq.n	8007b7a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007b74:	f04f 33ff 	mov.w	r3, #4294967295
 8007b78:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b7a:	6879      	ldr	r1, [r7, #4]
 8007b7c:	68b8      	ldr	r0, [r7, #8]
 8007b7e:	f000 fb63 	bl	8008248 <prvAddCurrentTaskToDelayedList>
	}
 8007b82:	bf00      	nop
 8007b84:	3718      	adds	r7, #24
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	20000ef0 	.word	0x20000ef0

08007b90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10a      	bne.n	8007bbc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	60fb      	str	r3, [r7, #12]
}
 8007bb8:	bf00      	nop
 8007bba:	e7fe      	b.n	8007bba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	3318      	adds	r3, #24
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7fe f9b1 	bl	8005f28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bc6:	4b1e      	ldr	r3, [pc, #120]	; (8007c40 <xTaskRemoveFromEventList+0xb0>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d11d      	bne.n	8007c0a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	3304      	adds	r3, #4
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fe f9a8 	bl	8005f28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bdc:	4b19      	ldr	r3, [pc, #100]	; (8007c44 <xTaskRemoveFromEventList+0xb4>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d903      	bls.n	8007bec <xTaskRemoveFromEventList+0x5c>
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be8:	4a16      	ldr	r2, [pc, #88]	; (8007c44 <xTaskRemoveFromEventList+0xb4>)
 8007bea:	6013      	str	r3, [r2, #0]
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4413      	add	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4a13      	ldr	r2, [pc, #76]	; (8007c48 <xTaskRemoveFromEventList+0xb8>)
 8007bfa:	441a      	add	r2, r3
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	3304      	adds	r3, #4
 8007c00:	4619      	mov	r1, r3
 8007c02:	4610      	mov	r0, r2
 8007c04:	f7fe f933 	bl	8005e6e <vListInsertEnd>
 8007c08:	e005      	b.n	8007c16 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	3318      	adds	r3, #24
 8007c0e:	4619      	mov	r1, r3
 8007c10:	480e      	ldr	r0, [pc, #56]	; (8007c4c <xTaskRemoveFromEventList+0xbc>)
 8007c12:	f7fe f92c 	bl	8005e6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c1a:	4b0d      	ldr	r3, [pc, #52]	; (8007c50 <xTaskRemoveFromEventList+0xc0>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d905      	bls.n	8007c30 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c24:	2301      	movs	r3, #1
 8007c26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c28:	4b0a      	ldr	r3, [pc, #40]	; (8007c54 <xTaskRemoveFromEventList+0xc4>)
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	601a      	str	r2, [r3, #0]
 8007c2e:	e001      	b.n	8007c34 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007c30:	2300      	movs	r3, #0
 8007c32:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c34:	697b      	ldr	r3, [r7, #20]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3718      	adds	r7, #24
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	200013ec 	.word	0x200013ec
 8007c44:	200013cc 	.word	0x200013cc
 8007c48:	20000ef4 	.word	0x20000ef4
 8007c4c:	20001384 	.word	0x20001384
 8007c50:	20000ef0 	.word	0x20000ef0
 8007c54:	200013d8 	.word	0x200013d8

08007c58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c60:	4b06      	ldr	r3, [pc, #24]	; (8007c7c <vTaskInternalSetTimeOutState+0x24>)
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c68:	4b05      	ldr	r3, [pc, #20]	; (8007c80 <vTaskInternalSetTimeOutState+0x28>)
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	605a      	str	r2, [r3, #4]
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	200013dc 	.word	0x200013dc
 8007c80:	200013c8 	.word	0x200013c8

08007c84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b088      	sub	sp, #32
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10a      	bne.n	8007caa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	613b      	str	r3, [r7, #16]
}
 8007ca6:	bf00      	nop
 8007ca8:	e7fe      	b.n	8007ca8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10a      	bne.n	8007cc6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	60fb      	str	r3, [r7, #12]
}
 8007cc2:	bf00      	nop
 8007cc4:	e7fe      	b.n	8007cc4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007cc6:	f000 ff8d 	bl	8008be4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007cca:	4b1d      	ldr	r3, [pc, #116]	; (8007d40 <xTaskCheckForTimeOut+0xbc>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	69ba      	ldr	r2, [r7, #24]
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce2:	d102      	bne.n	8007cea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	61fb      	str	r3, [r7, #28]
 8007ce8:	e023      	b.n	8007d32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	4b15      	ldr	r3, [pc, #84]	; (8007d44 <xTaskCheckForTimeOut+0xc0>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d007      	beq.n	8007d06 <xTaskCheckForTimeOut+0x82>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d302      	bcc.n	8007d06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d00:	2301      	movs	r3, #1
 8007d02:	61fb      	str	r3, [r7, #28]
 8007d04:	e015      	b.n	8007d32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d20b      	bcs.n	8007d28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	1ad2      	subs	r2, r2, r3
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7ff ff9b 	bl	8007c58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d22:	2300      	movs	r3, #0
 8007d24:	61fb      	str	r3, [r7, #28]
 8007d26:	e004      	b.n	8007d32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d32:	f000 ff87 	bl	8008c44 <vPortExitCritical>

	return xReturn;
 8007d36:	69fb      	ldr	r3, [r7, #28]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3720      	adds	r7, #32
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	200013c8 	.word	0x200013c8
 8007d44:	200013dc 	.word	0x200013dc

08007d48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d48:	b480      	push	{r7}
 8007d4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d4c:	4b03      	ldr	r3, [pc, #12]	; (8007d5c <vTaskMissedYield+0x14>)
 8007d4e:	2201      	movs	r2, #1
 8007d50:	601a      	str	r2, [r3, #0]
}
 8007d52:	bf00      	nop
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	200013d8 	.word	0x200013d8

08007d60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d68:	f000 f852 	bl	8007e10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d6c:	4b06      	ldr	r3, [pc, #24]	; (8007d88 <prvIdleTask+0x28>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d9f9      	bls.n	8007d68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d74:	4b05      	ldr	r3, [pc, #20]	; (8007d8c <prvIdleTask+0x2c>)
 8007d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d7a:	601a      	str	r2, [r3, #0]
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d84:	e7f0      	b.n	8007d68 <prvIdleTask+0x8>
 8007d86:	bf00      	nop
 8007d88:	20000ef4 	.word	0x20000ef4
 8007d8c:	e000ed04 	.word	0xe000ed04

08007d90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d96:	2300      	movs	r3, #0
 8007d98:	607b      	str	r3, [r7, #4]
 8007d9a:	e00c      	b.n	8007db6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4a12      	ldr	r2, [pc, #72]	; (8007df0 <prvInitialiseTaskLists+0x60>)
 8007da8:	4413      	add	r3, r2
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fe f832 	bl	8005e14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	3301      	adds	r3, #1
 8007db4:	607b      	str	r3, [r7, #4]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2b37      	cmp	r3, #55	; 0x37
 8007dba:	d9ef      	bls.n	8007d9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007dbc:	480d      	ldr	r0, [pc, #52]	; (8007df4 <prvInitialiseTaskLists+0x64>)
 8007dbe:	f7fe f829 	bl	8005e14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007dc2:	480d      	ldr	r0, [pc, #52]	; (8007df8 <prvInitialiseTaskLists+0x68>)
 8007dc4:	f7fe f826 	bl	8005e14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007dc8:	480c      	ldr	r0, [pc, #48]	; (8007dfc <prvInitialiseTaskLists+0x6c>)
 8007dca:	f7fe f823 	bl	8005e14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007dce:	480c      	ldr	r0, [pc, #48]	; (8007e00 <prvInitialiseTaskLists+0x70>)
 8007dd0:	f7fe f820 	bl	8005e14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007dd4:	480b      	ldr	r0, [pc, #44]	; (8007e04 <prvInitialiseTaskLists+0x74>)
 8007dd6:	f7fe f81d 	bl	8005e14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007dda:	4b0b      	ldr	r3, [pc, #44]	; (8007e08 <prvInitialiseTaskLists+0x78>)
 8007ddc:	4a05      	ldr	r2, [pc, #20]	; (8007df4 <prvInitialiseTaskLists+0x64>)
 8007dde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007de0:	4b0a      	ldr	r3, [pc, #40]	; (8007e0c <prvInitialiseTaskLists+0x7c>)
 8007de2:	4a05      	ldr	r2, [pc, #20]	; (8007df8 <prvInitialiseTaskLists+0x68>)
 8007de4:	601a      	str	r2, [r3, #0]
}
 8007de6:	bf00      	nop
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	20000ef4 	.word	0x20000ef4
 8007df4:	20001354 	.word	0x20001354
 8007df8:	20001368 	.word	0x20001368
 8007dfc:	20001384 	.word	0x20001384
 8007e00:	20001398 	.word	0x20001398
 8007e04:	200013b0 	.word	0x200013b0
 8007e08:	2000137c 	.word	0x2000137c
 8007e0c:	20001380 	.word	0x20001380

08007e10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e16:	e019      	b.n	8007e4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e18:	f000 fee4 	bl	8008be4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e1c:	4b10      	ldr	r3, [pc, #64]	; (8007e60 <prvCheckTasksWaitingTermination+0x50>)
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3304      	adds	r3, #4
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fe f87d 	bl	8005f28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e2e:	4b0d      	ldr	r3, [pc, #52]	; (8007e64 <prvCheckTasksWaitingTermination+0x54>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	3b01      	subs	r3, #1
 8007e34:	4a0b      	ldr	r2, [pc, #44]	; (8007e64 <prvCheckTasksWaitingTermination+0x54>)
 8007e36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e38:	4b0b      	ldr	r3, [pc, #44]	; (8007e68 <prvCheckTasksWaitingTermination+0x58>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	4a0a      	ldr	r2, [pc, #40]	; (8007e68 <prvCheckTasksWaitingTermination+0x58>)
 8007e40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e42:	f000 feff 	bl	8008c44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f810 	bl	8007e6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e4c:	4b06      	ldr	r3, [pc, #24]	; (8007e68 <prvCheckTasksWaitingTermination+0x58>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1e1      	bne.n	8007e18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	20001398 	.word	0x20001398
 8007e64:	200013c4 	.word	0x200013c4
 8007e68:	200013ac 	.word	0x200013ac

08007e6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	3354      	adds	r3, #84	; 0x54
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f012 ffcd 	bl	801ae18 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d108      	bne.n	8007e9a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f001 f897 	bl	8008fc0 <vPortFree>
				vPortFree( pxTCB );
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f001 f894 	bl	8008fc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e98:	e018      	b.n	8007ecc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d103      	bne.n	8007eac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f001 f88b 	bl	8008fc0 <vPortFree>
	}
 8007eaa:	e00f      	b.n	8007ecc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d00a      	beq.n	8007ecc <prvDeleteTCB+0x60>
	__asm volatile
 8007eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	60fb      	str	r3, [r7, #12]
}
 8007ec8:	bf00      	nop
 8007eca:	e7fe      	b.n	8007eca <prvDeleteTCB+0x5e>
	}
 8007ecc:	bf00      	nop
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007eda:	4b0c      	ldr	r3, [pc, #48]	; (8007f0c <prvResetNextTaskUnblockTime+0x38>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d104      	bne.n	8007eee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ee4:	4b0a      	ldr	r3, [pc, #40]	; (8007f10 <prvResetNextTaskUnblockTime+0x3c>)
 8007ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007eec:	e008      	b.n	8007f00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eee:	4b07      	ldr	r3, [pc, #28]	; (8007f0c <prvResetNextTaskUnblockTime+0x38>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	4a04      	ldr	r2, [pc, #16]	; (8007f10 <prvResetNextTaskUnblockTime+0x3c>)
 8007efe:	6013      	str	r3, [r2, #0]
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr
 8007f0c:	2000137c 	.word	0x2000137c
 8007f10:	200013e4 	.word	0x200013e4

08007f14 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007f1a:	4b05      	ldr	r3, [pc, #20]	; (8007f30 <xTaskGetCurrentTaskHandle+0x1c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007f20:	687b      	ldr	r3, [r7, #4]
	}
 8007f22:	4618      	mov	r0, r3
 8007f24:	370c      	adds	r7, #12
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	20000ef0 	.word	0x20000ef0

08007f34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f3a:	4b0b      	ldr	r3, [pc, #44]	; (8007f68 <xTaskGetSchedulerState+0x34>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d102      	bne.n	8007f48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f42:	2301      	movs	r3, #1
 8007f44:	607b      	str	r3, [r7, #4]
 8007f46:	e008      	b.n	8007f5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f48:	4b08      	ldr	r3, [pc, #32]	; (8007f6c <xTaskGetSchedulerState+0x38>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d102      	bne.n	8007f56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f50:	2302      	movs	r3, #2
 8007f52:	607b      	str	r3, [r7, #4]
 8007f54:	e001      	b.n	8007f5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f56:	2300      	movs	r3, #0
 8007f58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f5a:	687b      	ldr	r3, [r7, #4]
	}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	200013d0 	.word	0x200013d0
 8007f6c:	200013ec 	.word	0x200013ec

08007f70 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d051      	beq.n	800802a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f8a:	4b2a      	ldr	r3, [pc, #168]	; (8008034 <xTaskPriorityInherit+0xc4>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d241      	bcs.n	8008018 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	db06      	blt.n	8007faa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f9c:	4b25      	ldr	r3, [pc, #148]	; (8008034 <xTaskPriorityInherit+0xc4>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	6959      	ldr	r1, [r3, #20]
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4a1f      	ldr	r2, [pc, #124]	; (8008038 <xTaskPriorityInherit+0xc8>)
 8007fbc:	4413      	add	r3, r2
 8007fbe:	4299      	cmp	r1, r3
 8007fc0:	d122      	bne.n	8008008 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fd ffae 	bl	8005f28 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007fcc:	4b19      	ldr	r3, [pc, #100]	; (8008034 <xTaskPriorityInherit+0xc4>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fda:	4b18      	ldr	r3, [pc, #96]	; (800803c <xTaskPriorityInherit+0xcc>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d903      	bls.n	8007fea <xTaskPriorityInherit+0x7a>
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe6:	4a15      	ldr	r2, [pc, #84]	; (800803c <xTaskPriorityInherit+0xcc>)
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fee:	4613      	mov	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4a10      	ldr	r2, [pc, #64]	; (8008038 <xTaskPriorityInherit+0xc8>)
 8007ff8:	441a      	add	r2, r3
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	3304      	adds	r3, #4
 8007ffe:	4619      	mov	r1, r3
 8008000:	4610      	mov	r0, r2
 8008002:	f7fd ff34 	bl	8005e6e <vListInsertEnd>
 8008006:	e004      	b.n	8008012 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008008:	4b0a      	ldr	r3, [pc, #40]	; (8008034 <xTaskPriorityInherit+0xc4>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008012:	2301      	movs	r3, #1
 8008014:	60fb      	str	r3, [r7, #12]
 8008016:	e008      	b.n	800802a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800801c:	4b05      	ldr	r3, [pc, #20]	; (8008034 <xTaskPriorityInherit+0xc4>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008022:	429a      	cmp	r2, r3
 8008024:	d201      	bcs.n	800802a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008026:	2301      	movs	r3, #1
 8008028:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800802a:	68fb      	ldr	r3, [r7, #12]
	}
 800802c:	4618      	mov	r0, r3
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	20000ef0 	.word	0x20000ef0
 8008038:	20000ef4 	.word	0x20000ef4
 800803c:	200013cc 	.word	0x200013cc

08008040 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008040:	b580      	push	{r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800804c:	2300      	movs	r3, #0
 800804e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d056      	beq.n	8008104 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008056:	4b2e      	ldr	r3, [pc, #184]	; (8008110 <xTaskPriorityDisinherit+0xd0>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	429a      	cmp	r2, r3
 800805e:	d00a      	beq.n	8008076 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008064:	f383 8811 	msr	BASEPRI, r3
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	60fb      	str	r3, [r7, #12]
}
 8008072:	bf00      	nop
 8008074:	e7fe      	b.n	8008074 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10a      	bne.n	8008094 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800807e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	60bb      	str	r3, [r7, #8]
}
 8008090:	bf00      	nop
 8008092:	e7fe      	b.n	8008092 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008098:	1e5a      	subs	r2, r3, #1
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d02c      	beq.n	8008104 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d128      	bne.n	8008104 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	3304      	adds	r3, #4
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fd ff36 	bl	8005f28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d4:	4b0f      	ldr	r3, [pc, #60]	; (8008114 <xTaskPriorityDisinherit+0xd4>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d903      	bls.n	80080e4 <xTaskPriorityDisinherit+0xa4>
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e0:	4a0c      	ldr	r2, [pc, #48]	; (8008114 <xTaskPriorityDisinherit+0xd4>)
 80080e2:	6013      	str	r3, [r2, #0]
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e8:	4613      	mov	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4413      	add	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4a09      	ldr	r2, [pc, #36]	; (8008118 <xTaskPriorityDisinherit+0xd8>)
 80080f2:	441a      	add	r2, r3
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	3304      	adds	r3, #4
 80080f8:	4619      	mov	r1, r3
 80080fa:	4610      	mov	r0, r2
 80080fc:	f7fd feb7 	bl	8005e6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008100:	2301      	movs	r3, #1
 8008102:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008104:	697b      	ldr	r3, [r7, #20]
	}
 8008106:	4618      	mov	r0, r3
 8008108:	3718      	adds	r7, #24
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	20000ef0 	.word	0x20000ef0
 8008114:	200013cc 	.word	0x200013cc
 8008118:	20000ef4 	.word	0x20000ef4

0800811c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800811c:	b580      	push	{r7, lr}
 800811e:	b088      	sub	sp, #32
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800812a:	2301      	movs	r3, #1
 800812c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d06a      	beq.n	800820a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008138:	2b00      	cmp	r3, #0
 800813a:	d10a      	bne.n	8008152 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800813c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008140:	f383 8811 	msr	BASEPRI, r3
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	60fb      	str	r3, [r7, #12]
}
 800814e:	bf00      	nop
 8008150:	e7fe      	b.n	8008150 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	429a      	cmp	r2, r3
 800815a:	d902      	bls.n	8008162 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	61fb      	str	r3, [r7, #28]
 8008160:	e002      	b.n	8008168 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008166:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816c:	69fa      	ldr	r2, [r7, #28]
 800816e:	429a      	cmp	r2, r3
 8008170:	d04b      	beq.n	800820a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	429a      	cmp	r2, r3
 800817a:	d146      	bne.n	800820a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800817c:	4b25      	ldr	r3, [pc, #148]	; (8008214 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	69ba      	ldr	r2, [r7, #24]
 8008182:	429a      	cmp	r2, r3
 8008184:	d10a      	bne.n	800819c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818a:	f383 8811 	msr	BASEPRI, r3
 800818e:	f3bf 8f6f 	isb	sy
 8008192:	f3bf 8f4f 	dsb	sy
 8008196:	60bb      	str	r3, [r7, #8]
}
 8008198:	bf00      	nop
 800819a:	e7fe      	b.n	800819a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	69fa      	ldr	r2, [r7, #28]
 80081a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	db04      	blt.n	80081ba <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	6959      	ldr	r1, [r3, #20]
 80081be:	693a      	ldr	r2, [r7, #16]
 80081c0:	4613      	mov	r3, r2
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	4413      	add	r3, r2
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	4a13      	ldr	r2, [pc, #76]	; (8008218 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80081ca:	4413      	add	r3, r2
 80081cc:	4299      	cmp	r1, r3
 80081ce:	d11c      	bne.n	800820a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	3304      	adds	r3, #4
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7fd fea7 	bl	8005f28 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081de:	4b0f      	ldr	r3, [pc, #60]	; (800821c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d903      	bls.n	80081ee <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ea:	4a0c      	ldr	r2, [pc, #48]	; (800821c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80081ec:	6013      	str	r3, [r2, #0]
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f2:	4613      	mov	r3, r2
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4413      	add	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4a07      	ldr	r2, [pc, #28]	; (8008218 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80081fc:	441a      	add	r2, r3
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	3304      	adds	r3, #4
 8008202:	4619      	mov	r1, r3
 8008204:	4610      	mov	r0, r2
 8008206:	f7fd fe32 	bl	8005e6e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800820a:	bf00      	nop
 800820c:	3720      	adds	r7, #32
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	20000ef0 	.word	0x20000ef0
 8008218:	20000ef4 	.word	0x20000ef4
 800821c:	200013cc 	.word	0x200013cc

08008220 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008220:	b480      	push	{r7}
 8008222:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008224:	4b07      	ldr	r3, [pc, #28]	; (8008244 <pvTaskIncrementMutexHeldCount+0x24>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d004      	beq.n	8008236 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800822c:	4b05      	ldr	r3, [pc, #20]	; (8008244 <pvTaskIncrementMutexHeldCount+0x24>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008232:	3201      	adds	r2, #1
 8008234:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008236:	4b03      	ldr	r3, [pc, #12]	; (8008244 <pvTaskIncrementMutexHeldCount+0x24>)
 8008238:	681b      	ldr	r3, [r3, #0]
	}
 800823a:	4618      	mov	r0, r3
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr
 8008244:	20000ef0 	.word	0x20000ef0

08008248 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008252:	4b21      	ldr	r3, [pc, #132]	; (80082d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008258:	4b20      	ldr	r3, [pc, #128]	; (80082dc <prvAddCurrentTaskToDelayedList+0x94>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	3304      	adds	r3, #4
 800825e:	4618      	mov	r0, r3
 8008260:	f7fd fe62 	bl	8005f28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826a:	d10a      	bne.n	8008282 <prvAddCurrentTaskToDelayedList+0x3a>
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d007      	beq.n	8008282 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008272:	4b1a      	ldr	r3, [pc, #104]	; (80082dc <prvAddCurrentTaskToDelayedList+0x94>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3304      	adds	r3, #4
 8008278:	4619      	mov	r1, r3
 800827a:	4819      	ldr	r0, [pc, #100]	; (80082e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800827c:	f7fd fdf7 	bl	8005e6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008280:	e026      	b.n	80082d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4413      	add	r3, r2
 8008288:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800828a:	4b14      	ldr	r3, [pc, #80]	; (80082dc <prvAddCurrentTaskToDelayedList+0x94>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	429a      	cmp	r2, r3
 8008298:	d209      	bcs.n	80082ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800829a:	4b12      	ldr	r3, [pc, #72]	; (80082e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	4b0f      	ldr	r3, [pc, #60]	; (80082dc <prvAddCurrentTaskToDelayedList+0x94>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	3304      	adds	r3, #4
 80082a4:	4619      	mov	r1, r3
 80082a6:	4610      	mov	r0, r2
 80082a8:	f7fd fe05 	bl	8005eb6 <vListInsert>
}
 80082ac:	e010      	b.n	80082d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082ae:	4b0e      	ldr	r3, [pc, #56]	; (80082e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	4b0a      	ldr	r3, [pc, #40]	; (80082dc <prvAddCurrentTaskToDelayedList+0x94>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	3304      	adds	r3, #4
 80082b8:	4619      	mov	r1, r3
 80082ba:	4610      	mov	r0, r2
 80082bc:	f7fd fdfb 	bl	8005eb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082c0:	4b0a      	ldr	r3, [pc, #40]	; (80082ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d202      	bcs.n	80082d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80082ca:	4a08      	ldr	r2, [pc, #32]	; (80082ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	6013      	str	r3, [r2, #0]
}
 80082d0:	bf00      	nop
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	200013c8 	.word	0x200013c8
 80082dc:	20000ef0 	.word	0x20000ef0
 80082e0:	200013b0 	.word	0x200013b0
 80082e4:	20001380 	.word	0x20001380
 80082e8:	2000137c 	.word	0x2000137c
 80082ec:	200013e4 	.word	0x200013e4

080082f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b08a      	sub	sp, #40	; 0x28
 80082f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80082f6:	2300      	movs	r3, #0
 80082f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80082fa:	f000 fb07 	bl	800890c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80082fe:	4b1c      	ldr	r3, [pc, #112]	; (8008370 <xTimerCreateTimerTask+0x80>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d021      	beq.n	800834a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008306:	2300      	movs	r3, #0
 8008308:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800830a:	2300      	movs	r3, #0
 800830c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800830e:	1d3a      	adds	r2, r7, #4
 8008310:	f107 0108 	add.w	r1, r7, #8
 8008314:	f107 030c 	add.w	r3, r7, #12
 8008318:	4618      	mov	r0, r3
 800831a:	f7fd fd61 	bl	8005de0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800831e:	6879      	ldr	r1, [r7, #4]
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	9202      	str	r2, [sp, #8]
 8008326:	9301      	str	r3, [sp, #4]
 8008328:	2302      	movs	r3, #2
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	2300      	movs	r3, #0
 800832e:	460a      	mov	r2, r1
 8008330:	4910      	ldr	r1, [pc, #64]	; (8008374 <xTimerCreateTimerTask+0x84>)
 8008332:	4811      	ldr	r0, [pc, #68]	; (8008378 <xTimerCreateTimerTask+0x88>)
 8008334:	f7fe ff22 	bl	800717c <xTaskCreateStatic>
 8008338:	4603      	mov	r3, r0
 800833a:	4a10      	ldr	r2, [pc, #64]	; (800837c <xTimerCreateTimerTask+0x8c>)
 800833c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800833e:	4b0f      	ldr	r3, [pc, #60]	; (800837c <xTimerCreateTimerTask+0x8c>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008346:	2301      	movs	r3, #1
 8008348:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10a      	bne.n	8008366 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	613b      	str	r3, [r7, #16]
}
 8008362:	bf00      	nop
 8008364:	e7fe      	b.n	8008364 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008366:	697b      	ldr	r3, [r7, #20]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3718      	adds	r7, #24
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	20001420 	.word	0x20001420
 8008374:	0801b9d0 	.word	0x0801b9d0
 8008378:	080084b5 	.word	0x080084b5
 800837c:	20001424 	.word	0x20001424

08008380 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b08a      	sub	sp, #40	; 0x28
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
 800838c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800838e:	2300      	movs	r3, #0
 8008390:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10a      	bne.n	80083ae <xTimerGenericCommand+0x2e>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	623b      	str	r3, [r7, #32]
}
 80083aa:	bf00      	nop
 80083ac:	e7fe      	b.n	80083ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80083ae:	4b1a      	ldr	r3, [pc, #104]	; (8008418 <xTimerGenericCommand+0x98>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d02a      	beq.n	800840c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	2b05      	cmp	r3, #5
 80083c6:	dc18      	bgt.n	80083fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80083c8:	f7ff fdb4 	bl	8007f34 <xTaskGetSchedulerState>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d109      	bne.n	80083e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80083d2:	4b11      	ldr	r3, [pc, #68]	; (8008418 <xTimerGenericCommand+0x98>)
 80083d4:	6818      	ldr	r0, [r3, #0]
 80083d6:	f107 0110 	add.w	r1, r7, #16
 80083da:	2300      	movs	r3, #0
 80083dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083de:	f7fe f82b 	bl	8006438 <xQueueGenericSend>
 80083e2:	6278      	str	r0, [r7, #36]	; 0x24
 80083e4:	e012      	b.n	800840c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80083e6:	4b0c      	ldr	r3, [pc, #48]	; (8008418 <xTimerGenericCommand+0x98>)
 80083e8:	6818      	ldr	r0, [r3, #0]
 80083ea:	f107 0110 	add.w	r1, r7, #16
 80083ee:	2300      	movs	r3, #0
 80083f0:	2200      	movs	r2, #0
 80083f2:	f7fe f821 	bl	8006438 <xQueueGenericSend>
 80083f6:	6278      	str	r0, [r7, #36]	; 0x24
 80083f8:	e008      	b.n	800840c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80083fa:	4b07      	ldr	r3, [pc, #28]	; (8008418 <xTimerGenericCommand+0x98>)
 80083fc:	6818      	ldr	r0, [r3, #0]
 80083fe:	f107 0110 	add.w	r1, r7, #16
 8008402:	2300      	movs	r3, #0
 8008404:	683a      	ldr	r2, [r7, #0]
 8008406:	f7fe f915 	bl	8006634 <xQueueGenericSendFromISR>
 800840a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800840c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800840e:	4618      	mov	r0, r3
 8008410:	3728      	adds	r7, #40	; 0x28
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	20001420 	.word	0x20001420

0800841c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b088      	sub	sp, #32
 8008420:	af02      	add	r7, sp, #8
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008426:	4b22      	ldr	r3, [pc, #136]	; (80084b0 <prvProcessExpiredTimer+0x94>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	3304      	adds	r3, #4
 8008434:	4618      	mov	r0, r3
 8008436:	f7fd fd77 	bl	8005f28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008440:	f003 0304 	and.w	r3, r3, #4
 8008444:	2b00      	cmp	r3, #0
 8008446:	d022      	beq.n	800848e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	699a      	ldr	r2, [r3, #24]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	18d1      	adds	r1, r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	6978      	ldr	r0, [r7, #20]
 8008456:	f000 f8d1 	bl	80085fc <prvInsertTimerInActiveList>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d01f      	beq.n	80084a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008460:	2300      	movs	r3, #0
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	2300      	movs	r3, #0
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	2100      	movs	r1, #0
 800846a:	6978      	ldr	r0, [r7, #20]
 800846c:	f7ff ff88 	bl	8008380 <xTimerGenericCommand>
 8008470:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d113      	bne.n	80084a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847c:	f383 8811 	msr	BASEPRI, r3
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	60fb      	str	r3, [r7, #12]
}
 800848a:	bf00      	nop
 800848c:	e7fe      	b.n	800848c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008494:	f023 0301 	bic.w	r3, r3, #1
 8008498:	b2da      	uxtb	r2, r3
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	6a1b      	ldr	r3, [r3, #32]
 80084a4:	6978      	ldr	r0, [r7, #20]
 80084a6:	4798      	blx	r3
}
 80084a8:	bf00      	nop
 80084aa:	3718      	adds	r7, #24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	20001418 	.word	0x20001418

080084b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084bc:	f107 0308 	add.w	r3, r7, #8
 80084c0:	4618      	mov	r0, r3
 80084c2:	f000 f857 	bl	8008574 <prvGetNextExpireTime>
 80084c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	4619      	mov	r1, r3
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 f803 	bl	80084d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80084d2:	f000 f8d5 	bl	8008680 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084d6:	e7f1      	b.n	80084bc <prvTimerTask+0x8>

080084d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084e2:	f7ff f919 	bl	8007718 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084e6:	f107 0308 	add.w	r3, r7, #8
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 f866 	bl	80085bc <prvSampleTimeNow>
 80084f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d130      	bne.n	800855a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10a      	bne.n	8008514 <prvProcessTimerOrBlockTask+0x3c>
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	429a      	cmp	r2, r3
 8008504:	d806      	bhi.n	8008514 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008506:	f7ff f915 	bl	8007734 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800850a:	68f9      	ldr	r1, [r7, #12]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7ff ff85 	bl	800841c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008512:	e024      	b.n	800855e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d008      	beq.n	800852c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800851a:	4b13      	ldr	r3, [pc, #76]	; (8008568 <prvProcessTimerOrBlockTask+0x90>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d101      	bne.n	8008528 <prvProcessTimerOrBlockTask+0x50>
 8008524:	2301      	movs	r3, #1
 8008526:	e000      	b.n	800852a <prvProcessTimerOrBlockTask+0x52>
 8008528:	2300      	movs	r3, #0
 800852a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800852c:	4b0f      	ldr	r3, [pc, #60]	; (800856c <prvProcessTimerOrBlockTask+0x94>)
 800852e:	6818      	ldr	r0, [r3, #0]
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	4619      	mov	r1, r3
 800853a:	f7fe fdeb 	bl	8007114 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800853e:	f7ff f8f9 	bl	8007734 <xTaskResumeAll>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10a      	bne.n	800855e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008548:	4b09      	ldr	r3, [pc, #36]	; (8008570 <prvProcessTimerOrBlockTask+0x98>)
 800854a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800854e:	601a      	str	r2, [r3, #0]
 8008550:	f3bf 8f4f 	dsb	sy
 8008554:	f3bf 8f6f 	isb	sy
}
 8008558:	e001      	b.n	800855e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800855a:	f7ff f8eb 	bl	8007734 <xTaskResumeAll>
}
 800855e:	bf00      	nop
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	2000141c 	.word	0x2000141c
 800856c:	20001420 	.word	0x20001420
 8008570:	e000ed04 	.word	0xe000ed04

08008574 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800857c:	4b0e      	ldr	r3, [pc, #56]	; (80085b8 <prvGetNextExpireTime+0x44>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <prvGetNextExpireTime+0x16>
 8008586:	2201      	movs	r2, #1
 8008588:	e000      	b.n	800858c <prvGetNextExpireTime+0x18>
 800858a:	2200      	movs	r2, #0
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d105      	bne.n	80085a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008598:	4b07      	ldr	r3, [pc, #28]	; (80085b8 <prvGetNextExpireTime+0x44>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	60fb      	str	r3, [r7, #12]
 80085a2:	e001      	b.n	80085a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80085a4:	2300      	movs	r3, #0
 80085a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80085a8:	68fb      	ldr	r3, [r7, #12]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	20001418 	.word	0x20001418

080085bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80085c4:	f7ff f954 	bl	8007870 <xTaskGetTickCount>
 80085c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80085ca:	4b0b      	ldr	r3, [pc, #44]	; (80085f8 <prvSampleTimeNow+0x3c>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d205      	bcs.n	80085e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80085d4:	f000 f936 	bl	8008844 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	e002      	b.n	80085e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80085e6:	4a04      	ldr	r2, [pc, #16]	; (80085f8 <prvSampleTimeNow+0x3c>)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80085ec:	68fb      	ldr	r3, [r7, #12]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	20001428 	.word	0x20001428

080085fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
 8008608:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800860a:	2300      	movs	r3, #0
 800860c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	429a      	cmp	r2, r3
 8008620:	d812      	bhi.n	8008648 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	1ad2      	subs	r2, r2, r3
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	429a      	cmp	r2, r3
 800862e:	d302      	bcc.n	8008636 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008630:	2301      	movs	r3, #1
 8008632:	617b      	str	r3, [r7, #20]
 8008634:	e01b      	b.n	800866e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008636:	4b10      	ldr	r3, [pc, #64]	; (8008678 <prvInsertTimerInActiveList+0x7c>)
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	3304      	adds	r3, #4
 800863e:	4619      	mov	r1, r3
 8008640:	4610      	mov	r0, r2
 8008642:	f7fd fc38 	bl	8005eb6 <vListInsert>
 8008646:	e012      	b.n	800866e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	429a      	cmp	r2, r3
 800864e:	d206      	bcs.n	800865e <prvInsertTimerInActiveList+0x62>
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	429a      	cmp	r2, r3
 8008656:	d302      	bcc.n	800865e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008658:	2301      	movs	r3, #1
 800865a:	617b      	str	r3, [r7, #20]
 800865c:	e007      	b.n	800866e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800865e:	4b07      	ldr	r3, [pc, #28]	; (800867c <prvInsertTimerInActiveList+0x80>)
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	3304      	adds	r3, #4
 8008666:	4619      	mov	r1, r3
 8008668:	4610      	mov	r0, r2
 800866a:	f7fd fc24 	bl	8005eb6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800866e:	697b      	ldr	r3, [r7, #20]
}
 8008670:	4618      	mov	r0, r3
 8008672:	3718      	adds	r7, #24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	2000141c 	.word	0x2000141c
 800867c:	20001418 	.word	0x20001418

08008680 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b08e      	sub	sp, #56	; 0x38
 8008684:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008686:	e0ca      	b.n	800881e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	da18      	bge.n	80086c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800868e:	1d3b      	adds	r3, r7, #4
 8008690:	3304      	adds	r3, #4
 8008692:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10a      	bne.n	80086b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800869a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	61fb      	str	r3, [r7, #28]
}
 80086ac:	bf00      	nop
 80086ae:	e7fe      	b.n	80086ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80086b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086b6:	6850      	ldr	r0, [r2, #4]
 80086b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086ba:	6892      	ldr	r2, [r2, #8]
 80086bc:	4611      	mov	r1, r2
 80086be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f2c0 80aa 	blt.w	800881c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80086cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ce:	695b      	ldr	r3, [r3, #20]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d004      	beq.n	80086de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d6:	3304      	adds	r3, #4
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fd fc25 	bl	8005f28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086de:	463b      	mov	r3, r7
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7ff ff6b 	bl	80085bc <prvSampleTimeNow>
 80086e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2b09      	cmp	r3, #9
 80086ec:	f200 8097 	bhi.w	800881e <prvProcessReceivedCommands+0x19e>
 80086f0:	a201      	add	r2, pc, #4	; (adr r2, 80086f8 <prvProcessReceivedCommands+0x78>)
 80086f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f6:	bf00      	nop
 80086f8:	08008721 	.word	0x08008721
 80086fc:	08008721 	.word	0x08008721
 8008700:	08008721 	.word	0x08008721
 8008704:	08008795 	.word	0x08008795
 8008708:	080087a9 	.word	0x080087a9
 800870c:	080087f3 	.word	0x080087f3
 8008710:	08008721 	.word	0x08008721
 8008714:	08008721 	.word	0x08008721
 8008718:	08008795 	.word	0x08008795
 800871c:	080087a9 	.word	0x080087a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008722:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008726:	f043 0301 	orr.w	r3, r3, #1
 800872a:	b2da      	uxtb	r2, r3
 800872c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008736:	699b      	ldr	r3, [r3, #24]
 8008738:	18d1      	adds	r1, r2, r3
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800873e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008740:	f7ff ff5c 	bl	80085fc <prvInsertTimerInActiveList>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d069      	beq.n	800881e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800874a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008750:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008758:	f003 0304 	and.w	r3, r3, #4
 800875c:	2b00      	cmp	r3, #0
 800875e:	d05e      	beq.n	800881e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008764:	699b      	ldr	r3, [r3, #24]
 8008766:	441a      	add	r2, r3
 8008768:	2300      	movs	r3, #0
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	2300      	movs	r3, #0
 800876e:	2100      	movs	r1, #0
 8008770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008772:	f7ff fe05 	bl	8008380 <xTimerGenericCommand>
 8008776:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d14f      	bne.n	800881e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	61bb      	str	r3, [r7, #24]
}
 8008790:	bf00      	nop
 8008792:	e7fe      	b.n	8008792 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800879a:	f023 0301 	bic.w	r3, r3, #1
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80087a6:	e03a      	b.n	800881e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087ae:	f043 0301 	orr.w	r3, r3, #1
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80087c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c2:	699b      	ldr	r3, [r3, #24]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d10a      	bne.n	80087de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80087c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087cc:	f383 8811 	msr	BASEPRI, r3
 80087d0:	f3bf 8f6f 	isb	sy
 80087d4:	f3bf 8f4f 	dsb	sy
 80087d8:	617b      	str	r3, [r7, #20]
}
 80087da:	bf00      	nop
 80087dc:	e7fe      	b.n	80087dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e0:	699a      	ldr	r2, [r3, #24]
 80087e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e4:	18d1      	adds	r1, r2, r3
 80087e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087ec:	f7ff ff06 	bl	80085fc <prvInsertTimerInActiveList>
					break;
 80087f0:	e015      	b.n	800881e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80087f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087f8:	f003 0302 	and.w	r3, r3, #2
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d103      	bne.n	8008808 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008802:	f000 fbdd 	bl	8008fc0 <vPortFree>
 8008806:	e00a      	b.n	800881e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800880e:	f023 0301 	bic.w	r3, r3, #1
 8008812:	b2da      	uxtb	r2, r3
 8008814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800881a:	e000      	b.n	800881e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800881c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800881e:	4b08      	ldr	r3, [pc, #32]	; (8008840 <prvProcessReceivedCommands+0x1c0>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	1d39      	adds	r1, r7, #4
 8008824:	2200      	movs	r2, #0
 8008826:	4618      	mov	r0, r3
 8008828:	f7fe f82c 	bl	8006884 <xQueueReceive>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	f47f af2a 	bne.w	8008688 <prvProcessReceivedCommands+0x8>
	}
}
 8008834:	bf00      	nop
 8008836:	bf00      	nop
 8008838:	3730      	adds	r7, #48	; 0x30
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	20001420 	.word	0x20001420

08008844 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b088      	sub	sp, #32
 8008848:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800884a:	e048      	b.n	80088de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800884c:	4b2d      	ldr	r3, [pc, #180]	; (8008904 <prvSwitchTimerLists+0xc0>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008856:	4b2b      	ldr	r3, [pc, #172]	; (8008904 <prvSwitchTimerLists+0xc0>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	3304      	adds	r3, #4
 8008864:	4618      	mov	r0, r3
 8008866:	f7fd fb5f 	bl	8005f28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008878:	f003 0304 	and.w	r3, r3, #4
 800887c:	2b00      	cmp	r3, #0
 800887e:	d02e      	beq.n	80088de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	4413      	add	r3, r2
 8008888:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	429a      	cmp	r2, r3
 8008890:	d90e      	bls.n	80088b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800889e:	4b19      	ldr	r3, [pc, #100]	; (8008904 <prvSwitchTimerLists+0xc0>)
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	3304      	adds	r3, #4
 80088a6:	4619      	mov	r1, r3
 80088a8:	4610      	mov	r0, r2
 80088aa:	f7fd fb04 	bl	8005eb6 <vListInsert>
 80088ae:	e016      	b.n	80088de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088b0:	2300      	movs	r3, #0
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	2300      	movs	r3, #0
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	2100      	movs	r1, #0
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f7ff fd60 	bl	8008380 <xTimerGenericCommand>
 80088c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10a      	bne.n	80088de <prvSwitchTimerLists+0x9a>
	__asm volatile
 80088c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088cc:	f383 8811 	msr	BASEPRI, r3
 80088d0:	f3bf 8f6f 	isb	sy
 80088d4:	f3bf 8f4f 	dsb	sy
 80088d8:	603b      	str	r3, [r7, #0]
}
 80088da:	bf00      	nop
 80088dc:	e7fe      	b.n	80088dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088de:	4b09      	ldr	r3, [pc, #36]	; (8008904 <prvSwitchTimerLists+0xc0>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1b1      	bne.n	800884c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088e8:	4b06      	ldr	r3, [pc, #24]	; (8008904 <prvSwitchTimerLists+0xc0>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80088ee:	4b06      	ldr	r3, [pc, #24]	; (8008908 <prvSwitchTimerLists+0xc4>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a04      	ldr	r2, [pc, #16]	; (8008904 <prvSwitchTimerLists+0xc0>)
 80088f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088f6:	4a04      	ldr	r2, [pc, #16]	; (8008908 <prvSwitchTimerLists+0xc4>)
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	6013      	str	r3, [r2, #0]
}
 80088fc:	bf00      	nop
 80088fe:	3718      	adds	r7, #24
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	20001418 	.word	0x20001418
 8008908:	2000141c 	.word	0x2000141c

0800890c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008912:	f000 f967 	bl	8008be4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008916:	4b15      	ldr	r3, [pc, #84]	; (800896c <prvCheckForValidListAndQueue+0x60>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d120      	bne.n	8008960 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800891e:	4814      	ldr	r0, [pc, #80]	; (8008970 <prvCheckForValidListAndQueue+0x64>)
 8008920:	f7fd fa78 	bl	8005e14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008924:	4813      	ldr	r0, [pc, #76]	; (8008974 <prvCheckForValidListAndQueue+0x68>)
 8008926:	f7fd fa75 	bl	8005e14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800892a:	4b13      	ldr	r3, [pc, #76]	; (8008978 <prvCheckForValidListAndQueue+0x6c>)
 800892c:	4a10      	ldr	r2, [pc, #64]	; (8008970 <prvCheckForValidListAndQueue+0x64>)
 800892e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008930:	4b12      	ldr	r3, [pc, #72]	; (800897c <prvCheckForValidListAndQueue+0x70>)
 8008932:	4a10      	ldr	r2, [pc, #64]	; (8008974 <prvCheckForValidListAndQueue+0x68>)
 8008934:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008936:	2300      	movs	r3, #0
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	4b11      	ldr	r3, [pc, #68]	; (8008980 <prvCheckForValidListAndQueue+0x74>)
 800893c:	4a11      	ldr	r2, [pc, #68]	; (8008984 <prvCheckForValidListAndQueue+0x78>)
 800893e:	2110      	movs	r1, #16
 8008940:	200a      	movs	r0, #10
 8008942:	f7fd fb83 	bl	800604c <xQueueGenericCreateStatic>
 8008946:	4603      	mov	r3, r0
 8008948:	4a08      	ldr	r2, [pc, #32]	; (800896c <prvCheckForValidListAndQueue+0x60>)
 800894a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800894c:	4b07      	ldr	r3, [pc, #28]	; (800896c <prvCheckForValidListAndQueue+0x60>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d005      	beq.n	8008960 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008954:	4b05      	ldr	r3, [pc, #20]	; (800896c <prvCheckForValidListAndQueue+0x60>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	490b      	ldr	r1, [pc, #44]	; (8008988 <prvCheckForValidListAndQueue+0x7c>)
 800895a:	4618      	mov	r0, r3
 800895c:	f7fe fb86 	bl	800706c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008960:	f000 f970 	bl	8008c44 <vPortExitCritical>
}
 8008964:	bf00      	nop
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	20001420 	.word	0x20001420
 8008970:	200013f0 	.word	0x200013f0
 8008974:	20001404 	.word	0x20001404
 8008978:	20001418 	.word	0x20001418
 800897c:	2000141c 	.word	0x2000141c
 8008980:	200014cc 	.word	0x200014cc
 8008984:	2000142c 	.word	0x2000142c
 8008988:	0801b9d8 	.word	0x0801b9d8

0800898c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	3b04      	subs	r3, #4
 800899c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80089a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	3b04      	subs	r3, #4
 80089aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	f023 0201 	bic.w	r2, r3, #1
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	3b04      	subs	r3, #4
 80089ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80089bc:	4a0c      	ldr	r2, [pc, #48]	; (80089f0 <pxPortInitialiseStack+0x64>)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	3b14      	subs	r3, #20
 80089c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	3b04      	subs	r3, #4
 80089d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f06f 0202 	mvn.w	r2, #2
 80089da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3b20      	subs	r3, #32
 80089e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089e2:	68fb      	ldr	r3, [r7, #12]
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr
 80089f0:	080089f5 	.word	0x080089f5

080089f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089fa:	2300      	movs	r3, #0
 80089fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089fe:	4b12      	ldr	r3, [pc, #72]	; (8008a48 <prvTaskExitError+0x54>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a06:	d00a      	beq.n	8008a1e <prvTaskExitError+0x2a>
	__asm volatile
 8008a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0c:	f383 8811 	msr	BASEPRI, r3
 8008a10:	f3bf 8f6f 	isb	sy
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	60fb      	str	r3, [r7, #12]
}
 8008a1a:	bf00      	nop
 8008a1c:	e7fe      	b.n	8008a1c <prvTaskExitError+0x28>
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	60bb      	str	r3, [r7, #8]
}
 8008a30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a32:	bf00      	nop
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d0fc      	beq.n	8008a34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a3a:	bf00      	nop
 8008a3c:	bf00      	nop
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr
 8008a48:	2000000c 	.word	0x2000000c
 8008a4c:	00000000 	.word	0x00000000

08008a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a50:	4b07      	ldr	r3, [pc, #28]	; (8008a70 <pxCurrentTCBConst2>)
 8008a52:	6819      	ldr	r1, [r3, #0]
 8008a54:	6808      	ldr	r0, [r1, #0]
 8008a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5a:	f380 8809 	msr	PSP, r0
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f04f 0000 	mov.w	r0, #0
 8008a66:	f380 8811 	msr	BASEPRI, r0
 8008a6a:	4770      	bx	lr
 8008a6c:	f3af 8000 	nop.w

08008a70 <pxCurrentTCBConst2>:
 8008a70:	20000ef0 	.word	0x20000ef0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a74:	bf00      	nop
 8008a76:	bf00      	nop

08008a78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a78:	4808      	ldr	r0, [pc, #32]	; (8008a9c <prvPortStartFirstTask+0x24>)
 8008a7a:	6800      	ldr	r0, [r0, #0]
 8008a7c:	6800      	ldr	r0, [r0, #0]
 8008a7e:	f380 8808 	msr	MSP, r0
 8008a82:	f04f 0000 	mov.w	r0, #0
 8008a86:	f380 8814 	msr	CONTROL, r0
 8008a8a:	b662      	cpsie	i
 8008a8c:	b661      	cpsie	f
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	df00      	svc	0
 8008a98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a9a:	bf00      	nop
 8008a9c:	e000ed08 	.word	0xe000ed08

08008aa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008aa6:	4b46      	ldr	r3, [pc, #280]	; (8008bc0 <xPortStartScheduler+0x120>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a46      	ldr	r2, [pc, #280]	; (8008bc4 <xPortStartScheduler+0x124>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d10a      	bne.n	8008ac6 <xPortStartScheduler+0x26>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	613b      	str	r3, [r7, #16]
}
 8008ac2:	bf00      	nop
 8008ac4:	e7fe      	b.n	8008ac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ac6:	4b3e      	ldr	r3, [pc, #248]	; (8008bc0 <xPortStartScheduler+0x120>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a3f      	ldr	r2, [pc, #252]	; (8008bc8 <xPortStartScheduler+0x128>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d10a      	bne.n	8008ae6 <xPortStartScheduler+0x46>
	__asm volatile
 8008ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad4:	f383 8811 	msr	BASEPRI, r3
 8008ad8:	f3bf 8f6f 	isb	sy
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	60fb      	str	r3, [r7, #12]
}
 8008ae2:	bf00      	nop
 8008ae4:	e7fe      	b.n	8008ae4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ae6:	4b39      	ldr	r3, [pc, #228]	; (8008bcc <xPortStartScheduler+0x12c>)
 8008ae8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	22ff      	movs	r2, #255	; 0xff
 8008af6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	4b31      	ldr	r3, [pc, #196]	; (8008bd0 <xPortStartScheduler+0x130>)
 8008b0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b0e:	4b31      	ldr	r3, [pc, #196]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b10:	2207      	movs	r2, #7
 8008b12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b14:	e009      	b.n	8008b2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008b16:	4b2f      	ldr	r3, [pc, #188]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	4a2d      	ldr	r2, [pc, #180]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b20:	78fb      	ldrb	r3, [r7, #3]
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	005b      	lsls	r3, r3, #1
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b2a:	78fb      	ldrb	r3, [r7, #3]
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b32:	2b80      	cmp	r3, #128	; 0x80
 8008b34:	d0ef      	beq.n	8008b16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b36:	4b27      	ldr	r3, [pc, #156]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f1c3 0307 	rsb	r3, r3, #7
 8008b3e:	2b04      	cmp	r3, #4
 8008b40:	d00a      	beq.n	8008b58 <xPortStartScheduler+0xb8>
	__asm volatile
 8008b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b46:	f383 8811 	msr	BASEPRI, r3
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	60bb      	str	r3, [r7, #8]
}
 8008b54:	bf00      	nop
 8008b56:	e7fe      	b.n	8008b56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b58:	4b1e      	ldr	r3, [pc, #120]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	021b      	lsls	r3, r3, #8
 8008b5e:	4a1d      	ldr	r2, [pc, #116]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b62:	4b1c      	ldr	r3, [pc, #112]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b6a:	4a1a      	ldr	r2, [pc, #104]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b76:	4b18      	ldr	r3, [pc, #96]	; (8008bd8 <xPortStartScheduler+0x138>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a17      	ldr	r2, [pc, #92]	; (8008bd8 <xPortStartScheduler+0x138>)
 8008b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b82:	4b15      	ldr	r3, [pc, #84]	; (8008bd8 <xPortStartScheduler+0x138>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a14      	ldr	r2, [pc, #80]	; (8008bd8 <xPortStartScheduler+0x138>)
 8008b88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b8e:	f000 f8dd 	bl	8008d4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b92:	4b12      	ldr	r3, [pc, #72]	; (8008bdc <xPortStartScheduler+0x13c>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b98:	f000 f8fc 	bl	8008d94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b9c:	4b10      	ldr	r3, [pc, #64]	; (8008be0 <xPortStartScheduler+0x140>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a0f      	ldr	r2, [pc, #60]	; (8008be0 <xPortStartScheduler+0x140>)
 8008ba2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008ba6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ba8:	f7ff ff66 	bl	8008a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008bac:	f7fe ff3c 	bl	8007a28 <vTaskSwitchContext>
	prvTaskExitError();
 8008bb0:	f7ff ff20 	bl	80089f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3718      	adds	r7, #24
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	e000ed00 	.word	0xe000ed00
 8008bc4:	410fc271 	.word	0x410fc271
 8008bc8:	410fc270 	.word	0x410fc270
 8008bcc:	e000e400 	.word	0xe000e400
 8008bd0:	2000151c 	.word	0x2000151c
 8008bd4:	20001520 	.word	0x20001520
 8008bd8:	e000ed20 	.word	0xe000ed20
 8008bdc:	2000000c 	.word	0x2000000c
 8008be0:	e000ef34 	.word	0xe000ef34

08008be4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
	__asm volatile
 8008bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	607b      	str	r3, [r7, #4]
}
 8008bfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008bfe:	4b0f      	ldr	r3, [pc, #60]	; (8008c3c <vPortEnterCritical+0x58>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	3301      	adds	r3, #1
 8008c04:	4a0d      	ldr	r2, [pc, #52]	; (8008c3c <vPortEnterCritical+0x58>)
 8008c06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c08:	4b0c      	ldr	r3, [pc, #48]	; (8008c3c <vPortEnterCritical+0x58>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d10f      	bne.n	8008c30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c10:	4b0b      	ldr	r3, [pc, #44]	; (8008c40 <vPortEnterCritical+0x5c>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00a      	beq.n	8008c30 <vPortEnterCritical+0x4c>
	__asm volatile
 8008c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1e:	f383 8811 	msr	BASEPRI, r3
 8008c22:	f3bf 8f6f 	isb	sy
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	603b      	str	r3, [r7, #0]
}
 8008c2c:	bf00      	nop
 8008c2e:	e7fe      	b.n	8008c2e <vPortEnterCritical+0x4a>
	}
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr
 8008c3c:	2000000c 	.word	0x2000000c
 8008c40:	e000ed04 	.word	0xe000ed04

08008c44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c4a:	4b12      	ldr	r3, [pc, #72]	; (8008c94 <vPortExitCritical+0x50>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10a      	bne.n	8008c68 <vPortExitCritical+0x24>
	__asm volatile
 8008c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	607b      	str	r3, [r7, #4]
}
 8008c64:	bf00      	nop
 8008c66:	e7fe      	b.n	8008c66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c68:	4b0a      	ldr	r3, [pc, #40]	; (8008c94 <vPortExitCritical+0x50>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	4a09      	ldr	r2, [pc, #36]	; (8008c94 <vPortExitCritical+0x50>)
 8008c70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c72:	4b08      	ldr	r3, [pc, #32]	; (8008c94 <vPortExitCritical+0x50>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d105      	bne.n	8008c86 <vPortExitCritical+0x42>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	f383 8811 	msr	BASEPRI, r3
}
 8008c84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c86:	bf00      	nop
 8008c88:	370c      	adds	r7, #12
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	2000000c 	.word	0x2000000c
	...

08008ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ca0:	f3ef 8009 	mrs	r0, PSP
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	4b15      	ldr	r3, [pc, #84]	; (8008d00 <pxCurrentTCBConst>)
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	f01e 0f10 	tst.w	lr, #16
 8008cb0:	bf08      	it	eq
 8008cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cba:	6010      	str	r0, [r2, #0]
 8008cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008cc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008cc4:	f380 8811 	msr	BASEPRI, r0
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f7fe feaa 	bl	8007a28 <vTaskSwitchContext>
 8008cd4:	f04f 0000 	mov.w	r0, #0
 8008cd8:	f380 8811 	msr	BASEPRI, r0
 8008cdc:	bc09      	pop	{r0, r3}
 8008cde:	6819      	ldr	r1, [r3, #0]
 8008ce0:	6808      	ldr	r0, [r1, #0]
 8008ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce6:	f01e 0f10 	tst.w	lr, #16
 8008cea:	bf08      	it	eq
 8008cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008cf0:	f380 8809 	msr	PSP, r0
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	f3af 8000 	nop.w

08008d00 <pxCurrentTCBConst>:
 8008d00:	20000ef0 	.word	0x20000ef0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d04:	bf00      	nop
 8008d06:	bf00      	nop

08008d08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d12:	f383 8811 	msr	BASEPRI, r3
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	607b      	str	r3, [r7, #4]
}
 8008d20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d22:	f7fe fdc7 	bl	80078b4 <xTaskIncrementTick>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d003      	beq.n	8008d34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d2c:	4b06      	ldr	r3, [pc, #24]	; (8008d48 <xPortSysTickHandler+0x40>)
 8008d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	2300      	movs	r3, #0
 8008d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	f383 8811 	msr	BASEPRI, r3
}
 8008d3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d40:	bf00      	nop
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	e000ed04 	.word	0xe000ed04

08008d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d50:	4b0b      	ldr	r3, [pc, #44]	; (8008d80 <vPortSetupTimerInterrupt+0x34>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d56:	4b0b      	ldr	r3, [pc, #44]	; (8008d84 <vPortSetupTimerInterrupt+0x38>)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d5c:	4b0a      	ldr	r3, [pc, #40]	; (8008d88 <vPortSetupTimerInterrupt+0x3c>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a0a      	ldr	r2, [pc, #40]	; (8008d8c <vPortSetupTimerInterrupt+0x40>)
 8008d62:	fba2 2303 	umull	r2, r3, r2, r3
 8008d66:	099b      	lsrs	r3, r3, #6
 8008d68:	4a09      	ldr	r2, [pc, #36]	; (8008d90 <vPortSetupTimerInterrupt+0x44>)
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d6e:	4b04      	ldr	r3, [pc, #16]	; (8008d80 <vPortSetupTimerInterrupt+0x34>)
 8008d70:	2207      	movs	r2, #7
 8008d72:	601a      	str	r2, [r3, #0]
}
 8008d74:	bf00      	nop
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	e000e010 	.word	0xe000e010
 8008d84:	e000e018 	.word	0xe000e018
 8008d88:	20000000 	.word	0x20000000
 8008d8c:	10624dd3 	.word	0x10624dd3
 8008d90:	e000e014 	.word	0xe000e014

08008d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008da4 <vPortEnableVFP+0x10>
 8008d98:	6801      	ldr	r1, [r0, #0]
 8008d9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d9e:	6001      	str	r1, [r0, #0]
 8008da0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008da2:	bf00      	nop
 8008da4:	e000ed88 	.word	0xe000ed88

08008da8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008dae:	f3ef 8305 	mrs	r3, IPSR
 8008db2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2b0f      	cmp	r3, #15
 8008db8:	d914      	bls.n	8008de4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008dba:	4a17      	ldr	r2, [pc, #92]	; (8008e18 <vPortValidateInterruptPriority+0x70>)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008dc4:	4b15      	ldr	r3, [pc, #84]	; (8008e1c <vPortValidateInterruptPriority+0x74>)
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	7afa      	ldrb	r2, [r7, #11]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d20a      	bcs.n	8008de4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	607b      	str	r3, [r7, #4]
}
 8008de0:	bf00      	nop
 8008de2:	e7fe      	b.n	8008de2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008de4:	4b0e      	ldr	r3, [pc, #56]	; (8008e20 <vPortValidateInterruptPriority+0x78>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008dec:	4b0d      	ldr	r3, [pc, #52]	; (8008e24 <vPortValidateInterruptPriority+0x7c>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d90a      	bls.n	8008e0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df8:	f383 8811 	msr	BASEPRI, r3
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	603b      	str	r3, [r7, #0]
}
 8008e06:	bf00      	nop
 8008e08:	e7fe      	b.n	8008e08 <vPortValidateInterruptPriority+0x60>
	}
 8008e0a:	bf00      	nop
 8008e0c:	3714      	adds	r7, #20
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	e000e3f0 	.word	0xe000e3f0
 8008e1c:	2000151c 	.word	0x2000151c
 8008e20:	e000ed0c 	.word	0xe000ed0c
 8008e24:	20001520 	.word	0x20001520

08008e28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b08a      	sub	sp, #40	; 0x28
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e30:	2300      	movs	r3, #0
 8008e32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e34:	f7fe fc70 	bl	8007718 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e38:	4b5b      	ldr	r3, [pc, #364]	; (8008fa8 <pvPortMalloc+0x180>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d101      	bne.n	8008e44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e40:	f000 f920 	bl	8009084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e44:	4b59      	ldr	r3, [pc, #356]	; (8008fac <pvPortMalloc+0x184>)
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f040 8093 	bne.w	8008f78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d01d      	beq.n	8008e94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008e58:	2208      	movs	r2, #8
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f003 0307 	and.w	r3, r3, #7
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d014      	beq.n	8008e94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f023 0307 	bic.w	r3, r3, #7
 8008e70:	3308      	adds	r3, #8
 8008e72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f003 0307 	and.w	r3, r3, #7
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00a      	beq.n	8008e94 <pvPortMalloc+0x6c>
	__asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	617b      	str	r3, [r7, #20]
}
 8008e90:	bf00      	nop
 8008e92:	e7fe      	b.n	8008e92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d06e      	beq.n	8008f78 <pvPortMalloc+0x150>
 8008e9a:	4b45      	ldr	r3, [pc, #276]	; (8008fb0 <pvPortMalloc+0x188>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d869      	bhi.n	8008f78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ea4:	4b43      	ldr	r3, [pc, #268]	; (8008fb4 <pvPortMalloc+0x18c>)
 8008ea6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ea8:	4b42      	ldr	r3, [pc, #264]	; (8008fb4 <pvPortMalloc+0x18c>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008eae:	e004      	b.n	8008eba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d903      	bls.n	8008ecc <pvPortMalloc+0xa4>
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d1f1      	bne.n	8008eb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ecc:	4b36      	ldr	r3, [pc, #216]	; (8008fa8 <pvPortMalloc+0x180>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d050      	beq.n	8008f78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ed6:	6a3b      	ldr	r3, [r7, #32]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2208      	movs	r2, #8
 8008edc:	4413      	add	r3, r2
 8008ede:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	6a3b      	ldr	r3, [r7, #32]
 8008ee6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	1ad2      	subs	r2, r2, r3
 8008ef0:	2308      	movs	r3, #8
 8008ef2:	005b      	lsls	r3, r3, #1
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d91f      	bls.n	8008f38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4413      	add	r3, r2
 8008efe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	f003 0307 	and.w	r3, r3, #7
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00a      	beq.n	8008f20 <pvPortMalloc+0xf8>
	__asm volatile
 8008f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0e:	f383 8811 	msr	BASEPRI, r3
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	f3bf 8f4f 	dsb	sy
 8008f1a:	613b      	str	r3, [r7, #16]
}
 8008f1c:	bf00      	nop
 8008f1e:	e7fe      	b.n	8008f1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f22:	685a      	ldr	r2, [r3, #4]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	1ad2      	subs	r2, r2, r3
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f32:	69b8      	ldr	r0, [r7, #24]
 8008f34:	f000 f908 	bl	8009148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f38:	4b1d      	ldr	r3, [pc, #116]	; (8008fb0 <pvPortMalloc+0x188>)
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	4a1b      	ldr	r2, [pc, #108]	; (8008fb0 <pvPortMalloc+0x188>)
 8008f44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f46:	4b1a      	ldr	r3, [pc, #104]	; (8008fb0 <pvPortMalloc+0x188>)
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	4b1b      	ldr	r3, [pc, #108]	; (8008fb8 <pvPortMalloc+0x190>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d203      	bcs.n	8008f5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f52:	4b17      	ldr	r3, [pc, #92]	; (8008fb0 <pvPortMalloc+0x188>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a18      	ldr	r2, [pc, #96]	; (8008fb8 <pvPortMalloc+0x190>)
 8008f58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5c:	685a      	ldr	r2, [r3, #4]
 8008f5e:	4b13      	ldr	r3, [pc, #76]	; (8008fac <pvPortMalloc+0x184>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	431a      	orrs	r2, r3
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f6e:	4b13      	ldr	r3, [pc, #76]	; (8008fbc <pvPortMalloc+0x194>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3301      	adds	r3, #1
 8008f74:	4a11      	ldr	r2, [pc, #68]	; (8008fbc <pvPortMalloc+0x194>)
 8008f76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f78:	f7fe fbdc 	bl	8007734 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	f003 0307 	and.w	r3, r3, #7
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00a      	beq.n	8008f9c <pvPortMalloc+0x174>
	__asm volatile
 8008f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8a:	f383 8811 	msr	BASEPRI, r3
 8008f8e:	f3bf 8f6f 	isb	sy
 8008f92:	f3bf 8f4f 	dsb	sy
 8008f96:	60fb      	str	r3, [r7, #12]
}
 8008f98:	bf00      	nop
 8008f9a:	e7fe      	b.n	8008f9a <pvPortMalloc+0x172>
	return pvReturn;
 8008f9c:	69fb      	ldr	r3, [r7, #28]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3728      	adds	r7, #40	; 0x28
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	2000b16c 	.word	0x2000b16c
 8008fac:	2000b180 	.word	0x2000b180
 8008fb0:	2000b170 	.word	0x2000b170
 8008fb4:	2000b164 	.word	0x2000b164
 8008fb8:	2000b174 	.word	0x2000b174
 8008fbc:	2000b178 	.word	0x2000b178

08008fc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d04d      	beq.n	800906e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008fd2:	2308      	movs	r3, #8
 8008fd4:	425b      	negs	r3, r3
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	4413      	add	r3, r2
 8008fda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	685a      	ldr	r2, [r3, #4]
 8008fe4:	4b24      	ldr	r3, [pc, #144]	; (8009078 <vPortFree+0xb8>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4013      	ands	r3, r2
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10a      	bne.n	8009004 <vPortFree+0x44>
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	60fb      	str	r3, [r7, #12]
}
 8009000:	bf00      	nop
 8009002:	e7fe      	b.n	8009002 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00a      	beq.n	8009022 <vPortFree+0x62>
	__asm volatile
 800900c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009010:	f383 8811 	msr	BASEPRI, r3
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	60bb      	str	r3, [r7, #8]
}
 800901e:	bf00      	nop
 8009020:	e7fe      	b.n	8009020 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	685a      	ldr	r2, [r3, #4]
 8009026:	4b14      	ldr	r3, [pc, #80]	; (8009078 <vPortFree+0xb8>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4013      	ands	r3, r2
 800902c:	2b00      	cmp	r3, #0
 800902e:	d01e      	beq.n	800906e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d11a      	bne.n	800906e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	685a      	ldr	r2, [r3, #4]
 800903c:	4b0e      	ldr	r3, [pc, #56]	; (8009078 <vPortFree+0xb8>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	43db      	mvns	r3, r3
 8009042:	401a      	ands	r2, r3
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009048:	f7fe fb66 	bl	8007718 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	685a      	ldr	r2, [r3, #4]
 8009050:	4b0a      	ldr	r3, [pc, #40]	; (800907c <vPortFree+0xbc>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4413      	add	r3, r2
 8009056:	4a09      	ldr	r2, [pc, #36]	; (800907c <vPortFree+0xbc>)
 8009058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800905a:	6938      	ldr	r0, [r7, #16]
 800905c:	f000 f874 	bl	8009148 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009060:	4b07      	ldr	r3, [pc, #28]	; (8009080 <vPortFree+0xc0>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3301      	adds	r3, #1
 8009066:	4a06      	ldr	r2, [pc, #24]	; (8009080 <vPortFree+0xc0>)
 8009068:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800906a:	f7fe fb63 	bl	8007734 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800906e:	bf00      	nop
 8009070:	3718      	adds	r7, #24
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	2000b180 	.word	0x2000b180
 800907c:	2000b170 	.word	0x2000b170
 8009080:	2000b17c 	.word	0x2000b17c

08009084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800908a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800908e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009090:	4b27      	ldr	r3, [pc, #156]	; (8009130 <prvHeapInit+0xac>)
 8009092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f003 0307 	and.w	r3, r3, #7
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00c      	beq.n	80090b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	3307      	adds	r3, #7
 80090a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f023 0307 	bic.w	r3, r3, #7
 80090aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	1ad3      	subs	r3, r2, r3
 80090b2:	4a1f      	ldr	r2, [pc, #124]	; (8009130 <prvHeapInit+0xac>)
 80090b4:	4413      	add	r3, r2
 80090b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090bc:	4a1d      	ldr	r2, [pc, #116]	; (8009134 <prvHeapInit+0xb0>)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090c2:	4b1c      	ldr	r3, [pc, #112]	; (8009134 <prvHeapInit+0xb0>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	4413      	add	r3, r2
 80090ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090d0:	2208      	movs	r2, #8
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	1a9b      	subs	r3, r3, r2
 80090d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f023 0307 	bic.w	r3, r3, #7
 80090de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	4a15      	ldr	r2, [pc, #84]	; (8009138 <prvHeapInit+0xb4>)
 80090e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090e6:	4b14      	ldr	r3, [pc, #80]	; (8009138 <prvHeapInit+0xb4>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2200      	movs	r2, #0
 80090ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090ee:	4b12      	ldr	r3, [pc, #72]	; (8009138 <prvHeapInit+0xb4>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2200      	movs	r2, #0
 80090f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	1ad2      	subs	r2, r2, r3
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009104:	4b0c      	ldr	r3, [pc, #48]	; (8009138 <prvHeapInit+0xb4>)
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	4a0a      	ldr	r2, [pc, #40]	; (800913c <prvHeapInit+0xb8>)
 8009112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	4a09      	ldr	r2, [pc, #36]	; (8009140 <prvHeapInit+0xbc>)
 800911a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800911c:	4b09      	ldr	r3, [pc, #36]	; (8009144 <prvHeapInit+0xc0>)
 800911e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009122:	601a      	str	r2, [r3, #0]
}
 8009124:	bf00      	nop
 8009126:	3714      	adds	r7, #20
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr
 8009130:	20001524 	.word	0x20001524
 8009134:	2000b164 	.word	0x2000b164
 8009138:	2000b16c 	.word	0x2000b16c
 800913c:	2000b174 	.word	0x2000b174
 8009140:	2000b170 	.word	0x2000b170
 8009144:	2000b180 	.word	0x2000b180

08009148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009150:	4b28      	ldr	r3, [pc, #160]	; (80091f4 <prvInsertBlockIntoFreeList+0xac>)
 8009152:	60fb      	str	r3, [r7, #12]
 8009154:	e002      	b.n	800915c <prvInsertBlockIntoFreeList+0x14>
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	60fb      	str	r3, [r7, #12]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	429a      	cmp	r2, r3
 8009164:	d8f7      	bhi.n	8009156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	4413      	add	r3, r2
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	429a      	cmp	r2, r3
 8009176:	d108      	bne.n	800918a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	685a      	ldr	r2, [r3, #4]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	441a      	add	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	68ba      	ldr	r2, [r7, #8]
 8009194:	441a      	add	r2, r3
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	429a      	cmp	r2, r3
 800919c:	d118      	bne.n	80091d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	4b15      	ldr	r3, [pc, #84]	; (80091f8 <prvInsertBlockIntoFreeList+0xb0>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d00d      	beq.n	80091c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	441a      	add	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	601a      	str	r2, [r3, #0]
 80091c4:	e008      	b.n	80091d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091c6:	4b0c      	ldr	r3, [pc, #48]	; (80091f8 <prvInsertBlockIntoFreeList+0xb0>)
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	601a      	str	r2, [r3, #0]
 80091ce:	e003      	b.n	80091d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d002      	beq.n	80091e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091e6:	bf00      	nop
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	2000b164 	.word	0x2000b164
 80091f8:	2000b16c 	.word	0x2000b16c

080091fc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	330c      	adds	r3, #12
 800920c:	461a      	mov	r2, r3
 800920e:	6839      	ldr	r1, [r7, #0]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f003 ff95 	bl	800d140 <tcpip_send_msg_wait_sem>
 8009216:	4603      	mov	r3, r0
 8009218:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800921a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d103      	bne.n	800922a <netconn_apimsg+0x2e>
    return apimsg->err;
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009228:	e001      	b.n	800922e <netconn_apimsg+0x32>
  }
  return err;
 800922a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
	...

08009238 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b08c      	sub	sp, #48	; 0x30
 800923c:	af00      	add	r7, sp, #0
 800923e:	4603      	mov	r3, r0
 8009240:	603a      	str	r2, [r7, #0]
 8009242:	71fb      	strb	r3, [r7, #7]
 8009244:	460b      	mov	r3, r1
 8009246:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009248:	79fb      	ldrb	r3, [r7, #7]
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	4618      	mov	r0, r3
 800924e:	f001 f9a3 	bl	800a598 <netconn_alloc>
 8009252:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8009254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009256:	2b00      	cmp	r3, #0
 8009258:	d054      	beq.n	8009304 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800925a:	79bb      	ldrb	r3, [r7, #6]
 800925c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800925e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009260:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8009262:	f107 0308 	add.w	r3, r7, #8
 8009266:	4619      	mov	r1, r3
 8009268:	4829      	ldr	r0, [pc, #164]	; (8009310 <netconn_new_with_proto_and_callback+0xd8>)
 800926a:	f7ff ffc7 	bl	80091fc <netconn_apimsg>
 800926e:	4603      	mov	r3, r0
 8009270:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8009274:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009278:	2b00      	cmp	r3, #0
 800927a:	d043      	beq.n	8009304 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800927c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d005      	beq.n	8009290 <netconn_new_with_proto_and_callback+0x58>
 8009284:	4b23      	ldr	r3, [pc, #140]	; (8009314 <netconn_new_with_proto_and_callback+0xdc>)
 8009286:	22a3      	movs	r2, #163	; 0xa3
 8009288:	4923      	ldr	r1, [pc, #140]	; (8009318 <netconn_new_with_proto_and_callback+0xe0>)
 800928a:	4824      	ldr	r0, [pc, #144]	; (800931c <netconn_new_with_proto_and_callback+0xe4>)
 800928c:	f011 fd5e 	bl	801ad4c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009292:	3310      	adds	r3, #16
 8009294:	4618      	mov	r0, r3
 8009296:	f00f f95d 	bl	8018554 <sys_mbox_valid>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d105      	bne.n	80092ac <netconn_new_with_proto_and_callback+0x74>
 80092a0:	4b1c      	ldr	r3, [pc, #112]	; (8009314 <netconn_new_with_proto_and_callback+0xdc>)
 80092a2:	22a4      	movs	r2, #164	; 0xa4
 80092a4:	491e      	ldr	r1, [pc, #120]	; (8009320 <netconn_new_with_proto_and_callback+0xe8>)
 80092a6:	481d      	ldr	r0, [pc, #116]	; (800931c <netconn_new_with_proto_and_callback+0xe4>)
 80092a8:	f011 fd50 	bl	801ad4c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80092ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ae:	3314      	adds	r3, #20
 80092b0:	4618      	mov	r0, r3
 80092b2:	f00f f94f 	bl	8018554 <sys_mbox_valid>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d005      	beq.n	80092c8 <netconn_new_with_proto_and_callback+0x90>
 80092bc:	4b15      	ldr	r3, [pc, #84]	; (8009314 <netconn_new_with_proto_and_callback+0xdc>)
 80092be:	22a6      	movs	r2, #166	; 0xa6
 80092c0:	4918      	ldr	r1, [pc, #96]	; (8009324 <netconn_new_with_proto_and_callback+0xec>)
 80092c2:	4816      	ldr	r0, [pc, #88]	; (800931c <netconn_new_with_proto_and_callback+0xe4>)
 80092c4:	f011 fd42 	bl	801ad4c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80092c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ca:	330c      	adds	r3, #12
 80092cc:	4618      	mov	r0, r3
 80092ce:	f00f f9cf 	bl	8018670 <sys_sem_valid>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d105      	bne.n	80092e4 <netconn_new_with_proto_and_callback+0xac>
 80092d8:	4b0e      	ldr	r3, [pc, #56]	; (8009314 <netconn_new_with_proto_and_callback+0xdc>)
 80092da:	22a9      	movs	r2, #169	; 0xa9
 80092dc:	4912      	ldr	r1, [pc, #72]	; (8009328 <netconn_new_with_proto_and_callback+0xf0>)
 80092de:	480f      	ldr	r0, [pc, #60]	; (800931c <netconn_new_with_proto_and_callback+0xe4>)
 80092e0:	f011 fd34 	bl	801ad4c <iprintf>
      sys_sem_free(&conn->op_completed);
 80092e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e6:	330c      	adds	r3, #12
 80092e8:	4618      	mov	r0, r3
 80092ea:	f00f f9b4 	bl	8018656 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80092ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f0:	3310      	adds	r3, #16
 80092f2:	4618      	mov	r0, r3
 80092f4:	f00f f8ba 	bl	801846c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80092f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092fa:	2007      	movs	r0, #7
 80092fc:	f004 fc88 	bl	800dc10 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009300:	2300      	movs	r3, #0
 8009302:	e000      	b.n	8009306 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009306:	4618      	mov	r0, r3
 8009308:	3730      	adds	r7, #48	; 0x30
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	0800a56d 	.word	0x0800a56d
 8009314:	0801b9e0 	.word	0x0801b9e0
 8009318:	0801ba14 	.word	0x0801ba14
 800931c:	0801ba38 	.word	0x0801ba38
 8009320:	0801ba60 	.word	0x0801ba60
 8009324:	0801ba78 	.word	0x0801ba78
 8009328:	0801ba9c 	.word	0x0801ba9c

0800932c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b08c      	sub	sp, #48	; 0x30
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d101      	bne.n	800933e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800933a:	2300      	movs	r3, #0
 800933c:	e014      	b.n	8009368 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009342:	2329      	movs	r3, #41	; 0x29
 8009344:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009346:	f107 030c 	add.w	r3, r7, #12
 800934a:	4619      	mov	r1, r3
 800934c:	4808      	ldr	r0, [pc, #32]	; (8009370 <netconn_prepare_delete+0x44>)
 800934e:	f7ff ff55 	bl	80091fc <netconn_apimsg>
 8009352:	4603      	mov	r3, r0
 8009354:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009358:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800935c:	2b00      	cmp	r3, #0
 800935e:	d002      	beq.n	8009366 <netconn_prepare_delete+0x3a>
    return err;
 8009360:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009364:	e000      	b.n	8009368 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3730      	adds	r7, #48	; 0x30
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	0800aad1 	.word	0x0800aad1

08009374 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d101      	bne.n	8009386 <netconn_delete+0x12>
    return ERR_OK;
 8009382:	2300      	movs	r3, #0
 8009384:	e00d      	b.n	80093a2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f7ff ffd0 	bl	800932c <netconn_prepare_delete>
 800938c:	4603      	mov	r3, r0
 800938e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8009390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d102      	bne.n	800939e <netconn_delete+0x2a>
    netconn_free(conn);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f001 f96b 	bl	800a674 <netconn_free>
  }
  return err;
 800939e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
	...

080093ac <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b08e      	sub	sp, #56	; 0x38
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	607a      	str	r2, [r7, #4]
 80093b8:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d109      	bne.n	80093d4 <netconn_getaddr+0x28>
 80093c0:	4b1d      	ldr	r3, [pc, #116]	; (8009438 <netconn_getaddr+0x8c>)
 80093c2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80093c6:	491d      	ldr	r1, [pc, #116]	; (800943c <netconn_getaddr+0x90>)
 80093c8:	481d      	ldr	r0, [pc, #116]	; (8009440 <netconn_getaddr+0x94>)
 80093ca:	f011 fcbf 	bl	801ad4c <iprintf>
 80093ce:	f06f 030f 	mvn.w	r3, #15
 80093d2:	e02d      	b.n	8009430 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d109      	bne.n	80093ee <netconn_getaddr+0x42>
 80093da:	4b17      	ldr	r3, [pc, #92]	; (8009438 <netconn_getaddr+0x8c>)
 80093dc:	f240 1213 	movw	r2, #275	; 0x113
 80093e0:	4918      	ldr	r1, [pc, #96]	; (8009444 <netconn_getaddr+0x98>)
 80093e2:	4817      	ldr	r0, [pc, #92]	; (8009440 <netconn_getaddr+0x94>)
 80093e4:	f011 fcb2 	bl	801ad4c <iprintf>
 80093e8:	f06f 030f 	mvn.w	r3, #15
 80093ec:	e020      	b.n	8009430 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d109      	bne.n	8009408 <netconn_getaddr+0x5c>
 80093f4:	4b10      	ldr	r3, [pc, #64]	; (8009438 <netconn_getaddr+0x8c>)
 80093f6:	f44f 728a 	mov.w	r2, #276	; 0x114
 80093fa:	4913      	ldr	r1, [pc, #76]	; (8009448 <netconn_getaddr+0x9c>)
 80093fc:	4810      	ldr	r0, [pc, #64]	; (8009440 <netconn_getaddr+0x94>)
 80093fe:	f011 fca5 	bl	801ad4c <iprintf>
 8009402:	f06f 030f 	mvn.w	r3, #15
 8009406:	e013      	b.n	8009430 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800940c:	78fb      	ldrb	r3, [r7, #3]
 800940e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800941a:	f107 0314 	add.w	r3, r7, #20
 800941e:	4619      	mov	r1, r3
 8009420:	480a      	ldr	r0, [pc, #40]	; (800944c <netconn_getaddr+0xa0>)
 8009422:	f7ff feeb 	bl	80091fc <netconn_apimsg>
 8009426:	4603      	mov	r3, r0
 8009428:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800942c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009430:	4618      	mov	r0, r3
 8009432:	3738      	adds	r7, #56	; 0x38
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}
 8009438:	0801b9e0 	.word	0x0801b9e0
 800943c:	0801bab8 	.word	0x0801bab8
 8009440:	0801ba38 	.word	0x0801ba38
 8009444:	0801bad8 	.word	0x0801bad8
 8009448:	0801baf8 	.word	0x0801baf8
 800944c:	0800b3f1 	.word	0x0800b3f1

08009450 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b08e      	sub	sp, #56	; 0x38
 8009454:	af00      	add	r7, sp, #0
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	4613      	mov	r3, r2
 800945c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d109      	bne.n	8009478 <netconn_bind+0x28>
 8009464:	4b11      	ldr	r3, [pc, #68]	; (80094ac <netconn_bind+0x5c>)
 8009466:	f44f 729c 	mov.w	r2, #312	; 0x138
 800946a:	4911      	ldr	r1, [pc, #68]	; (80094b0 <netconn_bind+0x60>)
 800946c:	4811      	ldr	r0, [pc, #68]	; (80094b4 <netconn_bind+0x64>)
 800946e:	f011 fc6d 	bl	801ad4c <iprintf>
 8009472:	f06f 030f 	mvn.w	r3, #15
 8009476:	e015      	b.n	80094a4 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d101      	bne.n	8009482 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800947e:	4b0e      	ldr	r3, [pc, #56]	; (80094b8 <netconn_bind+0x68>)
 8009480:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800948a:	88fb      	ldrh	r3, [r7, #6]
 800948c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800948e:	f107 0314 	add.w	r3, r7, #20
 8009492:	4619      	mov	r1, r3
 8009494:	4809      	ldr	r0, [pc, #36]	; (80094bc <netconn_bind+0x6c>)
 8009496:	f7ff feb1 	bl	80091fc <netconn_apimsg>
 800949a:	4603      	mov	r3, r0
 800949c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80094a0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3738      	adds	r7, #56	; 0x38
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	0801b9e0 	.word	0x0801b9e0
 80094b0:	0801bb18 	.word	0x0801bb18
 80094b4:	0801ba38 	.word	0x0801ba38
 80094b8:	0801f5e4 	.word	0x0801f5e4
 80094bc:	0800ac99 	.word	0x0800ac99

080094c0 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b08c      	sub	sp, #48	; 0x30
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	460b      	mov	r3, r1
 80094ca:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d109      	bne.n	80094e6 <netconn_listen_with_backlog+0x26>
 80094d2:	4b0d      	ldr	r3, [pc, #52]	; (8009508 <netconn_listen_with_backlog+0x48>)
 80094d4:	f240 12bb 	movw	r2, #443	; 0x1bb
 80094d8:	490c      	ldr	r1, [pc, #48]	; (800950c <netconn_listen_with_backlog+0x4c>)
 80094da:	480d      	ldr	r0, [pc, #52]	; (8009510 <netconn_listen_with_backlog+0x50>)
 80094dc:	f011 fc36 	bl	801ad4c <iprintf>
 80094e0:	f06f 030f 	mvn.w	r3, #15
 80094e4:	e00c      	b.n	8009500 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 80094ea:	f107 030c 	add.w	r3, r7, #12
 80094ee:	4619      	mov	r1, r3
 80094f0:	4808      	ldr	r0, [pc, #32]	; (8009514 <netconn_listen_with_backlog+0x54>)
 80094f2:	f7ff fe83 	bl	80091fc <netconn_apimsg>
 80094f6:	4603      	mov	r3, r0
 80094f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80094fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8009500:	4618      	mov	r0, r3
 8009502:	3730      	adds	r7, #48	; 0x30
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	0801b9e0 	.word	0x0801b9e0
 800950c:	0801bb98 	.word	0x0801bb98
 8009510:	0801ba38 	.word	0x0801ba38
 8009514:	0800ad0d 	.word	0x0800ad0d

08009518 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b086      	sub	sp, #24
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d109      	bne.n	800953c <netconn_accept+0x24>
 8009528:	4b3d      	ldr	r3, [pc, #244]	; (8009620 <netconn_accept+0x108>)
 800952a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800952e:	493d      	ldr	r1, [pc, #244]	; (8009624 <netconn_accept+0x10c>)
 8009530:	483d      	ldr	r0, [pc, #244]	; (8009628 <netconn_accept+0x110>)
 8009532:	f011 fc0b 	bl	801ad4c <iprintf>
 8009536:	f06f 030f 	mvn.w	r3, #15
 800953a:	e06c      	b.n	8009616 <netconn_accept+0xfe>
  *new_conn = NULL;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	2200      	movs	r2, #0
 8009540:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d109      	bne.n	800955c <netconn_accept+0x44>
 8009548:	4b35      	ldr	r3, [pc, #212]	; (8009620 <netconn_accept+0x108>)
 800954a:	f240 12e3 	movw	r2, #483	; 0x1e3
 800954e:	4937      	ldr	r1, [pc, #220]	; (800962c <netconn_accept+0x114>)
 8009550:	4835      	ldr	r0, [pc, #212]	; (8009628 <netconn_accept+0x110>)
 8009552:	f011 fbfb 	bl	801ad4c <iprintf>
 8009556:	f06f 030f 	mvn.w	r3, #15
 800955a:	e05c      	b.n	8009616 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 fb99 	bl	8009c94 <netconn_err>
 8009562:	4603      	mov	r3, r0
 8009564:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8009566:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d002      	beq.n	8009574 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800956e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009572:	e050      	b.n	8009616 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	3314      	adds	r3, #20
 8009578:	4618      	mov	r0, r3
 800957a:	f00e ffeb 	bl	8018554 <sys_mbox_valid>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d005      	beq.n	8009590 <netconn_accept+0x78>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	7f1b      	ldrb	r3, [r3, #28]
 8009588:	f003 0301 	and.w	r3, r3, #1
 800958c:	2b00      	cmp	r3, #0
 800958e:	d002      	beq.n	8009596 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8009590:	f06f 030e 	mvn.w	r3, #14
 8009594:	e03f      	b.n	8009616 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	7f1b      	ldrb	r3, [r3, #28]
 800959a:	f003 0302 	and.w	r3, r3, #2
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00e      	beq.n	80095c0 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	3314      	adds	r3, #20
 80095a6:	f107 020c 	add.w	r2, r7, #12
 80095aa:	4611      	mov	r1, r2
 80095ac:	4618      	mov	r0, r3
 80095ae:	f00e ffba 	bl	8018526 <sys_arch_mbox_tryfetch>
 80095b2:	4603      	mov	r3, r0
 80095b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b8:	d10a      	bne.n	80095d0 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 80095ba:	f06f 0306 	mvn.w	r3, #6
 80095be:	e02a      	b.n	8009616 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	3314      	adds	r3, #20
 80095c4:	f107 010c 	add.w	r1, r7, #12
 80095c8:	2200      	movs	r2, #0
 80095ca:	4618      	mov	r0, r3
 80095cc:	f00e ff7a 	bl	80184c4 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d005      	beq.n	80095e4 <netconn_accept+0xcc>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095dc:	2200      	movs	r2, #0
 80095de:	2101      	movs	r1, #1
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f107 0213 	add.w	r2, r7, #19
 80095ea:	4611      	mov	r1, r2
 80095ec:	4618      	mov	r0, r3
 80095ee:	f000 fba3 	bl	8009d38 <lwip_netconn_is_err_msg>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d002      	beq.n	80095fe <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 80095f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80095fc:	e00b      	b.n	8009616 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d102      	bne.n	800960a <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8009604:	f06f 030e 	mvn.w	r3, #14
 8009608:	e005      	b.n	8009616 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	697a      	ldr	r2, [r7, #20]
 8009612:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009614:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8009616:	4618      	mov	r0, r3
 8009618:	3718      	adds	r7, #24
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	0801b9e0 	.word	0x0801b9e0
 8009624:	0801bbb8 	.word	0x0801bbb8
 8009628:	0801ba38 	.word	0x0801ba38
 800962c:	0801bbd8 	.word	0x0801bbd8

08009630 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b088      	sub	sp, #32
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	4613      	mov	r3, r2
 800963c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800963e:	2300      	movs	r3, #0
 8009640:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d109      	bne.n	800965c <netconn_recv_data+0x2c>
 8009648:	4b58      	ldr	r3, [pc, #352]	; (80097ac <netconn_recv_data+0x17c>)
 800964a:	f44f 7212 	mov.w	r2, #584	; 0x248
 800964e:	4958      	ldr	r1, [pc, #352]	; (80097b0 <netconn_recv_data+0x180>)
 8009650:	4858      	ldr	r0, [pc, #352]	; (80097b4 <netconn_recv_data+0x184>)
 8009652:	f011 fb7b 	bl	801ad4c <iprintf>
 8009656:	f06f 030f 	mvn.w	r3, #15
 800965a:	e0a2      	b.n	80097a2 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	2200      	movs	r2, #0
 8009660:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d109      	bne.n	800967c <netconn_recv_data+0x4c>
 8009668:	4b50      	ldr	r3, [pc, #320]	; (80097ac <netconn_recv_data+0x17c>)
 800966a:	f240 224a 	movw	r2, #586	; 0x24a
 800966e:	4952      	ldr	r1, [pc, #328]	; (80097b8 <netconn_recv_data+0x188>)
 8009670:	4850      	ldr	r0, [pc, #320]	; (80097b4 <netconn_recv_data+0x184>)
 8009672:	f011 fb6b 	bl	801ad4c <iprintf>
 8009676:	f06f 030f 	mvn.w	r3, #15
 800967a:	e092      	b.n	80097a2 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	3310      	adds	r3, #16
 8009680:	4618      	mov	r0, r3
 8009682:	f00e ff67 	bl	8018554 <sys_mbox_valid>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d10e      	bne.n	80096aa <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f000 fb01 	bl	8009c94 <netconn_err>
 8009692:	4603      	mov	r3, r0
 8009694:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8009696:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d002      	beq.n	80096a4 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800969e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80096a2:	e07e      	b.n	80097a2 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 80096a4:	f06f 030a 	mvn.w	r3, #10
 80096a8:	e07b      	b.n	80097a2 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	7f1b      	ldrb	r3, [r3, #28]
 80096ae:	f003 0302 	and.w	r3, r3, #2
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d10f      	bne.n	80096d6 <netconn_recv_data+0xa6>
 80096b6:	79fb      	ldrb	r3, [r7, #7]
 80096b8:	f003 0304 	and.w	r3, r3, #4
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10a      	bne.n	80096d6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	7f1b      	ldrb	r3, [r3, #28]
 80096c4:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d104      	bne.n	80096d6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d023      	beq.n	800971e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	3310      	adds	r3, #16
 80096da:	f107 0218 	add.w	r2, r7, #24
 80096de:	4611      	mov	r1, r2
 80096e0:	4618      	mov	r0, r3
 80096e2:	f00e ff20 	bl	8018526 <sys_arch_mbox_tryfetch>
 80096e6:	4603      	mov	r3, r0
 80096e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ec:	d11f      	bne.n	800972e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	f000 fad0 	bl	8009c94 <netconn_err>
 80096f4:	4603      	mov	r3, r0
 80096f6:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80096f8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d002      	beq.n	8009706 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8009700:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009704:	e04d      	b.n	80097a2 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	7f1b      	ldrb	r3, [r3, #28]
 800970a:	f003 0301 	and.w	r3, r3, #1
 800970e:	2b00      	cmp	r3, #0
 8009710:	d002      	beq.n	8009718 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8009712:	f06f 030a 	mvn.w	r3, #10
 8009716:	e044      	b.n	80097a2 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8009718:	f06f 0306 	mvn.w	r3, #6
 800971c:	e041      	b.n	80097a2 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	3310      	adds	r3, #16
 8009722:	f107 0118 	add.w	r1, r7, #24
 8009726:	2200      	movs	r2, #0
 8009728:	4618      	mov	r0, r3
 800972a:	f00e fecb 	bl	80184c4 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009736:	2b10      	cmp	r3, #16
 8009738:	d117      	bne.n	800976a <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	f107 0217 	add.w	r2, r7, #23
 8009740:	4611      	mov	r1, r2
 8009742:	4618      	mov	r0, r3
 8009744:	f000 faf8 	bl	8009d38 <lwip_netconn_is_err_msg>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d009      	beq.n	8009762 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800974e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009752:	f113 0f0f 	cmn.w	r3, #15
 8009756:	d101      	bne.n	800975c <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8009758:	2300      	movs	r3, #0
 800975a:	e022      	b.n	80097a2 <netconn_recv_data+0x172>
      }
      return err;
 800975c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009760:	e01f      	b.n	80097a2 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	891b      	ldrh	r3, [r3, #8]
 8009766:	83fb      	strh	r3, [r7, #30]
 8009768:	e00d      	b.n	8009786 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d106      	bne.n	800977e <netconn_recv_data+0x14e>
 8009770:	4b0e      	ldr	r3, [pc, #56]	; (80097ac <netconn_recv_data+0x17c>)
 8009772:	f240 2291 	movw	r2, #657	; 0x291
 8009776:	4911      	ldr	r1, [pc, #68]	; (80097bc <netconn_recv_data+0x18c>)
 8009778:	480e      	ldr	r0, [pc, #56]	; (80097b4 <netconn_recv_data+0x184>)
 800977a:	f011 fae7 	bl	801ad4c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	891b      	ldrh	r3, [r3, #8]
 8009784:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978a:	2b00      	cmp	r3, #0
 800978c:	d005      	beq.n	800979a <netconn_recv_data+0x16a>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009792:	8bfa      	ldrh	r2, [r7, #30]
 8009794:	2101      	movs	r1, #1
 8009796:	68f8      	ldr	r0, [r7, #12]
 8009798:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800979a:	69ba      	ldr	r2, [r7, #24]
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3720      	adds	r7, #32
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	0801b9e0 	.word	0x0801b9e0
 80097b0:	0801bbf8 	.word	0x0801bbf8
 80097b4:	0801ba38 	.word	0x0801ba38
 80097b8:	0801bc18 	.word	0x0801bc18
 80097bc:	0801bc34 	.word	0x0801bc34

080097c0 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d005      	beq.n	80097de <netconn_tcp_recvd_msg+0x1e>
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097da:	2b10      	cmp	r3, #16
 80097dc:	d009      	beq.n	80097f2 <netconn_tcp_recvd_msg+0x32>
 80097de:	4b0c      	ldr	r3, [pc, #48]	; (8009810 <netconn_tcp_recvd_msg+0x50>)
 80097e0:	f240 22a7 	movw	r2, #679	; 0x2a7
 80097e4:	490b      	ldr	r1, [pc, #44]	; (8009814 <netconn_tcp_recvd_msg+0x54>)
 80097e6:	480c      	ldr	r0, [pc, #48]	; (8009818 <netconn_tcp_recvd_msg+0x58>)
 80097e8:	f011 fab0 	bl	801ad4c <iprintf>
 80097ec:	f06f 030f 	mvn.w	r3, #15
 80097f0:	e00a      	b.n	8009808 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	68ba      	ldr	r2, [r7, #8]
 80097fc:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80097fe:	6879      	ldr	r1, [r7, #4]
 8009800:	4806      	ldr	r0, [pc, #24]	; (800981c <netconn_tcp_recvd_msg+0x5c>)
 8009802:	f7ff fcfb 	bl	80091fc <netconn_apimsg>
 8009806:	4603      	mov	r3, r0
}
 8009808:	4618      	mov	r0, r3
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}
 8009810:	0801b9e0 	.word	0x0801b9e0
 8009814:	0801bc40 	.word	0x0801bc40
 8009818:	0801ba38 	.word	0x0801ba38
 800981c:	0800aed7 	.word	0x0800aed7

08009820 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b08c      	sub	sp, #48	; 0x30
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d005      	beq.n	800983c <netconn_tcp_recvd+0x1c>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009838:	2b10      	cmp	r3, #16
 800983a:	d009      	beq.n	8009850 <netconn_tcp_recvd+0x30>
 800983c:	4b0c      	ldr	r3, [pc, #48]	; (8009870 <netconn_tcp_recvd+0x50>)
 800983e:	f240 22b5 	movw	r2, #693	; 0x2b5
 8009842:	490c      	ldr	r1, [pc, #48]	; (8009874 <netconn_tcp_recvd+0x54>)
 8009844:	480c      	ldr	r0, [pc, #48]	; (8009878 <netconn_tcp_recvd+0x58>)
 8009846:	f011 fa81 	bl	801ad4c <iprintf>
 800984a:	f06f 030f 	mvn.w	r3, #15
 800984e:	e00b      	b.n	8009868 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 8009850:	f107 030c 	add.w	r3, r7, #12
 8009854:	461a      	mov	r2, r3
 8009856:	6839      	ldr	r1, [r7, #0]
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f7ff ffb1 	bl	80097c0 <netconn_tcp_recvd_msg>
 800985e:	4603      	mov	r3, r0
 8009860:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 8009864:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009868:	4618      	mov	r0, r3
 800986a:	3730      	adds	r7, #48	; 0x30
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	0801b9e0 	.word	0x0801b9e0
 8009874:	0801bc40 	.word	0x0801bc40
 8009878:	0801ba38 	.word	0x0801ba38

0800987c <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b090      	sub	sp, #64	; 0x40
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	4613      	mov	r3, r2
 8009888:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	3310      	adds	r3, #16
 800988e:	4618      	mov	r0, r3
 8009890:	f00e fe60 	bl	8018554 <sys_mbox_valid>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d102      	bne.n	80098a0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800989a:	f06f 030a 	mvn.w	r3, #10
 800989e:	e06d      	b.n	800997c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	7f1b      	ldrb	r3, [r3, #28]
 80098a4:	b25b      	sxtb	r3, r3
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	da07      	bge.n	80098ba <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	7f1b      	ldrb	r3, [r3, #28]
 80098ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098b2:	b2da      	uxtb	r2, r3
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80098b8:	e039      	b.n	800992e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80098ba:	79fb      	ldrb	r3, [r7, #7]
 80098bc:	461a      	mov	r2, r3
 80098be:	68b9      	ldr	r1, [r7, #8]
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f7ff feb5 	bl	8009630 <netconn_recv_data>
 80098c6:	4603      	mov	r3, r0
 80098c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80098cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d002      	beq.n	80098da <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80098d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80098d8:	e050      	b.n	800997c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80098e0:	79fb      	ldrb	r3, [r7, #7]
 80098e2:	f003 0308 	and.w	r3, r3, #8
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d10e      	bne.n	8009908 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80098ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d002      	beq.n	80098f6 <netconn_recv_data_tcp+0x7a>
 80098f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f2:	891b      	ldrh	r3, [r3, #8]
 80098f4:	e000      	b.n	80098f8 <netconn_recv_data_tcp+0x7c>
 80098f6:	2301      	movs	r3, #1
 80098f8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80098fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80098fc:	f107 0214 	add.w	r2, r7, #20
 8009900:	4619      	mov	r1, r3
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f7ff ff5c 	bl	80097c0 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8009908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990a:	2b00      	cmp	r3, #0
 800990c:	d134      	bne.n	8009978 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800990e:	79fb      	ldrb	r3, [r7, #7]
 8009910:	f003 0310 	and.w	r3, r3, #16
 8009914:	2b00      	cmp	r3, #0
 8009916:	d009      	beq.n	800992c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	7f1b      	ldrb	r3, [r3, #28]
 800991c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009920:	b2da      	uxtb	r2, r3
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8009926:	f06f 0306 	mvn.w	r3, #6
 800992a:	e027      	b.n	800997c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800992c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009932:	2b00      	cmp	r3, #0
 8009934:	d005      	beq.n	8009942 <netconn_recv_data_tcp+0xc6>
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993a:	2200      	movs	r2, #0
 800993c:	2101      	movs	r1, #1
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d10f      	bne.n	800996a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f000 f9a2 	bl	8009c94 <netconn_err>
 8009950:	4603      	mov	r3, r0
 8009952:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8009956:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800995a:	2b00      	cmp	r3, #0
 800995c:	d002      	beq.n	8009964 <netconn_recv_data_tcp+0xe8>
          return err;
 800995e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009962:	e00b      	b.n	800997c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8009964:	f06f 030d 	mvn.w	r3, #13
 8009968:	e008      	b.n	800997c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800996a:	2101      	movs	r1, #1
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f000 f961 	bl	8009c34 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8009972:	f06f 030e 	mvn.w	r3, #14
 8009976:	e001      	b.n	800997c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8009978:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800997c:	4618      	mov	r0, r3
 800997e:	3740      	adds	r7, #64	; 0x40
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	4613      	mov	r3, r2
 8009990:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d005      	beq.n	80099a4 <netconn_recv_tcp_pbuf_flags+0x20>
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099a0:	2b10      	cmp	r3, #16
 80099a2:	d009      	beq.n	80099b8 <netconn_recv_tcp_pbuf_flags+0x34>
 80099a4:	4b0a      	ldr	r3, [pc, #40]	; (80099d0 <netconn_recv_tcp_pbuf_flags+0x4c>)
 80099a6:	f240 3225 	movw	r2, #805	; 0x325
 80099aa:	490a      	ldr	r1, [pc, #40]	; (80099d4 <netconn_recv_tcp_pbuf_flags+0x50>)
 80099ac:	480a      	ldr	r0, [pc, #40]	; (80099d8 <netconn_recv_tcp_pbuf_flags+0x54>)
 80099ae:	f011 f9cd 	bl	801ad4c <iprintf>
 80099b2:	f06f 030f 	mvn.w	r3, #15
 80099b6:	e006      	b.n	80099c6 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 80099b8:	79fb      	ldrb	r3, [r7, #7]
 80099ba:	461a      	mov	r2, r3
 80099bc:	68b9      	ldr	r1, [r7, #8]
 80099be:	68f8      	ldr	r0, [r7, #12]
 80099c0:	f7ff ff5c 	bl	800987c <netconn_recv_data_tcp>
 80099c4:	4603      	mov	r3, r0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	0801b9e0 	.word	0x0801b9e0
 80099d4:	0801bc40 	.word	0x0801bc40
 80099d8:	0801ba38 	.word	0x0801ba38

080099dc <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	4613      	mov	r3, r2
 80099e8:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d005      	beq.n	80099fc <netconn_recv_udp_raw_netbuf_flags+0x20>
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099f8:	2b10      	cmp	r3, #16
 80099fa:	d109      	bne.n	8009a10 <netconn_recv_udp_raw_netbuf_flags+0x34>
 80099fc:	4b0a      	ldr	r3, [pc, #40]	; (8009a28 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 80099fe:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8009a02:	490a      	ldr	r1, [pc, #40]	; (8009a2c <netconn_recv_udp_raw_netbuf_flags+0x50>)
 8009a04:	480a      	ldr	r0, [pc, #40]	; (8009a30 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 8009a06:	f011 f9a1 	bl	801ad4c <iprintf>
 8009a0a:	f06f 030f 	mvn.w	r3, #15
 8009a0e:	e006      	b.n	8009a1e <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 8009a10:	79fb      	ldrb	r3, [r7, #7]
 8009a12:	461a      	mov	r2, r3
 8009a14:	68b9      	ldr	r1, [r7, #8]
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	f7ff fe0a 	bl	8009630 <netconn_recv_data>
 8009a1c:	4603      	mov	r3, r0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	0801b9e0 	.word	0x0801b9e0
 8009a2c:	0801bc64 	.word	0x0801bc64
 8009a30:	0801ba38 	.word	0x0801ba38

08009a34 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b08c      	sub	sp, #48	; 0x30
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d109      	bne.n	8009a58 <netconn_send+0x24>
 8009a44:	4b0e      	ldr	r3, [pc, #56]	; (8009a80 <netconn_send+0x4c>)
 8009a46:	f240 32b2 	movw	r2, #946	; 0x3b2
 8009a4a:	490e      	ldr	r1, [pc, #56]	; (8009a84 <netconn_send+0x50>)
 8009a4c:	480e      	ldr	r0, [pc, #56]	; (8009a88 <netconn_send+0x54>)
 8009a4e:	f011 f97d 	bl	801ad4c <iprintf>
 8009a52:	f06f 030f 	mvn.w	r3, #15
 8009a56:	e00e      	b.n	8009a76 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8009a60:	f107 030c 	add.w	r3, r7, #12
 8009a64:	4619      	mov	r1, r3
 8009a66:	4809      	ldr	r0, [pc, #36]	; (8009a8c <netconn_send+0x58>)
 8009a68:	f7ff fbc8 	bl	80091fc <netconn_apimsg>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009a72:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3730      	adds	r7, #48	; 0x30
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	0801b9e0 	.word	0x0801b9e0
 8009a84:	0801bc9c 	.word	0x0801bc9c
 8009a88:	0801ba38 	.word	0x0801ba38
 8009a8c:	0800ae3d 	.word	0x0800ae3d

08009a90 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b088      	sub	sp, #32
 8009a94:	af02      	add	r7, sp, #8
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
 8009a9c:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8009aa6:	78fa      	ldrb	r2, [r7, #3]
 8009aa8:	f107 0110 	add.w	r1, r7, #16
 8009aac:	6a3b      	ldr	r3, [r7, #32]
 8009aae:	9300      	str	r3, [sp, #0]
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	f000 f805 	bl	8009ac4 <netconn_write_vectors_partly>
 8009aba:	4603      	mov	r3, r0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3718      	adds	r7, #24
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b092      	sub	sp, #72	; 0x48
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	4611      	mov	r1, r2
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	80fb      	strh	r3, [r7, #6]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d109      	bne.n	8009af4 <netconn_write_vectors_partly+0x30>
 8009ae0:	4b4e      	ldr	r3, [pc, #312]	; (8009c1c <netconn_write_vectors_partly+0x158>)
 8009ae2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009ae6:	494e      	ldr	r1, [pc, #312]	; (8009c20 <netconn_write_vectors_partly+0x15c>)
 8009ae8:	484e      	ldr	r0, [pc, #312]	; (8009c24 <netconn_write_vectors_partly+0x160>)
 8009aea:	f011 f92f 	bl	801ad4c <iprintf>
 8009aee:	f06f 030f 	mvn.w	r3, #15
 8009af2:	e08e      	b.n	8009c12 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009afc:	2b10      	cmp	r3, #16
 8009afe:	d009      	beq.n	8009b14 <netconn_write_vectors_partly+0x50>
 8009b00:	4b46      	ldr	r3, [pc, #280]	; (8009c1c <netconn_write_vectors_partly+0x158>)
 8009b02:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8009b06:	4948      	ldr	r1, [pc, #288]	; (8009c28 <netconn_write_vectors_partly+0x164>)
 8009b08:	4846      	ldr	r0, [pc, #280]	; (8009c24 <netconn_write_vectors_partly+0x160>)
 8009b0a:	f011 f91f 	bl	801ad4c <iprintf>
 8009b0e:	f06f 0305 	mvn.w	r3, #5
 8009b12:	e07e      	b.n	8009c12 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	7f1b      	ldrb	r3, [r3, #28]
 8009b18:	f003 0302 	and.w	r3, r3, #2
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d104      	bne.n	8009b2a <netconn_write_vectors_partly+0x66>
 8009b20:	797b      	ldrb	r3, [r7, #5]
 8009b22:	f003 0304 	and.w	r3, r3, #4
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d001      	beq.n	8009b2e <netconn_write_vectors_partly+0x6a>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e000      	b.n	8009b30 <netconn_write_vectors_partly+0x6c>
 8009b2e:	2300      	movs	r3, #0
 8009b30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8009b34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d005      	beq.n	8009b48 <netconn_write_vectors_partly+0x84>
 8009b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d102      	bne.n	8009b48 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8009b42:	f06f 0305 	mvn.w	r3, #5
 8009b46:	e064      	b.n	8009c12 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	643b      	str	r3, [r7, #64]	; 0x40
 8009b50:	e015      	b.n	8009b7e <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8009b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b54:	00db      	lsls	r3, r3, #3
 8009b56:	68ba      	ldr	r2, [r7, #8]
 8009b58:	4413      	add	r3, r2
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b5e:	4413      	add	r3, r2
 8009b60:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8009b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b64:	00db      	lsls	r3, r3, #3
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	4413      	add	r3, r2
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d202      	bcs.n	8009b78 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8009b72:	f06f 0305 	mvn.w	r3, #5
 8009b76:	e04c      	b.n	8009c12 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8009b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	643b      	str	r3, [r7, #64]	; 0x40
 8009b7e:	88fb      	ldrh	r3, [r7, #6]
 8009b80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b82:	429a      	cmp	r2, r3
 8009b84:	dbe5      	blt.n	8009b52 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8009b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d101      	bne.n	8009b90 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	e040      	b.n	8009c12 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8009b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	da0a      	bge.n	8009bac <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8009b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d102      	bne.n	8009ba2 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8009b9c:	f06f 0305 	mvn.w	r3, #5
 8009ba0:	e037      	b.n	8009c12 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009ba2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009ba6:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8009ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009baa:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009bb4:	88fb      	ldrh	r3, [r7, #6]
 8009bb6:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8009bbc:	797b      	ldrb	r3, [r7, #5]
 8009bbe:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8009bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009bca:	f107 0314 	add.w	r3, r7, #20
 8009bce:	4619      	mov	r1, r3
 8009bd0:	4816      	ldr	r0, [pc, #88]	; (8009c2c <netconn_write_vectors_partly+0x168>)
 8009bd2:	f7ff fb13 	bl	80091fc <netconn_apimsg>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8009bdc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d114      	bne.n	8009c0e <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8009be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d002      	beq.n	8009bf0 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bee:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009bf0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d10a      	bne.n	8009c0e <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d006      	beq.n	8009c0e <netconn_write_vectors_partly+0x14a>
 8009c00:	4b06      	ldr	r3, [pc, #24]	; (8009c1c <netconn_write_vectors_partly+0x158>)
 8009c02:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009c06:	490a      	ldr	r1, [pc, #40]	; (8009c30 <netconn_write_vectors_partly+0x16c>)
 8009c08:	4806      	ldr	r0, [pc, #24]	; (8009c24 <netconn_write_vectors_partly+0x160>)
 8009c0a:	f011 f89f 	bl	801ad4c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8009c0e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3748      	adds	r7, #72	; 0x48
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	0801b9e0 	.word	0x0801b9e0
 8009c20:	0801bcb8 	.word	0x0801bcb8
 8009c24:	0801ba38 	.word	0x0801ba38
 8009c28:	0801bcd4 	.word	0x0801bcd4
 8009c2c:	0800b2d9 	.word	0x0800b2d9
 8009c30:	0801bcf8 	.word	0x0801bcf8

08009c34 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b08c      	sub	sp, #48	; 0x30
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d109      	bne.n	8009c5a <netconn_close_shutdown+0x26>
 8009c46:	4b0f      	ldr	r3, [pc, #60]	; (8009c84 <netconn_close_shutdown+0x50>)
 8009c48:	f240 4247 	movw	r2, #1095	; 0x447
 8009c4c:	490e      	ldr	r1, [pc, #56]	; (8009c88 <netconn_close_shutdown+0x54>)
 8009c4e:	480f      	ldr	r0, [pc, #60]	; (8009c8c <netconn_close_shutdown+0x58>)
 8009c50:	f011 f87c 	bl	801ad4c <iprintf>
 8009c54:	f06f 030f 	mvn.w	r3, #15
 8009c58:	e010      	b.n	8009c7c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009c5e:	78fb      	ldrb	r3, [r7, #3]
 8009c60:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009c62:	2329      	movs	r3, #41	; 0x29
 8009c64:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009c66:	f107 030c 	add.w	r3, r7, #12
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	4808      	ldr	r0, [pc, #32]	; (8009c90 <netconn_close_shutdown+0x5c>)
 8009c6e:	f7ff fac5 	bl	80091fc <netconn_apimsg>
 8009c72:	4603      	mov	r3, r0
 8009c74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009c78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3730      	adds	r7, #48	; 0x30
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	0801b9e0 	.word	0x0801b9e0
 8009c88:	0801bd1c 	.word	0x0801bd1c
 8009c8c:	0801ba38 	.word	0x0801ba38
 8009c90:	0800b4fd 	.word	0x0800b4fd

08009c94 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d101      	bne.n	8009ca6 <netconn_err+0x12>
    return ERR_OK;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	e00d      	b.n	8009cc2 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009ca6:	f00e fd5f 	bl	8018768 <sys_arch_protect>
 8009caa:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	7a1b      	ldrb	r3, [r3, #8]
 8009cb0:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f00e fd63 	bl	8018784 <sys_arch_unprotect>
  return err;
 8009cbe:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
	...

08009ccc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cda:	f113 0f0d 	cmn.w	r3, #13
 8009cde:	d009      	beq.n	8009cf4 <lwip_netconn_err_to_msg+0x28>
 8009ce0:	f113 0f0d 	cmn.w	r3, #13
 8009ce4:	dc0c      	bgt.n	8009d00 <lwip_netconn_err_to_msg+0x34>
 8009ce6:	f113 0f0f 	cmn.w	r3, #15
 8009cea:	d007      	beq.n	8009cfc <lwip_netconn_err_to_msg+0x30>
 8009cec:	f113 0f0e 	cmn.w	r3, #14
 8009cf0:	d002      	beq.n	8009cf8 <lwip_netconn_err_to_msg+0x2c>
 8009cf2:	e005      	b.n	8009d00 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009cf4:	4b0a      	ldr	r3, [pc, #40]	; (8009d20 <lwip_netconn_err_to_msg+0x54>)
 8009cf6:	e00e      	b.n	8009d16 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009cf8:	4b0a      	ldr	r3, [pc, #40]	; (8009d24 <lwip_netconn_err_to_msg+0x58>)
 8009cfa:	e00c      	b.n	8009d16 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009cfc:	4b0a      	ldr	r3, [pc, #40]	; (8009d28 <lwip_netconn_err_to_msg+0x5c>)
 8009cfe:	e00a      	b.n	8009d16 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d005      	beq.n	8009d14 <lwip_netconn_err_to_msg+0x48>
 8009d08:	4b08      	ldr	r3, [pc, #32]	; (8009d2c <lwip_netconn_err_to_msg+0x60>)
 8009d0a:	227d      	movs	r2, #125	; 0x7d
 8009d0c:	4908      	ldr	r1, [pc, #32]	; (8009d30 <lwip_netconn_err_to_msg+0x64>)
 8009d0e:	4809      	ldr	r0, [pc, #36]	; (8009d34 <lwip_netconn_err_to_msg+0x68>)
 8009d10:	f011 f81c 	bl	801ad4c <iprintf>
      return NULL;
 8009d14:	2300      	movs	r3, #0
  }
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	0801f48c 	.word	0x0801f48c
 8009d24:	0801f48d 	.word	0x0801f48d
 8009d28:	0801f48e 	.word	0x0801f48e
 8009d2c:	0801bd38 	.word	0x0801bd38
 8009d30:	0801bd6c 	.word	0x0801bd6c
 8009d34:	0801bd7c 	.word	0x0801bd7c

08009d38 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d105      	bne.n	8009d54 <lwip_netconn_is_err_msg+0x1c>
 8009d48:	4b12      	ldr	r3, [pc, #72]	; (8009d94 <lwip_netconn_is_err_msg+0x5c>)
 8009d4a:	2285      	movs	r2, #133	; 0x85
 8009d4c:	4912      	ldr	r1, [pc, #72]	; (8009d98 <lwip_netconn_is_err_msg+0x60>)
 8009d4e:	4813      	ldr	r0, [pc, #76]	; (8009d9c <lwip_netconn_is_err_msg+0x64>)
 8009d50:	f010 fffc 	bl	801ad4c <iprintf>

  if (msg == &netconn_aborted) {
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	4a12      	ldr	r2, [pc, #72]	; (8009da0 <lwip_netconn_is_err_msg+0x68>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d104      	bne.n	8009d66 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	22f3      	movs	r2, #243	; 0xf3
 8009d60:	701a      	strb	r2, [r3, #0]
    return 1;
 8009d62:	2301      	movs	r3, #1
 8009d64:	e012      	b.n	8009d8c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a0e      	ldr	r2, [pc, #56]	; (8009da4 <lwip_netconn_is_err_msg+0x6c>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d104      	bne.n	8009d78 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	22f2      	movs	r2, #242	; 0xf2
 8009d72:	701a      	strb	r2, [r3, #0]
    return 1;
 8009d74:	2301      	movs	r3, #1
 8009d76:	e009      	b.n	8009d8c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	4a0b      	ldr	r2, [pc, #44]	; (8009da8 <lwip_netconn_is_err_msg+0x70>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d104      	bne.n	8009d8a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	22f1      	movs	r2, #241	; 0xf1
 8009d84:	701a      	strb	r2, [r3, #0]
    return 1;
 8009d86:	2301      	movs	r3, #1
 8009d88:	e000      	b.n	8009d8c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3708      	adds	r7, #8
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	0801bd38 	.word	0x0801bd38
 8009d98:	0801bda4 	.word	0x0801bda4
 8009d9c:	0801bd7c 	.word	0x0801bd7c
 8009da0:	0801f48c 	.word	0x0801f48c
 8009da4:	0801f48d 	.word	0x0801f48d
 8009da8:	0801f48e 	.word	0x0801f48e

08009dac <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b088      	sub	sp, #32
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
 8009db8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d105      	bne.n	8009dcc <recv_udp+0x20>
 8009dc0:	4b34      	ldr	r3, [pc, #208]	; (8009e94 <recv_udp+0xe8>)
 8009dc2:	22e5      	movs	r2, #229	; 0xe5
 8009dc4:	4934      	ldr	r1, [pc, #208]	; (8009e98 <recv_udp+0xec>)
 8009dc6:	4835      	ldr	r0, [pc, #212]	; (8009e9c <recv_udp+0xf0>)
 8009dc8:	f010 ffc0 	bl	801ad4c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d105      	bne.n	8009dde <recv_udp+0x32>
 8009dd2:	4b30      	ldr	r3, [pc, #192]	; (8009e94 <recv_udp+0xe8>)
 8009dd4:	22e6      	movs	r2, #230	; 0xe6
 8009dd6:	4932      	ldr	r1, [pc, #200]	; (8009ea0 <recv_udp+0xf4>)
 8009dd8:	4830      	ldr	r0, [pc, #192]	; (8009e9c <recv_udp+0xf0>)
 8009dda:	f010 ffb7 	bl	801ad4c <iprintf>
  conn = (struct netconn *)arg;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d103      	bne.n	8009df0 <recv_udp+0x44>
    pbuf_free(p);
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f004 fe1f 	bl	800ea2c <pbuf_free>
    return;
 8009dee:	e04d      	b.n	8009e8c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	68ba      	ldr	r2, [r7, #8]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d005      	beq.n	8009e06 <recv_udp+0x5a>
 8009dfa:	4b26      	ldr	r3, [pc, #152]	; (8009e94 <recv_udp+0xe8>)
 8009dfc:	22ee      	movs	r2, #238	; 0xee
 8009dfe:	4929      	ldr	r1, [pc, #164]	; (8009ea4 <recv_udp+0xf8>)
 8009e00:	4826      	ldr	r0, [pc, #152]	; (8009e9c <recv_udp+0xf0>)
 8009e02:	f010 ffa3 	bl	801ad4c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	3310      	adds	r3, #16
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f00e fba2 	bl	8018554 <sys_mbox_valid>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d103      	bne.n	8009e1e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f004 fe08 	bl	800ea2c <pbuf_free>
    return;
 8009e1c:	e036      	b.n	8009e8c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009e1e:	2006      	movs	r0, #6
 8009e20:	f003 fea4 	bl	800db6c <memp_malloc>
 8009e24:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009e26:	69bb      	ldr	r3, [r7, #24]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d103      	bne.n	8009e34 <recv_udp+0x88>
    pbuf_free(p);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f004 fdfd 	bl	800ea2c <pbuf_free>
    return;
 8009e32:	e02b      	b.n	8009e8c <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d002      	beq.n	8009e4c <recv_udp+0xa0>
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	e000      	b.n	8009e4e <recv_udp+0xa2>
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	69ba      	ldr	r2, [r7, #24]
 8009e50:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009e56:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	891b      	ldrh	r3, [r3, #8]
 8009e5c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	3310      	adds	r3, #16
 8009e62:	69b9      	ldr	r1, [r7, #24]
 8009e64:	4618      	mov	r0, r3
 8009e66:	f00e fb13 	bl	8018490 <sys_mbox_trypost>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d003      	beq.n	8009e78 <recv_udp+0xcc>
    netbuf_delete(buf);
 8009e70:	69b8      	ldr	r0, [r7, #24]
 8009e72:	f001 fbed 	bl	800b650 <netbuf_delete>
    return;
 8009e76:	e009      	b.n	8009e8c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009e78:	69fb      	ldr	r3, [r7, #28]
 8009e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d005      	beq.n	8009e8c <recv_udp+0xe0>
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e84:	8afa      	ldrh	r2, [r7, #22]
 8009e86:	2100      	movs	r1, #0
 8009e88:	69f8      	ldr	r0, [r7, #28]
 8009e8a:	4798      	blx	r3
  }
}
 8009e8c:	3720      	adds	r7, #32
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	0801bd38 	.word	0x0801bd38
 8009e98:	0801bdb0 	.word	0x0801bdb0
 8009e9c:	0801bd7c 	.word	0x0801bd7c
 8009ea0:	0801bdd4 	.word	0x0801bdd4
 8009ea4:	0801bdf4 	.word	0x0801bdf4

08009ea8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b088      	sub	sp, #32
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
 8009eb4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d106      	bne.n	8009eca <recv_tcp+0x22>
 8009ebc:	4b36      	ldr	r3, [pc, #216]	; (8009f98 <recv_tcp+0xf0>)
 8009ebe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009ec2:	4936      	ldr	r1, [pc, #216]	; (8009f9c <recv_tcp+0xf4>)
 8009ec4:	4836      	ldr	r0, [pc, #216]	; (8009fa0 <recv_tcp+0xf8>)
 8009ec6:	f010 ff41 	bl	801ad4c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d106      	bne.n	8009ede <recv_tcp+0x36>
 8009ed0:	4b31      	ldr	r3, [pc, #196]	; (8009f98 <recv_tcp+0xf0>)
 8009ed2:	f240 122d 	movw	r2, #301	; 0x12d
 8009ed6:	4933      	ldr	r1, [pc, #204]	; (8009fa4 <recv_tcp+0xfc>)
 8009ed8:	4831      	ldr	r0, [pc, #196]	; (8009fa0 <recv_tcp+0xf8>)
 8009eda:	f010 ff37 	bl	801ad4c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009ede:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d006      	beq.n	8009ef4 <recv_tcp+0x4c>
 8009ee6:	4b2c      	ldr	r3, [pc, #176]	; (8009f98 <recv_tcp+0xf0>)
 8009ee8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8009eec:	492e      	ldr	r1, [pc, #184]	; (8009fa8 <recv_tcp+0x100>)
 8009eee:	482c      	ldr	r0, [pc, #176]	; (8009fa0 <recv_tcp+0xf8>)
 8009ef0:	f010 ff2c 	bl	801ad4c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d102      	bne.n	8009f04 <recv_tcp+0x5c>
    return ERR_VAL;
 8009efe:	f06f 0305 	mvn.w	r3, #5
 8009f02:	e045      	b.n	8009f90 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	68ba      	ldr	r2, [r7, #8]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d006      	beq.n	8009f1c <recv_tcp+0x74>
 8009f0e:	4b22      	ldr	r3, [pc, #136]	; (8009f98 <recv_tcp+0xf0>)
 8009f10:	f240 1235 	movw	r2, #309	; 0x135
 8009f14:	4925      	ldr	r1, [pc, #148]	; (8009fac <recv_tcp+0x104>)
 8009f16:	4822      	ldr	r0, [pc, #136]	; (8009fa0 <recv_tcp+0xf8>)
 8009f18:	f010 ff18 	bl	801ad4c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	3310      	adds	r3, #16
 8009f20:	4618      	mov	r0, r3
 8009f22:	f00e fb17 	bl	8018554 <sys_mbox_valid>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d10d      	bne.n	8009f48 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d008      	beq.n	8009f44 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	891b      	ldrh	r3, [r3, #8]
 8009f36:	4619      	mov	r1, r3
 8009f38:	68b8      	ldr	r0, [r7, #8]
 8009f3a:	f005 fd59 	bl	800f9f0 <tcp_recved>
      pbuf_free(p);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f004 fd74 	bl	800ea2c <pbuf_free>
    }
    return ERR_OK;
 8009f44:	2300      	movs	r3, #0
 8009f46:	e023      	b.n	8009f90 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d005      	beq.n	8009f5a <recv_tcp+0xb2>
    msg = p;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	891b      	ldrh	r3, [r3, #8]
 8009f56:	83fb      	strh	r3, [r7, #30]
 8009f58:	e003      	b.n	8009f62 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8009f5a:	4b15      	ldr	r3, [pc, #84]	; (8009fb0 <recv_tcp+0x108>)
 8009f5c:	61bb      	str	r3, [r7, #24]
    len = 0;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	3310      	adds	r3, #16
 8009f66:	69b9      	ldr	r1, [r7, #24]
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f00e fa91 	bl	8018490 <sys_mbox_trypost>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d002      	beq.n	8009f7a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009f74:	f04f 33ff 	mov.w	r3, #4294967295
 8009f78:	e00a      	b.n	8009f90 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d005      	beq.n	8009f8e <recv_tcp+0xe6>
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f86:	8bfa      	ldrh	r2, [r7, #30]
 8009f88:	2100      	movs	r1, #0
 8009f8a:	6978      	ldr	r0, [r7, #20]
 8009f8c:	4798      	blx	r3
  }

  return ERR_OK;
 8009f8e:	2300      	movs	r3, #0
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3720      	adds	r7, #32
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	0801bd38 	.word	0x0801bd38
 8009f9c:	0801be14 	.word	0x0801be14
 8009fa0:	0801bd7c 	.word	0x0801bd7c
 8009fa4:	0801be38 	.word	0x0801be38
 8009fa8:	0801be58 	.word	0x0801be58
 8009fac:	0801be70 	.word	0x0801be70
 8009fb0:	0801f48e 	.word	0x0801f48e

08009fb4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d106      	bne.n	8009fd6 <poll_tcp+0x22>
 8009fc8:	4b29      	ldr	r3, [pc, #164]	; (800a070 <poll_tcp+0xbc>)
 8009fca:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8009fce:	4929      	ldr	r1, [pc, #164]	; (800a074 <poll_tcp+0xc0>)
 8009fd0:	4829      	ldr	r0, [pc, #164]	; (800a078 <poll_tcp+0xc4>)
 8009fd2:	f010 febb 	bl	801ad4c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	785b      	ldrb	r3, [r3, #1]
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d104      	bne.n	8009fe8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009fde:	2101      	movs	r1, #1
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f000 ffad 	bl	800af40 <lwip_netconn_do_writemore>
 8009fe6:	e016      	b.n	800a016 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	785b      	ldrb	r3, [r3, #1]
 8009fec:	2b04      	cmp	r3, #4
 8009fee:	d112      	bne.n	800a016 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6a1b      	ldr	r3, [r3, #32]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00a      	beq.n	800a00e <poll_tcp+0x5a>
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6a1b      	ldr	r3, [r3, #32]
 8009ffc:	7a5b      	ldrb	r3, [r3, #9]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d005      	beq.n	800a00e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6a1b      	ldr	r3, [r3, #32]
 800a006:	7a5a      	ldrb	r2, [r3, #9]
 800a008:	3a01      	subs	r2, #1
 800a00a:	b2d2      	uxtb	r2, r2
 800a00c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a00e:	2101      	movs	r1, #1
 800a010:	68f8      	ldr	r0, [r7, #12]
 800a012:	f000 fbf7 	bl	800a804 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	7f1b      	ldrb	r3, [r3, #28]
 800a01a:	f003 0310 	and.w	r3, r3, #16
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d021      	beq.n	800a066 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d01d      	beq.n	800a066 <poll_tcp+0xb2>
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a032:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a036:	d316      	bcc.n	800a066 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a040:	2b04      	cmp	r3, #4
 800a042:	d810      	bhi.n	800a066 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	7f1b      	ldrb	r3, [r3, #28]
 800a048:	f023 0310 	bic.w	r3, r3, #16
 800a04c:	b2da      	uxtb	r2, r3
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a056:	2b00      	cmp	r3, #0
 800a058:	d005      	beq.n	800a066 <poll_tcp+0xb2>
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05e:	2200      	movs	r2, #0
 800a060:	2102      	movs	r1, #2
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a066:	2300      	movs	r3, #0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3710      	adds	r7, #16
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	0801bd38 	.word	0x0801bd38
 800a074:	0801be90 	.word	0x0801be90
 800a078:	0801bd7c 	.word	0x0801bd7c

0800a07c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b086      	sub	sp, #24
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	4613      	mov	r3, r2
 800a088:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d106      	bne.n	800a0a2 <sent_tcp+0x26>
 800a094:	4b20      	ldr	r3, [pc, #128]	; (800a118 <sent_tcp+0x9c>)
 800a096:	f240 1293 	movw	r2, #403	; 0x193
 800a09a:	4920      	ldr	r1, [pc, #128]	; (800a11c <sent_tcp+0xa0>)
 800a09c:	4820      	ldr	r0, [pc, #128]	; (800a120 <sent_tcp+0xa4>)
 800a09e:	f010 fe55 	bl	801ad4c <iprintf>

  if (conn) {
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d032      	beq.n	800a10e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	785b      	ldrb	r3, [r3, #1]
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d104      	bne.n	800a0ba <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a0b0:	2101      	movs	r1, #1
 800a0b2:	6978      	ldr	r0, [r7, #20]
 800a0b4:	f000 ff44 	bl	800af40 <lwip_netconn_do_writemore>
 800a0b8:	e007      	b.n	800a0ca <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	785b      	ldrb	r3, [r3, #1]
 800a0be:	2b04      	cmp	r3, #4
 800a0c0:	d103      	bne.n	800a0ca <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a0c2:	2101      	movs	r1, #1
 800a0c4:	6978      	ldr	r0, [r7, #20]
 800a0c6:	f000 fb9d 	bl	800a804 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d01d      	beq.n	800a10e <sent_tcp+0x92>
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a0da:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a0de:	d316      	bcc.n	800a10e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a0e8:	2b04      	cmp	r3, #4
 800a0ea:	d810      	bhi.n	800a10e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	7f1b      	ldrb	r3, [r3, #28]
 800a0f0:	f023 0310 	bic.w	r3, r3, #16
 800a0f4:	b2da      	uxtb	r2, r3
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d005      	beq.n	800a10e <sent_tcp+0x92>
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a106:	88fa      	ldrh	r2, [r7, #6]
 800a108:	2102      	movs	r1, #2
 800a10a:	6978      	ldr	r0, [r7, #20]
 800a10c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	4618      	mov	r0, r3
 800a112:	3718      	adds	r7, #24
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	0801bd38 	.word	0x0801bd38
 800a11c:	0801be90 	.word	0x0801be90
 800a120:	0801bd7c 	.word	0x0801bd7c

0800a124 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b088      	sub	sp, #32
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	460b      	mov	r3, r1
 800a12e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d106      	bne.n	800a148 <err_tcp+0x24>
 800a13a:	4b5f      	ldr	r3, [pc, #380]	; (800a2b8 <err_tcp+0x194>)
 800a13c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800a140:	495e      	ldr	r1, [pc, #376]	; (800a2bc <err_tcp+0x198>)
 800a142:	485f      	ldr	r0, [pc, #380]	; (800a2c0 <err_tcp+0x19c>)
 800a144:	f010 fe02 	bl	801ad4c <iprintf>

  SYS_ARCH_PROTECT(lev);
 800a148:	f00e fb0e 	bl	8018768 <sys_arch_protect>
 800a14c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	2200      	movs	r2, #0
 800a152:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	78fa      	ldrb	r2, [r7, #3]
 800a158:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a15a:	69fb      	ldr	r3, [r7, #28]
 800a15c:	7f1b      	ldrb	r3, [r3, #28]
 800a15e:	f043 0301 	orr.w	r3, r3, #1
 800a162:	b2da      	uxtb	r2, r3
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	785b      	ldrb	r3, [r3, #1]
 800a16c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	2200      	movs	r2, #0
 800a172:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800a174:	69b8      	ldr	r0, [r7, #24]
 800a176:	f00e fb05 	bl	8018784 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d005      	beq.n	800a18e <err_tcp+0x6a>
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a186:	2200      	movs	r2, #0
 800a188:	2104      	movs	r1, #4
 800a18a:	69f8      	ldr	r0, [r7, #28]
 800a18c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a192:	2b00      	cmp	r3, #0
 800a194:	d005      	beq.n	800a1a2 <err_tcp+0x7e>
 800a196:	69fb      	ldr	r3, [r7, #28]
 800a198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19a:	2200      	movs	r2, #0
 800a19c:	2100      	movs	r1, #0
 800a19e:	69f8      	ldr	r0, [r7, #28]
 800a1a0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d005      	beq.n	800a1b6 <err_tcp+0x92>
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	2102      	movs	r1, #2
 800a1b2:	69f8      	ldr	r0, [r7, #28]
 800a1b4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800a1b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7ff fd86 	bl	8009ccc <lwip_netconn_err_to_msg>
 800a1c0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a1c2:	69fb      	ldr	r3, [r7, #28]
 800a1c4:	3310      	adds	r3, #16
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f00e f9c4 	bl	8018554 <sys_mbox_valid>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d005      	beq.n	800a1de <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	3310      	adds	r3, #16
 800a1d6:	6939      	ldr	r1, [r7, #16]
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f00e f959 	bl	8018490 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	3314      	adds	r3, #20
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f00e f9b6 	bl	8018554 <sys_mbox_valid>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d005      	beq.n	800a1fa <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	3314      	adds	r3, #20
 800a1f2:	6939      	ldr	r1, [r7, #16]
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f00e f94b 	bl	8018490 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a1fa:	7dfb      	ldrb	r3, [r7, #23]
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d005      	beq.n	800a20c <err_tcp+0xe8>
 800a200:	7dfb      	ldrb	r3, [r7, #23]
 800a202:	2b04      	cmp	r3, #4
 800a204:	d002      	beq.n	800a20c <err_tcp+0xe8>
 800a206:	7dfb      	ldrb	r3, [r7, #23]
 800a208:	2b03      	cmp	r3, #3
 800a20a:	d143      	bne.n	800a294 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	7f1b      	ldrb	r3, [r3, #28]
 800a210:	f003 0304 	and.w	r3, r3, #4
 800a214:	2b00      	cmp	r3, #0
 800a216:	bf14      	ite	ne
 800a218:	2301      	movne	r3, #1
 800a21a:	2300      	moveq	r3, #0
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	7f1b      	ldrb	r3, [r3, #28]
 800a224:	f023 0304 	bic.w	r3, r3, #4
 800a228:	b2da      	uxtb	r2, r3
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d13b      	bne.n	800a2ac <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	6a1b      	ldr	r3, [r3, #32]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d106      	bne.n	800a24a <err_tcp+0x126>
 800a23c:	4b1e      	ldr	r3, [pc, #120]	; (800a2b8 <err_tcp+0x194>)
 800a23e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a242:	4920      	ldr	r1, [pc, #128]	; (800a2c4 <err_tcp+0x1a0>)
 800a244:	481e      	ldr	r0, [pc, #120]	; (800a2c0 <err_tcp+0x19c>)
 800a246:	f010 fd81 	bl	801ad4c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800a24a:	7dfb      	ldrb	r3, [r7, #23]
 800a24c:	2b04      	cmp	r3, #4
 800a24e:	d104      	bne.n	800a25a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a250:	69fb      	ldr	r3, [r7, #28]
 800a252:	6a1b      	ldr	r3, [r3, #32]
 800a254:	2200      	movs	r2, #0
 800a256:	711a      	strb	r2, [r3, #4]
 800a258:	e003      	b.n	800a262 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	6a1b      	ldr	r3, [r3, #32]
 800a25e:	78fa      	ldrb	r2, [r7, #3]
 800a260:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a262:	69fb      	ldr	r3, [r7, #28]
 800a264:	6a1b      	ldr	r3, [r3, #32]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	330c      	adds	r3, #12
 800a26a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a26c:	68b8      	ldr	r0, [r7, #8]
 800a26e:	f00e f9ff 	bl	8018670 <sys_sem_valid>
 800a272:	4603      	mov	r3, r0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d106      	bne.n	800a286 <err_tcp+0x162>
 800a278:	4b0f      	ldr	r3, [pc, #60]	; (800a2b8 <err_tcp+0x194>)
 800a27a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800a27e:	4912      	ldr	r1, [pc, #72]	; (800a2c8 <err_tcp+0x1a4>)
 800a280:	480f      	ldr	r0, [pc, #60]	; (800a2c0 <err_tcp+0x19c>)
 800a282:	f010 fd63 	bl	801ad4c <iprintf>
      conn->current_msg = NULL;
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	2200      	movs	r2, #0
 800a28a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a28c:	68b8      	ldr	r0, [r7, #8]
 800a28e:	f00e f9d5 	bl	801863c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a292:	e00b      	b.n	800a2ac <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	6a1b      	ldr	r3, [r3, #32]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d008      	beq.n	800a2ae <err_tcp+0x18a>
 800a29c:	4b06      	ldr	r3, [pc, #24]	; (800a2b8 <err_tcp+0x194>)
 800a29e:	f240 12f7 	movw	r2, #503	; 0x1f7
 800a2a2:	490a      	ldr	r1, [pc, #40]	; (800a2cc <err_tcp+0x1a8>)
 800a2a4:	4806      	ldr	r0, [pc, #24]	; (800a2c0 <err_tcp+0x19c>)
 800a2a6:	f010 fd51 	bl	801ad4c <iprintf>
  }
}
 800a2aa:	e000      	b.n	800a2ae <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800a2ac:	bf00      	nop
}
 800a2ae:	bf00      	nop
 800a2b0:	3720      	adds	r7, #32
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	0801bd38 	.word	0x0801bd38
 800a2bc:	0801be90 	.word	0x0801be90
 800a2c0:	0801bd7c 	.word	0x0801bd7c
 800a2c4:	0801bea0 	.word	0x0801bea0
 800a2c8:	0801bebc 	.word	0x0801bebc
 800a2cc:	0801bed8 	.word	0x0801bed8

0800a2d0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a2de:	6879      	ldr	r1, [r7, #4]
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f006 fa4b 	bl	801077c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a2e6:	490a      	ldr	r1, [pc, #40]	; (800a310 <setup_tcp+0x40>)
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f006 fa59 	bl	80107a0 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a2ee:	4909      	ldr	r1, [pc, #36]	; (800a314 <setup_tcp+0x44>)
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	f006 fa77 	bl	80107e4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a2f6:	2202      	movs	r2, #2
 800a2f8:	4907      	ldr	r1, [pc, #28]	; (800a318 <setup_tcp+0x48>)
 800a2fa:	68f8      	ldr	r0, [r7, #12]
 800a2fc:	f006 face 	bl	801089c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a300:	4906      	ldr	r1, [pc, #24]	; (800a31c <setup_tcp+0x4c>)
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	f006 fa90 	bl	8010828 <tcp_err>
}
 800a308:	bf00      	nop
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	08009ea9 	.word	0x08009ea9
 800a314:	0800a07d 	.word	0x0800a07d
 800a318:	08009fb5 	.word	0x08009fb5
 800a31c:	0800a125 	.word	0x0800a125

0800a320 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800a320:	b590      	push	{r4, r7, lr}
 800a322:	b089      	sub	sp, #36	; 0x24
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	4613      	mov	r3, r2
 800a32c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d102      	bne.n	800a33e <accept_function+0x1e>
    return ERR_VAL;
 800a338:	f06f 0305 	mvn.w	r3, #5
 800a33c:	e0a1      	b.n	800a482 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	3314      	adds	r3, #20
 800a342:	4618      	mov	r0, r3
 800a344:	f00e f906 	bl	8018554 <sys_mbox_valid>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d102      	bne.n	800a354 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800a34e:	f06f 0305 	mvn.w	r3, #5
 800a352:	e096      	b.n	800a482 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d11b      	bne.n	800a392 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	f103 0414 	add.w	r4, r3, #20
 800a360:	f06f 000c 	mvn.w	r0, #12
 800a364:	f7ff fcb2 	bl	8009ccc <lwip_netconn_err_to_msg>
 800a368:	4603      	mov	r3, r0
 800a36a:	4619      	mov	r1, r3
 800a36c:	4620      	mov	r0, r4
 800a36e:	f00e f88f 	bl	8018490 <sys_mbox_trypost>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d109      	bne.n	800a38c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d005      	beq.n	800a38c <accept_function+0x6c>
 800a380:	69fb      	ldr	r3, [r7, #28]
 800a382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a384:	2200      	movs	r2, #0
 800a386:	2100      	movs	r1, #0
 800a388:	69f8      	ldr	r0, [r7, #28]
 800a38a:	4798      	blx	r3
    }
    return ERR_VAL;
 800a38c:	f06f 0305 	mvn.w	r3, #5
 800a390:	e077      	b.n	800a482 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800a392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d006      	beq.n	800a3a8 <accept_function+0x88>
 800a39a:	4b3c      	ldr	r3, [pc, #240]	; (800a48c <accept_function+0x16c>)
 800a39c:	f240 222a 	movw	r2, #554	; 0x22a
 800a3a0:	493b      	ldr	r1, [pc, #236]	; (800a490 <accept_function+0x170>)
 800a3a2:	483c      	ldr	r0, [pc, #240]	; (800a494 <accept_function+0x174>)
 800a3a4:	f010 fcd2 	bl	801ad4c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	781a      	ldrb	r2, [r3, #0]
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	4610      	mov	r0, r2
 800a3b4:	f000 f8f0 	bl	800a598 <netconn_alloc>
 800a3b8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d11b      	bne.n	800a3f8 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a3c0:	69fb      	ldr	r3, [r7, #28]
 800a3c2:	f103 0414 	add.w	r4, r3, #20
 800a3c6:	f06f 000c 	mvn.w	r0, #12
 800a3ca:	f7ff fc7f 	bl	8009ccc <lwip_netconn_err_to_msg>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	4620      	mov	r0, r4
 800a3d4:	f00e f85c 	bl	8018490 <sys_mbox_trypost>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d109      	bne.n	800a3f2 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d005      	beq.n	800a3f2 <accept_function+0xd2>
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	69f8      	ldr	r0, [r7, #28]
 800a3f0:	4798      	blx	r3
    }
    return ERR_MEM;
 800a3f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a3f6:	e044      	b.n	800a482 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800a3f8:	69bb      	ldr	r3, [r7, #24]
 800a3fa:	68ba      	ldr	r2, [r7, #8]
 800a3fc:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800a3fe:	69b8      	ldr	r0, [r7, #24]
 800a400:	f7ff ff66 	bl	800a2d0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800a404:	69fb      	ldr	r3, [r7, #28]
 800a406:	3314      	adds	r3, #20
 800a408:	69b9      	ldr	r1, [r7, #24]
 800a40a:	4618      	mov	r0, r3
 800a40c:	f00e f840 	bl	8018490 <sys_mbox_trypost>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d02a      	beq.n	800a46c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800a416:	69bb      	ldr	r3, [r7, #24]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800a41c:	2100      	movs	r1, #0
 800a41e:	6978      	ldr	r0, [r7, #20]
 800a420:	f006 f9ac 	bl	801077c <tcp_arg>
    tcp_recv(pcb, NULL);
 800a424:	2100      	movs	r1, #0
 800a426:	6978      	ldr	r0, [r7, #20]
 800a428:	f006 f9ba 	bl	80107a0 <tcp_recv>
    tcp_sent(pcb, NULL);
 800a42c:	2100      	movs	r1, #0
 800a42e:	6978      	ldr	r0, [r7, #20]
 800a430:	f006 f9d8 	bl	80107e4 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800a434:	2200      	movs	r2, #0
 800a436:	2100      	movs	r1, #0
 800a438:	6978      	ldr	r0, [r7, #20]
 800a43a:	f006 fa2f 	bl	801089c <tcp_poll>
    tcp_err(pcb, NULL);
 800a43e:	2100      	movs	r1, #0
 800a440:	6978      	ldr	r0, [r7, #20]
 800a442:	f006 f9f1 	bl	8010828 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800a446:	69bb      	ldr	r3, [r7, #24]
 800a448:	2200      	movs	r2, #0
 800a44a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	3310      	adds	r3, #16
 800a450:	4618      	mov	r0, r3
 800a452:	f00e f80b 	bl	801846c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	3310      	adds	r3, #16
 800a45a:	4618      	mov	r0, r3
 800a45c:	f00e f88b 	bl	8018576 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800a460:	69b8      	ldr	r0, [r7, #24]
 800a462:	f000 f907 	bl	800a674 <netconn_free>
    return ERR_MEM;
 800a466:	f04f 33ff 	mov.w	r3, #4294967295
 800a46a:	e00a      	b.n	800a482 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a470:	2b00      	cmp	r3, #0
 800a472:	d005      	beq.n	800a480 <accept_function+0x160>
 800a474:	69fb      	ldr	r3, [r7, #28]
 800a476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a478:	2200      	movs	r2, #0
 800a47a:	2100      	movs	r1, #0
 800a47c:	69f8      	ldr	r0, [r7, #28]
 800a47e:	4798      	blx	r3
  }

  return ERR_OK;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	3724      	adds	r7, #36	; 0x24
 800a486:	46bd      	mov	sp, r7
 800a488:	bd90      	pop	{r4, r7, pc}
 800a48a:	bf00      	nop
 800a48c:	0801bd38 	.word	0x0801bd38
 800a490:	0801bef4 	.word	0x0801bef4
 800a494:	0801bd7c 	.word	0x0801bd7c

0800a498 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a498:	b590      	push	{r4, r7, lr}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d006      	beq.n	800a4bc <pcb_new+0x24>
 800a4ae:	4b2b      	ldr	r3, [pc, #172]	; (800a55c <pcb_new+0xc4>)
 800a4b0:	f240 2265 	movw	r2, #613	; 0x265
 800a4b4:	492a      	ldr	r1, [pc, #168]	; (800a560 <pcb_new+0xc8>)
 800a4b6:	482b      	ldr	r0, [pc, #172]	; (800a564 <pcb_new+0xcc>)
 800a4b8:	f010 fc48 	bl	801ad4c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4c6:	2b10      	cmp	r3, #16
 800a4c8:	d022      	beq.n	800a510 <pcb_new+0x78>
 800a4ca:	2b20      	cmp	r3, #32
 800a4cc:	d133      	bne.n	800a536 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681c      	ldr	r4, [r3, #0]
 800a4d2:	7bfb      	ldrb	r3, [r7, #15]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f00b fc30 	bl	8015d3a <udp_new_ip_type>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d02a      	beq.n	800a53e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	2b22      	cmp	r3, #34	; 0x22
 800a4f0:	d104      	bne.n	800a4fc <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	6858      	ldr	r0, [r3, #4]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	461a      	mov	r2, r3
 800a508:	4917      	ldr	r1, [pc, #92]	; (800a568 <pcb_new+0xd0>)
 800a50a:	f00b fb9d 	bl	8015c48 <udp_recv>
      }
      break;
 800a50e:	e016      	b.n	800a53e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681c      	ldr	r4, [r3, #0]
 800a514:	7bfb      	ldrb	r3, [r7, #15]
 800a516:	4618      	mov	r0, r3
 800a518:	f006 f922 	bl	8010760 <tcp_new_ip_type>
 800a51c:	4603      	mov	r3, r0
 800a51e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d00b      	beq.n	800a542 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4618      	mov	r0, r3
 800a530:	f7ff fece 	bl	800a2d0 <setup_tcp>
      }
      break;
 800a534:	e005      	b.n	800a542 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	22fa      	movs	r2, #250	; 0xfa
 800a53a:	711a      	strb	r2, [r3, #4]
      return;
 800a53c:	e00a      	b.n	800a554 <pcb_new+0xbc>
      break;
 800a53e:	bf00      	nop
 800a540:	e000      	b.n	800a544 <pcb_new+0xac>
      break;
 800a542:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d102      	bne.n	800a554 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	22ff      	movs	r2, #255	; 0xff
 800a552:	711a      	strb	r2, [r3, #4]
  }
}
 800a554:	3714      	adds	r7, #20
 800a556:	46bd      	mov	sp, r7
 800a558:	bd90      	pop	{r4, r7, pc}
 800a55a:	bf00      	nop
 800a55c:	0801bd38 	.word	0x0801bd38
 800a560:	0801bf1c 	.word	0x0801bf1c
 800a564:	0801bd7c 	.word	0x0801bd7c
 800a568:	08009dad 	.word	0x08009dad

0800a56c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d102      	bne.n	800a58e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f7ff ff85 	bl	800a498 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a58e:	bf00      	nop
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
	...

0800a598 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b086      	sub	sp, #24
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	4603      	mov	r3, r0
 800a5a0:	6039      	str	r1, [r7, #0]
 800a5a2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a5a8:	2007      	movs	r0, #7
 800a5aa:	f003 fadf 	bl	800db6c <memp_malloc>
 800a5ae:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d101      	bne.n	800a5ba <netconn_alloc+0x22>
    return NULL;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	e052      	b.n	800a660 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	79fa      	ldrb	r2, [r7, #7]
 800a5c4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a5cc:	79fb      	ldrb	r3, [r7, #7]
 800a5ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5d2:	2b10      	cmp	r3, #16
 800a5d4:	d004      	beq.n	800a5e0 <netconn_alloc+0x48>
 800a5d6:	2b20      	cmp	r3, #32
 800a5d8:	d105      	bne.n	800a5e6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a5da:	2306      	movs	r3, #6
 800a5dc:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a5de:	e00a      	b.n	800a5f6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a5e0:	2306      	movs	r3, #6
 800a5e2:	617b      	str	r3, [r7, #20]
      break;
 800a5e4:	e007      	b.n	800a5f6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a5e6:	4b20      	ldr	r3, [pc, #128]	; (800a668 <netconn_alloc+0xd0>)
 800a5e8:	f240 22e5 	movw	r2, #741	; 0x2e5
 800a5ec:	491f      	ldr	r1, [pc, #124]	; (800a66c <netconn_alloc+0xd4>)
 800a5ee:	4820      	ldr	r0, [pc, #128]	; (800a670 <netconn_alloc+0xd8>)
 800a5f0:	f010 fbac 	bl	801ad4c <iprintf>
      goto free_and_return;
 800a5f4:	e02f      	b.n	800a656 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	3310      	adds	r3, #16
 800a5fa:	6979      	ldr	r1, [r7, #20]
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f00d ff1b 	bl	8018438 <sys_mbox_new>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d125      	bne.n	800a654 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	330c      	adds	r3, #12
 800a60c:	2100      	movs	r1, #0
 800a60e:	4618      	mov	r0, r3
 800a610:	f00d ffbe 	bl	8018590 <sys_sem_new>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d005      	beq.n	800a626 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	3310      	adds	r3, #16
 800a61e:	4618      	mov	r0, r3
 800a620:	f00d ff24 	bl	801846c <sys_mbox_free>
    goto free_and_return;
 800a624:	e017      	b.n	800a656 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	3314      	adds	r3, #20
 800a62a:	4618      	mov	r0, r3
 800a62c:	f00d ffa3 	bl	8018576 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2200      	movs	r2, #0
 800a634:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f04f 32ff 	mov.w	r2, #4294967295
 800a63c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	683a      	ldr	r2, [r7, #0]
 800a642:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2200      	movs	r2, #0
 800a648:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	7cfa      	ldrb	r2, [r7, #19]
 800a64e:	771a      	strb	r2, [r3, #28]
  return conn;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	e005      	b.n	800a660 <netconn_alloc+0xc8>
    goto free_and_return;
 800a654:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a656:	68f9      	ldr	r1, [r7, #12]
 800a658:	2007      	movs	r0, #7
 800a65a:	f003 fad9 	bl	800dc10 <memp_free>
  return NULL;
 800a65e:	2300      	movs	r3, #0
}
 800a660:	4618      	mov	r0, r3
 800a662:	3718      	adds	r7, #24
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}
 800a668:	0801bd38 	.word	0x0801bd38
 800a66c:	0801bf3c 	.word	0x0801bf3c
 800a670:	0801bd7c 	.word	0x0801bd7c

0800a674 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d006      	beq.n	800a692 <netconn_free+0x1e>
 800a684:	4b1b      	ldr	r3, [pc, #108]	; (800a6f4 <netconn_free+0x80>)
 800a686:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a68a:	491b      	ldr	r1, [pc, #108]	; (800a6f8 <netconn_free+0x84>)
 800a68c:	481b      	ldr	r0, [pc, #108]	; (800a6fc <netconn_free+0x88>)
 800a68e:	f010 fb5d 	bl	801ad4c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	3310      	adds	r3, #16
 800a696:	4618      	mov	r0, r3
 800a698:	f00d ff5c 	bl	8018554 <sys_mbox_valid>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d006      	beq.n	800a6b0 <netconn_free+0x3c>
 800a6a2:	4b14      	ldr	r3, [pc, #80]	; (800a6f4 <netconn_free+0x80>)
 800a6a4:	f240 3223 	movw	r2, #803	; 0x323
 800a6a8:	4915      	ldr	r1, [pc, #84]	; (800a700 <netconn_free+0x8c>)
 800a6aa:	4814      	ldr	r0, [pc, #80]	; (800a6fc <netconn_free+0x88>)
 800a6ac:	f010 fb4e 	bl	801ad4c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	3314      	adds	r3, #20
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f00d ff4d 	bl	8018554 <sys_mbox_valid>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d006      	beq.n	800a6ce <netconn_free+0x5a>
 800a6c0:	4b0c      	ldr	r3, [pc, #48]	; (800a6f4 <netconn_free+0x80>)
 800a6c2:	f240 3226 	movw	r2, #806	; 0x326
 800a6c6:	490f      	ldr	r1, [pc, #60]	; (800a704 <netconn_free+0x90>)
 800a6c8:	480c      	ldr	r0, [pc, #48]	; (800a6fc <netconn_free+0x88>)
 800a6ca:	f010 fb3f 	bl	801ad4c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	330c      	adds	r3, #12
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f00d ffbf 	bl	8018656 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	330c      	adds	r3, #12
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f00d ffd8 	bl	8018692 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a6e2:	6879      	ldr	r1, [r7, #4]
 800a6e4:	2007      	movs	r0, #7
 800a6e6:	f003 fa93 	bl	800dc10 <memp_free>
}
 800a6ea:	bf00      	nop
 800a6ec:	3708      	adds	r7, #8
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	0801bd38 	.word	0x0801bd38
 800a6f8:	0801bf64 	.word	0x0801bf64
 800a6fc:	0801bd7c 	.word	0x0801bd7c
 800a700:	0801bf94 	.word	0x0801bf94
 800a704:	0801bfd0 	.word	0x0801bfd0

0800a708 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b086      	sub	sp, #24
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	3310      	adds	r3, #16
 800a714:	4618      	mov	r0, r3
 800a716:	f00d ff1d 	bl	8018554 <sys_mbox_valid>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d02f      	beq.n	800a780 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a720:	e018      	b.n	800a754 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a72a:	2b10      	cmp	r3, #16
 800a72c:	d10e      	bne.n	800a74c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	f107 020f 	add.w	r2, r7, #15
 800a734:	4611      	mov	r1, r2
 800a736:	4618      	mov	r0, r3
 800a738:	f7ff fafe 	bl	8009d38 <lwip_netconn_is_err_msg>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d108      	bne.n	800a754 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	4618      	mov	r0, r3
 800a746:	f004 f971 	bl	800ea2c <pbuf_free>
 800a74a:	e003      	b.n	800a754 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	4618      	mov	r0, r3
 800a750:	f000 ff7e 	bl	800b650 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	3310      	adds	r3, #16
 800a758:	f107 0210 	add.w	r2, r7, #16
 800a75c:	4611      	mov	r1, r2
 800a75e:	4618      	mov	r0, r3
 800a760:	f00d fee1 	bl	8018526 <sys_arch_mbox_tryfetch>
 800a764:	4603      	mov	r3, r0
 800a766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76a:	d1da      	bne.n	800a722 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	3310      	adds	r3, #16
 800a770:	4618      	mov	r0, r3
 800a772:	f00d fe7b 	bl	801846c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	3310      	adds	r3, #16
 800a77a:	4618      	mov	r0, r3
 800a77c:	f00d fefb 	bl	8018576 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	3314      	adds	r3, #20
 800a784:	4618      	mov	r0, r3
 800a786:	f00d fee5 	bl	8018554 <sys_mbox_valid>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d034      	beq.n	800a7fa <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a790:	e01d      	b.n	800a7ce <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	f107 020e 	add.w	r2, r7, #14
 800a798:	4611      	mov	r1, r2
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7ff facc 	bl	8009d38 <lwip_netconn_is_err_msg>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d113      	bne.n	800a7ce <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a7aa:	6978      	ldr	r0, [r7, #20]
 800a7ac:	f7ff ffac 	bl	800a708 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d007      	beq.n	800a7c8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f004 ff35 	bl	800f62c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a7c8:	6978      	ldr	r0, [r7, #20]
 800a7ca:	f7ff ff53 	bl	800a674 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	3314      	adds	r3, #20
 800a7d2:	f107 0210 	add.w	r2, r7, #16
 800a7d6:	4611      	mov	r1, r2
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f00d fea4 	bl	8018526 <sys_arch_mbox_tryfetch>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7e4:	d1d5      	bne.n	800a792 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	3314      	adds	r3, #20
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f00d fe3e 	bl	801846c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	3314      	adds	r3, #20
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f00d febe 	bl	8018576 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a7fa:	bf00      	nop
 800a7fc:	3718      	adds	r7, #24
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
	...

0800a804 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b086      	sub	sp, #24
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	460b      	mov	r3, r1
 800a80e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a810:	2300      	movs	r3, #0
 800a812:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d106      	bne.n	800a828 <lwip_netconn_do_close_internal+0x24>
 800a81a:	4ba1      	ldr	r3, [pc, #644]	; (800aaa0 <lwip_netconn_do_close_internal+0x29c>)
 800a81c:	f240 32a2 	movw	r2, #930	; 0x3a2
 800a820:	49a0      	ldr	r1, [pc, #640]	; (800aaa4 <lwip_netconn_do_close_internal+0x2a0>)
 800a822:	48a1      	ldr	r0, [pc, #644]	; (800aaa8 <lwip_netconn_do_close_internal+0x2a4>)
 800a824:	f010 fa92 	bl	801ad4c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a830:	2b10      	cmp	r3, #16
 800a832:	d006      	beq.n	800a842 <lwip_netconn_do_close_internal+0x3e>
 800a834:	4b9a      	ldr	r3, [pc, #616]	; (800aaa0 <lwip_netconn_do_close_internal+0x29c>)
 800a836:	f240 32a3 	movw	r2, #931	; 0x3a3
 800a83a:	499c      	ldr	r1, [pc, #624]	; (800aaac <lwip_netconn_do_close_internal+0x2a8>)
 800a83c:	489a      	ldr	r0, [pc, #616]	; (800aaa8 <lwip_netconn_do_close_internal+0x2a4>)
 800a83e:	f010 fa85 	bl	801ad4c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	785b      	ldrb	r3, [r3, #1]
 800a846:	2b04      	cmp	r3, #4
 800a848:	d006      	beq.n	800a858 <lwip_netconn_do_close_internal+0x54>
 800a84a:	4b95      	ldr	r3, [pc, #596]	; (800aaa0 <lwip_netconn_do_close_internal+0x29c>)
 800a84c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800a850:	4997      	ldr	r1, [pc, #604]	; (800aab0 <lwip_netconn_do_close_internal+0x2ac>)
 800a852:	4895      	ldr	r0, [pc, #596]	; (800aaa8 <lwip_netconn_do_close_internal+0x2a4>)
 800a854:	f010 fa7a 	bl	801ad4c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d106      	bne.n	800a86e <lwip_netconn_do_close_internal+0x6a>
 800a860:	4b8f      	ldr	r3, [pc, #572]	; (800aaa0 <lwip_netconn_do_close_internal+0x29c>)
 800a862:	f240 32a5 	movw	r2, #933	; 0x3a5
 800a866:	4993      	ldr	r1, [pc, #588]	; (800aab4 <lwip_netconn_do_close_internal+0x2b0>)
 800a868:	488f      	ldr	r0, [pc, #572]	; (800aaa8 <lwip_netconn_do_close_internal+0x2a4>)
 800a86a:	f010 fa6f 	bl	801ad4c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6a1b      	ldr	r3, [r3, #32]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d106      	bne.n	800a884 <lwip_netconn_do_close_internal+0x80>
 800a876:	4b8a      	ldr	r3, [pc, #552]	; (800aaa0 <lwip_netconn_do_close_internal+0x29c>)
 800a878:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a87c:	498e      	ldr	r1, [pc, #568]	; (800aab8 <lwip_netconn_do_close_internal+0x2b4>)
 800a87e:	488a      	ldr	r0, [pc, #552]	; (800aaa8 <lwip_netconn_do_close_internal+0x2a4>)
 800a880:	f010 fa64 	bl	801ad4c <iprintf>

  tpcb = conn->pcb.tcp;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a1b      	ldr	r3, [r3, #32]
 800a88e:	7a1b      	ldrb	r3, [r3, #8]
 800a890:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a892:	7bfb      	ldrb	r3, [r7, #15]
 800a894:	f003 0301 	and.w	r3, r3, #1
 800a898:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a89a:	7bfb      	ldrb	r3, [r7, #15]
 800a89c:	f003 0302 	and.w	r3, r3, #2
 800a8a0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a8a2:	7bfb      	ldrb	r3, [r7, #15]
 800a8a4:	2b03      	cmp	r3, #3
 800a8a6:	d102      	bne.n	800a8ae <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	75bb      	strb	r3, [r7, #22]
 800a8ac:	e01f      	b.n	800a8ee <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a8ae:	7bbb      	ldrb	r3, [r7, #14]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d00e      	beq.n	800a8d2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a8b8:	2b05      	cmp	r3, #5
 800a8ba:	d007      	beq.n	800a8cc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a8c0:	2b06      	cmp	r3, #6
 800a8c2:	d003      	beq.n	800a8cc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a8c8:	2b08      	cmp	r3, #8
 800a8ca:	d102      	bne.n	800a8d2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	75bb      	strb	r3, [r7, #22]
 800a8d0:	e00d      	b.n	800a8ee <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a8d2:	7b7b      	ldrb	r3, [r7, #13]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d008      	beq.n	800a8ea <lwip_netconn_do_close_internal+0xe6>
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	8b5b      	ldrh	r3, [r3, #26]
 800a8dc:	f003 0310 	and.w	r3, r3, #16
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d002      	beq.n	800a8ea <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	75bb      	strb	r3, [r7, #22]
 800a8e8:	e001      	b.n	800a8ee <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a8ee:	7dbb      	ldrb	r3, [r7, #22]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d003      	beq.n	800a8fc <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a8f4:	2100      	movs	r1, #0
 800a8f6:	6938      	ldr	r0, [r7, #16]
 800a8f8:	f005 ff40 	bl	801077c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	7d1b      	ldrb	r3, [r3, #20]
 800a900:	2b01      	cmp	r3, #1
 800a902:	d104      	bne.n	800a90e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a904:	2100      	movs	r1, #0
 800a906:	6938      	ldr	r0, [r7, #16]
 800a908:	f005 ffb0 	bl	801086c <tcp_accept>
 800a90c:	e01d      	b.n	800a94a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a90e:	7bbb      	ldrb	r3, [r7, #14]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d007      	beq.n	800a924 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a914:	2100      	movs	r1, #0
 800a916:	6938      	ldr	r0, [r7, #16]
 800a918:	f005 ff42 	bl	80107a0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a91c:	2100      	movs	r1, #0
 800a91e:	6938      	ldr	r0, [r7, #16]
 800a920:	f005 ffa4 	bl	801086c <tcp_accept>
    }
    if (shut_tx) {
 800a924:	7b7b      	ldrb	r3, [r7, #13]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d003      	beq.n	800a932 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a92a:	2100      	movs	r1, #0
 800a92c:	6938      	ldr	r0, [r7, #16]
 800a92e:	f005 ff59 	bl	80107e4 <tcp_sent>
    }
    if (shut_close) {
 800a932:	7dbb      	ldrb	r3, [r7, #22]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d008      	beq.n	800a94a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a938:	2200      	movs	r2, #0
 800a93a:	2100      	movs	r1, #0
 800a93c:	6938      	ldr	r0, [r7, #16]
 800a93e:	f005 ffad 	bl	801089c <tcp_poll>
      tcp_err(tpcb, NULL);
 800a942:	2100      	movs	r1, #0
 800a944:	6938      	ldr	r0, [r7, #16]
 800a946:	f005 ff6f 	bl	8010828 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a94a:	7dbb      	ldrb	r3, [r7, #22]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d005      	beq.n	800a95c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a950:	6938      	ldr	r0, [r7, #16]
 800a952:	f004 fd25 	bl	800f3a0 <tcp_close>
 800a956:	4603      	mov	r3, r0
 800a958:	75fb      	strb	r3, [r7, #23]
 800a95a:	e007      	b.n	800a96c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a95c:	7bbb      	ldrb	r3, [r7, #14]
 800a95e:	7b7a      	ldrb	r2, [r7, #13]
 800a960:	4619      	mov	r1, r3
 800a962:	6938      	ldr	r0, [r7, #16]
 800a964:	f004 fd48 	bl	800f3f8 <tcp_shutdown>
 800a968:	4603      	mov	r3, r0
 800a96a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a96c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d102      	bne.n	800a97a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a974:	2301      	movs	r3, #1
 800a976:	757b      	strb	r3, [r7, #21]
 800a978:	e016      	b.n	800a9a8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a97a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a97e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a982:	d10f      	bne.n	800a9a4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6a1b      	ldr	r3, [r3, #32]
 800a988:	7a5b      	ldrb	r3, [r3, #9]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d10c      	bne.n	800a9a8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a98e:	2301      	movs	r3, #1
 800a990:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a992:	7dbb      	ldrb	r3, [r7, #22]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d007      	beq.n	800a9a8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a998:	6938      	ldr	r0, [r7, #16]
 800a99a:	f004 fe47 	bl	800f62c <tcp_abort>
          err = ERR_OK;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	75fb      	strb	r3, [r7, #23]
 800a9a2:	e001      	b.n	800a9a8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a9a8:	7d7b      	ldrb	r3, [r7, #21]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d044      	beq.n	800aa38 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6a1b      	ldr	r3, [r3, #32]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	330c      	adds	r3, #12
 800a9b6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6a1b      	ldr	r3, [r3, #32]
 800a9bc:	7dfa      	ldrb	r2, [r7, #23]
 800a9be:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a9cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d129      	bne.n	800aa28 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a9d4:	7dbb      	ldrb	r3, [r7, #22]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d00c      	beq.n	800a9f4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d005      	beq.n	800a9f4 <lwip_netconn_do_close_internal+0x1f0>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	2104      	movs	r1, #4
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	4798      	blx	r3
      }
      if (shut_rx) {
 800a9f4:	7bbb      	ldrb	r3, [r7, #14]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d009      	beq.n	800aa0e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d005      	beq.n	800aa0e <lwip_netconn_do_close_internal+0x20a>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa06:	2200      	movs	r2, #0
 800aa08:	2100      	movs	r1, #0
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	4798      	blx	r3
      }
      if (shut_tx) {
 800aa0e:	7b7b      	ldrb	r3, [r7, #13]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d009      	beq.n	800aa28 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d005      	beq.n	800aa28 <lwip_netconn_do_close_internal+0x224>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa20:	2200      	movs	r2, #0
 800aa22:	2102      	movs	r1, #2
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800aa28:	78fb      	ldrb	r3, [r7, #3]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d002      	beq.n	800aa34 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800aa2e:	68b8      	ldr	r0, [r7, #8]
 800aa30:	f00d fe04 	bl	801863c <sys_sem_signal>
    }
    return ERR_OK;
 800aa34:	2300      	movs	r3, #0
 800aa36:	e02e      	b.n	800aa96 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800aa38:	7d7b      	ldrb	r3, [r7, #21]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d11e      	bne.n	800aa7c <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	7d1b      	ldrb	r3, [r3, #20]
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d106      	bne.n	800aa54 <lwip_netconn_do_close_internal+0x250>
 800aa46:	4b16      	ldr	r3, [pc, #88]	; (800aaa0 <lwip_netconn_do_close_internal+0x29c>)
 800aa48:	f240 4241 	movw	r2, #1089	; 0x441
 800aa4c:	491b      	ldr	r1, [pc, #108]	; (800aabc <lwip_netconn_do_close_internal+0x2b8>)
 800aa4e:	4816      	ldr	r0, [pc, #88]	; (800aaa8 <lwip_netconn_do_close_internal+0x2a4>)
 800aa50:	f010 f97c 	bl	801ad4c <iprintf>
    if (shut_tx) {
 800aa54:	7b7b      	ldrb	r3, [r7, #13]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d003      	beq.n	800aa62 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800aa5a:	4919      	ldr	r1, [pc, #100]	; (800aac0 <lwip_netconn_do_close_internal+0x2bc>)
 800aa5c:	6938      	ldr	r0, [r7, #16]
 800aa5e:	f005 fec1 	bl	80107e4 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800aa62:	2201      	movs	r2, #1
 800aa64:	4917      	ldr	r1, [pc, #92]	; (800aac4 <lwip_netconn_do_close_internal+0x2c0>)
 800aa66:	6938      	ldr	r0, [r7, #16]
 800aa68:	f005 ff18 	bl	801089c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800aa6c:	4916      	ldr	r1, [pc, #88]	; (800aac8 <lwip_netconn_do_close_internal+0x2c4>)
 800aa6e:	6938      	ldr	r0, [r7, #16]
 800aa70:	f005 feda 	bl	8010828 <tcp_err>
    tcp_arg(tpcb, conn);
 800aa74:	6879      	ldr	r1, [r7, #4]
 800aa76:	6938      	ldr	r0, [r7, #16]
 800aa78:	f005 fe80 	bl	801077c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800aa7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d106      	bne.n	800aa92 <lwip_netconn_do_close_internal+0x28e>
 800aa84:	4b06      	ldr	r3, [pc, #24]	; (800aaa0 <lwip_netconn_do_close_internal+0x29c>)
 800aa86:	f240 424d 	movw	r2, #1101	; 0x44d
 800aa8a:	4910      	ldr	r1, [pc, #64]	; (800aacc <lwip_netconn_do_close_internal+0x2c8>)
 800aa8c:	4806      	ldr	r0, [pc, #24]	; (800aaa8 <lwip_netconn_do_close_internal+0x2a4>)
 800aa8e:	f010 f95d 	bl	801ad4c <iprintf>
  return err;
 800aa92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3718      	adds	r7, #24
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	0801bd38 	.word	0x0801bd38
 800aaa4:	0801c00c 	.word	0x0801c00c
 800aaa8:	0801bd7c 	.word	0x0801bd7c
 800aaac:	0801c01c 	.word	0x0801c01c
 800aab0:	0801c03c 	.word	0x0801c03c
 800aab4:	0801c060 	.word	0x0801c060
 800aab8:	0801bea0 	.word	0x0801bea0
 800aabc:	0801c074 	.word	0x0801c074
 800aac0:	0800a07d 	.word	0x0800a07d
 800aac4:	08009fb5 	.word	0x08009fb5
 800aac8:	0800a125 	.word	0x0800a125
 800aacc:	0801c098 	.word	0x0801c098

0800aad0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	785b      	ldrb	r3, [r3, #1]
 800aae2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800aae4:	7afb      	ldrb	r3, [r7, #11]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d00d      	beq.n	800ab06 <lwip_netconn_do_delconn+0x36>
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aaf4:	2b10      	cmp	r3, #16
 800aaf6:	d006      	beq.n	800ab06 <lwip_netconn_do_delconn+0x36>
 800aaf8:	4b60      	ldr	r3, [pc, #384]	; (800ac7c <lwip_netconn_do_delconn+0x1ac>)
 800aafa:	f240 425e 	movw	r2, #1118	; 0x45e
 800aafe:	4960      	ldr	r1, [pc, #384]	; (800ac80 <lwip_netconn_do_delconn+0x1b0>)
 800ab00:	4860      	ldr	r0, [pc, #384]	; (800ac84 <lwip_netconn_do_delconn+0x1b4>)
 800ab02:	f010 f923 	bl	801ad4c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800ab06:	7afb      	ldrb	r3, [r7, #11]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d005      	beq.n	800ab18 <lwip_netconn_do_delconn+0x48>
 800ab0c:	7afb      	ldrb	r3, [r7, #11]
 800ab0e:	2b02      	cmp	r3, #2
 800ab10:	d002      	beq.n	800ab18 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800ab12:	7afb      	ldrb	r3, [r7, #11]
 800ab14:	2b03      	cmp	r3, #3
 800ab16:	d109      	bne.n	800ab2c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800ab18:	7afb      	ldrb	r3, [r7, #11]
 800ab1a:	2b03      	cmp	r3, #3
 800ab1c:	d10a      	bne.n	800ab34 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	7f1b      	ldrb	r3, [r3, #28]
 800ab24:	f003 0304 	and.w	r3, r3, #4
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d103      	bne.n	800ab34 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	22fb      	movs	r2, #251	; 0xfb
 800ab30:	711a      	strb	r2, [r3, #4]
 800ab32:	e097      	b.n	800ac64 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800ab34:	7afb      	ldrb	r3, [r7, #11]
 800ab36:	2b03      	cmp	r3, #3
 800ab38:	d10d      	bne.n	800ab56 <lwip_netconn_do_delconn+0x86>
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	7f1b      	ldrb	r3, [r3, #28]
 800ab40:	f003 0304 	and.w	r3, r3, #4
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d106      	bne.n	800ab56 <lwip_netconn_do_delconn+0x86>
 800ab48:	4b4c      	ldr	r3, [pc, #304]	; (800ac7c <lwip_netconn_do_delconn+0x1ac>)
 800ab4a:	f240 427a 	movw	r2, #1146	; 0x47a
 800ab4e:	494e      	ldr	r1, [pc, #312]	; (800ac88 <lwip_netconn_do_delconn+0x1b8>)
 800ab50:	484c      	ldr	r0, [pc, #304]	; (800ac84 <lwip_netconn_do_delconn+0x1b4>)
 800ab52:	f010 f8fb 	bl	801ad4c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7ff fdd1 	bl	800a708 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d05f      	beq.n	800ac30 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab7a:	2b10      	cmp	r3, #16
 800ab7c:	d00d      	beq.n	800ab9a <lwip_netconn_do_delconn+0xca>
 800ab7e:	2b20      	cmp	r3, #32
 800ab80:	d151      	bne.n	800ac26 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	4618      	mov	r0, r3
 800ab94:	f00b f878 	bl	8015c88 <udp_remove>
          break;
 800ab98:	e046      	b.n	800ac28 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	6a1b      	ldr	r3, [r3, #32]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d006      	beq.n	800abb2 <lwip_netconn_do_delconn+0xe2>
 800aba4:	4b35      	ldr	r3, [pc, #212]	; (800ac7c <lwip_netconn_do_delconn+0x1ac>)
 800aba6:	f240 4294 	movw	r2, #1172	; 0x494
 800abaa:	4938      	ldr	r1, [pc, #224]	; (800ac8c <lwip_netconn_do_delconn+0x1bc>)
 800abac:	4835      	ldr	r0, [pc, #212]	; (800ac84 <lwip_netconn_do_delconn+0x1b4>)
 800abae:	f010 f8cd 	bl	801ad4c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2204      	movs	r2, #4
 800abb8:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2203      	movs	r2, #3
 800abbe:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	2100      	movs	r1, #0
 800abce:	4618      	mov	r0, r3
 800abd0:	f7ff fe18 	bl	800a804 <lwip_netconn_do_close_internal>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d04b      	beq.n	800ac72 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	785b      	ldrb	r3, [r3, #1]
 800abe0:	2b04      	cmp	r3, #4
 800abe2:	d006      	beq.n	800abf2 <lwip_netconn_do_delconn+0x122>
 800abe4:	4b25      	ldr	r3, [pc, #148]	; (800ac7c <lwip_netconn_do_delconn+0x1ac>)
 800abe6:	f240 429a 	movw	r2, #1178	; 0x49a
 800abea:	4929      	ldr	r1, [pc, #164]	; (800ac90 <lwip_netconn_do_delconn+0x1c0>)
 800abec:	4825      	ldr	r0, [pc, #148]	; (800ac84 <lwip_netconn_do_delconn+0x1b4>)
 800abee:	f010 f8ad 	bl	801ad4c <iprintf>
            UNLOCK_TCPIP_CORE();
 800abf2:	4828      	ldr	r0, [pc, #160]	; (800ac94 <lwip_netconn_do_delconn+0x1c4>)
 800abf4:	f00d fd8b 	bl	801870e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	330c      	adds	r3, #12
 800abfe:	2100      	movs	r1, #0
 800ac00:	4618      	mov	r0, r3
 800ac02:	f00d fcea 	bl	80185da <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800ac06:	4823      	ldr	r0, [pc, #140]	; (800ac94 <lwip_netconn_do_delconn+0x1c4>)
 800ac08:	f00d fd72 	bl	80186f0 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	785b      	ldrb	r3, [r3, #1]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d02d      	beq.n	800ac72 <lwip_netconn_do_delconn+0x1a2>
 800ac16:	4b19      	ldr	r3, [pc, #100]	; (800ac7c <lwip_netconn_do_delconn+0x1ac>)
 800ac18:	f240 429e 	movw	r2, #1182	; 0x49e
 800ac1c:	491c      	ldr	r1, [pc, #112]	; (800ac90 <lwip_netconn_do_delconn+0x1c0>)
 800ac1e:	4819      	ldr	r0, [pc, #100]	; (800ac84 <lwip_netconn_do_delconn+0x1b4>)
 800ac20:	f010 f894 	bl	801ad4c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800ac24:	e025      	b.n	800ac72 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800ac26:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d007      	beq.n	800ac4a <lwip_netconn_do_delconn+0x17a>
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac40:	68fa      	ldr	r2, [r7, #12]
 800ac42:	6810      	ldr	r0, [r2, #0]
 800ac44:	2200      	movs	r2, #0
 800ac46:	2100      	movs	r1, #0
 800ac48:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d007      	beq.n	800ac64 <lwip_netconn_do_delconn+0x194>
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5a:	68fa      	ldr	r2, [r7, #12]
 800ac5c:	6810      	ldr	r0, [r2, #0]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	2102      	movs	r1, #2
 800ac62:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	330c      	adds	r3, #12
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f00d fd00 	bl	8018670 <sys_sem_valid>
 800ac70:	e000      	b.n	800ac74 <lwip_netconn_do_delconn+0x1a4>
          return;
 800ac72:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	0801bd38 	.word	0x0801bd38
 800ac80:	0801c0a8 	.word	0x0801c0a8
 800ac84:	0801bd7c 	.word	0x0801bd7c
 800ac88:	0801c0bc 	.word	0x0801c0bc
 800ac8c:	0801c0dc 	.word	0x0801c0dc
 800ac90:	0801c0f8 	.word	0x0801c0f8
 800ac94:	2000e988 	.word	0x2000e988

0800ac98 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d025      	beq.n	800acfa <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800acb8:	2b10      	cmp	r3, #16
 800acba:	d00e      	beq.n	800acda <lwip_netconn_do_bind+0x42>
 800acbc:	2b20      	cmp	r3, #32
 800acbe:	d119      	bne.n	800acf4 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	6858      	ldr	r0, [r3, #4]
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	6899      	ldr	r1, [r3, #8]
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	899b      	ldrh	r3, [r3, #12]
 800acce:	461a      	mov	r2, r3
 800acd0:	f00a ff18 	bl	8015b04 <udp_bind>
 800acd4:	4603      	mov	r3, r0
 800acd6:	73fb      	strb	r3, [r7, #15]
        break;
 800acd8:	e011      	b.n	800acfe <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	6858      	ldr	r0, [r3, #4]
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	6899      	ldr	r1, [r3, #8]
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	899b      	ldrh	r3, [r3, #12]
 800ace8:	461a      	mov	r2, r3
 800acea:	f004 fcab 	bl	800f644 <tcp_bind>
 800acee:	4603      	mov	r3, r0
 800acf0:	73fb      	strb	r3, [r7, #15]
        break;
 800acf2:	e004      	b.n	800acfe <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800acf4:	23fa      	movs	r3, #250	; 0xfa
 800acf6:	73fb      	strb	r3, [r7, #15]
        break;
 800acf8:	e001      	b.n	800acfe <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800acfa:	23fa      	movs	r3, #250	; 0xfa
 800acfc:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	7bfa      	ldrb	r2, [r7, #15]
 800ad02:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ad04:	bf00      	nop
 800ad06:	3710      	adds	r7, #16
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b086      	sub	sp, #24
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d07f      	beq.n	800ae22 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad2c:	2b10      	cmp	r3, #16
 800ad2e:	d175      	bne.n	800ae1c <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	785b      	ldrb	r3, [r3, #1]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d165      	bne.n	800ae06 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	7d1b      	ldrb	r3, [r3, #20]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d002      	beq.n	800ad4c <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800ad46:	23fa      	movs	r3, #250	; 0xfa
 800ad48:	72fb      	strb	r3, [r7, #11]
 800ad4a:	e06c      	b.n	800ae26 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800ad4c:	23ff      	movs	r3, #255	; 0xff
 800ad4e:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	f107 020b 	add.w	r2, r7, #11
 800ad5a:	7cf9      	ldrb	r1, [r7, #19]
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f004 fd43 	bl	800f7e8 <tcp_listen_with_backlog_and_err>
 800ad62:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d05d      	beq.n	800ae26 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	3310      	adds	r3, #16
 800ad70:	4618      	mov	r0, r3
 800ad72:	f00d fbef 	bl	8018554 <sys_mbox_valid>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d00b      	beq.n	800ad94 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	3310      	adds	r3, #16
 800ad82:	4618      	mov	r0, r3
 800ad84:	f00d fb72 	bl	801846c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	3310      	adds	r3, #16
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f00d fbf1 	bl	8018576 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800ad94:	2300      	movs	r3, #0
 800ad96:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	3314      	adds	r3, #20
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f00d fbd8 	bl	8018554 <sys_mbox_valid>
 800ada4:	4603      	mov	r3, r0
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d108      	bne.n	800adbc <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	3314      	adds	r3, #20
 800adb0:	2106      	movs	r1, #6
 800adb2:	4618      	mov	r0, r3
 800adb4:	f00d fb40 	bl	8018438 <sys_mbox_new>
 800adb8:	4603      	mov	r3, r0
 800adba:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800adbc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d118      	bne.n	800adf6 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2202      	movs	r2, #2
 800adca:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	685a      	ldr	r2, [r3, #4]
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4619      	mov	r1, r3
 800ade0:	4610      	mov	r0, r2
 800ade2:	f005 fccb 	bl	801077c <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	4912      	ldr	r1, [pc, #72]	; (800ae38 <lwip_netconn_do_listen+0x12c>)
 800adee:	4618      	mov	r0, r3
 800adf0:	f005 fd3c 	bl	801086c <tcp_accept>
 800adf4:	e017      	b.n	800ae26 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800adf6:	68f8      	ldr	r0, [r7, #12]
 800adf8:	f004 fad2 	bl	800f3a0 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	2200      	movs	r2, #0
 800ae02:	605a      	str	r2, [r3, #4]
 800ae04:	e00f      	b.n	800ae26 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	785b      	ldrb	r3, [r3, #1]
 800ae0c:	2b02      	cmp	r3, #2
 800ae0e:	d102      	bne.n	800ae16 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800ae10:	2300      	movs	r3, #0
 800ae12:	72fb      	strb	r3, [r7, #11]
 800ae14:	e007      	b.n	800ae26 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800ae16:	23f5      	movs	r3, #245	; 0xf5
 800ae18:	72fb      	strb	r3, [r7, #11]
 800ae1a:	e004      	b.n	800ae26 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800ae1c:	23f0      	movs	r3, #240	; 0xf0
 800ae1e:	72fb      	strb	r3, [r7, #11]
 800ae20:	e001      	b.n	800ae26 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800ae22:	23f5      	movs	r3, #245	; 0xf5
 800ae24:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800ae26:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ae2e:	bf00      	nop
 800ae30:	3718      	adds	r7, #24
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	0800a321 	.word	0x0800a321

0800ae3c <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f7fe ff21 	bl	8009c94 <netconn_err>
 800ae52:	4603      	mov	r3, r0
 800ae54:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800ae56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d134      	bne.n	800aec8 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d02d      	beq.n	800aec4 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae72:	2b20      	cmp	r3, #32
 800ae74:	d123      	bne.n	800aebe <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d10c      	bne.n	800ae9a <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	685a      	ldr	r2, [r3, #4]
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	689b      	ldr	r3, [r3, #8]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	4610      	mov	r0, r2
 800ae90:	f00a fc4e 	bl	8015730 <udp_send>
 800ae94:	4603      	mov	r3, r0
 800ae96:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800ae98:	e016      	b.n	800aec8 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	6858      	ldr	r0, [r3, #4]
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	689b      	ldr	r3, [r3, #8]
 800aea4:	6819      	ldr	r1, [r3, #0]
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	f103 0208 	add.w	r2, r3, #8
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	689b      	ldr	r3, [r3, #8]
 800aeb2:	899b      	ldrh	r3, [r3, #12]
 800aeb4:	f00a fc70 	bl	8015798 <udp_sendto>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	73fb      	strb	r3, [r7, #15]
          break;
 800aebc:	e004      	b.n	800aec8 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800aebe:	23f5      	movs	r3, #245	; 0xf5
 800aec0:	73fb      	strb	r3, [r7, #15]
          break;
 800aec2:	e001      	b.n	800aec8 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800aec4:	23f5      	movs	r3, #245	; 0xf5
 800aec6:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	7bfa      	ldrb	r2, [r7, #15]
 800aecc:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800aece:	bf00      	nop
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b086      	sub	sp, #24
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	2200      	movs	r2, #0
 800aee6:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d022      	beq.n	800af38 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aefc:	2b10      	cmp	r3, #16
 800aefe:	d11b      	bne.n	800af38 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af0c:	d202      	bcs.n	800af14 <lwip_netconn_do_recv+0x3e>
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	b29b      	uxth	r3, r3
 800af12:	e001      	b.n	800af18 <lwip_netconn_do_recv+0x42>
 800af14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800af18:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	89fa      	ldrh	r2, [r7, #14]
 800af22:	4611      	mov	r1, r2
 800af24:	4618      	mov	r0, r3
 800af26:	f004 fd63 	bl	800f9f0 <tcp_recved>
        remaining -= recved;
 800af2a:	89fb      	ldrh	r3, [r7, #14]
 800af2c:	697a      	ldr	r2, [r7, #20]
 800af2e:	1ad3      	subs	r3, r2, r3
 800af30:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d1e6      	bne.n	800af06 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800af38:	bf00      	nop
 800af3a:	3718      	adds	r7, #24
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b088      	sub	sp, #32
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	460b      	mov	r3, r1
 800af4a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800af4c:	2300      	movs	r3, #0
 800af4e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d106      	bne.n	800af64 <lwip_netconn_do_writemore+0x24>
 800af56:	4b96      	ldr	r3, [pc, #600]	; (800b1b0 <lwip_netconn_do_writemore+0x270>)
 800af58:	f240 6273 	movw	r2, #1651	; 0x673
 800af5c:	4995      	ldr	r1, [pc, #596]	; (800b1b4 <lwip_netconn_do_writemore+0x274>)
 800af5e:	4896      	ldr	r0, [pc, #600]	; (800b1b8 <lwip_netconn_do_writemore+0x278>)
 800af60:	f00f fef4 	bl	801ad4c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	785b      	ldrb	r3, [r3, #1]
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d006      	beq.n	800af7a <lwip_netconn_do_writemore+0x3a>
 800af6c:	4b90      	ldr	r3, [pc, #576]	; (800b1b0 <lwip_netconn_do_writemore+0x270>)
 800af6e:	f240 6274 	movw	r2, #1652	; 0x674
 800af72:	4992      	ldr	r1, [pc, #584]	; (800b1bc <lwip_netconn_do_writemore+0x27c>)
 800af74:	4890      	ldr	r0, [pc, #576]	; (800b1b8 <lwip_netconn_do_writemore+0x278>)
 800af76:	f00f fee9 	bl	801ad4c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6a1b      	ldr	r3, [r3, #32]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d106      	bne.n	800af90 <lwip_netconn_do_writemore+0x50>
 800af82:	4b8b      	ldr	r3, [pc, #556]	; (800b1b0 <lwip_netconn_do_writemore+0x270>)
 800af84:	f240 6275 	movw	r2, #1653	; 0x675
 800af88:	498d      	ldr	r1, [pc, #564]	; (800b1c0 <lwip_netconn_do_writemore+0x280>)
 800af8a:	488b      	ldr	r0, [pc, #556]	; (800b1b8 <lwip_netconn_do_writemore+0x278>)
 800af8c:	f00f fede 	bl	801ad4c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d106      	bne.n	800afa6 <lwip_netconn_do_writemore+0x66>
 800af98:	4b85      	ldr	r3, [pc, #532]	; (800b1b0 <lwip_netconn_do_writemore+0x270>)
 800af9a:	f240 6276 	movw	r2, #1654	; 0x676
 800af9e:	4989      	ldr	r1, [pc, #548]	; (800b1c4 <lwip_netconn_do_writemore+0x284>)
 800afa0:	4885      	ldr	r0, [pc, #532]	; (800b1b8 <lwip_netconn_do_writemore+0x278>)
 800afa2:	f00f fed3 	bl	801ad4c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6a1b      	ldr	r3, [r3, #32]
 800afaa:	699a      	ldr	r2, [r3, #24]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6a1b      	ldr	r3, [r3, #32]
 800afb0:	695b      	ldr	r3, [r3, #20]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d306      	bcc.n	800afc4 <lwip_netconn_do_writemore+0x84>
 800afb6:	4b7e      	ldr	r3, [pc, #504]	; (800b1b0 <lwip_netconn_do_writemore+0x270>)
 800afb8:	f240 6277 	movw	r2, #1655	; 0x677
 800afbc:	4982      	ldr	r1, [pc, #520]	; (800b1c8 <lwip_netconn_do_writemore+0x288>)
 800afbe:	487e      	ldr	r0, [pc, #504]	; (800b1b8 <lwip_netconn_do_writemore+0x278>)
 800afc0:	f00f fec4 	bl	801ad4c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6a1b      	ldr	r3, [r3, #32]
 800afc8:	899b      	ldrh	r3, [r3, #12]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d106      	bne.n	800afdc <lwip_netconn_do_writemore+0x9c>
 800afce:	4b78      	ldr	r3, [pc, #480]	; (800b1b0 <lwip_netconn_do_writemore+0x270>)
 800afd0:	f240 6279 	movw	r2, #1657	; 0x679
 800afd4:	497d      	ldr	r1, [pc, #500]	; (800b1cc <lwip_netconn_do_writemore+0x28c>)
 800afd6:	4878      	ldr	r0, [pc, #480]	; (800b1b8 <lwip_netconn_do_writemore+0x278>)
 800afd8:	f00f feb8 	bl	801ad4c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6a1b      	ldr	r3, [r3, #32]
 800afe0:	7f1b      	ldrb	r3, [r3, #28]
 800afe2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	7f1b      	ldrb	r3, [r3, #28]
 800afe8:	f003 0302 	and.w	r3, r3, #2
 800afec:	2b00      	cmp	r3, #0
 800afee:	d104      	bne.n	800affa <lwip_netconn_do_writemore+0xba>
 800aff0:	7ebb      	ldrb	r3, [r7, #26]
 800aff2:	f003 0304 	and.w	r3, r3, #4
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d001      	beq.n	800affe <lwip_netconn_do_writemore+0xbe>
 800affa:	2301      	movs	r3, #1
 800affc:	e000      	b.n	800b000 <lwip_netconn_do_writemore+0xc0>
 800affe:	2300      	movs	r3, #0
 800b000:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6a1b      	ldr	r3, [r3, #32]
 800b006:	689b      	ldr	r3, [r3, #8]
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a1b      	ldr	r3, [r3, #32]
 800b00e:	691b      	ldr	r3, [r3, #16]
 800b010:	4413      	add	r3, r2
 800b012:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6a1b      	ldr	r3, [r3, #32]
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	685a      	ldr	r2, [r3, #4]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6a1b      	ldr	r3, [r3, #32]
 800b020:	691b      	ldr	r3, [r3, #16]
 800b022:	1ad3      	subs	r3, r2, r3
 800b024:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b02c:	d307      	bcc.n	800b03e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800b02e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b032:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b034:	7ebb      	ldrb	r3, [r7, #26]
 800b036:	f043 0302 	orr.w	r3, r3, #2
 800b03a:	76bb      	strb	r3, [r7, #26]
 800b03c:	e001      	b.n	800b042 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b04a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800b04c:	89fa      	ldrh	r2, [r7, #14]
 800b04e:	8bbb      	ldrh	r3, [r7, #28]
 800b050:	429a      	cmp	r2, r3
 800b052:	d216      	bcs.n	800b082 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800b054:	89fb      	ldrh	r3, [r7, #14]
 800b056:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800b058:	7e3b      	ldrb	r3, [r7, #24]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d00d      	beq.n	800b07a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800b05e:	8bbb      	ldrh	r3, [r7, #28]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d10e      	bne.n	800b082 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6a1b      	ldr	r3, [r3, #32]
 800b068:	699b      	ldr	r3, [r3, #24]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d102      	bne.n	800b074 <lwip_netconn_do_writemore+0x134>
 800b06e:	f06f 0306 	mvn.w	r3, #6
 800b072:	e000      	b.n	800b076 <lwip_netconn_do_writemore+0x136>
 800b074:	2300      	movs	r3, #0
 800b076:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800b078:	e07d      	b.n	800b176 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800b07a:	7ebb      	ldrb	r3, [r7, #26]
 800b07c:	f043 0302 	orr.w	r3, r3, #2
 800b080:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6a1b      	ldr	r3, [r3, #32]
 800b086:	691a      	ldr	r2, [r3, #16]
 800b088:	8bbb      	ldrh	r3, [r7, #28]
 800b08a:	441a      	add	r2, r3
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6a1b      	ldr	r3, [r3, #32]
 800b090:	689b      	ldr	r3, [r3, #8]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	429a      	cmp	r2, r3
 800b096:	d906      	bls.n	800b0a6 <lwip_netconn_do_writemore+0x166>
 800b098:	4b45      	ldr	r3, [pc, #276]	; (800b1b0 <lwip_netconn_do_writemore+0x270>)
 800b09a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800b09e:	494c      	ldr	r1, [pc, #304]	; (800b1d0 <lwip_netconn_do_writemore+0x290>)
 800b0a0:	4845      	ldr	r0, [pc, #276]	; (800b1b8 <lwip_netconn_do_writemore+0x278>)
 800b0a2:	f00f fe53 	bl	801ad4c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b0a6:	8bbb      	ldrh	r3, [r7, #28]
 800b0a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d103      	bne.n	800b0b8 <lwip_netconn_do_writemore+0x178>
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0b6:	d209      	bcs.n	800b0cc <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b0bc:	8bba      	ldrh	r2, [r7, #28]
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d10b      	bne.n	800b0da <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6a1b      	ldr	r3, [r3, #32]
 800b0c6:	899b      	ldrh	r3, [r3, #12]
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d906      	bls.n	800b0da <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b0d0:	7ebb      	ldrb	r3, [r7, #26]
 800b0d2:	f043 0302 	orr.w	r3, r3, #2
 800b0d6:	76bb      	strb	r3, [r7, #26]
 800b0d8:	e001      	b.n	800b0de <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6858      	ldr	r0, [r3, #4]
 800b0e2:	7ebb      	ldrb	r3, [r7, #26]
 800b0e4:	8bba      	ldrh	r2, [r7, #28]
 800b0e6:	6979      	ldr	r1, [r7, #20]
 800b0e8:	f008 fa86 	bl	80135f8 <tcp_write>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800b0f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d12c      	bne.n	800b152 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6a1b      	ldr	r3, [r3, #32]
 800b0fc:	6999      	ldr	r1, [r3, #24]
 800b0fe:	8bba      	ldrh	r2, [r7, #28]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6a1b      	ldr	r3, [r3, #32]
 800b104:	440a      	add	r2, r1
 800b106:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6a1b      	ldr	r3, [r3, #32]
 800b10c:	6919      	ldr	r1, [r3, #16]
 800b10e:	8bba      	ldrh	r2, [r7, #28]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6a1b      	ldr	r3, [r3, #32]
 800b114:	440a      	add	r2, r1
 800b116:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6a1b      	ldr	r3, [r3, #32]
 800b11c:	691a      	ldr	r2, [r3, #16]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6a1b      	ldr	r3, [r3, #32]
 800b122:	689b      	ldr	r3, [r3, #8]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	429a      	cmp	r2, r3
 800b128:	d113      	bne.n	800b152 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6a1b      	ldr	r3, [r3, #32]
 800b12e:	899a      	ldrh	r2, [r3, #12]
 800b130:	3a01      	subs	r2, #1
 800b132:	b292      	uxth	r2, r2
 800b134:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6a1b      	ldr	r3, [r3, #32]
 800b13a:	899b      	ldrh	r3, [r3, #12]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d008      	beq.n	800b152 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6a1b      	ldr	r3, [r3, #32]
 800b144:	689a      	ldr	r2, [r3, #8]
 800b146:	3208      	adds	r2, #8
 800b148:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6a1b      	ldr	r3, [r3, #32]
 800b14e:	2200      	movs	r2, #0
 800b150:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800b152:	7e7b      	ldrb	r3, [r7, #25]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d004      	beq.n	800b162 <lwip_netconn_do_writemore+0x222>
 800b158:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	f43f af50 	beq.w	800b002 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800b162:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d004      	beq.n	800b174 <lwip_netconn_do_writemore+0x234>
 800b16a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b172:	d146      	bne.n	800b202 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800b174:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800b176:	7e3b      	ldrb	r3, [r7, #24]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d02b      	beq.n	800b1d4 <lwip_netconn_do_writemore+0x294>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6a1b      	ldr	r3, [r3, #32]
 800b180:	699a      	ldr	r2, [r3, #24]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6a1b      	ldr	r3, [r3, #32]
 800b186:	695b      	ldr	r3, [r3, #20]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d223      	bcs.n	800b1d4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b190:	2b00      	cmp	r3, #0
 800b192:	d005      	beq.n	800b1a0 <lwip_netconn_do_writemore+0x260>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b198:	2200      	movs	r2, #0
 800b19a:	2103      	movs	r1, #3
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	7f1b      	ldrb	r3, [r3, #28]
 800b1a4:	f043 0310 	orr.w	r3, r3, #16
 800b1a8:	b2da      	uxtb	r2, r3
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	771a      	strb	r2, [r3, #28]
 800b1ae:	e028      	b.n	800b202 <lwip_netconn_do_writemore+0x2c2>
 800b1b0:	0801bd38 	.word	0x0801bd38
 800b1b4:	0801be90 	.word	0x0801be90
 800b1b8:	0801bd7c 	.word	0x0801bd7c
 800b1bc:	0801c198 	.word	0x0801c198
 800b1c0:	0801bea0 	.word	0x0801bea0
 800b1c4:	0801c1b8 	.word	0x0801c1b8
 800b1c8:	0801c1d0 	.word	0x0801c1d0
 800b1cc:	0801c210 	.word	0x0801c210
 800b1d0:	0801c238 	.word	0x0801c238
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b1dc:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b1e0:	d305      	bcc.n	800b1ee <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b1ea:	2b04      	cmp	r3, #4
 800b1ec:	d909      	bls.n	800b202 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d005      	beq.n	800b202 <lwip_netconn_do_writemore+0x2c2>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	2103      	movs	r1, #3
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800b202:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d11d      	bne.n	800b246 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a1b      	ldr	r3, [r3, #32]
 800b20e:	699a      	ldr	r2, [r3, #24]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6a1b      	ldr	r3, [r3, #32]
 800b214:	695b      	ldr	r3, [r3, #20]
 800b216:	429a      	cmp	r2, r3
 800b218:	d002      	beq.n	800b220 <lwip_netconn_do_writemore+0x2e0>
 800b21a:	7e3b      	ldrb	r3, [r7, #24]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d001      	beq.n	800b224 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800b220:	2301      	movs	r3, #1
 800b222:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	4618      	mov	r0, r3
 800b22a:	f008 ffcf 	bl	80141cc <tcp_output>
 800b22e:	4603      	mov	r3, r0
 800b230:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800b232:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b236:	f113 0f04 	cmn.w	r3, #4
 800b23a:	d12c      	bne.n	800b296 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b23c:	7b3b      	ldrb	r3, [r7, #12]
 800b23e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b240:	2301      	movs	r3, #1
 800b242:	76fb      	strb	r3, [r7, #27]
 800b244:	e027      	b.n	800b296 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800b246:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b24e:	d120      	bne.n	800b292 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	4618      	mov	r0, r3
 800b256:	f008 ffb9 	bl	80141cc <tcp_output>
 800b25a:	4603      	mov	r3, r0
 800b25c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b25e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b262:	f113 0f04 	cmn.w	r3, #4
 800b266:	d104      	bne.n	800b272 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b268:	7b7b      	ldrb	r3, [r7, #13]
 800b26a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b26c:	2301      	movs	r3, #1
 800b26e:	76fb      	strb	r3, [r7, #27]
 800b270:	e011      	b.n	800b296 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800b272:	7e3b      	ldrb	r3, [r7, #24]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d00e      	beq.n	800b296 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6a1b      	ldr	r3, [r3, #32]
 800b27c:	699b      	ldr	r3, [r3, #24]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d102      	bne.n	800b288 <lwip_netconn_do_writemore+0x348>
 800b282:	f06f 0306 	mvn.w	r3, #6
 800b286:	e000      	b.n	800b28a <lwip_netconn_do_writemore+0x34a>
 800b288:	2300      	movs	r3, #0
 800b28a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b28c:	2301      	movs	r3, #1
 800b28e:	76fb      	strb	r3, [r7, #27]
 800b290:	e001      	b.n	800b296 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b292:	2301      	movs	r3, #1
 800b294:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b296:	7efb      	ldrb	r3, [r7, #27]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d015      	beq.n	800b2c8 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6a1b      	ldr	r3, [r3, #32]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	330c      	adds	r3, #12
 800b2a4:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6a1b      	ldr	r3, [r3, #32]
 800b2aa:	7ffa      	ldrb	r2, [r7, #31]
 800b2ac:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b2ba:	78fb      	ldrb	r3, [r7, #3]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d006      	beq.n	800b2ce <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b2c0:	68b8      	ldr	r0, [r7, #8]
 800b2c2:	f00d f9bb 	bl	801863c <sys_sem_signal>
 800b2c6:	e002      	b.n	800b2ce <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b2c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b2cc:	e000      	b.n	800b2d0 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800b2ce:	2300      	movs	r3, #0
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3720      	adds	r7, #32
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7fe fcd3 	bl	8009c94 <netconn_err>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b2f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d166      	bne.n	800b3c8 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b304:	2b10      	cmp	r3, #16
 800b306:	d15d      	bne.n	800b3c4 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	785b      	ldrb	r3, [r3, #1]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d002      	beq.n	800b318 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800b312:	23fb      	movs	r3, #251	; 0xfb
 800b314:	73fb      	strb	r3, [r7, #15]
 800b316:	e057      	b.n	800b3c8 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d04d      	beq.n	800b3be <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	2201      	movs	r2, #1
 800b328:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	6a1b      	ldr	r3, [r3, #32]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d006      	beq.n	800b342 <lwip_netconn_do_write+0x6a>
 800b334:	4b28      	ldr	r3, [pc, #160]	; (800b3d8 <lwip_netconn_do_write+0x100>)
 800b336:	f240 7223 	movw	r2, #1827	; 0x723
 800b33a:	4928      	ldr	r1, [pc, #160]	; (800b3dc <lwip_netconn_do_write+0x104>)
 800b33c:	4828      	ldr	r0, [pc, #160]	; (800b3e0 <lwip_netconn_do_write+0x108>)
 800b33e:	f00f fd05 	bl	801ad4c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	695b      	ldr	r3, [r3, #20]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d106      	bne.n	800b358 <lwip_netconn_do_write+0x80>
 800b34a:	4b23      	ldr	r3, [pc, #140]	; (800b3d8 <lwip_netconn_do_write+0x100>)
 800b34c:	f240 7224 	movw	r2, #1828	; 0x724
 800b350:	4924      	ldr	r1, [pc, #144]	; (800b3e4 <lwip_netconn_do_write+0x10c>)
 800b352:	4823      	ldr	r0, [pc, #140]	; (800b3e0 <lwip_netconn_do_write+0x108>)
 800b354:	f00f fcfa 	bl	801ad4c <iprintf>
        msg->conn->current_msg = msg;
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	68ba      	ldr	r2, [r7, #8]
 800b35e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	2100      	movs	r1, #0
 800b366:	4618      	mov	r0, r3
 800b368:	f7ff fdea 	bl	800af40 <lwip_netconn_do_writemore>
 800b36c:	4603      	mov	r3, r0
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d02e      	beq.n	800b3d0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	785b      	ldrb	r3, [r3, #1]
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d006      	beq.n	800b38a <lwip_netconn_do_write+0xb2>
 800b37c:	4b16      	ldr	r3, [pc, #88]	; (800b3d8 <lwip_netconn_do_write+0x100>)
 800b37e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800b382:	4919      	ldr	r1, [pc, #100]	; (800b3e8 <lwip_netconn_do_write+0x110>)
 800b384:	4816      	ldr	r0, [pc, #88]	; (800b3e0 <lwip_netconn_do_write+0x108>)
 800b386:	f00f fce1 	bl	801ad4c <iprintf>
          UNLOCK_TCPIP_CORE();
 800b38a:	4818      	ldr	r0, [pc, #96]	; (800b3ec <lwip_netconn_do_write+0x114>)
 800b38c:	f00d f9bf 	bl	801870e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	330c      	adds	r3, #12
 800b396:	2100      	movs	r1, #0
 800b398:	4618      	mov	r0, r3
 800b39a:	f00d f91e 	bl	80185da <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b39e:	4813      	ldr	r0, [pc, #76]	; (800b3ec <lwip_netconn_do_write+0x114>)
 800b3a0:	f00d f9a6 	bl	80186f0 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	785b      	ldrb	r3, [r3, #1]
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d110      	bne.n	800b3d0 <lwip_netconn_do_write+0xf8>
 800b3ae:	4b0a      	ldr	r3, [pc, #40]	; (800b3d8 <lwip_netconn_do_write+0x100>)
 800b3b0:	f240 722c 	movw	r2, #1836	; 0x72c
 800b3b4:	490c      	ldr	r1, [pc, #48]	; (800b3e8 <lwip_netconn_do_write+0x110>)
 800b3b6:	480a      	ldr	r0, [pc, #40]	; (800b3e0 <lwip_netconn_do_write+0x108>)
 800b3b8:	f00f fcc8 	bl	801ad4c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800b3bc:	e008      	b.n	800b3d0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800b3be:	23f5      	movs	r3, #245	; 0xf5
 800b3c0:	73fb      	strb	r3, [r7, #15]
 800b3c2:	e001      	b.n	800b3c8 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800b3c4:	23fa      	movs	r3, #250	; 0xfa
 800b3c6:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	7bfa      	ldrb	r2, [r7, #15]
 800b3cc:	711a      	strb	r2, [r3, #4]
 800b3ce:	e000      	b.n	800b3d2 <lwip_netconn_do_write+0xfa>
        return;
 800b3d0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800b3d2:	3710      	adds	r7, #16
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	0801bd38 	.word	0x0801bd38
 800b3dc:	0801c0dc 	.word	0x0801c0dc
 800b3e0:	0801bd7c 	.word	0x0801bd7c
 800b3e4:	0801c264 	.word	0x0801c264
 800b3e8:	0801c0f8 	.word	0x0801c0f8
 800b3ec:	2000e988 	.word	0x2000e988

0800b3f0 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b084      	sub	sp, #16
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d06b      	beq.n	800b4de <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	7c1b      	ldrb	r3, [r3, #16]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d007      	beq.n	800b41e <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	685a      	ldr	r2, [r3, #4]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	6812      	ldr	r2, [r2, #0]
 800b41a:	601a      	str	r2, [r3, #0]
 800b41c:	e006      	b.n	800b42c <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	685a      	ldr	r2, [r3, #4]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	689b      	ldr	r3, [r3, #8]
 800b428:	6852      	ldr	r2, [r2, #4]
 800b42a:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2200      	movs	r2, #0
 800b430:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b43c:	2b10      	cmp	r3, #16
 800b43e:	d021      	beq.n	800b484 <lwip_netconn_do_getaddr+0x94>
 800b440:	2b20      	cmp	r3, #32
 800b442:	d144      	bne.n	800b4ce <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	7c1b      	ldrb	r3, [r3, #16]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d007      	beq.n	800b45c <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	685a      	ldr	r2, [r3, #4]
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	68db      	ldr	r3, [r3, #12]
 800b456:	8a52      	ldrh	r2, [r2, #18]
 800b458:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800b45a:	e044      	b.n	800b4e6 <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	7c1b      	ldrb	r3, [r3, #16]
 800b464:	f003 0304 	and.w	r3, r3, #4
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d103      	bne.n	800b474 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	22f5      	movs	r2, #245	; 0xf5
 800b470:	711a      	strb	r2, [r3, #4]
        break;
 800b472:	e038      	b.n	800b4e6 <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	685a      	ldr	r2, [r3, #4]
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	68db      	ldr	r3, [r3, #12]
 800b47e:	8a92      	ldrh	r2, [r2, #20]
 800b480:	801a      	strh	r2, [r3, #0]
        break;
 800b482:	e030      	b.n	800b4e6 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	7c1b      	ldrb	r3, [r3, #16]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d10f      	bne.n	800b4ac <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800b494:	2b00      	cmp	r3, #0
 800b496:	d005      	beq.n	800b4a4 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	7d1b      	ldrb	r3, [r3, #20]
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d103      	bne.n	800b4ac <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	22f5      	movs	r2, #245	; 0xf5
 800b4a8:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800b4aa:	e01c      	b.n	800b4e6 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	7c1b      	ldrb	r3, [r3, #16]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d004      	beq.n	800b4be <lwip_netconn_do_getaddr+0xce>
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	8adb      	ldrh	r3, [r3, #22]
 800b4bc:	e003      	b.n	800b4c6 <lwip_netconn_do_getaddr+0xd6>
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	8b1b      	ldrh	r3, [r3, #24]
 800b4c6:	68fa      	ldr	r2, [r7, #12]
 800b4c8:	68d2      	ldr	r2, [r2, #12]
 800b4ca:	8013      	strh	r3, [r2, #0]
        break;
 800b4cc:	e00b      	b.n	800b4e6 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800b4ce:	4b08      	ldr	r3, [pc, #32]	; (800b4f0 <lwip_netconn_do_getaddr+0x100>)
 800b4d0:	f240 727d 	movw	r2, #1917	; 0x77d
 800b4d4:	4907      	ldr	r1, [pc, #28]	; (800b4f4 <lwip_netconn_do_getaddr+0x104>)
 800b4d6:	4808      	ldr	r0, [pc, #32]	; (800b4f8 <lwip_netconn_do_getaddr+0x108>)
 800b4d8:	f00f fc38 	bl	801ad4c <iprintf>
        break;
 800b4dc:	e003      	b.n	800b4e6 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	22f5      	movs	r2, #245	; 0xf5
 800b4e2:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b4e4:	bf00      	nop
 800b4e6:	bf00      	nop
 800b4e8:	3710      	adds	r7, #16
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	0801bd38 	.word	0x0801bd38
 800b4f4:	0801c278 	.word	0x0801c278
 800b4f8:	0801bd7c 	.word	0x0801bd7c

0800b4fc <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	785b      	ldrb	r3, [r3, #1]
 800b50e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d069      	beq.n	800b5ee <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b524:	2b10      	cmp	r3, #16
 800b526:	d162      	bne.n	800b5ee <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b52c:	2b03      	cmp	r3, #3
 800b52e:	d002      	beq.n	800b536 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b530:	7afb      	ldrb	r3, [r7, #11]
 800b532:	2b02      	cmp	r3, #2
 800b534:	d05b      	beq.n	800b5ee <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b536:	7afb      	ldrb	r3, [r7, #11]
 800b538:	2b03      	cmp	r3, #3
 800b53a:	d103      	bne.n	800b544 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	22f5      	movs	r2, #245	; 0xf5
 800b540:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b542:	e059      	b.n	800b5f8 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b544:	7afb      	ldrb	r3, [r7, #11]
 800b546:	2b01      	cmp	r3, #1
 800b548:	d103      	bne.n	800b552 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	22fb      	movs	r2, #251	; 0xfb
 800b54e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b550:	e052      	b.n	800b5f8 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	7a1b      	ldrb	r3, [r3, #8]
 800b556:	f003 0301 	and.w	r3, r3, #1
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d004      	beq.n	800b568 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4618      	mov	r0, r3
 800b564:	f7ff f8d0 	bl	800a708 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	6a1b      	ldr	r3, [r3, #32]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d006      	beq.n	800b580 <lwip_netconn_do_close+0x84>
 800b572:	4b23      	ldr	r3, [pc, #140]	; (800b600 <lwip_netconn_do_close+0x104>)
 800b574:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800b578:	4922      	ldr	r1, [pc, #136]	; (800b604 <lwip_netconn_do_close+0x108>)
 800b57a:	4823      	ldr	r0, [pc, #140]	; (800b608 <lwip_netconn_do_close+0x10c>)
 800b57c:	f00f fbe6 	bl	801ad4c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2204      	movs	r2, #4
 800b586:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	2100      	movs	r1, #0
 800b596:	4618      	mov	r0, r3
 800b598:	f7ff f934 	bl	800a804 <lwip_netconn_do_close_internal>
 800b59c:	4603      	mov	r3, r0
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d029      	beq.n	800b5f6 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	785b      	ldrb	r3, [r3, #1]
 800b5a8:	2b04      	cmp	r3, #4
 800b5aa:	d006      	beq.n	800b5ba <lwip_netconn_do_close+0xbe>
 800b5ac:	4b14      	ldr	r3, [pc, #80]	; (800b600 <lwip_netconn_do_close+0x104>)
 800b5ae:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800b5b2:	4916      	ldr	r1, [pc, #88]	; (800b60c <lwip_netconn_do_close+0x110>)
 800b5b4:	4814      	ldr	r0, [pc, #80]	; (800b608 <lwip_netconn_do_close+0x10c>)
 800b5b6:	f00f fbc9 	bl	801ad4c <iprintf>
        UNLOCK_TCPIP_CORE();
 800b5ba:	4815      	ldr	r0, [pc, #84]	; (800b610 <lwip_netconn_do_close+0x114>)
 800b5bc:	f00d f8a7 	bl	801870e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	330c      	adds	r3, #12
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f00d f806 	bl	80185da <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b5ce:	4810      	ldr	r0, [pc, #64]	; (800b610 <lwip_netconn_do_close+0x114>)
 800b5d0:	f00d f88e 	bl	80186f0 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	785b      	ldrb	r3, [r3, #1]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d00b      	beq.n	800b5f6 <lwip_netconn_do_close+0xfa>
 800b5de:	4b08      	ldr	r3, [pc, #32]	; (800b600 <lwip_netconn_do_close+0x104>)
 800b5e0:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800b5e4:	4909      	ldr	r1, [pc, #36]	; (800b60c <lwip_netconn_do_close+0x110>)
 800b5e6:	4808      	ldr	r0, [pc, #32]	; (800b608 <lwip_netconn_do_close+0x10c>)
 800b5e8:	f00f fbb0 	bl	801ad4c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b5ec:	e003      	b.n	800b5f6 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	22f5      	movs	r2, #245	; 0xf5
 800b5f2:	711a      	strb	r2, [r3, #4]
 800b5f4:	e000      	b.n	800b5f8 <lwip_netconn_do_close+0xfc>
      return;
 800b5f6:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	0801bd38 	.word	0x0801bd38
 800b604:	0801c0dc 	.word	0x0801c0dc
 800b608:	0801bd7c 	.word	0x0801bd7c
 800b60c:	0801c0f8 	.word	0x0801c0f8
 800b610:	2000e988 	.word	0x2000e988

0800b614 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	4603      	mov	r3, r0
 800b61c:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800b61e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b622:	2b00      	cmp	r3, #0
 800b624:	dc04      	bgt.n	800b630 <err_to_errno+0x1c>
 800b626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b62a:	f113 0f10 	cmn.w	r3, #16
 800b62e:	da01      	bge.n	800b634 <err_to_errno+0x20>
    return EIO;
 800b630:	2305      	movs	r3, #5
 800b632:	e005      	b.n	800b640 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800b634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b638:	425b      	negs	r3, r3
 800b63a:	4a04      	ldr	r2, [pc, #16]	; (800b64c <err_to_errno+0x38>)
 800b63c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800b640:	4618      	mov	r0, r3
 800b642:	370c      	adds	r7, #12
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr
 800b64c:	0801f490 	.word	0x0801f490

0800b650 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d013      	beq.n	800b686 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d00b      	beq.n	800b67e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4618      	mov	r0, r3
 800b66c:	f003 f9de 	bl	800ea2c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2200      	movs	r2, #0
 800b674:	605a      	str	r2, [r3, #4]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	685a      	ldr	r2, [r3, #4]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b67e:	6879      	ldr	r1, [r7, #4]
 800b680:	2006      	movs	r0, #6
 800b682:	f002 fac5 	bl	800dc10 <memp_free>
  }
}
 800b686:	bf00      	nop
 800b688:	3708      	adds	r7, #8
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
	...

0800b690 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d106      	bne.n	800b6ac <netbuf_free+0x1c>
 800b69e:	4b0d      	ldr	r3, [pc, #52]	; (800b6d4 <netbuf_free+0x44>)
 800b6a0:	2281      	movs	r2, #129	; 0x81
 800b6a2:	490d      	ldr	r1, [pc, #52]	; (800b6d8 <netbuf_free+0x48>)
 800b6a4:	480d      	ldr	r0, [pc, #52]	; (800b6dc <netbuf_free+0x4c>)
 800b6a6:	f00f fb51 	bl	801ad4c <iprintf>
 800b6aa:	e00f      	b.n	800b6cc <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d004      	beq.n	800b6be <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f003 f9b7 	bl	800ea2c <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	605a      	str	r2, [r3, #4]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	685a      	ldr	r2, [r3, #4]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800b6cc:	3708      	adds	r7, #8
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
 800b6d2:	bf00      	nop
 800b6d4:	0801c290 	.word	0x0801c290
 800b6d8:	0801c32c 	.word	0x0801c32c
 800b6dc:	0801c2e0 	.word	0x0801c2e0

0800b6e0 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	60f8      	str	r0, [r7, #12]
 800b6e8:	60b9      	str	r1, [r7, #8]
 800b6ea:	4613      	mov	r3, r2
 800b6ec:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d108      	bne.n	800b706 <netbuf_ref+0x26>
 800b6f4:	4b1c      	ldr	r3, [pc, #112]	; (800b768 <netbuf_ref+0x88>)
 800b6f6:	2299      	movs	r2, #153	; 0x99
 800b6f8:	491c      	ldr	r1, [pc, #112]	; (800b76c <netbuf_ref+0x8c>)
 800b6fa:	481d      	ldr	r0, [pc, #116]	; (800b770 <netbuf_ref+0x90>)
 800b6fc:	f00f fb26 	bl	801ad4c <iprintf>
 800b700:	f06f 030f 	mvn.w	r3, #15
 800b704:	e02b      	b.n	800b75e <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d004      	beq.n	800b718 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4618      	mov	r0, r3
 800b714:	f003 f98a 	bl	800ea2c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800b718:	2241      	movs	r2, #65	; 0x41
 800b71a:	2100      	movs	r1, #0
 800b71c:	2036      	movs	r0, #54	; 0x36
 800b71e:	f002 fe6f 	bl	800e400 <pbuf_alloc>
 800b722:	4602      	mov	r2, r0
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d105      	bne.n	800b73c <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2200      	movs	r2, #0
 800b734:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800b736:	f04f 33ff 	mov.w	r3, #4294967295
 800b73a:	e010      	b.n	800b75e <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	68ba      	ldr	r2, [r7, #8]
 800b742:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	88fa      	ldrh	r2, [r7, #6]
 800b74a:	811a      	strh	r2, [r3, #8]
 800b74c:	68fa      	ldr	r2, [r7, #12]
 800b74e:	6812      	ldr	r2, [r2, #0]
 800b750:	891b      	ldrh	r3, [r3, #8]
 800b752:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681a      	ldr	r2, [r3, #0]
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800b75c:	2300      	movs	r3, #0
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	0801c290 	.word	0x0801c290
 800b76c:	0801c348 	.word	0x0801c348
 800b770:	0801c2e0 	.word	0x0801c2e0

0800b774 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800b774:	b480      	push	{r7}
 800b776:	b085      	sub	sp, #20
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2b00      	cmp	r3, #0
 800b784:	db02      	blt.n	800b78c <tryget_socket_unconn_nouse+0x18>
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2b03      	cmp	r3, #3
 800b78a:	dd01      	ble.n	800b790 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800b78c:	2300      	movs	r3, #0
 800b78e:	e003      	b.n	800b798 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	011b      	lsls	r3, r3, #4
 800b794:	4a03      	ldr	r2, [pc, #12]	; (800b7a4 <tryget_socket_unconn_nouse+0x30>)
 800b796:	4413      	add	r3, r2
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3714      	adds	r7, #20
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr
 800b7a4:	2000b184 	.word	0x2000b184

0800b7a8 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f7ff ffdf 	bl	800b774 <tryget_socket_unconn_nouse>
 800b7b6:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3710      	adds	r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b084      	sub	sp, #16
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f7ff ffec 	bl	800b7a8 <tryget_socket_unconn>
 800b7d0:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d005      	beq.n	800b7e4 <tryget_socket+0x22>
    if (sock->conn) {
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d001      	beq.n	800b7e4 <tryget_socket+0x22>
      return sock;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	e000      	b.n	800b7e6 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3710      	adds	r7, #16
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
	...

0800b7f0 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f7ff ffe2 	bl	800b7c2 <tryget_socket>
 800b7fe:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d104      	bne.n	800b810 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800b806:	4b05      	ldr	r3, [pc, #20]	; (800b81c <get_socket+0x2c>)
 800b808:	2209      	movs	r2, #9
 800b80a:	601a      	str	r2, [r3, #0]
    return NULL;
 800b80c:	2300      	movs	r3, #0
 800b80e:	e000      	b.n	800b812 <get_socket+0x22>
  }
  return sock;
 800b810:	68fb      	ldr	r3, [r7, #12]
}
 800b812:	4618      	mov	r0, r3
 800b814:	3710      	adds	r7, #16
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	200120bc 	.word	0x200120bc

0800b820 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800b82a:	2300      	movs	r3, #0
 800b82c:	60fb      	str	r3, [r7, #12]
 800b82e:	e052      	b.n	800b8d6 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800b830:	f00c ff9a 	bl	8018768 <sys_arch_protect>
 800b834:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800b836:	4a2c      	ldr	r2, [pc, #176]	; (800b8e8 <alloc_socket+0xc8>)
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	011b      	lsls	r3, r3, #4
 800b83c:	4413      	add	r3, r2
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d142      	bne.n	800b8ca <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800b844:	4a28      	ldr	r2, [pc, #160]	; (800b8e8 <alloc_socket+0xc8>)
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	011b      	lsls	r3, r3, #4
 800b84a:	4413      	add	r3, r2
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800b850:	68b8      	ldr	r0, [r7, #8]
 800b852:	f00c ff97 	bl	8018784 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800b856:	4a24      	ldr	r2, [pc, #144]	; (800b8e8 <alloc_socket+0xc8>)
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	011b      	lsls	r3, r3, #4
 800b85c:	4413      	add	r3, r2
 800b85e:	3304      	adds	r3, #4
 800b860:	2200      	movs	r2, #0
 800b862:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800b864:	4a20      	ldr	r2, [pc, #128]	; (800b8e8 <alloc_socket+0xc8>)
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	011b      	lsls	r3, r3, #4
 800b86a:	4413      	add	r3, r2
 800b86c:	330e      	adds	r3, #14
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d006      	beq.n	800b882 <alloc_socket+0x62>
 800b874:	4b1d      	ldr	r3, [pc, #116]	; (800b8ec <alloc_socket+0xcc>)
 800b876:	f240 220e 	movw	r2, #526	; 0x20e
 800b87a:	491d      	ldr	r1, [pc, #116]	; (800b8f0 <alloc_socket+0xd0>)
 800b87c:	481d      	ldr	r0, [pc, #116]	; (800b8f4 <alloc_socket+0xd4>)
 800b87e:	f00f fa65 	bl	801ad4c <iprintf>
      sockets[i].rcvevent   = 0;
 800b882:	4a19      	ldr	r2, [pc, #100]	; (800b8e8 <alloc_socket+0xc8>)
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	011b      	lsls	r3, r3, #4
 800b888:	4413      	add	r3, r2
 800b88a:	3308      	adds	r3, #8
 800b88c:	2200      	movs	r2, #0
 800b88e:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	781b      	ldrb	r3, [r3, #0]
 800b894:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b898:	2b10      	cmp	r3, #16
 800b89a:	d102      	bne.n	800b8a2 <alloc_socket+0x82>
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d001      	beq.n	800b8a6 <alloc_socket+0x86>
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e000      	b.n	800b8a8 <alloc_socket+0x88>
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	b299      	uxth	r1, r3
 800b8aa:	4a0f      	ldr	r2, [pc, #60]	; (800b8e8 <alloc_socket+0xc8>)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	011b      	lsls	r3, r3, #4
 800b8b0:	4413      	add	r3, r2
 800b8b2:	330a      	adds	r3, #10
 800b8b4:	460a      	mov	r2, r1
 800b8b6:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800b8b8:	4a0b      	ldr	r2, [pc, #44]	; (800b8e8 <alloc_socket+0xc8>)
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	011b      	lsls	r3, r3, #4
 800b8be:	4413      	add	r3, r2
 800b8c0:	330c      	adds	r3, #12
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	e00a      	b.n	800b8e0 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800b8ca:	68b8      	ldr	r0, [r7, #8]
 800b8cc:	f00c ff5a 	bl	8018784 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	60fb      	str	r3, [r7, #12]
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2b03      	cmp	r3, #3
 800b8da:	dda9      	ble.n	800b830 <alloc_socket+0x10>
  }
  return -1;
 800b8dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3710      	adds	r7, #16
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	2000b184 	.word	0x2000b184
 800b8ec:	0801c428 	.word	0x0801c428
 800b8f0:	0801c45c 	.word	0x0801c45c
 800b8f4:	0801c47c 	.word	0x0801c47c

0800b8f8 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b085      	sub	sp, #20
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	60b9      	str	r1, [r7, #8]
 800b902:	607a      	str	r2, [r7, #4]
 800b904:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	68fa      	ldr	r2, [r7, #12]
 800b90a:	6852      	ldr	r2, [r2, #4]
 800b90c:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2200      	movs	r2, #0
 800b912:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2200      	movs	r2, #0
 800b920:	601a      	str	r2, [r3, #0]
  return 1;
 800b922:	2301      	movs	r3, #1
}
 800b924:	4618      	mov	r0, r3
 800b926:	3714      	adds	r7, #20
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	60f8      	str	r0, [r7, #12]
 800b938:	60b9      	str	r1, [r7, #8]
 800b93a:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d00d      	beq.n	800b960 <free_socket_free_elements+0x30>
    if (is_tcp) {
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d005      	beq.n	800b956 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4618      	mov	r0, r3
 800b950:	f003 f86c 	bl	800ea2c <pbuf_free>
 800b954:	e004      	b.n	800b960 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7ff fe78 	bl	800b650 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d002      	beq.n	800b96c <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800b966:	68b8      	ldr	r0, [r7, #8]
 800b968:	f7fd fd04 	bl	8009374 <netconn_delete>
  }
}
 800b96c:	bf00      	nop
 800b96e:	3710      	adds	r7, #16
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b086      	sub	sp, #24
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800b97e:	f00c fef3 	bl	8018768 <sys_arch_protect>
 800b982:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800b984:	f107 0308 	add.w	r3, r7, #8
 800b988:	f107 020c 	add.w	r2, r7, #12
 800b98c:	6839      	ldr	r1, [r7, #0]
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f7ff ffb2 	bl	800b8f8 <free_socket_locked>
 800b994:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800b996:	6978      	ldr	r0, [r7, #20]
 800b998:	f00c fef4 	bl	8018784 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d006      	beq.n	800b9b0 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f107 0208 	add.w	r2, r7, #8
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	6838      	ldr	r0, [r7, #0]
 800b9ac:	f7ff ffc0 	bl	800b930 <free_socket_free_elements>
  }
}
 800b9b0:	bf00      	nop
 800b9b2:	3718      	adds	r7, #24
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 800b9b8:	b590      	push	{r4, r7, lr}
 800b9ba:	b099      	sub	sp, #100	; 0x64
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	84fb      	strh	r3, [r7, #38]	; 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 800b9c8:	68f8      	ldr	r0, [r7, #12]
 800b9ca:	f7ff ff11 	bl	800b7f0 <get_socket>
 800b9ce:	65b8      	str	r0, [r7, #88]	; 0x58
  if (!sock) {
 800b9d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d102      	bne.n	800b9dc <lwip_accept+0x24>
    return -1;
 800b9d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b9da:	e0f8      	b.n	800bbce <lwip_accept+0x216>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 800b9dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800b9e4:	4611      	mov	r1, r2
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7fd fd96 	bl	8009518 <netconn_accept>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (err != ERR_OK) {
 800b9f2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d02c      	beq.n	800ba54 <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800b9fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba04:	2b10      	cmp	r3, #16
 800ba06:	d008      	beq.n	800ba1a <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 800ba08:	235f      	movs	r3, #95	; 0x5f
 800ba0a:	633b      	str	r3, [r7, #48]	; 0x30
 800ba0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d01d      	beq.n	800ba4e <lwip_accept+0x96>
 800ba12:	4a71      	ldr	r2, [pc, #452]	; (800bbd8 <lwip_accept+0x220>)
 800ba14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba16:	6013      	str	r3, [r2, #0]
 800ba18:	e019      	b.n	800ba4e <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 800ba1a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ba1e:	f113 0f0f 	cmn.w	r3, #15
 800ba22:	d108      	bne.n	800ba36 <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 800ba24:	2316      	movs	r3, #22
 800ba26:	637b      	str	r3, [r7, #52]	; 0x34
 800ba28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d00f      	beq.n	800ba4e <lwip_accept+0x96>
 800ba2e:	4a6a      	ldr	r2, [pc, #424]	; (800bbd8 <lwip_accept+0x220>)
 800ba30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba32:	6013      	str	r3, [r2, #0]
 800ba34:	e00b      	b.n	800ba4e <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800ba36:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7ff fdea 	bl	800b614 <err_to_errno>
 800ba40:	63b8      	str	r0, [r7, #56]	; 0x38
 800ba42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d002      	beq.n	800ba4e <lwip_accept+0x96>
 800ba48:	4a63      	ldr	r2, [pc, #396]	; (800bbd8 <lwip_accept+0x220>)
 800ba4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4c:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800ba4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ba52:	e0bc      	b.n	800bbce <lwip_accept+0x216>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 800ba54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d106      	bne.n	800ba68 <lwip_accept+0xb0>
 800ba5a:	4b60      	ldr	r3, [pc, #384]	; (800bbdc <lwip_accept+0x224>)
 800ba5c:	f240 228b 	movw	r2, #651	; 0x28b
 800ba60:	495f      	ldr	r1, [pc, #380]	; (800bbe0 <lwip_accept+0x228>)
 800ba62:	4860      	ldr	r0, [pc, #384]	; (800bbe4 <lwip_accept+0x22c>)
 800ba64:	f00f f972 	bl	801ad4c <iprintf>

  newsock = alloc_socket(newconn, 1);
 800ba68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba6a:	2101      	movs	r1, #1
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7ff fed7 	bl	800b820 <alloc_socket>
 800ba72:	6538      	str	r0, [r7, #80]	; 0x50
  if (newsock == -1) {
 800ba74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba7a:	d10e      	bne.n	800ba9a <lwip_accept+0xe2>
    netconn_delete(newconn);
 800ba7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f7fd fc78 	bl	8009374 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 800ba84:	2317      	movs	r3, #23
 800ba86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d002      	beq.n	800ba94 <lwip_accept+0xdc>
 800ba8e:	4a52      	ldr	r2, [pc, #328]	; (800bbd8 <lwip_accept+0x220>)
 800ba90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba92:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800ba94:	f04f 33ff 	mov.w	r3, #4294967295
 800ba98:	e099      	b.n	800bbce <lwip_accept+0x216>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 800ba9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	db02      	blt.n	800baa6 <lwip_accept+0xee>
 800baa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baa2:	2b03      	cmp	r3, #3
 800baa4:	dd06      	ble.n	800bab4 <lwip_accept+0xfc>
 800baa6:	4b4d      	ldr	r3, [pc, #308]	; (800bbdc <lwip_accept+0x224>)
 800baa8:	f44f 7225 	mov.w	r2, #660	; 0x294
 800baac:	494e      	ldr	r1, [pc, #312]	; (800bbe8 <lwip_accept+0x230>)
 800baae:	484d      	ldr	r0, [pc, #308]	; (800bbe4 <lwip_accept+0x22c>)
 800bab0:	f00f f94c 	bl	801ad4c <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 800bab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bab6:	011b      	lsls	r3, r3, #4
 800bab8:	4a4c      	ldr	r2, [pc, #304]	; (800bbec <lwip_accept+0x234>)
 800baba:	4413      	add	r3, r2
 800babc:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 800babe:	f00c fe53 	bl	8018768 <sys_arch_protect>
 800bac2:	64b8      	str	r0, [r7, #72]	; 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 800bac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac6:	699b      	ldr	r3, [r3, #24]
 800bac8:	b21b      	sxth	r3, r3
 800baca:	43db      	mvns	r3, r3
 800bacc:	b21b      	sxth	r3, r3
 800bace:	65fb      	str	r3, [r7, #92]	; 0x5c
  newconn->socket = newsock;
 800bad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bad4:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 800bad6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800bad8:	f00c fe54 	bl	8018784 <sys_arch_unprotect>

  if (newconn->callback) {
 800badc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d012      	beq.n	800bb0a <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 800bae4:	4842      	ldr	r0, [pc, #264]	; (800bbf0 <lwip_accept+0x238>)
 800bae6:	f00c fe03 	bl	80186f0 <sys_mutex_lock>
    while (recvevent > 0) {
 800baea:	e008      	b.n	800bafe <lwip_accept+0x146>
      recvevent--;
 800baec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800baee:	3b01      	subs	r3, #1
 800baf0:	65fb      	str	r3, [r7, #92]	; 0x5c
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 800baf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800baf8:	2200      	movs	r2, #0
 800bafa:	2100      	movs	r1, #0
 800bafc:	4798      	blx	r3
    while (recvevent > 0) {
 800bafe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	dcf3      	bgt.n	800baec <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 800bb04:	483a      	ldr	r0, [pc, #232]	; (800bbf0 <lwip_accept+0x238>)
 800bb06:	f00c fe02 	bl	801870e <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d055      	beq.n	800bbbc <lwip_accept+0x204>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d052      	beq.n	800bbbc <lwip_accept+0x204>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 800bb16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb18:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800bb1c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800bb20:	2300      	movs	r3, #0
 800bb22:	f7fd fc43 	bl	80093ac <netconn_getaddr>
 800bb26:	4603      	mov	r3, r0
 800bb28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (err != ERR_OK) {
 800bb2c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d016      	beq.n	800bb62 <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 800bb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7fd fc1c 	bl	8009374 <netconn_delete>
      free_socket(nsock, 1);
 800bb3c:	2101      	movs	r1, #1
 800bb3e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bb40:	f7ff ff18 	bl	800b974 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 800bb44:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f7ff fd63 	bl	800b614 <err_to_errno>
 800bb4e:	6478      	str	r0, [r7, #68]	; 0x44
 800bb50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d002      	beq.n	800bb5c <lwip_accept+0x1a4>
 800bb56:	4a20      	ldr	r2, [pc, #128]	; (800bbd8 <lwip_accept+0x220>)
 800bb58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb5a:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800bb5c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb60:	e035      	b.n	800bbce <lwip_accept+0x216>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 800bb62:	f107 0314 	add.w	r3, r7, #20
 800bb66:	2210      	movs	r2, #16
 800bb68:	701a      	strb	r2, [r3, #0]
 800bb6a:	f107 0314 	add.w	r3, r7, #20
 800bb6e:	2202      	movs	r2, #2
 800bb70:	705a      	strb	r2, [r3, #1]
 800bb72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bb74:	f107 0414 	add.w	r4, r7, #20
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f001 fb41 	bl	800d200 <lwip_htons>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	8063      	strh	r3, [r4, #2]
 800bb82:	f107 0314 	add.w	r3, r7, #20
 800bb86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb88:	605a      	str	r2, [r3, #4]
 800bb8a:	f107 0314 	add.w	r3, r7, #20
 800bb8e:	3308      	adds	r3, #8
 800bb90:	2208      	movs	r2, #8
 800bb92:	2100      	movs	r1, #0
 800bb94:	4618      	mov	r0, r3
 800bb96:	f00e fd39 	bl	801a60c <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	7d3a      	ldrb	r2, [r7, #20]
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d903      	bls.n	800bbac <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 800bba4:	7d3b      	ldrb	r3, [r7, #20]
 800bba6:	461a      	mov	r2, r3
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681a      	ldr	r2, [r3, #0]
 800bbb0:	f107 0314 	add.w	r3, r7, #20
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	68b8      	ldr	r0, [r7, #8]
 800bbb8:	f00e fd00 	bl	801a5bc <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	643b      	str	r3, [r7, #64]	; 0x40
 800bbc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d002      	beq.n	800bbcc <lwip_accept+0x214>
 800bbc6:	4a04      	ldr	r2, [pc, #16]	; (800bbd8 <lwip_accept+0x220>)
 800bbc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbca:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 800bbcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3764      	adds	r7, #100	; 0x64
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd90      	pop	{r4, r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	200120bc 	.word	0x200120bc
 800bbdc:	0801c428 	.word	0x0801c428
 800bbe0:	0801c4a4 	.word	0x0801c4a4
 800bbe4:	0801c47c 	.word	0x0801c47c
 800bbe8:	0801c4b4 	.word	0x0801c4b4
 800bbec:	2000b184 	.word	0x2000b184
 800bbf0:	2000e988 	.word	0x2000e988

0800bbf4 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b08a      	sub	sp, #40	; 0x28
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800bc00:	68f8      	ldr	r0, [r7, #12]
 800bc02:	f7ff fdf5 	bl	800b7f0 <get_socket>
 800bc06:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800bc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d102      	bne.n	800bc14 <lwip_bind+0x20>
    return -1;
 800bc0e:	f04f 33ff 	mov.w	r3, #4294967295
 800bc12:	e051      	b.n	800bcb8 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2b10      	cmp	r3, #16
 800bc18:	d108      	bne.n	800bc2c <lwip_bind+0x38>
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	785b      	ldrb	r3, [r3, #1]
 800bc1e:	2b02      	cmp	r3, #2
 800bc20:	d104      	bne.n	800bc2c <lwip_bind+0x38>
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	f003 0303 	and.w	r3, r3, #3
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d014      	beq.n	800bc56 <lwip_bind+0x62>
 800bc2c:	4b24      	ldr	r3, [pc, #144]	; (800bcc0 <lwip_bind+0xcc>)
 800bc2e:	f240 22e2 	movw	r2, #738	; 0x2e2
 800bc32:	4924      	ldr	r1, [pc, #144]	; (800bcc4 <lwip_bind+0xd0>)
 800bc34:	4824      	ldr	r0, [pc, #144]	; (800bcc8 <lwip_bind+0xd4>)
 800bc36:	f00f f889 	bl	801ad4c <iprintf>
 800bc3a:	f06f 000f 	mvn.w	r0, #15
 800bc3e:	f7ff fce9 	bl	800b614 <err_to_errno>
 800bc42:	6178      	str	r0, [r7, #20]
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d002      	beq.n	800bc50 <lwip_bind+0x5c>
 800bc4a:	4a20      	ldr	r2, [pc, #128]	; (800bccc <lwip_bind+0xd8>)
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	6013      	str	r3, [r2, #0]
 800bc50:	f04f 33ff 	mov.w	r3, #4294967295
 800bc54:	e030      	b.n	800bcb8 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	685b      	ldr	r3, [r3, #4]
 800bc5a:	613b      	str	r3, [r7, #16]
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	885b      	ldrh	r3, [r3, #2]
 800bc60:	4618      	mov	r0, r3
 800bc62:	f001 facd 	bl	800d200 <lwip_htons>
 800bc66:	4603      	mov	r3, r0
 800bc68:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800bc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bc70:	f107 0110 	add.w	r1, r7, #16
 800bc74:	4618      	mov	r0, r3
 800bc76:	f7fd fbeb 	bl	8009450 <netconn_bind>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 800bc80:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d00e      	beq.n	800bca6 <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800bc88:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f7ff fcc1 	bl	800b614 <err_to_errno>
 800bc92:	61b8      	str	r0, [r7, #24]
 800bc94:	69bb      	ldr	r3, [r7, #24]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d002      	beq.n	800bca0 <lwip_bind+0xac>
 800bc9a:	4a0c      	ldr	r2, [pc, #48]	; (800bccc <lwip_bind+0xd8>)
 800bc9c:	69bb      	ldr	r3, [r7, #24]
 800bc9e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800bca0:	f04f 33ff 	mov.w	r3, #4294967295
 800bca4:	e008      	b.n	800bcb8 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800bca6:	2300      	movs	r3, #0
 800bca8:	61fb      	str	r3, [r7, #28]
 800bcaa:	69fb      	ldr	r3, [r7, #28]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d002      	beq.n	800bcb6 <lwip_bind+0xc2>
 800bcb0:	4a06      	ldr	r2, [pc, #24]	; (800bccc <lwip_bind+0xd8>)
 800bcb2:	69fb      	ldr	r3, [r7, #28]
 800bcb4:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800bcb6:	2300      	movs	r3, #0
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3728      	adds	r7, #40	; 0x28
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}
 800bcc0:	0801c428 	.word	0x0801c428
 800bcc4:	0801c4cc 	.word	0x0801c4cc
 800bcc8:	0801c47c 	.word	0x0801c47c
 800bccc:	200120bc 	.word	0x200120bc

0800bcd0 <lwip_close>:

int
lwip_close(int s)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b086      	sub	sp, #24
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f7ff fd87 	bl	800b7f0 <get_socket>
 800bce2:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d102      	bne.n	800bcf0 <lwip_close+0x20>
    return -1;
 800bcea:	f04f 33ff 	mov.w	r3, #4294967295
 800bcee:	e039      	b.n	800bd64 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d00b      	beq.n	800bd10 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd02:	2b10      	cmp	r3, #16
 800bd04:	bf0c      	ite	eq
 800bd06:	2301      	moveq	r3, #1
 800bd08:	2300      	movne	r3, #0
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	617b      	str	r3, [r7, #20]
 800bd0e:	e00a      	b.n	800bd26 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d006      	beq.n	800bd26 <lwip_close+0x56>
 800bd18:	4b14      	ldr	r3, [pc, #80]	; (800bd6c <lwip_close+0x9c>)
 800bd1a:	f44f 7245 	mov.w	r2, #788	; 0x314
 800bd1e:	4914      	ldr	r1, [pc, #80]	; (800bd70 <lwip_close+0xa0>)
 800bd20:	4814      	ldr	r0, [pc, #80]	; (800bd74 <lwip_close+0xa4>)
 800bd22:	f00f f813 	bl	801ad4c <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7fd fafe 	bl	800932c <netconn_prepare_delete>
 800bd30:	4603      	mov	r3, r0
 800bd32:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800bd34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d00e      	beq.n	800bd5a <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 800bd3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7ff fc67 	bl	800b614 <err_to_errno>
 800bd46:	60b8      	str	r0, [r7, #8]
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d002      	beq.n	800bd54 <lwip_close+0x84>
 800bd4e:	4a0a      	ldr	r2, [pc, #40]	; (800bd78 <lwip_close+0xa8>)
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800bd54:	f04f 33ff 	mov.w	r3, #4294967295
 800bd58:	e004      	b.n	800bd64 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 800bd5a:	6979      	ldr	r1, [r7, #20]
 800bd5c:	6938      	ldr	r0, [r7, #16]
 800bd5e:	f7ff fe09 	bl	800b974 <free_socket>
  set_errno(0);
  return 0;
 800bd62:	2300      	movs	r3, #0
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3718      	adds	r7, #24
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	0801c428 	.word	0x0801c428
 800bd70:	0801c4e8 	.word	0x0801c4e8
 800bd74:	0801c47c 	.word	0x0801c47c
 800bd78:	200120bc 	.word	0x200120bc

0800bd7c <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b088      	sub	sp, #32
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f7ff fd32 	bl	800b7f0 <get_socket>
 800bd8c:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800bd8e:	69fb      	ldr	r3, [r7, #28]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d102      	bne.n	800bd9a <lwip_listen+0x1e>
    return -1;
 800bd94:	f04f 33ff 	mov.w	r3, #4294967295
 800bd98:	e03e      	b.n	800be18 <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	2bfe      	cmp	r3, #254	; 0xfe
 800bd9e:	dc03      	bgt.n	800bda8 <lwip_listen+0x2c>
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bda6:	e000      	b.n	800bdaa <lwip_listen+0x2e>
 800bda8:	23ff      	movs	r3, #255	; 0xff
 800bdaa:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 800bdac:	69fb      	ldr	r3, [r7, #28]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	683a      	ldr	r2, [r7, #0]
 800bdb2:	b2d2      	uxtb	r2, r2
 800bdb4:	4611      	mov	r1, r2
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7fd fb82 	bl	80094c0 <netconn_listen_with_backlog>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 800bdc0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d01e      	beq.n	800be06 <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800bdc8:	69fb      	ldr	r3, [r7, #28]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bdd2:	2b10      	cmp	r3, #16
 800bdd4:	d008      	beq.n	800bde8 <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 800bdd6:	235f      	movs	r3, #95	; 0x5f
 800bdd8:	60fb      	str	r3, [r7, #12]
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d00f      	beq.n	800be00 <lwip_listen+0x84>
 800bde0:	4a0f      	ldr	r2, [pc, #60]	; (800be20 <lwip_listen+0xa4>)
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	6013      	str	r3, [r2, #0]
 800bde6:	e00b      	b.n	800be00 <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800bde8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7ff fc11 	bl	800b614 <err_to_errno>
 800bdf2:	6138      	str	r0, [r7, #16]
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d002      	beq.n	800be00 <lwip_listen+0x84>
 800bdfa:	4a09      	ldr	r2, [pc, #36]	; (800be20 <lwip_listen+0xa4>)
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800be00:	f04f 33ff 	mov.w	r3, #4294967295
 800be04:	e008      	b.n	800be18 <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 800be06:	2300      	movs	r3, #0
 800be08:	617b      	str	r3, [r7, #20]
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d002      	beq.n	800be16 <lwip_listen+0x9a>
 800be10:	4a03      	ldr	r2, [pc, #12]	; (800be20 <lwip_listen+0xa4>)
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800be16:	2300      	movs	r3, #0
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3720      	adds	r7, #32
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}
 800be20:	200120bc 	.word	0x200120bc

0800be24 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b08c      	sub	sp, #48	; 0x30
 800be28:	af00      	add	r7, sp, #0
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	607a      	str	r2, [r7, #4]
 800be30:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800be32:	2308      	movs	r3, #8
 800be34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 800be38:	2300      	movs	r3, #0
 800be3a:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	db01      	blt.n	800be46 <lwip_recv_tcp+0x22>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	e001      	b.n	800be4a <lwip_recv_tcp+0x26>
 800be46:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800be4a:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d106      	bne.n	800be60 <lwip_recv_tcp+0x3c>
 800be52:	4b74      	ldr	r3, [pc, #464]	; (800c024 <lwip_recv_tcp+0x200>)
 800be54:	f240 329e 	movw	r2, #926	; 0x39e
 800be58:	4973      	ldr	r1, [pc, #460]	; (800c028 <lwip_recv_tcp+0x204>)
 800be5a:	4874      	ldr	r0, [pc, #464]	; (800c02c <lwip_recv_tcp+0x208>)
 800be5c:	f00e ff76 	bl	801ad4c <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be6a:	2b10      	cmp	r3, #16
 800be6c:	d006      	beq.n	800be7c <lwip_recv_tcp+0x58>
 800be6e:	4b6d      	ldr	r3, [pc, #436]	; (800c024 <lwip_recv_tcp+0x200>)
 800be70:	f240 329f 	movw	r2, #927	; 0x39f
 800be74:	496e      	ldr	r1, [pc, #440]	; (800c030 <lwip_recv_tcp+0x20c>)
 800be76:	486d      	ldr	r0, [pc, #436]	; (800c02c <lwip_recv_tcp+0x208>)
 800be78:	f00e ff68 	bl	801ad4c <iprintf>

  if (flags & MSG_DONTWAIT) {
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	f003 0308 	and.w	r3, r3, #8
 800be82:	2b00      	cmp	r3, #0
 800be84:	d005      	beq.n	800be92 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800be86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be8a:	f043 0304 	orr.w	r3, r3, #4
 800be8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d003      	beq.n	800bea2 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	617b      	str	r3, [r7, #20]
 800bea0:	e036      	b.n	800bf10 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800beaa:	f107 0114 	add.w	r1, r7, #20
 800beae:	4618      	mov	r0, r3
 800beb0:	f7fd fd68 	bl	8009984 <netconn_recv_tcp_pbuf_flags>
 800beb4:	4603      	mov	r3, r0
 800beb6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800beba:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d019      	beq.n	800bef6 <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800bec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	f300 808d 	bgt.w	800bfe4 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800beca:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800bece:	4618      	mov	r0, r3
 800bed0:	f7ff fba0 	bl	800b614 <err_to_errno>
 800bed4:	61f8      	str	r0, [r7, #28]
 800bed6:	69fb      	ldr	r3, [r7, #28]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d002      	beq.n	800bee2 <lwip_recv_tcp+0xbe>
 800bedc:	4a55      	ldr	r2, [pc, #340]	; (800c034 <lwip_recv_tcp+0x210>)
 800bede:	69fb      	ldr	r3, [r7, #28]
 800bee0:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800bee2:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800bee6:	f113 0f0f 	cmn.w	r3, #15
 800beea:	d101      	bne.n	800bef0 <lwip_recv_tcp+0xcc>
          return 0;
 800beec:	2300      	movs	r3, #0
 800beee:	e094      	b.n	800c01a <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800bef0:	f04f 33ff 	mov.w	r3, #4294967295
 800bef4:	e091      	b.n	800c01a <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d106      	bne.n	800bf0a <lwip_recv_tcp+0xe6>
 800befc:	4b49      	ldr	r3, [pc, #292]	; (800c024 <lwip_recv_tcp+0x200>)
 800befe:	f240 32c5 	movw	r2, #965	; 0x3c5
 800bf02:	494d      	ldr	r1, [pc, #308]	; (800c038 <lwip_recv_tcp+0x214>)
 800bf04:	4849      	ldr	r0, [pc, #292]	; (800c02c <lwip_recv_tcp+0x208>)
 800bf06:	f00e ff21 	bl	801ad4c <iprintf>
      sock->lastdata.pbuf = p;
 800bf0a:	697a      	ldr	r2, [r7, #20]
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	891b      	ldrh	r3, [r3, #8]
 800bf14:	461a      	mov	r2, r3
 800bf16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	dd03      	ble.n	800bf24 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	891b      	ldrh	r3, [r3, #8]
 800bf20:	847b      	strh	r3, [r7, #34]	; 0x22
 800bf22:	e001      	b.n	800bf28 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800bf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf26:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 800bf28:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bf2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2c:	4413      	add	r3, r2
 800bf2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf30:	429a      	cmp	r2, r3
 800bf32:	dd03      	ble.n	800bf3c <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800bf34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	43db      	mvns	r3, r3
 800bf3a:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800bf3c:	6978      	ldr	r0, [r7, #20]
 800bf3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf40:	68ba      	ldr	r2, [r7, #8]
 800bf42:	18d1      	adds	r1, r2, r3
 800bf44:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bf46:	2300      	movs	r3, #0
 800bf48:	f002 ff76 	bl	800ee38 <pbuf_copy_partial>

    recvd += copylen;
 800bf4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf50:	4413      	add	r3, r2
 800bf52:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800bf54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	da06      	bge.n	800bf6a <lwip_recv_tcp+0x146>
 800bf5c:	4b31      	ldr	r3, [pc, #196]	; (800c024 <lwip_recv_tcp+0x200>)
 800bf5e:	f240 32dd 	movw	r2, #989	; 0x3dd
 800bf62:	4936      	ldr	r1, [pc, #216]	; (800c03c <lwip_recv_tcp+0x218>)
 800bf64:	4831      	ldr	r0, [pc, #196]	; (800c02c <lwip_recv_tcp+0x208>)
 800bf66:	f00e fef1 	bl	801ad4c <iprintf>
    recv_left -= copylen;
 800bf6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf6e:	1ad3      	subs	r3, r2, r3
 800bf70:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	f003 0301 	and.w	r3, r3, #1
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d123      	bne.n	800bfc4 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	891b      	ldrh	r3, [r3, #8]
 800bf80:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d906      	bls.n	800bf94 <lwip_recv_tcp+0x170>
 800bf86:	4b27      	ldr	r3, [pc, #156]	; (800c024 <lwip_recv_tcp+0x200>)
 800bf88:	f240 32e3 	movw	r2, #995	; 0x3e3
 800bf8c:	492c      	ldr	r1, [pc, #176]	; (800c040 <lwip_recv_tcp+0x21c>)
 800bf8e:	4827      	ldr	r0, [pc, #156]	; (800c02c <lwip_recv_tcp+0x208>)
 800bf90:	f00e fedc 	bl	801ad4c <iprintf>
      if (p->tot_len - copylen > 0) {
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	891b      	ldrh	r3, [r3, #8]
 800bf98:	461a      	mov	r2, r3
 800bf9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf9c:	1ad3      	subs	r3, r2, r3
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	dd09      	ble.n	800bfb6 <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bfa6:	4611      	mov	r1, r2
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f002 fd0c 	bl	800e9c6 <pbuf_free_header>
 800bfae:	4602      	mov	r2, r0
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	605a      	str	r2, [r3, #4]
 800bfb4:	e006      	b.n	800bfc4 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f002 fd34 	bl	800ea2c <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800bfc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bfc8:	f043 0314 	orr.w	r3, r3, #20
 800bfcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800bfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	dd08      	ble.n	800bfe8 <lwip_recv_tcp+0x1c4>
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	f003 0301 	and.w	r3, r3, #1
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	f43f af58 	beq.w	800be92 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800bfe2:	e001      	b.n	800bfe8 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800bfe4:	bf00      	nop
 800bfe6:	e000      	b.n	800bfea <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800bfe8:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800bfea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	dd0b      	ble.n	800c008 <lwip_recv_tcp+0x1e4>
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	f003 0301 	and.w	r3, r3, #1
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d106      	bne.n	800c008 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c000:	4611      	mov	r1, r2
 800c002:	4618      	mov	r0, r3
 800c004:	f7fd fc0c 	bl	8009820 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800c008:	2300      	movs	r3, #0
 800c00a:	61bb      	str	r3, [r7, #24]
 800c00c:	69bb      	ldr	r3, [r7, #24]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d002      	beq.n	800c018 <lwip_recv_tcp+0x1f4>
 800c012:	4a08      	ldr	r2, [pc, #32]	; (800c034 <lwip_recv_tcp+0x210>)
 800c014:	69bb      	ldr	r3, [r7, #24]
 800c016:	6013      	str	r3, [r2, #0]
  return recvd;
 800c018:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3730      	adds	r7, #48	; 0x30
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
 800c022:	bf00      	nop
 800c024:	0801c428 	.word	0x0801c428
 800c028:	0801c520 	.word	0x0801c520
 800c02c:	0801c47c 	.word	0x0801c47c
 800c030:	0801c530 	.word	0x0801c530
 800c034:	200120bc 	.word	0x200120bc
 800c038:	0801c554 	.word	0x0801c554
 800c03c:	0801c560 	.word	0x0801c560
 800c040:	0801c588 	.word	0x0801c588

0800c044 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800c044:	b590      	push	{r4, r7, lr}
 800c046:	b08b      	sub	sp, #44	; 0x2c
 800c048:	af00      	add	r7, sp, #0
 800c04a:	60f8      	str	r0, [r7, #12]
 800c04c:	60b9      	str	r1, [r7, #8]
 800c04e:	603b      	str	r3, [r7, #0]
 800c050:	4613      	mov	r3, r2
 800c052:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800c054:	2300      	movs	r3, #0
 800c056:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d106      	bne.n	800c06c <lwip_sock_make_addr+0x28>
 800c05e:	4b2b      	ldr	r3, [pc, #172]	; (800c10c <lwip_sock_make_addr+0xc8>)
 800c060:	f240 4207 	movw	r2, #1031	; 0x407
 800c064:	492a      	ldr	r1, [pc, #168]	; (800c110 <lwip_sock_make_addr+0xcc>)
 800c066:	482b      	ldr	r0, [pc, #172]	; (800c114 <lwip_sock_make_addr+0xd0>)
 800c068:	f00e fe70 	bl	801ad4c <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d106      	bne.n	800c080 <lwip_sock_make_addr+0x3c>
 800c072:	4b26      	ldr	r3, [pc, #152]	; (800c10c <lwip_sock_make_addr+0xc8>)
 800c074:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800c078:	4927      	ldr	r1, [pc, #156]	; (800c118 <lwip_sock_make_addr+0xd4>)
 800c07a:	4826      	ldr	r0, [pc, #152]	; (800c114 <lwip_sock_make_addr+0xd0>)
 800c07c:	f00e fe66 	bl	801ad4c <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800c080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c082:	2b00      	cmp	r3, #0
 800c084:	d106      	bne.n	800c094 <lwip_sock_make_addr+0x50>
 800c086:	4b21      	ldr	r3, [pc, #132]	; (800c10c <lwip_sock_make_addr+0xc8>)
 800c088:	f240 4209 	movw	r2, #1033	; 0x409
 800c08c:	4923      	ldr	r1, [pc, #140]	; (800c11c <lwip_sock_make_addr+0xd8>)
 800c08e:	4821      	ldr	r0, [pc, #132]	; (800c114 <lwip_sock_make_addr+0xd0>)
 800c090:	f00e fe5c 	bl	801ad4c <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800c094:	f107 0314 	add.w	r3, r7, #20
 800c098:	2210      	movs	r2, #16
 800c09a:	701a      	strb	r2, [r3, #0]
 800c09c:	f107 0314 	add.w	r3, r7, #20
 800c0a0:	2202      	movs	r2, #2
 800c0a2:	705a      	strb	r2, [r3, #1]
 800c0a4:	f107 0414 	add.w	r4, r7, #20
 800c0a8:	88fb      	ldrh	r3, [r7, #6]
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f001 f8a8 	bl	800d200 <lwip_htons>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	8063      	strh	r3, [r4, #2]
 800c0b4:	f107 0314 	add.w	r3, r7, #20
 800c0b8:	68ba      	ldr	r2, [r7, #8]
 800c0ba:	6812      	ldr	r2, [r2, #0]
 800c0bc:	605a      	str	r2, [r3, #4]
 800c0be:	f107 0314 	add.w	r3, r7, #20
 800c0c2:	3308      	adds	r3, #8
 800c0c4:	2208      	movs	r2, #8
 800c0c6:	2100      	movs	r1, #0
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f00e fa9f 	bl	801a60c <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800c0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	7d3a      	ldrb	r2, [r7, #20]
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d202      	bcs.n	800c0de <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	627b      	str	r3, [r7, #36]	; 0x24
 800c0dc:	e008      	b.n	800c0f0 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800c0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	7d3a      	ldrb	r2, [r7, #20]
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d903      	bls.n	800c0f0 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800c0e8:	7d3b      	ldrb	r3, [r7, #20]
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ee:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800c0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f2:	681a      	ldr	r2, [r3, #0]
 800c0f4:	f107 0314 	add.w	r3, r7, #20
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	6838      	ldr	r0, [r7, #0]
 800c0fc:	f00e fa5e 	bl	801a5bc <memcpy>
  return truncated;
 800c100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c102:	4618      	mov	r0, r3
 800c104:	372c      	adds	r7, #44	; 0x2c
 800c106:	46bd      	mov	sp, r7
 800c108:	bd90      	pop	{r4, r7, pc}
 800c10a:	bf00      	nop
 800c10c:	0801c428 	.word	0x0801c428
 800c110:	0801c598 	.word	0x0801c598
 800c114:	0801c47c 	.word	0x0801c47c
 800c118:	0801c5ac 	.word	0x0801c5ac
 800c11c:	0801c5bc 	.word	0x0801c5bc

0800c120 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b088      	sub	sp, #32
 800c124:	af02      	add	r7, sp, #8
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	607a      	str	r2, [r7, #4]
 800c12c:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d101      	bne.n	800c138 <lwip_recv_tcp_from+0x18>
    return 0;
 800c134:	2300      	movs	r3, #0
 800c136:	e021      	b.n	800c17c <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d01d      	beq.n	800c17a <lwip_recv_tcp_from+0x5a>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d01a      	beq.n	800c17a <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	6818      	ldr	r0, [r3, #0]
 800c148:	f107 0216 	add.w	r2, r7, #22
 800c14c:	f107 0110 	add.w	r1, r7, #16
 800c150:	2300      	movs	r3, #0
 800c152:	f7fd f92b 	bl	80093ac <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d00e      	beq.n	800c17a <lwip_recv_tcp_from+0x5a>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d00b      	beq.n	800c17a <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6818      	ldr	r0, [r3, #0]
 800c166:	8afa      	ldrh	r2, [r7, #22]
 800c168:	f107 0110 	add.w	r1, r7, #16
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	9300      	str	r3, [sp, #0]
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	f7ff ff67 	bl	800c044 <lwip_sock_make_addr>
 800c176:	4603      	mov	r3, r0
 800c178:	e000      	b.n	800c17c <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800c17a:	2300      	movs	r3, #0
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3718      	adds	r7, #24
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800c184:	b590      	push	{r4, r7, lr}
 800c186:	b08d      	sub	sp, #52	; 0x34
 800c188:	af02      	add	r7, sp, #8
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	607a      	str	r2, [r7, #4]
 800c190:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	689b      	ldr	r3, [r3, #8]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d10d      	bne.n	800c1b6 <lwip_recvfrom_udp_raw+0x32>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	68db      	ldr	r3, [r3, #12]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	dd09      	ble.n	800c1b6 <lwip_recvfrom_udp_raw+0x32>
 800c1a2:	4b5e      	ldr	r3, [pc, #376]	; (800c31c <lwip_recvfrom_udp_raw+0x198>)
 800c1a4:	f240 4249 	movw	r2, #1097	; 0x449
 800c1a8:	495d      	ldr	r1, [pc, #372]	; (800c320 <lwip_recvfrom_udp_raw+0x19c>)
 800c1aa:	485e      	ldr	r0, [pc, #376]	; (800c324 <lwip_recvfrom_udp_raw+0x1a0>)
 800c1ac:	f00e fdce 	bl	801ad4c <iprintf>
 800c1b0:	f06f 030f 	mvn.w	r3, #15
 800c1b4:	e0ad      	b.n	800c312 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	f003 0308 	and.w	r3, r3, #8
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d003      	beq.n	800c1c8 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800c1c0:	2304      	movs	r3, #4
 800c1c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c1c6:	e002      	b.n	800c1ce <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d11e      	bne.n	800c218 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c1e2:	f107 0110 	add.w	r1, r7, #16
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7fd fbf8 	bl	80099dc <netconn_recv_udp_raw_netbuf_flags>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800c1f0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d002      	beq.n	800c1fe <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800c1f8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c1fc:	e089      	b.n	800c312 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d106      	bne.n	800c212 <lwip_recvfrom_udp_raw+0x8e>
 800c204:	4b45      	ldr	r3, [pc, #276]	; (800c31c <lwip_recvfrom_udp_raw+0x198>)
 800c206:	f240 425e 	movw	r2, #1118	; 0x45e
 800c20a:	4947      	ldr	r1, [pc, #284]	; (800c328 <lwip_recvfrom_udp_raw+0x1a4>)
 800c20c:	4845      	ldr	r0, [pc, #276]	; (800c324 <lwip_recvfrom_udp_raw+0x1a0>)
 800c20e:	f00e fd9d 	bl	801ad4c <iprintf>
    sock->lastdata.netbuf = buf;
 800c212:	693a      	ldr	r2, [r7, #16]
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	891b      	ldrh	r3, [r3, #8]
 800c21e:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800c220:	2300      	movs	r3, #0
 800c222:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800c224:	2300      	movs	r3, #0
 800c226:	61fb      	str	r3, [r7, #28]
 800c228:	e029      	b.n	800c27e <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800c22a:	8b3a      	ldrh	r2, [r7, #24]
 800c22c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c22e:	1ad3      	subs	r3, r2, r3
 800c230:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	689a      	ldr	r2, [r3, #8]
 800c236:	69fb      	ldr	r3, [r7, #28]
 800c238:	00db      	lsls	r3, r3, #3
 800c23a:	4413      	add	r3, r2
 800c23c:	685a      	ldr	r2, [r3, #4]
 800c23e:	8afb      	ldrh	r3, [r7, #22]
 800c240:	429a      	cmp	r2, r3
 800c242:	d902      	bls.n	800c24a <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800c244:	8afb      	ldrh	r3, [r7, #22]
 800c246:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c248:	e006      	b.n	800c258 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	689a      	ldr	r2, [r3, #8]
 800c24e:	69fb      	ldr	r3, [r7, #28]
 800c250:	00db      	lsls	r3, r3, #3
 800c252:	4413      	add	r3, r2
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	6818      	ldr	r0, [r3, #0]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	689a      	ldr	r2, [r3, #8]
 800c260:	69fb      	ldr	r3, [r7, #28]
 800c262:	00db      	lsls	r3, r3, #3
 800c264:	4413      	add	r3, r2
 800c266:	6819      	ldr	r1, [r3, #0]
 800c268:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c26a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c26c:	f002 fde4 	bl	800ee38 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800c270:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c272:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c274:	4413      	add	r3, r2
 800c276:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	3301      	adds	r3, #1
 800c27c:	61fb      	str	r3, [r7, #28]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	68db      	ldr	r3, [r3, #12]
 800c282:	69fa      	ldr	r2, [r7, #28]
 800c284:	429a      	cmp	r2, r3
 800c286:	da03      	bge.n	800c290 <lwip_recvfrom_udp_raw+0x10c>
 800c288:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c28a:	8b3b      	ldrh	r3, [r7, #24]
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d3cc      	bcc.n	800c22a <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d01a      	beq.n	800c2ce <lwip_recvfrom_udp_raw+0x14a>
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d016      	beq.n	800c2ce <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d012      	beq.n	800c2ce <lwip_recvfrom_udp_raw+0x14a>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d00e      	beq.n	800c2ce <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	6818      	ldr	r0, [r3, #0]
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	f103 0108 	add.w	r1, r3, #8
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	3304      	adds	r3, #4
 800c2c6:	9300      	str	r3, [sp, #0]
 800c2c8:	4623      	mov	r3, r4
 800c2ca:	f7ff febb 	bl	800c044 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	691b      	ldr	r3, [r3, #16]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d007      	beq.n	800c2ec <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800c2e0:	7d7b      	ldrb	r3, [r7, #21]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d102      	bne.n	800c2ec <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	f003 0301 	and.w	r3, r3, #1
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d106      	bne.n	800c304 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7ff f9a6 	bl	800b650 <netbuf_delete>
  }
  if (datagram_len) {
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d002      	beq.n	800c310 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	8b3a      	ldrh	r2, [r7, #24]
 800c30e:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800c310:	2300      	movs	r3, #0
}
 800c312:	4618      	mov	r0, r3
 800c314:	372c      	adds	r7, #44	; 0x2c
 800c316:	46bd      	mov	sp, r7
 800c318:	bd90      	pop	{r4, r7, pc}
 800c31a:	bf00      	nop
 800c31c:	0801c428 	.word	0x0801c428
 800c320:	0801c5cc 	.word	0x0801c5cc
 800c324:	0801c47c 	.word	0x0801c47c
 800c328:	0801c5f8 	.word	0x0801c5f8

0800c32c <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b096      	sub	sp, #88	; 0x58
 800c330:	af02      	add	r7, sp, #8
 800c332:	60f8      	str	r0, [r7, #12]
 800c334:	60b9      	str	r1, [r7, #8]
 800c336:	607a      	str	r2, [r7, #4]
 800c338:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800c33a:	68f8      	ldr	r0, [r7, #12]
 800c33c:	f7ff fa58 	bl	800b7f0 <get_socket>
 800c340:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800c342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c344:	2b00      	cmp	r3, #0
 800c346:	d102      	bne.n	800c34e <lwip_recvfrom+0x22>
    return -1;
 800c348:	f04f 33ff 	mov.w	r3, #4294967295
 800c34c:	e078      	b.n	800c440 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800c34e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c358:	2b10      	cmp	r3, #16
 800c35a:	d112      	bne.n	800c382 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	68b9      	ldr	r1, [r7, #8]
 800c362:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c364:	f7ff fd5e 	bl	800be24 <lwip_recv_tcp>
 800c368:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800c36a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c36c:	9301      	str	r3, [sp, #4]
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	9300      	str	r3, [sp, #0]
 800c372:	4b35      	ldr	r3, [pc, #212]	; (800c448 <lwip_recvfrom+0x11c>)
 800c374:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c376:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c378:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c37a:	f7ff fed1 	bl	800c120 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800c37e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c380:	e05e      	b.n	800c440 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800c382:	2300      	movs	r3, #0
 800c384:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800c38e:	2300      	movs	r3, #0
 800c390:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800c392:	2300      	movs	r3, #0
 800c394:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800c396:	2300      	movs	r3, #0
 800c398:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800c39a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c39e:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800c3a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c3a6:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800c3a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d002      	beq.n	800c3b4 <lwip_recvfrom+0x88>
 800c3ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	e000      	b.n	800c3b6 <lwip_recvfrom+0x8a>
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800c3b8:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800c3bc:	f107 0214 	add.w	r2, r7, #20
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	9300      	str	r3, [sp, #0]
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	6839      	ldr	r1, [r7, #0]
 800c3c8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c3ca:	f7ff fedb 	bl	800c184 <lwip_recvfrom_udp_raw>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800c3d4:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d00e      	beq.n	800c3fa <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800c3dc:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7ff f917 	bl	800b614 <err_to_errno>
 800c3e6:	63f8      	str	r0, [r7, #60]	; 0x3c
 800c3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d002      	beq.n	800c3f4 <lwip_recvfrom+0xc8>
 800c3ee:	4a17      	ldr	r2, [pc, #92]	; (800c44c <lwip_recvfrom+0x120>)
 800c3f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3f2:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800c3f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c3f8:	e022      	b.n	800c440 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800c3fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c3fc:	461a      	mov	r2, r3
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	4293      	cmp	r3, r2
 800c402:	bf28      	it	cs
 800c404:	4613      	movcs	r3, r2
 800c406:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d206      	bcs.n	800c41c <lwip_recvfrom+0xf0>
 800c40e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c410:	461a      	mov	r2, r3
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	4293      	cmp	r3, r2
 800c416:	bf28      	it	cs
 800c418:	4613      	movcs	r3, r2
 800c41a:	e001      	b.n	800c420 <lwip_recvfrom+0xf4>
 800c41c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c420:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800c422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c424:	2b00      	cmp	r3, #0
 800c426:	d002      	beq.n	800c42e <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800c428:	69ba      	ldr	r2, [r7, #24]
 800c42a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c42c:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800c42e:	2300      	movs	r3, #0
 800c430:	643b      	str	r3, [r7, #64]	; 0x40
 800c432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c434:	2b00      	cmp	r3, #0
 800c436:	d002      	beq.n	800c43e <lwip_recvfrom+0x112>
 800c438:	4a04      	ldr	r2, [pc, #16]	; (800c44c <lwip_recvfrom+0x120>)
 800c43a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c43c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800c43e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c440:	4618      	mov	r0, r3
 800c442:	3750      	adds	r7, #80	; 0x50
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}
 800c448:	0801c604 	.word	0x0801c604
 800c44c:	200120bc 	.word	0x200120bc

0800c450 <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b086      	sub	sp, #24
 800c454:	af02      	add	r7, sp, #8
 800c456:	60f8      	str	r0, [r7, #12]
 800c458:	60b9      	str	r1, [r7, #8]
 800c45a:	607a      	str	r2, [r7, #4]
 800c45c:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 800c45e:	2300      	movs	r3, #0
 800c460:	9301      	str	r3, [sp, #4]
 800c462:	2300      	movs	r3, #0
 800c464:	9300      	str	r3, [sp, #0]
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	68b9      	ldr	r1, [r7, #8]
 800c46c:	68f8      	ldr	r0, [r7, #12]
 800c46e:	f7ff ff5d 	bl	800c32c <lwip_recvfrom>
 800c472:	4603      	mov	r3, r0
}
 800c474:	4618      	mov	r0, r3
 800c476:	3710      	adds	r7, #16
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b08a      	sub	sp, #40	; 0x28
 800c480:	af02      	add	r7, sp, #8
 800c482:	60f8      	str	r0, [r7, #12]
 800c484:	60b9      	str	r1, [r7, #8]
 800c486:	607a      	str	r2, [r7, #4]
 800c488:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800c48a:	68f8      	ldr	r0, [r7, #12]
 800c48c:	f7ff f9b0 	bl	800b7f0 <get_socket>
 800c490:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800c492:	69fb      	ldr	r3, [r7, #28]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d102      	bne.n	800c49e <lwip_send+0x22>
    return -1;
 800c498:	f04f 33ff 	mov.w	r3, #4294967295
 800c49c:	e046      	b.n	800c52c <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800c49e:	69fb      	ldr	r3, [r7, #28]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c4a8:	2b10      	cmp	r3, #16
 800c4aa:	d00b      	beq.n	800c4c4 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	9301      	str	r3, [sp, #4]
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	9300      	str	r3, [sp, #0]
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	68b9      	ldr	r1, [r7, #8]
 800c4ba:	68f8      	ldr	r0, [r7, #12]
 800c4bc:	f000 f83c 	bl	800c538 <lwip_sendto>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	e033      	b.n	800c52c <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d001      	beq.n	800c4d2 <lwip_send+0x56>
 800c4ce:	2203      	movs	r2, #3
 800c4d0:	e000      	b.n	800c4d4 <lwip_send+0x58>
 800c4d2:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	105b      	asrs	r3, r3, #1
 800c4d8:	b25b      	sxtb	r3, r3
 800c4da:	f003 0304 	and.w	r3, r3, #4
 800c4de:	b25b      	sxtb	r3, r3
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800c4e4:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800c4ea:	69fb      	ldr	r3, [r7, #28]
 800c4ec:	6818      	ldr	r0, [r3, #0]
 800c4ee:	7efa      	ldrb	r2, [r7, #27]
 800c4f0:	f107 0310 	add.w	r3, r7, #16
 800c4f4:	9300      	str	r3, [sp, #0]
 800c4f6:	4613      	mov	r3, r2
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	68b9      	ldr	r1, [r7, #8]
 800c4fc:	f7fd fac8 	bl	8009a90 <netconn_write_partly>
 800c500:	4603      	mov	r3, r0
 800c502:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800c504:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c508:	4618      	mov	r0, r3
 800c50a:	f7ff f883 	bl	800b614 <err_to_errno>
 800c50e:	6178      	str	r0, [r7, #20]
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d002      	beq.n	800c51c <lwip_send+0xa0>
 800c516:	4a07      	ldr	r2, [pc, #28]	; (800c534 <lwip_send+0xb8>)
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800c51c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d101      	bne.n	800c528 <lwip_send+0xac>
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	e001      	b.n	800c52c <lwip_send+0xb0>
 800c528:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3720      	adds	r7, #32
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}
 800c534:	200120bc 	.word	0x200120bc

0800c538 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b08e      	sub	sp, #56	; 0x38
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	60f8      	str	r0, [r7, #12]
 800c540:	60b9      	str	r1, [r7, #8]
 800c542:	607a      	str	r2, [r7, #4]
 800c544:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800c546:	68f8      	ldr	r0, [r7, #12]
 800c548:	f7ff f952 	bl	800b7f0 <get_socket>
 800c54c:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800c54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c550:	2b00      	cmp	r3, #0
 800c552:	d102      	bne.n	800c55a <lwip_sendto+0x22>
    return -1;
 800c554:	f04f 33ff 	mov.w	r3, #4294967295
 800c558:	e093      	b.n	800c682 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800c55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c564:	2b10      	cmp	r3, #16
 800c566:	d107      	bne.n	800c578 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	68b9      	ldr	r1, [r7, #8]
 800c56e:	68f8      	ldr	r0, [r7, #12]
 800c570:	f7ff ff84 	bl	800c47c <lwip_send>
 800c574:	4603      	mov	r3, r0
 800c576:	e084      	b.n	800c682 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c57e:	d30a      	bcc.n	800c596 <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800c580:	235a      	movs	r3, #90	; 0x5a
 800c582:	623b      	str	r3, [r7, #32]
 800c584:	6a3b      	ldr	r3, [r7, #32]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d002      	beq.n	800c590 <lwip_sendto+0x58>
 800c58a:	4a40      	ldr	r2, [pc, #256]	; (800c68c <lwip_sendto+0x154>)
 800c58c:	6a3b      	ldr	r3, [r7, #32]
 800c58e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800c590:	f04f 33ff 	mov.w	r3, #4294967295
 800c594:	e075      	b.n	800c682 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800c59a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d102      	bne.n	800c5a6 <lwip_sendto+0x6e>
 800c5a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d023      	beq.n	800c5ee <lwip_sendto+0xb6>
 800c5a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5a8:	2b10      	cmp	r3, #16
 800c5aa:	d10b      	bne.n	800c5c4 <lwip_sendto+0x8c>
 800c5ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d008      	beq.n	800c5c4 <lwip_sendto+0x8c>
 800c5b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5b4:	785b      	ldrb	r3, [r3, #1]
 800c5b6:	2b02      	cmp	r3, #2
 800c5b8:	d104      	bne.n	800c5c4 <lwip_sendto+0x8c>
 800c5ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5bc:	f003 0303 	and.w	r3, r3, #3
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d014      	beq.n	800c5ee <lwip_sendto+0xb6>
 800c5c4:	4b32      	ldr	r3, [pc, #200]	; (800c690 <lwip_sendto+0x158>)
 800c5c6:	f240 6252 	movw	r2, #1618	; 0x652
 800c5ca:	4932      	ldr	r1, [pc, #200]	; (800c694 <lwip_sendto+0x15c>)
 800c5cc:	4832      	ldr	r0, [pc, #200]	; (800c698 <lwip_sendto+0x160>)
 800c5ce:	f00e fbbd 	bl	801ad4c <iprintf>
 800c5d2:	f06f 000f 	mvn.w	r0, #15
 800c5d6:	f7ff f81d 	bl	800b614 <err_to_errno>
 800c5da:	62b8      	str	r0, [r7, #40]	; 0x28
 800c5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d002      	beq.n	800c5e8 <lwip_sendto+0xb0>
 800c5e2:	4a2a      	ldr	r2, [pc, #168]	; (800c68c <lwip_sendto+0x154>)
 800c5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e6:	6013      	str	r3, [r2, #0]
 800c5e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ec:	e049      	b.n	800c682 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	617b      	str	r3, [r7, #20]
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800c5f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d00a      	beq.n	800c612 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800c5fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	61bb      	str	r3, [r7, #24]
 800c602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c604:	885b      	ldrh	r3, [r3, #2]
 800c606:	4618      	mov	r0, r3
 800c608:	f000 fdfa 	bl	800d200 <lwip_htons>
 800c60c:	4603      	mov	r3, r0
 800c60e:	86bb      	strh	r3, [r7, #52]	; 0x34
 800c610:	e003      	b.n	800c61a <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800c612:	2300      	movs	r3, #0
 800c614:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800c616:	2300      	movs	r3, #0
 800c618:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800c61a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c61c:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800c61e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c620:	f107 0310 	add.w	r3, r7, #16
 800c624:	68b9      	ldr	r1, [r7, #8]
 800c626:	4618      	mov	r0, r3
 800c628:	f7ff f85a 	bl	800b6e0 <netbuf_ref>
 800c62c:	4603      	mov	r3, r0
 800c62e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800c632:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c636:	2b00      	cmp	r3, #0
 800c638:	d10a      	bne.n	800c650 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800c63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f107 0210 	add.w	r2, r7, #16
 800c642:	4611      	mov	r1, r2
 800c644:	4618      	mov	r0, r3
 800c646:	f7fd f9f5 	bl	8009a34 <netconn_send>
 800c64a:	4603      	mov	r3, r0
 800c64c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800c650:	f107 0310 	add.w	r3, r7, #16
 800c654:	4618      	mov	r0, r3
 800c656:	f7ff f81b 	bl	800b690 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800c65a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c65e:	4618      	mov	r0, r3
 800c660:	f7fe ffd8 	bl	800b614 <err_to_errno>
 800c664:	6278      	str	r0, [r7, #36]	; 0x24
 800c666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d002      	beq.n	800c672 <lwip_sendto+0x13a>
 800c66c:	4a07      	ldr	r2, [pc, #28]	; (800c68c <lwip_sendto+0x154>)
 800c66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c670:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800c672:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c676:	2b00      	cmp	r3, #0
 800c678:	d101      	bne.n	800c67e <lwip_sendto+0x146>
 800c67a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c67c:	e001      	b.n	800c682 <lwip_sendto+0x14a>
 800c67e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c682:	4618      	mov	r0, r3
 800c684:	3738      	adds	r7, #56	; 0x38
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
 800c68a:	bf00      	nop
 800c68c:	200120bc 	.word	0x200120bc
 800c690:	0801c428 	.word	0x0801c428
 800c694:	0801c708 	.word	0x0801c708
 800c698:	0801c47c 	.word	0x0801c47c

0800c69c <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b086      	sub	sp, #24
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	2b03      	cmp	r3, #3
 800c6ac:	d009      	beq.n	800c6c2 <lwip_socket+0x26>
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	2b03      	cmp	r3, #3
 800c6b2:	dc23      	bgt.n	800c6fc <lwip_socket+0x60>
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d019      	beq.n	800c6ee <lwip_socket+0x52>
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	2b02      	cmp	r3, #2
 800c6be:	d009      	beq.n	800c6d4 <lwip_socket+0x38>
 800c6c0:	e01c      	b.n	800c6fc <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	4a22      	ldr	r2, [pc, #136]	; (800c750 <lwip_socket+0xb4>)
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	2040      	movs	r0, #64	; 0x40
 800c6cc:	f7fc fdb4 	bl	8009238 <netconn_new_with_proto_and_callback>
 800c6d0:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800c6d2:	e019      	b.n	800c708 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2b88      	cmp	r3, #136	; 0x88
 800c6d8:	d101      	bne.n	800c6de <lwip_socket+0x42>
 800c6da:	2321      	movs	r3, #33	; 0x21
 800c6dc:	e000      	b.n	800c6e0 <lwip_socket+0x44>
 800c6de:	2320      	movs	r3, #32
 800c6e0:	4a1b      	ldr	r2, [pc, #108]	; (800c750 <lwip_socket+0xb4>)
 800c6e2:	2100      	movs	r1, #0
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f7fc fda7 	bl	8009238 <netconn_new_with_proto_and_callback>
 800c6ea:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800c6ec:	e00c      	b.n	800c708 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800c6ee:	4a18      	ldr	r2, [pc, #96]	; (800c750 <lwip_socket+0xb4>)
 800c6f0:	2100      	movs	r1, #0
 800c6f2:	2010      	movs	r0, #16
 800c6f4:	f7fc fda0 	bl	8009238 <netconn_new_with_proto_and_callback>
 800c6f8:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800c6fa:	e005      	b.n	800c708 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800c6fc:	4b15      	ldr	r3, [pc, #84]	; (800c754 <lwip_socket+0xb8>)
 800c6fe:	2216      	movs	r2, #22
 800c700:	601a      	str	r2, [r3, #0]
      return -1;
 800c702:	f04f 33ff 	mov.w	r3, #4294967295
 800c706:	e01e      	b.n	800c746 <lwip_socket+0xaa>
  }

  if (!conn) {
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d105      	bne.n	800c71a <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800c70e:	4b11      	ldr	r3, [pc, #68]	; (800c754 <lwip_socket+0xb8>)
 800c710:	2269      	movs	r2, #105	; 0x69
 800c712:	601a      	str	r2, [r3, #0]
    return -1;
 800c714:	f04f 33ff 	mov.w	r3, #4294967295
 800c718:	e015      	b.n	800c746 <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800c71a:	2100      	movs	r1, #0
 800c71c:	6978      	ldr	r0, [r7, #20]
 800c71e:	f7ff f87f 	bl	800b820 <alloc_socket>
 800c722:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c72a:	d108      	bne.n	800c73e <lwip_socket+0xa2>
    netconn_delete(conn);
 800c72c:	6978      	ldr	r0, [r7, #20]
 800c72e:	f7fc fe21 	bl	8009374 <netconn_delete>
    set_errno(ENFILE);
 800c732:	4b08      	ldr	r3, [pc, #32]	; (800c754 <lwip_socket+0xb8>)
 800c734:	2217      	movs	r2, #23
 800c736:	601a      	str	r2, [r3, #0]
    return -1;
 800c738:	f04f 33ff 	mov.w	r3, #4294967295
 800c73c:	e003      	b.n	800c746 <lwip_socket+0xaa>
  }
  conn->socket = i;
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	693a      	ldr	r2, [r7, #16]
 800c742:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800c744:	693b      	ldr	r3, [r7, #16]
}
 800c746:	4618      	mov	r0, r3
 800c748:	3718      	adds	r7, #24
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}
 800c74e:	bf00      	nop
 800c750:	0800c7e1 	.word	0x0800c7e1
 800c754:	200120bc 	.word	0x200120bc

0800c758 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800c758:	b480      	push	{r7}
 800c75a:	b087      	sub	sp, #28
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	607a      	str	r2, [r7, #4]
 800c764:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800c766:	2300      	movs	r3, #0
 800c768:	617b      	str	r3, [r7, #20]
 800c76a:	e02c      	b.n	800c7c6 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	695a      	ldr	r2, [r3, #20]
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	00db      	lsls	r3, r3, #3
 800c774:	4413      	add	r3, r2
 800c776:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	68ba      	ldr	r2, [r7, #8]
 800c77e:	429a      	cmp	r2, r3
 800c780:	d11e      	bne.n	800c7c0 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d009      	beq.n	800c79c <lwip_poll_should_wake+0x44>
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c78e:	b29b      	uxth	r3, r3
 800c790:	f003 0301 	and.w	r3, r3, #1
 800c794:	2b00      	cmp	r3, #0
 800c796:	d001      	beq.n	800c79c <lwip_poll_should_wake+0x44>
        return 1;
 800c798:	2301      	movs	r3, #1
 800c79a:	e01a      	b.n	800c7d2 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d009      	beq.n	800c7b6 <lwip_poll_should_wake+0x5e>
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c7a8:	b29b      	uxth	r3, r3
 800c7aa:	f003 0302 	and.w	r3, r3, #2
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d001      	beq.n	800c7b6 <lwip_poll_should_wake+0x5e>
        return 1;
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	e00d      	b.n	800c7d2 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800c7b6:	6a3b      	ldr	r3, [r7, #32]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d001      	beq.n	800c7c0 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800c7bc:	2301      	movs	r3, #1
 800c7be:	e008      	b.n	800c7d2 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	617b      	str	r3, [r7, #20]
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	699b      	ldr	r3, [r3, #24]
 800c7ca:	697a      	ldr	r2, [r7, #20]
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d3cd      	bcc.n	800c76c <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800c7d0:	2300      	movs	r3, #0
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	371c      	adds	r7, #28
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7dc:	4770      	bx	lr
	...

0800c7e0 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b08a      	sub	sp, #40	; 0x28
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	70fb      	strb	r3, [r7, #3]
 800c7ec:	4613      	mov	r3, r2
 800c7ee:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	f000 80a4 	beq.w	800c940 <event_callback+0x160>
    s = conn->socket;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	699b      	ldr	r3, [r3, #24]
 800c7fc:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800c7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c800:	2b00      	cmp	r3, #0
 800c802:	da18      	bge.n	800c836 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800c804:	f00b ffb0 	bl	8018768 <sys_arch_protect>
 800c808:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	699b      	ldr	r3, [r3, #24]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	da0b      	bge.n	800c82a <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800c812:	78fb      	ldrb	r3, [r7, #3]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d104      	bne.n	800c822 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	699b      	ldr	r3, [r3, #24]
 800c81c:	1e5a      	subs	r2, r3, #1
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800c822:	69f8      	ldr	r0, [r7, #28]
 800c824:	f00b ffae 	bl	8018784 <sys_arch_unprotect>
        return;
 800c828:	e08d      	b.n	800c946 <event_callback+0x166>
      }
      s = conn->socket;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	699b      	ldr	r3, [r3, #24]
 800c82e:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800c830:	69f8      	ldr	r0, [r7, #28]
 800c832:	f00b ffa7 	bl	8018784 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800c836:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c838:	f7fe ffda 	bl	800b7f0 <get_socket>
 800c83c:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800c83e:	69bb      	ldr	r3, [r7, #24]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d07f      	beq.n	800c944 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800c844:	2301      	movs	r3, #1
 800c846:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800c848:	f00b ff8e 	bl	8018768 <sys_arch_protect>
 800c84c:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800c84e:	78fb      	ldrb	r3, [r7, #3]
 800c850:	2b04      	cmp	r3, #4
 800c852:	d83e      	bhi.n	800c8d2 <event_callback+0xf2>
 800c854:	a201      	add	r2, pc, #4	; (adr r2, 800c85c <event_callback+0x7c>)
 800c856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c85a:	bf00      	nop
 800c85c:	0800c871 	.word	0x0800c871
 800c860:	0800c893 	.word	0x0800c893
 800c864:	0800c8ab 	.word	0x0800c8ab
 800c868:	0800c8bf 	.word	0x0800c8bf
 800c86c:	0800c8cb 	.word	0x0800c8cb
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800c870:	69bb      	ldr	r3, [r7, #24]
 800c872:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c876:	b29b      	uxth	r3, r3
 800c878:	3301      	adds	r3, #1
 800c87a:	b29b      	uxth	r3, r3
 800c87c:	b21a      	sxth	r2, r3
 800c87e:	69bb      	ldr	r3, [r7, #24]
 800c880:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800c882:	69bb      	ldr	r3, [r7, #24]
 800c884:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c888:	2b01      	cmp	r3, #1
 800c88a:	dd2a      	ble.n	800c8e2 <event_callback+0x102>
        check_waiters = 0;
 800c88c:	2300      	movs	r3, #0
 800c88e:	623b      	str	r3, [r7, #32]
      }
      break;
 800c890:	e027      	b.n	800c8e2 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800c892:	69bb      	ldr	r3, [r7, #24]
 800c894:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c898:	b29b      	uxth	r3, r3
 800c89a:	3b01      	subs	r3, #1
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	b21a      	sxth	r2, r3
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	623b      	str	r3, [r7, #32]
      break;
 800c8a8:	e01c      	b.n	800c8e4 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800c8aa:	69bb      	ldr	r3, [r7, #24]
 800c8ac:	895b      	ldrh	r3, [r3, #10]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d001      	beq.n	800c8b6 <event_callback+0xd6>
        check_waiters = 0;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800c8b6:	69bb      	ldr	r3, [r7, #24]
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	815a      	strh	r2, [r3, #10]
      break;
 800c8bc:	e012      	b.n	800c8e4 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800c8be:	69bb      	ldr	r3, [r7, #24]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	623b      	str	r3, [r7, #32]
      break;
 800c8c8:	e00c      	b.n	800c8e4 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800c8ca:	69bb      	ldr	r3, [r7, #24]
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	819a      	strh	r2, [r3, #12]
      break;
 800c8d0:	e008      	b.n	800c8e4 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800c8d2:	4b1e      	ldr	r3, [pc, #120]	; (800c94c <event_callback+0x16c>)
 800c8d4:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800c8d8:	491d      	ldr	r1, [pc, #116]	; (800c950 <event_callback+0x170>)
 800c8da:	481e      	ldr	r0, [pc, #120]	; (800c954 <event_callback+0x174>)
 800c8dc:	f00e fa36 	bl	801ad4c <iprintf>
      break;
 800c8e0:	e000      	b.n	800c8e4 <event_callback+0x104>
      break;
 800c8e2:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800c8e4:	69bb      	ldr	r3, [r7, #24]
 800c8e6:	7b9b      	ldrb	r3, [r3, #14]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d025      	beq.n	800c938 <event_callback+0x158>
 800c8ec:	6a3b      	ldr	r3, [r7, #32]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d022      	beq.n	800c938 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800c8f2:	69bb      	ldr	r3, [r7, #24]
 800c8f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	bfcc      	ite	gt
 800c8fc:	2301      	movgt	r3, #1
 800c8fe:	2300      	movle	r3, #0
 800c900:	b2db      	uxtb	r3, r3
 800c902:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800c904:	69bb      	ldr	r3, [r7, #24]
 800c906:	895b      	ldrh	r3, [r3, #10]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	bf14      	ite	ne
 800c90c:	2301      	movne	r3, #1
 800c90e:	2300      	moveq	r3, #0
 800c910:	b2db      	uxtb	r3, r3
 800c912:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800c914:	69bb      	ldr	r3, [r7, #24]
 800c916:	899b      	ldrh	r3, [r3, #12]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	bf14      	ite	ne
 800c91c:	2301      	movne	r3, #1
 800c91e:	2300      	moveq	r3, #0
 800c920:	b2db      	uxtb	r3, r3
 800c922:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800c924:	69f8      	ldr	r0, [r7, #28]
 800c926:	f00b ff2d 	bl	8018784 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	693a      	ldr	r2, [r7, #16]
 800c92e:	6979      	ldr	r1, [r7, #20]
 800c930:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c932:	f000 f811 	bl	800c958 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800c936:	e006      	b.n	800c946 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800c938:	69f8      	ldr	r0, [r7, #28]
 800c93a:	f00b ff23 	bl	8018784 <sys_arch_unprotect>
 800c93e:	e002      	b.n	800c946 <event_callback+0x166>
    return;
 800c940:	bf00      	nop
 800c942:	e000      	b.n	800c946 <event_callback+0x166>
      return;
 800c944:	bf00      	nop
  }
  done_socket(sock);
}
 800c946:	3728      	adds	r7, #40	; 0x28
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}
 800c94c:	0801c428 	.word	0x0801c428
 800c950:	0801c7a4 	.word	0x0801c7a4
 800c954:	0801c47c 	.word	0x0801c47c

0800c958 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b088      	sub	sp, #32
 800c95c:	af02      	add	r7, sp, #8
 800c95e:	60f8      	str	r0, [r7, #12]
 800c960:	60b9      	str	r1, [r7, #8]
 800c962:	607a      	str	r2, [r7, #4]
 800c964:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800c966:	4b3e      	ldr	r3, [pc, #248]	; (800ca60 <select_check_waiters+0x108>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	617b      	str	r3, [r7, #20]
 800c96c:	e06f      	b.n	800ca4e <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	69db      	ldr	r3, [r3, #28]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d168      	bne.n	800ca48 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800c976:	2300      	movs	r3, #0
 800c978:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	695b      	ldr	r3, [r3, #20]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d009      	beq.n	800c996 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	9300      	str	r3, [sp, #0]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	68ba      	ldr	r2, [r7, #8]
 800c98a:	68f9      	ldr	r1, [r7, #12]
 800c98c:	6978      	ldr	r0, [r7, #20]
 800c98e:	f7ff fee3 	bl	800c758 <lwip_poll_should_wake>
 800c992:	6138      	str	r0, [r7, #16]
 800c994:	e04d      	b.n	800ca32 <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d014      	beq.n	800c9c6 <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	689b      	ldr	r3, [r3, #8]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d010      	beq.n	800c9c6 <select_check_waiters+0x6e>
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	689b      	ldr	r3, [r3, #8]
 800c9a8:	68fa      	ldr	r2, [r7, #12]
 800c9aa:	0952      	lsrs	r2, r2, #5
 800c9ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9b0:	68fa      	ldr	r2, [r7, #12]
 800c9b2:	f002 021f 	and.w	r2, r2, #31
 800c9b6:	2101      	movs	r1, #1
 800c9b8:	fa01 f202 	lsl.w	r2, r1, r2
 800c9bc:	4013      	ands	r3, r2
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d001      	beq.n	800c9c6 <select_check_waiters+0x6e>
            do_signal = 1;
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d017      	beq.n	800c9fc <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d114      	bne.n	800c9fc <select_check_waiters+0xa4>
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	68db      	ldr	r3, [r3, #12]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d010      	beq.n	800c9fc <select_check_waiters+0xa4>
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	68db      	ldr	r3, [r3, #12]
 800c9de:	68fa      	ldr	r2, [r7, #12]
 800c9e0:	0952      	lsrs	r2, r2, #5
 800c9e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9e6:	68fa      	ldr	r2, [r7, #12]
 800c9e8:	f002 021f 	and.w	r2, r2, #31
 800c9ec:	2101      	movs	r1, #1
 800c9ee:	fa01 f202 	lsl.w	r2, r1, r2
 800c9f2:	4013      	ands	r3, r2
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d001      	beq.n	800c9fc <select_check_waiters+0xa4>
            do_signal = 1;
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d017      	beq.n	800ca32 <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d114      	bne.n	800ca32 <select_check_waiters+0xda>
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	691b      	ldr	r3, [r3, #16]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d010      	beq.n	800ca32 <select_check_waiters+0xda>
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	691b      	ldr	r3, [r3, #16]
 800ca14:	68fa      	ldr	r2, [r7, #12]
 800ca16:	0952      	lsrs	r2, r2, #5
 800ca18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca1c:	68fa      	ldr	r2, [r7, #12]
 800ca1e:	f002 021f 	and.w	r2, r2, #31
 800ca22:	2101      	movs	r1, #1
 800ca24:	fa01 f202 	lsl.w	r2, r1, r2
 800ca28:	4013      	ands	r3, r2
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d001      	beq.n	800ca32 <select_check_waiters+0xda>
            do_signal = 1;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d007      	beq.n	800ca48 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	3320      	adds	r3, #32
 800ca42:	4618      	mov	r0, r3
 800ca44:	f00b fdfa 	bl	801863c <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	617b      	str	r3, [r7, #20]
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d18c      	bne.n	800c96e <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800ca54:	bf00      	nop
 800ca56:	bf00      	nop
 800ca58:	3718      	adds	r7, #24
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	2000b1c4 	.word	0x2000b1c4

0800ca64 <lwip_sockopt_to_ipopt>:
}
#endif  /* LWIP_TCPIP_CORE_LOCKING */

static int
lwip_sockopt_to_ipopt(int optname)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b082      	sub	sp, #8
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  /* Map SO_* values to our internal SOF_* values
   * We should not rely on #defines in socket.h
   * being in sync with ip.h.
   */
  switch (optname) {
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2b20      	cmp	r3, #32
 800ca70:	d009      	beq.n	800ca86 <lwip_sockopt_to_ipopt+0x22>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2b20      	cmp	r3, #32
 800ca76:	dc0c      	bgt.n	800ca92 <lwip_sockopt_to_ipopt+0x2e>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2b04      	cmp	r3, #4
 800ca7c:	d007      	beq.n	800ca8e <lwip_sockopt_to_ipopt+0x2a>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2b08      	cmp	r3, #8
 800ca82:	d002      	beq.n	800ca8a <lwip_sockopt_to_ipopt+0x26>
 800ca84:	e005      	b.n	800ca92 <lwip_sockopt_to_ipopt+0x2e>
  case SO_BROADCAST:
    return SOF_BROADCAST;
 800ca86:	2320      	movs	r3, #32
 800ca88:	e00b      	b.n	800caa2 <lwip_sockopt_to_ipopt+0x3e>
  case SO_KEEPALIVE:
    return SOF_KEEPALIVE;
 800ca8a:	2308      	movs	r3, #8
 800ca8c:	e009      	b.n	800caa2 <lwip_sockopt_to_ipopt+0x3e>
  case SO_REUSEADDR:
    return SOF_REUSEADDR;
 800ca8e:	2304      	movs	r3, #4
 800ca90:	e007      	b.n	800caa2 <lwip_sockopt_to_ipopt+0x3e>
  default:
    LWIP_ASSERT("Unknown socket option", 0);
 800ca92:	4b06      	ldr	r3, [pc, #24]	; (800caac <lwip_sockopt_to_ipopt+0x48>)
 800ca94:	f640 3239 	movw	r2, #2873	; 0xb39
 800ca98:	4905      	ldr	r1, [pc, #20]	; (800cab0 <lwip_sockopt_to_ipopt+0x4c>)
 800ca9a:	4806      	ldr	r0, [pc, #24]	; (800cab4 <lwip_sockopt_to_ipopt+0x50>)
 800ca9c:	f00e f956 	bl	801ad4c <iprintf>
    return 0;
 800caa0:	2300      	movs	r3, #0
  }
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3708      	adds	r7, #8
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	0801c428 	.word	0x0801c428
 800cab0:	0801c7b4 	.word	0x0801c7b4
 800cab4:	0801c47c 	.word	0x0801c47c

0800cab8 <lwip_setsockopt>:
  return err;
}

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b08a      	sub	sp, #40	; 0x28
 800cabc:	af02      	add	r7, sp, #8
 800cabe:	60f8      	str	r0, [r7, #12]
 800cac0:	60b9      	str	r1, [r7, #8]
 800cac2:	607a      	str	r2, [r7, #4]
 800cac4:	603b      	str	r3, [r7, #0]
  int err = 0;
 800cac6:	2300      	movs	r3, #0
 800cac8:	61fb      	str	r3, [r7, #28]
  struct lwip_sock *sock = get_socket(s);
 800caca:	68f8      	ldr	r0, [r7, #12]
 800cacc:	f7fe fe90 	bl	800b7f0 <get_socket>
 800cad0:	61b8      	str	r0, [r7, #24]
#if !LWIP_TCPIP_CORE_LOCKING
  err_t cberr;
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
 800cad2:	69bb      	ldr	r3, [r7, #24]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d102      	bne.n	800cade <lwip_setsockopt+0x26>
    return -1;
 800cad8:	f04f 33ff 	mov.w	r3, #4294967295
 800cadc:	e02b      	b.n	800cb36 <lwip_setsockopt+0x7e>
  }

  if (NULL == optval) {
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d10a      	bne.n	800cafa <lwip_setsockopt+0x42>
    sock_set_errno(sock, EFAULT);
 800cae4:	230e      	movs	r3, #14
 800cae6:	613b      	str	r3, [r7, #16]
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d002      	beq.n	800caf4 <lwip_setsockopt+0x3c>
 800caee:	4a14      	ldr	r2, [pc, #80]	; (800cb40 <lwip_setsockopt+0x88>)
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800caf4:	f04f 33ff 	mov.w	r3, #4294967295
 800caf8:	e01d      	b.n	800cb36 <lwip_setsockopt+0x7e>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
 800cafa:	4812      	ldr	r0, [pc, #72]	; (800cb44 <lwip_setsockopt+0x8c>)
 800cafc:	f00b fdf8 	bl	80186f0 <sys_mutex_lock>
  err = lwip_setsockopt_impl(s, level, optname, optval, optlen);
 800cb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb02:	9300      	str	r3, [sp, #0]
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	687a      	ldr	r2, [r7, #4]
 800cb08:	68b9      	ldr	r1, [r7, #8]
 800cb0a:	68f8      	ldr	r0, [r7, #12]
 800cb0c:	f000 f81c 	bl	800cb48 <lwip_setsockopt_impl>
 800cb10:	61f8      	str	r0, [r7, #28]
  UNLOCK_TCPIP_CORE();
 800cb12:	480c      	ldr	r0, [pc, #48]	; (800cb44 <lwip_setsockopt+0x8c>)
 800cb14:	f00b fdfb 	bl	801870e <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif  /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
 800cb18:	69fb      	ldr	r3, [r7, #28]
 800cb1a:	617b      	str	r3, [r7, #20]
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d002      	beq.n	800cb28 <lwip_setsockopt+0x70>
 800cb22:	4a07      	ldr	r2, [pc, #28]	; (800cb40 <lwip_setsockopt+0x88>)
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return err ? -1 : 0;
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d002      	beq.n	800cb34 <lwip_setsockopt+0x7c>
 800cb2e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb32:	e000      	b.n	800cb36 <lwip_setsockopt+0x7e>
 800cb34:	2300      	movs	r3, #0
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3720      	adds	r7, #32
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	200120bc 	.word	0x200120bc
 800cb44:	2000e988 	.word	0x2000e988

0800cb48 <lwip_setsockopt_impl>:
/** lwip_setsockopt_impl: the actual implementation of setsockopt:
 * same argument as lwip_setsockopt, either called directly or through callback
 */
static int
lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b088      	sub	sp, #32
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	607a      	str	r2, [r7, #4]
 800cb54:	603b      	str	r3, [r7, #0]
  int err = 0;
 800cb56:	2300      	movs	r3, #0
 800cb58:	61fb      	str	r3, [r7, #28]
  struct lwip_sock *sock = tryget_socket(s);
 800cb5a:	68f8      	ldr	r0, [r7, #12]
 800cb5c:	f7fe fe31 	bl	800b7c2 <tryget_socket>
 800cb60:	6178      	str	r0, [r7, #20]
  if (!sock) {
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d101      	bne.n	800cb6c <lwip_setsockopt_impl+0x24>
    return EBADF;
 800cb68:	2309      	movs	r3, #9
 800cb6a:	e187      	b.n	800ce7c <lwip_setsockopt_impl+0x334>
  if (LWIP_HOOK_SOCKETS_SETSOCKOPT(s, sock, level, optname, optval, optlen, &err)) {
    return err;
  }
#endif

  switch (level) {
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	f640 72ff 	movw	r2, #4095	; 0xfff
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d015      	beq.n	800cba2 <lwip_setsockopt_impl+0x5a>
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb7c:	f280 817a 	bge.w	800ce74 <lwip_setsockopt_impl+0x32c>
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	2bff      	cmp	r3, #255	; 0xff
 800cb84:	f000 8172 	beq.w	800ce6c <lwip_setsockopt_impl+0x324>
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	2bff      	cmp	r3, #255	; 0xff
 800cb8c:	f300 8172 	bgt.w	800ce74 <lwip_setsockopt_impl+0x32c>
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	f000 80e0 	beq.w	800cd58 <lwip_setsockopt_impl+0x210>
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	2b06      	cmp	r3, #6
 800cb9c:	f000 8116 	beq.w	800cdcc <lwip_setsockopt_impl+0x284>
 800cba0:	e168      	b.n	800ce74 <lwip_setsockopt_impl+0x32c>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f241 020b 	movw	r2, #4107	; 0x100b
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	f000 8091 	beq.w	800ccd0 <lwip_setsockopt_impl+0x188>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f241 020b 	movw	r2, #4107	; 0x100b
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	f300 80cb 	bgt.w	800cd50 <lwip_setsockopt_impl+0x208>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f241 020a 	movw	r2, #4106	; 0x100a
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d050      	beq.n	800cc66 <lwip_setsockopt_impl+0x11e>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f241 020a 	movw	r2, #4106	; 0x100a
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	f300 80c0 	bgt.w	800cd50 <lwip_setsockopt_impl+0x208>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2b08      	cmp	r3, #8
 800cbd4:	d003      	beq.n	800cbde <lwip_setsockopt_impl+0x96>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2b20      	cmp	r3, #32
 800cbda:	f040 80b9 	bne.w	800cd50 <lwip_setsockopt_impl+0x208>
        case SO_BROADCAST:
        case SO_KEEPALIVE:
#if SO_REUSE
        case SO_REUSEADDR:
#endif /* SO_REUSE */
          if ((optname == SO_BROADCAST) &&
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2b20      	cmp	r3, #32
 800cbe2:	d108      	bne.n	800cbf6 <lwip_setsockopt_impl+0xae>
              (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_UDP)) {
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	781b      	ldrb	r3, [r3, #0]
 800cbea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if ((optname == SO_BROADCAST) &&
 800cbee:	2b20      	cmp	r3, #32
 800cbf0:	d001      	beq.n	800cbf6 <lwip_setsockopt_impl+0xae>
            done_socket(sock);
            return ENOPROTOOPT;
 800cbf2:	235c      	movs	r3, #92	; 0x5c
 800cbf4:	e142      	b.n	800ce7c <lwip_setsockopt_impl+0x334>
          }

          optname = lwip_sockopt_to_ipopt(optname);
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f7ff ff34 	bl	800ca64 <lwip_sockopt_to_ipopt>
 800cbfc:	6078      	str	r0, [r7, #4]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800cbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc00:	2b03      	cmp	r3, #3
 800cc02:	d801      	bhi.n	800cc08 <lwip_setsockopt_impl+0xc0>
 800cc04:	2316      	movs	r3, #22
 800cc06:	e139      	b.n	800ce7c <lwip_setsockopt_impl+0x334>
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d004      	beq.n	800cc1a <lwip_setsockopt_impl+0xd2>
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	685b      	ldr	r3, [r3, #4]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d101      	bne.n	800cc1e <lwip_setsockopt_impl+0xd6>
 800cc1a:	2316      	movs	r3, #22
 800cc1c:	e12e      	b.n	800ce7c <lwip_setsockopt_impl+0x334>
          if (*(const int *)optval) {
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d00e      	beq.n	800cc44 <lwip_setsockopt_impl+0xfc>
            ip_set_option(sock->conn->pcb.ip, optname);
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	685b      	ldr	r3, [r3, #4]
 800cc2c:	7a5b      	ldrb	r3, [r3, #9]
 800cc2e:	b25a      	sxtb	r2, r3
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	b25b      	sxtb	r3, r3
 800cc34:	4313      	orrs	r3, r2
 800cc36:	b25a      	sxtb	r2, r3
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	b2d2      	uxtb	r2, r2
 800cc40:	725a      	strb	r2, [r3, #9]
          } else {
            ip_reset_option(sock->conn->pcb.ip, optname);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                                      s, optname, (*(const int *)optval ? "on" : "off")));
          break;
 800cc42:	e088      	b.n	800cd56 <lwip_setsockopt_impl+0x20e>
            ip_reset_option(sock->conn->pcb.ip, optname);
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	7a5b      	ldrb	r3, [r3, #9]
 800cc4c:	b25a      	sxtb	r2, r3
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	b25b      	sxtb	r3, r3
 800cc52:	43db      	mvns	r3, r3
 800cc54:	b25b      	sxtb	r3, r3
 800cc56:	4013      	ands	r3, r2
 800cc58:	b25a      	sxtb	r2, r3
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	b2d2      	uxtb	r2, r2
 800cc62:	725a      	strb	r2, [r3, #9]
          break;
 800cc64:	e077      	b.n	800cd56 <lwip_setsockopt_impl+0x20e>
        }
        break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
        case SO_NO_CHECK:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
 800cc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc68:	2b03      	cmp	r3, #3
 800cc6a:	d801      	bhi.n	800cc70 <lwip_setsockopt_impl+0x128>
 800cc6c:	2316      	movs	r3, #22
 800cc6e:	e105      	b.n	800ce7c <lwip_setsockopt_impl+0x334>
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d004      	beq.n	800cc82 <lwip_setsockopt_impl+0x13a>
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d101      	bne.n	800cc86 <lwip_setsockopt_impl+0x13e>
 800cc82:	2316      	movs	r3, #22
 800cc84:	e0fa      	b.n	800ce7c <lwip_setsockopt_impl+0x334>
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc90:	2b20      	cmp	r3, #32
 800cc92:	d001      	beq.n	800cc98 <lwip_setsockopt_impl+0x150>
 800cc94:	235c      	movs	r3, #92	; 0x5c
 800cc96:	e0f1      	b.n	800ce7c <lwip_setsockopt_impl+0x334>
            /* this flag is only available for UDP, not for UDP lite */
            done_socket(sock);
            return EAFNOSUPPORT;
          }
#endif /* LWIP_UDPLITE */
          if (*(const int *)optval) {
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d00b      	beq.n	800ccb8 <lwip_setsockopt_impl+0x170>
            udp_set_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	685b      	ldr	r3, [r3, #4]
 800cca6:	7c1a      	ldrb	r2, [r3, #16]
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	f042 0201 	orr.w	r2, r2, #1
 800ccb2:	b2d2      	uxtb	r2, r2
 800ccb4:	741a      	strb	r2, [r3, #16]
          } else {
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
          }
          break;
 800ccb6:	e04e      	b.n	800cd56 <lwip_setsockopt_impl+0x20e>
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	7c1a      	ldrb	r2, [r3, #16]
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	685b      	ldr	r3, [r3, #4]
 800ccc6:	f022 0201 	bic.w	r2, r2, #1
 800ccca:	b2d2      	uxtb	r2, r2
 800cccc:	741a      	strb	r2, [r3, #16]
          break;
 800ccce:	e042      	b.n	800cd56 <lwip_setsockopt_impl+0x20e>
#endif /* LWIP_UDP */
        case SO_BINDTODEVICE: {
          const struct ifreq *iface;
          struct netif *n = NULL;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	61bb      	str	r3, [r7, #24]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, struct ifreq);
 800ccd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd6:	2b05      	cmp	r3, #5
 800ccd8:	d801      	bhi.n	800ccde <lwip_setsockopt_impl+0x196>
 800ccda:	2316      	movs	r3, #22
 800ccdc:	e0ce      	b.n	800ce7c <lwip_setsockopt_impl+0x334>
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d101      	bne.n	800ccea <lwip_setsockopt_impl+0x1a2>
 800cce6:	2316      	movs	r3, #22
 800cce8:	e0c8      	b.n	800ce7c <lwip_setsockopt_impl+0x334>

          iface = (const struct ifreq *)optval;
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	613b      	str	r3, [r7, #16]
          if (iface->ifr_name[0] != 0) {
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d009      	beq.n	800cd0a <lwip_setsockopt_impl+0x1c2>
            n = netif_find(iface->ifr_name);
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f001 fac5 	bl	800e288 <netif_find>
 800ccfe:	61b8      	str	r0, [r7, #24]
            if (n == NULL) {
 800cd00:	69bb      	ldr	r3, [r7, #24]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d101      	bne.n	800cd0a <lwip_setsockopt_impl+0x1c2>
              done_socket(sock);
              return ENODEV;
 800cd06:	2313      	movs	r3, #19
 800cd08:	e0b8      	b.n	800ce7c <lwip_setsockopt_impl+0x334>
            }
          }

          switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd14:	2b10      	cmp	r3, #16
 800cd16:	d002      	beq.n	800cd1e <lwip_setsockopt_impl+0x1d6>
 800cd18:	2b20      	cmp	r3, #32
 800cd1a:	d008      	beq.n	800cd2e <lwip_setsockopt_impl+0x1e6>
 800cd1c:	e00f      	b.n	800cd3e <lwip_setsockopt_impl+0x1f6>
#if LWIP_TCP
            case NETCONN_TCP:
              tcp_bind_netif(sock->conn->pcb.tcp, n);
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	685b      	ldr	r3, [r3, #4]
 800cd24:	69b9      	ldr	r1, [r7, #24]
 800cd26:	4618      	mov	r0, r3
 800cd28:	f002 fd24 	bl	800f774 <tcp_bind_netif>
              break;
 800cd2c:	e00f      	b.n	800cd4e <lwip_setsockopt_impl+0x206>
#endif
#if LWIP_UDP
            case NETCONN_UDP:
              udp_bind_netif(sock->conn->pcb.udp, n);
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	685b      	ldr	r3, [r3, #4]
 800cd34:	69b9      	ldr	r1, [r7, #24]
 800cd36:	4618      	mov	r0, r3
 800cd38:	f008 ff6c 	bl	8015c14 <udp_bind_netif>
              break;
 800cd3c:	e007      	b.n	800cd4e <lwip_setsockopt_impl+0x206>
            case NETCONN_RAW:
              raw_bind_netif(sock->conn->pcb.raw, n);
              break;
#endif
            default:
              LWIP_ASSERT("Unhandled netconn type in SO_BINDTODEVICE", 0);
 800cd3e:	4b51      	ldr	r3, [pc, #324]	; (800ce84 <lwip_setsockopt_impl+0x33c>)
 800cd40:	f640 527d 	movw	r2, #3453	; 0xd7d
 800cd44:	4950      	ldr	r1, [pc, #320]	; (800ce88 <lwip_setsockopt_impl+0x340>)
 800cd46:	4851      	ldr	r0, [pc, #324]	; (800ce8c <lwip_setsockopt_impl+0x344>)
 800cd48:	f00e f800 	bl	801ad4c <iprintf>
              break;
 800cd4c:	bf00      	nop
          }
        }
        break;
 800cd4e:	e002      	b.n	800cd56 <lwip_setsockopt_impl+0x20e>
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800cd50:	235c      	movs	r3, #92	; 0x5c
 800cd52:	61fb      	str	r3, [r7, #28]
          break;
 800cd54:	bf00      	nop
      }  /* switch (optname) */
      break;
 800cd56:	e090      	b.n	800ce7a <lwip_setsockopt_impl+0x332>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d01a      	beq.n	800cd94 <lwip_setsockopt_impl+0x24c>
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2b02      	cmp	r3, #2
 800cd62:	d12f      	bne.n	800cdc4 <lwip_setsockopt_impl+0x27c>

    /* Level: IPPROTO_IP */
    case IPPROTO_IP:
      switch (optname) {
        case IP_TTL:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800cd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd66:	2b03      	cmp	r3, #3
 800cd68:	d801      	bhi.n	800cd6e <lwip_setsockopt_impl+0x226>
 800cd6a:	2316      	movs	r3, #22
 800cd6c:	e086      	b.n	800ce7c <lwip_setsockopt_impl+0x334>
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d004      	beq.n	800cd80 <lwip_setsockopt_impl+0x238>
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d101      	bne.n	800cd84 <lwip_setsockopt_impl+0x23c>
 800cd80:	2316      	movs	r3, #22
 800cd82:	e07b      	b.n	800ce7c <lwip_setsockopt_impl+0x334>
          sock->conn->pcb.ip->ttl = (u8_t)(*(const int *)optval);
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	681a      	ldr	r2, [r3, #0]
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	b2d2      	uxtb	r2, r2
 800cd90:	72da      	strb	r2, [r3, #11]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                                      s, sock->conn->pcb.ip->ttl));
          break;
 800cd92:	e01a      	b.n	800cdca <lwip_setsockopt_impl+0x282>
        case IP_TOS:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800cd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd96:	2b03      	cmp	r3, #3
 800cd98:	d801      	bhi.n	800cd9e <lwip_setsockopt_impl+0x256>
 800cd9a:	2316      	movs	r3, #22
 800cd9c:	e06e      	b.n	800ce7c <lwip_setsockopt_impl+0x334>
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d004      	beq.n	800cdb0 <lwip_setsockopt_impl+0x268>
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d101      	bne.n	800cdb4 <lwip_setsockopt_impl+0x26c>
 800cdb0:	2316      	movs	r3, #22
 800cdb2:	e063      	b.n	800ce7c <lwip_setsockopt_impl+0x334>
          sock->conn->pcb.ip->tos = (u8_t)(*(const int *)optval);
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	681a      	ldr	r2, [r3, #0]
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	b2d2      	uxtb	r2, r2
 800cdc0:	729a      	strb	r2, [r3, #10]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                                      s, sock->conn->pcb.ip->tos));
          break;
 800cdc2:	e002      	b.n	800cdca <lwip_setsockopt_impl+0x282>
        break;
#endif /* LWIP_IGMP */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800cdc4:	235c      	movs	r3, #92	; 0x5c
 800cdc6:	61fb      	str	r3, [r7, #28]
          break;
 800cdc8:	bf00      	nop
      }  /* switch (optname) */
      break;
 800cdca:	e056      	b.n	800ce7a <lwip_setsockopt_impl+0x332>

#if LWIP_TCP
    /* Level: IPPROTO_TCP */
    case IPPROTO_TCP:
      /* Special case: all IPPROTO_TCP option take an int */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
 800cdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdce:	2b03      	cmp	r3, #3
 800cdd0:	d801      	bhi.n	800cdd6 <lwip_setsockopt_impl+0x28e>
 800cdd2:	2316      	movs	r3, #22
 800cdd4:	e052      	b.n	800ce7c <lwip_setsockopt_impl+0x334>
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d004      	beq.n	800cde8 <lwip_setsockopt_impl+0x2a0>
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d101      	bne.n	800cdec <lwip_setsockopt_impl+0x2a4>
 800cde8:	2316      	movs	r3, #22
 800cdea:	e047      	b.n	800ce7c <lwip_setsockopt_impl+0x334>
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cdf6:	2b10      	cmp	r3, #16
 800cdf8:	d001      	beq.n	800cdfe <lwip_setsockopt_impl+0x2b6>
 800cdfa:	235c      	movs	r3, #92	; 0x5c
 800cdfc:	e03e      	b.n	800ce7c <lwip_setsockopt_impl+0x334>
      if (sock->conn->pcb.tcp->state == LISTEN) {
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	7d1b      	ldrb	r3, [r3, #20]
 800ce06:	2b01      	cmp	r3, #1
 800ce08:	d101      	bne.n	800ce0e <lwip_setsockopt_impl+0x2c6>
        done_socket(sock);
        return EINVAL;
 800ce0a:	2316      	movs	r3, #22
 800ce0c:	e036      	b.n	800ce7c <lwip_setsockopt_impl+0x334>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	d003      	beq.n	800ce1c <lwip_setsockopt_impl+0x2d4>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2b02      	cmp	r3, #2
 800ce18:	d01c      	beq.n	800ce54 <lwip_setsockopt_impl+0x30c>
 800ce1a:	e023      	b.n	800ce64 <lwip_setsockopt_impl+0x31c>
      }
      switch (optname) {
        case TCP_NODELAY:
          if (*(const int *)optval) {
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d00b      	beq.n	800ce3c <lwip_setsockopt_impl+0x2f4>
            tcp_nagle_disable(sock->conn->pcb.tcp);
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	685b      	ldr	r3, [r3, #4]
 800ce2a:	8b5a      	ldrh	r2, [r3, #26]
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce36:	b292      	uxth	r2, r2
 800ce38:	835a      	strh	r2, [r3, #26]
          } else {
            tcp_nagle_enable(sock->conn->pcb.tcp);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                                      s, (*(const int *)optval) ? "on" : "off") );
          break;
 800ce3a:	e016      	b.n	800ce6a <lwip_setsockopt_impl+0x322>
            tcp_nagle_enable(sock->conn->pcb.tcp);
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	685b      	ldr	r3, [r3, #4]
 800ce42:	8b5a      	ldrh	r2, [r3, #26]
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	685b      	ldr	r3, [r3, #4]
 800ce4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce4e:	b292      	uxth	r2, r2
 800ce50:	835a      	strh	r2, [r3, #26]
          break;
 800ce52:	e00a      	b.n	800ce6a <lwip_setsockopt_impl+0x322>
        case TCP_KEEPALIVE:
          sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int *)optval);
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	697b      	ldr	r3, [r7, #20]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                                      s, sock->conn->pcb.tcp->keep_idle));
          break;
 800ce62:	e002      	b.n	800ce6a <lwip_setsockopt_impl+0x322>
          break;
#endif /* LWIP_TCP_KEEPALIVE */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800ce64:	235c      	movs	r3, #92	; 0x5c
 800ce66:	61fb      	str	r3, [r7, #28]
          break;
 800ce68:	bf00      	nop
      }  /* switch (optname) */
      break;
 800ce6a:	e006      	b.n	800ce7a <lwip_setsockopt_impl+0x332>
          break;
#endif /* LWIP_IPV6 && LWIP_RAW */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800ce6c:	235c      	movs	r3, #92	; 0x5c
 800ce6e:	61fb      	str	r3, [r7, #28]
          break;
 800ce70:	bf00      	nop
      }  /* switch (optname) */
      break;
 800ce72:	e002      	b.n	800ce7a <lwip_setsockopt_impl+0x332>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                  s, level, optname));
      err = ENOPROTOOPT;
 800ce74:	235c      	movs	r3, #92	; 0x5c
 800ce76:	61fb      	str	r3, [r7, #28]
      break;
 800ce78:	bf00      	nop
  }  /* switch (level) */

  done_socket(sock);
  return err;
 800ce7a:	69fb      	ldr	r3, [r7, #28]
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3720      	adds	r7, #32
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}
 800ce84:	0801c428 	.word	0x0801c428
 800ce88:	0801c7cc 	.word	0x0801c7cc
 800ce8c:	0801c47c 	.word	0x0801c47c

0800ce90 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800ce9a:	f008 fa4f 	bl	801533c <sys_timeouts_sleeptime>
 800ce9e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cea6:	d10b      	bne.n	800cec0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800cea8:	4813      	ldr	r0, [pc, #76]	; (800cef8 <tcpip_timeouts_mbox_fetch+0x68>)
 800ceaa:	f00b fc30 	bl	801870e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800ceae:	2200      	movs	r2, #0
 800ceb0:	6839      	ldr	r1, [r7, #0]
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f00b fb06 	bl	80184c4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ceb8:	480f      	ldr	r0, [pc, #60]	; (800cef8 <tcpip_timeouts_mbox_fetch+0x68>)
 800ceba:	f00b fc19 	bl	80186f0 <sys_mutex_lock>
    return;
 800cebe:	e018      	b.n	800cef2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d102      	bne.n	800cecc <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800cec6:	f008 f9ff 	bl	80152c8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ceca:	e7e6      	b.n	800ce9a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800cecc:	480a      	ldr	r0, [pc, #40]	; (800cef8 <tcpip_timeouts_mbox_fetch+0x68>)
 800cece:	f00b fc1e 	bl	801870e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800ced2:	68fa      	ldr	r2, [r7, #12]
 800ced4:	6839      	ldr	r1, [r7, #0]
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f00b faf4 	bl	80184c4 <sys_arch_mbox_fetch>
 800cedc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800cede:	4806      	ldr	r0, [pc, #24]	; (800cef8 <tcpip_timeouts_mbox_fetch+0x68>)
 800cee0:	f00b fc06 	bl	80186f0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceea:	d102      	bne.n	800cef2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800ceec:	f008 f9ec 	bl	80152c8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cef0:	e7d3      	b.n	800ce9a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800cef2:	3710      	adds	r7, #16
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}
 800cef8:	2000e988 	.word	0x2000e988

0800cefc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b084      	sub	sp, #16
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800cf04:	4810      	ldr	r0, [pc, #64]	; (800cf48 <tcpip_thread+0x4c>)
 800cf06:	f00b fbf3 	bl	80186f0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800cf0a:	4b10      	ldr	r3, [pc, #64]	; (800cf4c <tcpip_thread+0x50>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d005      	beq.n	800cf1e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800cf12:	4b0e      	ldr	r3, [pc, #56]	; (800cf4c <tcpip_thread+0x50>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	4a0e      	ldr	r2, [pc, #56]	; (800cf50 <tcpip_thread+0x54>)
 800cf18:	6812      	ldr	r2, [r2, #0]
 800cf1a:	4610      	mov	r0, r2
 800cf1c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cf1e:	f107 030c 	add.w	r3, r7, #12
 800cf22:	4619      	mov	r1, r3
 800cf24:	480b      	ldr	r0, [pc, #44]	; (800cf54 <tcpip_thread+0x58>)
 800cf26:	f7ff ffb3 	bl	800ce90 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d106      	bne.n	800cf3e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cf30:	4b09      	ldr	r3, [pc, #36]	; (800cf58 <tcpip_thread+0x5c>)
 800cf32:	2291      	movs	r2, #145	; 0x91
 800cf34:	4909      	ldr	r1, [pc, #36]	; (800cf5c <tcpip_thread+0x60>)
 800cf36:	480a      	ldr	r0, [pc, #40]	; (800cf60 <tcpip_thread+0x64>)
 800cf38:	f00d ff08 	bl	801ad4c <iprintf>
      continue;
 800cf3c:	e003      	b.n	800cf46 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	4618      	mov	r0, r3
 800cf42:	f000 f80f 	bl	800cf64 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cf46:	e7ea      	b.n	800cf1e <tcpip_thread+0x22>
 800cf48:	2000e988 	.word	0x2000e988
 800cf4c:	2000b1c8 	.word	0x2000b1c8
 800cf50:	2000b1cc 	.word	0x2000b1cc
 800cf54:	2000b1d0 	.word	0x2000b1d0
 800cf58:	0801c7f8 	.word	0x0801c7f8
 800cf5c:	0801c828 	.word	0x0801c828
 800cf60:	0801c848 	.word	0x0801c848

0800cf64 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b082      	sub	sp, #8
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	2b02      	cmp	r3, #2
 800cf72:	d026      	beq.n	800cfc2 <tcpip_thread_handle_msg+0x5e>
 800cf74:	2b02      	cmp	r3, #2
 800cf76:	dc2b      	bgt.n	800cfd0 <tcpip_thread_handle_msg+0x6c>
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d002      	beq.n	800cf82 <tcpip_thread_handle_msg+0x1e>
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	d015      	beq.n	800cfac <tcpip_thread_handle_msg+0x48>
 800cf80:	e026      	b.n	800cfd0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	68db      	ldr	r3, [r3, #12]
 800cf86:	687a      	ldr	r2, [r7, #4]
 800cf88:	6850      	ldr	r0, [r2, #4]
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	6892      	ldr	r2, [r2, #8]
 800cf8e:	4611      	mov	r1, r2
 800cf90:	4798      	blx	r3
 800cf92:	4603      	mov	r3, r0
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d004      	beq.n	800cfa2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f001 fd45 	bl	800ea2c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cfa2:	6879      	ldr	r1, [r7, #4]
 800cfa4:	2009      	movs	r0, #9
 800cfa6:	f000 fe33 	bl	800dc10 <memp_free>
      break;
 800cfaa:	e018      	b.n	800cfde <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	685b      	ldr	r3, [r3, #4]
 800cfb0:	687a      	ldr	r2, [r7, #4]
 800cfb2:	6892      	ldr	r2, [r2, #8]
 800cfb4:	4610      	mov	r0, r2
 800cfb6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800cfb8:	6879      	ldr	r1, [r7, #4]
 800cfba:	2008      	movs	r0, #8
 800cfbc:	f000 fe28 	bl	800dc10 <memp_free>
      break;
 800cfc0:	e00d      	b.n	800cfde <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	685b      	ldr	r3, [r3, #4]
 800cfc6:	687a      	ldr	r2, [r7, #4]
 800cfc8:	6892      	ldr	r2, [r2, #8]
 800cfca:	4610      	mov	r0, r2
 800cfcc:	4798      	blx	r3
      break;
 800cfce:	e006      	b.n	800cfde <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cfd0:	4b05      	ldr	r3, [pc, #20]	; (800cfe8 <tcpip_thread_handle_msg+0x84>)
 800cfd2:	22cf      	movs	r2, #207	; 0xcf
 800cfd4:	4905      	ldr	r1, [pc, #20]	; (800cfec <tcpip_thread_handle_msg+0x88>)
 800cfd6:	4806      	ldr	r0, [pc, #24]	; (800cff0 <tcpip_thread_handle_msg+0x8c>)
 800cfd8:	f00d feb8 	bl	801ad4c <iprintf>
      break;
 800cfdc:	bf00      	nop
  }
}
 800cfde:	bf00      	nop
 800cfe0:	3708      	adds	r7, #8
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	0801c7f8 	.word	0x0801c7f8
 800cfec:	0801c828 	.word	0x0801c828
 800cff0:	0801c848 	.word	0x0801c848

0800cff4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b086      	sub	sp, #24
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	60f8      	str	r0, [r7, #12]
 800cffc:	60b9      	str	r1, [r7, #8]
 800cffe:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d000:	481a      	ldr	r0, [pc, #104]	; (800d06c <tcpip_inpkt+0x78>)
 800d002:	f00b faa7 	bl	8018554 <sys_mbox_valid>
 800d006:	4603      	mov	r3, r0
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d105      	bne.n	800d018 <tcpip_inpkt+0x24>
 800d00c:	4b18      	ldr	r3, [pc, #96]	; (800d070 <tcpip_inpkt+0x7c>)
 800d00e:	22fc      	movs	r2, #252	; 0xfc
 800d010:	4918      	ldr	r1, [pc, #96]	; (800d074 <tcpip_inpkt+0x80>)
 800d012:	4819      	ldr	r0, [pc, #100]	; (800d078 <tcpip_inpkt+0x84>)
 800d014:	f00d fe9a 	bl	801ad4c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800d018:	2009      	movs	r0, #9
 800d01a:	f000 fda7 	bl	800db6c <memp_malloc>
 800d01e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800d020:	697b      	ldr	r3, [r7, #20]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d102      	bne.n	800d02c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800d026:	f04f 33ff 	mov.w	r3, #4294967295
 800d02a:	e01a      	b.n	800d062 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	2200      	movs	r2, #0
 800d030:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	68fa      	ldr	r2, [r7, #12]
 800d036:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	68ba      	ldr	r2, [r7, #8]
 800d03c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d044:	6979      	ldr	r1, [r7, #20]
 800d046:	4809      	ldr	r0, [pc, #36]	; (800d06c <tcpip_inpkt+0x78>)
 800d048:	f00b fa22 	bl	8018490 <sys_mbox_trypost>
 800d04c:	4603      	mov	r3, r0
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d006      	beq.n	800d060 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d052:	6979      	ldr	r1, [r7, #20]
 800d054:	2009      	movs	r0, #9
 800d056:	f000 fddb 	bl	800dc10 <memp_free>
    return ERR_MEM;
 800d05a:	f04f 33ff 	mov.w	r3, #4294967295
 800d05e:	e000      	b.n	800d062 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d060:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d062:	4618      	mov	r0, r3
 800d064:	3718      	adds	r7, #24
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
 800d06a:	bf00      	nop
 800d06c:	2000b1d0 	.word	0x2000b1d0
 800d070:	0801c7f8 	.word	0x0801c7f8
 800d074:	0801c870 	.word	0x0801c870
 800d078:	0801c848 	.word	0x0801c848

0800d07c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d08c:	f003 0318 	and.w	r3, r3, #24
 800d090:	2b00      	cmp	r3, #0
 800d092:	d006      	beq.n	800d0a2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d094:	4a08      	ldr	r2, [pc, #32]	; (800d0b8 <tcpip_input+0x3c>)
 800d096:	6839      	ldr	r1, [r7, #0]
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f7ff ffab 	bl	800cff4 <tcpip_inpkt>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	e005      	b.n	800d0ae <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d0a2:	4a06      	ldr	r2, [pc, #24]	; (800d0bc <tcpip_input+0x40>)
 800d0a4:	6839      	ldr	r1, [r7, #0]
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f7ff ffa4 	bl	800cff4 <tcpip_inpkt>
 800d0ac:	4603      	mov	r3, r0
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3708      	adds	r7, #8
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}
 800d0b6:	bf00      	nop
 800d0b8:	0801828d 	.word	0x0801828d
 800d0bc:	0801709d 	.word	0x0801709d

0800d0c0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b084      	sub	sp, #16
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d0ca:	4819      	ldr	r0, [pc, #100]	; (800d130 <tcpip_try_callback+0x70>)
 800d0cc:	f00b fa42 	bl	8018554 <sys_mbox_valid>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d106      	bne.n	800d0e4 <tcpip_try_callback+0x24>
 800d0d6:	4b17      	ldr	r3, [pc, #92]	; (800d134 <tcpip_try_callback+0x74>)
 800d0d8:	f240 125d 	movw	r2, #349	; 0x15d
 800d0dc:	4916      	ldr	r1, [pc, #88]	; (800d138 <tcpip_try_callback+0x78>)
 800d0de:	4817      	ldr	r0, [pc, #92]	; (800d13c <tcpip_try_callback+0x7c>)
 800d0e0:	f00d fe34 	bl	801ad4c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d0e4:	2008      	movs	r0, #8
 800d0e6:	f000 fd41 	bl	800db6c <memp_malloc>
 800d0ea:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d102      	bne.n	800d0f8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800d0f2:	f04f 33ff 	mov.w	r3, #4294967295
 800d0f6:	e017      	b.n	800d128 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	687a      	ldr	r2, [r7, #4]
 800d102:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	683a      	ldr	r2, [r7, #0]
 800d108:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d10a:	68f9      	ldr	r1, [r7, #12]
 800d10c:	4808      	ldr	r0, [pc, #32]	; (800d130 <tcpip_try_callback+0x70>)
 800d10e:	f00b f9bf 	bl	8018490 <sys_mbox_trypost>
 800d112:	4603      	mov	r3, r0
 800d114:	2b00      	cmp	r3, #0
 800d116:	d006      	beq.n	800d126 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800d118:	68f9      	ldr	r1, [r7, #12]
 800d11a:	2008      	movs	r0, #8
 800d11c:	f000 fd78 	bl	800dc10 <memp_free>
    return ERR_MEM;
 800d120:	f04f 33ff 	mov.w	r3, #4294967295
 800d124:	e000      	b.n	800d128 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800d126:	2300      	movs	r3, #0
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3710      	adds	r7, #16
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}
 800d130:	2000b1d0 	.word	0x2000b1d0
 800d134:	0801c7f8 	.word	0x0801c7f8
 800d138:	0801c870 	.word	0x0801c870
 800d13c:	0801c848 	.word	0x0801c848

0800d140 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b084      	sub	sp, #16
 800d144:	af00      	add	r7, sp, #0
 800d146:	60f8      	str	r0, [r7, #12]
 800d148:	60b9      	str	r1, [r7, #8]
 800d14a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800d14c:	4806      	ldr	r0, [pc, #24]	; (800d168 <tcpip_send_msg_wait_sem+0x28>)
 800d14e:	f00b facf 	bl	80186f0 <sys_mutex_lock>
  fn(apimsg);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	68b8      	ldr	r0, [r7, #8]
 800d156:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800d158:	4803      	ldr	r0, [pc, #12]	; (800d168 <tcpip_send_msg_wait_sem+0x28>)
 800d15a:	f00b fad8 	bl	801870e <sys_mutex_unlock>
  return ERR_OK;
 800d15e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800d160:	4618      	mov	r0, r3
 800d162:	3710      	adds	r7, #16
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	2000e988 	.word	0x2000e988

0800d16c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af02      	add	r7, sp, #8
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
  lwip_init();
 800d176:	f000 f871 	bl	800d25c <lwip_init>

  tcpip_init_done = initfunc;
 800d17a:	4a17      	ldr	r2, [pc, #92]	; (800d1d8 <tcpip_init+0x6c>)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800d180:	4a16      	ldr	r2, [pc, #88]	; (800d1dc <tcpip_init+0x70>)
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d186:	2106      	movs	r1, #6
 800d188:	4815      	ldr	r0, [pc, #84]	; (800d1e0 <tcpip_init+0x74>)
 800d18a:	f00b f955 	bl	8018438 <sys_mbox_new>
 800d18e:	4603      	mov	r3, r0
 800d190:	2b00      	cmp	r3, #0
 800d192:	d006      	beq.n	800d1a2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800d194:	4b13      	ldr	r3, [pc, #76]	; (800d1e4 <tcpip_init+0x78>)
 800d196:	f240 2261 	movw	r2, #609	; 0x261
 800d19a:	4913      	ldr	r1, [pc, #76]	; (800d1e8 <tcpip_init+0x7c>)
 800d19c:	4813      	ldr	r0, [pc, #76]	; (800d1ec <tcpip_init+0x80>)
 800d19e:	f00d fdd5 	bl	801ad4c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d1a2:	4813      	ldr	r0, [pc, #76]	; (800d1f0 <tcpip_init+0x84>)
 800d1a4:	f00b fa8e 	bl	80186c4 <sys_mutex_new>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d006      	beq.n	800d1bc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d1ae:	4b0d      	ldr	r3, [pc, #52]	; (800d1e4 <tcpip_init+0x78>)
 800d1b0:	f240 2265 	movw	r2, #613	; 0x265
 800d1b4:	490f      	ldr	r1, [pc, #60]	; (800d1f4 <tcpip_init+0x88>)
 800d1b6:	480d      	ldr	r0, [pc, #52]	; (800d1ec <tcpip_init+0x80>)
 800d1b8:	f00d fdc8 	bl	801ad4c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d1bc:	2318      	movs	r3, #24
 800d1be:	9300      	str	r3, [sp, #0]
 800d1c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	490c      	ldr	r1, [pc, #48]	; (800d1f8 <tcpip_init+0x8c>)
 800d1c8:	480c      	ldr	r0, [pc, #48]	; (800d1fc <tcpip_init+0x90>)
 800d1ca:	f00b faad 	bl	8018728 <sys_thread_new>
}
 800d1ce:	bf00      	nop
 800d1d0:	3708      	adds	r7, #8
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	2000b1c8 	.word	0x2000b1c8
 800d1dc:	2000b1cc 	.word	0x2000b1cc
 800d1e0:	2000b1d0 	.word	0x2000b1d0
 800d1e4:	0801c7f8 	.word	0x0801c7f8
 800d1e8:	0801c880 	.word	0x0801c880
 800d1ec:	0801c848 	.word	0x0801c848
 800d1f0:	2000e988 	.word	0x2000e988
 800d1f4:	0801c8a4 	.word	0x0801c8a4
 800d1f8:	0800cefd 	.word	0x0800cefd
 800d1fc:	0801c8c8 	.word	0x0801c8c8

0800d200 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d200:	b480      	push	{r7}
 800d202:	b083      	sub	sp, #12
 800d204:	af00      	add	r7, sp, #0
 800d206:	4603      	mov	r3, r0
 800d208:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d20a:	88fb      	ldrh	r3, [r7, #6]
 800d20c:	021b      	lsls	r3, r3, #8
 800d20e:	b21a      	sxth	r2, r3
 800d210:	88fb      	ldrh	r3, [r7, #6]
 800d212:	0a1b      	lsrs	r3, r3, #8
 800d214:	b29b      	uxth	r3, r3
 800d216:	b21b      	sxth	r3, r3
 800d218:	4313      	orrs	r3, r2
 800d21a:	b21b      	sxth	r3, r3
 800d21c:	b29b      	uxth	r3, r3
}
 800d21e:	4618      	mov	r0, r3
 800d220:	370c      	adds	r7, #12
 800d222:	46bd      	mov	sp, r7
 800d224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d228:	4770      	bx	lr

0800d22a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d22a:	b480      	push	{r7}
 800d22c:	b083      	sub	sp, #12
 800d22e:	af00      	add	r7, sp, #0
 800d230:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	061a      	lsls	r2, r3, #24
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	021b      	lsls	r3, r3, #8
 800d23a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d23e:	431a      	orrs	r2, r3
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	0a1b      	lsrs	r3, r3, #8
 800d244:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d248:	431a      	orrs	r2, r3
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	0e1b      	lsrs	r3, r3, #24
 800d24e:	4313      	orrs	r3, r2
}
 800d250:	4618      	mov	r0, r3
 800d252:	370c      	adds	r7, #12
 800d254:	46bd      	mov	sp, r7
 800d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25a:	4770      	bx	lr

0800d25c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d262:	2300      	movs	r3, #0
 800d264:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d266:	f00b fa21 	bl	80186ac <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d26a:	f000 f8d5 	bl	800d418 <mem_init>
  memp_init();
 800d26e:	f000 fc31 	bl	800dad4 <memp_init>
  pbuf_init();
  netif_init();
 800d272:	f000 fcf7 	bl	800dc64 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d276:	f008 f899 	bl	80153ac <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d27a:	f001 fe81 	bl	800ef80 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d27e:	f007 ffdb 	bl	8015238 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d282:	bf00      	nop
 800d284:	3708      	adds	r7, #8
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
	...

0800d28c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b083      	sub	sp, #12
 800d290:	af00      	add	r7, sp, #0
 800d292:	4603      	mov	r3, r0
 800d294:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d296:	4b05      	ldr	r3, [pc, #20]	; (800d2ac <ptr_to_mem+0x20>)
 800d298:	681a      	ldr	r2, [r3, #0]
 800d29a:	88fb      	ldrh	r3, [r7, #6]
 800d29c:	4413      	add	r3, r2
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	370c      	adds	r7, #12
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop
 800d2ac:	2000b1d4 	.word	0x2000b1d4

0800d2b0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b083      	sub	sp, #12
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d2b8:	4b05      	ldr	r3, [pc, #20]	; (800d2d0 <mem_to_ptr+0x20>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	687a      	ldr	r2, [r7, #4]
 800d2be:	1ad3      	subs	r3, r2, r3
 800d2c0:	b29b      	uxth	r3, r3
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	370c      	adds	r7, #12
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr
 800d2ce:	bf00      	nop
 800d2d0:	2000b1d4 	.word	0x2000b1d4

0800d2d4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d2d4:	b590      	push	{r4, r7, lr}
 800d2d6:	b085      	sub	sp, #20
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d2dc:	4b45      	ldr	r3, [pc, #276]	; (800d3f4 <plug_holes+0x120>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	687a      	ldr	r2, [r7, #4]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d206      	bcs.n	800d2f4 <plug_holes+0x20>
 800d2e6:	4b44      	ldr	r3, [pc, #272]	; (800d3f8 <plug_holes+0x124>)
 800d2e8:	f240 12df 	movw	r2, #479	; 0x1df
 800d2ec:	4943      	ldr	r1, [pc, #268]	; (800d3fc <plug_holes+0x128>)
 800d2ee:	4844      	ldr	r0, [pc, #272]	; (800d400 <plug_holes+0x12c>)
 800d2f0:	f00d fd2c 	bl	801ad4c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d2f4:	4b43      	ldr	r3, [pc, #268]	; (800d404 <plug_holes+0x130>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	687a      	ldr	r2, [r7, #4]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d306      	bcc.n	800d30c <plug_holes+0x38>
 800d2fe:	4b3e      	ldr	r3, [pc, #248]	; (800d3f8 <plug_holes+0x124>)
 800d300:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d304:	4940      	ldr	r1, [pc, #256]	; (800d408 <plug_holes+0x134>)
 800d306:	483e      	ldr	r0, [pc, #248]	; (800d400 <plug_holes+0x12c>)
 800d308:	f00d fd20 	bl	801ad4c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	791b      	ldrb	r3, [r3, #4]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d006      	beq.n	800d322 <plug_holes+0x4e>
 800d314:	4b38      	ldr	r3, [pc, #224]	; (800d3f8 <plug_holes+0x124>)
 800d316:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d31a:	493c      	ldr	r1, [pc, #240]	; (800d40c <plug_holes+0x138>)
 800d31c:	4838      	ldr	r0, [pc, #224]	; (800d400 <plug_holes+0x12c>)
 800d31e:	f00d fd15 	bl	801ad4c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	881b      	ldrh	r3, [r3, #0]
 800d326:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d32a:	d906      	bls.n	800d33a <plug_holes+0x66>
 800d32c:	4b32      	ldr	r3, [pc, #200]	; (800d3f8 <plug_holes+0x124>)
 800d32e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d332:	4937      	ldr	r1, [pc, #220]	; (800d410 <plug_holes+0x13c>)
 800d334:	4832      	ldr	r0, [pc, #200]	; (800d400 <plug_holes+0x12c>)
 800d336:	f00d fd09 	bl	801ad4c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	881b      	ldrh	r3, [r3, #0]
 800d33e:	4618      	mov	r0, r3
 800d340:	f7ff ffa4 	bl	800d28c <ptr_to_mem>
 800d344:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d346:	687a      	ldr	r2, [r7, #4]
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	429a      	cmp	r2, r3
 800d34c:	d024      	beq.n	800d398 <plug_holes+0xc4>
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	791b      	ldrb	r3, [r3, #4]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d120      	bne.n	800d398 <plug_holes+0xc4>
 800d356:	4b2b      	ldr	r3, [pc, #172]	; (800d404 <plug_holes+0x130>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	68fa      	ldr	r2, [r7, #12]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d01b      	beq.n	800d398 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d360:	4b2c      	ldr	r3, [pc, #176]	; (800d414 <plug_holes+0x140>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	68fa      	ldr	r2, [r7, #12]
 800d366:	429a      	cmp	r2, r3
 800d368:	d102      	bne.n	800d370 <plug_holes+0x9c>
      lfree = mem;
 800d36a:	4a2a      	ldr	r2, [pc, #168]	; (800d414 <plug_holes+0x140>)
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	881a      	ldrh	r2, [r3, #0]
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	881b      	ldrh	r3, [r3, #0]
 800d37c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d380:	d00a      	beq.n	800d398 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	881b      	ldrh	r3, [r3, #0]
 800d386:	4618      	mov	r0, r3
 800d388:	f7ff ff80 	bl	800d28c <ptr_to_mem>
 800d38c:	4604      	mov	r4, r0
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f7ff ff8e 	bl	800d2b0 <mem_to_ptr>
 800d394:	4603      	mov	r3, r0
 800d396:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	885b      	ldrh	r3, [r3, #2]
 800d39c:	4618      	mov	r0, r3
 800d39e:	f7ff ff75 	bl	800d28c <ptr_to_mem>
 800d3a2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d3a4:	68ba      	ldr	r2, [r7, #8]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	d01f      	beq.n	800d3ec <plug_holes+0x118>
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	791b      	ldrb	r3, [r3, #4]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d11b      	bne.n	800d3ec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d3b4:	4b17      	ldr	r3, [pc, #92]	; (800d414 <plug_holes+0x140>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	687a      	ldr	r2, [r7, #4]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d102      	bne.n	800d3c4 <plug_holes+0xf0>
      lfree = pmem;
 800d3be:	4a15      	ldr	r2, [pc, #84]	; (800d414 <plug_holes+0x140>)
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	881a      	ldrh	r2, [r3, #0]
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	881b      	ldrh	r3, [r3, #0]
 800d3d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d3d4:	d00a      	beq.n	800d3ec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	881b      	ldrh	r3, [r3, #0]
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7ff ff56 	bl	800d28c <ptr_to_mem>
 800d3e0:	4604      	mov	r4, r0
 800d3e2:	68b8      	ldr	r0, [r7, #8]
 800d3e4:	f7ff ff64 	bl	800d2b0 <mem_to_ptr>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d3ec:	bf00      	nop
 800d3ee:	3714      	adds	r7, #20
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd90      	pop	{r4, r7, pc}
 800d3f4:	2000b1d4 	.word	0x2000b1d4
 800d3f8:	0801c8d8 	.word	0x0801c8d8
 800d3fc:	0801c908 	.word	0x0801c908
 800d400:	0801c920 	.word	0x0801c920
 800d404:	2000b1d8 	.word	0x2000b1d8
 800d408:	0801c948 	.word	0x0801c948
 800d40c:	0801c964 	.word	0x0801c964
 800d410:	0801c980 	.word	0x0801c980
 800d414:	2000b1e0 	.word	0x2000b1e0

0800d418 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b082      	sub	sp, #8
 800d41c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d41e:	4b1f      	ldr	r3, [pc, #124]	; (800d49c <mem_init+0x84>)
 800d420:	3303      	adds	r3, #3
 800d422:	f023 0303 	bic.w	r3, r3, #3
 800d426:	461a      	mov	r2, r3
 800d428:	4b1d      	ldr	r3, [pc, #116]	; (800d4a0 <mem_init+0x88>)
 800d42a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d42c:	4b1c      	ldr	r3, [pc, #112]	; (800d4a0 <mem_init+0x88>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d438:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2200      	movs	r2, #0
 800d43e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2200      	movs	r2, #0
 800d444:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d446:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800d44a:	f7ff ff1f 	bl	800d28c <ptr_to_mem>
 800d44e:	4603      	mov	r3, r0
 800d450:	4a14      	ldr	r2, [pc, #80]	; (800d4a4 <mem_init+0x8c>)
 800d452:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d454:	4b13      	ldr	r3, [pc, #76]	; (800d4a4 <mem_init+0x8c>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	2201      	movs	r2, #1
 800d45a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d45c:	4b11      	ldr	r3, [pc, #68]	; (800d4a4 <mem_init+0x8c>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d464:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d466:	4b0f      	ldr	r3, [pc, #60]	; (800d4a4 <mem_init+0x8c>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d46e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d470:	4b0b      	ldr	r3, [pc, #44]	; (800d4a0 <mem_init+0x88>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4a0c      	ldr	r2, [pc, #48]	; (800d4a8 <mem_init+0x90>)
 800d476:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d478:	480c      	ldr	r0, [pc, #48]	; (800d4ac <mem_init+0x94>)
 800d47a:	f00b f923 	bl	80186c4 <sys_mutex_new>
 800d47e:	4603      	mov	r3, r0
 800d480:	2b00      	cmp	r3, #0
 800d482:	d006      	beq.n	800d492 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d484:	4b0a      	ldr	r3, [pc, #40]	; (800d4b0 <mem_init+0x98>)
 800d486:	f240 221f 	movw	r2, #543	; 0x21f
 800d48a:	490a      	ldr	r1, [pc, #40]	; (800d4b4 <mem_init+0x9c>)
 800d48c:	480a      	ldr	r0, [pc, #40]	; (800d4b8 <mem_init+0xa0>)
 800d48e:	f00d fc5d 	bl	801ad4c <iprintf>
  }
}
 800d492:	bf00      	nop
 800d494:	3708      	adds	r7, #8
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	2000e9a4 	.word	0x2000e9a4
 800d4a0:	2000b1d4 	.word	0x2000b1d4
 800d4a4:	2000b1d8 	.word	0x2000b1d8
 800d4a8:	2000b1e0 	.word	0x2000b1e0
 800d4ac:	2000b1dc 	.word	0x2000b1dc
 800d4b0:	0801c8d8 	.word	0x0801c8d8
 800d4b4:	0801c9ac 	.word	0x0801c9ac
 800d4b8:	0801c920 	.word	0x0801c920

0800d4bc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b086      	sub	sp, #24
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f7ff fef3 	bl	800d2b0 <mem_to_ptr>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	881b      	ldrh	r3, [r3, #0]
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7ff feda 	bl	800d28c <ptr_to_mem>
 800d4d8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	885b      	ldrh	r3, [r3, #2]
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7ff fed4 	bl	800d28c <ptr_to_mem>
 800d4e4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	881b      	ldrh	r3, [r3, #0]
 800d4ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d4ee:	d818      	bhi.n	800d522 <mem_link_valid+0x66>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	885b      	ldrh	r3, [r3, #2]
 800d4f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d4f8:	d813      	bhi.n	800d522 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d4fe:	8afa      	ldrh	r2, [r7, #22]
 800d500:	429a      	cmp	r2, r3
 800d502:	d004      	beq.n	800d50e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	881b      	ldrh	r3, [r3, #0]
 800d508:	8afa      	ldrh	r2, [r7, #22]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d109      	bne.n	800d522 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d50e:	4b08      	ldr	r3, [pc, #32]	; (800d530 <mem_link_valid+0x74>)
 800d510:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d512:	693a      	ldr	r2, [r7, #16]
 800d514:	429a      	cmp	r2, r3
 800d516:	d006      	beq.n	800d526 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	885b      	ldrh	r3, [r3, #2]
 800d51c:	8afa      	ldrh	r2, [r7, #22]
 800d51e:	429a      	cmp	r2, r3
 800d520:	d001      	beq.n	800d526 <mem_link_valid+0x6a>
    return 0;
 800d522:	2300      	movs	r3, #0
 800d524:	e000      	b.n	800d528 <mem_link_valid+0x6c>
  }
  return 1;
 800d526:	2301      	movs	r3, #1
}
 800d528:	4618      	mov	r0, r3
 800d52a:	3718      	adds	r7, #24
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}
 800d530:	2000b1d8 	.word	0x2000b1d8

0800d534 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b088      	sub	sp, #32
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d070      	beq.n	800d624 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f003 0303 	and.w	r3, r3, #3
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d00d      	beq.n	800d568 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d54c:	4b37      	ldr	r3, [pc, #220]	; (800d62c <mem_free+0xf8>)
 800d54e:	f240 2273 	movw	r2, #627	; 0x273
 800d552:	4937      	ldr	r1, [pc, #220]	; (800d630 <mem_free+0xfc>)
 800d554:	4837      	ldr	r0, [pc, #220]	; (800d634 <mem_free+0x100>)
 800d556:	f00d fbf9 	bl	801ad4c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d55a:	f00b f905 	bl	8018768 <sys_arch_protect>
 800d55e:	60f8      	str	r0, [r7, #12]
 800d560:	68f8      	ldr	r0, [r7, #12]
 800d562:	f00b f90f 	bl	8018784 <sys_arch_unprotect>
    return;
 800d566:	e05e      	b.n	800d626 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	3b08      	subs	r3, #8
 800d56c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d56e:	4b32      	ldr	r3, [pc, #200]	; (800d638 <mem_free+0x104>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	69fa      	ldr	r2, [r7, #28]
 800d574:	429a      	cmp	r2, r3
 800d576:	d306      	bcc.n	800d586 <mem_free+0x52>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f103 020c 	add.w	r2, r3, #12
 800d57e:	4b2f      	ldr	r3, [pc, #188]	; (800d63c <mem_free+0x108>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	429a      	cmp	r2, r3
 800d584:	d90d      	bls.n	800d5a2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d586:	4b29      	ldr	r3, [pc, #164]	; (800d62c <mem_free+0xf8>)
 800d588:	f240 227f 	movw	r2, #639	; 0x27f
 800d58c:	492c      	ldr	r1, [pc, #176]	; (800d640 <mem_free+0x10c>)
 800d58e:	4829      	ldr	r0, [pc, #164]	; (800d634 <mem_free+0x100>)
 800d590:	f00d fbdc 	bl	801ad4c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d594:	f00b f8e8 	bl	8018768 <sys_arch_protect>
 800d598:	6138      	str	r0, [r7, #16]
 800d59a:	6938      	ldr	r0, [r7, #16]
 800d59c:	f00b f8f2 	bl	8018784 <sys_arch_unprotect>
    return;
 800d5a0:	e041      	b.n	800d626 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d5a2:	4828      	ldr	r0, [pc, #160]	; (800d644 <mem_free+0x110>)
 800d5a4:	f00b f8a4 	bl	80186f0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d5a8:	69fb      	ldr	r3, [r7, #28]
 800d5aa:	791b      	ldrb	r3, [r3, #4]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d110      	bne.n	800d5d2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d5b0:	4b1e      	ldr	r3, [pc, #120]	; (800d62c <mem_free+0xf8>)
 800d5b2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d5b6:	4924      	ldr	r1, [pc, #144]	; (800d648 <mem_free+0x114>)
 800d5b8:	481e      	ldr	r0, [pc, #120]	; (800d634 <mem_free+0x100>)
 800d5ba:	f00d fbc7 	bl	801ad4c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d5be:	4821      	ldr	r0, [pc, #132]	; (800d644 <mem_free+0x110>)
 800d5c0:	f00b f8a5 	bl	801870e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d5c4:	f00b f8d0 	bl	8018768 <sys_arch_protect>
 800d5c8:	6178      	str	r0, [r7, #20]
 800d5ca:	6978      	ldr	r0, [r7, #20]
 800d5cc:	f00b f8da 	bl	8018784 <sys_arch_unprotect>
    return;
 800d5d0:	e029      	b.n	800d626 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d5d2:	69f8      	ldr	r0, [r7, #28]
 800d5d4:	f7ff ff72 	bl	800d4bc <mem_link_valid>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d110      	bne.n	800d600 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d5de:	4b13      	ldr	r3, [pc, #76]	; (800d62c <mem_free+0xf8>)
 800d5e0:	f240 2295 	movw	r2, #661	; 0x295
 800d5e4:	4919      	ldr	r1, [pc, #100]	; (800d64c <mem_free+0x118>)
 800d5e6:	4813      	ldr	r0, [pc, #76]	; (800d634 <mem_free+0x100>)
 800d5e8:	f00d fbb0 	bl	801ad4c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d5ec:	4815      	ldr	r0, [pc, #84]	; (800d644 <mem_free+0x110>)
 800d5ee:	f00b f88e 	bl	801870e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d5f2:	f00b f8b9 	bl	8018768 <sys_arch_protect>
 800d5f6:	61b8      	str	r0, [r7, #24]
 800d5f8:	69b8      	ldr	r0, [r7, #24]
 800d5fa:	f00b f8c3 	bl	8018784 <sys_arch_unprotect>
    return;
 800d5fe:	e012      	b.n	800d626 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d600:	69fb      	ldr	r3, [r7, #28]
 800d602:	2200      	movs	r2, #0
 800d604:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d606:	4b12      	ldr	r3, [pc, #72]	; (800d650 <mem_free+0x11c>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	69fa      	ldr	r2, [r7, #28]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d202      	bcs.n	800d616 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d610:	4a0f      	ldr	r2, [pc, #60]	; (800d650 <mem_free+0x11c>)
 800d612:	69fb      	ldr	r3, [r7, #28]
 800d614:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d616:	69f8      	ldr	r0, [r7, #28]
 800d618:	f7ff fe5c 	bl	800d2d4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d61c:	4809      	ldr	r0, [pc, #36]	; (800d644 <mem_free+0x110>)
 800d61e:	f00b f876 	bl	801870e <sys_mutex_unlock>
 800d622:	e000      	b.n	800d626 <mem_free+0xf2>
    return;
 800d624:	bf00      	nop
}
 800d626:	3720      	adds	r7, #32
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	0801c8d8 	.word	0x0801c8d8
 800d630:	0801c9c8 	.word	0x0801c9c8
 800d634:	0801c920 	.word	0x0801c920
 800d638:	2000b1d4 	.word	0x2000b1d4
 800d63c:	2000b1d8 	.word	0x2000b1d8
 800d640:	0801c9ec 	.word	0x0801c9ec
 800d644:	2000b1dc 	.word	0x2000b1dc
 800d648:	0801ca08 	.word	0x0801ca08
 800d64c:	0801ca30 	.word	0x0801ca30
 800d650:	2000b1e0 	.word	0x2000b1e0

0800d654 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b088      	sub	sp, #32
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
 800d65c:	460b      	mov	r3, r1
 800d65e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d660:	887b      	ldrh	r3, [r7, #2]
 800d662:	3303      	adds	r3, #3
 800d664:	b29b      	uxth	r3, r3
 800d666:	f023 0303 	bic.w	r3, r3, #3
 800d66a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d66c:	8bfb      	ldrh	r3, [r7, #30]
 800d66e:	2b0b      	cmp	r3, #11
 800d670:	d801      	bhi.n	800d676 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d672:	230c      	movs	r3, #12
 800d674:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d676:	8bfb      	ldrh	r3, [r7, #30]
 800d678:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d67c:	d803      	bhi.n	800d686 <mem_trim+0x32>
 800d67e:	8bfa      	ldrh	r2, [r7, #30]
 800d680:	887b      	ldrh	r3, [r7, #2]
 800d682:	429a      	cmp	r2, r3
 800d684:	d201      	bcs.n	800d68a <mem_trim+0x36>
    return NULL;
 800d686:	2300      	movs	r3, #0
 800d688:	e0d8      	b.n	800d83c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d68a:	4b6e      	ldr	r3, [pc, #440]	; (800d844 <mem_trim+0x1f0>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	687a      	ldr	r2, [r7, #4]
 800d690:	429a      	cmp	r2, r3
 800d692:	d304      	bcc.n	800d69e <mem_trim+0x4a>
 800d694:	4b6c      	ldr	r3, [pc, #432]	; (800d848 <mem_trim+0x1f4>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	687a      	ldr	r2, [r7, #4]
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d306      	bcc.n	800d6ac <mem_trim+0x58>
 800d69e:	4b6b      	ldr	r3, [pc, #428]	; (800d84c <mem_trim+0x1f8>)
 800d6a0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d6a4:	496a      	ldr	r1, [pc, #424]	; (800d850 <mem_trim+0x1fc>)
 800d6a6:	486b      	ldr	r0, [pc, #428]	; (800d854 <mem_trim+0x200>)
 800d6a8:	f00d fb50 	bl	801ad4c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d6ac:	4b65      	ldr	r3, [pc, #404]	; (800d844 <mem_trim+0x1f0>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	687a      	ldr	r2, [r7, #4]
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d304      	bcc.n	800d6c0 <mem_trim+0x6c>
 800d6b6:	4b64      	ldr	r3, [pc, #400]	; (800d848 <mem_trim+0x1f4>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	687a      	ldr	r2, [r7, #4]
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d307      	bcc.n	800d6d0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d6c0:	f00b f852 	bl	8018768 <sys_arch_protect>
 800d6c4:	60b8      	str	r0, [r7, #8]
 800d6c6:	68b8      	ldr	r0, [r7, #8]
 800d6c8:	f00b f85c 	bl	8018784 <sys_arch_unprotect>
    return rmem;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	e0b5      	b.n	800d83c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	3b08      	subs	r3, #8
 800d6d4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d6d6:	69b8      	ldr	r0, [r7, #24]
 800d6d8:	f7ff fdea 	bl	800d2b0 <mem_to_ptr>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d6e0:	69bb      	ldr	r3, [r7, #24]
 800d6e2:	881a      	ldrh	r2, [r3, #0]
 800d6e4:	8afb      	ldrh	r3, [r7, #22]
 800d6e6:	1ad3      	subs	r3, r2, r3
 800d6e8:	b29b      	uxth	r3, r3
 800d6ea:	3b08      	subs	r3, #8
 800d6ec:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d6ee:	8bfa      	ldrh	r2, [r7, #30]
 800d6f0:	8abb      	ldrh	r3, [r7, #20]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d906      	bls.n	800d704 <mem_trim+0xb0>
 800d6f6:	4b55      	ldr	r3, [pc, #340]	; (800d84c <mem_trim+0x1f8>)
 800d6f8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d6fc:	4956      	ldr	r1, [pc, #344]	; (800d858 <mem_trim+0x204>)
 800d6fe:	4855      	ldr	r0, [pc, #340]	; (800d854 <mem_trim+0x200>)
 800d700:	f00d fb24 	bl	801ad4c <iprintf>
  if (newsize > size) {
 800d704:	8bfa      	ldrh	r2, [r7, #30]
 800d706:	8abb      	ldrh	r3, [r7, #20]
 800d708:	429a      	cmp	r2, r3
 800d70a:	d901      	bls.n	800d710 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d70c:	2300      	movs	r3, #0
 800d70e:	e095      	b.n	800d83c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d710:	8bfa      	ldrh	r2, [r7, #30]
 800d712:	8abb      	ldrh	r3, [r7, #20]
 800d714:	429a      	cmp	r2, r3
 800d716:	d101      	bne.n	800d71c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	e08f      	b.n	800d83c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d71c:	484f      	ldr	r0, [pc, #316]	; (800d85c <mem_trim+0x208>)
 800d71e:	f00a ffe7 	bl	80186f0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d722:	69bb      	ldr	r3, [r7, #24]
 800d724:	881b      	ldrh	r3, [r3, #0]
 800d726:	4618      	mov	r0, r3
 800d728:	f7ff fdb0 	bl	800d28c <ptr_to_mem>
 800d72c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	791b      	ldrb	r3, [r3, #4]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d13f      	bne.n	800d7b6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d736:	69bb      	ldr	r3, [r7, #24]
 800d738:	881b      	ldrh	r3, [r3, #0]
 800d73a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d73e:	d106      	bne.n	800d74e <mem_trim+0xfa>
 800d740:	4b42      	ldr	r3, [pc, #264]	; (800d84c <mem_trim+0x1f8>)
 800d742:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d746:	4946      	ldr	r1, [pc, #280]	; (800d860 <mem_trim+0x20c>)
 800d748:	4842      	ldr	r0, [pc, #264]	; (800d854 <mem_trim+0x200>)
 800d74a:	f00d faff 	bl	801ad4c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	881b      	ldrh	r3, [r3, #0]
 800d752:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d754:	8afa      	ldrh	r2, [r7, #22]
 800d756:	8bfb      	ldrh	r3, [r7, #30]
 800d758:	4413      	add	r3, r2
 800d75a:	b29b      	uxth	r3, r3
 800d75c:	3308      	adds	r3, #8
 800d75e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d760:	4b40      	ldr	r3, [pc, #256]	; (800d864 <mem_trim+0x210>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	693a      	ldr	r2, [r7, #16]
 800d766:	429a      	cmp	r2, r3
 800d768:	d106      	bne.n	800d778 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d76a:	89fb      	ldrh	r3, [r7, #14]
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7ff fd8d 	bl	800d28c <ptr_to_mem>
 800d772:	4603      	mov	r3, r0
 800d774:	4a3b      	ldr	r2, [pc, #236]	; (800d864 <mem_trim+0x210>)
 800d776:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d778:	89fb      	ldrh	r3, [r7, #14]
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7ff fd86 	bl	800d28c <ptr_to_mem>
 800d780:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	2200      	movs	r2, #0
 800d786:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	89ba      	ldrh	r2, [r7, #12]
 800d78c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d78e:	693b      	ldr	r3, [r7, #16]
 800d790:	8afa      	ldrh	r2, [r7, #22]
 800d792:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d794:	69bb      	ldr	r3, [r7, #24]
 800d796:	89fa      	ldrh	r2, [r7, #14]
 800d798:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	881b      	ldrh	r3, [r3, #0]
 800d79e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d7a2:	d047      	beq.n	800d834 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	881b      	ldrh	r3, [r3, #0]
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f7ff fd6f 	bl	800d28c <ptr_to_mem>
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	89fb      	ldrh	r3, [r7, #14]
 800d7b2:	8053      	strh	r3, [r2, #2]
 800d7b4:	e03e      	b.n	800d834 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d7b6:	8bfb      	ldrh	r3, [r7, #30]
 800d7b8:	f103 0214 	add.w	r2, r3, #20
 800d7bc:	8abb      	ldrh	r3, [r7, #20]
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	d838      	bhi.n	800d834 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d7c2:	8afa      	ldrh	r2, [r7, #22]
 800d7c4:	8bfb      	ldrh	r3, [r7, #30]
 800d7c6:	4413      	add	r3, r2
 800d7c8:	b29b      	uxth	r3, r3
 800d7ca:	3308      	adds	r3, #8
 800d7cc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d7ce:	69bb      	ldr	r3, [r7, #24]
 800d7d0:	881b      	ldrh	r3, [r3, #0]
 800d7d2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d7d6:	d106      	bne.n	800d7e6 <mem_trim+0x192>
 800d7d8:	4b1c      	ldr	r3, [pc, #112]	; (800d84c <mem_trim+0x1f8>)
 800d7da:	f240 3216 	movw	r2, #790	; 0x316
 800d7de:	4920      	ldr	r1, [pc, #128]	; (800d860 <mem_trim+0x20c>)
 800d7e0:	481c      	ldr	r0, [pc, #112]	; (800d854 <mem_trim+0x200>)
 800d7e2:	f00d fab3 	bl	801ad4c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d7e6:	89fb      	ldrh	r3, [r7, #14]
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7ff fd4f 	bl	800d28c <ptr_to_mem>
 800d7ee:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d7f0:	4b1c      	ldr	r3, [pc, #112]	; (800d864 <mem_trim+0x210>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	693a      	ldr	r2, [r7, #16]
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d202      	bcs.n	800d800 <mem_trim+0x1ac>
      lfree = mem2;
 800d7fa:	4a1a      	ldr	r2, [pc, #104]	; (800d864 <mem_trim+0x210>)
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	2200      	movs	r2, #0
 800d804:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d806:	69bb      	ldr	r3, [r7, #24]
 800d808:	881a      	ldrh	r2, [r3, #0]
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	8afa      	ldrh	r2, [r7, #22]
 800d812:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d814:	69bb      	ldr	r3, [r7, #24]
 800d816:	89fa      	ldrh	r2, [r7, #14]
 800d818:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d81a:	693b      	ldr	r3, [r7, #16]
 800d81c:	881b      	ldrh	r3, [r3, #0]
 800d81e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d822:	d007      	beq.n	800d834 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	881b      	ldrh	r3, [r3, #0]
 800d828:	4618      	mov	r0, r3
 800d82a:	f7ff fd2f 	bl	800d28c <ptr_to_mem>
 800d82e:	4602      	mov	r2, r0
 800d830:	89fb      	ldrh	r3, [r7, #14]
 800d832:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d834:	4809      	ldr	r0, [pc, #36]	; (800d85c <mem_trim+0x208>)
 800d836:	f00a ff6a 	bl	801870e <sys_mutex_unlock>
  return rmem;
 800d83a:	687b      	ldr	r3, [r7, #4]
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3720      	adds	r7, #32
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}
 800d844:	2000b1d4 	.word	0x2000b1d4
 800d848:	2000b1d8 	.word	0x2000b1d8
 800d84c:	0801c8d8 	.word	0x0801c8d8
 800d850:	0801ca64 	.word	0x0801ca64
 800d854:	0801c920 	.word	0x0801c920
 800d858:	0801ca7c 	.word	0x0801ca7c
 800d85c:	2000b1dc 	.word	0x2000b1dc
 800d860:	0801ca9c 	.word	0x0801ca9c
 800d864:	2000b1e0 	.word	0x2000b1e0

0800d868 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b088      	sub	sp, #32
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	4603      	mov	r3, r0
 800d870:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d872:	88fb      	ldrh	r3, [r7, #6]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d101      	bne.n	800d87c <mem_malloc+0x14>
    return NULL;
 800d878:	2300      	movs	r3, #0
 800d87a:	e0e2      	b.n	800da42 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d87c:	88fb      	ldrh	r3, [r7, #6]
 800d87e:	3303      	adds	r3, #3
 800d880:	b29b      	uxth	r3, r3
 800d882:	f023 0303 	bic.w	r3, r3, #3
 800d886:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d888:	8bbb      	ldrh	r3, [r7, #28]
 800d88a:	2b0b      	cmp	r3, #11
 800d88c:	d801      	bhi.n	800d892 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d88e:	230c      	movs	r3, #12
 800d890:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d892:	8bbb      	ldrh	r3, [r7, #28]
 800d894:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d898:	d803      	bhi.n	800d8a2 <mem_malloc+0x3a>
 800d89a:	8bba      	ldrh	r2, [r7, #28]
 800d89c:	88fb      	ldrh	r3, [r7, #6]
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d201      	bcs.n	800d8a6 <mem_malloc+0x3e>
    return NULL;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	e0cd      	b.n	800da42 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d8a6:	4869      	ldr	r0, [pc, #420]	; (800da4c <mem_malloc+0x1e4>)
 800d8a8:	f00a ff22 	bl	80186f0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d8ac:	4b68      	ldr	r3, [pc, #416]	; (800da50 <mem_malloc+0x1e8>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f7ff fcfd 	bl	800d2b0 <mem_to_ptr>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	83fb      	strh	r3, [r7, #30]
 800d8ba:	e0b7      	b.n	800da2c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d8bc:	8bfb      	ldrh	r3, [r7, #30]
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f7ff fce4 	bl	800d28c <ptr_to_mem>
 800d8c4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	791b      	ldrb	r3, [r3, #4]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	f040 80a7 	bne.w	800da1e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	881b      	ldrh	r3, [r3, #0]
 800d8d4:	461a      	mov	r2, r3
 800d8d6:	8bfb      	ldrh	r3, [r7, #30]
 800d8d8:	1ad3      	subs	r3, r2, r3
 800d8da:	f1a3 0208 	sub.w	r2, r3, #8
 800d8de:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	f0c0 809c 	bcc.w	800da1e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	881b      	ldrh	r3, [r3, #0]
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	8bfb      	ldrh	r3, [r7, #30]
 800d8ee:	1ad3      	subs	r3, r2, r3
 800d8f0:	f1a3 0208 	sub.w	r2, r3, #8
 800d8f4:	8bbb      	ldrh	r3, [r7, #28]
 800d8f6:	3314      	adds	r3, #20
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d333      	bcc.n	800d964 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d8fc:	8bfa      	ldrh	r2, [r7, #30]
 800d8fe:	8bbb      	ldrh	r3, [r7, #28]
 800d900:	4413      	add	r3, r2
 800d902:	b29b      	uxth	r3, r3
 800d904:	3308      	adds	r3, #8
 800d906:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d908:	8a7b      	ldrh	r3, [r7, #18]
 800d90a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d90e:	d106      	bne.n	800d91e <mem_malloc+0xb6>
 800d910:	4b50      	ldr	r3, [pc, #320]	; (800da54 <mem_malloc+0x1ec>)
 800d912:	f240 3287 	movw	r2, #903	; 0x387
 800d916:	4950      	ldr	r1, [pc, #320]	; (800da58 <mem_malloc+0x1f0>)
 800d918:	4850      	ldr	r0, [pc, #320]	; (800da5c <mem_malloc+0x1f4>)
 800d91a:	f00d fa17 	bl	801ad4c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d91e:	8a7b      	ldrh	r3, [r7, #18]
 800d920:	4618      	mov	r0, r3
 800d922:	f7ff fcb3 	bl	800d28c <ptr_to_mem>
 800d926:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2200      	movs	r2, #0
 800d92c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	881a      	ldrh	r2, [r3, #0]
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	8bfa      	ldrh	r2, [r7, #30]
 800d93a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	8a7a      	ldrh	r2, [r7, #18]
 800d940:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	2201      	movs	r2, #1
 800d946:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	881b      	ldrh	r3, [r3, #0]
 800d94c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d950:	d00b      	beq.n	800d96a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	881b      	ldrh	r3, [r3, #0]
 800d956:	4618      	mov	r0, r3
 800d958:	f7ff fc98 	bl	800d28c <ptr_to_mem>
 800d95c:	4602      	mov	r2, r0
 800d95e:	8a7b      	ldrh	r3, [r7, #18]
 800d960:	8053      	strh	r3, [r2, #2]
 800d962:	e002      	b.n	800d96a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	2201      	movs	r2, #1
 800d968:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d96a:	4b39      	ldr	r3, [pc, #228]	; (800da50 <mem_malloc+0x1e8>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	697a      	ldr	r2, [r7, #20]
 800d970:	429a      	cmp	r2, r3
 800d972:	d127      	bne.n	800d9c4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d974:	4b36      	ldr	r3, [pc, #216]	; (800da50 <mem_malloc+0x1e8>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d97a:	e005      	b.n	800d988 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d97c:	69bb      	ldr	r3, [r7, #24]
 800d97e:	881b      	ldrh	r3, [r3, #0]
 800d980:	4618      	mov	r0, r3
 800d982:	f7ff fc83 	bl	800d28c <ptr_to_mem>
 800d986:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d988:	69bb      	ldr	r3, [r7, #24]
 800d98a:	791b      	ldrb	r3, [r3, #4]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d004      	beq.n	800d99a <mem_malloc+0x132>
 800d990:	4b33      	ldr	r3, [pc, #204]	; (800da60 <mem_malloc+0x1f8>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	69ba      	ldr	r2, [r7, #24]
 800d996:	429a      	cmp	r2, r3
 800d998:	d1f0      	bne.n	800d97c <mem_malloc+0x114>
          }
          lfree = cur;
 800d99a:	4a2d      	ldr	r2, [pc, #180]	; (800da50 <mem_malloc+0x1e8>)
 800d99c:	69bb      	ldr	r3, [r7, #24]
 800d99e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d9a0:	4b2b      	ldr	r3, [pc, #172]	; (800da50 <mem_malloc+0x1e8>)
 800d9a2:	681a      	ldr	r2, [r3, #0]
 800d9a4:	4b2e      	ldr	r3, [pc, #184]	; (800da60 <mem_malloc+0x1f8>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	d00b      	beq.n	800d9c4 <mem_malloc+0x15c>
 800d9ac:	4b28      	ldr	r3, [pc, #160]	; (800da50 <mem_malloc+0x1e8>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	791b      	ldrb	r3, [r3, #4]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d006      	beq.n	800d9c4 <mem_malloc+0x15c>
 800d9b6:	4b27      	ldr	r3, [pc, #156]	; (800da54 <mem_malloc+0x1ec>)
 800d9b8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d9bc:	4929      	ldr	r1, [pc, #164]	; (800da64 <mem_malloc+0x1fc>)
 800d9be:	4827      	ldr	r0, [pc, #156]	; (800da5c <mem_malloc+0x1f4>)
 800d9c0:	f00d f9c4 	bl	801ad4c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d9c4:	4821      	ldr	r0, [pc, #132]	; (800da4c <mem_malloc+0x1e4>)
 800d9c6:	f00a fea2 	bl	801870e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d9ca:	8bba      	ldrh	r2, [r7, #28]
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	4413      	add	r3, r2
 800d9d0:	3308      	adds	r3, #8
 800d9d2:	4a23      	ldr	r2, [pc, #140]	; (800da60 <mem_malloc+0x1f8>)
 800d9d4:	6812      	ldr	r2, [r2, #0]
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d906      	bls.n	800d9e8 <mem_malloc+0x180>
 800d9da:	4b1e      	ldr	r3, [pc, #120]	; (800da54 <mem_malloc+0x1ec>)
 800d9dc:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d9e0:	4921      	ldr	r1, [pc, #132]	; (800da68 <mem_malloc+0x200>)
 800d9e2:	481e      	ldr	r0, [pc, #120]	; (800da5c <mem_malloc+0x1f4>)
 800d9e4:	f00d f9b2 	bl	801ad4c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	f003 0303 	and.w	r3, r3, #3
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d006      	beq.n	800da00 <mem_malloc+0x198>
 800d9f2:	4b18      	ldr	r3, [pc, #96]	; (800da54 <mem_malloc+0x1ec>)
 800d9f4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d9f8:	491c      	ldr	r1, [pc, #112]	; (800da6c <mem_malloc+0x204>)
 800d9fa:	4818      	ldr	r0, [pc, #96]	; (800da5c <mem_malloc+0x1f4>)
 800d9fc:	f00d f9a6 	bl	801ad4c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	f003 0303 	and.w	r3, r3, #3
 800da06:	2b00      	cmp	r3, #0
 800da08:	d006      	beq.n	800da18 <mem_malloc+0x1b0>
 800da0a:	4b12      	ldr	r3, [pc, #72]	; (800da54 <mem_malloc+0x1ec>)
 800da0c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800da10:	4917      	ldr	r1, [pc, #92]	; (800da70 <mem_malloc+0x208>)
 800da12:	4812      	ldr	r0, [pc, #72]	; (800da5c <mem_malloc+0x1f4>)
 800da14:	f00d f99a 	bl	801ad4c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	3308      	adds	r3, #8
 800da1c:	e011      	b.n	800da42 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800da1e:	8bfb      	ldrh	r3, [r7, #30]
 800da20:	4618      	mov	r0, r3
 800da22:	f7ff fc33 	bl	800d28c <ptr_to_mem>
 800da26:	4603      	mov	r3, r0
 800da28:	881b      	ldrh	r3, [r3, #0]
 800da2a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800da2c:	8bfa      	ldrh	r2, [r7, #30]
 800da2e:	8bbb      	ldrh	r3, [r7, #28]
 800da30:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800da34:	429a      	cmp	r2, r3
 800da36:	f4ff af41 	bcc.w	800d8bc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800da3a:	4804      	ldr	r0, [pc, #16]	; (800da4c <mem_malloc+0x1e4>)
 800da3c:	f00a fe67 	bl	801870e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800da40:	2300      	movs	r3, #0
}
 800da42:	4618      	mov	r0, r3
 800da44:	3720      	adds	r7, #32
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
 800da4a:	bf00      	nop
 800da4c:	2000b1dc 	.word	0x2000b1dc
 800da50:	2000b1e0 	.word	0x2000b1e0
 800da54:	0801c8d8 	.word	0x0801c8d8
 800da58:	0801ca9c 	.word	0x0801ca9c
 800da5c:	0801c920 	.word	0x0801c920
 800da60:	2000b1d8 	.word	0x2000b1d8
 800da64:	0801cab0 	.word	0x0801cab0
 800da68:	0801cacc 	.word	0x0801cacc
 800da6c:	0801cafc 	.word	0x0801cafc
 800da70:	0801cb2c 	.word	0x0801cb2c

0800da74 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800da74:	b480      	push	{r7}
 800da76:	b085      	sub	sp, #20
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	689b      	ldr	r3, [r3, #8]
 800da80:	2200      	movs	r2, #0
 800da82:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	685b      	ldr	r3, [r3, #4]
 800da88:	3303      	adds	r3, #3
 800da8a:	f023 0303 	bic.w	r3, r3, #3
 800da8e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800da90:	2300      	movs	r3, #0
 800da92:	60fb      	str	r3, [r7, #12]
 800da94:	e011      	b.n	800daba <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	689b      	ldr	r3, [r3, #8]
 800da9a:	681a      	ldr	r2, [r3, #0]
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	689b      	ldr	r3, [r3, #8]
 800daa4:	68ba      	ldr	r2, [r7, #8]
 800daa6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	881b      	ldrh	r3, [r3, #0]
 800daac:	461a      	mov	r2, r3
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	4413      	add	r3, r2
 800dab2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	3301      	adds	r3, #1
 800dab8:	60fb      	str	r3, [r7, #12]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	885b      	ldrh	r3, [r3, #2]
 800dabe:	461a      	mov	r2, r3
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	4293      	cmp	r3, r2
 800dac4:	dbe7      	blt.n	800da96 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800dac6:	bf00      	nop
 800dac8:	bf00      	nop
 800daca:	3714      	adds	r7, #20
 800dacc:	46bd      	mov	sp, r7
 800dace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad2:	4770      	bx	lr

0800dad4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b082      	sub	sp, #8
 800dad8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800dada:	2300      	movs	r3, #0
 800dadc:	80fb      	strh	r3, [r7, #6]
 800dade:	e009      	b.n	800daf4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800dae0:	88fb      	ldrh	r3, [r7, #6]
 800dae2:	4a08      	ldr	r2, [pc, #32]	; (800db04 <memp_init+0x30>)
 800dae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dae8:	4618      	mov	r0, r3
 800daea:	f7ff ffc3 	bl	800da74 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800daee:	88fb      	ldrh	r3, [r7, #6]
 800daf0:	3301      	adds	r3, #1
 800daf2:	80fb      	strh	r3, [r7, #6]
 800daf4:	88fb      	ldrh	r3, [r7, #6]
 800daf6:	2b0c      	cmp	r3, #12
 800daf8:	d9f2      	bls.n	800dae0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800dafa:	bf00      	nop
 800dafc:	bf00      	nop
 800dafe:	3708      	adds	r7, #8
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}
 800db04:	0801f570 	.word	0x0801f570

0800db08 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b084      	sub	sp, #16
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800db10:	f00a fe2a 	bl	8018768 <sys_arch_protect>
 800db14:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	689b      	ldr	r3, [r3, #8]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d015      	beq.n	800db50 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	689b      	ldr	r3, [r3, #8]
 800db28:	68ba      	ldr	r2, [r7, #8]
 800db2a:	6812      	ldr	r2, [r2, #0]
 800db2c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	f003 0303 	and.w	r3, r3, #3
 800db34:	2b00      	cmp	r3, #0
 800db36:	d006      	beq.n	800db46 <do_memp_malloc_pool+0x3e>
 800db38:	4b09      	ldr	r3, [pc, #36]	; (800db60 <do_memp_malloc_pool+0x58>)
 800db3a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800db3e:	4909      	ldr	r1, [pc, #36]	; (800db64 <do_memp_malloc_pool+0x5c>)
 800db40:	4809      	ldr	r0, [pc, #36]	; (800db68 <do_memp_malloc_pool+0x60>)
 800db42:	f00d f903 	bl	801ad4c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800db46:	68f8      	ldr	r0, [r7, #12]
 800db48:	f00a fe1c 	bl	8018784 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	e003      	b.n	800db58 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800db50:	68f8      	ldr	r0, [r7, #12]
 800db52:	f00a fe17 	bl	8018784 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800db56:	2300      	movs	r3, #0
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3710      	adds	r7, #16
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}
 800db60:	0801cb50 	.word	0x0801cb50
 800db64:	0801cb80 	.word	0x0801cb80
 800db68:	0801cba4 	.word	0x0801cba4

0800db6c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b084      	sub	sp, #16
 800db70:	af00      	add	r7, sp, #0
 800db72:	4603      	mov	r3, r0
 800db74:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800db76:	79fb      	ldrb	r3, [r7, #7]
 800db78:	2b0c      	cmp	r3, #12
 800db7a:	d908      	bls.n	800db8e <memp_malloc+0x22>
 800db7c:	4b0a      	ldr	r3, [pc, #40]	; (800dba8 <memp_malloc+0x3c>)
 800db7e:	f240 1257 	movw	r2, #343	; 0x157
 800db82:	490a      	ldr	r1, [pc, #40]	; (800dbac <memp_malloc+0x40>)
 800db84:	480a      	ldr	r0, [pc, #40]	; (800dbb0 <memp_malloc+0x44>)
 800db86:	f00d f8e1 	bl	801ad4c <iprintf>
 800db8a:	2300      	movs	r3, #0
 800db8c:	e008      	b.n	800dba0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800db8e:	79fb      	ldrb	r3, [r7, #7]
 800db90:	4a08      	ldr	r2, [pc, #32]	; (800dbb4 <memp_malloc+0x48>)
 800db92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db96:	4618      	mov	r0, r3
 800db98:	f7ff ffb6 	bl	800db08 <do_memp_malloc_pool>
 800db9c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800db9e:	68fb      	ldr	r3, [r7, #12]
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3710      	adds	r7, #16
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	0801cb50 	.word	0x0801cb50
 800dbac:	0801cbe0 	.word	0x0801cbe0
 800dbb0:	0801cba4 	.word	0x0801cba4
 800dbb4:	0801f570 	.word	0x0801f570

0800dbb8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b084      	sub	sp, #16
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	f003 0303 	and.w	r3, r3, #3
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d006      	beq.n	800dbda <do_memp_free_pool+0x22>
 800dbcc:	4b0d      	ldr	r3, [pc, #52]	; (800dc04 <do_memp_free_pool+0x4c>)
 800dbce:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800dbd2:	490d      	ldr	r1, [pc, #52]	; (800dc08 <do_memp_free_pool+0x50>)
 800dbd4:	480d      	ldr	r0, [pc, #52]	; (800dc0c <do_memp_free_pool+0x54>)
 800dbd6:	f00d f8b9 	bl	801ad4c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800dbde:	f00a fdc3 	bl	8018768 <sys_arch_protect>
 800dbe2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	689b      	ldr	r3, [r3, #8]
 800dbe8:	681a      	ldr	r2, [r3, #0]
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	689b      	ldr	r3, [r3, #8]
 800dbf2:	68fa      	ldr	r2, [r7, #12]
 800dbf4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800dbf6:	68b8      	ldr	r0, [r7, #8]
 800dbf8:	f00a fdc4 	bl	8018784 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800dbfc:	bf00      	nop
 800dbfe:	3710      	adds	r7, #16
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}
 800dc04:	0801cb50 	.word	0x0801cb50
 800dc08:	0801cc00 	.word	0x0801cc00
 800dc0c:	0801cba4 	.word	0x0801cba4

0800dc10 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	4603      	mov	r3, r0
 800dc18:	6039      	str	r1, [r7, #0]
 800dc1a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800dc1c:	79fb      	ldrb	r3, [r7, #7]
 800dc1e:	2b0c      	cmp	r3, #12
 800dc20:	d907      	bls.n	800dc32 <memp_free+0x22>
 800dc22:	4b0c      	ldr	r3, [pc, #48]	; (800dc54 <memp_free+0x44>)
 800dc24:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800dc28:	490b      	ldr	r1, [pc, #44]	; (800dc58 <memp_free+0x48>)
 800dc2a:	480c      	ldr	r0, [pc, #48]	; (800dc5c <memp_free+0x4c>)
 800dc2c:	f00d f88e 	bl	801ad4c <iprintf>
 800dc30:	e00c      	b.n	800dc4c <memp_free+0x3c>

  if (mem == NULL) {
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d008      	beq.n	800dc4a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800dc38:	79fb      	ldrb	r3, [r7, #7]
 800dc3a:	4a09      	ldr	r2, [pc, #36]	; (800dc60 <memp_free+0x50>)
 800dc3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc40:	6839      	ldr	r1, [r7, #0]
 800dc42:	4618      	mov	r0, r3
 800dc44:	f7ff ffb8 	bl	800dbb8 <do_memp_free_pool>
 800dc48:	e000      	b.n	800dc4c <memp_free+0x3c>
    return;
 800dc4a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800dc4c:	3708      	adds	r7, #8
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}
 800dc52:	bf00      	nop
 800dc54:	0801cb50 	.word	0x0801cb50
 800dc58:	0801cc20 	.word	0x0801cc20
 800dc5c:	0801cba4 	.word	0x0801cba4
 800dc60:	0801f570 	.word	0x0801f570

0800dc64 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800dc64:	b480      	push	{r7}
 800dc66:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800dc68:	bf00      	nop
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc70:	4770      	bx	lr
	...

0800dc74 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b086      	sub	sp, #24
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	60f8      	str	r0, [r7, #12]
 800dc7c:	60b9      	str	r1, [r7, #8]
 800dc7e:	607a      	str	r2, [r7, #4]
 800dc80:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d108      	bne.n	800dc9a <netif_add+0x26>
 800dc88:	4b57      	ldr	r3, [pc, #348]	; (800dde8 <netif_add+0x174>)
 800dc8a:	f240 1227 	movw	r2, #295	; 0x127
 800dc8e:	4957      	ldr	r1, [pc, #348]	; (800ddec <netif_add+0x178>)
 800dc90:	4857      	ldr	r0, [pc, #348]	; (800ddf0 <netif_add+0x17c>)
 800dc92:	f00d f85b 	bl	801ad4c <iprintf>
 800dc96:	2300      	movs	r3, #0
 800dc98:	e0a2      	b.n	800dde0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800dc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d108      	bne.n	800dcb2 <netif_add+0x3e>
 800dca0:	4b51      	ldr	r3, [pc, #324]	; (800dde8 <netif_add+0x174>)
 800dca2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800dca6:	4953      	ldr	r1, [pc, #332]	; (800ddf4 <netif_add+0x180>)
 800dca8:	4851      	ldr	r0, [pc, #324]	; (800ddf0 <netif_add+0x17c>)
 800dcaa:	f00d f84f 	bl	801ad4c <iprintf>
 800dcae:	2300      	movs	r3, #0
 800dcb0:	e096      	b.n	800dde0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d101      	bne.n	800dcbc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800dcb8:	4b4f      	ldr	r3, [pc, #316]	; (800ddf8 <netif_add+0x184>)
 800dcba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d101      	bne.n	800dcc6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800dcc2:	4b4d      	ldr	r3, [pc, #308]	; (800ddf8 <netif_add+0x184>)
 800dcc4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d101      	bne.n	800dcd0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800dccc:	4b4a      	ldr	r3, [pc, #296]	; (800ddf8 <netif_add+0x184>)
 800dcce:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	2200      	movs	r2, #0
 800dce0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	4a45      	ldr	r2, [pc, #276]	; (800ddfc <netif_add+0x188>)
 800dce6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	2200      	movs	r2, #0
 800dcec:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	6a3a      	ldr	r2, [r7, #32]
 800dd00:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800dd02:	4b3f      	ldr	r3, [pc, #252]	; (800de00 <netif_add+0x18c>)
 800dd04:	781a      	ldrb	r2, [r3, #0]
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd10:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	687a      	ldr	r2, [r7, #4]
 800dd16:	68b9      	ldr	r1, [r7, #8]
 800dd18:	68f8      	ldr	r0, [r7, #12]
 800dd1a:	f000 f913 	bl	800df44 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800dd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd20:	68f8      	ldr	r0, [r7, #12]
 800dd22:	4798      	blx	r3
 800dd24:	4603      	mov	r3, r0
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d001      	beq.n	800dd2e <netif_add+0xba>
    return NULL;
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	e058      	b.n	800dde0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd34:	2bff      	cmp	r3, #255	; 0xff
 800dd36:	d103      	bne.n	800dd40 <netif_add+0xcc>
        netif->num = 0;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800dd40:	2300      	movs	r3, #0
 800dd42:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dd44:	4b2f      	ldr	r3, [pc, #188]	; (800de04 <netif_add+0x190>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	617b      	str	r3, [r7, #20]
 800dd4a:	e02b      	b.n	800dda4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800dd4c:	697a      	ldr	r2, [r7, #20]
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d106      	bne.n	800dd62 <netif_add+0xee>
 800dd54:	4b24      	ldr	r3, [pc, #144]	; (800dde8 <netif_add+0x174>)
 800dd56:	f240 128b 	movw	r2, #395	; 0x18b
 800dd5a:	492b      	ldr	r1, [pc, #172]	; (800de08 <netif_add+0x194>)
 800dd5c:	4824      	ldr	r0, [pc, #144]	; (800ddf0 <netif_add+0x17c>)
 800dd5e:	f00c fff5 	bl	801ad4c <iprintf>
        num_netifs++;
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	3301      	adds	r3, #1
 800dd66:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	2bff      	cmp	r3, #255	; 0xff
 800dd6c:	dd06      	ble.n	800dd7c <netif_add+0x108>
 800dd6e:	4b1e      	ldr	r3, [pc, #120]	; (800dde8 <netif_add+0x174>)
 800dd70:	f240 128d 	movw	r2, #397	; 0x18d
 800dd74:	4925      	ldr	r1, [pc, #148]	; (800de0c <netif_add+0x198>)
 800dd76:	481e      	ldr	r0, [pc, #120]	; (800ddf0 <netif_add+0x17c>)
 800dd78:	f00c ffe8 	bl	801ad4c <iprintf>
        if (netif2->num == netif->num) {
 800dd7c:	697b      	ldr	r3, [r7, #20]
 800dd7e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d108      	bne.n	800dd9e <netif_add+0x12a>
          netif->num++;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd92:	3301      	adds	r3, #1
 800dd94:	b2da      	uxtb	r2, r3
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800dd9c:	e005      	b.n	800ddaa <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	617b      	str	r3, [r7, #20]
 800dda4:	697b      	ldr	r3, [r7, #20]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d1d0      	bne.n	800dd4c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d1be      	bne.n	800dd2e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ddb6:	2bfe      	cmp	r3, #254	; 0xfe
 800ddb8:	d103      	bne.n	800ddc2 <netif_add+0x14e>
    netif_num = 0;
 800ddba:	4b11      	ldr	r3, [pc, #68]	; (800de00 <netif_add+0x18c>)
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	701a      	strb	r2, [r3, #0]
 800ddc0:	e006      	b.n	800ddd0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ddc8:	3301      	adds	r3, #1
 800ddca:	b2da      	uxtb	r2, r3
 800ddcc:	4b0c      	ldr	r3, [pc, #48]	; (800de00 <netif_add+0x18c>)
 800ddce:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ddd0:	4b0c      	ldr	r3, [pc, #48]	; (800de04 <netif_add+0x190>)
 800ddd2:	681a      	ldr	r2, [r3, #0]
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ddd8:	4a0a      	ldr	r2, [pc, #40]	; (800de04 <netif_add+0x190>)
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ddde:	68fb      	ldr	r3, [r7, #12]
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3718      	adds	r7, #24
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}
 800dde8:	0801cc3c 	.word	0x0801cc3c
 800ddec:	0801ccd0 	.word	0x0801ccd0
 800ddf0:	0801cc8c 	.word	0x0801cc8c
 800ddf4:	0801ccec 	.word	0x0801ccec
 800ddf8:	0801f5e4 	.word	0x0801f5e4
 800ddfc:	0800e21f 	.word	0x0800e21f
 800de00:	2000b218 	.word	0x2000b218
 800de04:	20012090 	.word	0x20012090
 800de08:	0801cd10 	.word	0x0801cd10
 800de0c:	0801cd24 	.word	0x0801cd24

0800de10 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b082      	sub	sp, #8
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800de1a:	6839      	ldr	r1, [r7, #0]
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f002 fee3 	bl	8010be8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800de22:	6839      	ldr	r1, [r7, #0]
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f007 ff95 	bl	8015d54 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800de2a:	bf00      	nop
 800de2c:	3708      	adds	r7, #8
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}
	...

0800de34 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b086      	sub	sp, #24
 800de38:	af00      	add	r7, sp, #0
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	60b9      	str	r1, [r7, #8]
 800de3e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d106      	bne.n	800de54 <netif_do_set_ipaddr+0x20>
 800de46:	4b1d      	ldr	r3, [pc, #116]	; (800debc <netif_do_set_ipaddr+0x88>)
 800de48:	f240 12cb 	movw	r2, #459	; 0x1cb
 800de4c:	491c      	ldr	r1, [pc, #112]	; (800dec0 <netif_do_set_ipaddr+0x8c>)
 800de4e:	481d      	ldr	r0, [pc, #116]	; (800dec4 <netif_do_set_ipaddr+0x90>)
 800de50:	f00c ff7c 	bl	801ad4c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d106      	bne.n	800de68 <netif_do_set_ipaddr+0x34>
 800de5a:	4b18      	ldr	r3, [pc, #96]	; (800debc <netif_do_set_ipaddr+0x88>)
 800de5c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800de60:	4917      	ldr	r1, [pc, #92]	; (800dec0 <netif_do_set_ipaddr+0x8c>)
 800de62:	4818      	ldr	r0, [pc, #96]	; (800dec4 <netif_do_set_ipaddr+0x90>)
 800de64:	f00c ff72 	bl	801ad4c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	681a      	ldr	r2, [r3, #0]
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	3304      	adds	r3, #4
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	429a      	cmp	r2, r3
 800de74:	d01c      	beq.n	800deb0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	3304      	adds	r3, #4
 800de80:	681a      	ldr	r2, [r3, #0]
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800de86:	f107 0314 	add.w	r3, r7, #20
 800de8a:	4619      	mov	r1, r3
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f7ff ffbf 	bl	800de10 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d002      	beq.n	800de9e <netif_do_set_ipaddr+0x6a>
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	e000      	b.n	800dea0 <netif_do_set_ipaddr+0x6c>
 800de9e:	2300      	movs	r3, #0
 800dea0:	68fa      	ldr	r2, [r7, #12]
 800dea2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800dea4:	2101      	movs	r1, #1
 800dea6:	68f8      	ldr	r0, [r7, #12]
 800dea8:	f000 f8d2 	bl	800e050 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800deac:	2301      	movs	r3, #1
 800deae:	e000      	b.n	800deb2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800deb0:	2300      	movs	r3, #0
}
 800deb2:	4618      	mov	r0, r3
 800deb4:	3718      	adds	r7, #24
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}
 800deba:	bf00      	nop
 800debc:	0801cc3c 	.word	0x0801cc3c
 800dec0:	0801cd54 	.word	0x0801cd54
 800dec4:	0801cc8c 	.word	0x0801cc8c

0800dec8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800dec8:	b480      	push	{r7}
 800deca:	b085      	sub	sp, #20
 800decc:	af00      	add	r7, sp, #0
 800dece:	60f8      	str	r0, [r7, #12]
 800ded0:	60b9      	str	r1, [r7, #8]
 800ded2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	681a      	ldr	r2, [r3, #0]
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	3308      	adds	r3, #8
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	429a      	cmp	r2, r3
 800dee0:	d00a      	beq.n	800def8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d002      	beq.n	800deee <netif_do_set_netmask+0x26>
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	e000      	b.n	800def0 <netif_do_set_netmask+0x28>
 800deee:	2300      	movs	r3, #0
 800def0:	68fa      	ldr	r2, [r7, #12]
 800def2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800def4:	2301      	movs	r3, #1
 800def6:	e000      	b.n	800defa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800def8:	2300      	movs	r3, #0
}
 800defa:	4618      	mov	r0, r3
 800defc:	3714      	adds	r7, #20
 800defe:	46bd      	mov	sp, r7
 800df00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df04:	4770      	bx	lr

0800df06 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800df06:	b480      	push	{r7}
 800df08:	b085      	sub	sp, #20
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	60f8      	str	r0, [r7, #12]
 800df0e:	60b9      	str	r1, [r7, #8]
 800df10:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	681a      	ldr	r2, [r3, #0]
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	330c      	adds	r3, #12
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	429a      	cmp	r2, r3
 800df1e:	d00a      	beq.n	800df36 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d002      	beq.n	800df2c <netif_do_set_gw+0x26>
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	e000      	b.n	800df2e <netif_do_set_gw+0x28>
 800df2c:	2300      	movs	r3, #0
 800df2e:	68fa      	ldr	r2, [r7, #12]
 800df30:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800df32:	2301      	movs	r3, #1
 800df34:	e000      	b.n	800df38 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800df36:	2300      	movs	r3, #0
}
 800df38:	4618      	mov	r0, r3
 800df3a:	3714      	adds	r7, #20
 800df3c:	46bd      	mov	sp, r7
 800df3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df42:	4770      	bx	lr

0800df44 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b088      	sub	sp, #32
 800df48:	af00      	add	r7, sp, #0
 800df4a:	60f8      	str	r0, [r7, #12]
 800df4c:	60b9      	str	r1, [r7, #8]
 800df4e:	607a      	str	r2, [r7, #4]
 800df50:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800df52:	2300      	movs	r3, #0
 800df54:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800df56:	2300      	movs	r3, #0
 800df58:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d101      	bne.n	800df64 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800df60:	4b1c      	ldr	r3, [pc, #112]	; (800dfd4 <netif_set_addr+0x90>)
 800df62:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d101      	bne.n	800df6e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800df6a:	4b1a      	ldr	r3, [pc, #104]	; (800dfd4 <netif_set_addr+0x90>)
 800df6c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d101      	bne.n	800df78 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800df74:	4b17      	ldr	r3, [pc, #92]	; (800dfd4 <netif_set_addr+0x90>)
 800df76:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d003      	beq.n	800df86 <netif_set_addr+0x42>
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d101      	bne.n	800df8a <netif_set_addr+0x46>
 800df86:	2301      	movs	r3, #1
 800df88:	e000      	b.n	800df8c <netif_set_addr+0x48>
 800df8a:	2300      	movs	r3, #0
 800df8c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d006      	beq.n	800dfa2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800df94:	f107 0310 	add.w	r3, r7, #16
 800df98:	461a      	mov	r2, r3
 800df9a:	68b9      	ldr	r1, [r7, #8]
 800df9c:	68f8      	ldr	r0, [r7, #12]
 800df9e:	f7ff ff49 	bl	800de34 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800dfa2:	69fa      	ldr	r2, [r7, #28]
 800dfa4:	6879      	ldr	r1, [r7, #4]
 800dfa6:	68f8      	ldr	r0, [r7, #12]
 800dfa8:	f7ff ff8e 	bl	800dec8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800dfac:	69ba      	ldr	r2, [r7, #24]
 800dfae:	6839      	ldr	r1, [r7, #0]
 800dfb0:	68f8      	ldr	r0, [r7, #12]
 800dfb2:	f7ff ffa8 	bl	800df06 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d106      	bne.n	800dfca <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dfbc:	f107 0310 	add.w	r3, r7, #16
 800dfc0:	461a      	mov	r2, r3
 800dfc2:	68b9      	ldr	r1, [r7, #8]
 800dfc4:	68f8      	ldr	r0, [r7, #12]
 800dfc6:	f7ff ff35 	bl	800de34 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800dfca:	bf00      	nop
 800dfcc:	3720      	adds	r7, #32
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}
 800dfd2:	bf00      	nop
 800dfd4:	0801f5e4 	.word	0x0801f5e4

0800dfd8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b083      	sub	sp, #12
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800dfe0:	4a04      	ldr	r2, [pc, #16]	; (800dff4 <netif_set_default+0x1c>)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800dfe6:	bf00      	nop
 800dfe8:	370c      	adds	r7, #12
 800dfea:	46bd      	mov	sp, r7
 800dfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff0:	4770      	bx	lr
 800dff2:	bf00      	nop
 800dff4:	20012094 	.word	0x20012094

0800dff8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d107      	bne.n	800e016 <netif_set_up+0x1e>
 800e006:	4b0f      	ldr	r3, [pc, #60]	; (800e044 <netif_set_up+0x4c>)
 800e008:	f44f 7254 	mov.w	r2, #848	; 0x350
 800e00c:	490e      	ldr	r1, [pc, #56]	; (800e048 <netif_set_up+0x50>)
 800e00e:	480f      	ldr	r0, [pc, #60]	; (800e04c <netif_set_up+0x54>)
 800e010:	f00c fe9c 	bl	801ad4c <iprintf>
 800e014:	e013      	b.n	800e03e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e01c:	f003 0301 	and.w	r3, r3, #1
 800e020:	2b00      	cmp	r3, #0
 800e022:	d10c      	bne.n	800e03e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e02a:	f043 0301 	orr.w	r3, r3, #1
 800e02e:	b2da      	uxtb	r2, r3
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e036:	2103      	movs	r1, #3
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f000 f809 	bl	800e050 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e03e:	3708      	adds	r7, #8
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}
 800e044:	0801cc3c 	.word	0x0801cc3c
 800e048:	0801cdc4 	.word	0x0801cdc4
 800e04c:	0801cc8c 	.word	0x0801cc8c

0800e050 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b082      	sub	sp, #8
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	460b      	mov	r3, r1
 800e05a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d106      	bne.n	800e070 <netif_issue_reports+0x20>
 800e062:	4b18      	ldr	r3, [pc, #96]	; (800e0c4 <netif_issue_reports+0x74>)
 800e064:	f240 326d 	movw	r2, #877	; 0x36d
 800e068:	4917      	ldr	r1, [pc, #92]	; (800e0c8 <netif_issue_reports+0x78>)
 800e06a:	4818      	ldr	r0, [pc, #96]	; (800e0cc <netif_issue_reports+0x7c>)
 800e06c:	f00c fe6e 	bl	801ad4c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e076:	f003 0304 	and.w	r3, r3, #4
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d01e      	beq.n	800e0bc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e084:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d017      	beq.n	800e0bc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e08c:	78fb      	ldrb	r3, [r7, #3]
 800e08e:	f003 0301 	and.w	r3, r3, #1
 800e092:	2b00      	cmp	r3, #0
 800e094:	d013      	beq.n	800e0be <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	3304      	adds	r3, #4
 800e09a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d00e      	beq.n	800e0be <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e0a6:	f003 0308 	and.w	r3, r3, #8
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d007      	beq.n	800e0be <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	3304      	adds	r3, #4
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f008 fdb7 	bl	8016c28 <etharp_request>
 800e0ba:	e000      	b.n	800e0be <netif_issue_reports+0x6e>
    return;
 800e0bc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e0be:	3708      	adds	r7, #8
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}
 800e0c4:	0801cc3c 	.word	0x0801cc3c
 800e0c8:	0801cde0 	.word	0x0801cde0
 800e0cc:	0801cc8c 	.word	0x0801cc8c

0800e0d0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b082      	sub	sp, #8
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d107      	bne.n	800e0ee <netif_set_down+0x1e>
 800e0de:	4b12      	ldr	r3, [pc, #72]	; (800e128 <netif_set_down+0x58>)
 800e0e0:	f240 329b 	movw	r2, #923	; 0x39b
 800e0e4:	4911      	ldr	r1, [pc, #68]	; (800e12c <netif_set_down+0x5c>)
 800e0e6:	4812      	ldr	r0, [pc, #72]	; (800e130 <netif_set_down+0x60>)
 800e0e8:	f00c fe30 	bl	801ad4c <iprintf>
 800e0ec:	e019      	b.n	800e122 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e0f4:	f003 0301 	and.w	r3, r3, #1
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d012      	beq.n	800e122 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e102:	f023 0301 	bic.w	r3, r3, #1
 800e106:	b2da      	uxtb	r2, r3
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e114:	f003 0308 	and.w	r3, r3, #8
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d002      	beq.n	800e122 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f008 f941 	bl	80163a4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e122:	3708      	adds	r7, #8
 800e124:	46bd      	mov	sp, r7
 800e126:	bd80      	pop	{r7, pc}
 800e128:	0801cc3c 	.word	0x0801cc3c
 800e12c:	0801ce04 	.word	0x0801ce04
 800e130:	0801cc8c 	.word	0x0801cc8c

0800e134 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b082      	sub	sp, #8
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d107      	bne.n	800e152 <netif_set_link_up+0x1e>
 800e142:	4b13      	ldr	r3, [pc, #76]	; (800e190 <netif_set_link_up+0x5c>)
 800e144:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800e148:	4912      	ldr	r1, [pc, #72]	; (800e194 <netif_set_link_up+0x60>)
 800e14a:	4813      	ldr	r0, [pc, #76]	; (800e198 <netif_set_link_up+0x64>)
 800e14c:	f00c fdfe 	bl	801ad4c <iprintf>
 800e150:	e01b      	b.n	800e18a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e158:	f003 0304 	and.w	r3, r3, #4
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d114      	bne.n	800e18a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e166:	f043 0304 	orr.w	r3, r3, #4
 800e16a:	b2da      	uxtb	r2, r3
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e172:	2103      	movs	r1, #3
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f7ff ff6b 	bl	800e050 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	69db      	ldr	r3, [r3, #28]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d003      	beq.n	800e18a <netif_set_link_up+0x56>
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	69db      	ldr	r3, [r3, #28]
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e18a:	3708      	adds	r7, #8
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	0801cc3c 	.word	0x0801cc3c
 800e194:	0801ce24 	.word	0x0801ce24
 800e198:	0801cc8c 	.word	0x0801cc8c

0800e19c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b082      	sub	sp, #8
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d107      	bne.n	800e1ba <netif_set_link_down+0x1e>
 800e1aa:	4b11      	ldr	r3, [pc, #68]	; (800e1f0 <netif_set_link_down+0x54>)
 800e1ac:	f240 4206 	movw	r2, #1030	; 0x406
 800e1b0:	4910      	ldr	r1, [pc, #64]	; (800e1f4 <netif_set_link_down+0x58>)
 800e1b2:	4811      	ldr	r0, [pc, #68]	; (800e1f8 <netif_set_link_down+0x5c>)
 800e1b4:	f00c fdca 	bl	801ad4c <iprintf>
 800e1b8:	e017      	b.n	800e1ea <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e1c0:	f003 0304 	and.w	r3, r3, #4
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d010      	beq.n	800e1ea <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e1ce:	f023 0304 	bic.w	r3, r3, #4
 800e1d2:	b2da      	uxtb	r2, r3
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	69db      	ldr	r3, [r3, #28]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d003      	beq.n	800e1ea <netif_set_link_down+0x4e>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	69db      	ldr	r3, [r3, #28]
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e1ea:	3708      	adds	r7, #8
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}
 800e1f0:	0801cc3c 	.word	0x0801cc3c
 800e1f4:	0801ce48 	.word	0x0801ce48
 800e1f8:	0801cc8c 	.word	0x0801cc8c

0800e1fc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e1fc:	b480      	push	{r7}
 800e1fe:	b083      	sub	sp, #12
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
 800e204:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d002      	beq.n	800e212 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	683a      	ldr	r2, [r7, #0]
 800e210:	61da      	str	r2, [r3, #28]
  }
}
 800e212:	bf00      	nop
 800e214:	370c      	adds	r7, #12
 800e216:	46bd      	mov	sp, r7
 800e218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21c:	4770      	bx	lr

0800e21e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e21e:	b480      	push	{r7}
 800e220:	b085      	sub	sp, #20
 800e222:	af00      	add	r7, sp, #0
 800e224:	60f8      	str	r0, [r7, #12]
 800e226:	60b9      	str	r1, [r7, #8]
 800e228:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e22a:	f06f 030b 	mvn.w	r3, #11
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3714      	adds	r7, #20
 800e232:	46bd      	mov	sp, r7
 800e234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e238:	4770      	bx	lr
	...

0800e23c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e23c:	b480      	push	{r7}
 800e23e:	b085      	sub	sp, #20
 800e240:	af00      	add	r7, sp, #0
 800e242:	4603      	mov	r3, r0
 800e244:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e246:	79fb      	ldrb	r3, [r7, #7]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d013      	beq.n	800e274 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e24c:	4b0d      	ldr	r3, [pc, #52]	; (800e284 <netif_get_by_index+0x48>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	60fb      	str	r3, [r7, #12]
 800e252:	e00c      	b.n	800e26e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e25a:	3301      	adds	r3, #1
 800e25c:	b2db      	uxtb	r3, r3
 800e25e:	79fa      	ldrb	r2, [r7, #7]
 800e260:	429a      	cmp	r2, r3
 800e262:	d101      	bne.n	800e268 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	e006      	b.n	800e276 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	60fb      	str	r3, [r7, #12]
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d1ef      	bne.n	800e254 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e274:	2300      	movs	r3, #0
}
 800e276:	4618      	mov	r0, r3
 800e278:	3714      	adds	r7, #20
 800e27a:	46bd      	mov	sp, r7
 800e27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e280:	4770      	bx	lr
 800e282:	bf00      	nop
 800e284:	20012090 	.word	0x20012090

0800e288 <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(const char *name)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b084      	sub	sp, #16
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  struct netif *netif;
  u8_t num;

  LWIP_ASSERT_CORE_LOCKED();

  if (name == NULL) {
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d101      	bne.n	800e29a <netif_find+0x12>
    return NULL;
 800e296:	2300      	movs	r3, #0
 800e298:	e028      	b.n	800e2ec <netif_find+0x64>
  }

  num = (u8_t)atoi(&name[2]);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	3302      	adds	r3, #2
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f00c f83a 	bl	801a318 <atoi>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	72fb      	strb	r3, [r7, #11]

  NETIF_FOREACH(netif) {
 800e2a8:	4b12      	ldr	r3, [pc, #72]	; (800e2f4 <netif_find+0x6c>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	60fb      	str	r3, [r7, #12]
 800e2ae:	e019      	b.n	800e2e4 <netif_find+0x5c>
    if (num == netif->num &&
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e2b6:	7afa      	ldrb	r2, [r7, #11]
 800e2b8:	429a      	cmp	r2, r3
 800e2ba:	d110      	bne.n	800e2de <netif_find+0x56>
        name[0] == netif->name[0] &&
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	781a      	ldrb	r2, [r3, #0]
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    if (num == netif->num &&
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d109      	bne.n	800e2de <netif_find+0x56>
        name[1] == netif->name[1]) {
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	3301      	adds	r3, #1
 800e2ce:	781a      	ldrb	r2, [r3, #0]
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
        name[0] == netif->name[0] &&
 800e2d6:	429a      	cmp	r2, r3
 800e2d8:	d101      	bne.n	800e2de <netif_find+0x56>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	e006      	b.n	800e2ec <netif_find+0x64>
  NETIF_FOREACH(netif) {
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	60fb      	str	r3, [r7, #12]
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d1e2      	bne.n	800e2b0 <netif_find+0x28>
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
 800e2ea:	2300      	movs	r3, #0
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3710      	adds	r7, #16
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}
 800e2f4:	20012090 	.word	0x20012090

0800e2f8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b082      	sub	sp, #8
 800e2fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e2fe:	f00a fa33 	bl	8018768 <sys_arch_protect>
 800e302:	6038      	str	r0, [r7, #0]
 800e304:	4b0d      	ldr	r3, [pc, #52]	; (800e33c <pbuf_free_ooseq+0x44>)
 800e306:	2200      	movs	r2, #0
 800e308:	701a      	strb	r2, [r3, #0]
 800e30a:	6838      	ldr	r0, [r7, #0]
 800e30c:	f00a fa3a 	bl	8018784 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e310:	4b0b      	ldr	r3, [pc, #44]	; (800e340 <pbuf_free_ooseq+0x48>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	607b      	str	r3, [r7, #4]
 800e316:	e00a      	b.n	800e32e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d003      	beq.n	800e328 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f002 fc9f 	bl	8010c64 <tcp_free_ooseq>
      return;
 800e326:	e005      	b.n	800e334 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	68db      	ldr	r3, [r3, #12]
 800e32c:	607b      	str	r3, [r7, #4]
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d1f1      	bne.n	800e318 <pbuf_free_ooseq+0x20>
    }
  }
}
 800e334:	3708      	adds	r7, #8
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}
 800e33a:	bf00      	nop
 800e33c:	20012098 	.word	0x20012098
 800e340:	200120a0 	.word	0x200120a0

0800e344 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b082      	sub	sp, #8
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e34c:	f7ff ffd4 	bl	800e2f8 <pbuf_free_ooseq>
}
 800e350:	bf00      	nop
 800e352:	3708      	adds	r7, #8
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}

0800e358 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e35e:	f00a fa03 	bl	8018768 <sys_arch_protect>
 800e362:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e364:	4b0f      	ldr	r3, [pc, #60]	; (800e3a4 <pbuf_pool_is_empty+0x4c>)
 800e366:	781b      	ldrb	r3, [r3, #0]
 800e368:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e36a:	4b0e      	ldr	r3, [pc, #56]	; (800e3a4 <pbuf_pool_is_empty+0x4c>)
 800e36c:	2201      	movs	r2, #1
 800e36e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f00a fa07 	bl	8018784 <sys_arch_unprotect>

  if (!queued) {
 800e376:	78fb      	ldrb	r3, [r7, #3]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d10f      	bne.n	800e39c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e37c:	2100      	movs	r1, #0
 800e37e:	480a      	ldr	r0, [pc, #40]	; (800e3a8 <pbuf_pool_is_empty+0x50>)
 800e380:	f7fe fe9e 	bl	800d0c0 <tcpip_try_callback>
 800e384:	4603      	mov	r3, r0
 800e386:	2b00      	cmp	r3, #0
 800e388:	d008      	beq.n	800e39c <pbuf_pool_is_empty+0x44>
 800e38a:	f00a f9ed 	bl	8018768 <sys_arch_protect>
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	4b04      	ldr	r3, [pc, #16]	; (800e3a4 <pbuf_pool_is_empty+0x4c>)
 800e392:	2200      	movs	r2, #0
 800e394:	701a      	strb	r2, [r3, #0]
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f00a f9f4 	bl	8018784 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e39c:	bf00      	nop
 800e39e:	3708      	adds	r7, #8
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}
 800e3a4:	20012098 	.word	0x20012098
 800e3a8:	0800e345 	.word	0x0800e345

0800e3ac <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b085      	sub	sp, #20
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	60f8      	str	r0, [r7, #12]
 800e3b4:	60b9      	str	r1, [r7, #8]
 800e3b6:	4611      	mov	r1, r2
 800e3b8:	461a      	mov	r2, r3
 800e3ba:	460b      	mov	r3, r1
 800e3bc:	80fb      	strh	r3, [r7, #6]
 800e3be:	4613      	mov	r3, r2
 800e3c0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	68ba      	ldr	r2, [r7, #8]
 800e3cc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	88fa      	ldrh	r2, [r7, #6]
 800e3d2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	88ba      	ldrh	r2, [r7, #4]
 800e3d8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e3da:	8b3b      	ldrh	r3, [r7, #24]
 800e3dc:	b2da      	uxtb	r2, r3
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	7f3a      	ldrb	r2, [r7, #28]
 800e3e6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	73da      	strb	r2, [r3, #15]
}
 800e3f4:	bf00      	nop
 800e3f6:	3714      	adds	r7, #20
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fe:	4770      	bx	lr

0800e400 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b08c      	sub	sp, #48	; 0x30
 800e404:	af02      	add	r7, sp, #8
 800e406:	4603      	mov	r3, r0
 800e408:	71fb      	strb	r3, [r7, #7]
 800e40a:	460b      	mov	r3, r1
 800e40c:	80bb      	strh	r3, [r7, #4]
 800e40e:	4613      	mov	r3, r2
 800e410:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e412:	79fb      	ldrb	r3, [r7, #7]
 800e414:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e416:	887b      	ldrh	r3, [r7, #2]
 800e418:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e41c:	d07f      	beq.n	800e51e <pbuf_alloc+0x11e>
 800e41e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e422:	f300 80c8 	bgt.w	800e5b6 <pbuf_alloc+0x1b6>
 800e426:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e42a:	d010      	beq.n	800e44e <pbuf_alloc+0x4e>
 800e42c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e430:	f300 80c1 	bgt.w	800e5b6 <pbuf_alloc+0x1b6>
 800e434:	2b01      	cmp	r3, #1
 800e436:	d002      	beq.n	800e43e <pbuf_alloc+0x3e>
 800e438:	2b41      	cmp	r3, #65	; 0x41
 800e43a:	f040 80bc 	bne.w	800e5b6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e43e:	887a      	ldrh	r2, [r7, #2]
 800e440:	88bb      	ldrh	r3, [r7, #4]
 800e442:	4619      	mov	r1, r3
 800e444:	2000      	movs	r0, #0
 800e446:	f000 f8d1 	bl	800e5ec <pbuf_alloc_reference>
 800e44a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e44c:	e0bd      	b.n	800e5ca <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e44e:	2300      	movs	r3, #0
 800e450:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e452:	2300      	movs	r3, #0
 800e454:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e456:	88bb      	ldrh	r3, [r7, #4]
 800e458:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e45a:	200c      	movs	r0, #12
 800e45c:	f7ff fb86 	bl	800db6c <memp_malloc>
 800e460:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d109      	bne.n	800e47c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e468:	f7ff ff76 	bl	800e358 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d002      	beq.n	800e478 <pbuf_alloc+0x78>
            pbuf_free(p);
 800e472:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e474:	f000 fada 	bl	800ea2c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e478:	2300      	movs	r3, #0
 800e47a:	e0a7      	b.n	800e5cc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e47c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e47e:	3303      	adds	r3, #3
 800e480:	b29b      	uxth	r3, r3
 800e482:	f023 0303 	bic.w	r3, r3, #3
 800e486:	b29b      	uxth	r3, r3
 800e488:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e48c:	b29b      	uxth	r3, r3
 800e48e:	8b7a      	ldrh	r2, [r7, #26]
 800e490:	4293      	cmp	r3, r2
 800e492:	bf28      	it	cs
 800e494:	4613      	movcs	r3, r2
 800e496:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e498:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e49a:	3310      	adds	r3, #16
 800e49c:	693a      	ldr	r2, [r7, #16]
 800e49e:	4413      	add	r3, r2
 800e4a0:	3303      	adds	r3, #3
 800e4a2:	f023 0303 	bic.w	r3, r3, #3
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	89f9      	ldrh	r1, [r7, #14]
 800e4aa:	8b7a      	ldrh	r2, [r7, #26]
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	9301      	str	r3, [sp, #4]
 800e4b0:	887b      	ldrh	r3, [r7, #2]
 800e4b2:	9300      	str	r3, [sp, #0]
 800e4b4:	460b      	mov	r3, r1
 800e4b6:	4601      	mov	r1, r0
 800e4b8:	6938      	ldr	r0, [r7, #16]
 800e4ba:	f7ff ff77 	bl	800e3ac <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	685b      	ldr	r3, [r3, #4]
 800e4c2:	f003 0303 	and.w	r3, r3, #3
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d006      	beq.n	800e4d8 <pbuf_alloc+0xd8>
 800e4ca:	4b42      	ldr	r3, [pc, #264]	; (800e5d4 <pbuf_alloc+0x1d4>)
 800e4cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e4d0:	4941      	ldr	r1, [pc, #260]	; (800e5d8 <pbuf_alloc+0x1d8>)
 800e4d2:	4842      	ldr	r0, [pc, #264]	; (800e5dc <pbuf_alloc+0x1dc>)
 800e4d4:	f00c fc3a 	bl	801ad4c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e4d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e4da:	3303      	adds	r3, #3
 800e4dc:	f023 0303 	bic.w	r3, r3, #3
 800e4e0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e4e4:	d106      	bne.n	800e4f4 <pbuf_alloc+0xf4>
 800e4e6:	4b3b      	ldr	r3, [pc, #236]	; (800e5d4 <pbuf_alloc+0x1d4>)
 800e4e8:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e4ec:	493c      	ldr	r1, [pc, #240]	; (800e5e0 <pbuf_alloc+0x1e0>)
 800e4ee:	483b      	ldr	r0, [pc, #236]	; (800e5dc <pbuf_alloc+0x1dc>)
 800e4f0:	f00c fc2c 	bl	801ad4c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d102      	bne.n	800e500 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	627b      	str	r3, [r7, #36]	; 0x24
 800e4fe:	e002      	b.n	800e506 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e500:	69fb      	ldr	r3, [r7, #28]
 800e502:	693a      	ldr	r2, [r7, #16]
 800e504:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e50a:	8b7a      	ldrh	r2, [r7, #26]
 800e50c:	89fb      	ldrh	r3, [r7, #14]
 800e50e:	1ad3      	subs	r3, r2, r3
 800e510:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e512:	2300      	movs	r3, #0
 800e514:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e516:	8b7b      	ldrh	r3, [r7, #26]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d19e      	bne.n	800e45a <pbuf_alloc+0x5a>
      break;
 800e51c:	e055      	b.n	800e5ca <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e51e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e520:	3303      	adds	r3, #3
 800e522:	b29b      	uxth	r3, r3
 800e524:	f023 0303 	bic.w	r3, r3, #3
 800e528:	b29a      	uxth	r2, r3
 800e52a:	88bb      	ldrh	r3, [r7, #4]
 800e52c:	3303      	adds	r3, #3
 800e52e:	b29b      	uxth	r3, r3
 800e530:	f023 0303 	bic.w	r3, r3, #3
 800e534:	b29b      	uxth	r3, r3
 800e536:	4413      	add	r3, r2
 800e538:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e53a:	8b3b      	ldrh	r3, [r7, #24]
 800e53c:	3310      	adds	r3, #16
 800e53e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e540:	8b3a      	ldrh	r2, [r7, #24]
 800e542:	88bb      	ldrh	r3, [r7, #4]
 800e544:	3303      	adds	r3, #3
 800e546:	f023 0303 	bic.w	r3, r3, #3
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d306      	bcc.n	800e55c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e54e:	8afa      	ldrh	r2, [r7, #22]
 800e550:	88bb      	ldrh	r3, [r7, #4]
 800e552:	3303      	adds	r3, #3
 800e554:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e558:	429a      	cmp	r2, r3
 800e55a:	d201      	bcs.n	800e560 <pbuf_alloc+0x160>
        return NULL;
 800e55c:	2300      	movs	r3, #0
 800e55e:	e035      	b.n	800e5cc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e560:	8afb      	ldrh	r3, [r7, #22]
 800e562:	4618      	mov	r0, r3
 800e564:	f7ff f980 	bl	800d868 <mem_malloc>
 800e568:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d101      	bne.n	800e574 <pbuf_alloc+0x174>
        return NULL;
 800e570:	2300      	movs	r3, #0
 800e572:	e02b      	b.n	800e5cc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e574:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e576:	3310      	adds	r3, #16
 800e578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e57a:	4413      	add	r3, r2
 800e57c:	3303      	adds	r3, #3
 800e57e:	f023 0303 	bic.w	r3, r3, #3
 800e582:	4618      	mov	r0, r3
 800e584:	88b9      	ldrh	r1, [r7, #4]
 800e586:	88ba      	ldrh	r2, [r7, #4]
 800e588:	2300      	movs	r3, #0
 800e58a:	9301      	str	r3, [sp, #4]
 800e58c:	887b      	ldrh	r3, [r7, #2]
 800e58e:	9300      	str	r3, [sp, #0]
 800e590:	460b      	mov	r3, r1
 800e592:	4601      	mov	r1, r0
 800e594:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e596:	f7ff ff09 	bl	800e3ac <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59c:	685b      	ldr	r3, [r3, #4]
 800e59e:	f003 0303 	and.w	r3, r3, #3
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d010      	beq.n	800e5c8 <pbuf_alloc+0x1c8>
 800e5a6:	4b0b      	ldr	r3, [pc, #44]	; (800e5d4 <pbuf_alloc+0x1d4>)
 800e5a8:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e5ac:	490d      	ldr	r1, [pc, #52]	; (800e5e4 <pbuf_alloc+0x1e4>)
 800e5ae:	480b      	ldr	r0, [pc, #44]	; (800e5dc <pbuf_alloc+0x1dc>)
 800e5b0:	f00c fbcc 	bl	801ad4c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e5b4:	e008      	b.n	800e5c8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e5b6:	4b07      	ldr	r3, [pc, #28]	; (800e5d4 <pbuf_alloc+0x1d4>)
 800e5b8:	f240 1227 	movw	r2, #295	; 0x127
 800e5bc:	490a      	ldr	r1, [pc, #40]	; (800e5e8 <pbuf_alloc+0x1e8>)
 800e5be:	4807      	ldr	r0, [pc, #28]	; (800e5dc <pbuf_alloc+0x1dc>)
 800e5c0:	f00c fbc4 	bl	801ad4c <iprintf>
      return NULL;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	e001      	b.n	800e5cc <pbuf_alloc+0x1cc>
      break;
 800e5c8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3728      	adds	r7, #40	; 0x28
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}
 800e5d4:	0801ce6c 	.word	0x0801ce6c
 800e5d8:	0801ce9c 	.word	0x0801ce9c
 800e5dc:	0801cecc 	.word	0x0801cecc
 800e5e0:	0801cef4 	.word	0x0801cef4
 800e5e4:	0801cf28 	.word	0x0801cf28
 800e5e8:	0801cf54 	.word	0x0801cf54

0800e5ec <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b086      	sub	sp, #24
 800e5f0:	af02      	add	r7, sp, #8
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	460b      	mov	r3, r1
 800e5f6:	807b      	strh	r3, [r7, #2]
 800e5f8:	4613      	mov	r3, r2
 800e5fa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e5fc:	883b      	ldrh	r3, [r7, #0]
 800e5fe:	2b41      	cmp	r3, #65	; 0x41
 800e600:	d009      	beq.n	800e616 <pbuf_alloc_reference+0x2a>
 800e602:	883b      	ldrh	r3, [r7, #0]
 800e604:	2b01      	cmp	r3, #1
 800e606:	d006      	beq.n	800e616 <pbuf_alloc_reference+0x2a>
 800e608:	4b0f      	ldr	r3, [pc, #60]	; (800e648 <pbuf_alloc_reference+0x5c>)
 800e60a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e60e:	490f      	ldr	r1, [pc, #60]	; (800e64c <pbuf_alloc_reference+0x60>)
 800e610:	480f      	ldr	r0, [pc, #60]	; (800e650 <pbuf_alloc_reference+0x64>)
 800e612:	f00c fb9b 	bl	801ad4c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e616:	200b      	movs	r0, #11
 800e618:	f7ff faa8 	bl	800db6c <memp_malloc>
 800e61c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d101      	bne.n	800e628 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e624:	2300      	movs	r3, #0
 800e626:	e00b      	b.n	800e640 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e628:	8879      	ldrh	r1, [r7, #2]
 800e62a:	887a      	ldrh	r2, [r7, #2]
 800e62c:	2300      	movs	r3, #0
 800e62e:	9301      	str	r3, [sp, #4]
 800e630:	883b      	ldrh	r3, [r7, #0]
 800e632:	9300      	str	r3, [sp, #0]
 800e634:	460b      	mov	r3, r1
 800e636:	6879      	ldr	r1, [r7, #4]
 800e638:	68f8      	ldr	r0, [r7, #12]
 800e63a:	f7ff feb7 	bl	800e3ac <pbuf_init_alloced_pbuf>
  return p;
 800e63e:	68fb      	ldr	r3, [r7, #12]
}
 800e640:	4618      	mov	r0, r3
 800e642:	3710      	adds	r7, #16
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}
 800e648:	0801ce6c 	.word	0x0801ce6c
 800e64c:	0801cf70 	.word	0x0801cf70
 800e650:	0801cecc 	.word	0x0801cecc

0800e654 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b088      	sub	sp, #32
 800e658:	af02      	add	r7, sp, #8
 800e65a:	607b      	str	r3, [r7, #4]
 800e65c:	4603      	mov	r3, r0
 800e65e:	73fb      	strb	r3, [r7, #15]
 800e660:	460b      	mov	r3, r1
 800e662:	81bb      	strh	r3, [r7, #12]
 800e664:	4613      	mov	r3, r2
 800e666:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e668:	7bfb      	ldrb	r3, [r7, #15]
 800e66a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e66c:	8a7b      	ldrh	r3, [r7, #18]
 800e66e:	3303      	adds	r3, #3
 800e670:	f023 0203 	bic.w	r2, r3, #3
 800e674:	89bb      	ldrh	r3, [r7, #12]
 800e676:	441a      	add	r2, r3
 800e678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d901      	bls.n	800e682 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e67e:	2300      	movs	r3, #0
 800e680:	e018      	b.n	800e6b4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e682:	6a3b      	ldr	r3, [r7, #32]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d007      	beq.n	800e698 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e688:	8a7b      	ldrh	r3, [r7, #18]
 800e68a:	3303      	adds	r3, #3
 800e68c:	f023 0303 	bic.w	r3, r3, #3
 800e690:	6a3a      	ldr	r2, [r7, #32]
 800e692:	4413      	add	r3, r2
 800e694:	617b      	str	r3, [r7, #20]
 800e696:	e001      	b.n	800e69c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e698:	2300      	movs	r3, #0
 800e69a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	89b9      	ldrh	r1, [r7, #12]
 800e6a0:	89ba      	ldrh	r2, [r7, #12]
 800e6a2:	2302      	movs	r3, #2
 800e6a4:	9301      	str	r3, [sp, #4]
 800e6a6:	897b      	ldrh	r3, [r7, #10]
 800e6a8:	9300      	str	r3, [sp, #0]
 800e6aa:	460b      	mov	r3, r1
 800e6ac:	6979      	ldr	r1, [r7, #20]
 800e6ae:	f7ff fe7d 	bl	800e3ac <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e6b2:	687b      	ldr	r3, [r7, #4]
}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	3718      	adds	r7, #24
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}

0800e6bc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b084      	sub	sp, #16
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
 800e6c4:	460b      	mov	r3, r1
 800e6c6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d106      	bne.n	800e6dc <pbuf_realloc+0x20>
 800e6ce:	4b3a      	ldr	r3, [pc, #232]	; (800e7b8 <pbuf_realloc+0xfc>)
 800e6d0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e6d4:	4939      	ldr	r1, [pc, #228]	; (800e7bc <pbuf_realloc+0x100>)
 800e6d6:	483a      	ldr	r0, [pc, #232]	; (800e7c0 <pbuf_realloc+0x104>)
 800e6d8:	f00c fb38 	bl	801ad4c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	891b      	ldrh	r3, [r3, #8]
 800e6e0:	887a      	ldrh	r2, [r7, #2]
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d263      	bcs.n	800e7ae <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	891a      	ldrh	r2, [r3, #8]
 800e6ea:	887b      	ldrh	r3, [r7, #2]
 800e6ec:	1ad3      	subs	r3, r2, r3
 800e6ee:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e6f0:	887b      	ldrh	r3, [r7, #2]
 800e6f2:	817b      	strh	r3, [r7, #10]
  q = p;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e6f8:	e018      	b.n	800e72c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	895b      	ldrh	r3, [r3, #10]
 800e6fe:	897a      	ldrh	r2, [r7, #10]
 800e700:	1ad3      	subs	r3, r2, r3
 800e702:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	891a      	ldrh	r2, [r3, #8]
 800e708:	893b      	ldrh	r3, [r7, #8]
 800e70a:	1ad3      	subs	r3, r2, r3
 800e70c:	b29a      	uxth	r2, r3
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d106      	bne.n	800e72c <pbuf_realloc+0x70>
 800e71e:	4b26      	ldr	r3, [pc, #152]	; (800e7b8 <pbuf_realloc+0xfc>)
 800e720:	f240 12af 	movw	r2, #431	; 0x1af
 800e724:	4927      	ldr	r1, [pc, #156]	; (800e7c4 <pbuf_realloc+0x108>)
 800e726:	4826      	ldr	r0, [pc, #152]	; (800e7c0 <pbuf_realloc+0x104>)
 800e728:	f00c fb10 	bl	801ad4c <iprintf>
  while (rem_len > q->len) {
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	895b      	ldrh	r3, [r3, #10]
 800e730:	897a      	ldrh	r2, [r7, #10]
 800e732:	429a      	cmp	r2, r3
 800e734:	d8e1      	bhi.n	800e6fa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	7b1b      	ldrb	r3, [r3, #12]
 800e73a:	f003 030f 	and.w	r3, r3, #15
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d121      	bne.n	800e786 <pbuf_realloc+0xca>
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	895b      	ldrh	r3, [r3, #10]
 800e746:	897a      	ldrh	r2, [r7, #10]
 800e748:	429a      	cmp	r2, r3
 800e74a:	d01c      	beq.n	800e786 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	7b5b      	ldrb	r3, [r3, #13]
 800e750:	f003 0302 	and.w	r3, r3, #2
 800e754:	2b00      	cmp	r3, #0
 800e756:	d116      	bne.n	800e786 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	685a      	ldr	r2, [r3, #4]
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	1ad3      	subs	r3, r2, r3
 800e760:	b29a      	uxth	r2, r3
 800e762:	897b      	ldrh	r3, [r7, #10]
 800e764:	4413      	add	r3, r2
 800e766:	b29b      	uxth	r3, r3
 800e768:	4619      	mov	r1, r3
 800e76a:	68f8      	ldr	r0, [r7, #12]
 800e76c:	f7fe ff72 	bl	800d654 <mem_trim>
 800e770:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d106      	bne.n	800e786 <pbuf_realloc+0xca>
 800e778:	4b0f      	ldr	r3, [pc, #60]	; (800e7b8 <pbuf_realloc+0xfc>)
 800e77a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e77e:	4912      	ldr	r1, [pc, #72]	; (800e7c8 <pbuf_realloc+0x10c>)
 800e780:	480f      	ldr	r0, [pc, #60]	; (800e7c0 <pbuf_realloc+0x104>)
 800e782:	f00c fae3 	bl	801ad4c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	897a      	ldrh	r2, [r7, #10]
 800e78a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	895a      	ldrh	r2, [r3, #10]
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d004      	beq.n	800e7a6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f000 f943 	bl	800ea2c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	601a      	str	r2, [r3, #0]
 800e7ac:	e000      	b.n	800e7b0 <pbuf_realloc+0xf4>
    return;
 800e7ae:	bf00      	nop

}
 800e7b0:	3710      	adds	r7, #16
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}
 800e7b6:	bf00      	nop
 800e7b8:	0801ce6c 	.word	0x0801ce6c
 800e7bc:	0801cf84 	.word	0x0801cf84
 800e7c0:	0801cecc 	.word	0x0801cecc
 800e7c4:	0801cf9c 	.word	0x0801cf9c
 800e7c8:	0801cfb4 	.word	0x0801cfb4

0800e7cc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b086      	sub	sp, #24
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	60f8      	str	r0, [r7, #12]
 800e7d4:	60b9      	str	r1, [r7, #8]
 800e7d6:	4613      	mov	r3, r2
 800e7d8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d106      	bne.n	800e7ee <pbuf_add_header_impl+0x22>
 800e7e0:	4b2b      	ldr	r3, [pc, #172]	; (800e890 <pbuf_add_header_impl+0xc4>)
 800e7e2:	f240 12df 	movw	r2, #479	; 0x1df
 800e7e6:	492b      	ldr	r1, [pc, #172]	; (800e894 <pbuf_add_header_impl+0xc8>)
 800e7e8:	482b      	ldr	r0, [pc, #172]	; (800e898 <pbuf_add_header_impl+0xcc>)
 800e7ea:	f00c faaf 	bl	801ad4c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d003      	beq.n	800e7fc <pbuf_add_header_impl+0x30>
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7fa:	d301      	bcc.n	800e800 <pbuf_add_header_impl+0x34>
    return 1;
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	e043      	b.n	800e888 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d101      	bne.n	800e80a <pbuf_add_header_impl+0x3e>
    return 0;
 800e806:	2300      	movs	r3, #0
 800e808:	e03e      	b.n	800e888 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	891a      	ldrh	r2, [r3, #8]
 800e812:	8a7b      	ldrh	r3, [r7, #18]
 800e814:	4413      	add	r3, r2
 800e816:	b29b      	uxth	r3, r3
 800e818:	8a7a      	ldrh	r2, [r7, #18]
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d901      	bls.n	800e822 <pbuf_add_header_impl+0x56>
    return 1;
 800e81e:	2301      	movs	r3, #1
 800e820:	e032      	b.n	800e888 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	7b1b      	ldrb	r3, [r3, #12]
 800e826:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e828:	8a3b      	ldrh	r3, [r7, #16]
 800e82a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d00c      	beq.n	800e84c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	685a      	ldr	r2, [r3, #4]
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	425b      	negs	r3, r3
 800e83a:	4413      	add	r3, r2
 800e83c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	3310      	adds	r3, #16
 800e842:	697a      	ldr	r2, [r7, #20]
 800e844:	429a      	cmp	r2, r3
 800e846:	d20d      	bcs.n	800e864 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e848:	2301      	movs	r3, #1
 800e84a:	e01d      	b.n	800e888 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e84c:	79fb      	ldrb	r3, [r7, #7]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d006      	beq.n	800e860 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	685a      	ldr	r2, [r3, #4]
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	425b      	negs	r3, r3
 800e85a:	4413      	add	r3, r2
 800e85c:	617b      	str	r3, [r7, #20]
 800e85e:	e001      	b.n	800e864 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e860:	2301      	movs	r3, #1
 800e862:	e011      	b.n	800e888 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	697a      	ldr	r2, [r7, #20]
 800e868:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	895a      	ldrh	r2, [r3, #10]
 800e86e:	8a7b      	ldrh	r3, [r7, #18]
 800e870:	4413      	add	r3, r2
 800e872:	b29a      	uxth	r2, r3
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	891a      	ldrh	r2, [r3, #8]
 800e87c:	8a7b      	ldrh	r3, [r7, #18]
 800e87e:	4413      	add	r3, r2
 800e880:	b29a      	uxth	r2, r3
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	811a      	strh	r2, [r3, #8]


  return 0;
 800e886:	2300      	movs	r3, #0
}
 800e888:	4618      	mov	r0, r3
 800e88a:	3718      	adds	r7, #24
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}
 800e890:	0801ce6c 	.word	0x0801ce6c
 800e894:	0801cfd0 	.word	0x0801cfd0
 800e898:	0801cecc 	.word	0x0801cecc

0800e89c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b082      	sub	sp, #8
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
 800e8a4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	6839      	ldr	r1, [r7, #0]
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f7ff ff8e 	bl	800e7cc <pbuf_add_header_impl>
 800e8b0:	4603      	mov	r3, r0
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3708      	adds	r7, #8
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
	...

0800e8bc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b084      	sub	sp, #16
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d106      	bne.n	800e8da <pbuf_remove_header+0x1e>
 800e8cc:	4b20      	ldr	r3, [pc, #128]	; (800e950 <pbuf_remove_header+0x94>)
 800e8ce:	f240 224b 	movw	r2, #587	; 0x24b
 800e8d2:	4920      	ldr	r1, [pc, #128]	; (800e954 <pbuf_remove_header+0x98>)
 800e8d4:	4820      	ldr	r0, [pc, #128]	; (800e958 <pbuf_remove_header+0x9c>)
 800e8d6:	f00c fa39 	bl	801ad4c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d003      	beq.n	800e8e8 <pbuf_remove_header+0x2c>
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8e6:	d301      	bcc.n	800e8ec <pbuf_remove_header+0x30>
    return 1;
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	e02c      	b.n	800e946 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d101      	bne.n	800e8f6 <pbuf_remove_header+0x3a>
    return 0;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	e027      	b.n	800e946 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e8f6:	683b      	ldr	r3, [r7, #0]
 800e8f8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	895b      	ldrh	r3, [r3, #10]
 800e8fe:	89fa      	ldrh	r2, [r7, #14]
 800e900:	429a      	cmp	r2, r3
 800e902:	d908      	bls.n	800e916 <pbuf_remove_header+0x5a>
 800e904:	4b12      	ldr	r3, [pc, #72]	; (800e950 <pbuf_remove_header+0x94>)
 800e906:	f240 2255 	movw	r2, #597	; 0x255
 800e90a:	4914      	ldr	r1, [pc, #80]	; (800e95c <pbuf_remove_header+0xa0>)
 800e90c:	4812      	ldr	r0, [pc, #72]	; (800e958 <pbuf_remove_header+0x9c>)
 800e90e:	f00c fa1d 	bl	801ad4c <iprintf>
 800e912:	2301      	movs	r3, #1
 800e914:	e017      	b.n	800e946 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	685b      	ldr	r3, [r3, #4]
 800e91a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	685a      	ldr	r2, [r3, #4]
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	441a      	add	r2, r3
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	895a      	ldrh	r2, [r3, #10]
 800e92c:	89fb      	ldrh	r3, [r7, #14]
 800e92e:	1ad3      	subs	r3, r2, r3
 800e930:	b29a      	uxth	r2, r3
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	891a      	ldrh	r2, [r3, #8]
 800e93a:	89fb      	ldrh	r3, [r7, #14]
 800e93c:	1ad3      	subs	r3, r2, r3
 800e93e:	b29a      	uxth	r2, r3
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e944:	2300      	movs	r3, #0
}
 800e946:	4618      	mov	r0, r3
 800e948:	3710      	adds	r7, #16
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}
 800e94e:	bf00      	nop
 800e950:	0801ce6c 	.word	0x0801ce6c
 800e954:	0801cfd0 	.word	0x0801cfd0
 800e958:	0801cecc 	.word	0x0801cecc
 800e95c:	0801cfdc 	.word	0x0801cfdc

0800e960 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b082      	sub	sp, #8
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	460b      	mov	r3, r1
 800e96a:	807b      	strh	r3, [r7, #2]
 800e96c:	4613      	mov	r3, r2
 800e96e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e970:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e974:	2b00      	cmp	r3, #0
 800e976:	da08      	bge.n	800e98a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e978:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e97c:	425b      	negs	r3, r3
 800e97e:	4619      	mov	r1, r3
 800e980:	6878      	ldr	r0, [r7, #4]
 800e982:	f7ff ff9b 	bl	800e8bc <pbuf_remove_header>
 800e986:	4603      	mov	r3, r0
 800e988:	e007      	b.n	800e99a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e98a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e98e:	787a      	ldrb	r2, [r7, #1]
 800e990:	4619      	mov	r1, r3
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f7ff ff1a 	bl	800e7cc <pbuf_add_header_impl>
 800e998:	4603      	mov	r3, r0
  }
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3708      	adds	r7, #8
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}

0800e9a2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e9a2:	b580      	push	{r7, lr}
 800e9a4:	b082      	sub	sp, #8
 800e9a6:	af00      	add	r7, sp, #0
 800e9a8:	6078      	str	r0, [r7, #4]
 800e9aa:	460b      	mov	r3, r1
 800e9ac:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e9ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	4619      	mov	r1, r3
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	f7ff ffd2 	bl	800e960 <pbuf_header_impl>
 800e9bc:	4603      	mov	r3, r0
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3708      	adds	r7, #8
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}

0800e9c6 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 800e9c6:	b580      	push	{r7, lr}
 800e9c8:	b086      	sub	sp, #24
 800e9ca:	af00      	add	r7, sp, #0
 800e9cc:	6078      	str	r0, [r7, #4]
 800e9ce:	460b      	mov	r3, r1
 800e9d0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 800e9d6:	887b      	ldrh	r3, [r7, #2]
 800e9d8:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800e9da:	e01c      	b.n	800ea16 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	895b      	ldrh	r3, [r3, #10]
 800e9e0:	8a7a      	ldrh	r2, [r7, #18]
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d310      	bcc.n	800ea08 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 800e9e6:	697b      	ldr	r3, [r7, #20]
 800e9e8:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 800e9ea:	697b      	ldr	r3, [r7, #20]
 800e9ec:	895b      	ldrh	r3, [r3, #10]
 800e9ee:	8a7a      	ldrh	r2, [r7, #18]
 800e9f0:	1ad3      	subs	r3, r2, r3
 800e9f2:	827b      	strh	r3, [r7, #18]
      p = p->next;
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	617b      	str	r3, [r7, #20]
      f->next = 0;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 800ea00:	68f8      	ldr	r0, [r7, #12]
 800ea02:	f000 f813 	bl	800ea2c <pbuf_free>
 800ea06:	e006      	b.n	800ea16 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 800ea08:	8a7b      	ldrh	r3, [r7, #18]
 800ea0a:	4619      	mov	r1, r3
 800ea0c:	6978      	ldr	r0, [r7, #20]
 800ea0e:	f7ff ff55 	bl	800e8bc <pbuf_remove_header>
      free_left = 0;
 800ea12:	2300      	movs	r3, #0
 800ea14:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800ea16:	8a7b      	ldrh	r3, [r7, #18]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d002      	beq.n	800ea22 <pbuf_free_header+0x5c>
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d1dc      	bne.n	800e9dc <pbuf_free_header+0x16>
    }
  }
  return p;
 800ea22:	697b      	ldr	r3, [r7, #20]
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3718      	adds	r7, #24
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}

0800ea2c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b088      	sub	sp, #32
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d10b      	bne.n	800ea52 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d106      	bne.n	800ea4e <pbuf_free+0x22>
 800ea40:	4b3b      	ldr	r3, [pc, #236]	; (800eb30 <pbuf_free+0x104>)
 800ea42:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ea46:	493b      	ldr	r1, [pc, #236]	; (800eb34 <pbuf_free+0x108>)
 800ea48:	483b      	ldr	r0, [pc, #236]	; (800eb38 <pbuf_free+0x10c>)
 800ea4a:	f00c f97f 	bl	801ad4c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	e069      	b.n	800eb26 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ea52:	2300      	movs	r3, #0
 800ea54:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ea56:	e062      	b.n	800eb1e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ea58:	f009 fe86 	bl	8018768 <sys_arch_protect>
 800ea5c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	7b9b      	ldrb	r3, [r3, #14]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d106      	bne.n	800ea74 <pbuf_free+0x48>
 800ea66:	4b32      	ldr	r3, [pc, #200]	; (800eb30 <pbuf_free+0x104>)
 800ea68:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ea6c:	4933      	ldr	r1, [pc, #204]	; (800eb3c <pbuf_free+0x110>)
 800ea6e:	4832      	ldr	r0, [pc, #200]	; (800eb38 <pbuf_free+0x10c>)
 800ea70:	f00c f96c 	bl	801ad4c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	7b9b      	ldrb	r3, [r3, #14]
 800ea78:	3b01      	subs	r3, #1
 800ea7a:	b2da      	uxtb	r2, r3
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	739a      	strb	r2, [r3, #14]
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	7b9b      	ldrb	r3, [r3, #14]
 800ea84:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800ea86:	69b8      	ldr	r0, [r7, #24]
 800ea88:	f009 fe7c 	bl	8018784 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ea8c:	7dfb      	ldrb	r3, [r7, #23]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d143      	bne.n	800eb1a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	7b1b      	ldrb	r3, [r3, #12]
 800ea9c:	f003 030f 	and.w	r3, r3, #15
 800eaa0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	7b5b      	ldrb	r3, [r3, #13]
 800eaa6:	f003 0302 	and.w	r3, r3, #2
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d011      	beq.n	800ead2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	691b      	ldr	r3, [r3, #16]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d106      	bne.n	800eac8 <pbuf_free+0x9c>
 800eaba:	4b1d      	ldr	r3, [pc, #116]	; (800eb30 <pbuf_free+0x104>)
 800eabc:	f240 22ff 	movw	r2, #767	; 0x2ff
 800eac0:	491f      	ldr	r1, [pc, #124]	; (800eb40 <pbuf_free+0x114>)
 800eac2:	481d      	ldr	r0, [pc, #116]	; (800eb38 <pbuf_free+0x10c>)
 800eac4:	f00c f942 	bl	801ad4c <iprintf>
        pc->custom_free_function(p);
 800eac8:	68bb      	ldr	r3, [r7, #8]
 800eaca:	691b      	ldr	r3, [r3, #16]
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	4798      	blx	r3
 800ead0:	e01d      	b.n	800eb0e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ead2:	7bfb      	ldrb	r3, [r7, #15]
 800ead4:	2b02      	cmp	r3, #2
 800ead6:	d104      	bne.n	800eae2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ead8:	6879      	ldr	r1, [r7, #4]
 800eada:	200c      	movs	r0, #12
 800eadc:	f7ff f898 	bl	800dc10 <memp_free>
 800eae0:	e015      	b.n	800eb0e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800eae2:	7bfb      	ldrb	r3, [r7, #15]
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d104      	bne.n	800eaf2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800eae8:	6879      	ldr	r1, [r7, #4]
 800eaea:	200b      	movs	r0, #11
 800eaec:	f7ff f890 	bl	800dc10 <memp_free>
 800eaf0:	e00d      	b.n	800eb0e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800eaf2:	7bfb      	ldrb	r3, [r7, #15]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d103      	bne.n	800eb00 <pbuf_free+0xd4>
          mem_free(p);
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f7fe fd1b 	bl	800d534 <mem_free>
 800eafe:	e006      	b.n	800eb0e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800eb00:	4b0b      	ldr	r3, [pc, #44]	; (800eb30 <pbuf_free+0x104>)
 800eb02:	f240 320f 	movw	r2, #783	; 0x30f
 800eb06:	490f      	ldr	r1, [pc, #60]	; (800eb44 <pbuf_free+0x118>)
 800eb08:	480b      	ldr	r0, [pc, #44]	; (800eb38 <pbuf_free+0x10c>)
 800eb0a:	f00c f91f 	bl	801ad4c <iprintf>
        }
      }
      count++;
 800eb0e:	7ffb      	ldrb	r3, [r7, #31]
 800eb10:	3301      	adds	r3, #1
 800eb12:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	607b      	str	r3, [r7, #4]
 800eb18:	e001      	b.n	800eb1e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d199      	bne.n	800ea58 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800eb24:	7ffb      	ldrb	r3, [r7, #31]
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	3720      	adds	r7, #32
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}
 800eb2e:	bf00      	nop
 800eb30:	0801ce6c 	.word	0x0801ce6c
 800eb34:	0801cfd0 	.word	0x0801cfd0
 800eb38:	0801cecc 	.word	0x0801cecc
 800eb3c:	0801cffc 	.word	0x0801cffc
 800eb40:	0801d014 	.word	0x0801d014
 800eb44:	0801d038 	.word	0x0801d038

0800eb48 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b085      	sub	sp, #20
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800eb50:	2300      	movs	r3, #0
 800eb52:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800eb54:	e005      	b.n	800eb62 <pbuf_clen+0x1a>
    ++len;
 800eb56:	89fb      	ldrh	r3, [r7, #14]
 800eb58:	3301      	adds	r3, #1
 800eb5a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d1f6      	bne.n	800eb56 <pbuf_clen+0xe>
  }
  return len;
 800eb68:	89fb      	ldrh	r3, [r7, #14]
}
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	3714      	adds	r7, #20
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb74:	4770      	bx	lr
	...

0800eb78 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b084      	sub	sp, #16
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d016      	beq.n	800ebb4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800eb86:	f009 fdef 	bl	8018768 <sys_arch_protect>
 800eb8a:	60f8      	str	r0, [r7, #12]
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	7b9b      	ldrb	r3, [r3, #14]
 800eb90:	3301      	adds	r3, #1
 800eb92:	b2da      	uxtb	r2, r3
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	739a      	strb	r2, [r3, #14]
 800eb98:	68f8      	ldr	r0, [r7, #12]
 800eb9a:	f009 fdf3 	bl	8018784 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	7b9b      	ldrb	r3, [r3, #14]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d106      	bne.n	800ebb4 <pbuf_ref+0x3c>
 800eba6:	4b05      	ldr	r3, [pc, #20]	; (800ebbc <pbuf_ref+0x44>)
 800eba8:	f240 3242 	movw	r2, #834	; 0x342
 800ebac:	4904      	ldr	r1, [pc, #16]	; (800ebc0 <pbuf_ref+0x48>)
 800ebae:	4805      	ldr	r0, [pc, #20]	; (800ebc4 <pbuf_ref+0x4c>)
 800ebb0:	f00c f8cc 	bl	801ad4c <iprintf>
  }
}
 800ebb4:	bf00      	nop
 800ebb6:	3710      	adds	r7, #16
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}
 800ebbc:	0801ce6c 	.word	0x0801ce6c
 800ebc0:	0801d04c 	.word	0x0801d04c
 800ebc4:	0801cecc 	.word	0x0801cecc

0800ebc8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b084      	sub	sp, #16
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
 800ebd0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d002      	beq.n	800ebde <pbuf_cat+0x16>
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d107      	bne.n	800ebee <pbuf_cat+0x26>
 800ebde:	4b20      	ldr	r3, [pc, #128]	; (800ec60 <pbuf_cat+0x98>)
 800ebe0:	f240 3259 	movw	r2, #857	; 0x359
 800ebe4:	491f      	ldr	r1, [pc, #124]	; (800ec64 <pbuf_cat+0x9c>)
 800ebe6:	4820      	ldr	r0, [pc, #128]	; (800ec68 <pbuf_cat+0xa0>)
 800ebe8:	f00c f8b0 	bl	801ad4c <iprintf>
 800ebec:	e034      	b.n	800ec58 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	60fb      	str	r3, [r7, #12]
 800ebf2:	e00a      	b.n	800ec0a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	891a      	ldrh	r2, [r3, #8]
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	891b      	ldrh	r3, [r3, #8]
 800ebfc:	4413      	add	r3, r2
 800ebfe:	b29a      	uxth	r2, r3
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	60fb      	str	r3, [r7, #12]
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d1f0      	bne.n	800ebf4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	891a      	ldrh	r2, [r3, #8]
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	895b      	ldrh	r3, [r3, #10]
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d006      	beq.n	800ec2c <pbuf_cat+0x64>
 800ec1e:	4b10      	ldr	r3, [pc, #64]	; (800ec60 <pbuf_cat+0x98>)
 800ec20:	f240 3262 	movw	r2, #866	; 0x362
 800ec24:	4911      	ldr	r1, [pc, #68]	; (800ec6c <pbuf_cat+0xa4>)
 800ec26:	4810      	ldr	r0, [pc, #64]	; (800ec68 <pbuf_cat+0xa0>)
 800ec28:	f00c f890 	bl	801ad4c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d006      	beq.n	800ec42 <pbuf_cat+0x7a>
 800ec34:	4b0a      	ldr	r3, [pc, #40]	; (800ec60 <pbuf_cat+0x98>)
 800ec36:	f240 3263 	movw	r2, #867	; 0x363
 800ec3a:	490d      	ldr	r1, [pc, #52]	; (800ec70 <pbuf_cat+0xa8>)
 800ec3c:	480a      	ldr	r0, [pc, #40]	; (800ec68 <pbuf_cat+0xa0>)
 800ec3e:	f00c f885 	bl	801ad4c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	891a      	ldrh	r2, [r3, #8]
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	891b      	ldrh	r3, [r3, #8]
 800ec4a:	4413      	add	r3, r2
 800ec4c:	b29a      	uxth	r2, r3
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	683a      	ldr	r2, [r7, #0]
 800ec56:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ec58:	3710      	adds	r7, #16
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}
 800ec5e:	bf00      	nop
 800ec60:	0801ce6c 	.word	0x0801ce6c
 800ec64:	0801d060 	.word	0x0801d060
 800ec68:	0801cecc 	.word	0x0801cecc
 800ec6c:	0801d098 	.word	0x0801d098
 800ec70:	0801d0c8 	.word	0x0801d0c8

0800ec74 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b082      	sub	sp, #8
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
 800ec7c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800ec7e:	6839      	ldr	r1, [r7, #0]
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f7ff ffa1 	bl	800ebc8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800ec86:	6838      	ldr	r0, [r7, #0]
 800ec88:	f7ff ff76 	bl	800eb78 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800ec8c:	bf00      	nop
 800ec8e:	3708      	adds	r7, #8
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b086      	sub	sp, #24
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	617b      	str	r3, [r7, #20]
 800eca2:	2300      	movs	r3, #0
 800eca4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d008      	beq.n	800ecbe <pbuf_copy+0x2a>
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d005      	beq.n	800ecbe <pbuf_copy+0x2a>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	891a      	ldrh	r2, [r3, #8]
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	891b      	ldrh	r3, [r3, #8]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d209      	bcs.n	800ecd2 <pbuf_copy+0x3e>
 800ecbe:	4b57      	ldr	r3, [pc, #348]	; (800ee1c <pbuf_copy+0x188>)
 800ecc0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800ecc4:	4956      	ldr	r1, [pc, #344]	; (800ee20 <pbuf_copy+0x18c>)
 800ecc6:	4857      	ldr	r0, [pc, #348]	; (800ee24 <pbuf_copy+0x190>)
 800ecc8:	f00c f840 	bl	801ad4c <iprintf>
 800eccc:	f06f 030f 	mvn.w	r3, #15
 800ecd0:	e09f      	b.n	800ee12 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	895b      	ldrh	r3, [r3, #10]
 800ecd6:	461a      	mov	r2, r3
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	1ad2      	subs	r2, r2, r3
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	895b      	ldrh	r3, [r3, #10]
 800ece0:	4619      	mov	r1, r3
 800ece2:	693b      	ldr	r3, [r7, #16]
 800ece4:	1acb      	subs	r3, r1, r3
 800ece6:	429a      	cmp	r2, r3
 800ece8:	d306      	bcc.n	800ecf8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	895b      	ldrh	r3, [r3, #10]
 800ecee:	461a      	mov	r2, r3
 800ecf0:	693b      	ldr	r3, [r7, #16]
 800ecf2:	1ad3      	subs	r3, r2, r3
 800ecf4:	60fb      	str	r3, [r7, #12]
 800ecf6:	e005      	b.n	800ed04 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	895b      	ldrh	r3, [r3, #10]
 800ecfc:	461a      	mov	r2, r3
 800ecfe:	697b      	ldr	r3, [r7, #20]
 800ed00:	1ad3      	subs	r3, r2, r3
 800ed02:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	685a      	ldr	r2, [r3, #4]
 800ed08:	697b      	ldr	r3, [r7, #20]
 800ed0a:	18d0      	adds	r0, r2, r3
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	685a      	ldr	r2, [r3, #4]
 800ed10:	693b      	ldr	r3, [r7, #16]
 800ed12:	4413      	add	r3, r2
 800ed14:	68fa      	ldr	r2, [r7, #12]
 800ed16:	4619      	mov	r1, r3
 800ed18:	f00b fc50 	bl	801a5bc <memcpy>
    offset_to += len;
 800ed1c:	697a      	ldr	r2, [r7, #20]
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	4413      	add	r3, r2
 800ed22:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ed24:	693a      	ldr	r2, [r7, #16]
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	4413      	add	r3, r2
 800ed2a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	895b      	ldrh	r3, [r3, #10]
 800ed30:	461a      	mov	r2, r3
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d906      	bls.n	800ed46 <pbuf_copy+0xb2>
 800ed38:	4b38      	ldr	r3, [pc, #224]	; (800ee1c <pbuf_copy+0x188>)
 800ed3a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800ed3e:	493a      	ldr	r1, [pc, #232]	; (800ee28 <pbuf_copy+0x194>)
 800ed40:	4838      	ldr	r0, [pc, #224]	; (800ee24 <pbuf_copy+0x190>)
 800ed42:	f00c f803 	bl	801ad4c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	895b      	ldrh	r3, [r3, #10]
 800ed4a:	461a      	mov	r2, r3
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	d906      	bls.n	800ed60 <pbuf_copy+0xcc>
 800ed52:	4b32      	ldr	r3, [pc, #200]	; (800ee1c <pbuf_copy+0x188>)
 800ed54:	f240 32da 	movw	r2, #986	; 0x3da
 800ed58:	4934      	ldr	r1, [pc, #208]	; (800ee2c <pbuf_copy+0x198>)
 800ed5a:	4832      	ldr	r0, [pc, #200]	; (800ee24 <pbuf_copy+0x190>)
 800ed5c:	f00b fff6 	bl	801ad4c <iprintf>
    if (offset_from >= p_from->len) {
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	895b      	ldrh	r3, [r3, #10]
 800ed64:	461a      	mov	r2, r3
 800ed66:	693b      	ldr	r3, [r7, #16]
 800ed68:	4293      	cmp	r3, r2
 800ed6a:	d304      	bcc.n	800ed76 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	895b      	ldrh	r3, [r3, #10]
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	d114      	bne.n	800edac <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ed82:	2300      	movs	r3, #0
 800ed84:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d10c      	bne.n	800edac <pbuf_copy+0x118>
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d009      	beq.n	800edac <pbuf_copy+0x118>
 800ed98:	4b20      	ldr	r3, [pc, #128]	; (800ee1c <pbuf_copy+0x188>)
 800ed9a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800ed9e:	4924      	ldr	r1, [pc, #144]	; (800ee30 <pbuf_copy+0x19c>)
 800eda0:	4820      	ldr	r0, [pc, #128]	; (800ee24 <pbuf_copy+0x190>)
 800eda2:	f00b ffd3 	bl	801ad4c <iprintf>
 800eda6:	f06f 030f 	mvn.w	r3, #15
 800edaa:	e032      	b.n	800ee12 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d013      	beq.n	800edda <pbuf_copy+0x146>
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	895a      	ldrh	r2, [r3, #10]
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	891b      	ldrh	r3, [r3, #8]
 800edba:	429a      	cmp	r2, r3
 800edbc:	d10d      	bne.n	800edda <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d009      	beq.n	800edda <pbuf_copy+0x146>
 800edc6:	4b15      	ldr	r3, [pc, #84]	; (800ee1c <pbuf_copy+0x188>)
 800edc8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800edcc:	4919      	ldr	r1, [pc, #100]	; (800ee34 <pbuf_copy+0x1a0>)
 800edce:	4815      	ldr	r0, [pc, #84]	; (800ee24 <pbuf_copy+0x190>)
 800edd0:	f00b ffbc 	bl	801ad4c <iprintf>
 800edd4:	f06f 0305 	mvn.w	r3, #5
 800edd8:	e01b      	b.n	800ee12 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d013      	beq.n	800ee08 <pbuf_copy+0x174>
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	895a      	ldrh	r2, [r3, #10]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	891b      	ldrh	r3, [r3, #8]
 800ede8:	429a      	cmp	r2, r3
 800edea:	d10d      	bne.n	800ee08 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d009      	beq.n	800ee08 <pbuf_copy+0x174>
 800edf4:	4b09      	ldr	r3, [pc, #36]	; (800ee1c <pbuf_copy+0x188>)
 800edf6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800edfa:	490e      	ldr	r1, [pc, #56]	; (800ee34 <pbuf_copy+0x1a0>)
 800edfc:	4809      	ldr	r0, [pc, #36]	; (800ee24 <pbuf_copy+0x190>)
 800edfe:	f00b ffa5 	bl	801ad4c <iprintf>
 800ee02:	f06f 0305 	mvn.w	r3, #5
 800ee06:	e004      	b.n	800ee12 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	f47f af61 	bne.w	800ecd2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ee10:	2300      	movs	r3, #0
}
 800ee12:	4618      	mov	r0, r3
 800ee14:	3718      	adds	r7, #24
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}
 800ee1a:	bf00      	nop
 800ee1c:	0801ce6c 	.word	0x0801ce6c
 800ee20:	0801d114 	.word	0x0801d114
 800ee24:	0801cecc 	.word	0x0801cecc
 800ee28:	0801d144 	.word	0x0801d144
 800ee2c:	0801d15c 	.word	0x0801d15c
 800ee30:	0801d178 	.word	0x0801d178
 800ee34:	0801d188 	.word	0x0801d188

0800ee38 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b088      	sub	sp, #32
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	60f8      	str	r0, [r7, #12]
 800ee40:	60b9      	str	r1, [r7, #8]
 800ee42:	4611      	mov	r1, r2
 800ee44:	461a      	mov	r2, r3
 800ee46:	460b      	mov	r3, r1
 800ee48:	80fb      	strh	r3, [r7, #6]
 800ee4a:	4613      	mov	r3, r2
 800ee4c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ee52:	2300      	movs	r3, #0
 800ee54:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d108      	bne.n	800ee6e <pbuf_copy_partial+0x36>
 800ee5c:	4b2b      	ldr	r3, [pc, #172]	; (800ef0c <pbuf_copy_partial+0xd4>)
 800ee5e:	f240 420a 	movw	r2, #1034	; 0x40a
 800ee62:	492b      	ldr	r1, [pc, #172]	; (800ef10 <pbuf_copy_partial+0xd8>)
 800ee64:	482b      	ldr	r0, [pc, #172]	; (800ef14 <pbuf_copy_partial+0xdc>)
 800ee66:	f00b ff71 	bl	801ad4c <iprintf>
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	e04a      	b.n	800ef04 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d108      	bne.n	800ee86 <pbuf_copy_partial+0x4e>
 800ee74:	4b25      	ldr	r3, [pc, #148]	; (800ef0c <pbuf_copy_partial+0xd4>)
 800ee76:	f240 420b 	movw	r2, #1035	; 0x40b
 800ee7a:	4927      	ldr	r1, [pc, #156]	; (800ef18 <pbuf_copy_partial+0xe0>)
 800ee7c:	4825      	ldr	r0, [pc, #148]	; (800ef14 <pbuf_copy_partial+0xdc>)
 800ee7e:	f00b ff65 	bl	801ad4c <iprintf>
 800ee82:	2300      	movs	r3, #0
 800ee84:	e03e      	b.n	800ef04 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	61fb      	str	r3, [r7, #28]
 800ee8a:	e034      	b.n	800eef6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ee8c:	88bb      	ldrh	r3, [r7, #4]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d00a      	beq.n	800eea8 <pbuf_copy_partial+0x70>
 800ee92:	69fb      	ldr	r3, [r7, #28]
 800ee94:	895b      	ldrh	r3, [r3, #10]
 800ee96:	88ba      	ldrh	r2, [r7, #4]
 800ee98:	429a      	cmp	r2, r3
 800ee9a:	d305      	bcc.n	800eea8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ee9c:	69fb      	ldr	r3, [r7, #28]
 800ee9e:	895b      	ldrh	r3, [r3, #10]
 800eea0:	88ba      	ldrh	r2, [r7, #4]
 800eea2:	1ad3      	subs	r3, r2, r3
 800eea4:	80bb      	strh	r3, [r7, #4]
 800eea6:	e023      	b.n	800eef0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800eea8:	69fb      	ldr	r3, [r7, #28]
 800eeaa:	895a      	ldrh	r2, [r3, #10]
 800eeac:	88bb      	ldrh	r3, [r7, #4]
 800eeae:	1ad3      	subs	r3, r2, r3
 800eeb0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800eeb2:	8b3a      	ldrh	r2, [r7, #24]
 800eeb4:	88fb      	ldrh	r3, [r7, #6]
 800eeb6:	429a      	cmp	r2, r3
 800eeb8:	d901      	bls.n	800eebe <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800eeba:	88fb      	ldrh	r3, [r7, #6]
 800eebc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800eebe:	8b7b      	ldrh	r3, [r7, #26]
 800eec0:	68ba      	ldr	r2, [r7, #8]
 800eec2:	18d0      	adds	r0, r2, r3
 800eec4:	69fb      	ldr	r3, [r7, #28]
 800eec6:	685a      	ldr	r2, [r3, #4]
 800eec8:	88bb      	ldrh	r3, [r7, #4]
 800eeca:	4413      	add	r3, r2
 800eecc:	8b3a      	ldrh	r2, [r7, #24]
 800eece:	4619      	mov	r1, r3
 800eed0:	f00b fb74 	bl	801a5bc <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800eed4:	8afa      	ldrh	r2, [r7, #22]
 800eed6:	8b3b      	ldrh	r3, [r7, #24]
 800eed8:	4413      	add	r3, r2
 800eeda:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800eedc:	8b7a      	ldrh	r2, [r7, #26]
 800eede:	8b3b      	ldrh	r3, [r7, #24]
 800eee0:	4413      	add	r3, r2
 800eee2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800eee4:	88fa      	ldrh	r2, [r7, #6]
 800eee6:	8b3b      	ldrh	r3, [r7, #24]
 800eee8:	1ad3      	subs	r3, r2, r3
 800eeea:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800eeec:	2300      	movs	r3, #0
 800eeee:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800eef0:	69fb      	ldr	r3, [r7, #28]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	61fb      	str	r3, [r7, #28]
 800eef6:	88fb      	ldrh	r3, [r7, #6]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d002      	beq.n	800ef02 <pbuf_copy_partial+0xca>
 800eefc:	69fb      	ldr	r3, [r7, #28]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d1c4      	bne.n	800ee8c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ef02:	8afb      	ldrh	r3, [r7, #22]
}
 800ef04:	4618      	mov	r0, r3
 800ef06:	3720      	adds	r7, #32
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}
 800ef0c:	0801ce6c 	.word	0x0801ce6c
 800ef10:	0801d1b4 	.word	0x0801d1b4
 800ef14:	0801cecc 	.word	0x0801cecc
 800ef18:	0801d1d4 	.word	0x0801d1d4

0800ef1c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b084      	sub	sp, #16
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	4603      	mov	r3, r0
 800ef24:	603a      	str	r2, [r7, #0]
 800ef26:	71fb      	strb	r3, [r7, #7]
 800ef28:	460b      	mov	r3, r1
 800ef2a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	8919      	ldrh	r1, [r3, #8]
 800ef30:	88ba      	ldrh	r2, [r7, #4]
 800ef32:	79fb      	ldrb	r3, [r7, #7]
 800ef34:	4618      	mov	r0, r3
 800ef36:	f7ff fa63 	bl	800e400 <pbuf_alloc>
 800ef3a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d101      	bne.n	800ef46 <pbuf_clone+0x2a>
    return NULL;
 800ef42:	2300      	movs	r3, #0
 800ef44:	e011      	b.n	800ef6a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ef46:	6839      	ldr	r1, [r7, #0]
 800ef48:	68f8      	ldr	r0, [r7, #12]
 800ef4a:	f7ff fea3 	bl	800ec94 <pbuf_copy>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ef52:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d006      	beq.n	800ef68 <pbuf_clone+0x4c>
 800ef5a:	4b06      	ldr	r3, [pc, #24]	; (800ef74 <pbuf_clone+0x58>)
 800ef5c:	f240 5224 	movw	r2, #1316	; 0x524
 800ef60:	4905      	ldr	r1, [pc, #20]	; (800ef78 <pbuf_clone+0x5c>)
 800ef62:	4806      	ldr	r0, [pc, #24]	; (800ef7c <pbuf_clone+0x60>)
 800ef64:	f00b fef2 	bl	801ad4c <iprintf>
  return q;
 800ef68:	68fb      	ldr	r3, [r7, #12]
}
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	3710      	adds	r7, #16
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}
 800ef72:	bf00      	nop
 800ef74:	0801ce6c 	.word	0x0801ce6c
 800ef78:	0801d2e0 	.word	0x0801d2e0
 800ef7c:	0801cecc 	.word	0x0801cecc

0800ef80 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ef84:	f00b fefa 	bl	801ad7c <rand>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	b29b      	uxth	r3, r3
 800ef8c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ef90:	b29b      	uxth	r3, r3
 800ef92:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ef96:	b29a      	uxth	r2, r3
 800ef98:	4b01      	ldr	r3, [pc, #4]	; (800efa0 <tcp_init+0x20>)
 800ef9a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ef9c:	bf00      	nop
 800ef9e:	bd80      	pop	{r7, pc}
 800efa0:	20000010 	.word	0x20000010

0800efa4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b082      	sub	sp, #8
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	7d1b      	ldrb	r3, [r3, #20]
 800efb0:	2b01      	cmp	r3, #1
 800efb2:	d105      	bne.n	800efc0 <tcp_free+0x1c>
 800efb4:	4b06      	ldr	r3, [pc, #24]	; (800efd0 <tcp_free+0x2c>)
 800efb6:	22d4      	movs	r2, #212	; 0xd4
 800efb8:	4906      	ldr	r1, [pc, #24]	; (800efd4 <tcp_free+0x30>)
 800efba:	4807      	ldr	r0, [pc, #28]	; (800efd8 <tcp_free+0x34>)
 800efbc:	f00b fec6 	bl	801ad4c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800efc0:	6879      	ldr	r1, [r7, #4]
 800efc2:	2001      	movs	r0, #1
 800efc4:	f7fe fe24 	bl	800dc10 <memp_free>
}
 800efc8:	bf00      	nop
 800efca:	3708      	adds	r7, #8
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}
 800efd0:	0801d36c 	.word	0x0801d36c
 800efd4:	0801d39c 	.word	0x0801d39c
 800efd8:	0801d3b0 	.word	0x0801d3b0

0800efdc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b082      	sub	sp, #8
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	7d1b      	ldrb	r3, [r3, #20]
 800efe8:	2b01      	cmp	r3, #1
 800efea:	d105      	bne.n	800eff8 <tcp_free_listen+0x1c>
 800efec:	4b06      	ldr	r3, [pc, #24]	; (800f008 <tcp_free_listen+0x2c>)
 800efee:	22df      	movs	r2, #223	; 0xdf
 800eff0:	4906      	ldr	r1, [pc, #24]	; (800f00c <tcp_free_listen+0x30>)
 800eff2:	4807      	ldr	r0, [pc, #28]	; (800f010 <tcp_free_listen+0x34>)
 800eff4:	f00b feaa 	bl	801ad4c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800eff8:	6879      	ldr	r1, [r7, #4]
 800effa:	2002      	movs	r0, #2
 800effc:	f7fe fe08 	bl	800dc10 <memp_free>
}
 800f000:	bf00      	nop
 800f002:	3708      	adds	r7, #8
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}
 800f008:	0801d36c 	.word	0x0801d36c
 800f00c:	0801d3d8 	.word	0x0801d3d8
 800f010:	0801d3b0 	.word	0x0801d3b0

0800f014 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f018:	f001 f8c0 	bl	801019c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f01c:	4b07      	ldr	r3, [pc, #28]	; (800f03c <tcp_tmr+0x28>)
 800f01e:	781b      	ldrb	r3, [r3, #0]
 800f020:	3301      	adds	r3, #1
 800f022:	b2da      	uxtb	r2, r3
 800f024:	4b05      	ldr	r3, [pc, #20]	; (800f03c <tcp_tmr+0x28>)
 800f026:	701a      	strb	r2, [r3, #0]
 800f028:	4b04      	ldr	r3, [pc, #16]	; (800f03c <tcp_tmr+0x28>)
 800f02a:	781b      	ldrb	r3, [r3, #0]
 800f02c:	f003 0301 	and.w	r3, r3, #1
 800f030:	2b00      	cmp	r3, #0
 800f032:	d001      	beq.n	800f038 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f034:	f000 fd72 	bl	800fb1c <tcp_slowtmr>
  }
}
 800f038:	bf00      	nop
 800f03a:	bd80      	pop	{r7, pc}
 800f03c:	2000b219 	.word	0x2000b219

0800f040 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b084      	sub	sp, #16
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d105      	bne.n	800f05c <tcp_remove_listener+0x1c>
 800f050:	4b0d      	ldr	r3, [pc, #52]	; (800f088 <tcp_remove_listener+0x48>)
 800f052:	22ff      	movs	r2, #255	; 0xff
 800f054:	490d      	ldr	r1, [pc, #52]	; (800f08c <tcp_remove_listener+0x4c>)
 800f056:	480e      	ldr	r0, [pc, #56]	; (800f090 <tcp_remove_listener+0x50>)
 800f058:	f00b fe78 	bl	801ad4c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	60fb      	str	r3, [r7, #12]
 800f060:	e00a      	b.n	800f078 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f066:	683a      	ldr	r2, [r7, #0]
 800f068:	429a      	cmp	r2, r3
 800f06a:	d102      	bne.n	800f072 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	2200      	movs	r2, #0
 800f070:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	68db      	ldr	r3, [r3, #12]
 800f076:	60fb      	str	r3, [r7, #12]
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d1f1      	bne.n	800f062 <tcp_remove_listener+0x22>
    }
  }
}
 800f07e:	bf00      	nop
 800f080:	bf00      	nop
 800f082:	3710      	adds	r7, #16
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}
 800f088:	0801d36c 	.word	0x0801d36c
 800f08c:	0801d3f4 	.word	0x0801d3f4
 800f090:	0801d3b0 	.word	0x0801d3b0

0800f094 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b084      	sub	sp, #16
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d106      	bne.n	800f0b0 <tcp_listen_closed+0x1c>
 800f0a2:	4b14      	ldr	r3, [pc, #80]	; (800f0f4 <tcp_listen_closed+0x60>)
 800f0a4:	f240 1211 	movw	r2, #273	; 0x111
 800f0a8:	4913      	ldr	r1, [pc, #76]	; (800f0f8 <tcp_listen_closed+0x64>)
 800f0aa:	4814      	ldr	r0, [pc, #80]	; (800f0fc <tcp_listen_closed+0x68>)
 800f0ac:	f00b fe4e 	bl	801ad4c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	7d1b      	ldrb	r3, [r3, #20]
 800f0b4:	2b01      	cmp	r3, #1
 800f0b6:	d006      	beq.n	800f0c6 <tcp_listen_closed+0x32>
 800f0b8:	4b0e      	ldr	r3, [pc, #56]	; (800f0f4 <tcp_listen_closed+0x60>)
 800f0ba:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f0be:	4910      	ldr	r1, [pc, #64]	; (800f100 <tcp_listen_closed+0x6c>)
 800f0c0:	480e      	ldr	r0, [pc, #56]	; (800f0fc <tcp_listen_closed+0x68>)
 800f0c2:	f00b fe43 	bl	801ad4c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f0c6:	2301      	movs	r3, #1
 800f0c8:	60fb      	str	r3, [r7, #12]
 800f0ca:	e00b      	b.n	800f0e4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f0cc:	4a0d      	ldr	r2, [pc, #52]	; (800f104 <tcp_listen_closed+0x70>)
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	6879      	ldr	r1, [r7, #4]
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f7ff ffb1 	bl	800f040 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	3301      	adds	r3, #1
 800f0e2:	60fb      	str	r3, [r7, #12]
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	2b03      	cmp	r3, #3
 800f0e8:	d9f0      	bls.n	800f0cc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f0ea:	bf00      	nop
 800f0ec:	bf00      	nop
 800f0ee:	3710      	adds	r7, #16
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bd80      	pop	{r7, pc}
 800f0f4:	0801d36c 	.word	0x0801d36c
 800f0f8:	0801d41c 	.word	0x0801d41c
 800f0fc:	0801d3b0 	.word	0x0801d3b0
 800f100:	0801d428 	.word	0x0801d428
 800f104:	0801f5bc 	.word	0x0801f5bc

0800f108 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f108:	b5b0      	push	{r4, r5, r7, lr}
 800f10a:	b088      	sub	sp, #32
 800f10c:	af04      	add	r7, sp, #16
 800f10e:	6078      	str	r0, [r7, #4]
 800f110:	460b      	mov	r3, r1
 800f112:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d106      	bne.n	800f128 <tcp_close_shutdown+0x20>
 800f11a:	4b63      	ldr	r3, [pc, #396]	; (800f2a8 <tcp_close_shutdown+0x1a0>)
 800f11c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f120:	4962      	ldr	r1, [pc, #392]	; (800f2ac <tcp_close_shutdown+0x1a4>)
 800f122:	4863      	ldr	r0, [pc, #396]	; (800f2b0 <tcp_close_shutdown+0x1a8>)
 800f124:	f00b fe12 	bl	801ad4c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f128:	78fb      	ldrb	r3, [r7, #3]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d066      	beq.n	800f1fc <tcp_close_shutdown+0xf4>
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	7d1b      	ldrb	r3, [r3, #20]
 800f132:	2b04      	cmp	r3, #4
 800f134:	d003      	beq.n	800f13e <tcp_close_shutdown+0x36>
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	7d1b      	ldrb	r3, [r3, #20]
 800f13a:	2b07      	cmp	r3, #7
 800f13c:	d15e      	bne.n	800f1fc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f142:	2b00      	cmp	r3, #0
 800f144:	d104      	bne.n	800f150 <tcp_close_shutdown+0x48>
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f14a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f14e:	d055      	beq.n	800f1fc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	8b5b      	ldrh	r3, [r3, #26]
 800f154:	f003 0310 	and.w	r3, r3, #16
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d106      	bne.n	800f16a <tcp_close_shutdown+0x62>
 800f15c:	4b52      	ldr	r3, [pc, #328]	; (800f2a8 <tcp_close_shutdown+0x1a0>)
 800f15e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800f162:	4954      	ldr	r1, [pc, #336]	; (800f2b4 <tcp_close_shutdown+0x1ac>)
 800f164:	4852      	ldr	r0, [pc, #328]	; (800f2b0 <tcp_close_shutdown+0x1a8>)
 800f166:	f00b fdf1 	bl	801ad4c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f172:	687d      	ldr	r5, [r7, #4]
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	3304      	adds	r3, #4
 800f178:	687a      	ldr	r2, [r7, #4]
 800f17a:	8ad2      	ldrh	r2, [r2, #22]
 800f17c:	6879      	ldr	r1, [r7, #4]
 800f17e:	8b09      	ldrh	r1, [r1, #24]
 800f180:	9102      	str	r1, [sp, #8]
 800f182:	9201      	str	r2, [sp, #4]
 800f184:	9300      	str	r3, [sp, #0]
 800f186:	462b      	mov	r3, r5
 800f188:	4622      	mov	r2, r4
 800f18a:	4601      	mov	r1, r0
 800f18c:	6878      	ldr	r0, [r7, #4]
 800f18e:	f005 fdd1 	bl	8014d34 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f001 fbb2 	bl	80108fc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f198:	4b47      	ldr	r3, [pc, #284]	; (800f2b8 <tcp_close_shutdown+0x1b0>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	687a      	ldr	r2, [r7, #4]
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d105      	bne.n	800f1ae <tcp_close_shutdown+0xa6>
 800f1a2:	4b45      	ldr	r3, [pc, #276]	; (800f2b8 <tcp_close_shutdown+0x1b0>)
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	68db      	ldr	r3, [r3, #12]
 800f1a8:	4a43      	ldr	r2, [pc, #268]	; (800f2b8 <tcp_close_shutdown+0x1b0>)
 800f1aa:	6013      	str	r3, [r2, #0]
 800f1ac:	e013      	b.n	800f1d6 <tcp_close_shutdown+0xce>
 800f1ae:	4b42      	ldr	r3, [pc, #264]	; (800f2b8 <tcp_close_shutdown+0x1b0>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	60fb      	str	r3, [r7, #12]
 800f1b4:	e00c      	b.n	800f1d0 <tcp_close_shutdown+0xc8>
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	68db      	ldr	r3, [r3, #12]
 800f1ba:	687a      	ldr	r2, [r7, #4]
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	d104      	bne.n	800f1ca <tcp_close_shutdown+0xc2>
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	68da      	ldr	r2, [r3, #12]
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	60da      	str	r2, [r3, #12]
 800f1c8:	e005      	b.n	800f1d6 <tcp_close_shutdown+0xce>
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	68db      	ldr	r3, [r3, #12]
 800f1ce:	60fb      	str	r3, [r7, #12]
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d1ef      	bne.n	800f1b6 <tcp_close_shutdown+0xae>
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	2200      	movs	r2, #0
 800f1da:	60da      	str	r2, [r3, #12]
 800f1dc:	4b37      	ldr	r3, [pc, #220]	; (800f2bc <tcp_close_shutdown+0x1b4>)
 800f1de:	2201      	movs	r2, #1
 800f1e0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f1e2:	4b37      	ldr	r3, [pc, #220]	; (800f2c0 <tcp_close_shutdown+0x1b8>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	687a      	ldr	r2, [r7, #4]
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	d102      	bne.n	800f1f2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f1ec:	f004 f846 	bl	801327c <tcp_trigger_input_pcb_close>
 800f1f0:	e002      	b.n	800f1f8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f7ff fed6 	bl	800efa4 <tcp_free>
      }
      return ERR_OK;
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	e050      	b.n	800f29e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	7d1b      	ldrb	r3, [r3, #20]
 800f200:	2b02      	cmp	r3, #2
 800f202:	d03b      	beq.n	800f27c <tcp_close_shutdown+0x174>
 800f204:	2b02      	cmp	r3, #2
 800f206:	dc44      	bgt.n	800f292 <tcp_close_shutdown+0x18a>
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d002      	beq.n	800f212 <tcp_close_shutdown+0x10a>
 800f20c:	2b01      	cmp	r3, #1
 800f20e:	d02a      	beq.n	800f266 <tcp_close_shutdown+0x15e>
 800f210:	e03f      	b.n	800f292 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	8adb      	ldrh	r3, [r3, #22]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d021      	beq.n	800f25e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f21a:	4b2a      	ldr	r3, [pc, #168]	; (800f2c4 <tcp_close_shutdown+0x1bc>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	687a      	ldr	r2, [r7, #4]
 800f220:	429a      	cmp	r2, r3
 800f222:	d105      	bne.n	800f230 <tcp_close_shutdown+0x128>
 800f224:	4b27      	ldr	r3, [pc, #156]	; (800f2c4 <tcp_close_shutdown+0x1bc>)
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	68db      	ldr	r3, [r3, #12]
 800f22a:	4a26      	ldr	r2, [pc, #152]	; (800f2c4 <tcp_close_shutdown+0x1bc>)
 800f22c:	6013      	str	r3, [r2, #0]
 800f22e:	e013      	b.n	800f258 <tcp_close_shutdown+0x150>
 800f230:	4b24      	ldr	r3, [pc, #144]	; (800f2c4 <tcp_close_shutdown+0x1bc>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	60bb      	str	r3, [r7, #8]
 800f236:	e00c      	b.n	800f252 <tcp_close_shutdown+0x14a>
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	68db      	ldr	r3, [r3, #12]
 800f23c:	687a      	ldr	r2, [r7, #4]
 800f23e:	429a      	cmp	r2, r3
 800f240:	d104      	bne.n	800f24c <tcp_close_shutdown+0x144>
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	68da      	ldr	r2, [r3, #12]
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	60da      	str	r2, [r3, #12]
 800f24a:	e005      	b.n	800f258 <tcp_close_shutdown+0x150>
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	68db      	ldr	r3, [r3, #12]
 800f250:	60bb      	str	r3, [r7, #8]
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d1ef      	bne.n	800f238 <tcp_close_shutdown+0x130>
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2200      	movs	r2, #0
 800f25c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	f7ff fea0 	bl	800efa4 <tcp_free>
      break;
 800f264:	e01a      	b.n	800f29c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f7ff ff14 	bl	800f094 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f26c:	6879      	ldr	r1, [r7, #4]
 800f26e:	4816      	ldr	r0, [pc, #88]	; (800f2c8 <tcp_close_shutdown+0x1c0>)
 800f270:	f001 fb94 	bl	801099c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f7ff feb1 	bl	800efdc <tcp_free_listen>
      break;
 800f27a:	e00f      	b.n	800f29c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f27c:	6879      	ldr	r1, [r7, #4]
 800f27e:	480e      	ldr	r0, [pc, #56]	; (800f2b8 <tcp_close_shutdown+0x1b0>)
 800f280:	f001 fb8c 	bl	801099c <tcp_pcb_remove>
 800f284:	4b0d      	ldr	r3, [pc, #52]	; (800f2bc <tcp_close_shutdown+0x1b4>)
 800f286:	2201      	movs	r2, #1
 800f288:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f7ff fe8a 	bl	800efa4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f290:	e004      	b.n	800f29c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f000 f81a 	bl	800f2cc <tcp_close_shutdown_fin>
 800f298:	4603      	mov	r3, r0
 800f29a:	e000      	b.n	800f29e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800f29c:	2300      	movs	r3, #0
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3710      	adds	r7, #16
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bdb0      	pop	{r4, r5, r7, pc}
 800f2a6:	bf00      	nop
 800f2a8:	0801d36c 	.word	0x0801d36c
 800f2ac:	0801d440 	.word	0x0801d440
 800f2b0:	0801d3b0 	.word	0x0801d3b0
 800f2b4:	0801d460 	.word	0x0801d460
 800f2b8:	200120a0 	.word	0x200120a0
 800f2bc:	2001209c 	.word	0x2001209c
 800f2c0:	200120b4 	.word	0x200120b4
 800f2c4:	200120ac 	.word	0x200120ac
 800f2c8:	200120a8 	.word	0x200120a8

0800f2cc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b084      	sub	sp, #16
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d106      	bne.n	800f2e8 <tcp_close_shutdown_fin+0x1c>
 800f2da:	4b2e      	ldr	r3, [pc, #184]	; (800f394 <tcp_close_shutdown_fin+0xc8>)
 800f2dc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f2e0:	492d      	ldr	r1, [pc, #180]	; (800f398 <tcp_close_shutdown_fin+0xcc>)
 800f2e2:	482e      	ldr	r0, [pc, #184]	; (800f39c <tcp_close_shutdown_fin+0xd0>)
 800f2e4:	f00b fd32 	bl	801ad4c <iprintf>

  switch (pcb->state) {
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	7d1b      	ldrb	r3, [r3, #20]
 800f2ec:	2b07      	cmp	r3, #7
 800f2ee:	d020      	beq.n	800f332 <tcp_close_shutdown_fin+0x66>
 800f2f0:	2b07      	cmp	r3, #7
 800f2f2:	dc2b      	bgt.n	800f34c <tcp_close_shutdown_fin+0x80>
 800f2f4:	2b03      	cmp	r3, #3
 800f2f6:	d002      	beq.n	800f2fe <tcp_close_shutdown_fin+0x32>
 800f2f8:	2b04      	cmp	r3, #4
 800f2fa:	d00d      	beq.n	800f318 <tcp_close_shutdown_fin+0x4c>
 800f2fc:	e026      	b.n	800f34c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	f004 fe26 	bl	8013f50 <tcp_send_fin>
 800f304:	4603      	mov	r3, r0
 800f306:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d11f      	bne.n	800f350 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2205      	movs	r2, #5
 800f314:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f316:	e01b      	b.n	800f350 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f004 fe19 	bl	8013f50 <tcp_send_fin>
 800f31e:	4603      	mov	r3, r0
 800f320:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d114      	bne.n	800f354 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2205      	movs	r2, #5
 800f32e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f330:	e010      	b.n	800f354 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f004 fe0c 	bl	8013f50 <tcp_send_fin>
 800f338:	4603      	mov	r3, r0
 800f33a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f33c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d109      	bne.n	800f358 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2209      	movs	r2, #9
 800f348:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f34a:	e005      	b.n	800f358 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f34c:	2300      	movs	r3, #0
 800f34e:	e01c      	b.n	800f38a <tcp_close_shutdown_fin+0xbe>
      break;
 800f350:	bf00      	nop
 800f352:	e002      	b.n	800f35a <tcp_close_shutdown_fin+0x8e>
      break;
 800f354:	bf00      	nop
 800f356:	e000      	b.n	800f35a <tcp_close_shutdown_fin+0x8e>
      break;
 800f358:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f35a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d103      	bne.n	800f36a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f004 ff32 	bl	80141cc <tcp_output>
 800f368:	e00d      	b.n	800f386 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f36a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f36e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f372:	d108      	bne.n	800f386 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	8b5b      	ldrh	r3, [r3, #26]
 800f378:	f043 0308 	orr.w	r3, r3, #8
 800f37c:	b29a      	uxth	r2, r3
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f382:	2300      	movs	r3, #0
 800f384:	e001      	b.n	800f38a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f386:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f38a:	4618      	mov	r0, r3
 800f38c:	3710      	adds	r7, #16
 800f38e:	46bd      	mov	sp, r7
 800f390:	bd80      	pop	{r7, pc}
 800f392:	bf00      	nop
 800f394:	0801d36c 	.word	0x0801d36c
 800f398:	0801d41c 	.word	0x0801d41c
 800f39c:	0801d3b0 	.word	0x0801d3b0

0800f3a0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b082      	sub	sp, #8
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d109      	bne.n	800f3c2 <tcp_close+0x22>
 800f3ae:	4b0f      	ldr	r3, [pc, #60]	; (800f3ec <tcp_close+0x4c>)
 800f3b0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f3b4:	490e      	ldr	r1, [pc, #56]	; (800f3f0 <tcp_close+0x50>)
 800f3b6:	480f      	ldr	r0, [pc, #60]	; (800f3f4 <tcp_close+0x54>)
 800f3b8:	f00b fcc8 	bl	801ad4c <iprintf>
 800f3bc:	f06f 030f 	mvn.w	r3, #15
 800f3c0:	e00f      	b.n	800f3e2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	7d1b      	ldrb	r3, [r3, #20]
 800f3c6:	2b01      	cmp	r3, #1
 800f3c8:	d006      	beq.n	800f3d8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	8b5b      	ldrh	r3, [r3, #26]
 800f3ce:	f043 0310 	orr.w	r3, r3, #16
 800f3d2:	b29a      	uxth	r2, r3
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f3d8:	2101      	movs	r1, #1
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f7ff fe94 	bl	800f108 <tcp_close_shutdown>
 800f3e0:	4603      	mov	r3, r0
}
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	3708      	adds	r7, #8
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}
 800f3ea:	bf00      	nop
 800f3ec:	0801d36c 	.word	0x0801d36c
 800f3f0:	0801d47c 	.word	0x0801d47c
 800f3f4:	0801d3b0 	.word	0x0801d3b0

0800f3f8 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b084      	sub	sp, #16
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	60f8      	str	r0, [r7, #12]
 800f400:	60b9      	str	r1, [r7, #8]
 800f402:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d109      	bne.n	800f41e <tcp_shutdown+0x26>
 800f40a:	4b26      	ldr	r3, [pc, #152]	; (800f4a4 <tcp_shutdown+0xac>)
 800f40c:	f240 2207 	movw	r2, #519	; 0x207
 800f410:	4925      	ldr	r1, [pc, #148]	; (800f4a8 <tcp_shutdown+0xb0>)
 800f412:	4826      	ldr	r0, [pc, #152]	; (800f4ac <tcp_shutdown+0xb4>)
 800f414:	f00b fc9a 	bl	801ad4c <iprintf>
 800f418:	f06f 030f 	mvn.w	r3, #15
 800f41c:	e03d      	b.n	800f49a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	7d1b      	ldrb	r3, [r3, #20]
 800f422:	2b01      	cmp	r3, #1
 800f424:	d102      	bne.n	800f42c <tcp_shutdown+0x34>
    return ERR_CONN;
 800f426:	f06f 030a 	mvn.w	r3, #10
 800f42a:	e036      	b.n	800f49a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d01b      	beq.n	800f46a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	8b5b      	ldrh	r3, [r3, #26]
 800f436:	f043 0310 	orr.w	r3, r3, #16
 800f43a:	b29a      	uxth	r2, r3
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d005      	beq.n	800f452 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800f446:	2101      	movs	r1, #1
 800f448:	68f8      	ldr	r0, [r7, #12]
 800f44a:	f7ff fe5d 	bl	800f108 <tcp_close_shutdown>
 800f44e:	4603      	mov	r3, r0
 800f450:	e023      	b.n	800f49a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f456:	2b00      	cmp	r3, #0
 800f458:	d007      	beq.n	800f46a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f45e:	4618      	mov	r0, r3
 800f460:	f7ff fae4 	bl	800ea2c <pbuf_free>
      pcb->refused_data = NULL;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	2200      	movs	r2, #0
 800f468:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d013      	beq.n	800f498 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	7d1b      	ldrb	r3, [r3, #20]
 800f474:	2b04      	cmp	r3, #4
 800f476:	dc02      	bgt.n	800f47e <tcp_shutdown+0x86>
 800f478:	2b03      	cmp	r3, #3
 800f47a:	da02      	bge.n	800f482 <tcp_shutdown+0x8a>
 800f47c:	e009      	b.n	800f492 <tcp_shutdown+0x9a>
 800f47e:	2b07      	cmp	r3, #7
 800f480:	d107      	bne.n	800f492 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	b2db      	uxtb	r3, r3
 800f486:	4619      	mov	r1, r3
 800f488:	68f8      	ldr	r0, [r7, #12]
 800f48a:	f7ff fe3d 	bl	800f108 <tcp_close_shutdown>
 800f48e:	4603      	mov	r3, r0
 800f490:	e003      	b.n	800f49a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800f492:	f06f 030a 	mvn.w	r3, #10
 800f496:	e000      	b.n	800f49a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800f498:	2300      	movs	r3, #0
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	3710      	adds	r7, #16
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}
 800f4a2:	bf00      	nop
 800f4a4:	0801d36c 	.word	0x0801d36c
 800f4a8:	0801d494 	.word	0x0801d494
 800f4ac:	0801d3b0 	.word	0x0801d3b0

0800f4b0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b08e      	sub	sp, #56	; 0x38
 800f4b4:	af04      	add	r7, sp, #16
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d107      	bne.n	800f4d0 <tcp_abandon+0x20>
 800f4c0:	4b52      	ldr	r3, [pc, #328]	; (800f60c <tcp_abandon+0x15c>)
 800f4c2:	f240 223d 	movw	r2, #573	; 0x23d
 800f4c6:	4952      	ldr	r1, [pc, #328]	; (800f610 <tcp_abandon+0x160>)
 800f4c8:	4852      	ldr	r0, [pc, #328]	; (800f614 <tcp_abandon+0x164>)
 800f4ca:	f00b fc3f 	bl	801ad4c <iprintf>
 800f4ce:	e099      	b.n	800f604 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	7d1b      	ldrb	r3, [r3, #20]
 800f4d4:	2b01      	cmp	r3, #1
 800f4d6:	d106      	bne.n	800f4e6 <tcp_abandon+0x36>
 800f4d8:	4b4c      	ldr	r3, [pc, #304]	; (800f60c <tcp_abandon+0x15c>)
 800f4da:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f4de:	494e      	ldr	r1, [pc, #312]	; (800f618 <tcp_abandon+0x168>)
 800f4e0:	484c      	ldr	r0, [pc, #304]	; (800f614 <tcp_abandon+0x164>)
 800f4e2:	f00b fc33 	bl	801ad4c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	7d1b      	ldrb	r3, [r3, #20]
 800f4ea:	2b0a      	cmp	r3, #10
 800f4ec:	d107      	bne.n	800f4fe <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f4ee:	6879      	ldr	r1, [r7, #4]
 800f4f0:	484a      	ldr	r0, [pc, #296]	; (800f61c <tcp_abandon+0x16c>)
 800f4f2:	f001 fa53 	bl	801099c <tcp_pcb_remove>
    tcp_free(pcb);
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f7ff fd54 	bl	800efa4 <tcp_free>
 800f4fc:	e082      	b.n	800f604 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f4fe:	2300      	movs	r3, #0
 800f500:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f502:	2300      	movs	r3, #0
 800f504:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f50a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f510:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f518:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	691b      	ldr	r3, [r3, #16]
 800f51e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	7d1b      	ldrb	r3, [r3, #20]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d126      	bne.n	800f576 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	8adb      	ldrh	r3, [r3, #22]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d02e      	beq.n	800f58e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f530:	4b3b      	ldr	r3, [pc, #236]	; (800f620 <tcp_abandon+0x170>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	687a      	ldr	r2, [r7, #4]
 800f536:	429a      	cmp	r2, r3
 800f538:	d105      	bne.n	800f546 <tcp_abandon+0x96>
 800f53a:	4b39      	ldr	r3, [pc, #228]	; (800f620 <tcp_abandon+0x170>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	68db      	ldr	r3, [r3, #12]
 800f540:	4a37      	ldr	r2, [pc, #220]	; (800f620 <tcp_abandon+0x170>)
 800f542:	6013      	str	r3, [r2, #0]
 800f544:	e013      	b.n	800f56e <tcp_abandon+0xbe>
 800f546:	4b36      	ldr	r3, [pc, #216]	; (800f620 <tcp_abandon+0x170>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	61fb      	str	r3, [r7, #28]
 800f54c:	e00c      	b.n	800f568 <tcp_abandon+0xb8>
 800f54e:	69fb      	ldr	r3, [r7, #28]
 800f550:	68db      	ldr	r3, [r3, #12]
 800f552:	687a      	ldr	r2, [r7, #4]
 800f554:	429a      	cmp	r2, r3
 800f556:	d104      	bne.n	800f562 <tcp_abandon+0xb2>
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	68da      	ldr	r2, [r3, #12]
 800f55c:	69fb      	ldr	r3, [r7, #28]
 800f55e:	60da      	str	r2, [r3, #12]
 800f560:	e005      	b.n	800f56e <tcp_abandon+0xbe>
 800f562:	69fb      	ldr	r3, [r7, #28]
 800f564:	68db      	ldr	r3, [r3, #12]
 800f566:	61fb      	str	r3, [r7, #28]
 800f568:	69fb      	ldr	r3, [r7, #28]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d1ef      	bne.n	800f54e <tcp_abandon+0x9e>
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2200      	movs	r2, #0
 800f572:	60da      	str	r2, [r3, #12]
 800f574:	e00b      	b.n	800f58e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	8adb      	ldrh	r3, [r3, #22]
 800f57e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f580:	6879      	ldr	r1, [r7, #4]
 800f582:	4828      	ldr	r0, [pc, #160]	; (800f624 <tcp_abandon+0x174>)
 800f584:	f001 fa0a 	bl	801099c <tcp_pcb_remove>
 800f588:	4b27      	ldr	r3, [pc, #156]	; (800f628 <tcp_abandon+0x178>)
 800f58a:	2201      	movs	r2, #1
 800f58c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f592:	2b00      	cmp	r3, #0
 800f594:	d004      	beq.n	800f5a0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f59a:	4618      	mov	r0, r3
 800f59c:	f000 fede 	bl	801035c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d004      	beq.n	800f5b2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f000 fed5 	bl	801035c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d004      	beq.n	800f5c4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f000 fecc 	bl	801035c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d00e      	beq.n	800f5e8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f5ca:	6879      	ldr	r1, [r7, #4]
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	3304      	adds	r3, #4
 800f5d0:	687a      	ldr	r2, [r7, #4]
 800f5d2:	8b12      	ldrh	r2, [r2, #24]
 800f5d4:	9202      	str	r2, [sp, #8]
 800f5d6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f5d8:	9201      	str	r2, [sp, #4]
 800f5da:	9300      	str	r3, [sp, #0]
 800f5dc:	460b      	mov	r3, r1
 800f5de:	697a      	ldr	r2, [r7, #20]
 800f5e0:	69b9      	ldr	r1, [r7, #24]
 800f5e2:	6878      	ldr	r0, [r7, #4]
 800f5e4:	f005 fba6 	bl	8014d34 <tcp_rst>
    }
    last_state = pcb->state;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	7d1b      	ldrb	r3, [r3, #20]
 800f5ec:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	f7ff fcd8 	bl	800efa4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f5f4:	693b      	ldr	r3, [r7, #16]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d004      	beq.n	800f604 <tcp_abandon+0x154>
 800f5fa:	693b      	ldr	r3, [r7, #16]
 800f5fc:	f06f 010c 	mvn.w	r1, #12
 800f600:	68f8      	ldr	r0, [r7, #12]
 800f602:	4798      	blx	r3
  }
}
 800f604:	3728      	adds	r7, #40	; 0x28
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}
 800f60a:	bf00      	nop
 800f60c:	0801d36c 	.word	0x0801d36c
 800f610:	0801d4b0 	.word	0x0801d4b0
 800f614:	0801d3b0 	.word	0x0801d3b0
 800f618:	0801d4cc 	.word	0x0801d4cc
 800f61c:	200120b0 	.word	0x200120b0
 800f620:	200120ac 	.word	0x200120ac
 800f624:	200120a0 	.word	0x200120a0
 800f628:	2001209c 	.word	0x2001209c

0800f62c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b082      	sub	sp, #8
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f634:	2101      	movs	r1, #1
 800f636:	6878      	ldr	r0, [r7, #4]
 800f638:	f7ff ff3a 	bl	800f4b0 <tcp_abandon>
}
 800f63c:	bf00      	nop
 800f63e:	3708      	adds	r7, #8
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}

0800f644 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b088      	sub	sp, #32
 800f648:	af00      	add	r7, sp, #0
 800f64a:	60f8      	str	r0, [r7, #12]
 800f64c:	60b9      	str	r1, [r7, #8]
 800f64e:	4613      	mov	r3, r2
 800f650:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800f652:	2304      	movs	r3, #4
 800f654:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f656:	68bb      	ldr	r3, [r7, #8]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d101      	bne.n	800f660 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800f65c:	4b3e      	ldr	r3, [pc, #248]	; (800f758 <tcp_bind+0x114>)
 800f65e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d109      	bne.n	800f67a <tcp_bind+0x36>
 800f666:	4b3d      	ldr	r3, [pc, #244]	; (800f75c <tcp_bind+0x118>)
 800f668:	f240 22a9 	movw	r2, #681	; 0x2a9
 800f66c:	493c      	ldr	r1, [pc, #240]	; (800f760 <tcp_bind+0x11c>)
 800f66e:	483d      	ldr	r0, [pc, #244]	; (800f764 <tcp_bind+0x120>)
 800f670:	f00b fb6c 	bl	801ad4c <iprintf>
 800f674:	f06f 030f 	mvn.w	r3, #15
 800f678:	e06a      	b.n	800f750 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	7d1b      	ldrb	r3, [r3, #20]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d009      	beq.n	800f696 <tcp_bind+0x52>
 800f682:	4b36      	ldr	r3, [pc, #216]	; (800f75c <tcp_bind+0x118>)
 800f684:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f688:	4937      	ldr	r1, [pc, #220]	; (800f768 <tcp_bind+0x124>)
 800f68a:	4836      	ldr	r0, [pc, #216]	; (800f764 <tcp_bind+0x120>)
 800f68c:	f00b fb5e 	bl	801ad4c <iprintf>
 800f690:	f06f 0305 	mvn.w	r3, #5
 800f694:	e05c      	b.n	800f750 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800f696:	88fb      	ldrh	r3, [r7, #6]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d109      	bne.n	800f6b0 <tcp_bind+0x6c>
    port = tcp_new_port();
 800f69c:	f000 f9f8 	bl	800fa90 <tcp_new_port>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f6a4:	88fb      	ldrh	r3, [r7, #6]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d135      	bne.n	800f716 <tcp_bind+0xd2>
      return ERR_BUF;
 800f6aa:	f06f 0301 	mvn.w	r3, #1
 800f6ae:	e04f      	b.n	800f750 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	61fb      	str	r3, [r7, #28]
 800f6b4:	e02b      	b.n	800f70e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f6b6:	4a2d      	ldr	r2, [pc, #180]	; (800f76c <tcp_bind+0x128>)
 800f6b8:	69fb      	ldr	r3, [r7, #28]
 800f6ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	61bb      	str	r3, [r7, #24]
 800f6c2:	e01e      	b.n	800f702 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800f6c4:	69bb      	ldr	r3, [r7, #24]
 800f6c6:	8adb      	ldrh	r3, [r3, #22]
 800f6c8:	88fa      	ldrh	r2, [r7, #6]
 800f6ca:	429a      	cmp	r2, r3
 800f6cc:	d116      	bne.n	800f6fc <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800f6ce:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d010      	beq.n	800f6f6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800f6d4:	69bb      	ldr	r3, [r7, #24]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d00c      	beq.n	800f6f6 <tcp_bind+0xb2>
 800f6dc:	68bb      	ldr	r3, [r7, #8]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d009      	beq.n	800f6f6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d005      	beq.n	800f6f6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800f6ea:	69bb      	ldr	r3, [r7, #24]
 800f6ec:	681a      	ldr	r2, [r3, #0]
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	d102      	bne.n	800f6fc <tcp_bind+0xb8>
              return ERR_USE;
 800f6f6:	f06f 0307 	mvn.w	r3, #7
 800f6fa:	e029      	b.n	800f750 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f6fc:	69bb      	ldr	r3, [r7, #24]
 800f6fe:	68db      	ldr	r3, [r3, #12]
 800f700:	61bb      	str	r3, [r7, #24]
 800f702:	69bb      	ldr	r3, [r7, #24]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d1dd      	bne.n	800f6c4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800f708:	69fb      	ldr	r3, [r7, #28]
 800f70a:	3301      	adds	r3, #1
 800f70c:	61fb      	str	r3, [r7, #28]
 800f70e:	69fa      	ldr	r2, [r7, #28]
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	429a      	cmp	r2, r3
 800f714:	dbcf      	blt.n	800f6b6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800f716:	68bb      	ldr	r3, [r7, #8]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d00c      	beq.n	800f736 <tcp_bind+0xf2>
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d008      	beq.n	800f736 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d002      	beq.n	800f730 <tcp_bind+0xec>
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	e000      	b.n	800f732 <tcp_bind+0xee>
 800f730:	2300      	movs	r3, #0
 800f732:	68fa      	ldr	r2, [r7, #12]
 800f734:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	88fa      	ldrh	r2, [r7, #6]
 800f73a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f73c:	4b0c      	ldr	r3, [pc, #48]	; (800f770 <tcp_bind+0x12c>)
 800f73e:	681a      	ldr	r2, [r3, #0]
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	60da      	str	r2, [r3, #12]
 800f744:	4a0a      	ldr	r2, [pc, #40]	; (800f770 <tcp_bind+0x12c>)
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	6013      	str	r3, [r2, #0]
 800f74a:	f005 fcb5 	bl	80150b8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f74e:	2300      	movs	r3, #0
}
 800f750:	4618      	mov	r0, r3
 800f752:	3720      	adds	r7, #32
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}
 800f758:	0801f5e4 	.word	0x0801f5e4
 800f75c:	0801d36c 	.word	0x0801d36c
 800f760:	0801d500 	.word	0x0801d500
 800f764:	0801d3b0 	.word	0x0801d3b0
 800f768:	0801d518 	.word	0x0801d518
 800f76c:	0801f5bc 	.word	0x0801f5bc
 800f770:	200120ac 	.word	0x200120ac

0800f774 <tcp_bind_netif>:
 * @param pcb the tcp_pcb to bind.
 * @param netif the netif to bind to. Can be NULL.
 */
void
tcp_bind_netif(struct tcp_pcb *pcb, const struct netif *netif)
{
 800f774:	b480      	push	{r7}
 800f776:	b083      	sub	sp, #12
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
 800f77c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (netif != NULL) {
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d007      	beq.n	800f794 <tcp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f78a:	3301      	adds	r3, #1
 800f78c:	b2da      	uxtb	r2, r3
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 800f792:	e002      	b.n	800f79a <tcp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2200      	movs	r2, #0
 800f798:	721a      	strb	r2, [r3, #8]
}
 800f79a:	bf00      	nop
 800f79c:	370c      	adds	r7, #12
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a4:	4770      	bx	lr
	...

0800f7a8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b084      	sub	sp, #16
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	60f8      	str	r0, [r7, #12]
 800f7b0:	60b9      	str	r1, [r7, #8]
 800f7b2:	4613      	mov	r3, r2
 800f7b4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800f7b6:	68bb      	ldr	r3, [r7, #8]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d106      	bne.n	800f7ca <tcp_accept_null+0x22>
 800f7bc:	4b07      	ldr	r3, [pc, #28]	; (800f7dc <tcp_accept_null+0x34>)
 800f7be:	f240 320f 	movw	r2, #783	; 0x30f
 800f7c2:	4907      	ldr	r1, [pc, #28]	; (800f7e0 <tcp_accept_null+0x38>)
 800f7c4:	4807      	ldr	r0, [pc, #28]	; (800f7e4 <tcp_accept_null+0x3c>)
 800f7c6:	f00b fac1 	bl	801ad4c <iprintf>

  tcp_abort(pcb);
 800f7ca:	68b8      	ldr	r0, [r7, #8]
 800f7cc:	f7ff ff2e 	bl	800f62c <tcp_abort>

  return ERR_ABRT;
 800f7d0:	f06f 030c 	mvn.w	r3, #12
}
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	3710      	adds	r7, #16
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}
 800f7dc:	0801d36c 	.word	0x0801d36c
 800f7e0:	0801d540 	.word	0x0801d540
 800f7e4:	0801d3b0 	.word	0x0801d3b0

0800f7e8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b088      	sub	sp, #32
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	60f8      	str	r0, [r7, #12]
 800f7f0:	460b      	mov	r3, r1
 800f7f2:	607a      	str	r2, [r7, #4]
 800f7f4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d109      	bne.n	800f814 <tcp_listen_with_backlog_and_err+0x2c>
 800f800:	4b47      	ldr	r3, [pc, #284]	; (800f920 <tcp_listen_with_backlog_and_err+0x138>)
 800f802:	f240 3259 	movw	r2, #857	; 0x359
 800f806:	4947      	ldr	r1, [pc, #284]	; (800f924 <tcp_listen_with_backlog_and_err+0x13c>)
 800f808:	4847      	ldr	r0, [pc, #284]	; (800f928 <tcp_listen_with_backlog_and_err+0x140>)
 800f80a:	f00b fa9f 	bl	801ad4c <iprintf>
 800f80e:	23f0      	movs	r3, #240	; 0xf0
 800f810:	76fb      	strb	r3, [r7, #27]
 800f812:	e079      	b.n	800f908 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	7d1b      	ldrb	r3, [r3, #20]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d009      	beq.n	800f830 <tcp_listen_with_backlog_and_err+0x48>
 800f81c:	4b40      	ldr	r3, [pc, #256]	; (800f920 <tcp_listen_with_backlog_and_err+0x138>)
 800f81e:	f240 325a 	movw	r2, #858	; 0x35a
 800f822:	4942      	ldr	r1, [pc, #264]	; (800f92c <tcp_listen_with_backlog_and_err+0x144>)
 800f824:	4840      	ldr	r0, [pc, #256]	; (800f928 <tcp_listen_with_backlog_and_err+0x140>)
 800f826:	f00b fa91 	bl	801ad4c <iprintf>
 800f82a:	23f1      	movs	r3, #241	; 0xf1
 800f82c:	76fb      	strb	r3, [r7, #27]
 800f82e:	e06b      	b.n	800f908 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	7d1b      	ldrb	r3, [r3, #20]
 800f834:	2b01      	cmp	r3, #1
 800f836:	d104      	bne.n	800f842 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800f83c:	23f7      	movs	r3, #247	; 0xf7
 800f83e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f840:	e062      	b.n	800f908 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800f842:	2002      	movs	r0, #2
 800f844:	f7fe f992 	bl	800db6c <memp_malloc>
 800f848:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800f84a:	69fb      	ldr	r3, [r7, #28]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d102      	bne.n	800f856 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800f850:	23ff      	movs	r3, #255	; 0xff
 800f852:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f854:	e058      	b.n	800f908 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	691a      	ldr	r2, [r3, #16]
 800f85a:	69fb      	ldr	r3, [r7, #28]
 800f85c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	8ada      	ldrh	r2, [r3, #22]
 800f862:	69fb      	ldr	r3, [r7, #28]
 800f864:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800f866:	69fb      	ldr	r3, [r7, #28]
 800f868:	2201      	movs	r2, #1
 800f86a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	7d5a      	ldrb	r2, [r3, #21]
 800f870:	69fb      	ldr	r3, [r7, #28]
 800f872:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	7a5a      	ldrb	r2, [r3, #9]
 800f878:	69fb      	ldr	r3, [r7, #28]
 800f87a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800f87c:	69fb      	ldr	r3, [r7, #28]
 800f87e:	2200      	movs	r2, #0
 800f880:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	7ada      	ldrb	r2, [r3, #11]
 800f886:	69fb      	ldr	r3, [r7, #28]
 800f888:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	7a9a      	ldrb	r2, [r3, #10]
 800f88e:	69fb      	ldr	r3, [r7, #28]
 800f890:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	681a      	ldr	r2, [r3, #0]
 800f896:	69fb      	ldr	r3, [r7, #28]
 800f898:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	8adb      	ldrh	r3, [r3, #22]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d021      	beq.n	800f8e6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800f8a2:	4b23      	ldr	r3, [pc, #140]	; (800f930 <tcp_listen_with_backlog_and_err+0x148>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	68fa      	ldr	r2, [r7, #12]
 800f8a8:	429a      	cmp	r2, r3
 800f8aa:	d105      	bne.n	800f8b8 <tcp_listen_with_backlog_and_err+0xd0>
 800f8ac:	4b20      	ldr	r3, [pc, #128]	; (800f930 <tcp_listen_with_backlog_and_err+0x148>)
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	68db      	ldr	r3, [r3, #12]
 800f8b2:	4a1f      	ldr	r2, [pc, #124]	; (800f930 <tcp_listen_with_backlog_and_err+0x148>)
 800f8b4:	6013      	str	r3, [r2, #0]
 800f8b6:	e013      	b.n	800f8e0 <tcp_listen_with_backlog_and_err+0xf8>
 800f8b8:	4b1d      	ldr	r3, [pc, #116]	; (800f930 <tcp_listen_with_backlog_and_err+0x148>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	617b      	str	r3, [r7, #20]
 800f8be:	e00c      	b.n	800f8da <tcp_listen_with_backlog_and_err+0xf2>
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	68db      	ldr	r3, [r3, #12]
 800f8c4:	68fa      	ldr	r2, [r7, #12]
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	d104      	bne.n	800f8d4 <tcp_listen_with_backlog_and_err+0xec>
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	68da      	ldr	r2, [r3, #12]
 800f8ce:	697b      	ldr	r3, [r7, #20]
 800f8d0:	60da      	str	r2, [r3, #12]
 800f8d2:	e005      	b.n	800f8e0 <tcp_listen_with_backlog_and_err+0xf8>
 800f8d4:	697b      	ldr	r3, [r7, #20]
 800f8d6:	68db      	ldr	r3, [r3, #12]
 800f8d8:	617b      	str	r3, [r7, #20]
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d1ef      	bne.n	800f8c0 <tcp_listen_with_backlog_and_err+0xd8>
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800f8e6:	68f8      	ldr	r0, [r7, #12]
 800f8e8:	f7ff fb5c 	bl	800efa4 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800f8ec:	69fb      	ldr	r3, [r7, #28]
 800f8ee:	4a11      	ldr	r2, [pc, #68]	; (800f934 <tcp_listen_with_backlog_and_err+0x14c>)
 800f8f0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800f8f2:	4b11      	ldr	r3, [pc, #68]	; (800f938 <tcp_listen_with_backlog_and_err+0x150>)
 800f8f4:	681a      	ldr	r2, [r3, #0]
 800f8f6:	69fb      	ldr	r3, [r7, #28]
 800f8f8:	60da      	str	r2, [r3, #12]
 800f8fa:	4a0f      	ldr	r2, [pc, #60]	; (800f938 <tcp_listen_with_backlog_and_err+0x150>)
 800f8fc:	69fb      	ldr	r3, [r7, #28]
 800f8fe:	6013      	str	r3, [r2, #0]
 800f900:	f005 fbda 	bl	80150b8 <tcp_timer_needed>
  res = ERR_OK;
 800f904:	2300      	movs	r3, #0
 800f906:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d002      	beq.n	800f914 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	7efa      	ldrb	r2, [r7, #27]
 800f912:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800f914:	69fb      	ldr	r3, [r7, #28]
}
 800f916:	4618      	mov	r0, r3
 800f918:	3720      	adds	r7, #32
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}
 800f91e:	bf00      	nop
 800f920:	0801d36c 	.word	0x0801d36c
 800f924:	0801d560 	.word	0x0801d560
 800f928:	0801d3b0 	.word	0x0801d3b0
 800f92c:	0801d590 	.word	0x0801d590
 800f930:	200120ac 	.word	0x200120ac
 800f934:	0800f7a9 	.word	0x0800f7a9
 800f938:	200120a8 	.word	0x200120a8

0800f93c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b084      	sub	sp, #16
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d106      	bne.n	800f958 <tcp_update_rcv_ann_wnd+0x1c>
 800f94a:	4b25      	ldr	r3, [pc, #148]	; (800f9e0 <tcp_update_rcv_ann_wnd+0xa4>)
 800f94c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f950:	4924      	ldr	r1, [pc, #144]	; (800f9e4 <tcp_update_rcv_ann_wnd+0xa8>)
 800f952:	4825      	ldr	r0, [pc, #148]	; (800f9e8 <tcp_update_rcv_ann_wnd+0xac>)
 800f954:	f00b f9fa 	bl	801ad4c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f95c:	687a      	ldr	r2, [r7, #4]
 800f95e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f960:	4413      	add	r3, r2
 800f962:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f968:	687a      	ldr	r2, [r7, #4]
 800f96a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f96c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f970:	bf28      	it	cs
 800f972:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f976:	b292      	uxth	r2, r2
 800f978:	4413      	add	r3, r2
 800f97a:	68fa      	ldr	r2, [r7, #12]
 800f97c:	1ad3      	subs	r3, r2, r3
 800f97e:	2b00      	cmp	r3, #0
 800f980:	db08      	blt.n	800f994 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f98e:	68fa      	ldr	r2, [r7, #12]
 800f990:	1ad3      	subs	r3, r2, r3
 800f992:	e020      	b.n	800f9d6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f99c:	1ad3      	subs	r3, r2, r3
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	dd03      	ble.n	800f9aa <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f9a8:	e014      	b.n	800f9d4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9b2:	1ad3      	subs	r3, r2, r3
 800f9b4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f9bc:	d306      	bcc.n	800f9cc <tcp_update_rcv_ann_wnd+0x90>
 800f9be:	4b08      	ldr	r3, [pc, #32]	; (800f9e0 <tcp_update_rcv_ann_wnd+0xa4>)
 800f9c0:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f9c4:	4909      	ldr	r1, [pc, #36]	; (800f9ec <tcp_update_rcv_ann_wnd+0xb0>)
 800f9c6:	4808      	ldr	r0, [pc, #32]	; (800f9e8 <tcp_update_rcv_ann_wnd+0xac>)
 800f9c8:	f00b f9c0 	bl	801ad4c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	b29a      	uxth	r2, r3
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f9d4:	2300      	movs	r3, #0
  }
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3710      	adds	r7, #16
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}
 800f9de:	bf00      	nop
 800f9e0:	0801d36c 	.word	0x0801d36c
 800f9e4:	0801d5c8 	.word	0x0801d5c8
 800f9e8:	0801d3b0 	.word	0x0801d3b0
 800f9ec:	0801d5ec 	.word	0x0801d5ec

0800f9f0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b084      	sub	sp, #16
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	460b      	mov	r3, r1
 800f9fa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d107      	bne.n	800fa12 <tcp_recved+0x22>
 800fa02:	4b1f      	ldr	r3, [pc, #124]	; (800fa80 <tcp_recved+0x90>)
 800fa04:	f240 32cf 	movw	r2, #975	; 0x3cf
 800fa08:	491e      	ldr	r1, [pc, #120]	; (800fa84 <tcp_recved+0x94>)
 800fa0a:	481f      	ldr	r0, [pc, #124]	; (800fa88 <tcp_recved+0x98>)
 800fa0c:	f00b f99e 	bl	801ad4c <iprintf>
 800fa10:	e032      	b.n	800fa78 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	7d1b      	ldrb	r3, [r3, #20]
 800fa16:	2b01      	cmp	r3, #1
 800fa18:	d106      	bne.n	800fa28 <tcp_recved+0x38>
 800fa1a:	4b19      	ldr	r3, [pc, #100]	; (800fa80 <tcp_recved+0x90>)
 800fa1c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800fa20:	491a      	ldr	r1, [pc, #104]	; (800fa8c <tcp_recved+0x9c>)
 800fa22:	4819      	ldr	r0, [pc, #100]	; (800fa88 <tcp_recved+0x98>)
 800fa24:	f00b f992 	bl	801ad4c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fa2c:	887b      	ldrh	r3, [r7, #2]
 800fa2e:	4413      	add	r3, r2
 800fa30:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800fa32:	89fb      	ldrh	r3, [r7, #14]
 800fa34:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fa38:	d804      	bhi.n	800fa44 <tcp_recved+0x54>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa3e:	89fa      	ldrh	r2, [r7, #14]
 800fa40:	429a      	cmp	r2, r3
 800fa42:	d204      	bcs.n	800fa4e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fa4a:	851a      	strh	r2, [r3, #40]	; 0x28
 800fa4c:	e002      	b.n	800fa54 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	89fa      	ldrh	r2, [r7, #14]
 800fa52:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800fa54:	6878      	ldr	r0, [r7, #4]
 800fa56:	f7ff ff71 	bl	800f93c <tcp_update_rcv_ann_wnd>
 800fa5a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fa62:	d309      	bcc.n	800fa78 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	8b5b      	ldrh	r3, [r3, #26]
 800fa68:	f043 0302 	orr.w	r3, r3, #2
 800fa6c:	b29a      	uxth	r2, r3
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f004 fbaa 	bl	80141cc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800fa78:	3710      	adds	r7, #16
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}
 800fa7e:	bf00      	nop
 800fa80:	0801d36c 	.word	0x0801d36c
 800fa84:	0801d608 	.word	0x0801d608
 800fa88:	0801d3b0 	.word	0x0801d3b0
 800fa8c:	0801d620 	.word	0x0801d620

0800fa90 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800fa90:	b480      	push	{r7}
 800fa92:	b083      	sub	sp, #12
 800fa94:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800fa96:	2300      	movs	r3, #0
 800fa98:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800fa9a:	4b1e      	ldr	r3, [pc, #120]	; (800fb14 <tcp_new_port+0x84>)
 800fa9c:	881b      	ldrh	r3, [r3, #0]
 800fa9e:	3301      	adds	r3, #1
 800faa0:	b29a      	uxth	r2, r3
 800faa2:	4b1c      	ldr	r3, [pc, #112]	; (800fb14 <tcp_new_port+0x84>)
 800faa4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800faa6:	4b1b      	ldr	r3, [pc, #108]	; (800fb14 <tcp_new_port+0x84>)
 800faa8:	881b      	ldrh	r3, [r3, #0]
 800faaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800faae:	4293      	cmp	r3, r2
 800fab0:	d103      	bne.n	800faba <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800fab2:	4b18      	ldr	r3, [pc, #96]	; (800fb14 <tcp_new_port+0x84>)
 800fab4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800fab8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800faba:	2300      	movs	r3, #0
 800fabc:	71fb      	strb	r3, [r7, #7]
 800fabe:	e01e      	b.n	800fafe <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800fac0:	79fb      	ldrb	r3, [r7, #7]
 800fac2:	4a15      	ldr	r2, [pc, #84]	; (800fb18 <tcp_new_port+0x88>)
 800fac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	603b      	str	r3, [r7, #0]
 800facc:	e011      	b.n	800faf2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800face:	683b      	ldr	r3, [r7, #0]
 800fad0:	8ada      	ldrh	r2, [r3, #22]
 800fad2:	4b10      	ldr	r3, [pc, #64]	; (800fb14 <tcp_new_port+0x84>)
 800fad4:	881b      	ldrh	r3, [r3, #0]
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d108      	bne.n	800faec <tcp_new_port+0x5c>
        n++;
 800fada:	88bb      	ldrh	r3, [r7, #4]
 800fadc:	3301      	adds	r3, #1
 800fade:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800fae0:	88bb      	ldrh	r3, [r7, #4]
 800fae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fae6:	d3d8      	bcc.n	800fa9a <tcp_new_port+0xa>
          return 0;
 800fae8:	2300      	movs	r3, #0
 800faea:	e00d      	b.n	800fb08 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800faec:	683b      	ldr	r3, [r7, #0]
 800faee:	68db      	ldr	r3, [r3, #12]
 800faf0:	603b      	str	r3, [r7, #0]
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d1ea      	bne.n	800face <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800faf8:	79fb      	ldrb	r3, [r7, #7]
 800fafa:	3301      	adds	r3, #1
 800fafc:	71fb      	strb	r3, [r7, #7]
 800fafe:	79fb      	ldrb	r3, [r7, #7]
 800fb00:	2b03      	cmp	r3, #3
 800fb02:	d9dd      	bls.n	800fac0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800fb04:	4b03      	ldr	r3, [pc, #12]	; (800fb14 <tcp_new_port+0x84>)
 800fb06:	881b      	ldrh	r3, [r3, #0]
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	370c      	adds	r7, #12
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb12:	4770      	bx	lr
 800fb14:	20000010 	.word	0x20000010
 800fb18:	0801f5bc 	.word	0x0801f5bc

0800fb1c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800fb1c:	b5b0      	push	{r4, r5, r7, lr}
 800fb1e:	b090      	sub	sp, #64	; 0x40
 800fb20:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800fb22:	2300      	movs	r3, #0
 800fb24:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800fb28:	4b94      	ldr	r3, [pc, #592]	; (800fd7c <tcp_slowtmr+0x260>)
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	3301      	adds	r3, #1
 800fb2e:	4a93      	ldr	r2, [pc, #588]	; (800fd7c <tcp_slowtmr+0x260>)
 800fb30:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800fb32:	4b93      	ldr	r3, [pc, #588]	; (800fd80 <tcp_slowtmr+0x264>)
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	3301      	adds	r3, #1
 800fb38:	b2da      	uxtb	r2, r3
 800fb3a:	4b91      	ldr	r3, [pc, #580]	; (800fd80 <tcp_slowtmr+0x264>)
 800fb3c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800fb42:	4b90      	ldr	r3, [pc, #576]	; (800fd84 <tcp_slowtmr+0x268>)
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800fb48:	e29f      	b.n	801008a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800fb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb4c:	7d1b      	ldrb	r3, [r3, #20]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d106      	bne.n	800fb60 <tcp_slowtmr+0x44>
 800fb52:	4b8d      	ldr	r3, [pc, #564]	; (800fd88 <tcp_slowtmr+0x26c>)
 800fb54:	f240 42be 	movw	r2, #1214	; 0x4be
 800fb58:	498c      	ldr	r1, [pc, #560]	; (800fd8c <tcp_slowtmr+0x270>)
 800fb5a:	488d      	ldr	r0, [pc, #564]	; (800fd90 <tcp_slowtmr+0x274>)
 800fb5c:	f00b f8f6 	bl	801ad4c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800fb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb62:	7d1b      	ldrb	r3, [r3, #20]
 800fb64:	2b01      	cmp	r3, #1
 800fb66:	d106      	bne.n	800fb76 <tcp_slowtmr+0x5a>
 800fb68:	4b87      	ldr	r3, [pc, #540]	; (800fd88 <tcp_slowtmr+0x26c>)
 800fb6a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800fb6e:	4989      	ldr	r1, [pc, #548]	; (800fd94 <tcp_slowtmr+0x278>)
 800fb70:	4887      	ldr	r0, [pc, #540]	; (800fd90 <tcp_slowtmr+0x274>)
 800fb72:	f00b f8eb 	bl	801ad4c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800fb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb78:	7d1b      	ldrb	r3, [r3, #20]
 800fb7a:	2b0a      	cmp	r3, #10
 800fb7c:	d106      	bne.n	800fb8c <tcp_slowtmr+0x70>
 800fb7e:	4b82      	ldr	r3, [pc, #520]	; (800fd88 <tcp_slowtmr+0x26c>)
 800fb80:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800fb84:	4984      	ldr	r1, [pc, #528]	; (800fd98 <tcp_slowtmr+0x27c>)
 800fb86:	4882      	ldr	r0, [pc, #520]	; (800fd90 <tcp_slowtmr+0x274>)
 800fb88:	f00b f8e0 	bl	801ad4c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800fb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb8e:	7f9a      	ldrb	r2, [r3, #30]
 800fb90:	4b7b      	ldr	r3, [pc, #492]	; (800fd80 <tcp_slowtmr+0x264>)
 800fb92:	781b      	ldrb	r3, [r3, #0]
 800fb94:	429a      	cmp	r2, r3
 800fb96:	d105      	bne.n	800fba4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800fb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb9a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb9e:	68db      	ldr	r3, [r3, #12]
 800fba0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800fba2:	e272      	b.n	801008a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800fba4:	4b76      	ldr	r3, [pc, #472]	; (800fd80 <tcp_slowtmr+0x264>)
 800fba6:	781a      	ldrb	r2, [r3, #0]
 800fba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbaa:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800fbac:	2300      	movs	r3, #0
 800fbae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800fbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbba:	7d1b      	ldrb	r3, [r3, #20]
 800fbbc:	2b02      	cmp	r3, #2
 800fbbe:	d10a      	bne.n	800fbd6 <tcp_slowtmr+0xba>
 800fbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fbc6:	2b05      	cmp	r3, #5
 800fbc8:	d905      	bls.n	800fbd6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800fbca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbce:	3301      	adds	r3, #1
 800fbd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fbd4:	e11e      	b.n	800fe14 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800fbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fbdc:	2b0b      	cmp	r3, #11
 800fbde:	d905      	bls.n	800fbec <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800fbe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbe4:	3301      	adds	r3, #1
 800fbe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fbea:	e113      	b.n	800fe14 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800fbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d075      	beq.n	800fce2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800fbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d006      	beq.n	800fc0c <tcp_slowtmr+0xf0>
 800fbfe:	4b62      	ldr	r3, [pc, #392]	; (800fd88 <tcp_slowtmr+0x26c>)
 800fc00:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800fc04:	4965      	ldr	r1, [pc, #404]	; (800fd9c <tcp_slowtmr+0x280>)
 800fc06:	4862      	ldr	r0, [pc, #392]	; (800fd90 <tcp_slowtmr+0x274>)
 800fc08:	f00b f8a0 	bl	801ad4c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800fc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d106      	bne.n	800fc22 <tcp_slowtmr+0x106>
 800fc14:	4b5c      	ldr	r3, [pc, #368]	; (800fd88 <tcp_slowtmr+0x26c>)
 800fc16:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800fc1a:	4961      	ldr	r1, [pc, #388]	; (800fda0 <tcp_slowtmr+0x284>)
 800fc1c:	485c      	ldr	r0, [pc, #368]	; (800fd90 <tcp_slowtmr+0x274>)
 800fc1e:	f00b f895 	bl	801ad4c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800fc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc24:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fc28:	2b0b      	cmp	r3, #11
 800fc2a:	d905      	bls.n	800fc38 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800fc2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc30:	3301      	adds	r3, #1
 800fc32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fc36:	e0ed      	b.n	800fe14 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800fc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc3a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fc3e:	3b01      	subs	r3, #1
 800fc40:	4a58      	ldr	r2, [pc, #352]	; (800fda4 <tcp_slowtmr+0x288>)
 800fc42:	5cd3      	ldrb	r3, [r2, r3]
 800fc44:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800fc46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc48:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fc4c:	7c7a      	ldrb	r2, [r7, #17]
 800fc4e:	429a      	cmp	r2, r3
 800fc50:	d907      	bls.n	800fc62 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800fc52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc54:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fc58:	3301      	adds	r3, #1
 800fc5a:	b2da      	uxtb	r2, r3
 800fc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc5e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800fc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc64:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fc68:	7c7a      	ldrb	r2, [r7, #17]
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	f200 80d2 	bhi.w	800fe14 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800fc70:	2301      	movs	r3, #1
 800fc72:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800fc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d108      	bne.n	800fc90 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800fc7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc80:	f005 f94c 	bl	8014f1c <tcp_zero_window_probe>
 800fc84:	4603      	mov	r3, r0
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d014      	beq.n	800fcb4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	623b      	str	r3, [r7, #32]
 800fc8e:	e011      	b.n	800fcb4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800fc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fc96:	4619      	mov	r1, r3
 800fc98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc9a:	f004 f811 	bl	8013cc0 <tcp_split_unsent_seg>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d107      	bne.n	800fcb4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800fca4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fca6:	f004 fa91 	bl	80141cc <tcp_output>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d101      	bne.n	800fcb4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800fcb4:	6a3b      	ldr	r3, [r7, #32]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	f000 80ac 	beq.w	800fe14 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800fcbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800fcc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcc6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fcca:	2b06      	cmp	r3, #6
 800fccc:	f200 80a2 	bhi.w	800fe14 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800fcd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fcd6:	3301      	adds	r3, #1
 800fcd8:	b2da      	uxtb	r2, r3
 800fcda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcdc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800fce0:	e098      	b.n	800fe14 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800fce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fce4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	db0f      	blt.n	800fd0c <tcp_slowtmr+0x1f0>
 800fcec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fcf2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fcf6:	4293      	cmp	r3, r2
 800fcf8:	d008      	beq.n	800fd0c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800fcfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcfc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fd00:	b29b      	uxth	r3, r3
 800fd02:	3301      	adds	r3, #1
 800fd04:	b29b      	uxth	r3, r3
 800fd06:	b21a      	sxth	r2, r3
 800fd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd0a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800fd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd0e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800fd12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd14:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fd18:	429a      	cmp	r2, r3
 800fd1a:	db7b      	blt.n	800fe14 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800fd1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd1e:	f004 fd47 	bl	80147b0 <tcp_rexmit_rto_prepare>
 800fd22:	4603      	mov	r3, r0
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d007      	beq.n	800fd38 <tcp_slowtmr+0x21c>
 800fd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d171      	bne.n	800fe14 <tcp_slowtmr+0x2f8>
 800fd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d06d      	beq.n	800fe14 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800fd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd3a:	7d1b      	ldrb	r3, [r3, #20]
 800fd3c:	2b02      	cmp	r3, #2
 800fd3e:	d03a      	beq.n	800fdb6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800fd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fd46:	2b0c      	cmp	r3, #12
 800fd48:	bf28      	it	cs
 800fd4a:	230c      	movcs	r3, #12
 800fd4c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800fd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fd54:	10db      	asrs	r3, r3, #3
 800fd56:	b21b      	sxth	r3, r3
 800fd58:	461a      	mov	r2, r3
 800fd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd5c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fd60:	4413      	add	r3, r2
 800fd62:	7efa      	ldrb	r2, [r7, #27]
 800fd64:	4910      	ldr	r1, [pc, #64]	; (800fda8 <tcp_slowtmr+0x28c>)
 800fd66:	5c8a      	ldrb	r2, [r1, r2]
 800fd68:	4093      	lsls	r3, r2
 800fd6a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800fd6c:	697b      	ldr	r3, [r7, #20]
 800fd6e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800fd72:	4293      	cmp	r3, r2
 800fd74:	dc1a      	bgt.n	800fdac <tcp_slowtmr+0x290>
 800fd76:	697b      	ldr	r3, [r7, #20]
 800fd78:	b21a      	sxth	r2, r3
 800fd7a:	e019      	b.n	800fdb0 <tcp_slowtmr+0x294>
 800fd7c:	200120a4 	.word	0x200120a4
 800fd80:	2000b21a 	.word	0x2000b21a
 800fd84:	200120a0 	.word	0x200120a0
 800fd88:	0801d36c 	.word	0x0801d36c
 800fd8c:	0801d6b0 	.word	0x0801d6b0
 800fd90:	0801d3b0 	.word	0x0801d3b0
 800fd94:	0801d6dc 	.word	0x0801d6dc
 800fd98:	0801d708 	.word	0x0801d708
 800fd9c:	0801d738 	.word	0x0801d738
 800fda0:	0801d76c 	.word	0x0801d76c
 800fda4:	0801f5b4 	.word	0x0801f5b4
 800fda8:	0801f5a4 	.word	0x0801f5a4
 800fdac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fdb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800fdb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb8:	2200      	movs	r2, #0
 800fdba:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800fdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdbe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fdc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdc4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fdc8:	4293      	cmp	r3, r2
 800fdca:	bf28      	it	cs
 800fdcc:	4613      	movcs	r3, r2
 800fdce:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800fdd0:	8a7b      	ldrh	r3, [r7, #18]
 800fdd2:	085b      	lsrs	r3, r3, #1
 800fdd4:	b29a      	uxth	r2, r3
 800fdd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdde:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fde6:	005b      	lsls	r3, r3, #1
 800fde8:	b29b      	uxth	r3, r3
 800fdea:	429a      	cmp	r2, r3
 800fdec:	d206      	bcs.n	800fdfc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800fdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fdf2:	005b      	lsls	r3, r3, #1
 800fdf4:	b29a      	uxth	r2, r3
 800fdf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800fdfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdfe:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fe00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800fe06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe08:	2200      	movs	r2, #0
 800fe0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800fe0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe10:	f004 fd3e 	bl	8014890 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800fe14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe16:	7d1b      	ldrb	r3, [r3, #20]
 800fe18:	2b06      	cmp	r3, #6
 800fe1a:	d111      	bne.n	800fe40 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800fe1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe1e:	8b5b      	ldrh	r3, [r3, #26]
 800fe20:	f003 0310 	and.w	r3, r3, #16
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d00b      	beq.n	800fe40 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fe28:	4b9d      	ldr	r3, [pc, #628]	; (80100a0 <tcp_slowtmr+0x584>)
 800fe2a:	681a      	ldr	r2, [r3, #0]
 800fe2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe2e:	6a1b      	ldr	r3, [r3, #32]
 800fe30:	1ad3      	subs	r3, r2, r3
 800fe32:	2b28      	cmp	r3, #40	; 0x28
 800fe34:	d904      	bls.n	800fe40 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800fe36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe3a:	3301      	adds	r3, #1
 800fe3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fe40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe42:	7a5b      	ldrb	r3, [r3, #9]
 800fe44:	f003 0308 	and.w	r3, r3, #8
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d04c      	beq.n	800fee6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800fe4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe4e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fe50:	2b04      	cmp	r3, #4
 800fe52:	d003      	beq.n	800fe5c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800fe54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe56:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800fe58:	2b07      	cmp	r3, #7
 800fe5a:	d144      	bne.n	800fee6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fe5c:	4b90      	ldr	r3, [pc, #576]	; (80100a0 <tcp_slowtmr+0x584>)
 800fe5e:	681a      	ldr	r2, [r3, #0]
 800fe60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe62:	6a1b      	ldr	r3, [r3, #32]
 800fe64:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800fe66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fe6c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800fe70:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800fe74:	498b      	ldr	r1, [pc, #556]	; (80100a4 <tcp_slowtmr+0x588>)
 800fe76:	fba1 1303 	umull	r1, r3, r1, r3
 800fe7a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fe7c:	429a      	cmp	r2, r3
 800fe7e:	d90a      	bls.n	800fe96 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800fe80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe84:	3301      	adds	r3, #1
 800fe86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800fe8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fe8e:	3301      	adds	r3, #1
 800fe90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fe94:	e027      	b.n	800fee6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fe96:	4b82      	ldr	r3, [pc, #520]	; (80100a0 <tcp_slowtmr+0x584>)
 800fe98:	681a      	ldr	r2, [r3, #0]
 800fe9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe9c:	6a1b      	ldr	r3, [r3, #32]
 800fe9e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800fea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fea2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fea8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800feac:	4618      	mov	r0, r3
 800feae:	4b7e      	ldr	r3, [pc, #504]	; (80100a8 <tcp_slowtmr+0x58c>)
 800feb0:	fb03 f300 	mul.w	r3, r3, r0
 800feb4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800feb6:	497b      	ldr	r1, [pc, #492]	; (80100a4 <tcp_slowtmr+0x588>)
 800feb8:	fba1 1303 	umull	r1, r3, r1, r3
 800febc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800febe:	429a      	cmp	r2, r3
 800fec0:	d911      	bls.n	800fee6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800fec2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fec4:	f004 ffea 	bl	8014e9c <tcp_keepalive>
 800fec8:	4603      	mov	r3, r0
 800feca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800fece:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d107      	bne.n	800fee6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800fed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fed8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fedc:	3301      	adds	r3, #1
 800fede:	b2da      	uxtb	r2, r3
 800fee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fee2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800fee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800feea:	2b00      	cmp	r3, #0
 800feec:	d011      	beq.n	800ff12 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800feee:	4b6c      	ldr	r3, [pc, #432]	; (80100a0 <tcp_slowtmr+0x584>)
 800fef0:	681a      	ldr	r2, [r3, #0]
 800fef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fef4:	6a1b      	ldr	r3, [r3, #32]
 800fef6:	1ad2      	subs	r2, r2, r3
 800fef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fefa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fefe:	4619      	mov	r1, r3
 800ff00:	460b      	mov	r3, r1
 800ff02:	005b      	lsls	r3, r3, #1
 800ff04:	440b      	add	r3, r1
 800ff06:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ff08:	429a      	cmp	r2, r3
 800ff0a:	d302      	bcc.n	800ff12 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ff0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ff0e:	f000 fea9 	bl	8010c64 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ff12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff14:	7d1b      	ldrb	r3, [r3, #20]
 800ff16:	2b03      	cmp	r3, #3
 800ff18:	d10b      	bne.n	800ff32 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ff1a:	4b61      	ldr	r3, [pc, #388]	; (80100a0 <tcp_slowtmr+0x584>)
 800ff1c:	681a      	ldr	r2, [r3, #0]
 800ff1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff20:	6a1b      	ldr	r3, [r3, #32]
 800ff22:	1ad3      	subs	r3, r2, r3
 800ff24:	2b28      	cmp	r3, #40	; 0x28
 800ff26:	d904      	bls.n	800ff32 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ff28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff2c:	3301      	adds	r3, #1
 800ff2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ff32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff34:	7d1b      	ldrb	r3, [r3, #20]
 800ff36:	2b09      	cmp	r3, #9
 800ff38:	d10b      	bne.n	800ff52 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ff3a:	4b59      	ldr	r3, [pc, #356]	; (80100a0 <tcp_slowtmr+0x584>)
 800ff3c:	681a      	ldr	r2, [r3, #0]
 800ff3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff40:	6a1b      	ldr	r3, [r3, #32]
 800ff42:	1ad3      	subs	r3, r2, r3
 800ff44:	2bf0      	cmp	r3, #240	; 0xf0
 800ff46:	d904      	bls.n	800ff52 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800ff48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff4c:	3301      	adds	r3, #1
 800ff4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ff52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d060      	beq.n	801001c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ff5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff60:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ff62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ff64:	f000 fcca 	bl	80108fc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ff68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d010      	beq.n	800ff90 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ff6e:	4b4f      	ldr	r3, [pc, #316]	; (80100ac <tcp_slowtmr+0x590>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff74:	429a      	cmp	r2, r3
 800ff76:	d106      	bne.n	800ff86 <tcp_slowtmr+0x46a>
 800ff78:	4b4d      	ldr	r3, [pc, #308]	; (80100b0 <tcp_slowtmr+0x594>)
 800ff7a:	f240 526d 	movw	r2, #1389	; 0x56d
 800ff7e:	494d      	ldr	r1, [pc, #308]	; (80100b4 <tcp_slowtmr+0x598>)
 800ff80:	484d      	ldr	r0, [pc, #308]	; (80100b8 <tcp_slowtmr+0x59c>)
 800ff82:	f00a fee3 	bl	801ad4c <iprintf>
        prev->next = pcb->next;
 800ff86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff88:	68da      	ldr	r2, [r3, #12]
 800ff8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff8c:	60da      	str	r2, [r3, #12]
 800ff8e:	e00f      	b.n	800ffb0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ff90:	4b46      	ldr	r3, [pc, #280]	; (80100ac <tcp_slowtmr+0x590>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff96:	429a      	cmp	r2, r3
 800ff98:	d006      	beq.n	800ffa8 <tcp_slowtmr+0x48c>
 800ff9a:	4b45      	ldr	r3, [pc, #276]	; (80100b0 <tcp_slowtmr+0x594>)
 800ff9c:	f240 5271 	movw	r2, #1393	; 0x571
 800ffa0:	4946      	ldr	r1, [pc, #280]	; (80100bc <tcp_slowtmr+0x5a0>)
 800ffa2:	4845      	ldr	r0, [pc, #276]	; (80100b8 <tcp_slowtmr+0x59c>)
 800ffa4:	f00a fed2 	bl	801ad4c <iprintf>
        tcp_active_pcbs = pcb->next;
 800ffa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffaa:	68db      	ldr	r3, [r3, #12]
 800ffac:	4a3f      	ldr	r2, [pc, #252]	; (80100ac <tcp_slowtmr+0x590>)
 800ffae:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ffb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d013      	beq.n	800ffe0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ffb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffba:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ffbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffbe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ffc0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ffc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffc4:	3304      	adds	r3, #4
 800ffc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ffc8:	8ad2      	ldrh	r2, [r2, #22]
 800ffca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ffcc:	8b09      	ldrh	r1, [r1, #24]
 800ffce:	9102      	str	r1, [sp, #8]
 800ffd0:	9201      	str	r2, [sp, #4]
 800ffd2:	9300      	str	r3, [sp, #0]
 800ffd4:	462b      	mov	r3, r5
 800ffd6:	4622      	mov	r2, r4
 800ffd8:	4601      	mov	r1, r0
 800ffda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ffdc:	f004 feaa 	bl	8014d34 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ffe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffe2:	691b      	ldr	r3, [r3, #16]
 800ffe4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ffe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffe8:	7d1b      	ldrb	r3, [r3, #20]
 800ffea:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ffec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffee:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800fff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fff2:	68db      	ldr	r3, [r3, #12]
 800fff4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fff6:	6838      	ldr	r0, [r7, #0]
 800fff8:	f7fe ffd4 	bl	800efa4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800fffc:	4b30      	ldr	r3, [pc, #192]	; (80100c0 <tcp_slowtmr+0x5a4>)
 800fffe:	2200      	movs	r2, #0
 8010000:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d004      	beq.n	8010012 <tcp_slowtmr+0x4f6>
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	f06f 010c 	mvn.w	r1, #12
 801000e:	68b8      	ldr	r0, [r7, #8]
 8010010:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8010012:	4b2b      	ldr	r3, [pc, #172]	; (80100c0 <tcp_slowtmr+0x5a4>)
 8010014:	781b      	ldrb	r3, [r3, #0]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d037      	beq.n	801008a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801001a:	e590      	b.n	800fb3e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801001c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801001e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010022:	68db      	ldr	r3, [r3, #12]
 8010024:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8010026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010028:	7f1b      	ldrb	r3, [r3, #28]
 801002a:	3301      	adds	r3, #1
 801002c:	b2da      	uxtb	r2, r3
 801002e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010030:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8010032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010034:	7f1a      	ldrb	r2, [r3, #28]
 8010036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010038:	7f5b      	ldrb	r3, [r3, #29]
 801003a:	429a      	cmp	r2, r3
 801003c:	d325      	bcc.n	801008a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801003e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010040:	2200      	movs	r2, #0
 8010042:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8010044:	4b1e      	ldr	r3, [pc, #120]	; (80100c0 <tcp_slowtmr+0x5a4>)
 8010046:	2200      	movs	r2, #0
 8010048:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801004a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801004c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010050:	2b00      	cmp	r3, #0
 8010052:	d00b      	beq.n	801006c <tcp_slowtmr+0x550>
 8010054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801005a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801005c:	6912      	ldr	r2, [r2, #16]
 801005e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010060:	4610      	mov	r0, r2
 8010062:	4798      	blx	r3
 8010064:	4603      	mov	r3, r0
 8010066:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801006a:	e002      	b.n	8010072 <tcp_slowtmr+0x556>
 801006c:	2300      	movs	r3, #0
 801006e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8010072:	4b13      	ldr	r3, [pc, #76]	; (80100c0 <tcp_slowtmr+0x5a4>)
 8010074:	781b      	ldrb	r3, [r3, #0]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d000      	beq.n	801007c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 801007a:	e560      	b.n	800fb3e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801007c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8010080:	2b00      	cmp	r3, #0
 8010082:	d102      	bne.n	801008a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8010084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010086:	f004 f8a1 	bl	80141cc <tcp_output>
  while (pcb != NULL) {
 801008a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801008c:	2b00      	cmp	r3, #0
 801008e:	f47f ad5c 	bne.w	800fb4a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010092:	2300      	movs	r3, #0
 8010094:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8010096:	4b0b      	ldr	r3, [pc, #44]	; (80100c4 <tcp_slowtmr+0x5a8>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801009c:	e067      	b.n	801016e <tcp_slowtmr+0x652>
 801009e:	bf00      	nop
 80100a0:	200120a4 	.word	0x200120a4
 80100a4:	10624dd3 	.word	0x10624dd3
 80100a8:	000124f8 	.word	0x000124f8
 80100ac:	200120a0 	.word	0x200120a0
 80100b0:	0801d36c 	.word	0x0801d36c
 80100b4:	0801d7a4 	.word	0x0801d7a4
 80100b8:	0801d3b0 	.word	0x0801d3b0
 80100bc:	0801d7d0 	.word	0x0801d7d0
 80100c0:	2001209c 	.word	0x2001209c
 80100c4:	200120b0 	.word	0x200120b0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80100c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ca:	7d1b      	ldrb	r3, [r3, #20]
 80100cc:	2b0a      	cmp	r3, #10
 80100ce:	d006      	beq.n	80100de <tcp_slowtmr+0x5c2>
 80100d0:	4b2b      	ldr	r3, [pc, #172]	; (8010180 <tcp_slowtmr+0x664>)
 80100d2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80100d6:	492b      	ldr	r1, [pc, #172]	; (8010184 <tcp_slowtmr+0x668>)
 80100d8:	482b      	ldr	r0, [pc, #172]	; (8010188 <tcp_slowtmr+0x66c>)
 80100da:	f00a fe37 	bl	801ad4c <iprintf>
    pcb_remove = 0;
 80100de:	2300      	movs	r3, #0
 80100e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80100e4:	4b29      	ldr	r3, [pc, #164]	; (801018c <tcp_slowtmr+0x670>)
 80100e6:	681a      	ldr	r2, [r3, #0]
 80100e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ea:	6a1b      	ldr	r3, [r3, #32]
 80100ec:	1ad3      	subs	r3, r2, r3
 80100ee:	2bf0      	cmp	r3, #240	; 0xf0
 80100f0:	d904      	bls.n	80100fc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80100f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80100f6:	3301      	adds	r3, #1
 80100f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80100fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010100:	2b00      	cmp	r3, #0
 8010102:	d02f      	beq.n	8010164 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010104:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010106:	f000 fbf9 	bl	80108fc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801010a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801010c:	2b00      	cmp	r3, #0
 801010e:	d010      	beq.n	8010132 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010110:	4b1f      	ldr	r3, [pc, #124]	; (8010190 <tcp_slowtmr+0x674>)
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010116:	429a      	cmp	r2, r3
 8010118:	d106      	bne.n	8010128 <tcp_slowtmr+0x60c>
 801011a:	4b19      	ldr	r3, [pc, #100]	; (8010180 <tcp_slowtmr+0x664>)
 801011c:	f240 52af 	movw	r2, #1455	; 0x5af
 8010120:	491c      	ldr	r1, [pc, #112]	; (8010194 <tcp_slowtmr+0x678>)
 8010122:	4819      	ldr	r0, [pc, #100]	; (8010188 <tcp_slowtmr+0x66c>)
 8010124:	f00a fe12 	bl	801ad4c <iprintf>
        prev->next = pcb->next;
 8010128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801012a:	68da      	ldr	r2, [r3, #12]
 801012c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801012e:	60da      	str	r2, [r3, #12]
 8010130:	e00f      	b.n	8010152 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8010132:	4b17      	ldr	r3, [pc, #92]	; (8010190 <tcp_slowtmr+0x674>)
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010138:	429a      	cmp	r2, r3
 801013a:	d006      	beq.n	801014a <tcp_slowtmr+0x62e>
 801013c:	4b10      	ldr	r3, [pc, #64]	; (8010180 <tcp_slowtmr+0x664>)
 801013e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8010142:	4915      	ldr	r1, [pc, #84]	; (8010198 <tcp_slowtmr+0x67c>)
 8010144:	4810      	ldr	r0, [pc, #64]	; (8010188 <tcp_slowtmr+0x66c>)
 8010146:	f00a fe01 	bl	801ad4c <iprintf>
        tcp_tw_pcbs = pcb->next;
 801014a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801014c:	68db      	ldr	r3, [r3, #12]
 801014e:	4a10      	ldr	r2, [pc, #64]	; (8010190 <tcp_slowtmr+0x674>)
 8010150:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010154:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8010156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010158:	68db      	ldr	r3, [r3, #12]
 801015a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801015c:	69f8      	ldr	r0, [r7, #28]
 801015e:	f7fe ff21 	bl	800efa4 <tcp_free>
 8010162:	e004      	b.n	801016e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8010164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010166:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801016a:	68db      	ldr	r3, [r3, #12]
 801016c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801016e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010170:	2b00      	cmp	r3, #0
 8010172:	d1a9      	bne.n	80100c8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8010174:	bf00      	nop
 8010176:	bf00      	nop
 8010178:	3730      	adds	r7, #48	; 0x30
 801017a:	46bd      	mov	sp, r7
 801017c:	bdb0      	pop	{r4, r5, r7, pc}
 801017e:	bf00      	nop
 8010180:	0801d36c 	.word	0x0801d36c
 8010184:	0801d7fc 	.word	0x0801d7fc
 8010188:	0801d3b0 	.word	0x0801d3b0
 801018c:	200120a4 	.word	0x200120a4
 8010190:	200120b0 	.word	0x200120b0
 8010194:	0801d82c 	.word	0x0801d82c
 8010198:	0801d854 	.word	0x0801d854

0801019c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b082      	sub	sp, #8
 80101a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80101a2:	4b2d      	ldr	r3, [pc, #180]	; (8010258 <tcp_fasttmr+0xbc>)
 80101a4:	781b      	ldrb	r3, [r3, #0]
 80101a6:	3301      	adds	r3, #1
 80101a8:	b2da      	uxtb	r2, r3
 80101aa:	4b2b      	ldr	r3, [pc, #172]	; (8010258 <tcp_fasttmr+0xbc>)
 80101ac:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80101ae:	4b2b      	ldr	r3, [pc, #172]	; (801025c <tcp_fasttmr+0xc0>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80101b4:	e048      	b.n	8010248 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	7f9a      	ldrb	r2, [r3, #30]
 80101ba:	4b27      	ldr	r3, [pc, #156]	; (8010258 <tcp_fasttmr+0xbc>)
 80101bc:	781b      	ldrb	r3, [r3, #0]
 80101be:	429a      	cmp	r2, r3
 80101c0:	d03f      	beq.n	8010242 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80101c2:	4b25      	ldr	r3, [pc, #148]	; (8010258 <tcp_fasttmr+0xbc>)
 80101c4:	781a      	ldrb	r2, [r3, #0]
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	8b5b      	ldrh	r3, [r3, #26]
 80101ce:	f003 0301 	and.w	r3, r3, #1
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d010      	beq.n	80101f8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	8b5b      	ldrh	r3, [r3, #26]
 80101da:	f043 0302 	orr.w	r3, r3, #2
 80101de:	b29a      	uxth	r2, r3
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	f003 fff1 	bl	80141cc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	8b5b      	ldrh	r3, [r3, #26]
 80101ee:	f023 0303 	bic.w	r3, r3, #3
 80101f2:	b29a      	uxth	r2, r3
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	8b5b      	ldrh	r3, [r3, #26]
 80101fc:	f003 0308 	and.w	r3, r3, #8
 8010200:	2b00      	cmp	r3, #0
 8010202:	d009      	beq.n	8010218 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	8b5b      	ldrh	r3, [r3, #26]
 8010208:	f023 0308 	bic.w	r3, r3, #8
 801020c:	b29a      	uxth	r2, r3
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8010212:	6878      	ldr	r0, [r7, #4]
 8010214:	f7ff f85a 	bl	800f2cc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	68db      	ldr	r3, [r3, #12]
 801021c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010222:	2b00      	cmp	r3, #0
 8010224:	d00a      	beq.n	801023c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010226:	4b0e      	ldr	r3, [pc, #56]	; (8010260 <tcp_fasttmr+0xc4>)
 8010228:	2200      	movs	r2, #0
 801022a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801022c:	6878      	ldr	r0, [r7, #4]
 801022e:	f000 f819 	bl	8010264 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010232:	4b0b      	ldr	r3, [pc, #44]	; (8010260 <tcp_fasttmr+0xc4>)
 8010234:	781b      	ldrb	r3, [r3, #0]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d000      	beq.n	801023c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801023a:	e7b8      	b.n	80101ae <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	607b      	str	r3, [r7, #4]
 8010240:	e002      	b.n	8010248 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	68db      	ldr	r3, [r3, #12]
 8010246:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d1b3      	bne.n	80101b6 <tcp_fasttmr+0x1a>
    }
  }
}
 801024e:	bf00      	nop
 8010250:	bf00      	nop
 8010252:	3708      	adds	r7, #8
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}
 8010258:	2000b21a 	.word	0x2000b21a
 801025c:	200120a0 	.word	0x200120a0
 8010260:	2001209c 	.word	0x2001209c

08010264 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010264:	b590      	push	{r4, r7, lr}
 8010266:	b085      	sub	sp, #20
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d109      	bne.n	8010286 <tcp_process_refused_data+0x22>
 8010272:	4b37      	ldr	r3, [pc, #220]	; (8010350 <tcp_process_refused_data+0xec>)
 8010274:	f240 6209 	movw	r2, #1545	; 0x609
 8010278:	4936      	ldr	r1, [pc, #216]	; (8010354 <tcp_process_refused_data+0xf0>)
 801027a:	4837      	ldr	r0, [pc, #220]	; (8010358 <tcp_process_refused_data+0xf4>)
 801027c:	f00a fd66 	bl	801ad4c <iprintf>
 8010280:	f06f 030f 	mvn.w	r3, #15
 8010284:	e060      	b.n	8010348 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801028a:	7b5b      	ldrb	r3, [r3, #13]
 801028c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010292:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2200      	movs	r2, #0
 8010298:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d00b      	beq.n	80102bc <tcp_process_refused_data+0x58>
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	6918      	ldr	r0, [r3, #16]
 80102ae:	2300      	movs	r3, #0
 80102b0:	68ba      	ldr	r2, [r7, #8]
 80102b2:	6879      	ldr	r1, [r7, #4]
 80102b4:	47a0      	blx	r4
 80102b6:	4603      	mov	r3, r0
 80102b8:	73fb      	strb	r3, [r7, #15]
 80102ba:	e007      	b.n	80102cc <tcp_process_refused_data+0x68>
 80102bc:	2300      	movs	r3, #0
 80102be:	68ba      	ldr	r2, [r7, #8]
 80102c0:	6879      	ldr	r1, [r7, #4]
 80102c2:	2000      	movs	r0, #0
 80102c4:	f000 f8a4 	bl	8010410 <tcp_recv_null>
 80102c8:	4603      	mov	r3, r0
 80102ca:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80102cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d12a      	bne.n	801032a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80102d4:	7bbb      	ldrb	r3, [r7, #14]
 80102d6:	f003 0320 	and.w	r3, r3, #32
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d033      	beq.n	8010346 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80102e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80102e6:	d005      	beq.n	80102f4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80102ec:	3301      	adds	r3, #1
 80102ee:	b29a      	uxth	r2, r3
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d00b      	beq.n	8010316 <tcp_process_refused_data+0xb2>
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	6918      	ldr	r0, [r3, #16]
 8010308:	2300      	movs	r3, #0
 801030a:	2200      	movs	r2, #0
 801030c:	6879      	ldr	r1, [r7, #4]
 801030e:	47a0      	blx	r4
 8010310:	4603      	mov	r3, r0
 8010312:	73fb      	strb	r3, [r7, #15]
 8010314:	e001      	b.n	801031a <tcp_process_refused_data+0xb6>
 8010316:	2300      	movs	r3, #0
 8010318:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801031a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801031e:	f113 0f0d 	cmn.w	r3, #13
 8010322:	d110      	bne.n	8010346 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8010324:	f06f 030c 	mvn.w	r3, #12
 8010328:	e00e      	b.n	8010348 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801032a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801032e:	f113 0f0d 	cmn.w	r3, #13
 8010332:	d102      	bne.n	801033a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010334:	f06f 030c 	mvn.w	r3, #12
 8010338:	e006      	b.n	8010348 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	68ba      	ldr	r2, [r7, #8]
 801033e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8010340:	f06f 0304 	mvn.w	r3, #4
 8010344:	e000      	b.n	8010348 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8010346:	2300      	movs	r3, #0
}
 8010348:	4618      	mov	r0, r3
 801034a:	3714      	adds	r7, #20
 801034c:	46bd      	mov	sp, r7
 801034e:	bd90      	pop	{r4, r7, pc}
 8010350:	0801d36c 	.word	0x0801d36c
 8010354:	0801d87c 	.word	0x0801d87c
 8010358:	0801d3b0 	.word	0x0801d3b0

0801035c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b084      	sub	sp, #16
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010364:	e007      	b.n	8010376 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801036c:	6878      	ldr	r0, [r7, #4]
 801036e:	f000 f80a 	bl	8010386 <tcp_seg_free>
    seg = next;
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d1f4      	bne.n	8010366 <tcp_segs_free+0xa>
  }
}
 801037c:	bf00      	nop
 801037e:	bf00      	nop
 8010380:	3710      	adds	r7, #16
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}

08010386 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010386:	b580      	push	{r7, lr}
 8010388:	b082      	sub	sp, #8
 801038a:	af00      	add	r7, sp, #0
 801038c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d00c      	beq.n	80103ae <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	685b      	ldr	r3, [r3, #4]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d004      	beq.n	80103a6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	685b      	ldr	r3, [r3, #4]
 80103a0:	4618      	mov	r0, r3
 80103a2:	f7fe fb43 	bl	800ea2c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80103a6:	6879      	ldr	r1, [r7, #4]
 80103a8:	2003      	movs	r0, #3
 80103aa:	f7fd fc31 	bl	800dc10 <memp_free>
  }
}
 80103ae:	bf00      	nop
 80103b0:	3708      	adds	r7, #8
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}
	...

080103b8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b084      	sub	sp, #16
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d106      	bne.n	80103d4 <tcp_seg_copy+0x1c>
 80103c6:	4b0f      	ldr	r3, [pc, #60]	; (8010404 <tcp_seg_copy+0x4c>)
 80103c8:	f240 6282 	movw	r2, #1666	; 0x682
 80103cc:	490e      	ldr	r1, [pc, #56]	; (8010408 <tcp_seg_copy+0x50>)
 80103ce:	480f      	ldr	r0, [pc, #60]	; (801040c <tcp_seg_copy+0x54>)
 80103d0:	f00a fcbc 	bl	801ad4c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80103d4:	2003      	movs	r0, #3
 80103d6:	f7fd fbc9 	bl	800db6c <memp_malloc>
 80103da:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d101      	bne.n	80103e6 <tcp_seg_copy+0x2e>
    return NULL;
 80103e2:	2300      	movs	r3, #0
 80103e4:	e00a      	b.n	80103fc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80103e6:	2210      	movs	r2, #16
 80103e8:	6879      	ldr	r1, [r7, #4]
 80103ea:	68f8      	ldr	r0, [r7, #12]
 80103ec:	f00a f8e6 	bl	801a5bc <memcpy>
  pbuf_ref(cseg->p);
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	685b      	ldr	r3, [r3, #4]
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7fe fbbf 	bl	800eb78 <pbuf_ref>
  return cseg;
 80103fa:	68fb      	ldr	r3, [r7, #12]
}
 80103fc:	4618      	mov	r0, r3
 80103fe:	3710      	adds	r7, #16
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}
 8010404:	0801d36c 	.word	0x0801d36c
 8010408:	0801d8c0 	.word	0x0801d8c0
 801040c:	0801d3b0 	.word	0x0801d3b0

08010410 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b084      	sub	sp, #16
 8010414:	af00      	add	r7, sp, #0
 8010416:	60f8      	str	r0, [r7, #12]
 8010418:	60b9      	str	r1, [r7, #8]
 801041a:	607a      	str	r2, [r7, #4]
 801041c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d109      	bne.n	8010438 <tcp_recv_null+0x28>
 8010424:	4b12      	ldr	r3, [pc, #72]	; (8010470 <tcp_recv_null+0x60>)
 8010426:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801042a:	4912      	ldr	r1, [pc, #72]	; (8010474 <tcp_recv_null+0x64>)
 801042c:	4812      	ldr	r0, [pc, #72]	; (8010478 <tcp_recv_null+0x68>)
 801042e:	f00a fc8d 	bl	801ad4c <iprintf>
 8010432:	f06f 030f 	mvn.w	r3, #15
 8010436:	e016      	b.n	8010466 <tcp_recv_null+0x56>

  if (p != NULL) {
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d009      	beq.n	8010452 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	891b      	ldrh	r3, [r3, #8]
 8010442:	4619      	mov	r1, r3
 8010444:	68b8      	ldr	r0, [r7, #8]
 8010446:	f7ff fad3 	bl	800f9f0 <tcp_recved>
    pbuf_free(p);
 801044a:	6878      	ldr	r0, [r7, #4]
 801044c:	f7fe faee 	bl	800ea2c <pbuf_free>
 8010450:	e008      	b.n	8010464 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010452:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d104      	bne.n	8010464 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801045a:	68b8      	ldr	r0, [r7, #8]
 801045c:	f7fe ffa0 	bl	800f3a0 <tcp_close>
 8010460:	4603      	mov	r3, r0
 8010462:	e000      	b.n	8010466 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010464:	2300      	movs	r3, #0
}
 8010466:	4618      	mov	r0, r3
 8010468:	3710      	adds	r7, #16
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}
 801046e:	bf00      	nop
 8010470:	0801d36c 	.word	0x0801d36c
 8010474:	0801d8dc 	.word	0x0801d8dc
 8010478:	0801d3b0 	.word	0x0801d3b0

0801047c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b086      	sub	sp, #24
 8010480:	af00      	add	r7, sp, #0
 8010482:	4603      	mov	r3, r0
 8010484:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801048a:	2b00      	cmp	r3, #0
 801048c:	db01      	blt.n	8010492 <tcp_kill_prio+0x16>
 801048e:	79fb      	ldrb	r3, [r7, #7]
 8010490:	e000      	b.n	8010494 <tcp_kill_prio+0x18>
 8010492:	237f      	movs	r3, #127	; 0x7f
 8010494:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010496:	7afb      	ldrb	r3, [r7, #11]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d034      	beq.n	8010506 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801049c:	7afb      	ldrb	r3, [r7, #11]
 801049e:	3b01      	subs	r3, #1
 80104a0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80104a2:	2300      	movs	r3, #0
 80104a4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80104a6:	2300      	movs	r3, #0
 80104a8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80104aa:	4b19      	ldr	r3, [pc, #100]	; (8010510 <tcp_kill_prio+0x94>)
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	617b      	str	r3, [r7, #20]
 80104b0:	e01f      	b.n	80104f2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80104b2:	697b      	ldr	r3, [r7, #20]
 80104b4:	7d5b      	ldrb	r3, [r3, #21]
 80104b6:	7afa      	ldrb	r2, [r7, #11]
 80104b8:	429a      	cmp	r2, r3
 80104ba:	d80c      	bhi.n	80104d6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80104bc:	697b      	ldr	r3, [r7, #20]
 80104be:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80104c0:	7afa      	ldrb	r2, [r7, #11]
 80104c2:	429a      	cmp	r2, r3
 80104c4:	d112      	bne.n	80104ec <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80104c6:	4b13      	ldr	r3, [pc, #76]	; (8010514 <tcp_kill_prio+0x98>)
 80104c8:	681a      	ldr	r2, [r3, #0]
 80104ca:	697b      	ldr	r3, [r7, #20]
 80104cc:	6a1b      	ldr	r3, [r3, #32]
 80104ce:	1ad3      	subs	r3, r2, r3
 80104d0:	68fa      	ldr	r2, [r7, #12]
 80104d2:	429a      	cmp	r2, r3
 80104d4:	d80a      	bhi.n	80104ec <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80104d6:	4b0f      	ldr	r3, [pc, #60]	; (8010514 <tcp_kill_prio+0x98>)
 80104d8:	681a      	ldr	r2, [r3, #0]
 80104da:	697b      	ldr	r3, [r7, #20]
 80104dc:	6a1b      	ldr	r3, [r3, #32]
 80104de:	1ad3      	subs	r3, r2, r3
 80104e0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80104e2:	697b      	ldr	r3, [r7, #20]
 80104e4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80104e6:	697b      	ldr	r3, [r7, #20]
 80104e8:	7d5b      	ldrb	r3, [r3, #21]
 80104ea:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80104ec:	697b      	ldr	r3, [r7, #20]
 80104ee:	68db      	ldr	r3, [r3, #12]
 80104f0:	617b      	str	r3, [r7, #20]
 80104f2:	697b      	ldr	r3, [r7, #20]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d1dc      	bne.n	80104b2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80104f8:	693b      	ldr	r3, [r7, #16]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d004      	beq.n	8010508 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80104fe:	6938      	ldr	r0, [r7, #16]
 8010500:	f7ff f894 	bl	800f62c <tcp_abort>
 8010504:	e000      	b.n	8010508 <tcp_kill_prio+0x8c>
    return;
 8010506:	bf00      	nop
  }
}
 8010508:	3718      	adds	r7, #24
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}
 801050e:	bf00      	nop
 8010510:	200120a0 	.word	0x200120a0
 8010514:	200120a4 	.word	0x200120a4

08010518 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b086      	sub	sp, #24
 801051c:	af00      	add	r7, sp, #0
 801051e:	4603      	mov	r3, r0
 8010520:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010522:	79fb      	ldrb	r3, [r7, #7]
 8010524:	2b08      	cmp	r3, #8
 8010526:	d009      	beq.n	801053c <tcp_kill_state+0x24>
 8010528:	79fb      	ldrb	r3, [r7, #7]
 801052a:	2b09      	cmp	r3, #9
 801052c:	d006      	beq.n	801053c <tcp_kill_state+0x24>
 801052e:	4b1a      	ldr	r3, [pc, #104]	; (8010598 <tcp_kill_state+0x80>)
 8010530:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010534:	4919      	ldr	r1, [pc, #100]	; (801059c <tcp_kill_state+0x84>)
 8010536:	481a      	ldr	r0, [pc, #104]	; (80105a0 <tcp_kill_state+0x88>)
 8010538:	f00a fc08 	bl	801ad4c <iprintf>

  inactivity = 0;
 801053c:	2300      	movs	r3, #0
 801053e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010540:	2300      	movs	r3, #0
 8010542:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010544:	4b17      	ldr	r3, [pc, #92]	; (80105a4 <tcp_kill_state+0x8c>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	617b      	str	r3, [r7, #20]
 801054a:	e017      	b.n	801057c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	7d1b      	ldrb	r3, [r3, #20]
 8010550:	79fa      	ldrb	r2, [r7, #7]
 8010552:	429a      	cmp	r2, r3
 8010554:	d10f      	bne.n	8010576 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010556:	4b14      	ldr	r3, [pc, #80]	; (80105a8 <tcp_kill_state+0x90>)
 8010558:	681a      	ldr	r2, [r3, #0]
 801055a:	697b      	ldr	r3, [r7, #20]
 801055c:	6a1b      	ldr	r3, [r3, #32]
 801055e:	1ad3      	subs	r3, r2, r3
 8010560:	68fa      	ldr	r2, [r7, #12]
 8010562:	429a      	cmp	r2, r3
 8010564:	d807      	bhi.n	8010576 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010566:	4b10      	ldr	r3, [pc, #64]	; (80105a8 <tcp_kill_state+0x90>)
 8010568:	681a      	ldr	r2, [r3, #0]
 801056a:	697b      	ldr	r3, [r7, #20]
 801056c:	6a1b      	ldr	r3, [r3, #32]
 801056e:	1ad3      	subs	r3, r2, r3
 8010570:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010572:	697b      	ldr	r3, [r7, #20]
 8010574:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010576:	697b      	ldr	r3, [r7, #20]
 8010578:	68db      	ldr	r3, [r3, #12]
 801057a:	617b      	str	r3, [r7, #20]
 801057c:	697b      	ldr	r3, [r7, #20]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d1e4      	bne.n	801054c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d003      	beq.n	8010590 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010588:	2100      	movs	r1, #0
 801058a:	6938      	ldr	r0, [r7, #16]
 801058c:	f7fe ff90 	bl	800f4b0 <tcp_abandon>
  }
}
 8010590:	bf00      	nop
 8010592:	3718      	adds	r7, #24
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}
 8010598:	0801d36c 	.word	0x0801d36c
 801059c:	0801d8f8 	.word	0x0801d8f8
 80105a0:	0801d3b0 	.word	0x0801d3b0
 80105a4:	200120a0 	.word	0x200120a0
 80105a8:	200120a4 	.word	0x200120a4

080105ac <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b084      	sub	sp, #16
 80105b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80105b2:	2300      	movs	r3, #0
 80105b4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80105b6:	2300      	movs	r3, #0
 80105b8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80105ba:	4b12      	ldr	r3, [pc, #72]	; (8010604 <tcp_kill_timewait+0x58>)
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	60fb      	str	r3, [r7, #12]
 80105c0:	e012      	b.n	80105e8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80105c2:	4b11      	ldr	r3, [pc, #68]	; (8010608 <tcp_kill_timewait+0x5c>)
 80105c4:	681a      	ldr	r2, [r3, #0]
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	6a1b      	ldr	r3, [r3, #32]
 80105ca:	1ad3      	subs	r3, r2, r3
 80105cc:	687a      	ldr	r2, [r7, #4]
 80105ce:	429a      	cmp	r2, r3
 80105d0:	d807      	bhi.n	80105e2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80105d2:	4b0d      	ldr	r3, [pc, #52]	; (8010608 <tcp_kill_timewait+0x5c>)
 80105d4:	681a      	ldr	r2, [r3, #0]
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	6a1b      	ldr	r3, [r3, #32]
 80105da:	1ad3      	subs	r3, r2, r3
 80105dc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	68db      	ldr	r3, [r3, #12]
 80105e6:	60fb      	str	r3, [r7, #12]
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d1e9      	bne.n	80105c2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d002      	beq.n	80105fa <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80105f4:	68b8      	ldr	r0, [r7, #8]
 80105f6:	f7ff f819 	bl	800f62c <tcp_abort>
  }
}
 80105fa:	bf00      	nop
 80105fc:	3710      	adds	r7, #16
 80105fe:	46bd      	mov	sp, r7
 8010600:	bd80      	pop	{r7, pc}
 8010602:	bf00      	nop
 8010604:	200120b0 	.word	0x200120b0
 8010608:	200120a4 	.word	0x200120a4

0801060c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b082      	sub	sp, #8
 8010610:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010612:	4b10      	ldr	r3, [pc, #64]	; (8010654 <tcp_handle_closepend+0x48>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010618:	e014      	b.n	8010644 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	68db      	ldr	r3, [r3, #12]
 801061e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	8b5b      	ldrh	r3, [r3, #26]
 8010624:	f003 0308 	and.w	r3, r3, #8
 8010628:	2b00      	cmp	r3, #0
 801062a:	d009      	beq.n	8010640 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	8b5b      	ldrh	r3, [r3, #26]
 8010630:	f023 0308 	bic.w	r3, r3, #8
 8010634:	b29a      	uxth	r2, r3
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	f7fe fe46 	bl	800f2cc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d1e7      	bne.n	801061a <tcp_handle_closepend+0xe>
  }
}
 801064a:	bf00      	nop
 801064c:	bf00      	nop
 801064e:	3708      	adds	r7, #8
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}
 8010654:	200120a0 	.word	0x200120a0

08010658 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b084      	sub	sp, #16
 801065c:	af00      	add	r7, sp, #0
 801065e:	4603      	mov	r3, r0
 8010660:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010662:	2001      	movs	r0, #1
 8010664:	f7fd fa82 	bl	800db6c <memp_malloc>
 8010668:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d126      	bne.n	80106be <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010670:	f7ff ffcc 	bl	801060c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010674:	f7ff ff9a 	bl	80105ac <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010678:	2001      	movs	r0, #1
 801067a:	f7fd fa77 	bl	800db6c <memp_malloc>
 801067e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d11b      	bne.n	80106be <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010686:	2009      	movs	r0, #9
 8010688:	f7ff ff46 	bl	8010518 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801068c:	2001      	movs	r0, #1
 801068e:	f7fd fa6d 	bl	800db6c <memp_malloc>
 8010692:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d111      	bne.n	80106be <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801069a:	2008      	movs	r0, #8
 801069c:	f7ff ff3c 	bl	8010518 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80106a0:	2001      	movs	r0, #1
 80106a2:	f7fd fa63 	bl	800db6c <memp_malloc>
 80106a6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d107      	bne.n	80106be <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80106ae:	79fb      	ldrb	r3, [r7, #7]
 80106b0:	4618      	mov	r0, r3
 80106b2:	f7ff fee3 	bl	801047c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80106b6:	2001      	movs	r0, #1
 80106b8:	f7fd fa58 	bl	800db6c <memp_malloc>
 80106bc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d03f      	beq.n	8010744 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80106c4:	229c      	movs	r2, #156	; 0x9c
 80106c6:	2100      	movs	r1, #0
 80106c8:	68f8      	ldr	r0, [r7, #12]
 80106ca:	f009 ff9f 	bl	801a60c <memset>
    pcb->prio = prio;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	79fa      	ldrb	r2, [r7, #7]
 80106d2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80106da:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80106e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	22ff      	movs	r2, #255	; 0xff
 80106f2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80106fa:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	2206      	movs	r2, #6
 8010700:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	2206      	movs	r2, #6
 8010708:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010710:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	2201      	movs	r2, #1
 8010716:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801071a:	4b0d      	ldr	r3, [pc, #52]	; (8010750 <tcp_alloc+0xf8>)
 801071c:	681a      	ldr	r2, [r3, #0]
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010722:	4b0c      	ldr	r3, [pc, #48]	; (8010754 <tcp_alloc+0xfc>)
 8010724:	781a      	ldrb	r2, [r3, #0]
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010730:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	4a08      	ldr	r2, [pc, #32]	; (8010758 <tcp_alloc+0x100>)
 8010738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	4a07      	ldr	r2, [pc, #28]	; (801075c <tcp_alloc+0x104>)
 8010740:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010744:	68fb      	ldr	r3, [r7, #12]
}
 8010746:	4618      	mov	r0, r3
 8010748:	3710      	adds	r7, #16
 801074a:	46bd      	mov	sp, r7
 801074c:	bd80      	pop	{r7, pc}
 801074e:	bf00      	nop
 8010750:	200120a4 	.word	0x200120a4
 8010754:	2000b21a 	.word	0x2000b21a
 8010758:	08010411 	.word	0x08010411
 801075c:	006ddd00 	.word	0x006ddd00

08010760 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b084      	sub	sp, #16
 8010764:	af00      	add	r7, sp, #0
 8010766:	4603      	mov	r3, r0
 8010768:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801076a:	2040      	movs	r0, #64	; 0x40
 801076c:	f7ff ff74 	bl	8010658 <tcp_alloc>
 8010770:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8010772:	68fb      	ldr	r3, [r7, #12]
}
 8010774:	4618      	mov	r0, r3
 8010776:	3710      	adds	r7, #16
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}

0801077c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801077c:	b480      	push	{r7}
 801077e:	b083      	sub	sp, #12
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d002      	beq.n	8010792 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	683a      	ldr	r2, [r7, #0]
 8010790:	611a      	str	r2, [r3, #16]
  }
}
 8010792:	bf00      	nop
 8010794:	370c      	adds	r7, #12
 8010796:	46bd      	mov	sp, r7
 8010798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079c:	4770      	bx	lr
	...

080107a0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b082      	sub	sp, #8
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
 80107a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d00e      	beq.n	80107ce <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	7d1b      	ldrb	r3, [r3, #20]
 80107b4:	2b01      	cmp	r3, #1
 80107b6:	d106      	bne.n	80107c6 <tcp_recv+0x26>
 80107b8:	4b07      	ldr	r3, [pc, #28]	; (80107d8 <tcp_recv+0x38>)
 80107ba:	f240 72df 	movw	r2, #2015	; 0x7df
 80107be:	4907      	ldr	r1, [pc, #28]	; (80107dc <tcp_recv+0x3c>)
 80107c0:	4807      	ldr	r0, [pc, #28]	; (80107e0 <tcp_recv+0x40>)
 80107c2:	f00a fac3 	bl	801ad4c <iprintf>
    pcb->recv = recv;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	683a      	ldr	r2, [r7, #0]
 80107ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80107ce:	bf00      	nop
 80107d0:	3708      	adds	r7, #8
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd80      	pop	{r7, pc}
 80107d6:	bf00      	nop
 80107d8:	0801d36c 	.word	0x0801d36c
 80107dc:	0801d908 	.word	0x0801d908
 80107e0:	0801d3b0 	.word	0x0801d3b0

080107e4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b082      	sub	sp, #8
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
 80107ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d00e      	beq.n	8010812 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	7d1b      	ldrb	r3, [r3, #20]
 80107f8:	2b01      	cmp	r3, #1
 80107fa:	d106      	bne.n	801080a <tcp_sent+0x26>
 80107fc:	4b07      	ldr	r3, [pc, #28]	; (801081c <tcp_sent+0x38>)
 80107fe:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8010802:	4907      	ldr	r1, [pc, #28]	; (8010820 <tcp_sent+0x3c>)
 8010804:	4807      	ldr	r0, [pc, #28]	; (8010824 <tcp_sent+0x40>)
 8010806:	f00a faa1 	bl	801ad4c <iprintf>
    pcb->sent = sent;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	683a      	ldr	r2, [r7, #0]
 801080e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8010812:	bf00      	nop
 8010814:	3708      	adds	r7, #8
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}
 801081a:	bf00      	nop
 801081c:	0801d36c 	.word	0x0801d36c
 8010820:	0801d930 	.word	0x0801d930
 8010824:	0801d3b0 	.word	0x0801d3b0

08010828 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b082      	sub	sp, #8
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
 8010830:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d00e      	beq.n	8010856 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	7d1b      	ldrb	r3, [r3, #20]
 801083c:	2b01      	cmp	r3, #1
 801083e:	d106      	bne.n	801084e <tcp_err+0x26>
 8010840:	4b07      	ldr	r3, [pc, #28]	; (8010860 <tcp_err+0x38>)
 8010842:	f640 020d 	movw	r2, #2061	; 0x80d
 8010846:	4907      	ldr	r1, [pc, #28]	; (8010864 <tcp_err+0x3c>)
 8010848:	4807      	ldr	r0, [pc, #28]	; (8010868 <tcp_err+0x40>)
 801084a:	f00a fa7f 	bl	801ad4c <iprintf>
    pcb->errf = err;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	683a      	ldr	r2, [r7, #0]
 8010852:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8010856:	bf00      	nop
 8010858:	3708      	adds	r7, #8
 801085a:	46bd      	mov	sp, r7
 801085c:	bd80      	pop	{r7, pc}
 801085e:	bf00      	nop
 8010860:	0801d36c 	.word	0x0801d36c
 8010864:	0801d958 	.word	0x0801d958
 8010868:	0801d3b0 	.word	0x0801d3b0

0801086c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801086c:	b480      	push	{r7}
 801086e:	b085      	sub	sp, #20
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
 8010874:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d008      	beq.n	801088e <tcp_accept+0x22>
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	7d1b      	ldrb	r3, [r3, #20]
 8010880:	2b01      	cmp	r3, #1
 8010882:	d104      	bne.n	801088e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	683a      	ldr	r2, [r7, #0]
 801088c:	619a      	str	r2, [r3, #24]
  }
}
 801088e:	bf00      	nop
 8010890:	3714      	adds	r7, #20
 8010892:	46bd      	mov	sp, r7
 8010894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010898:	4770      	bx	lr
	...

0801089c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b084      	sub	sp, #16
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	60f8      	str	r0, [r7, #12]
 80108a4:	60b9      	str	r1, [r7, #8]
 80108a6:	4613      	mov	r3, r2
 80108a8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d107      	bne.n	80108c0 <tcp_poll+0x24>
 80108b0:	4b0e      	ldr	r3, [pc, #56]	; (80108ec <tcp_poll+0x50>)
 80108b2:	f640 023d 	movw	r2, #2109	; 0x83d
 80108b6:	490e      	ldr	r1, [pc, #56]	; (80108f0 <tcp_poll+0x54>)
 80108b8:	480e      	ldr	r0, [pc, #56]	; (80108f4 <tcp_poll+0x58>)
 80108ba:	f00a fa47 	bl	801ad4c <iprintf>
 80108be:	e011      	b.n	80108e4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	7d1b      	ldrb	r3, [r3, #20]
 80108c4:	2b01      	cmp	r3, #1
 80108c6:	d106      	bne.n	80108d6 <tcp_poll+0x3a>
 80108c8:	4b08      	ldr	r3, [pc, #32]	; (80108ec <tcp_poll+0x50>)
 80108ca:	f640 023e 	movw	r2, #2110	; 0x83e
 80108ce:	490a      	ldr	r1, [pc, #40]	; (80108f8 <tcp_poll+0x5c>)
 80108d0:	4808      	ldr	r0, [pc, #32]	; (80108f4 <tcp_poll+0x58>)
 80108d2:	f00a fa3b 	bl	801ad4c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	68ba      	ldr	r2, [r7, #8]
 80108da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	79fa      	ldrb	r2, [r7, #7]
 80108e2:	775a      	strb	r2, [r3, #29]
}
 80108e4:	3710      	adds	r7, #16
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bd80      	pop	{r7, pc}
 80108ea:	bf00      	nop
 80108ec:	0801d36c 	.word	0x0801d36c
 80108f0:	0801d980 	.word	0x0801d980
 80108f4:	0801d3b0 	.word	0x0801d3b0
 80108f8:	0801d998 	.word	0x0801d998

080108fc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b082      	sub	sp, #8
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d107      	bne.n	801091a <tcp_pcb_purge+0x1e>
 801090a:	4b21      	ldr	r3, [pc, #132]	; (8010990 <tcp_pcb_purge+0x94>)
 801090c:	f640 0251 	movw	r2, #2129	; 0x851
 8010910:	4920      	ldr	r1, [pc, #128]	; (8010994 <tcp_pcb_purge+0x98>)
 8010912:	4821      	ldr	r0, [pc, #132]	; (8010998 <tcp_pcb_purge+0x9c>)
 8010914:	f00a fa1a 	bl	801ad4c <iprintf>
 8010918:	e037      	b.n	801098a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	7d1b      	ldrb	r3, [r3, #20]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d033      	beq.n	801098a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010926:	2b0a      	cmp	r3, #10
 8010928:	d02f      	beq.n	801098a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801092e:	2b01      	cmp	r3, #1
 8010930:	d02b      	beq.n	801098a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010936:	2b00      	cmp	r3, #0
 8010938:	d007      	beq.n	801094a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801093e:	4618      	mov	r0, r3
 8010940:	f7fe f874 	bl	800ea2c <pbuf_free>
      pcb->refused_data = NULL;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2200      	movs	r2, #0
 8010948:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801094e:	2b00      	cmp	r3, #0
 8010950:	d002      	beq.n	8010958 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	f000 f986 	bl	8010c64 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801095e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010964:	4618      	mov	r0, r3
 8010966:	f7ff fcf9 	bl	801035c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801096e:	4618      	mov	r0, r3
 8010970:	f7ff fcf4 	bl	801035c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	2200      	movs	r2, #0
 8010978:	66da      	str	r2, [r3, #108]	; 0x6c
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	2200      	movs	r2, #0
 8010986:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801098a:	3708      	adds	r7, #8
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}
 8010990:	0801d36c 	.word	0x0801d36c
 8010994:	0801d9b8 	.word	0x0801d9b8
 8010998:	0801d3b0 	.word	0x0801d3b0

0801099c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b084      	sub	sp, #16
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
 80109a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80109a6:	683b      	ldr	r3, [r7, #0]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d106      	bne.n	80109ba <tcp_pcb_remove+0x1e>
 80109ac:	4b3e      	ldr	r3, [pc, #248]	; (8010aa8 <tcp_pcb_remove+0x10c>)
 80109ae:	f640 0283 	movw	r2, #2179	; 0x883
 80109b2:	493e      	ldr	r1, [pc, #248]	; (8010aac <tcp_pcb_remove+0x110>)
 80109b4:	483e      	ldr	r0, [pc, #248]	; (8010ab0 <tcp_pcb_remove+0x114>)
 80109b6:	f00a f9c9 	bl	801ad4c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d106      	bne.n	80109ce <tcp_pcb_remove+0x32>
 80109c0:	4b39      	ldr	r3, [pc, #228]	; (8010aa8 <tcp_pcb_remove+0x10c>)
 80109c2:	f640 0284 	movw	r2, #2180	; 0x884
 80109c6:	493b      	ldr	r1, [pc, #236]	; (8010ab4 <tcp_pcb_remove+0x118>)
 80109c8:	4839      	ldr	r0, [pc, #228]	; (8010ab0 <tcp_pcb_remove+0x114>)
 80109ca:	f00a f9bf 	bl	801ad4c <iprintf>

  TCP_RMV(pcblist, pcb);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	683a      	ldr	r2, [r7, #0]
 80109d4:	429a      	cmp	r2, r3
 80109d6:	d105      	bne.n	80109e4 <tcp_pcb_remove+0x48>
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	68da      	ldr	r2, [r3, #12]
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	601a      	str	r2, [r3, #0]
 80109e2:	e013      	b.n	8010a0c <tcp_pcb_remove+0x70>
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	60fb      	str	r3, [r7, #12]
 80109ea:	e00c      	b.n	8010a06 <tcp_pcb_remove+0x6a>
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	68db      	ldr	r3, [r3, #12]
 80109f0:	683a      	ldr	r2, [r7, #0]
 80109f2:	429a      	cmp	r2, r3
 80109f4:	d104      	bne.n	8010a00 <tcp_pcb_remove+0x64>
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	68da      	ldr	r2, [r3, #12]
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	60da      	str	r2, [r3, #12]
 80109fe:	e005      	b.n	8010a0c <tcp_pcb_remove+0x70>
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	68db      	ldr	r3, [r3, #12]
 8010a04:	60fb      	str	r3, [r7, #12]
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d1ef      	bne.n	80109ec <tcp_pcb_remove+0x50>
 8010a0c:	683b      	ldr	r3, [r7, #0]
 8010a0e:	2200      	movs	r2, #0
 8010a10:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010a12:	6838      	ldr	r0, [r7, #0]
 8010a14:	f7ff ff72 	bl	80108fc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010a18:	683b      	ldr	r3, [r7, #0]
 8010a1a:	7d1b      	ldrb	r3, [r3, #20]
 8010a1c:	2b0a      	cmp	r3, #10
 8010a1e:	d013      	beq.n	8010a48 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010a24:	2b01      	cmp	r3, #1
 8010a26:	d00f      	beq.n	8010a48 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	8b5b      	ldrh	r3, [r3, #26]
 8010a2c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d009      	beq.n	8010a48 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010a34:	683b      	ldr	r3, [r7, #0]
 8010a36:	8b5b      	ldrh	r3, [r3, #26]
 8010a38:	f043 0302 	orr.w	r3, r3, #2
 8010a3c:	b29a      	uxth	r2, r3
 8010a3e:	683b      	ldr	r3, [r7, #0]
 8010a40:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010a42:	6838      	ldr	r0, [r7, #0]
 8010a44:	f003 fbc2 	bl	80141cc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	7d1b      	ldrb	r3, [r3, #20]
 8010a4c:	2b01      	cmp	r3, #1
 8010a4e:	d020      	beq.n	8010a92 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d006      	beq.n	8010a66 <tcp_pcb_remove+0xca>
 8010a58:	4b13      	ldr	r3, [pc, #76]	; (8010aa8 <tcp_pcb_remove+0x10c>)
 8010a5a:	f640 0293 	movw	r2, #2195	; 0x893
 8010a5e:	4916      	ldr	r1, [pc, #88]	; (8010ab8 <tcp_pcb_remove+0x11c>)
 8010a60:	4813      	ldr	r0, [pc, #76]	; (8010ab0 <tcp_pcb_remove+0x114>)
 8010a62:	f00a f973 	bl	801ad4c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010a66:	683b      	ldr	r3, [r7, #0]
 8010a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d006      	beq.n	8010a7c <tcp_pcb_remove+0xe0>
 8010a6e:	4b0e      	ldr	r3, [pc, #56]	; (8010aa8 <tcp_pcb_remove+0x10c>)
 8010a70:	f640 0294 	movw	r2, #2196	; 0x894
 8010a74:	4911      	ldr	r1, [pc, #68]	; (8010abc <tcp_pcb_remove+0x120>)
 8010a76:	480e      	ldr	r0, [pc, #56]	; (8010ab0 <tcp_pcb_remove+0x114>)
 8010a78:	f00a f968 	bl	801ad4c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010a7c:	683b      	ldr	r3, [r7, #0]
 8010a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d006      	beq.n	8010a92 <tcp_pcb_remove+0xf6>
 8010a84:	4b08      	ldr	r3, [pc, #32]	; (8010aa8 <tcp_pcb_remove+0x10c>)
 8010a86:	f640 0296 	movw	r2, #2198	; 0x896
 8010a8a:	490d      	ldr	r1, [pc, #52]	; (8010ac0 <tcp_pcb_remove+0x124>)
 8010a8c:	4808      	ldr	r0, [pc, #32]	; (8010ab0 <tcp_pcb_remove+0x114>)
 8010a8e:	f00a f95d 	bl	801ad4c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010a92:	683b      	ldr	r3, [r7, #0]
 8010a94:	2200      	movs	r2, #0
 8010a96:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010a98:	683b      	ldr	r3, [r7, #0]
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010a9e:	bf00      	nop
 8010aa0:	3710      	adds	r7, #16
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd80      	pop	{r7, pc}
 8010aa6:	bf00      	nop
 8010aa8:	0801d36c 	.word	0x0801d36c
 8010aac:	0801d9d4 	.word	0x0801d9d4
 8010ab0:	0801d3b0 	.word	0x0801d3b0
 8010ab4:	0801d9f0 	.word	0x0801d9f0
 8010ab8:	0801da10 	.word	0x0801da10
 8010abc:	0801da28 	.word	0x0801da28
 8010ac0:	0801da44 	.word	0x0801da44

08010ac4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b082      	sub	sp, #8
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d106      	bne.n	8010ae0 <tcp_next_iss+0x1c>
 8010ad2:	4b0a      	ldr	r3, [pc, #40]	; (8010afc <tcp_next_iss+0x38>)
 8010ad4:	f640 02af 	movw	r2, #2223	; 0x8af
 8010ad8:	4909      	ldr	r1, [pc, #36]	; (8010b00 <tcp_next_iss+0x3c>)
 8010ada:	480a      	ldr	r0, [pc, #40]	; (8010b04 <tcp_next_iss+0x40>)
 8010adc:	f00a f936 	bl	801ad4c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010ae0:	4b09      	ldr	r3, [pc, #36]	; (8010b08 <tcp_next_iss+0x44>)
 8010ae2:	681a      	ldr	r2, [r3, #0]
 8010ae4:	4b09      	ldr	r3, [pc, #36]	; (8010b0c <tcp_next_iss+0x48>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	4413      	add	r3, r2
 8010aea:	4a07      	ldr	r2, [pc, #28]	; (8010b08 <tcp_next_iss+0x44>)
 8010aec:	6013      	str	r3, [r2, #0]
  return iss;
 8010aee:	4b06      	ldr	r3, [pc, #24]	; (8010b08 <tcp_next_iss+0x44>)
 8010af0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010af2:	4618      	mov	r0, r3
 8010af4:	3708      	adds	r7, #8
 8010af6:	46bd      	mov	sp, r7
 8010af8:	bd80      	pop	{r7, pc}
 8010afa:	bf00      	nop
 8010afc:	0801d36c 	.word	0x0801d36c
 8010b00:	0801da5c 	.word	0x0801da5c
 8010b04:	0801d3b0 	.word	0x0801d3b0
 8010b08:	20000014 	.word	0x20000014
 8010b0c:	200120a4 	.word	0x200120a4

08010b10 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b086      	sub	sp, #24
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	4603      	mov	r3, r0
 8010b18:	60b9      	str	r1, [r7, #8]
 8010b1a:	607a      	str	r2, [r7, #4]
 8010b1c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d106      	bne.n	8010b32 <tcp_eff_send_mss_netif+0x22>
 8010b24:	4b14      	ldr	r3, [pc, #80]	; (8010b78 <tcp_eff_send_mss_netif+0x68>)
 8010b26:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8010b2a:	4914      	ldr	r1, [pc, #80]	; (8010b7c <tcp_eff_send_mss_netif+0x6c>)
 8010b2c:	4814      	ldr	r0, [pc, #80]	; (8010b80 <tcp_eff_send_mss_netif+0x70>)
 8010b2e:	f00a f90d 	bl	801ad4c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010b32:	68bb      	ldr	r3, [r7, #8]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d101      	bne.n	8010b3c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010b38:	89fb      	ldrh	r3, [r7, #14]
 8010b3a:	e019      	b.n	8010b70 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010b3c:	68bb      	ldr	r3, [r7, #8]
 8010b3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010b40:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010b42:	8afb      	ldrh	r3, [r7, #22]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d012      	beq.n	8010b6e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010b48:	2328      	movs	r3, #40	; 0x28
 8010b4a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010b4c:	8afa      	ldrh	r2, [r7, #22]
 8010b4e:	8abb      	ldrh	r3, [r7, #20]
 8010b50:	429a      	cmp	r2, r3
 8010b52:	d904      	bls.n	8010b5e <tcp_eff_send_mss_netif+0x4e>
 8010b54:	8afa      	ldrh	r2, [r7, #22]
 8010b56:	8abb      	ldrh	r3, [r7, #20]
 8010b58:	1ad3      	subs	r3, r2, r3
 8010b5a:	b29b      	uxth	r3, r3
 8010b5c:	e000      	b.n	8010b60 <tcp_eff_send_mss_netif+0x50>
 8010b5e:	2300      	movs	r3, #0
 8010b60:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010b62:	8a7a      	ldrh	r2, [r7, #18]
 8010b64:	89fb      	ldrh	r3, [r7, #14]
 8010b66:	4293      	cmp	r3, r2
 8010b68:	bf28      	it	cs
 8010b6a:	4613      	movcs	r3, r2
 8010b6c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010b6e:	89fb      	ldrh	r3, [r7, #14]
}
 8010b70:	4618      	mov	r0, r3
 8010b72:	3718      	adds	r7, #24
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}
 8010b78:	0801d36c 	.word	0x0801d36c
 8010b7c:	0801da78 	.word	0x0801da78
 8010b80:	0801d3b0 	.word	0x0801d3b0

08010b84 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b084      	sub	sp, #16
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
 8010b8c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8010b8e:	683b      	ldr	r3, [r7, #0]
 8010b90:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d119      	bne.n	8010bcc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010b98:	4b10      	ldr	r3, [pc, #64]	; (8010bdc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010b9a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8010b9e:	4910      	ldr	r1, [pc, #64]	; (8010be0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010ba0:	4810      	ldr	r0, [pc, #64]	; (8010be4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010ba2:	f00a f8d3 	bl	801ad4c <iprintf>

  while (pcb != NULL) {
 8010ba6:	e011      	b.n	8010bcc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	681a      	ldr	r2, [r3, #0]
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	429a      	cmp	r2, r3
 8010bb2:	d108      	bne.n	8010bc6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	68db      	ldr	r3, [r3, #12]
 8010bb8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010bba:	68f8      	ldr	r0, [r7, #12]
 8010bbc:	f7fe fd36 	bl	800f62c <tcp_abort>
      pcb = next;
 8010bc0:	68bb      	ldr	r3, [r7, #8]
 8010bc2:	60fb      	str	r3, [r7, #12]
 8010bc4:	e002      	b.n	8010bcc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	68db      	ldr	r3, [r3, #12]
 8010bca:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d1ea      	bne.n	8010ba8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010bd2:	bf00      	nop
 8010bd4:	bf00      	nop
 8010bd6:	3710      	adds	r7, #16
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}
 8010bdc:	0801d36c 	.word	0x0801d36c
 8010be0:	0801daa0 	.word	0x0801daa0
 8010be4:	0801d3b0 	.word	0x0801d3b0

08010be8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b084      	sub	sp, #16
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
 8010bf0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d02a      	beq.n	8010c4e <tcp_netif_ip_addr_changed+0x66>
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d026      	beq.n	8010c4e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010c00:	4b15      	ldr	r3, [pc, #84]	; (8010c58 <tcp_netif_ip_addr_changed+0x70>)
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	4619      	mov	r1, r3
 8010c06:	6878      	ldr	r0, [r7, #4]
 8010c08:	f7ff ffbc 	bl	8010b84 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010c0c:	4b13      	ldr	r3, [pc, #76]	; (8010c5c <tcp_netif_ip_addr_changed+0x74>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	4619      	mov	r1, r3
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f7ff ffb6 	bl	8010b84 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010c18:	683b      	ldr	r3, [r7, #0]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d017      	beq.n	8010c4e <tcp_netif_ip_addr_changed+0x66>
 8010c1e:	683b      	ldr	r3, [r7, #0]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d013      	beq.n	8010c4e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010c26:	4b0e      	ldr	r3, [pc, #56]	; (8010c60 <tcp_netif_ip_addr_changed+0x78>)
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	60fb      	str	r3, [r7, #12]
 8010c2c:	e00c      	b.n	8010c48 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	681a      	ldr	r2, [r3, #0]
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	429a      	cmp	r2, r3
 8010c38:	d103      	bne.n	8010c42 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	681a      	ldr	r2, [r3, #0]
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	68db      	ldr	r3, [r3, #12]
 8010c46:	60fb      	str	r3, [r7, #12]
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d1ef      	bne.n	8010c2e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010c4e:	bf00      	nop
 8010c50:	3710      	adds	r7, #16
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}
 8010c56:	bf00      	nop
 8010c58:	200120a0 	.word	0x200120a0
 8010c5c:	200120ac 	.word	0x200120ac
 8010c60:	200120a8 	.word	0x200120a8

08010c64 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b082      	sub	sp, #8
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d007      	beq.n	8010c84 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f7ff fb6f 	bl	801035c <tcp_segs_free>
    pcb->ooseq = NULL;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	2200      	movs	r2, #0
 8010c82:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010c84:	bf00      	nop
 8010c86:	3708      	adds	r7, #8
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}

08010c8c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010c8c:	b590      	push	{r4, r7, lr}
 8010c8e:	b08d      	sub	sp, #52	; 0x34
 8010c90:	af04      	add	r7, sp, #16
 8010c92:	6078      	str	r0, [r7, #4]
 8010c94:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d105      	bne.n	8010ca8 <tcp_input+0x1c>
 8010c9c:	4b9b      	ldr	r3, [pc, #620]	; (8010f0c <tcp_input+0x280>)
 8010c9e:	2283      	movs	r2, #131	; 0x83
 8010ca0:	499b      	ldr	r1, [pc, #620]	; (8010f10 <tcp_input+0x284>)
 8010ca2:	489c      	ldr	r0, [pc, #624]	; (8010f14 <tcp_input+0x288>)
 8010ca4:	f00a f852 	bl	801ad4c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	685b      	ldr	r3, [r3, #4]
 8010cac:	4a9a      	ldr	r2, [pc, #616]	; (8010f18 <tcp_input+0x28c>)
 8010cae:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	895b      	ldrh	r3, [r3, #10]
 8010cb4:	2b13      	cmp	r3, #19
 8010cb6:	f240 83c4 	bls.w	8011442 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010cba:	4b98      	ldr	r3, [pc, #608]	; (8010f1c <tcp_input+0x290>)
 8010cbc:	695b      	ldr	r3, [r3, #20]
 8010cbe:	4a97      	ldr	r2, [pc, #604]	; (8010f1c <tcp_input+0x290>)
 8010cc0:	6812      	ldr	r2, [r2, #0]
 8010cc2:	4611      	mov	r1, r2
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f006 fbe5 	bl	8017494 <ip4_addr_isbroadcast_u32>
 8010cca:	4603      	mov	r3, r0
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	f040 83ba 	bne.w	8011446 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010cd2:	4b92      	ldr	r3, [pc, #584]	; (8010f1c <tcp_input+0x290>)
 8010cd4:	695b      	ldr	r3, [r3, #20]
 8010cd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010cda:	2be0      	cmp	r3, #224	; 0xe0
 8010cdc:	f000 83b3 	beq.w	8011446 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010ce0:	4b8d      	ldr	r3, [pc, #564]	; (8010f18 <tcp_input+0x28c>)
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	899b      	ldrh	r3, [r3, #12]
 8010ce6:	b29b      	uxth	r3, r3
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f7fc fa89 	bl	800d200 <lwip_htons>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	0b1b      	lsrs	r3, r3, #12
 8010cf2:	b29b      	uxth	r3, r3
 8010cf4:	b2db      	uxtb	r3, r3
 8010cf6:	009b      	lsls	r3, r3, #2
 8010cf8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010cfa:	7cbb      	ldrb	r3, [r7, #18]
 8010cfc:	2b13      	cmp	r3, #19
 8010cfe:	f240 83a4 	bls.w	801144a <tcp_input+0x7be>
 8010d02:	7cbb      	ldrb	r3, [r7, #18]
 8010d04:	b29a      	uxth	r2, r3
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	891b      	ldrh	r3, [r3, #8]
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	f200 839d 	bhi.w	801144a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010d10:	7cbb      	ldrb	r3, [r7, #18]
 8010d12:	b29b      	uxth	r3, r3
 8010d14:	3b14      	subs	r3, #20
 8010d16:	b29a      	uxth	r2, r3
 8010d18:	4b81      	ldr	r3, [pc, #516]	; (8010f20 <tcp_input+0x294>)
 8010d1a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010d1c:	4b81      	ldr	r3, [pc, #516]	; (8010f24 <tcp_input+0x298>)
 8010d1e:	2200      	movs	r2, #0
 8010d20:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	895a      	ldrh	r2, [r3, #10]
 8010d26:	7cbb      	ldrb	r3, [r7, #18]
 8010d28:	b29b      	uxth	r3, r3
 8010d2a:	429a      	cmp	r2, r3
 8010d2c:	d309      	bcc.n	8010d42 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010d2e:	4b7c      	ldr	r3, [pc, #496]	; (8010f20 <tcp_input+0x294>)
 8010d30:	881a      	ldrh	r2, [r3, #0]
 8010d32:	4b7d      	ldr	r3, [pc, #500]	; (8010f28 <tcp_input+0x29c>)
 8010d34:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010d36:	7cbb      	ldrb	r3, [r7, #18]
 8010d38:	4619      	mov	r1, r3
 8010d3a:	6878      	ldr	r0, [r7, #4]
 8010d3c:	f7fd fdbe 	bl	800e8bc <pbuf_remove_header>
 8010d40:	e04e      	b.n	8010de0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d105      	bne.n	8010d56 <tcp_input+0xca>
 8010d4a:	4b70      	ldr	r3, [pc, #448]	; (8010f0c <tcp_input+0x280>)
 8010d4c:	22c2      	movs	r2, #194	; 0xc2
 8010d4e:	4977      	ldr	r1, [pc, #476]	; (8010f2c <tcp_input+0x2a0>)
 8010d50:	4870      	ldr	r0, [pc, #448]	; (8010f14 <tcp_input+0x288>)
 8010d52:	f009 fffb 	bl	801ad4c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010d56:	2114      	movs	r1, #20
 8010d58:	6878      	ldr	r0, [r7, #4]
 8010d5a:	f7fd fdaf 	bl	800e8bc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	895a      	ldrh	r2, [r3, #10]
 8010d62:	4b71      	ldr	r3, [pc, #452]	; (8010f28 <tcp_input+0x29c>)
 8010d64:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010d66:	4b6e      	ldr	r3, [pc, #440]	; (8010f20 <tcp_input+0x294>)
 8010d68:	881a      	ldrh	r2, [r3, #0]
 8010d6a:	4b6f      	ldr	r3, [pc, #444]	; (8010f28 <tcp_input+0x29c>)
 8010d6c:	881b      	ldrh	r3, [r3, #0]
 8010d6e:	1ad3      	subs	r3, r2, r3
 8010d70:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010d72:	4b6d      	ldr	r3, [pc, #436]	; (8010f28 <tcp_input+0x29c>)
 8010d74:	881b      	ldrh	r3, [r3, #0]
 8010d76:	4619      	mov	r1, r3
 8010d78:	6878      	ldr	r0, [r7, #4]
 8010d7a:	f7fd fd9f 	bl	800e8bc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	895b      	ldrh	r3, [r3, #10]
 8010d84:	8a3a      	ldrh	r2, [r7, #16]
 8010d86:	429a      	cmp	r2, r3
 8010d88:	f200 8361 	bhi.w	801144e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	685b      	ldr	r3, [r3, #4]
 8010d92:	4a64      	ldr	r2, [pc, #400]	; (8010f24 <tcp_input+0x298>)
 8010d94:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	8a3a      	ldrh	r2, [r7, #16]
 8010d9c:	4611      	mov	r1, r2
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f7fd fd8c 	bl	800e8bc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	891a      	ldrh	r2, [r3, #8]
 8010da8:	8a3b      	ldrh	r3, [r7, #16]
 8010daa:	1ad3      	subs	r3, r2, r3
 8010dac:	b29a      	uxth	r2, r3
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	895b      	ldrh	r3, [r3, #10]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d005      	beq.n	8010dc6 <tcp_input+0x13a>
 8010dba:	4b54      	ldr	r3, [pc, #336]	; (8010f0c <tcp_input+0x280>)
 8010dbc:	22df      	movs	r2, #223	; 0xdf
 8010dbe:	495c      	ldr	r1, [pc, #368]	; (8010f30 <tcp_input+0x2a4>)
 8010dc0:	4854      	ldr	r0, [pc, #336]	; (8010f14 <tcp_input+0x288>)
 8010dc2:	f009 ffc3 	bl	801ad4c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	891a      	ldrh	r2, [r3, #8]
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	891b      	ldrh	r3, [r3, #8]
 8010dd0:	429a      	cmp	r2, r3
 8010dd2:	d005      	beq.n	8010de0 <tcp_input+0x154>
 8010dd4:	4b4d      	ldr	r3, [pc, #308]	; (8010f0c <tcp_input+0x280>)
 8010dd6:	22e0      	movs	r2, #224	; 0xe0
 8010dd8:	4956      	ldr	r1, [pc, #344]	; (8010f34 <tcp_input+0x2a8>)
 8010dda:	484e      	ldr	r0, [pc, #312]	; (8010f14 <tcp_input+0x288>)
 8010ddc:	f009 ffb6 	bl	801ad4c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010de0:	4b4d      	ldr	r3, [pc, #308]	; (8010f18 <tcp_input+0x28c>)
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	881b      	ldrh	r3, [r3, #0]
 8010de6:	b29b      	uxth	r3, r3
 8010de8:	4a4b      	ldr	r2, [pc, #300]	; (8010f18 <tcp_input+0x28c>)
 8010dea:	6814      	ldr	r4, [r2, #0]
 8010dec:	4618      	mov	r0, r3
 8010dee:	f7fc fa07 	bl	800d200 <lwip_htons>
 8010df2:	4603      	mov	r3, r0
 8010df4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010df6:	4b48      	ldr	r3, [pc, #288]	; (8010f18 <tcp_input+0x28c>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	885b      	ldrh	r3, [r3, #2]
 8010dfc:	b29b      	uxth	r3, r3
 8010dfe:	4a46      	ldr	r2, [pc, #280]	; (8010f18 <tcp_input+0x28c>)
 8010e00:	6814      	ldr	r4, [r2, #0]
 8010e02:	4618      	mov	r0, r3
 8010e04:	f7fc f9fc 	bl	800d200 <lwip_htons>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010e0c:	4b42      	ldr	r3, [pc, #264]	; (8010f18 <tcp_input+0x28c>)
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	685b      	ldr	r3, [r3, #4]
 8010e12:	4a41      	ldr	r2, [pc, #260]	; (8010f18 <tcp_input+0x28c>)
 8010e14:	6814      	ldr	r4, [r2, #0]
 8010e16:	4618      	mov	r0, r3
 8010e18:	f7fc fa07 	bl	800d22a <lwip_htonl>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	6063      	str	r3, [r4, #4]
 8010e20:	6863      	ldr	r3, [r4, #4]
 8010e22:	4a45      	ldr	r2, [pc, #276]	; (8010f38 <tcp_input+0x2ac>)
 8010e24:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010e26:	4b3c      	ldr	r3, [pc, #240]	; (8010f18 <tcp_input+0x28c>)
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	689b      	ldr	r3, [r3, #8]
 8010e2c:	4a3a      	ldr	r2, [pc, #232]	; (8010f18 <tcp_input+0x28c>)
 8010e2e:	6814      	ldr	r4, [r2, #0]
 8010e30:	4618      	mov	r0, r3
 8010e32:	f7fc f9fa 	bl	800d22a <lwip_htonl>
 8010e36:	4603      	mov	r3, r0
 8010e38:	60a3      	str	r3, [r4, #8]
 8010e3a:	68a3      	ldr	r3, [r4, #8]
 8010e3c:	4a3f      	ldr	r2, [pc, #252]	; (8010f3c <tcp_input+0x2b0>)
 8010e3e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010e40:	4b35      	ldr	r3, [pc, #212]	; (8010f18 <tcp_input+0x28c>)
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	89db      	ldrh	r3, [r3, #14]
 8010e46:	b29b      	uxth	r3, r3
 8010e48:	4a33      	ldr	r2, [pc, #204]	; (8010f18 <tcp_input+0x28c>)
 8010e4a:	6814      	ldr	r4, [r2, #0]
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f7fc f9d7 	bl	800d200 <lwip_htons>
 8010e52:	4603      	mov	r3, r0
 8010e54:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010e56:	4b30      	ldr	r3, [pc, #192]	; (8010f18 <tcp_input+0x28c>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	899b      	ldrh	r3, [r3, #12]
 8010e5c:	b29b      	uxth	r3, r3
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f7fc f9ce 	bl	800d200 <lwip_htons>
 8010e64:	4603      	mov	r3, r0
 8010e66:	b2db      	uxtb	r3, r3
 8010e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010e6c:	b2da      	uxtb	r2, r3
 8010e6e:	4b34      	ldr	r3, [pc, #208]	; (8010f40 <tcp_input+0x2b4>)
 8010e70:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	891a      	ldrh	r2, [r3, #8]
 8010e76:	4b33      	ldr	r3, [pc, #204]	; (8010f44 <tcp_input+0x2b8>)
 8010e78:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010e7a:	4b31      	ldr	r3, [pc, #196]	; (8010f40 <tcp_input+0x2b4>)
 8010e7c:	781b      	ldrb	r3, [r3, #0]
 8010e7e:	f003 0303 	and.w	r3, r3, #3
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d00c      	beq.n	8010ea0 <tcp_input+0x214>
    tcplen++;
 8010e86:	4b2f      	ldr	r3, [pc, #188]	; (8010f44 <tcp_input+0x2b8>)
 8010e88:	881b      	ldrh	r3, [r3, #0]
 8010e8a:	3301      	adds	r3, #1
 8010e8c:	b29a      	uxth	r2, r3
 8010e8e:	4b2d      	ldr	r3, [pc, #180]	; (8010f44 <tcp_input+0x2b8>)
 8010e90:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	891a      	ldrh	r2, [r3, #8]
 8010e96:	4b2b      	ldr	r3, [pc, #172]	; (8010f44 <tcp_input+0x2b8>)
 8010e98:	881b      	ldrh	r3, [r3, #0]
 8010e9a:	429a      	cmp	r2, r3
 8010e9c:	f200 82d9 	bhi.w	8011452 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ea4:	4b28      	ldr	r3, [pc, #160]	; (8010f48 <tcp_input+0x2bc>)
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	61fb      	str	r3, [r7, #28]
 8010eaa:	e09d      	b.n	8010fe8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010eac:	69fb      	ldr	r3, [r7, #28]
 8010eae:	7d1b      	ldrb	r3, [r3, #20]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d105      	bne.n	8010ec0 <tcp_input+0x234>
 8010eb4:	4b15      	ldr	r3, [pc, #84]	; (8010f0c <tcp_input+0x280>)
 8010eb6:	22fb      	movs	r2, #251	; 0xfb
 8010eb8:	4924      	ldr	r1, [pc, #144]	; (8010f4c <tcp_input+0x2c0>)
 8010eba:	4816      	ldr	r0, [pc, #88]	; (8010f14 <tcp_input+0x288>)
 8010ebc:	f009 ff46 	bl	801ad4c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010ec0:	69fb      	ldr	r3, [r7, #28]
 8010ec2:	7d1b      	ldrb	r3, [r3, #20]
 8010ec4:	2b0a      	cmp	r3, #10
 8010ec6:	d105      	bne.n	8010ed4 <tcp_input+0x248>
 8010ec8:	4b10      	ldr	r3, [pc, #64]	; (8010f0c <tcp_input+0x280>)
 8010eca:	22fc      	movs	r2, #252	; 0xfc
 8010ecc:	4920      	ldr	r1, [pc, #128]	; (8010f50 <tcp_input+0x2c4>)
 8010ece:	4811      	ldr	r0, [pc, #68]	; (8010f14 <tcp_input+0x288>)
 8010ed0:	f009 ff3c 	bl	801ad4c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010ed4:	69fb      	ldr	r3, [r7, #28]
 8010ed6:	7d1b      	ldrb	r3, [r3, #20]
 8010ed8:	2b01      	cmp	r3, #1
 8010eda:	d105      	bne.n	8010ee8 <tcp_input+0x25c>
 8010edc:	4b0b      	ldr	r3, [pc, #44]	; (8010f0c <tcp_input+0x280>)
 8010ede:	22fd      	movs	r2, #253	; 0xfd
 8010ee0:	491c      	ldr	r1, [pc, #112]	; (8010f54 <tcp_input+0x2c8>)
 8010ee2:	480c      	ldr	r0, [pc, #48]	; (8010f14 <tcp_input+0x288>)
 8010ee4:	f009 ff32 	bl	801ad4c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010ee8:	69fb      	ldr	r3, [r7, #28]
 8010eea:	7a1b      	ldrb	r3, [r3, #8]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d033      	beq.n	8010f58 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010ef0:	69fb      	ldr	r3, [r7, #28]
 8010ef2:	7a1a      	ldrb	r2, [r3, #8]
 8010ef4:	4b09      	ldr	r3, [pc, #36]	; (8010f1c <tcp_input+0x290>)
 8010ef6:	685b      	ldr	r3, [r3, #4]
 8010ef8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010efc:	3301      	adds	r3, #1
 8010efe:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010f00:	429a      	cmp	r2, r3
 8010f02:	d029      	beq.n	8010f58 <tcp_input+0x2cc>
      prev = pcb;
 8010f04:	69fb      	ldr	r3, [r7, #28]
 8010f06:	61bb      	str	r3, [r7, #24]
      continue;
 8010f08:	e06b      	b.n	8010fe2 <tcp_input+0x356>
 8010f0a:	bf00      	nop
 8010f0c:	0801dad4 	.word	0x0801dad4
 8010f10:	0801db08 	.word	0x0801db08
 8010f14:	0801db20 	.word	0x0801db20
 8010f18:	2000b22c 	.word	0x2000b22c
 8010f1c:	2000e98c 	.word	0x2000e98c
 8010f20:	2000b230 	.word	0x2000b230
 8010f24:	2000b234 	.word	0x2000b234
 8010f28:	2000b232 	.word	0x2000b232
 8010f2c:	0801db48 	.word	0x0801db48
 8010f30:	0801db58 	.word	0x0801db58
 8010f34:	0801db64 	.word	0x0801db64
 8010f38:	2000b23c 	.word	0x2000b23c
 8010f3c:	2000b240 	.word	0x2000b240
 8010f40:	2000b248 	.word	0x2000b248
 8010f44:	2000b246 	.word	0x2000b246
 8010f48:	200120a0 	.word	0x200120a0
 8010f4c:	0801db84 	.word	0x0801db84
 8010f50:	0801dbac 	.word	0x0801dbac
 8010f54:	0801dbd8 	.word	0x0801dbd8
    }

    if (pcb->remote_port == tcphdr->src &&
 8010f58:	69fb      	ldr	r3, [r7, #28]
 8010f5a:	8b1a      	ldrh	r2, [r3, #24]
 8010f5c:	4b94      	ldr	r3, [pc, #592]	; (80111b0 <tcp_input+0x524>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	881b      	ldrh	r3, [r3, #0]
 8010f62:	b29b      	uxth	r3, r3
 8010f64:	429a      	cmp	r2, r3
 8010f66:	d13a      	bne.n	8010fde <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010f68:	69fb      	ldr	r3, [r7, #28]
 8010f6a:	8ada      	ldrh	r2, [r3, #22]
 8010f6c:	4b90      	ldr	r3, [pc, #576]	; (80111b0 <tcp_input+0x524>)
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	885b      	ldrh	r3, [r3, #2]
 8010f72:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010f74:	429a      	cmp	r2, r3
 8010f76:	d132      	bne.n	8010fde <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010f78:	69fb      	ldr	r3, [r7, #28]
 8010f7a:	685a      	ldr	r2, [r3, #4]
 8010f7c:	4b8d      	ldr	r3, [pc, #564]	; (80111b4 <tcp_input+0x528>)
 8010f7e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010f80:	429a      	cmp	r2, r3
 8010f82:	d12c      	bne.n	8010fde <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010f84:	69fb      	ldr	r3, [r7, #28]
 8010f86:	681a      	ldr	r2, [r3, #0]
 8010f88:	4b8a      	ldr	r3, [pc, #552]	; (80111b4 <tcp_input+0x528>)
 8010f8a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010f8c:	429a      	cmp	r2, r3
 8010f8e:	d126      	bne.n	8010fde <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010f90:	69fb      	ldr	r3, [r7, #28]
 8010f92:	68db      	ldr	r3, [r3, #12]
 8010f94:	69fa      	ldr	r2, [r7, #28]
 8010f96:	429a      	cmp	r2, r3
 8010f98:	d106      	bne.n	8010fa8 <tcp_input+0x31c>
 8010f9a:	4b87      	ldr	r3, [pc, #540]	; (80111b8 <tcp_input+0x52c>)
 8010f9c:	f240 120d 	movw	r2, #269	; 0x10d
 8010fa0:	4986      	ldr	r1, [pc, #536]	; (80111bc <tcp_input+0x530>)
 8010fa2:	4887      	ldr	r0, [pc, #540]	; (80111c0 <tcp_input+0x534>)
 8010fa4:	f009 fed2 	bl	801ad4c <iprintf>
      if (prev != NULL) {
 8010fa8:	69bb      	ldr	r3, [r7, #24]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d00a      	beq.n	8010fc4 <tcp_input+0x338>
        prev->next = pcb->next;
 8010fae:	69fb      	ldr	r3, [r7, #28]
 8010fb0:	68da      	ldr	r2, [r3, #12]
 8010fb2:	69bb      	ldr	r3, [r7, #24]
 8010fb4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010fb6:	4b83      	ldr	r3, [pc, #524]	; (80111c4 <tcp_input+0x538>)
 8010fb8:	681a      	ldr	r2, [r3, #0]
 8010fba:	69fb      	ldr	r3, [r7, #28]
 8010fbc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010fbe:	4a81      	ldr	r2, [pc, #516]	; (80111c4 <tcp_input+0x538>)
 8010fc0:	69fb      	ldr	r3, [r7, #28]
 8010fc2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010fc4:	69fb      	ldr	r3, [r7, #28]
 8010fc6:	68db      	ldr	r3, [r3, #12]
 8010fc8:	69fa      	ldr	r2, [r7, #28]
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d111      	bne.n	8010ff2 <tcp_input+0x366>
 8010fce:	4b7a      	ldr	r3, [pc, #488]	; (80111b8 <tcp_input+0x52c>)
 8010fd0:	f240 1215 	movw	r2, #277	; 0x115
 8010fd4:	497c      	ldr	r1, [pc, #496]	; (80111c8 <tcp_input+0x53c>)
 8010fd6:	487a      	ldr	r0, [pc, #488]	; (80111c0 <tcp_input+0x534>)
 8010fd8:	f009 feb8 	bl	801ad4c <iprintf>
      break;
 8010fdc:	e009      	b.n	8010ff2 <tcp_input+0x366>
    }
    prev = pcb;
 8010fde:	69fb      	ldr	r3, [r7, #28]
 8010fe0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010fe2:	69fb      	ldr	r3, [r7, #28]
 8010fe4:	68db      	ldr	r3, [r3, #12]
 8010fe6:	61fb      	str	r3, [r7, #28]
 8010fe8:	69fb      	ldr	r3, [r7, #28]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	f47f af5e 	bne.w	8010eac <tcp_input+0x220>
 8010ff0:	e000      	b.n	8010ff4 <tcp_input+0x368>
      break;
 8010ff2:	bf00      	nop
  }

  if (pcb == NULL) {
 8010ff4:	69fb      	ldr	r3, [r7, #28]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	f040 8095 	bne.w	8011126 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ffc:	4b73      	ldr	r3, [pc, #460]	; (80111cc <tcp_input+0x540>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	61fb      	str	r3, [r7, #28]
 8011002:	e03f      	b.n	8011084 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011004:	69fb      	ldr	r3, [r7, #28]
 8011006:	7d1b      	ldrb	r3, [r3, #20]
 8011008:	2b0a      	cmp	r3, #10
 801100a:	d006      	beq.n	801101a <tcp_input+0x38e>
 801100c:	4b6a      	ldr	r3, [pc, #424]	; (80111b8 <tcp_input+0x52c>)
 801100e:	f240 121f 	movw	r2, #287	; 0x11f
 8011012:	496f      	ldr	r1, [pc, #444]	; (80111d0 <tcp_input+0x544>)
 8011014:	486a      	ldr	r0, [pc, #424]	; (80111c0 <tcp_input+0x534>)
 8011016:	f009 fe99 	bl	801ad4c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801101a:	69fb      	ldr	r3, [r7, #28]
 801101c:	7a1b      	ldrb	r3, [r3, #8]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d009      	beq.n	8011036 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011022:	69fb      	ldr	r3, [r7, #28]
 8011024:	7a1a      	ldrb	r2, [r3, #8]
 8011026:	4b63      	ldr	r3, [pc, #396]	; (80111b4 <tcp_input+0x528>)
 8011028:	685b      	ldr	r3, [r3, #4]
 801102a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801102e:	3301      	adds	r3, #1
 8011030:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011032:	429a      	cmp	r2, r3
 8011034:	d122      	bne.n	801107c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8011036:	69fb      	ldr	r3, [r7, #28]
 8011038:	8b1a      	ldrh	r2, [r3, #24]
 801103a:	4b5d      	ldr	r3, [pc, #372]	; (80111b0 <tcp_input+0x524>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	881b      	ldrh	r3, [r3, #0]
 8011040:	b29b      	uxth	r3, r3
 8011042:	429a      	cmp	r2, r3
 8011044:	d11b      	bne.n	801107e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8011046:	69fb      	ldr	r3, [r7, #28]
 8011048:	8ada      	ldrh	r2, [r3, #22]
 801104a:	4b59      	ldr	r3, [pc, #356]	; (80111b0 <tcp_input+0x524>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	885b      	ldrh	r3, [r3, #2]
 8011050:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8011052:	429a      	cmp	r2, r3
 8011054:	d113      	bne.n	801107e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011056:	69fb      	ldr	r3, [r7, #28]
 8011058:	685a      	ldr	r2, [r3, #4]
 801105a:	4b56      	ldr	r3, [pc, #344]	; (80111b4 <tcp_input+0x528>)
 801105c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801105e:	429a      	cmp	r2, r3
 8011060:	d10d      	bne.n	801107e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011062:	69fb      	ldr	r3, [r7, #28]
 8011064:	681a      	ldr	r2, [r3, #0]
 8011066:	4b53      	ldr	r3, [pc, #332]	; (80111b4 <tcp_input+0x528>)
 8011068:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801106a:	429a      	cmp	r2, r3
 801106c:	d107      	bne.n	801107e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801106e:	69f8      	ldr	r0, [r7, #28]
 8011070:	f000 fb54 	bl	801171c <tcp_timewait_input>
        }
        pbuf_free(p);
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	f7fd fcd9 	bl	800ea2c <pbuf_free>
        return;
 801107a:	e1f0      	b.n	801145e <tcp_input+0x7d2>
        continue;
 801107c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801107e:	69fb      	ldr	r3, [r7, #28]
 8011080:	68db      	ldr	r3, [r3, #12]
 8011082:	61fb      	str	r3, [r7, #28]
 8011084:	69fb      	ldr	r3, [r7, #28]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d1bc      	bne.n	8011004 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801108a:	2300      	movs	r3, #0
 801108c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801108e:	4b51      	ldr	r3, [pc, #324]	; (80111d4 <tcp_input+0x548>)
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	617b      	str	r3, [r7, #20]
 8011094:	e02a      	b.n	80110ec <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011096:	697b      	ldr	r3, [r7, #20]
 8011098:	7a1b      	ldrb	r3, [r3, #8]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d00c      	beq.n	80110b8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801109e:	697b      	ldr	r3, [r7, #20]
 80110a0:	7a1a      	ldrb	r2, [r3, #8]
 80110a2:	4b44      	ldr	r3, [pc, #272]	; (80111b4 <tcp_input+0x528>)
 80110a4:	685b      	ldr	r3, [r3, #4]
 80110a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80110aa:	3301      	adds	r3, #1
 80110ac:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80110ae:	429a      	cmp	r2, r3
 80110b0:	d002      	beq.n	80110b8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80110b2:	697b      	ldr	r3, [r7, #20]
 80110b4:	61bb      	str	r3, [r7, #24]
        continue;
 80110b6:	e016      	b.n	80110e6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80110b8:	697b      	ldr	r3, [r7, #20]
 80110ba:	8ada      	ldrh	r2, [r3, #22]
 80110bc:	4b3c      	ldr	r3, [pc, #240]	; (80111b0 <tcp_input+0x524>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	885b      	ldrh	r3, [r3, #2]
 80110c2:	b29b      	uxth	r3, r3
 80110c4:	429a      	cmp	r2, r3
 80110c6:	d10c      	bne.n	80110e2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80110c8:	697b      	ldr	r3, [r7, #20]
 80110ca:	681a      	ldr	r2, [r3, #0]
 80110cc:	4b39      	ldr	r3, [pc, #228]	; (80111b4 <tcp_input+0x528>)
 80110ce:	695b      	ldr	r3, [r3, #20]
 80110d0:	429a      	cmp	r2, r3
 80110d2:	d00f      	beq.n	80110f4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80110d4:	697b      	ldr	r3, [r7, #20]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d00d      	beq.n	80110f6 <tcp_input+0x46a>
 80110da:	697b      	ldr	r3, [r7, #20]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d009      	beq.n	80110f6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80110e2:	697b      	ldr	r3, [r7, #20]
 80110e4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80110e6:	697b      	ldr	r3, [r7, #20]
 80110e8:	68db      	ldr	r3, [r3, #12]
 80110ea:	617b      	str	r3, [r7, #20]
 80110ec:	697b      	ldr	r3, [r7, #20]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d1d1      	bne.n	8011096 <tcp_input+0x40a>
 80110f2:	e000      	b.n	80110f6 <tcp_input+0x46a>
            break;
 80110f4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80110f6:	697b      	ldr	r3, [r7, #20]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d014      	beq.n	8011126 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80110fc:	69bb      	ldr	r3, [r7, #24]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d00a      	beq.n	8011118 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8011102:	697b      	ldr	r3, [r7, #20]
 8011104:	68da      	ldr	r2, [r3, #12]
 8011106:	69bb      	ldr	r3, [r7, #24]
 8011108:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801110a:	4b32      	ldr	r3, [pc, #200]	; (80111d4 <tcp_input+0x548>)
 801110c:	681a      	ldr	r2, [r3, #0]
 801110e:	697b      	ldr	r3, [r7, #20]
 8011110:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8011112:	4a30      	ldr	r2, [pc, #192]	; (80111d4 <tcp_input+0x548>)
 8011114:	697b      	ldr	r3, [r7, #20]
 8011116:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8011118:	6978      	ldr	r0, [r7, #20]
 801111a:	f000 fa01 	bl	8011520 <tcp_listen_input>
      }
      pbuf_free(p);
 801111e:	6878      	ldr	r0, [r7, #4]
 8011120:	f7fd fc84 	bl	800ea2c <pbuf_free>
      return;
 8011124:	e19b      	b.n	801145e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011126:	69fb      	ldr	r3, [r7, #28]
 8011128:	2b00      	cmp	r3, #0
 801112a:	f000 8160 	beq.w	80113ee <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801112e:	4b2a      	ldr	r3, [pc, #168]	; (80111d8 <tcp_input+0x54c>)
 8011130:	2200      	movs	r2, #0
 8011132:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	891a      	ldrh	r2, [r3, #8]
 8011138:	4b27      	ldr	r3, [pc, #156]	; (80111d8 <tcp_input+0x54c>)
 801113a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801113c:	4a26      	ldr	r2, [pc, #152]	; (80111d8 <tcp_input+0x54c>)
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011142:	4b1b      	ldr	r3, [pc, #108]	; (80111b0 <tcp_input+0x524>)
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	4a24      	ldr	r2, [pc, #144]	; (80111d8 <tcp_input+0x54c>)
 8011148:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801114a:	4b24      	ldr	r3, [pc, #144]	; (80111dc <tcp_input+0x550>)
 801114c:	2200      	movs	r2, #0
 801114e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8011150:	4b23      	ldr	r3, [pc, #140]	; (80111e0 <tcp_input+0x554>)
 8011152:	2200      	movs	r2, #0
 8011154:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011156:	4b23      	ldr	r3, [pc, #140]	; (80111e4 <tcp_input+0x558>)
 8011158:	2200      	movs	r2, #0
 801115a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801115c:	4b22      	ldr	r3, [pc, #136]	; (80111e8 <tcp_input+0x55c>)
 801115e:	781b      	ldrb	r3, [r3, #0]
 8011160:	f003 0308 	and.w	r3, r3, #8
 8011164:	2b00      	cmp	r3, #0
 8011166:	d006      	beq.n	8011176 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	7b5b      	ldrb	r3, [r3, #13]
 801116c:	f043 0301 	orr.w	r3, r3, #1
 8011170:	b2da      	uxtb	r2, r3
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011176:	69fb      	ldr	r3, [r7, #28]
 8011178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801117a:	2b00      	cmp	r3, #0
 801117c:	d038      	beq.n	80111f0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801117e:	69f8      	ldr	r0, [r7, #28]
 8011180:	f7ff f870 	bl	8010264 <tcp_process_refused_data>
 8011184:	4603      	mov	r3, r0
 8011186:	f113 0f0d 	cmn.w	r3, #13
 801118a:	d007      	beq.n	801119c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801118c:	69fb      	ldr	r3, [r7, #28]
 801118e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011190:	2b00      	cmp	r3, #0
 8011192:	d02d      	beq.n	80111f0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011194:	4b15      	ldr	r3, [pc, #84]	; (80111ec <tcp_input+0x560>)
 8011196:	881b      	ldrh	r3, [r3, #0]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d029      	beq.n	80111f0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801119c:	69fb      	ldr	r3, [r7, #28]
 801119e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	f040 8104 	bne.w	80113ae <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80111a6:	69f8      	ldr	r0, [r7, #28]
 80111a8:	f003 fe16 	bl	8014dd8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80111ac:	e0ff      	b.n	80113ae <tcp_input+0x722>
 80111ae:	bf00      	nop
 80111b0:	2000b22c 	.word	0x2000b22c
 80111b4:	2000e98c 	.word	0x2000e98c
 80111b8:	0801dad4 	.word	0x0801dad4
 80111bc:	0801dc00 	.word	0x0801dc00
 80111c0:	0801db20 	.word	0x0801db20
 80111c4:	200120a0 	.word	0x200120a0
 80111c8:	0801dc2c 	.word	0x0801dc2c
 80111cc:	200120b0 	.word	0x200120b0
 80111d0:	0801dc58 	.word	0x0801dc58
 80111d4:	200120a8 	.word	0x200120a8
 80111d8:	2000b21c 	.word	0x2000b21c
 80111dc:	2000b24c 	.word	0x2000b24c
 80111e0:	2000b249 	.word	0x2000b249
 80111e4:	2000b244 	.word	0x2000b244
 80111e8:	2000b248 	.word	0x2000b248
 80111ec:	2000b246 	.word	0x2000b246
      }
    }
    tcp_input_pcb = pcb;
 80111f0:	4a9c      	ldr	r2, [pc, #624]	; (8011464 <tcp_input+0x7d8>)
 80111f2:	69fb      	ldr	r3, [r7, #28]
 80111f4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80111f6:	69f8      	ldr	r0, [r7, #28]
 80111f8:	f000 fb0a 	bl	8011810 <tcp_process>
 80111fc:	4603      	mov	r3, r0
 80111fe:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011200:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011204:	f113 0f0d 	cmn.w	r3, #13
 8011208:	f000 80d3 	beq.w	80113b2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 801120c:	4b96      	ldr	r3, [pc, #600]	; (8011468 <tcp_input+0x7dc>)
 801120e:	781b      	ldrb	r3, [r3, #0]
 8011210:	f003 0308 	and.w	r3, r3, #8
 8011214:	2b00      	cmp	r3, #0
 8011216:	d015      	beq.n	8011244 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011218:	69fb      	ldr	r3, [r7, #28]
 801121a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801121e:	2b00      	cmp	r3, #0
 8011220:	d008      	beq.n	8011234 <tcp_input+0x5a8>
 8011222:	69fb      	ldr	r3, [r7, #28]
 8011224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011228:	69fa      	ldr	r2, [r7, #28]
 801122a:	6912      	ldr	r2, [r2, #16]
 801122c:	f06f 010d 	mvn.w	r1, #13
 8011230:	4610      	mov	r0, r2
 8011232:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011234:	69f9      	ldr	r1, [r7, #28]
 8011236:	488d      	ldr	r0, [pc, #564]	; (801146c <tcp_input+0x7e0>)
 8011238:	f7ff fbb0 	bl	801099c <tcp_pcb_remove>
        tcp_free(pcb);
 801123c:	69f8      	ldr	r0, [r7, #28]
 801123e:	f7fd feb1 	bl	800efa4 <tcp_free>
 8011242:	e0c1      	b.n	80113c8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8011244:	2300      	movs	r3, #0
 8011246:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011248:	4b89      	ldr	r3, [pc, #548]	; (8011470 <tcp_input+0x7e4>)
 801124a:	881b      	ldrh	r3, [r3, #0]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d01d      	beq.n	801128c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011250:	4b87      	ldr	r3, [pc, #540]	; (8011470 <tcp_input+0x7e4>)
 8011252:	881b      	ldrh	r3, [r3, #0]
 8011254:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011256:	69fb      	ldr	r3, [r7, #28]
 8011258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801125c:	2b00      	cmp	r3, #0
 801125e:	d00a      	beq.n	8011276 <tcp_input+0x5ea>
 8011260:	69fb      	ldr	r3, [r7, #28]
 8011262:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011266:	69fa      	ldr	r2, [r7, #28]
 8011268:	6910      	ldr	r0, [r2, #16]
 801126a:	89fa      	ldrh	r2, [r7, #14]
 801126c:	69f9      	ldr	r1, [r7, #28]
 801126e:	4798      	blx	r3
 8011270:	4603      	mov	r3, r0
 8011272:	74fb      	strb	r3, [r7, #19]
 8011274:	e001      	b.n	801127a <tcp_input+0x5ee>
 8011276:	2300      	movs	r3, #0
 8011278:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801127a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801127e:	f113 0f0d 	cmn.w	r3, #13
 8011282:	f000 8098 	beq.w	80113b6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011286:	4b7a      	ldr	r3, [pc, #488]	; (8011470 <tcp_input+0x7e4>)
 8011288:	2200      	movs	r2, #0
 801128a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801128c:	69f8      	ldr	r0, [r7, #28]
 801128e:	f000 f907 	bl	80114a0 <tcp_input_delayed_close>
 8011292:	4603      	mov	r3, r0
 8011294:	2b00      	cmp	r3, #0
 8011296:	f040 8090 	bne.w	80113ba <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801129a:	4b76      	ldr	r3, [pc, #472]	; (8011474 <tcp_input+0x7e8>)
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d041      	beq.n	8011326 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80112a2:	69fb      	ldr	r3, [r7, #28]
 80112a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d006      	beq.n	80112b8 <tcp_input+0x62c>
 80112aa:	4b73      	ldr	r3, [pc, #460]	; (8011478 <tcp_input+0x7ec>)
 80112ac:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80112b0:	4972      	ldr	r1, [pc, #456]	; (801147c <tcp_input+0x7f0>)
 80112b2:	4873      	ldr	r0, [pc, #460]	; (8011480 <tcp_input+0x7f4>)
 80112b4:	f009 fd4a 	bl	801ad4c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80112b8:	69fb      	ldr	r3, [r7, #28]
 80112ba:	8b5b      	ldrh	r3, [r3, #26]
 80112bc:	f003 0310 	and.w	r3, r3, #16
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d008      	beq.n	80112d6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80112c4:	4b6b      	ldr	r3, [pc, #428]	; (8011474 <tcp_input+0x7e8>)
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	4618      	mov	r0, r3
 80112ca:	f7fd fbaf 	bl	800ea2c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80112ce:	69f8      	ldr	r0, [r7, #28]
 80112d0:	f7fe f9ac 	bl	800f62c <tcp_abort>
            goto aborted;
 80112d4:	e078      	b.n	80113c8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80112d6:	69fb      	ldr	r3, [r7, #28]
 80112d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d00c      	beq.n	80112fa <tcp_input+0x66e>
 80112e0:	69fb      	ldr	r3, [r7, #28]
 80112e2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80112e6:	69fb      	ldr	r3, [r7, #28]
 80112e8:	6918      	ldr	r0, [r3, #16]
 80112ea:	4b62      	ldr	r3, [pc, #392]	; (8011474 <tcp_input+0x7e8>)
 80112ec:	681a      	ldr	r2, [r3, #0]
 80112ee:	2300      	movs	r3, #0
 80112f0:	69f9      	ldr	r1, [r7, #28]
 80112f2:	47a0      	blx	r4
 80112f4:	4603      	mov	r3, r0
 80112f6:	74fb      	strb	r3, [r7, #19]
 80112f8:	e008      	b.n	801130c <tcp_input+0x680>
 80112fa:	4b5e      	ldr	r3, [pc, #376]	; (8011474 <tcp_input+0x7e8>)
 80112fc:	681a      	ldr	r2, [r3, #0]
 80112fe:	2300      	movs	r3, #0
 8011300:	69f9      	ldr	r1, [r7, #28]
 8011302:	2000      	movs	r0, #0
 8011304:	f7ff f884 	bl	8010410 <tcp_recv_null>
 8011308:	4603      	mov	r3, r0
 801130a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801130c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011310:	f113 0f0d 	cmn.w	r3, #13
 8011314:	d053      	beq.n	80113be <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011316:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d003      	beq.n	8011326 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801131e:	4b55      	ldr	r3, [pc, #340]	; (8011474 <tcp_input+0x7e8>)
 8011320:	681a      	ldr	r2, [r3, #0]
 8011322:	69fb      	ldr	r3, [r7, #28]
 8011324:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011326:	4b50      	ldr	r3, [pc, #320]	; (8011468 <tcp_input+0x7dc>)
 8011328:	781b      	ldrb	r3, [r3, #0]
 801132a:	f003 0320 	and.w	r3, r3, #32
 801132e:	2b00      	cmp	r3, #0
 8011330:	d030      	beq.n	8011394 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8011332:	69fb      	ldr	r3, [r7, #28]
 8011334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011336:	2b00      	cmp	r3, #0
 8011338:	d009      	beq.n	801134e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801133a:	69fb      	ldr	r3, [r7, #28]
 801133c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801133e:	7b5a      	ldrb	r2, [r3, #13]
 8011340:	69fb      	ldr	r3, [r7, #28]
 8011342:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011344:	f042 0220 	orr.w	r2, r2, #32
 8011348:	b2d2      	uxtb	r2, r2
 801134a:	735a      	strb	r2, [r3, #13]
 801134c:	e022      	b.n	8011394 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801134e:	69fb      	ldr	r3, [r7, #28]
 8011350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011352:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011356:	d005      	beq.n	8011364 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8011358:	69fb      	ldr	r3, [r7, #28]
 801135a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801135c:	3301      	adds	r3, #1
 801135e:	b29a      	uxth	r2, r3
 8011360:	69fb      	ldr	r3, [r7, #28]
 8011362:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011364:	69fb      	ldr	r3, [r7, #28]
 8011366:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801136a:	2b00      	cmp	r3, #0
 801136c:	d00b      	beq.n	8011386 <tcp_input+0x6fa>
 801136e:	69fb      	ldr	r3, [r7, #28]
 8011370:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011374:	69fb      	ldr	r3, [r7, #28]
 8011376:	6918      	ldr	r0, [r3, #16]
 8011378:	2300      	movs	r3, #0
 801137a:	2200      	movs	r2, #0
 801137c:	69f9      	ldr	r1, [r7, #28]
 801137e:	47a0      	blx	r4
 8011380:	4603      	mov	r3, r0
 8011382:	74fb      	strb	r3, [r7, #19]
 8011384:	e001      	b.n	801138a <tcp_input+0x6fe>
 8011386:	2300      	movs	r3, #0
 8011388:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801138a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801138e:	f113 0f0d 	cmn.w	r3, #13
 8011392:	d016      	beq.n	80113c2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011394:	4b33      	ldr	r3, [pc, #204]	; (8011464 <tcp_input+0x7d8>)
 8011396:	2200      	movs	r2, #0
 8011398:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801139a:	69f8      	ldr	r0, [r7, #28]
 801139c:	f000 f880 	bl	80114a0 <tcp_input_delayed_close>
 80113a0:	4603      	mov	r3, r0
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d10f      	bne.n	80113c6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80113a6:	69f8      	ldr	r0, [r7, #28]
 80113a8:	f002 ff10 	bl	80141cc <tcp_output>
 80113ac:	e00c      	b.n	80113c8 <tcp_input+0x73c>
        goto aborted;
 80113ae:	bf00      	nop
 80113b0:	e00a      	b.n	80113c8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80113b2:	bf00      	nop
 80113b4:	e008      	b.n	80113c8 <tcp_input+0x73c>
              goto aborted;
 80113b6:	bf00      	nop
 80113b8:	e006      	b.n	80113c8 <tcp_input+0x73c>
          goto aborted;
 80113ba:	bf00      	nop
 80113bc:	e004      	b.n	80113c8 <tcp_input+0x73c>
            goto aborted;
 80113be:	bf00      	nop
 80113c0:	e002      	b.n	80113c8 <tcp_input+0x73c>
              goto aborted;
 80113c2:	bf00      	nop
 80113c4:	e000      	b.n	80113c8 <tcp_input+0x73c>
          goto aborted;
 80113c6:	bf00      	nop
    tcp_input_pcb = NULL;
 80113c8:	4b26      	ldr	r3, [pc, #152]	; (8011464 <tcp_input+0x7d8>)
 80113ca:	2200      	movs	r2, #0
 80113cc:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80113ce:	4b29      	ldr	r3, [pc, #164]	; (8011474 <tcp_input+0x7e8>)
 80113d0:	2200      	movs	r2, #0
 80113d2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80113d4:	4b2b      	ldr	r3, [pc, #172]	; (8011484 <tcp_input+0x7f8>)
 80113d6:	685b      	ldr	r3, [r3, #4]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d03f      	beq.n	801145c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 80113dc:	4b29      	ldr	r3, [pc, #164]	; (8011484 <tcp_input+0x7f8>)
 80113de:	685b      	ldr	r3, [r3, #4]
 80113e0:	4618      	mov	r0, r3
 80113e2:	f7fd fb23 	bl	800ea2c <pbuf_free>
      inseg.p = NULL;
 80113e6:	4b27      	ldr	r3, [pc, #156]	; (8011484 <tcp_input+0x7f8>)
 80113e8:	2200      	movs	r2, #0
 80113ea:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80113ec:	e036      	b.n	801145c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80113ee:	4b26      	ldr	r3, [pc, #152]	; (8011488 <tcp_input+0x7fc>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	899b      	ldrh	r3, [r3, #12]
 80113f4:	b29b      	uxth	r3, r3
 80113f6:	4618      	mov	r0, r3
 80113f8:	f7fb ff02 	bl	800d200 <lwip_htons>
 80113fc:	4603      	mov	r3, r0
 80113fe:	b2db      	uxtb	r3, r3
 8011400:	f003 0304 	and.w	r3, r3, #4
 8011404:	2b00      	cmp	r3, #0
 8011406:	d118      	bne.n	801143a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011408:	4b20      	ldr	r3, [pc, #128]	; (801148c <tcp_input+0x800>)
 801140a:	6819      	ldr	r1, [r3, #0]
 801140c:	4b20      	ldr	r3, [pc, #128]	; (8011490 <tcp_input+0x804>)
 801140e:	881b      	ldrh	r3, [r3, #0]
 8011410:	461a      	mov	r2, r3
 8011412:	4b20      	ldr	r3, [pc, #128]	; (8011494 <tcp_input+0x808>)
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011418:	4b1b      	ldr	r3, [pc, #108]	; (8011488 <tcp_input+0x7fc>)
 801141a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801141c:	885b      	ldrh	r3, [r3, #2]
 801141e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011420:	4a19      	ldr	r2, [pc, #100]	; (8011488 <tcp_input+0x7fc>)
 8011422:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011424:	8812      	ldrh	r2, [r2, #0]
 8011426:	b292      	uxth	r2, r2
 8011428:	9202      	str	r2, [sp, #8]
 801142a:	9301      	str	r3, [sp, #4]
 801142c:	4b1a      	ldr	r3, [pc, #104]	; (8011498 <tcp_input+0x80c>)
 801142e:	9300      	str	r3, [sp, #0]
 8011430:	4b1a      	ldr	r3, [pc, #104]	; (801149c <tcp_input+0x810>)
 8011432:	4602      	mov	r2, r0
 8011434:	2000      	movs	r0, #0
 8011436:	f003 fc7d 	bl	8014d34 <tcp_rst>
    pbuf_free(p);
 801143a:	6878      	ldr	r0, [r7, #4]
 801143c:	f7fd faf6 	bl	800ea2c <pbuf_free>
  return;
 8011440:	e00c      	b.n	801145c <tcp_input+0x7d0>
    goto dropped;
 8011442:	bf00      	nop
 8011444:	e006      	b.n	8011454 <tcp_input+0x7c8>
    goto dropped;
 8011446:	bf00      	nop
 8011448:	e004      	b.n	8011454 <tcp_input+0x7c8>
    goto dropped;
 801144a:	bf00      	nop
 801144c:	e002      	b.n	8011454 <tcp_input+0x7c8>
      goto dropped;
 801144e:	bf00      	nop
 8011450:	e000      	b.n	8011454 <tcp_input+0x7c8>
      goto dropped;
 8011452:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f7fd fae9 	bl	800ea2c <pbuf_free>
 801145a:	e000      	b.n	801145e <tcp_input+0x7d2>
  return;
 801145c:	bf00      	nop
}
 801145e:	3724      	adds	r7, #36	; 0x24
 8011460:	46bd      	mov	sp, r7
 8011462:	bd90      	pop	{r4, r7, pc}
 8011464:	200120b4 	.word	0x200120b4
 8011468:	2000b249 	.word	0x2000b249
 801146c:	200120a0 	.word	0x200120a0
 8011470:	2000b244 	.word	0x2000b244
 8011474:	2000b24c 	.word	0x2000b24c
 8011478:	0801dad4 	.word	0x0801dad4
 801147c:	0801dc88 	.word	0x0801dc88
 8011480:	0801db20 	.word	0x0801db20
 8011484:	2000b21c 	.word	0x2000b21c
 8011488:	2000b22c 	.word	0x2000b22c
 801148c:	2000b240 	.word	0x2000b240
 8011490:	2000b246 	.word	0x2000b246
 8011494:	2000b23c 	.word	0x2000b23c
 8011498:	2000e99c 	.word	0x2000e99c
 801149c:	2000e9a0 	.word	0x2000e9a0

080114a0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b082      	sub	sp, #8
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d106      	bne.n	80114bc <tcp_input_delayed_close+0x1c>
 80114ae:	4b17      	ldr	r3, [pc, #92]	; (801150c <tcp_input_delayed_close+0x6c>)
 80114b0:	f240 225a 	movw	r2, #602	; 0x25a
 80114b4:	4916      	ldr	r1, [pc, #88]	; (8011510 <tcp_input_delayed_close+0x70>)
 80114b6:	4817      	ldr	r0, [pc, #92]	; (8011514 <tcp_input_delayed_close+0x74>)
 80114b8:	f009 fc48 	bl	801ad4c <iprintf>

  if (recv_flags & TF_CLOSED) {
 80114bc:	4b16      	ldr	r3, [pc, #88]	; (8011518 <tcp_input_delayed_close+0x78>)
 80114be:	781b      	ldrb	r3, [r3, #0]
 80114c0:	f003 0310 	and.w	r3, r3, #16
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d01c      	beq.n	8011502 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	8b5b      	ldrh	r3, [r3, #26]
 80114cc:	f003 0310 	and.w	r3, r3, #16
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d10d      	bne.n	80114f0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d008      	beq.n	80114f0 <tcp_input_delayed_close+0x50>
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80114e4:	687a      	ldr	r2, [r7, #4]
 80114e6:	6912      	ldr	r2, [r2, #16]
 80114e8:	f06f 010e 	mvn.w	r1, #14
 80114ec:	4610      	mov	r0, r2
 80114ee:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80114f0:	6879      	ldr	r1, [r7, #4]
 80114f2:	480a      	ldr	r0, [pc, #40]	; (801151c <tcp_input_delayed_close+0x7c>)
 80114f4:	f7ff fa52 	bl	801099c <tcp_pcb_remove>
    tcp_free(pcb);
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f7fd fd53 	bl	800efa4 <tcp_free>
    return 1;
 80114fe:	2301      	movs	r3, #1
 8011500:	e000      	b.n	8011504 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8011502:	2300      	movs	r3, #0
}
 8011504:	4618      	mov	r0, r3
 8011506:	3708      	adds	r7, #8
 8011508:	46bd      	mov	sp, r7
 801150a:	bd80      	pop	{r7, pc}
 801150c:	0801dad4 	.word	0x0801dad4
 8011510:	0801dca4 	.word	0x0801dca4
 8011514:	0801db20 	.word	0x0801db20
 8011518:	2000b249 	.word	0x2000b249
 801151c:	200120a0 	.word	0x200120a0

08011520 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011520:	b590      	push	{r4, r7, lr}
 8011522:	b08b      	sub	sp, #44	; 0x2c
 8011524:	af04      	add	r7, sp, #16
 8011526:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011528:	4b6f      	ldr	r3, [pc, #444]	; (80116e8 <tcp_listen_input+0x1c8>)
 801152a:	781b      	ldrb	r3, [r3, #0]
 801152c:	f003 0304 	and.w	r3, r3, #4
 8011530:	2b00      	cmp	r3, #0
 8011532:	f040 80d2 	bne.w	80116da <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d106      	bne.n	801154a <tcp_listen_input+0x2a>
 801153c:	4b6b      	ldr	r3, [pc, #428]	; (80116ec <tcp_listen_input+0x1cc>)
 801153e:	f240 2281 	movw	r2, #641	; 0x281
 8011542:	496b      	ldr	r1, [pc, #428]	; (80116f0 <tcp_listen_input+0x1d0>)
 8011544:	486b      	ldr	r0, [pc, #428]	; (80116f4 <tcp_listen_input+0x1d4>)
 8011546:	f009 fc01 	bl	801ad4c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801154a:	4b67      	ldr	r3, [pc, #412]	; (80116e8 <tcp_listen_input+0x1c8>)
 801154c:	781b      	ldrb	r3, [r3, #0]
 801154e:	f003 0310 	and.w	r3, r3, #16
 8011552:	2b00      	cmp	r3, #0
 8011554:	d019      	beq.n	801158a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011556:	4b68      	ldr	r3, [pc, #416]	; (80116f8 <tcp_listen_input+0x1d8>)
 8011558:	6819      	ldr	r1, [r3, #0]
 801155a:	4b68      	ldr	r3, [pc, #416]	; (80116fc <tcp_listen_input+0x1dc>)
 801155c:	881b      	ldrh	r3, [r3, #0]
 801155e:	461a      	mov	r2, r3
 8011560:	4b67      	ldr	r3, [pc, #412]	; (8011700 <tcp_listen_input+0x1e0>)
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011566:	4b67      	ldr	r3, [pc, #412]	; (8011704 <tcp_listen_input+0x1e4>)
 8011568:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801156a:	885b      	ldrh	r3, [r3, #2]
 801156c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801156e:	4a65      	ldr	r2, [pc, #404]	; (8011704 <tcp_listen_input+0x1e4>)
 8011570:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011572:	8812      	ldrh	r2, [r2, #0]
 8011574:	b292      	uxth	r2, r2
 8011576:	9202      	str	r2, [sp, #8]
 8011578:	9301      	str	r3, [sp, #4]
 801157a:	4b63      	ldr	r3, [pc, #396]	; (8011708 <tcp_listen_input+0x1e8>)
 801157c:	9300      	str	r3, [sp, #0]
 801157e:	4b63      	ldr	r3, [pc, #396]	; (801170c <tcp_listen_input+0x1ec>)
 8011580:	4602      	mov	r2, r0
 8011582:	6878      	ldr	r0, [r7, #4]
 8011584:	f003 fbd6 	bl	8014d34 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011588:	e0a9      	b.n	80116de <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801158a:	4b57      	ldr	r3, [pc, #348]	; (80116e8 <tcp_listen_input+0x1c8>)
 801158c:	781b      	ldrb	r3, [r3, #0]
 801158e:	f003 0302 	and.w	r3, r3, #2
 8011592:	2b00      	cmp	r3, #0
 8011594:	f000 80a3 	beq.w	80116de <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	7d5b      	ldrb	r3, [r3, #21]
 801159c:	4618      	mov	r0, r3
 801159e:	f7ff f85b 	bl	8010658 <tcp_alloc>
 80115a2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80115a4:	697b      	ldr	r3, [r7, #20]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d111      	bne.n	80115ce <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	699b      	ldr	r3, [r3, #24]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d00a      	beq.n	80115c8 <tcp_listen_input+0xa8>
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	699b      	ldr	r3, [r3, #24]
 80115b6:	687a      	ldr	r2, [r7, #4]
 80115b8:	6910      	ldr	r0, [r2, #16]
 80115ba:	f04f 32ff 	mov.w	r2, #4294967295
 80115be:	2100      	movs	r1, #0
 80115c0:	4798      	blx	r3
 80115c2:	4603      	mov	r3, r0
 80115c4:	73bb      	strb	r3, [r7, #14]
      return;
 80115c6:	e08b      	b.n	80116e0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80115c8:	23f0      	movs	r3, #240	; 0xf0
 80115ca:	73bb      	strb	r3, [r7, #14]
      return;
 80115cc:	e088      	b.n	80116e0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80115ce:	4b50      	ldr	r3, [pc, #320]	; (8011710 <tcp_listen_input+0x1f0>)
 80115d0:	695a      	ldr	r2, [r3, #20]
 80115d2:	697b      	ldr	r3, [r7, #20]
 80115d4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80115d6:	4b4e      	ldr	r3, [pc, #312]	; (8011710 <tcp_listen_input+0x1f0>)
 80115d8:	691a      	ldr	r2, [r3, #16]
 80115da:	697b      	ldr	r3, [r7, #20]
 80115dc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	8ada      	ldrh	r2, [r3, #22]
 80115e2:	697b      	ldr	r3, [r7, #20]
 80115e4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80115e6:	4b47      	ldr	r3, [pc, #284]	; (8011704 <tcp_listen_input+0x1e4>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	881b      	ldrh	r3, [r3, #0]
 80115ec:	b29a      	uxth	r2, r3
 80115ee:	697b      	ldr	r3, [r7, #20]
 80115f0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80115f2:	697b      	ldr	r3, [r7, #20]
 80115f4:	2203      	movs	r2, #3
 80115f6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80115f8:	4b41      	ldr	r3, [pc, #260]	; (8011700 <tcp_listen_input+0x1e0>)
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	1c5a      	adds	r2, r3, #1
 80115fe:	697b      	ldr	r3, [r7, #20]
 8011600:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011602:	697b      	ldr	r3, [r7, #20]
 8011604:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011606:	697b      	ldr	r3, [r7, #20]
 8011608:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801160a:	6978      	ldr	r0, [r7, #20]
 801160c:	f7ff fa5a 	bl	8010ac4 <tcp_next_iss>
 8011610:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8011612:	697b      	ldr	r3, [r7, #20]
 8011614:	693a      	ldr	r2, [r7, #16]
 8011616:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011618:	697b      	ldr	r3, [r7, #20]
 801161a:	693a      	ldr	r2, [r7, #16]
 801161c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801161e:	697b      	ldr	r3, [r7, #20]
 8011620:	693a      	ldr	r2, [r7, #16]
 8011622:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011624:	697b      	ldr	r3, [r7, #20]
 8011626:	693a      	ldr	r2, [r7, #16]
 8011628:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801162a:	4b35      	ldr	r3, [pc, #212]	; (8011700 <tcp_listen_input+0x1e0>)
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	1e5a      	subs	r2, r3, #1
 8011630:	697b      	ldr	r3, [r7, #20]
 8011632:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	691a      	ldr	r2, [r3, #16]
 8011638:	697b      	ldr	r3, [r7, #20]
 801163a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801163c:	697b      	ldr	r3, [r7, #20]
 801163e:	687a      	ldr	r2, [r7, #4]
 8011640:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	7a5b      	ldrb	r3, [r3, #9]
 8011646:	f003 030c 	and.w	r3, r3, #12
 801164a:	b2da      	uxtb	r2, r3
 801164c:	697b      	ldr	r3, [r7, #20]
 801164e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	7a1a      	ldrb	r2, [r3, #8]
 8011654:	697b      	ldr	r3, [r7, #20]
 8011656:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011658:	4b2e      	ldr	r3, [pc, #184]	; (8011714 <tcp_listen_input+0x1f4>)
 801165a:	681a      	ldr	r2, [r3, #0]
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	60da      	str	r2, [r3, #12]
 8011660:	4a2c      	ldr	r2, [pc, #176]	; (8011714 <tcp_listen_input+0x1f4>)
 8011662:	697b      	ldr	r3, [r7, #20]
 8011664:	6013      	str	r3, [r2, #0]
 8011666:	f003 fd27 	bl	80150b8 <tcp_timer_needed>
 801166a:	4b2b      	ldr	r3, [pc, #172]	; (8011718 <tcp_listen_input+0x1f8>)
 801166c:	2201      	movs	r2, #1
 801166e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011670:	6978      	ldr	r0, [r7, #20]
 8011672:	f001 fd8d 	bl	8013190 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011676:	4b23      	ldr	r3, [pc, #140]	; (8011704 <tcp_listen_input+0x1e4>)
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	89db      	ldrh	r3, [r3, #14]
 801167c:	b29a      	uxth	r2, r3
 801167e:	697b      	ldr	r3, [r7, #20]
 8011680:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801168a:	697b      	ldr	r3, [r7, #20]
 801168c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011690:	697b      	ldr	r3, [r7, #20]
 8011692:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	3304      	adds	r3, #4
 8011698:	4618      	mov	r0, r3
 801169a:	f005 fc65 	bl	8016f68 <ip4_route>
 801169e:	4601      	mov	r1, r0
 80116a0:	697b      	ldr	r3, [r7, #20]
 80116a2:	3304      	adds	r3, #4
 80116a4:	461a      	mov	r2, r3
 80116a6:	4620      	mov	r0, r4
 80116a8:	f7ff fa32 	bl	8010b10 <tcp_eff_send_mss_netif>
 80116ac:	4603      	mov	r3, r0
 80116ae:	461a      	mov	r2, r3
 80116b0:	697b      	ldr	r3, [r7, #20]
 80116b2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80116b4:	2112      	movs	r1, #18
 80116b6:	6978      	ldr	r0, [r7, #20]
 80116b8:	f002 fc9a 	bl	8013ff0 <tcp_enqueue_flags>
 80116bc:	4603      	mov	r3, r0
 80116be:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80116c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d004      	beq.n	80116d2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80116c8:	2100      	movs	r1, #0
 80116ca:	6978      	ldr	r0, [r7, #20]
 80116cc:	f7fd fef0 	bl	800f4b0 <tcp_abandon>
      return;
 80116d0:	e006      	b.n	80116e0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80116d2:	6978      	ldr	r0, [r7, #20]
 80116d4:	f002 fd7a 	bl	80141cc <tcp_output>
  return;
 80116d8:	e001      	b.n	80116de <tcp_listen_input+0x1be>
    return;
 80116da:	bf00      	nop
 80116dc:	e000      	b.n	80116e0 <tcp_listen_input+0x1c0>
  return;
 80116de:	bf00      	nop
}
 80116e0:	371c      	adds	r7, #28
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd90      	pop	{r4, r7, pc}
 80116e6:	bf00      	nop
 80116e8:	2000b248 	.word	0x2000b248
 80116ec:	0801dad4 	.word	0x0801dad4
 80116f0:	0801dccc 	.word	0x0801dccc
 80116f4:	0801db20 	.word	0x0801db20
 80116f8:	2000b240 	.word	0x2000b240
 80116fc:	2000b246 	.word	0x2000b246
 8011700:	2000b23c 	.word	0x2000b23c
 8011704:	2000b22c 	.word	0x2000b22c
 8011708:	2000e99c 	.word	0x2000e99c
 801170c:	2000e9a0 	.word	0x2000e9a0
 8011710:	2000e98c 	.word	0x2000e98c
 8011714:	200120a0 	.word	0x200120a0
 8011718:	2001209c 	.word	0x2001209c

0801171c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b086      	sub	sp, #24
 8011720:	af04      	add	r7, sp, #16
 8011722:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011724:	4b2f      	ldr	r3, [pc, #188]	; (80117e4 <tcp_timewait_input+0xc8>)
 8011726:	781b      	ldrb	r3, [r3, #0]
 8011728:	f003 0304 	and.w	r3, r3, #4
 801172c:	2b00      	cmp	r3, #0
 801172e:	d153      	bne.n	80117d8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d106      	bne.n	8011744 <tcp_timewait_input+0x28>
 8011736:	4b2c      	ldr	r3, [pc, #176]	; (80117e8 <tcp_timewait_input+0xcc>)
 8011738:	f240 22ee 	movw	r2, #750	; 0x2ee
 801173c:	492b      	ldr	r1, [pc, #172]	; (80117ec <tcp_timewait_input+0xd0>)
 801173e:	482c      	ldr	r0, [pc, #176]	; (80117f0 <tcp_timewait_input+0xd4>)
 8011740:	f009 fb04 	bl	801ad4c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011744:	4b27      	ldr	r3, [pc, #156]	; (80117e4 <tcp_timewait_input+0xc8>)
 8011746:	781b      	ldrb	r3, [r3, #0]
 8011748:	f003 0302 	and.w	r3, r3, #2
 801174c:	2b00      	cmp	r3, #0
 801174e:	d02a      	beq.n	80117a6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011750:	4b28      	ldr	r3, [pc, #160]	; (80117f4 <tcp_timewait_input+0xd8>)
 8011752:	681a      	ldr	r2, [r3, #0]
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011758:	1ad3      	subs	r3, r2, r3
 801175a:	2b00      	cmp	r3, #0
 801175c:	db2d      	blt.n	80117ba <tcp_timewait_input+0x9e>
 801175e:	4b25      	ldr	r3, [pc, #148]	; (80117f4 <tcp_timewait_input+0xd8>)
 8011760:	681a      	ldr	r2, [r3, #0]
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011766:	6879      	ldr	r1, [r7, #4]
 8011768:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801176a:	440b      	add	r3, r1
 801176c:	1ad3      	subs	r3, r2, r3
 801176e:	2b00      	cmp	r3, #0
 8011770:	dc23      	bgt.n	80117ba <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011772:	4b21      	ldr	r3, [pc, #132]	; (80117f8 <tcp_timewait_input+0xdc>)
 8011774:	6819      	ldr	r1, [r3, #0]
 8011776:	4b21      	ldr	r3, [pc, #132]	; (80117fc <tcp_timewait_input+0xe0>)
 8011778:	881b      	ldrh	r3, [r3, #0]
 801177a:	461a      	mov	r2, r3
 801177c:	4b1d      	ldr	r3, [pc, #116]	; (80117f4 <tcp_timewait_input+0xd8>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011782:	4b1f      	ldr	r3, [pc, #124]	; (8011800 <tcp_timewait_input+0xe4>)
 8011784:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011786:	885b      	ldrh	r3, [r3, #2]
 8011788:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801178a:	4a1d      	ldr	r2, [pc, #116]	; (8011800 <tcp_timewait_input+0xe4>)
 801178c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801178e:	8812      	ldrh	r2, [r2, #0]
 8011790:	b292      	uxth	r2, r2
 8011792:	9202      	str	r2, [sp, #8]
 8011794:	9301      	str	r3, [sp, #4]
 8011796:	4b1b      	ldr	r3, [pc, #108]	; (8011804 <tcp_timewait_input+0xe8>)
 8011798:	9300      	str	r3, [sp, #0]
 801179a:	4b1b      	ldr	r3, [pc, #108]	; (8011808 <tcp_timewait_input+0xec>)
 801179c:	4602      	mov	r2, r0
 801179e:	6878      	ldr	r0, [r7, #4]
 80117a0:	f003 fac8 	bl	8014d34 <tcp_rst>
      return;
 80117a4:	e01b      	b.n	80117de <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80117a6:	4b0f      	ldr	r3, [pc, #60]	; (80117e4 <tcp_timewait_input+0xc8>)
 80117a8:	781b      	ldrb	r3, [r3, #0]
 80117aa:	f003 0301 	and.w	r3, r3, #1
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d003      	beq.n	80117ba <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80117b2:	4b16      	ldr	r3, [pc, #88]	; (801180c <tcp_timewait_input+0xf0>)
 80117b4:	681a      	ldr	r2, [r3, #0]
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80117ba:	4b10      	ldr	r3, [pc, #64]	; (80117fc <tcp_timewait_input+0xe0>)
 80117bc:	881b      	ldrh	r3, [r3, #0]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d00c      	beq.n	80117dc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	8b5b      	ldrh	r3, [r3, #26]
 80117c6:	f043 0302 	orr.w	r3, r3, #2
 80117ca:	b29a      	uxth	r2, r3
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80117d0:	6878      	ldr	r0, [r7, #4]
 80117d2:	f002 fcfb 	bl	80141cc <tcp_output>
  }
  return;
 80117d6:	e001      	b.n	80117dc <tcp_timewait_input+0xc0>
    return;
 80117d8:	bf00      	nop
 80117da:	e000      	b.n	80117de <tcp_timewait_input+0xc2>
  return;
 80117dc:	bf00      	nop
}
 80117de:	3708      	adds	r7, #8
 80117e0:	46bd      	mov	sp, r7
 80117e2:	bd80      	pop	{r7, pc}
 80117e4:	2000b248 	.word	0x2000b248
 80117e8:	0801dad4 	.word	0x0801dad4
 80117ec:	0801dcec 	.word	0x0801dcec
 80117f0:	0801db20 	.word	0x0801db20
 80117f4:	2000b23c 	.word	0x2000b23c
 80117f8:	2000b240 	.word	0x2000b240
 80117fc:	2000b246 	.word	0x2000b246
 8011800:	2000b22c 	.word	0x2000b22c
 8011804:	2000e99c 	.word	0x2000e99c
 8011808:	2000e9a0 	.word	0x2000e9a0
 801180c:	200120a4 	.word	0x200120a4

08011810 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011810:	b590      	push	{r4, r7, lr}
 8011812:	b08d      	sub	sp, #52	; 0x34
 8011814:	af04      	add	r7, sp, #16
 8011816:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011818:	2300      	movs	r3, #0
 801181a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801181c:	2300      	movs	r3, #0
 801181e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d106      	bne.n	8011834 <tcp_process+0x24>
 8011826:	4ba5      	ldr	r3, [pc, #660]	; (8011abc <tcp_process+0x2ac>)
 8011828:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801182c:	49a4      	ldr	r1, [pc, #656]	; (8011ac0 <tcp_process+0x2b0>)
 801182e:	48a5      	ldr	r0, [pc, #660]	; (8011ac4 <tcp_process+0x2b4>)
 8011830:	f009 fa8c 	bl	801ad4c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011834:	4ba4      	ldr	r3, [pc, #656]	; (8011ac8 <tcp_process+0x2b8>)
 8011836:	781b      	ldrb	r3, [r3, #0]
 8011838:	f003 0304 	and.w	r3, r3, #4
 801183c:	2b00      	cmp	r3, #0
 801183e:	d04e      	beq.n	80118de <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	7d1b      	ldrb	r3, [r3, #20]
 8011844:	2b02      	cmp	r3, #2
 8011846:	d108      	bne.n	801185a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801184c:	4b9f      	ldr	r3, [pc, #636]	; (8011acc <tcp_process+0x2bc>)
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	429a      	cmp	r2, r3
 8011852:	d123      	bne.n	801189c <tcp_process+0x8c>
        acceptable = 1;
 8011854:	2301      	movs	r3, #1
 8011856:	76fb      	strb	r3, [r7, #27]
 8011858:	e020      	b.n	801189c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801185e:	4b9c      	ldr	r3, [pc, #624]	; (8011ad0 <tcp_process+0x2c0>)
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	429a      	cmp	r2, r3
 8011864:	d102      	bne.n	801186c <tcp_process+0x5c>
        acceptable = 1;
 8011866:	2301      	movs	r3, #1
 8011868:	76fb      	strb	r3, [r7, #27]
 801186a:	e017      	b.n	801189c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801186c:	4b98      	ldr	r3, [pc, #608]	; (8011ad0 <tcp_process+0x2c0>)
 801186e:	681a      	ldr	r2, [r3, #0]
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011874:	1ad3      	subs	r3, r2, r3
 8011876:	2b00      	cmp	r3, #0
 8011878:	db10      	blt.n	801189c <tcp_process+0x8c>
 801187a:	4b95      	ldr	r3, [pc, #596]	; (8011ad0 <tcp_process+0x2c0>)
 801187c:	681a      	ldr	r2, [r3, #0]
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011882:	6879      	ldr	r1, [r7, #4]
 8011884:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011886:	440b      	add	r3, r1
 8011888:	1ad3      	subs	r3, r2, r3
 801188a:	2b00      	cmp	r3, #0
 801188c:	dc06      	bgt.n	801189c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	8b5b      	ldrh	r3, [r3, #26]
 8011892:	f043 0302 	orr.w	r3, r3, #2
 8011896:	b29a      	uxth	r2, r3
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801189c:	7efb      	ldrb	r3, [r7, #27]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d01b      	beq.n	80118da <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	7d1b      	ldrb	r3, [r3, #20]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d106      	bne.n	80118b8 <tcp_process+0xa8>
 80118aa:	4b84      	ldr	r3, [pc, #528]	; (8011abc <tcp_process+0x2ac>)
 80118ac:	f44f 724e 	mov.w	r2, #824	; 0x338
 80118b0:	4988      	ldr	r1, [pc, #544]	; (8011ad4 <tcp_process+0x2c4>)
 80118b2:	4884      	ldr	r0, [pc, #528]	; (8011ac4 <tcp_process+0x2b4>)
 80118b4:	f009 fa4a 	bl	801ad4c <iprintf>
      recv_flags |= TF_RESET;
 80118b8:	4b87      	ldr	r3, [pc, #540]	; (8011ad8 <tcp_process+0x2c8>)
 80118ba:	781b      	ldrb	r3, [r3, #0]
 80118bc:	f043 0308 	orr.w	r3, r3, #8
 80118c0:	b2da      	uxtb	r2, r3
 80118c2:	4b85      	ldr	r3, [pc, #532]	; (8011ad8 <tcp_process+0x2c8>)
 80118c4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	8b5b      	ldrh	r3, [r3, #26]
 80118ca:	f023 0301 	bic.w	r3, r3, #1
 80118ce:	b29a      	uxth	r2, r3
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80118d4:	f06f 030d 	mvn.w	r3, #13
 80118d8:	e37a      	b.n	8011fd0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80118da:	2300      	movs	r3, #0
 80118dc:	e378      	b.n	8011fd0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80118de:	4b7a      	ldr	r3, [pc, #488]	; (8011ac8 <tcp_process+0x2b8>)
 80118e0:	781b      	ldrb	r3, [r3, #0]
 80118e2:	f003 0302 	and.w	r3, r3, #2
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d010      	beq.n	801190c <tcp_process+0xfc>
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	7d1b      	ldrb	r3, [r3, #20]
 80118ee:	2b02      	cmp	r3, #2
 80118f0:	d00c      	beq.n	801190c <tcp_process+0xfc>
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	7d1b      	ldrb	r3, [r3, #20]
 80118f6:	2b03      	cmp	r3, #3
 80118f8:	d008      	beq.n	801190c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	8b5b      	ldrh	r3, [r3, #26]
 80118fe:	f043 0302 	orr.w	r3, r3, #2
 8011902:	b29a      	uxth	r2, r3
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011908:	2300      	movs	r3, #0
 801190a:	e361      	b.n	8011fd0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	8b5b      	ldrh	r3, [r3, #26]
 8011910:	f003 0310 	and.w	r3, r3, #16
 8011914:	2b00      	cmp	r3, #0
 8011916:	d103      	bne.n	8011920 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011918:	4b70      	ldr	r3, [pc, #448]	; (8011adc <tcp_process+0x2cc>)
 801191a:	681a      	ldr	r2, [r3, #0]
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2200      	movs	r2, #0
 8011924:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	2200      	movs	r2, #0
 801192c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	f001 fc2d 	bl	8013190 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	7d1b      	ldrb	r3, [r3, #20]
 801193a:	3b02      	subs	r3, #2
 801193c:	2b07      	cmp	r3, #7
 801193e:	f200 8337 	bhi.w	8011fb0 <tcp_process+0x7a0>
 8011942:	a201      	add	r2, pc, #4	; (adr r2, 8011948 <tcp_process+0x138>)
 8011944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011948:	08011969 	.word	0x08011969
 801194c:	08011b99 	.word	0x08011b99
 8011950:	08011d11 	.word	0x08011d11
 8011954:	08011d3b 	.word	0x08011d3b
 8011958:	08011e5f 	.word	0x08011e5f
 801195c:	08011d11 	.word	0x08011d11
 8011960:	08011eeb 	.word	0x08011eeb
 8011964:	08011f7b 	.word	0x08011f7b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011968:	4b57      	ldr	r3, [pc, #348]	; (8011ac8 <tcp_process+0x2b8>)
 801196a:	781b      	ldrb	r3, [r3, #0]
 801196c:	f003 0310 	and.w	r3, r3, #16
 8011970:	2b00      	cmp	r3, #0
 8011972:	f000 80e4 	beq.w	8011b3e <tcp_process+0x32e>
 8011976:	4b54      	ldr	r3, [pc, #336]	; (8011ac8 <tcp_process+0x2b8>)
 8011978:	781b      	ldrb	r3, [r3, #0]
 801197a:	f003 0302 	and.w	r3, r3, #2
 801197e:	2b00      	cmp	r3, #0
 8011980:	f000 80dd 	beq.w	8011b3e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011988:	1c5a      	adds	r2, r3, #1
 801198a:	4b50      	ldr	r3, [pc, #320]	; (8011acc <tcp_process+0x2bc>)
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	429a      	cmp	r2, r3
 8011990:	f040 80d5 	bne.w	8011b3e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011994:	4b4e      	ldr	r3, [pc, #312]	; (8011ad0 <tcp_process+0x2c0>)
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	1c5a      	adds	r2, r3, #1
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80119a6:	4b49      	ldr	r3, [pc, #292]	; (8011acc <tcp_process+0x2bc>)
 80119a8:	681a      	ldr	r2, [r3, #0]
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80119ae:	4b4c      	ldr	r3, [pc, #304]	; (8011ae0 <tcp_process+0x2d0>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	89db      	ldrh	r3, [r3, #14]
 80119b4:	b29a      	uxth	r2, r3
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80119c8:	4b41      	ldr	r3, [pc, #260]	; (8011ad0 <tcp_process+0x2c0>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	1e5a      	subs	r2, r3, #1
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	2204      	movs	r2, #4
 80119d6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	3304      	adds	r3, #4
 80119e0:	4618      	mov	r0, r3
 80119e2:	f005 fac1 	bl	8016f68 <ip4_route>
 80119e6:	4601      	mov	r1, r0
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	3304      	adds	r3, #4
 80119ec:	461a      	mov	r2, r3
 80119ee:	4620      	mov	r0, r4
 80119f0:	f7ff f88e 	bl	8010b10 <tcp_eff_send_mss_netif>
 80119f4:	4603      	mov	r3, r0
 80119f6:	461a      	mov	r2, r3
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a00:	009a      	lsls	r2, r3, #2
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a06:	005b      	lsls	r3, r3, #1
 8011a08:	f241 111c 	movw	r1, #4380	; 0x111c
 8011a0c:	428b      	cmp	r3, r1
 8011a0e:	bf38      	it	cc
 8011a10:	460b      	movcc	r3, r1
 8011a12:	429a      	cmp	r2, r3
 8011a14:	d204      	bcs.n	8011a20 <tcp_process+0x210>
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a1a:	009b      	lsls	r3, r3, #2
 8011a1c:	b29b      	uxth	r3, r3
 8011a1e:	e00d      	b.n	8011a3c <tcp_process+0x22c>
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a24:	005b      	lsls	r3, r3, #1
 8011a26:	f241 121c 	movw	r2, #4380	; 0x111c
 8011a2a:	4293      	cmp	r3, r2
 8011a2c:	d904      	bls.n	8011a38 <tcp_process+0x228>
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a32:	005b      	lsls	r3, r3, #1
 8011a34:	b29b      	uxth	r3, r3
 8011a36:	e001      	b.n	8011a3c <tcp_process+0x22c>
 8011a38:	f241 131c 	movw	r3, #4380	; 0x111c
 8011a3c:	687a      	ldr	r2, [r7, #4]
 8011a3e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d106      	bne.n	8011a5a <tcp_process+0x24a>
 8011a4c:	4b1b      	ldr	r3, [pc, #108]	; (8011abc <tcp_process+0x2ac>)
 8011a4e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8011a52:	4924      	ldr	r1, [pc, #144]	; (8011ae4 <tcp_process+0x2d4>)
 8011a54:	481b      	ldr	r0, [pc, #108]	; (8011ac4 <tcp_process+0x2b4>)
 8011a56:	f009 f979 	bl	801ad4c <iprintf>
        --pcb->snd_queuelen;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011a60:	3b01      	subs	r3, #1
 8011a62:	b29a      	uxth	r2, r3
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a6e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8011a70:	69fb      	ldr	r3, [r7, #28]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d111      	bne.n	8011a9a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a7a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011a7c:	69fb      	ldr	r3, [r7, #28]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d106      	bne.n	8011a90 <tcp_process+0x280>
 8011a82:	4b0e      	ldr	r3, [pc, #56]	; (8011abc <tcp_process+0x2ac>)
 8011a84:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011a88:	4917      	ldr	r1, [pc, #92]	; (8011ae8 <tcp_process+0x2d8>)
 8011a8a:	480e      	ldr	r0, [pc, #56]	; (8011ac4 <tcp_process+0x2b4>)
 8011a8c:	f009 f95e 	bl	801ad4c <iprintf>
          pcb->unsent = rseg->next;
 8011a90:	69fb      	ldr	r3, [r7, #28]
 8011a92:	681a      	ldr	r2, [r3, #0]
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	66da      	str	r2, [r3, #108]	; 0x6c
 8011a98:	e003      	b.n	8011aa2 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8011a9a:	69fb      	ldr	r3, [r7, #28]
 8011a9c:	681a      	ldr	r2, [r3, #0]
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011aa2:	69f8      	ldr	r0, [r7, #28]
 8011aa4:	f7fe fc6f 	bl	8010386 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d11d      	bne.n	8011aec <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ab6:	861a      	strh	r2, [r3, #48]	; 0x30
 8011ab8:	e01f      	b.n	8011afa <tcp_process+0x2ea>
 8011aba:	bf00      	nop
 8011abc:	0801dad4 	.word	0x0801dad4
 8011ac0:	0801dd0c 	.word	0x0801dd0c
 8011ac4:	0801db20 	.word	0x0801db20
 8011ac8:	2000b248 	.word	0x2000b248
 8011acc:	2000b240 	.word	0x2000b240
 8011ad0:	2000b23c 	.word	0x2000b23c
 8011ad4:	0801dd28 	.word	0x0801dd28
 8011ad8:	2000b249 	.word	0x2000b249
 8011adc:	200120a4 	.word	0x200120a4
 8011ae0:	2000b22c 	.word	0x2000b22c
 8011ae4:	0801dd48 	.word	0x0801dd48
 8011ae8:	0801dd60 	.word	0x0801dd60
        } else {
          pcb->rtime = 0;
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	2200      	movs	r2, #0
 8011af0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	2200      	movs	r2, #0
 8011af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d00a      	beq.n	8011b1a <tcp_process+0x30a>
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b0a:	687a      	ldr	r2, [r7, #4]
 8011b0c:	6910      	ldr	r0, [r2, #16]
 8011b0e:	2200      	movs	r2, #0
 8011b10:	6879      	ldr	r1, [r7, #4]
 8011b12:	4798      	blx	r3
 8011b14:	4603      	mov	r3, r0
 8011b16:	76bb      	strb	r3, [r7, #26]
 8011b18:	e001      	b.n	8011b1e <tcp_process+0x30e>
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8011b1e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011b22:	f113 0f0d 	cmn.w	r3, #13
 8011b26:	d102      	bne.n	8011b2e <tcp_process+0x31e>
          return ERR_ABRT;
 8011b28:	f06f 030c 	mvn.w	r3, #12
 8011b2c:	e250      	b.n	8011fd0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	8b5b      	ldrh	r3, [r3, #26]
 8011b32:	f043 0302 	orr.w	r3, r3, #2
 8011b36:	b29a      	uxth	r2, r3
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011b3c:	e23a      	b.n	8011fb4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011b3e:	4b9d      	ldr	r3, [pc, #628]	; (8011db4 <tcp_process+0x5a4>)
 8011b40:	781b      	ldrb	r3, [r3, #0]
 8011b42:	f003 0310 	and.w	r3, r3, #16
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	f000 8234 	beq.w	8011fb4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b4c:	4b9a      	ldr	r3, [pc, #616]	; (8011db8 <tcp_process+0x5a8>)
 8011b4e:	6819      	ldr	r1, [r3, #0]
 8011b50:	4b9a      	ldr	r3, [pc, #616]	; (8011dbc <tcp_process+0x5ac>)
 8011b52:	881b      	ldrh	r3, [r3, #0]
 8011b54:	461a      	mov	r2, r3
 8011b56:	4b9a      	ldr	r3, [pc, #616]	; (8011dc0 <tcp_process+0x5b0>)
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011b5c:	4b99      	ldr	r3, [pc, #612]	; (8011dc4 <tcp_process+0x5b4>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b60:	885b      	ldrh	r3, [r3, #2]
 8011b62:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011b64:	4a97      	ldr	r2, [pc, #604]	; (8011dc4 <tcp_process+0x5b4>)
 8011b66:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b68:	8812      	ldrh	r2, [r2, #0]
 8011b6a:	b292      	uxth	r2, r2
 8011b6c:	9202      	str	r2, [sp, #8]
 8011b6e:	9301      	str	r3, [sp, #4]
 8011b70:	4b95      	ldr	r3, [pc, #596]	; (8011dc8 <tcp_process+0x5b8>)
 8011b72:	9300      	str	r3, [sp, #0]
 8011b74:	4b95      	ldr	r3, [pc, #596]	; (8011dcc <tcp_process+0x5bc>)
 8011b76:	4602      	mov	r2, r0
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f003 f8db 	bl	8014d34 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011b84:	2b05      	cmp	r3, #5
 8011b86:	f200 8215 	bhi.w	8011fb4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	f002 fea5 	bl	80148e0 <tcp_rexmit_rto>
      break;
 8011b96:	e20d      	b.n	8011fb4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011b98:	4b86      	ldr	r3, [pc, #536]	; (8011db4 <tcp_process+0x5a4>)
 8011b9a:	781b      	ldrb	r3, [r3, #0]
 8011b9c:	f003 0310 	and.w	r3, r3, #16
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	f000 80a1 	beq.w	8011ce8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011ba6:	4b84      	ldr	r3, [pc, #528]	; (8011db8 <tcp_process+0x5a8>)
 8011ba8:	681a      	ldr	r2, [r3, #0]
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011bae:	1ad3      	subs	r3, r2, r3
 8011bb0:	3b01      	subs	r3, #1
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	db7e      	blt.n	8011cb4 <tcp_process+0x4a4>
 8011bb6:	4b80      	ldr	r3, [pc, #512]	; (8011db8 <tcp_process+0x5a8>)
 8011bb8:	681a      	ldr	r2, [r3, #0]
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011bbe:	1ad3      	subs	r3, r2, r3
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	dc77      	bgt.n	8011cb4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	2204      	movs	r2, #4
 8011bc8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d102      	bne.n	8011bd8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011bd2:	23fa      	movs	r3, #250	; 0xfa
 8011bd4:	76bb      	strb	r3, [r7, #26]
 8011bd6:	e01d      	b.n	8011c14 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011bdc:	699b      	ldr	r3, [r3, #24]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d106      	bne.n	8011bf0 <tcp_process+0x3e0>
 8011be2:	4b7b      	ldr	r3, [pc, #492]	; (8011dd0 <tcp_process+0x5c0>)
 8011be4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011be8:	497a      	ldr	r1, [pc, #488]	; (8011dd4 <tcp_process+0x5c4>)
 8011bea:	487b      	ldr	r0, [pc, #492]	; (8011dd8 <tcp_process+0x5c8>)
 8011bec:	f009 f8ae 	bl	801ad4c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011bf4:	699b      	ldr	r3, [r3, #24]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d00a      	beq.n	8011c10 <tcp_process+0x400>
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011bfe:	699b      	ldr	r3, [r3, #24]
 8011c00:	687a      	ldr	r2, [r7, #4]
 8011c02:	6910      	ldr	r0, [r2, #16]
 8011c04:	2200      	movs	r2, #0
 8011c06:	6879      	ldr	r1, [r7, #4]
 8011c08:	4798      	blx	r3
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	76bb      	strb	r3, [r7, #26]
 8011c0e:	e001      	b.n	8011c14 <tcp_process+0x404>
 8011c10:	23f0      	movs	r3, #240	; 0xf0
 8011c12:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011c14:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d00a      	beq.n	8011c32 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011c1c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011c20:	f113 0f0d 	cmn.w	r3, #13
 8011c24:	d002      	beq.n	8011c2c <tcp_process+0x41c>
              tcp_abort(pcb);
 8011c26:	6878      	ldr	r0, [r7, #4]
 8011c28:	f7fd fd00 	bl	800f62c <tcp_abort>
            }
            return ERR_ABRT;
 8011c2c:	f06f 030c 	mvn.w	r3, #12
 8011c30:	e1ce      	b.n	8011fd0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011c32:	6878      	ldr	r0, [r7, #4]
 8011c34:	f000 fae0 	bl	80121f8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011c38:	4b68      	ldr	r3, [pc, #416]	; (8011ddc <tcp_process+0x5cc>)
 8011c3a:	881b      	ldrh	r3, [r3, #0]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d005      	beq.n	8011c4c <tcp_process+0x43c>
            recv_acked--;
 8011c40:	4b66      	ldr	r3, [pc, #408]	; (8011ddc <tcp_process+0x5cc>)
 8011c42:	881b      	ldrh	r3, [r3, #0]
 8011c44:	3b01      	subs	r3, #1
 8011c46:	b29a      	uxth	r2, r3
 8011c48:	4b64      	ldr	r3, [pc, #400]	; (8011ddc <tcp_process+0x5cc>)
 8011c4a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c50:	009a      	lsls	r2, r3, #2
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c56:	005b      	lsls	r3, r3, #1
 8011c58:	f241 111c 	movw	r1, #4380	; 0x111c
 8011c5c:	428b      	cmp	r3, r1
 8011c5e:	bf38      	it	cc
 8011c60:	460b      	movcc	r3, r1
 8011c62:	429a      	cmp	r2, r3
 8011c64:	d204      	bcs.n	8011c70 <tcp_process+0x460>
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c6a:	009b      	lsls	r3, r3, #2
 8011c6c:	b29b      	uxth	r3, r3
 8011c6e:	e00d      	b.n	8011c8c <tcp_process+0x47c>
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c74:	005b      	lsls	r3, r3, #1
 8011c76:	f241 121c 	movw	r2, #4380	; 0x111c
 8011c7a:	4293      	cmp	r3, r2
 8011c7c:	d904      	bls.n	8011c88 <tcp_process+0x478>
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c82:	005b      	lsls	r3, r3, #1
 8011c84:	b29b      	uxth	r3, r3
 8011c86:	e001      	b.n	8011c8c <tcp_process+0x47c>
 8011c88:	f241 131c 	movw	r3, #4380	; 0x111c
 8011c8c:	687a      	ldr	r2, [r7, #4]
 8011c8e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011c92:	4b53      	ldr	r3, [pc, #332]	; (8011de0 <tcp_process+0x5d0>)
 8011c94:	781b      	ldrb	r3, [r3, #0]
 8011c96:	f003 0320 	and.w	r3, r3, #32
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d037      	beq.n	8011d0e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	8b5b      	ldrh	r3, [r3, #26]
 8011ca2:	f043 0302 	orr.w	r3, r3, #2
 8011ca6:	b29a      	uxth	r2, r3
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	2207      	movs	r2, #7
 8011cb0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011cb2:	e02c      	b.n	8011d0e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011cb4:	4b40      	ldr	r3, [pc, #256]	; (8011db8 <tcp_process+0x5a8>)
 8011cb6:	6819      	ldr	r1, [r3, #0]
 8011cb8:	4b40      	ldr	r3, [pc, #256]	; (8011dbc <tcp_process+0x5ac>)
 8011cba:	881b      	ldrh	r3, [r3, #0]
 8011cbc:	461a      	mov	r2, r3
 8011cbe:	4b40      	ldr	r3, [pc, #256]	; (8011dc0 <tcp_process+0x5b0>)
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011cc4:	4b3f      	ldr	r3, [pc, #252]	; (8011dc4 <tcp_process+0x5b4>)
 8011cc6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011cc8:	885b      	ldrh	r3, [r3, #2]
 8011cca:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011ccc:	4a3d      	ldr	r2, [pc, #244]	; (8011dc4 <tcp_process+0x5b4>)
 8011cce:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011cd0:	8812      	ldrh	r2, [r2, #0]
 8011cd2:	b292      	uxth	r2, r2
 8011cd4:	9202      	str	r2, [sp, #8]
 8011cd6:	9301      	str	r3, [sp, #4]
 8011cd8:	4b3b      	ldr	r3, [pc, #236]	; (8011dc8 <tcp_process+0x5b8>)
 8011cda:	9300      	str	r3, [sp, #0]
 8011cdc:	4b3b      	ldr	r3, [pc, #236]	; (8011dcc <tcp_process+0x5bc>)
 8011cde:	4602      	mov	r2, r0
 8011ce0:	6878      	ldr	r0, [r7, #4]
 8011ce2:	f003 f827 	bl	8014d34 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011ce6:	e167      	b.n	8011fb8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011ce8:	4b32      	ldr	r3, [pc, #200]	; (8011db4 <tcp_process+0x5a4>)
 8011cea:	781b      	ldrb	r3, [r3, #0]
 8011cec:	f003 0302 	and.w	r3, r3, #2
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	f000 8161 	beq.w	8011fb8 <tcp_process+0x7a8>
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cfa:	1e5a      	subs	r2, r3, #1
 8011cfc:	4b30      	ldr	r3, [pc, #192]	; (8011dc0 <tcp_process+0x5b0>)
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	429a      	cmp	r2, r3
 8011d02:	f040 8159 	bne.w	8011fb8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011d06:	6878      	ldr	r0, [r7, #4]
 8011d08:	f002 fe0c 	bl	8014924 <tcp_rexmit>
      break;
 8011d0c:	e154      	b.n	8011fb8 <tcp_process+0x7a8>
 8011d0e:	e153      	b.n	8011fb8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f000 fa71 	bl	80121f8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011d16:	4b32      	ldr	r3, [pc, #200]	; (8011de0 <tcp_process+0x5d0>)
 8011d18:	781b      	ldrb	r3, [r3, #0]
 8011d1a:	f003 0320 	and.w	r3, r3, #32
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	f000 814c 	beq.w	8011fbc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	8b5b      	ldrh	r3, [r3, #26]
 8011d28:	f043 0302 	orr.w	r3, r3, #2
 8011d2c:	b29a      	uxth	r2, r3
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	2207      	movs	r2, #7
 8011d36:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011d38:	e140      	b.n	8011fbc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011d3a:	6878      	ldr	r0, [r7, #4]
 8011d3c:	f000 fa5c 	bl	80121f8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011d40:	4b27      	ldr	r3, [pc, #156]	; (8011de0 <tcp_process+0x5d0>)
 8011d42:	781b      	ldrb	r3, [r3, #0]
 8011d44:	f003 0320 	and.w	r3, r3, #32
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d071      	beq.n	8011e30 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011d4c:	4b19      	ldr	r3, [pc, #100]	; (8011db4 <tcp_process+0x5a4>)
 8011d4e:	781b      	ldrb	r3, [r3, #0]
 8011d50:	f003 0310 	and.w	r3, r3, #16
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d060      	beq.n	8011e1a <tcp_process+0x60a>
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011d5c:	4b16      	ldr	r3, [pc, #88]	; (8011db8 <tcp_process+0x5a8>)
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	429a      	cmp	r2, r3
 8011d62:	d15a      	bne.n	8011e1a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d156      	bne.n	8011e1a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	8b5b      	ldrh	r3, [r3, #26]
 8011d70:	f043 0302 	orr.w	r3, r3, #2
 8011d74:	b29a      	uxth	r2, r3
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011d7a:	6878      	ldr	r0, [r7, #4]
 8011d7c:	f7fe fdbe 	bl	80108fc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011d80:	4b18      	ldr	r3, [pc, #96]	; (8011de4 <tcp_process+0x5d4>)
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	687a      	ldr	r2, [r7, #4]
 8011d86:	429a      	cmp	r2, r3
 8011d88:	d105      	bne.n	8011d96 <tcp_process+0x586>
 8011d8a:	4b16      	ldr	r3, [pc, #88]	; (8011de4 <tcp_process+0x5d4>)
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	68db      	ldr	r3, [r3, #12]
 8011d90:	4a14      	ldr	r2, [pc, #80]	; (8011de4 <tcp_process+0x5d4>)
 8011d92:	6013      	str	r3, [r2, #0]
 8011d94:	e02e      	b.n	8011df4 <tcp_process+0x5e4>
 8011d96:	4b13      	ldr	r3, [pc, #76]	; (8011de4 <tcp_process+0x5d4>)
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	617b      	str	r3, [r7, #20]
 8011d9c:	e027      	b.n	8011dee <tcp_process+0x5de>
 8011d9e:	697b      	ldr	r3, [r7, #20]
 8011da0:	68db      	ldr	r3, [r3, #12]
 8011da2:	687a      	ldr	r2, [r7, #4]
 8011da4:	429a      	cmp	r2, r3
 8011da6:	d11f      	bne.n	8011de8 <tcp_process+0x5d8>
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	68da      	ldr	r2, [r3, #12]
 8011dac:	697b      	ldr	r3, [r7, #20]
 8011dae:	60da      	str	r2, [r3, #12]
 8011db0:	e020      	b.n	8011df4 <tcp_process+0x5e4>
 8011db2:	bf00      	nop
 8011db4:	2000b248 	.word	0x2000b248
 8011db8:	2000b240 	.word	0x2000b240
 8011dbc:	2000b246 	.word	0x2000b246
 8011dc0:	2000b23c 	.word	0x2000b23c
 8011dc4:	2000b22c 	.word	0x2000b22c
 8011dc8:	2000e99c 	.word	0x2000e99c
 8011dcc:	2000e9a0 	.word	0x2000e9a0
 8011dd0:	0801dad4 	.word	0x0801dad4
 8011dd4:	0801dd74 	.word	0x0801dd74
 8011dd8:	0801db20 	.word	0x0801db20
 8011ddc:	2000b244 	.word	0x2000b244
 8011de0:	2000b249 	.word	0x2000b249
 8011de4:	200120a0 	.word	0x200120a0
 8011de8:	697b      	ldr	r3, [r7, #20]
 8011dea:	68db      	ldr	r3, [r3, #12]
 8011dec:	617b      	str	r3, [r7, #20]
 8011dee:	697b      	ldr	r3, [r7, #20]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d1d4      	bne.n	8011d9e <tcp_process+0x58e>
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2200      	movs	r2, #0
 8011df8:	60da      	str	r2, [r3, #12]
 8011dfa:	4b77      	ldr	r3, [pc, #476]	; (8011fd8 <tcp_process+0x7c8>)
 8011dfc:	2201      	movs	r2, #1
 8011dfe:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	220a      	movs	r2, #10
 8011e04:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011e06:	4b75      	ldr	r3, [pc, #468]	; (8011fdc <tcp_process+0x7cc>)
 8011e08:	681a      	ldr	r2, [r3, #0]
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	60da      	str	r2, [r3, #12]
 8011e0e:	4a73      	ldr	r2, [pc, #460]	; (8011fdc <tcp_process+0x7cc>)
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	6013      	str	r3, [r2, #0]
 8011e14:	f003 f950 	bl	80150b8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011e18:	e0d2      	b.n	8011fc0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	8b5b      	ldrh	r3, [r3, #26]
 8011e1e:	f043 0302 	orr.w	r3, r3, #2
 8011e22:	b29a      	uxth	r2, r3
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	2208      	movs	r2, #8
 8011e2c:	751a      	strb	r2, [r3, #20]
      break;
 8011e2e:	e0c7      	b.n	8011fc0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011e30:	4b6b      	ldr	r3, [pc, #428]	; (8011fe0 <tcp_process+0x7d0>)
 8011e32:	781b      	ldrb	r3, [r3, #0]
 8011e34:	f003 0310 	and.w	r3, r3, #16
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	f000 80c1 	beq.w	8011fc0 <tcp_process+0x7b0>
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011e42:	4b68      	ldr	r3, [pc, #416]	; (8011fe4 <tcp_process+0x7d4>)
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	429a      	cmp	r2, r3
 8011e48:	f040 80ba 	bne.w	8011fc0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	f040 80b5 	bne.w	8011fc0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	2206      	movs	r2, #6
 8011e5a:	751a      	strb	r2, [r3, #20]
      break;
 8011e5c:	e0b0      	b.n	8011fc0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011e5e:	6878      	ldr	r0, [r7, #4]
 8011e60:	f000 f9ca 	bl	80121f8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011e64:	4b60      	ldr	r3, [pc, #384]	; (8011fe8 <tcp_process+0x7d8>)
 8011e66:	781b      	ldrb	r3, [r3, #0]
 8011e68:	f003 0320 	and.w	r3, r3, #32
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	f000 80a9 	beq.w	8011fc4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	8b5b      	ldrh	r3, [r3, #26]
 8011e76:	f043 0302 	orr.w	r3, r3, #2
 8011e7a:	b29a      	uxth	r2, r3
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011e80:	6878      	ldr	r0, [r7, #4]
 8011e82:	f7fe fd3b 	bl	80108fc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011e86:	4b59      	ldr	r3, [pc, #356]	; (8011fec <tcp_process+0x7dc>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	687a      	ldr	r2, [r7, #4]
 8011e8c:	429a      	cmp	r2, r3
 8011e8e:	d105      	bne.n	8011e9c <tcp_process+0x68c>
 8011e90:	4b56      	ldr	r3, [pc, #344]	; (8011fec <tcp_process+0x7dc>)
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	68db      	ldr	r3, [r3, #12]
 8011e96:	4a55      	ldr	r2, [pc, #340]	; (8011fec <tcp_process+0x7dc>)
 8011e98:	6013      	str	r3, [r2, #0]
 8011e9a:	e013      	b.n	8011ec4 <tcp_process+0x6b4>
 8011e9c:	4b53      	ldr	r3, [pc, #332]	; (8011fec <tcp_process+0x7dc>)
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	613b      	str	r3, [r7, #16]
 8011ea2:	e00c      	b.n	8011ebe <tcp_process+0x6ae>
 8011ea4:	693b      	ldr	r3, [r7, #16]
 8011ea6:	68db      	ldr	r3, [r3, #12]
 8011ea8:	687a      	ldr	r2, [r7, #4]
 8011eaa:	429a      	cmp	r2, r3
 8011eac:	d104      	bne.n	8011eb8 <tcp_process+0x6a8>
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	68da      	ldr	r2, [r3, #12]
 8011eb2:	693b      	ldr	r3, [r7, #16]
 8011eb4:	60da      	str	r2, [r3, #12]
 8011eb6:	e005      	b.n	8011ec4 <tcp_process+0x6b4>
 8011eb8:	693b      	ldr	r3, [r7, #16]
 8011eba:	68db      	ldr	r3, [r3, #12]
 8011ebc:	613b      	str	r3, [r7, #16]
 8011ebe:	693b      	ldr	r3, [r7, #16]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d1ef      	bne.n	8011ea4 <tcp_process+0x694>
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	60da      	str	r2, [r3, #12]
 8011eca:	4b43      	ldr	r3, [pc, #268]	; (8011fd8 <tcp_process+0x7c8>)
 8011ecc:	2201      	movs	r2, #1
 8011ece:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	220a      	movs	r2, #10
 8011ed4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011ed6:	4b41      	ldr	r3, [pc, #260]	; (8011fdc <tcp_process+0x7cc>)
 8011ed8:	681a      	ldr	r2, [r3, #0]
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	60da      	str	r2, [r3, #12]
 8011ede:	4a3f      	ldr	r2, [pc, #252]	; (8011fdc <tcp_process+0x7cc>)
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	6013      	str	r3, [r2, #0]
 8011ee4:	f003 f8e8 	bl	80150b8 <tcp_timer_needed>
      }
      break;
 8011ee8:	e06c      	b.n	8011fc4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011eea:	6878      	ldr	r0, [r7, #4]
 8011eec:	f000 f984 	bl	80121f8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011ef0:	4b3b      	ldr	r3, [pc, #236]	; (8011fe0 <tcp_process+0x7d0>)
 8011ef2:	781b      	ldrb	r3, [r3, #0]
 8011ef4:	f003 0310 	and.w	r3, r3, #16
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d065      	beq.n	8011fc8 <tcp_process+0x7b8>
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011f00:	4b38      	ldr	r3, [pc, #224]	; (8011fe4 <tcp_process+0x7d4>)
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	429a      	cmp	r2, r3
 8011f06:	d15f      	bne.n	8011fc8 <tcp_process+0x7b8>
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d15b      	bne.n	8011fc8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011f10:	6878      	ldr	r0, [r7, #4]
 8011f12:	f7fe fcf3 	bl	80108fc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011f16:	4b35      	ldr	r3, [pc, #212]	; (8011fec <tcp_process+0x7dc>)
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	687a      	ldr	r2, [r7, #4]
 8011f1c:	429a      	cmp	r2, r3
 8011f1e:	d105      	bne.n	8011f2c <tcp_process+0x71c>
 8011f20:	4b32      	ldr	r3, [pc, #200]	; (8011fec <tcp_process+0x7dc>)
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	68db      	ldr	r3, [r3, #12]
 8011f26:	4a31      	ldr	r2, [pc, #196]	; (8011fec <tcp_process+0x7dc>)
 8011f28:	6013      	str	r3, [r2, #0]
 8011f2a:	e013      	b.n	8011f54 <tcp_process+0x744>
 8011f2c:	4b2f      	ldr	r3, [pc, #188]	; (8011fec <tcp_process+0x7dc>)
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	60fb      	str	r3, [r7, #12]
 8011f32:	e00c      	b.n	8011f4e <tcp_process+0x73e>
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	68db      	ldr	r3, [r3, #12]
 8011f38:	687a      	ldr	r2, [r7, #4]
 8011f3a:	429a      	cmp	r2, r3
 8011f3c:	d104      	bne.n	8011f48 <tcp_process+0x738>
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	68da      	ldr	r2, [r3, #12]
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	60da      	str	r2, [r3, #12]
 8011f46:	e005      	b.n	8011f54 <tcp_process+0x744>
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	68db      	ldr	r3, [r3, #12]
 8011f4c:	60fb      	str	r3, [r7, #12]
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d1ef      	bne.n	8011f34 <tcp_process+0x724>
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	2200      	movs	r2, #0
 8011f58:	60da      	str	r2, [r3, #12]
 8011f5a:	4b1f      	ldr	r3, [pc, #124]	; (8011fd8 <tcp_process+0x7c8>)
 8011f5c:	2201      	movs	r2, #1
 8011f5e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	220a      	movs	r2, #10
 8011f64:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011f66:	4b1d      	ldr	r3, [pc, #116]	; (8011fdc <tcp_process+0x7cc>)
 8011f68:	681a      	ldr	r2, [r3, #0]
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	60da      	str	r2, [r3, #12]
 8011f6e:	4a1b      	ldr	r2, [pc, #108]	; (8011fdc <tcp_process+0x7cc>)
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	6013      	str	r3, [r2, #0]
 8011f74:	f003 f8a0 	bl	80150b8 <tcp_timer_needed>
      }
      break;
 8011f78:	e026      	b.n	8011fc8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011f7a:	6878      	ldr	r0, [r7, #4]
 8011f7c:	f000 f93c 	bl	80121f8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011f80:	4b17      	ldr	r3, [pc, #92]	; (8011fe0 <tcp_process+0x7d0>)
 8011f82:	781b      	ldrb	r3, [r3, #0]
 8011f84:	f003 0310 	and.w	r3, r3, #16
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d01f      	beq.n	8011fcc <tcp_process+0x7bc>
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011f90:	4b14      	ldr	r3, [pc, #80]	; (8011fe4 <tcp_process+0x7d4>)
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	429a      	cmp	r2, r3
 8011f96:	d119      	bne.n	8011fcc <tcp_process+0x7bc>
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d115      	bne.n	8011fcc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011fa0:	4b11      	ldr	r3, [pc, #68]	; (8011fe8 <tcp_process+0x7d8>)
 8011fa2:	781b      	ldrb	r3, [r3, #0]
 8011fa4:	f043 0310 	orr.w	r3, r3, #16
 8011fa8:	b2da      	uxtb	r2, r3
 8011faa:	4b0f      	ldr	r3, [pc, #60]	; (8011fe8 <tcp_process+0x7d8>)
 8011fac:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011fae:	e00d      	b.n	8011fcc <tcp_process+0x7bc>
    default:
      break;
 8011fb0:	bf00      	nop
 8011fb2:	e00c      	b.n	8011fce <tcp_process+0x7be>
      break;
 8011fb4:	bf00      	nop
 8011fb6:	e00a      	b.n	8011fce <tcp_process+0x7be>
      break;
 8011fb8:	bf00      	nop
 8011fba:	e008      	b.n	8011fce <tcp_process+0x7be>
      break;
 8011fbc:	bf00      	nop
 8011fbe:	e006      	b.n	8011fce <tcp_process+0x7be>
      break;
 8011fc0:	bf00      	nop
 8011fc2:	e004      	b.n	8011fce <tcp_process+0x7be>
      break;
 8011fc4:	bf00      	nop
 8011fc6:	e002      	b.n	8011fce <tcp_process+0x7be>
      break;
 8011fc8:	bf00      	nop
 8011fca:	e000      	b.n	8011fce <tcp_process+0x7be>
      break;
 8011fcc:	bf00      	nop
  }
  return ERR_OK;
 8011fce:	2300      	movs	r3, #0
}
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	3724      	adds	r7, #36	; 0x24
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	bd90      	pop	{r4, r7, pc}
 8011fd8:	2001209c 	.word	0x2001209c
 8011fdc:	200120b0 	.word	0x200120b0
 8011fe0:	2000b248 	.word	0x2000b248
 8011fe4:	2000b240 	.word	0x2000b240
 8011fe8:	2000b249 	.word	0x2000b249
 8011fec:	200120a0 	.word	0x200120a0

08011ff0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011ff0:	b590      	push	{r4, r7, lr}
 8011ff2:	b085      	sub	sp, #20
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
 8011ff8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d106      	bne.n	801200e <tcp_oos_insert_segment+0x1e>
 8012000:	4b3b      	ldr	r3, [pc, #236]	; (80120f0 <tcp_oos_insert_segment+0x100>)
 8012002:	f240 421f 	movw	r2, #1055	; 0x41f
 8012006:	493b      	ldr	r1, [pc, #236]	; (80120f4 <tcp_oos_insert_segment+0x104>)
 8012008:	483b      	ldr	r0, [pc, #236]	; (80120f8 <tcp_oos_insert_segment+0x108>)
 801200a:	f008 fe9f 	bl	801ad4c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	68db      	ldr	r3, [r3, #12]
 8012012:	899b      	ldrh	r3, [r3, #12]
 8012014:	b29b      	uxth	r3, r3
 8012016:	4618      	mov	r0, r3
 8012018:	f7fb f8f2 	bl	800d200 <lwip_htons>
 801201c:	4603      	mov	r3, r0
 801201e:	b2db      	uxtb	r3, r3
 8012020:	f003 0301 	and.w	r3, r3, #1
 8012024:	2b00      	cmp	r3, #0
 8012026:	d028      	beq.n	801207a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012028:	6838      	ldr	r0, [r7, #0]
 801202a:	f7fe f997 	bl	801035c <tcp_segs_free>
    next = NULL;
 801202e:	2300      	movs	r3, #0
 8012030:	603b      	str	r3, [r7, #0]
 8012032:	e056      	b.n	80120e2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012034:	683b      	ldr	r3, [r7, #0]
 8012036:	68db      	ldr	r3, [r3, #12]
 8012038:	899b      	ldrh	r3, [r3, #12]
 801203a:	b29b      	uxth	r3, r3
 801203c:	4618      	mov	r0, r3
 801203e:	f7fb f8df 	bl	800d200 <lwip_htons>
 8012042:	4603      	mov	r3, r0
 8012044:	b2db      	uxtb	r3, r3
 8012046:	f003 0301 	and.w	r3, r3, #1
 801204a:	2b00      	cmp	r3, #0
 801204c:	d00d      	beq.n	801206a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	68db      	ldr	r3, [r3, #12]
 8012052:	899b      	ldrh	r3, [r3, #12]
 8012054:	b29c      	uxth	r4, r3
 8012056:	2001      	movs	r0, #1
 8012058:	f7fb f8d2 	bl	800d200 <lwip_htons>
 801205c:	4603      	mov	r3, r0
 801205e:	461a      	mov	r2, r3
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	68db      	ldr	r3, [r3, #12]
 8012064:	4322      	orrs	r2, r4
 8012066:	b292      	uxth	r2, r2
 8012068:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801206a:	683b      	ldr	r3, [r7, #0]
 801206c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801206e:	683b      	ldr	r3, [r7, #0]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8012074:	68f8      	ldr	r0, [r7, #12]
 8012076:	f7fe f986 	bl	8010386 <tcp_seg_free>
    while (next &&
 801207a:	683b      	ldr	r3, [r7, #0]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d00e      	beq.n	801209e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	891b      	ldrh	r3, [r3, #8]
 8012084:	461a      	mov	r2, r3
 8012086:	4b1d      	ldr	r3, [pc, #116]	; (80120fc <tcp_oos_insert_segment+0x10c>)
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	441a      	add	r2, r3
 801208c:	683b      	ldr	r3, [r7, #0]
 801208e:	68db      	ldr	r3, [r3, #12]
 8012090:	685b      	ldr	r3, [r3, #4]
 8012092:	6839      	ldr	r1, [r7, #0]
 8012094:	8909      	ldrh	r1, [r1, #8]
 8012096:	440b      	add	r3, r1
 8012098:	1ad3      	subs	r3, r2, r3
    while (next &&
 801209a:	2b00      	cmp	r3, #0
 801209c:	daca      	bge.n	8012034 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d01e      	beq.n	80120e2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	891b      	ldrh	r3, [r3, #8]
 80120a8:	461a      	mov	r2, r3
 80120aa:	4b14      	ldr	r3, [pc, #80]	; (80120fc <tcp_oos_insert_segment+0x10c>)
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	441a      	add	r2, r3
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	68db      	ldr	r3, [r3, #12]
 80120b4:	685b      	ldr	r3, [r3, #4]
 80120b6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	dd12      	ble.n	80120e2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80120bc:	683b      	ldr	r3, [r7, #0]
 80120be:	68db      	ldr	r3, [r3, #12]
 80120c0:	685b      	ldr	r3, [r3, #4]
 80120c2:	b29a      	uxth	r2, r3
 80120c4:	4b0d      	ldr	r3, [pc, #52]	; (80120fc <tcp_oos_insert_segment+0x10c>)
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	b29b      	uxth	r3, r3
 80120ca:	1ad3      	subs	r3, r2, r3
 80120cc:	b29a      	uxth	r2, r3
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	685a      	ldr	r2, [r3, #4]
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	891b      	ldrh	r3, [r3, #8]
 80120da:	4619      	mov	r1, r3
 80120dc:	4610      	mov	r0, r2
 80120de:	f7fc faed 	bl	800e6bc <pbuf_realloc>
    }
  }
  cseg->next = next;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	683a      	ldr	r2, [r7, #0]
 80120e6:	601a      	str	r2, [r3, #0]
}
 80120e8:	bf00      	nop
 80120ea:	3714      	adds	r7, #20
 80120ec:	46bd      	mov	sp, r7
 80120ee:	bd90      	pop	{r4, r7, pc}
 80120f0:	0801dad4 	.word	0x0801dad4
 80120f4:	0801dd94 	.word	0x0801dd94
 80120f8:	0801db20 	.word	0x0801db20
 80120fc:	2000b23c 	.word	0x2000b23c

08012100 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8012100:	b5b0      	push	{r4, r5, r7, lr}
 8012102:	b086      	sub	sp, #24
 8012104:	af00      	add	r7, sp, #0
 8012106:	60f8      	str	r0, [r7, #12]
 8012108:	60b9      	str	r1, [r7, #8]
 801210a:	607a      	str	r2, [r7, #4]
 801210c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801210e:	e03e      	b.n	801218e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8012110:	68bb      	ldr	r3, [r7, #8]
 8012112:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8012114:	68bb      	ldr	r3, [r7, #8]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801211a:	697b      	ldr	r3, [r7, #20]
 801211c:	685b      	ldr	r3, [r3, #4]
 801211e:	4618      	mov	r0, r3
 8012120:	f7fc fd12 	bl	800eb48 <pbuf_clen>
 8012124:	4603      	mov	r3, r0
 8012126:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801212e:	8a7a      	ldrh	r2, [r7, #18]
 8012130:	429a      	cmp	r2, r3
 8012132:	d906      	bls.n	8012142 <tcp_free_acked_segments+0x42>
 8012134:	4b2a      	ldr	r3, [pc, #168]	; (80121e0 <tcp_free_acked_segments+0xe0>)
 8012136:	f240 4257 	movw	r2, #1111	; 0x457
 801213a:	492a      	ldr	r1, [pc, #168]	; (80121e4 <tcp_free_acked_segments+0xe4>)
 801213c:	482a      	ldr	r0, [pc, #168]	; (80121e8 <tcp_free_acked_segments+0xe8>)
 801213e:	f008 fe05 	bl	801ad4c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8012148:	8a7b      	ldrh	r3, [r7, #18]
 801214a:	1ad3      	subs	r3, r2, r3
 801214c:	b29a      	uxth	r2, r3
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012154:	697b      	ldr	r3, [r7, #20]
 8012156:	891a      	ldrh	r2, [r3, #8]
 8012158:	4b24      	ldr	r3, [pc, #144]	; (80121ec <tcp_free_acked_segments+0xec>)
 801215a:	881b      	ldrh	r3, [r3, #0]
 801215c:	4413      	add	r3, r2
 801215e:	b29a      	uxth	r2, r3
 8012160:	4b22      	ldr	r3, [pc, #136]	; (80121ec <tcp_free_acked_segments+0xec>)
 8012162:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8012164:	6978      	ldr	r0, [r7, #20]
 8012166:	f7fe f90e 	bl	8010386 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012170:	2b00      	cmp	r3, #0
 8012172:	d00c      	beq.n	801218e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8012174:	68bb      	ldr	r3, [r7, #8]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d109      	bne.n	801218e <tcp_free_acked_segments+0x8e>
 801217a:	683b      	ldr	r3, [r7, #0]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d106      	bne.n	801218e <tcp_free_acked_segments+0x8e>
 8012180:	4b17      	ldr	r3, [pc, #92]	; (80121e0 <tcp_free_acked_segments+0xe0>)
 8012182:	f240 4261 	movw	r2, #1121	; 0x461
 8012186:	491a      	ldr	r1, [pc, #104]	; (80121f0 <tcp_free_acked_segments+0xf0>)
 8012188:	4817      	ldr	r0, [pc, #92]	; (80121e8 <tcp_free_acked_segments+0xe8>)
 801218a:	f008 fddf 	bl	801ad4c <iprintf>
  while (seg_list != NULL &&
 801218e:	68bb      	ldr	r3, [r7, #8]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d020      	beq.n	80121d6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012194:	68bb      	ldr	r3, [r7, #8]
 8012196:	68db      	ldr	r3, [r3, #12]
 8012198:	685b      	ldr	r3, [r3, #4]
 801219a:	4618      	mov	r0, r3
 801219c:	f7fb f845 	bl	800d22a <lwip_htonl>
 80121a0:	4604      	mov	r4, r0
 80121a2:	68bb      	ldr	r3, [r7, #8]
 80121a4:	891b      	ldrh	r3, [r3, #8]
 80121a6:	461d      	mov	r5, r3
 80121a8:	68bb      	ldr	r3, [r7, #8]
 80121aa:	68db      	ldr	r3, [r3, #12]
 80121ac:	899b      	ldrh	r3, [r3, #12]
 80121ae:	b29b      	uxth	r3, r3
 80121b0:	4618      	mov	r0, r3
 80121b2:	f7fb f825 	bl	800d200 <lwip_htons>
 80121b6:	4603      	mov	r3, r0
 80121b8:	b2db      	uxtb	r3, r3
 80121ba:	f003 0303 	and.w	r3, r3, #3
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d001      	beq.n	80121c6 <tcp_free_acked_segments+0xc6>
 80121c2:	2301      	movs	r3, #1
 80121c4:	e000      	b.n	80121c8 <tcp_free_acked_segments+0xc8>
 80121c6:	2300      	movs	r3, #0
 80121c8:	442b      	add	r3, r5
 80121ca:	18e2      	adds	r2, r4, r3
 80121cc:	4b09      	ldr	r3, [pc, #36]	; (80121f4 <tcp_free_acked_segments+0xf4>)
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	dd9c      	ble.n	8012110 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80121d6:	68bb      	ldr	r3, [r7, #8]
}
 80121d8:	4618      	mov	r0, r3
 80121da:	3718      	adds	r7, #24
 80121dc:	46bd      	mov	sp, r7
 80121de:	bdb0      	pop	{r4, r5, r7, pc}
 80121e0:	0801dad4 	.word	0x0801dad4
 80121e4:	0801ddbc 	.word	0x0801ddbc
 80121e8:	0801db20 	.word	0x0801db20
 80121ec:	2000b244 	.word	0x2000b244
 80121f0:	0801dde4 	.word	0x0801dde4
 80121f4:	2000b240 	.word	0x2000b240

080121f8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80121f8:	b5b0      	push	{r4, r5, r7, lr}
 80121fa:	b094      	sub	sp, #80	; 0x50
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8012200:	2300      	movs	r3, #0
 8012202:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d106      	bne.n	8012218 <tcp_receive+0x20>
 801220a:	4ba6      	ldr	r3, [pc, #664]	; (80124a4 <tcp_receive+0x2ac>)
 801220c:	f240 427b 	movw	r2, #1147	; 0x47b
 8012210:	49a5      	ldr	r1, [pc, #660]	; (80124a8 <tcp_receive+0x2b0>)
 8012212:	48a6      	ldr	r0, [pc, #664]	; (80124ac <tcp_receive+0x2b4>)
 8012214:	f008 fd9a 	bl	801ad4c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	7d1b      	ldrb	r3, [r3, #20]
 801221c:	2b03      	cmp	r3, #3
 801221e:	d806      	bhi.n	801222e <tcp_receive+0x36>
 8012220:	4ba0      	ldr	r3, [pc, #640]	; (80124a4 <tcp_receive+0x2ac>)
 8012222:	f240 427c 	movw	r2, #1148	; 0x47c
 8012226:	49a2      	ldr	r1, [pc, #648]	; (80124b0 <tcp_receive+0x2b8>)
 8012228:	48a0      	ldr	r0, [pc, #640]	; (80124ac <tcp_receive+0x2b4>)
 801222a:	f008 fd8f 	bl	801ad4c <iprintf>

  if (flags & TCP_ACK) {
 801222e:	4ba1      	ldr	r3, [pc, #644]	; (80124b4 <tcp_receive+0x2bc>)
 8012230:	781b      	ldrb	r3, [r3, #0]
 8012232:	f003 0310 	and.w	r3, r3, #16
 8012236:	2b00      	cmp	r3, #0
 8012238:	f000 8263 	beq.w	8012702 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012242:	461a      	mov	r2, r3
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012248:	4413      	add	r3, r2
 801224a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012250:	4b99      	ldr	r3, [pc, #612]	; (80124b8 <tcp_receive+0x2c0>)
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	1ad3      	subs	r3, r2, r3
 8012256:	2b00      	cmp	r3, #0
 8012258:	db1b      	blt.n	8012292 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801225e:	4b96      	ldr	r3, [pc, #600]	; (80124b8 <tcp_receive+0x2c0>)
 8012260:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012262:	429a      	cmp	r2, r3
 8012264:	d106      	bne.n	8012274 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801226a:	4b94      	ldr	r3, [pc, #592]	; (80124bc <tcp_receive+0x2c4>)
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	1ad3      	subs	r3, r2, r3
 8012270:	2b00      	cmp	r3, #0
 8012272:	db0e      	blt.n	8012292 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012278:	4b90      	ldr	r3, [pc, #576]	; (80124bc <tcp_receive+0x2c4>)
 801227a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801227c:	429a      	cmp	r2, r3
 801227e:	d125      	bne.n	80122cc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012280:	4b8f      	ldr	r3, [pc, #572]	; (80124c0 <tcp_receive+0x2c8>)
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	89db      	ldrh	r3, [r3, #14]
 8012286:	b29a      	uxth	r2, r3
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801228e:	429a      	cmp	r2, r3
 8012290:	d91c      	bls.n	80122cc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012292:	4b8b      	ldr	r3, [pc, #556]	; (80124c0 <tcp_receive+0x2c8>)
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	89db      	ldrh	r3, [r3, #14]
 8012298:	b29a      	uxth	r2, r3
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80122ac:	429a      	cmp	r2, r3
 80122ae:	d205      	bcs.n	80122bc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80122bc:	4b7e      	ldr	r3, [pc, #504]	; (80124b8 <tcp_receive+0x2c0>)
 80122be:	681a      	ldr	r2, [r3, #0]
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80122c4:	4b7d      	ldr	r3, [pc, #500]	; (80124bc <tcp_receive+0x2c4>)
 80122c6:	681a      	ldr	r2, [r3, #0]
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80122cc:	4b7b      	ldr	r3, [pc, #492]	; (80124bc <tcp_receive+0x2c4>)
 80122ce:	681a      	ldr	r2, [r3, #0]
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122d4:	1ad3      	subs	r3, r2, r3
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	dc58      	bgt.n	801238c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80122da:	4b7a      	ldr	r3, [pc, #488]	; (80124c4 <tcp_receive+0x2cc>)
 80122dc:	881b      	ldrh	r3, [r3, #0]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d14b      	bne.n	801237a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80122e6:	687a      	ldr	r2, [r7, #4]
 80122e8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80122ec:	4413      	add	r3, r2
 80122ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80122f0:	429a      	cmp	r2, r3
 80122f2:	d142      	bne.n	801237a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	db3d      	blt.n	801237a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012302:	4b6e      	ldr	r3, [pc, #440]	; (80124bc <tcp_receive+0x2c4>)
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	429a      	cmp	r2, r3
 8012308:	d137      	bne.n	801237a <tcp_receive+0x182>
              found_dupack = 1;
 801230a:	2301      	movs	r3, #1
 801230c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012314:	2bff      	cmp	r3, #255	; 0xff
 8012316:	d007      	beq.n	8012328 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801231e:	3301      	adds	r3, #1
 8012320:	b2da      	uxtb	r2, r3
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801232e:	2b03      	cmp	r3, #3
 8012330:	d91b      	bls.n	801236a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801233c:	4413      	add	r3, r2
 801233e:	b29a      	uxth	r2, r3
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012346:	429a      	cmp	r2, r3
 8012348:	d30a      	bcc.n	8012360 <tcp_receive+0x168>
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012354:	4413      	add	r3, r2
 8012356:	b29a      	uxth	r2, r3
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801235e:	e004      	b.n	801236a <tcp_receive+0x172>
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012366:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012370:	2b02      	cmp	r3, #2
 8012372:	d902      	bls.n	801237a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012374:	6878      	ldr	r0, [r7, #4]
 8012376:	f002 fb41 	bl	80149fc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801237a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801237c:	2b00      	cmp	r3, #0
 801237e:	f040 8160 	bne.w	8012642 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	2200      	movs	r2, #0
 8012386:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801238a:	e15a      	b.n	8012642 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801238c:	4b4b      	ldr	r3, [pc, #300]	; (80124bc <tcp_receive+0x2c4>)
 801238e:	681a      	ldr	r2, [r3, #0]
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012394:	1ad3      	subs	r3, r2, r3
 8012396:	3b01      	subs	r3, #1
 8012398:	2b00      	cmp	r3, #0
 801239a:	f2c0 814d 	blt.w	8012638 <tcp_receive+0x440>
 801239e:	4b47      	ldr	r3, [pc, #284]	; (80124bc <tcp_receive+0x2c4>)
 80123a0:	681a      	ldr	r2, [r3, #0]
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80123a6:	1ad3      	subs	r3, r2, r3
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	f300 8145 	bgt.w	8012638 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	8b5b      	ldrh	r3, [r3, #26]
 80123b2:	f003 0304 	and.w	r3, r3, #4
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d010      	beq.n	80123dc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	8b5b      	ldrh	r3, [r3, #26]
 80123be:	f023 0304 	bic.w	r3, r3, #4
 80123c2:	b29a      	uxth	r2, r3
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	2200      	movs	r2, #0
 80123d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	2200      	movs	r2, #0
 80123e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80123ea:	10db      	asrs	r3, r3, #3
 80123ec:	b21b      	sxth	r3, r3
 80123ee:	b29a      	uxth	r2, r3
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80123f6:	b29b      	uxth	r3, r3
 80123f8:	4413      	add	r3, r2
 80123fa:	b29b      	uxth	r3, r3
 80123fc:	b21a      	sxth	r2, r3
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012404:	4b2d      	ldr	r3, [pc, #180]	; (80124bc <tcp_receive+0x2c4>)
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	b29a      	uxth	r2, r3
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801240e:	b29b      	uxth	r3, r3
 8012410:	1ad3      	subs	r3, r2, r3
 8012412:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	2200      	movs	r2, #0
 8012418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801241c:	4b27      	ldr	r3, [pc, #156]	; (80124bc <tcp_receive+0x2c4>)
 801241e:	681a      	ldr	r2, [r3, #0]
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	7d1b      	ldrb	r3, [r3, #20]
 8012428:	2b03      	cmp	r3, #3
 801242a:	f240 8096 	bls.w	801255a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801243a:	429a      	cmp	r2, r3
 801243c:	d244      	bcs.n	80124c8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	8b5b      	ldrh	r3, [r3, #26]
 8012442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012446:	2b00      	cmp	r3, #0
 8012448:	d001      	beq.n	801244e <tcp_receive+0x256>
 801244a:	2301      	movs	r3, #1
 801244c:	e000      	b.n	8012450 <tcp_receive+0x258>
 801244e:	2302      	movs	r3, #2
 8012450:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012454:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012458:	b29a      	uxth	r2, r3
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801245e:	fb12 f303 	smulbb	r3, r2, r3
 8012462:	b29b      	uxth	r3, r3
 8012464:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012466:	4293      	cmp	r3, r2
 8012468:	bf28      	it	cs
 801246a:	4613      	movcs	r3, r2
 801246c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012474:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012476:	4413      	add	r3, r2
 8012478:	b29a      	uxth	r2, r3
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012480:	429a      	cmp	r2, r3
 8012482:	d309      	bcc.n	8012498 <tcp_receive+0x2a0>
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801248a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801248c:	4413      	add	r3, r2
 801248e:	b29a      	uxth	r2, r3
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012496:	e060      	b.n	801255a <tcp_receive+0x362>
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801249e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80124a2:	e05a      	b.n	801255a <tcp_receive+0x362>
 80124a4:	0801dad4 	.word	0x0801dad4
 80124a8:	0801de04 	.word	0x0801de04
 80124ac:	0801db20 	.word	0x0801db20
 80124b0:	0801de20 	.word	0x0801de20
 80124b4:	2000b248 	.word	0x2000b248
 80124b8:	2000b23c 	.word	0x2000b23c
 80124bc:	2000b240 	.word	0x2000b240
 80124c0:	2000b22c 	.word	0x2000b22c
 80124c4:	2000b246 	.word	0x2000b246
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80124ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80124d0:	4413      	add	r3, r2
 80124d2:	b29a      	uxth	r2, r3
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80124da:	429a      	cmp	r2, r3
 80124dc:	d309      	bcc.n	80124f2 <tcp_receive+0x2fa>
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80124e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80124e6:	4413      	add	r3, r2
 80124e8:	b29a      	uxth	r2, r3
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80124f0:	e004      	b.n	80124fc <tcp_receive+0x304>
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80124f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012508:	429a      	cmp	r2, r3
 801250a:	d326      	bcc.n	801255a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012518:	1ad3      	subs	r3, r2, r3
 801251a:	b29a      	uxth	r2, r3
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801252c:	4413      	add	r3, r2
 801252e:	b29a      	uxth	r2, r3
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012536:	429a      	cmp	r2, r3
 8012538:	d30a      	bcc.n	8012550 <tcp_receive+0x358>
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012544:	4413      	add	r3, r2
 8012546:	b29a      	uxth	r2, r3
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801254e:	e004      	b.n	801255a <tcp_receive+0x362>
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012556:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012562:	4a98      	ldr	r2, [pc, #608]	; (80127c4 <tcp_receive+0x5cc>)
 8012564:	6878      	ldr	r0, [r7, #4]
 8012566:	f7ff fdcb 	bl	8012100 <tcp_free_acked_segments>
 801256a:	4602      	mov	r2, r0
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012578:	4a93      	ldr	r2, [pc, #588]	; (80127c8 <tcp_receive+0x5d0>)
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f7ff fdc0 	bl	8012100 <tcp_free_acked_segments>
 8012580:	4602      	mov	r2, r0
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801258a:	2b00      	cmp	r3, #0
 801258c:	d104      	bne.n	8012598 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012594:	861a      	strh	r2, [r3, #48]	; 0x30
 8012596:	e002      	b.n	801259e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	2200      	movs	r2, #0
 801259c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	2200      	movs	r2, #0
 80125a2:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d103      	bne.n	80125b4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	2200      	movs	r2, #0
 80125b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80125ba:	4b84      	ldr	r3, [pc, #528]	; (80127cc <tcp_receive+0x5d4>)
 80125bc:	881b      	ldrh	r3, [r3, #0]
 80125be:	4413      	add	r3, r2
 80125c0:	b29a      	uxth	r2, r3
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	8b5b      	ldrh	r3, [r3, #26]
 80125cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d035      	beq.n	8012640 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d118      	bne.n	801260e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d00c      	beq.n	80125fe <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125ec:	68db      	ldr	r3, [r3, #12]
 80125ee:	685b      	ldr	r3, [r3, #4]
 80125f0:	4618      	mov	r0, r3
 80125f2:	f7fa fe1a 	bl	800d22a <lwip_htonl>
 80125f6:	4603      	mov	r3, r0
 80125f8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	dc20      	bgt.n	8012640 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	8b5b      	ldrh	r3, [r3, #26]
 8012602:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012606:	b29a      	uxth	r2, r3
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801260c:	e018      	b.n	8012640 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012616:	68db      	ldr	r3, [r3, #12]
 8012618:	685b      	ldr	r3, [r3, #4]
 801261a:	4618      	mov	r0, r3
 801261c:	f7fa fe05 	bl	800d22a <lwip_htonl>
 8012620:	4603      	mov	r3, r0
 8012622:	1ae3      	subs	r3, r4, r3
 8012624:	2b00      	cmp	r3, #0
 8012626:	dc0b      	bgt.n	8012640 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	8b5b      	ldrh	r3, [r3, #26]
 801262c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012630:	b29a      	uxth	r2, r3
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012636:	e003      	b.n	8012640 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012638:	6878      	ldr	r0, [r7, #4]
 801263a:	f002 fbcd 	bl	8014dd8 <tcp_send_empty_ack>
 801263e:	e000      	b.n	8012642 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012640:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012646:	2b00      	cmp	r3, #0
 8012648:	d05b      	beq.n	8012702 <tcp_receive+0x50a>
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801264e:	4b60      	ldr	r3, [pc, #384]	; (80127d0 <tcp_receive+0x5d8>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	1ad3      	subs	r3, r2, r3
 8012654:	2b00      	cmp	r3, #0
 8012656:	da54      	bge.n	8012702 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012658:	4b5e      	ldr	r3, [pc, #376]	; (80127d4 <tcp_receive+0x5dc>)
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	b29a      	uxth	r2, r3
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012662:	b29b      	uxth	r3, r3
 8012664:	1ad3      	subs	r3, r2, r3
 8012666:	b29b      	uxth	r3, r3
 8012668:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801266c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012676:	10db      	asrs	r3, r3, #3
 8012678:	b21b      	sxth	r3, r3
 801267a:	b29b      	uxth	r3, r3
 801267c:	1ad3      	subs	r3, r2, r3
 801267e:	b29b      	uxth	r3, r3
 8012680:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801268a:	b29a      	uxth	r2, r3
 801268c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012690:	4413      	add	r3, r2
 8012692:	b29b      	uxth	r3, r3
 8012694:	b21a      	sxth	r2, r3
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801269a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801269e:	2b00      	cmp	r3, #0
 80126a0:	da05      	bge.n	80126ae <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80126a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80126a6:	425b      	negs	r3, r3
 80126a8:	b29b      	uxth	r3, r3
 80126aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80126ae:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80126b8:	109b      	asrs	r3, r3, #2
 80126ba:	b21b      	sxth	r3, r3
 80126bc:	b29b      	uxth	r3, r3
 80126be:	1ad3      	subs	r3, r2, r3
 80126c0:	b29b      	uxth	r3, r3
 80126c2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80126cc:	b29a      	uxth	r2, r3
 80126ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80126d2:	4413      	add	r3, r2
 80126d4:	b29b      	uxth	r3, r3
 80126d6:	b21a      	sxth	r2, r3
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80126e2:	10db      	asrs	r3, r3, #3
 80126e4:	b21b      	sxth	r3, r3
 80126e6:	b29a      	uxth	r2, r3
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80126ee:	b29b      	uxth	r3, r3
 80126f0:	4413      	add	r3, r2
 80126f2:	b29b      	uxth	r3, r3
 80126f4:	b21a      	sxth	r2, r3
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	2200      	movs	r2, #0
 8012700:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012702:	4b35      	ldr	r3, [pc, #212]	; (80127d8 <tcp_receive+0x5e0>)
 8012704:	881b      	ldrh	r3, [r3, #0]
 8012706:	2b00      	cmp	r3, #0
 8012708:	f000 84e1 	beq.w	80130ce <tcp_receive+0xed6>
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	7d1b      	ldrb	r3, [r3, #20]
 8012710:	2b06      	cmp	r3, #6
 8012712:	f200 84dc 	bhi.w	80130ce <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801271a:	4b30      	ldr	r3, [pc, #192]	; (80127dc <tcp_receive+0x5e4>)
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	1ad3      	subs	r3, r2, r3
 8012720:	3b01      	subs	r3, #1
 8012722:	2b00      	cmp	r3, #0
 8012724:	f2c0 808e 	blt.w	8012844 <tcp_receive+0x64c>
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801272c:	4b2a      	ldr	r3, [pc, #168]	; (80127d8 <tcp_receive+0x5e0>)
 801272e:	881b      	ldrh	r3, [r3, #0]
 8012730:	4619      	mov	r1, r3
 8012732:	4b2a      	ldr	r3, [pc, #168]	; (80127dc <tcp_receive+0x5e4>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	440b      	add	r3, r1
 8012738:	1ad3      	subs	r3, r2, r3
 801273a:	3301      	adds	r3, #1
 801273c:	2b00      	cmp	r3, #0
 801273e:	f300 8081 	bgt.w	8012844 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012742:	4b27      	ldr	r3, [pc, #156]	; (80127e0 <tcp_receive+0x5e8>)
 8012744:	685b      	ldr	r3, [r3, #4]
 8012746:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801274c:	4b23      	ldr	r3, [pc, #140]	; (80127dc <tcp_receive+0x5e4>)
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	1ad3      	subs	r3, r2, r3
 8012752:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012754:	4b22      	ldr	r3, [pc, #136]	; (80127e0 <tcp_receive+0x5e8>)
 8012756:	685b      	ldr	r3, [r3, #4]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d106      	bne.n	801276a <tcp_receive+0x572>
 801275c:	4b21      	ldr	r3, [pc, #132]	; (80127e4 <tcp_receive+0x5ec>)
 801275e:	f240 5294 	movw	r2, #1428	; 0x594
 8012762:	4921      	ldr	r1, [pc, #132]	; (80127e8 <tcp_receive+0x5f0>)
 8012764:	4821      	ldr	r0, [pc, #132]	; (80127ec <tcp_receive+0x5f4>)
 8012766:	f008 faf1 	bl	801ad4c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801276c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012770:	4293      	cmp	r3, r2
 8012772:	d906      	bls.n	8012782 <tcp_receive+0x58a>
 8012774:	4b1b      	ldr	r3, [pc, #108]	; (80127e4 <tcp_receive+0x5ec>)
 8012776:	f240 5295 	movw	r2, #1429	; 0x595
 801277a:	491d      	ldr	r1, [pc, #116]	; (80127f0 <tcp_receive+0x5f8>)
 801277c:	481b      	ldr	r0, [pc, #108]	; (80127ec <tcp_receive+0x5f4>)
 801277e:	f008 fae5 	bl	801ad4c <iprintf>
      off = (u16_t)off32;
 8012782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012784:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012788:	4b15      	ldr	r3, [pc, #84]	; (80127e0 <tcp_receive+0x5e8>)
 801278a:	685b      	ldr	r3, [r3, #4]
 801278c:	891b      	ldrh	r3, [r3, #8]
 801278e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012792:	429a      	cmp	r2, r3
 8012794:	d906      	bls.n	80127a4 <tcp_receive+0x5ac>
 8012796:	4b13      	ldr	r3, [pc, #76]	; (80127e4 <tcp_receive+0x5ec>)
 8012798:	f240 5297 	movw	r2, #1431	; 0x597
 801279c:	4915      	ldr	r1, [pc, #84]	; (80127f4 <tcp_receive+0x5fc>)
 801279e:	4813      	ldr	r0, [pc, #76]	; (80127ec <tcp_receive+0x5f4>)
 80127a0:	f008 fad4 	bl	801ad4c <iprintf>
      inseg.len -= off;
 80127a4:	4b0e      	ldr	r3, [pc, #56]	; (80127e0 <tcp_receive+0x5e8>)
 80127a6:	891a      	ldrh	r2, [r3, #8]
 80127a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80127ac:	1ad3      	subs	r3, r2, r3
 80127ae:	b29a      	uxth	r2, r3
 80127b0:	4b0b      	ldr	r3, [pc, #44]	; (80127e0 <tcp_receive+0x5e8>)
 80127b2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80127b4:	4b0a      	ldr	r3, [pc, #40]	; (80127e0 <tcp_receive+0x5e8>)
 80127b6:	685b      	ldr	r3, [r3, #4]
 80127b8:	891a      	ldrh	r2, [r3, #8]
 80127ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80127be:	1ad3      	subs	r3, r2, r3
 80127c0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80127c2:	e029      	b.n	8012818 <tcp_receive+0x620>
 80127c4:	0801de3c 	.word	0x0801de3c
 80127c8:	0801de44 	.word	0x0801de44
 80127cc:	2000b244 	.word	0x2000b244
 80127d0:	2000b240 	.word	0x2000b240
 80127d4:	200120a4 	.word	0x200120a4
 80127d8:	2000b246 	.word	0x2000b246
 80127dc:	2000b23c 	.word	0x2000b23c
 80127e0:	2000b21c 	.word	0x2000b21c
 80127e4:	0801dad4 	.word	0x0801dad4
 80127e8:	0801de4c 	.word	0x0801de4c
 80127ec:	0801db20 	.word	0x0801db20
 80127f0:	0801de5c 	.word	0x0801de5c
 80127f4:	0801de6c 	.word	0x0801de6c
        off -= p->len;
 80127f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80127fa:	895b      	ldrh	r3, [r3, #10]
 80127fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012800:	1ad3      	subs	r3, r2, r3
 8012802:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012808:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801280a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801280c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801280e:	2200      	movs	r2, #0
 8012810:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801281a:	895b      	ldrh	r3, [r3, #10]
 801281c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012820:	429a      	cmp	r2, r3
 8012822:	d8e9      	bhi.n	80127f8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012824:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012828:	4619      	mov	r1, r3
 801282a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801282c:	f7fc f846 	bl	800e8bc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012834:	4a91      	ldr	r2, [pc, #580]	; (8012a7c <tcp_receive+0x884>)
 8012836:	6013      	str	r3, [r2, #0]
 8012838:	4b91      	ldr	r3, [pc, #580]	; (8012a80 <tcp_receive+0x888>)
 801283a:	68db      	ldr	r3, [r3, #12]
 801283c:	4a8f      	ldr	r2, [pc, #572]	; (8012a7c <tcp_receive+0x884>)
 801283e:	6812      	ldr	r2, [r2, #0]
 8012840:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012842:	e00d      	b.n	8012860 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012844:	4b8d      	ldr	r3, [pc, #564]	; (8012a7c <tcp_receive+0x884>)
 8012846:	681a      	ldr	r2, [r3, #0]
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801284c:	1ad3      	subs	r3, r2, r3
 801284e:	2b00      	cmp	r3, #0
 8012850:	da06      	bge.n	8012860 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	8b5b      	ldrh	r3, [r3, #26]
 8012856:	f043 0302 	orr.w	r3, r3, #2
 801285a:	b29a      	uxth	r2, r3
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012860:	4b86      	ldr	r3, [pc, #536]	; (8012a7c <tcp_receive+0x884>)
 8012862:	681a      	ldr	r2, [r3, #0]
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012868:	1ad3      	subs	r3, r2, r3
 801286a:	2b00      	cmp	r3, #0
 801286c:	f2c0 842a 	blt.w	80130c4 <tcp_receive+0xecc>
 8012870:	4b82      	ldr	r3, [pc, #520]	; (8012a7c <tcp_receive+0x884>)
 8012872:	681a      	ldr	r2, [r3, #0]
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012878:	6879      	ldr	r1, [r7, #4]
 801287a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801287c:	440b      	add	r3, r1
 801287e:	1ad3      	subs	r3, r2, r3
 8012880:	3301      	adds	r3, #1
 8012882:	2b00      	cmp	r3, #0
 8012884:	f300 841e 	bgt.w	80130c4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801288c:	4b7b      	ldr	r3, [pc, #492]	; (8012a7c <tcp_receive+0x884>)
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	429a      	cmp	r2, r3
 8012892:	f040 829a 	bne.w	8012dca <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012896:	4b7a      	ldr	r3, [pc, #488]	; (8012a80 <tcp_receive+0x888>)
 8012898:	891c      	ldrh	r4, [r3, #8]
 801289a:	4b79      	ldr	r3, [pc, #484]	; (8012a80 <tcp_receive+0x888>)
 801289c:	68db      	ldr	r3, [r3, #12]
 801289e:	899b      	ldrh	r3, [r3, #12]
 80128a0:	b29b      	uxth	r3, r3
 80128a2:	4618      	mov	r0, r3
 80128a4:	f7fa fcac 	bl	800d200 <lwip_htons>
 80128a8:	4603      	mov	r3, r0
 80128aa:	b2db      	uxtb	r3, r3
 80128ac:	f003 0303 	and.w	r3, r3, #3
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d001      	beq.n	80128b8 <tcp_receive+0x6c0>
 80128b4:	2301      	movs	r3, #1
 80128b6:	e000      	b.n	80128ba <tcp_receive+0x6c2>
 80128b8:	2300      	movs	r3, #0
 80128ba:	4423      	add	r3, r4
 80128bc:	b29a      	uxth	r2, r3
 80128be:	4b71      	ldr	r3, [pc, #452]	; (8012a84 <tcp_receive+0x88c>)
 80128c0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80128c6:	4b6f      	ldr	r3, [pc, #444]	; (8012a84 <tcp_receive+0x88c>)
 80128c8:	881b      	ldrh	r3, [r3, #0]
 80128ca:	429a      	cmp	r2, r3
 80128cc:	d275      	bcs.n	80129ba <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80128ce:	4b6c      	ldr	r3, [pc, #432]	; (8012a80 <tcp_receive+0x888>)
 80128d0:	68db      	ldr	r3, [r3, #12]
 80128d2:	899b      	ldrh	r3, [r3, #12]
 80128d4:	b29b      	uxth	r3, r3
 80128d6:	4618      	mov	r0, r3
 80128d8:	f7fa fc92 	bl	800d200 <lwip_htons>
 80128dc:	4603      	mov	r3, r0
 80128de:	b2db      	uxtb	r3, r3
 80128e0:	f003 0301 	and.w	r3, r3, #1
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d01f      	beq.n	8012928 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80128e8:	4b65      	ldr	r3, [pc, #404]	; (8012a80 <tcp_receive+0x888>)
 80128ea:	68db      	ldr	r3, [r3, #12]
 80128ec:	899b      	ldrh	r3, [r3, #12]
 80128ee:	b29b      	uxth	r3, r3
 80128f0:	b21b      	sxth	r3, r3
 80128f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80128f6:	b21c      	sxth	r4, r3
 80128f8:	4b61      	ldr	r3, [pc, #388]	; (8012a80 <tcp_receive+0x888>)
 80128fa:	68db      	ldr	r3, [r3, #12]
 80128fc:	899b      	ldrh	r3, [r3, #12]
 80128fe:	b29b      	uxth	r3, r3
 8012900:	4618      	mov	r0, r3
 8012902:	f7fa fc7d 	bl	800d200 <lwip_htons>
 8012906:	4603      	mov	r3, r0
 8012908:	b2db      	uxtb	r3, r3
 801290a:	b29b      	uxth	r3, r3
 801290c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012910:	b29b      	uxth	r3, r3
 8012912:	4618      	mov	r0, r3
 8012914:	f7fa fc74 	bl	800d200 <lwip_htons>
 8012918:	4603      	mov	r3, r0
 801291a:	b21b      	sxth	r3, r3
 801291c:	4323      	orrs	r3, r4
 801291e:	b21a      	sxth	r2, r3
 8012920:	4b57      	ldr	r3, [pc, #348]	; (8012a80 <tcp_receive+0x888>)
 8012922:	68db      	ldr	r3, [r3, #12]
 8012924:	b292      	uxth	r2, r2
 8012926:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801292c:	4b54      	ldr	r3, [pc, #336]	; (8012a80 <tcp_receive+0x888>)
 801292e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012930:	4b53      	ldr	r3, [pc, #332]	; (8012a80 <tcp_receive+0x888>)
 8012932:	68db      	ldr	r3, [r3, #12]
 8012934:	899b      	ldrh	r3, [r3, #12]
 8012936:	b29b      	uxth	r3, r3
 8012938:	4618      	mov	r0, r3
 801293a:	f7fa fc61 	bl	800d200 <lwip_htons>
 801293e:	4603      	mov	r3, r0
 8012940:	b2db      	uxtb	r3, r3
 8012942:	f003 0302 	and.w	r3, r3, #2
 8012946:	2b00      	cmp	r3, #0
 8012948:	d005      	beq.n	8012956 <tcp_receive+0x75e>
            inseg.len -= 1;
 801294a:	4b4d      	ldr	r3, [pc, #308]	; (8012a80 <tcp_receive+0x888>)
 801294c:	891b      	ldrh	r3, [r3, #8]
 801294e:	3b01      	subs	r3, #1
 8012950:	b29a      	uxth	r2, r3
 8012952:	4b4b      	ldr	r3, [pc, #300]	; (8012a80 <tcp_receive+0x888>)
 8012954:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012956:	4b4a      	ldr	r3, [pc, #296]	; (8012a80 <tcp_receive+0x888>)
 8012958:	685b      	ldr	r3, [r3, #4]
 801295a:	4a49      	ldr	r2, [pc, #292]	; (8012a80 <tcp_receive+0x888>)
 801295c:	8912      	ldrh	r2, [r2, #8]
 801295e:	4611      	mov	r1, r2
 8012960:	4618      	mov	r0, r3
 8012962:	f7fb feab 	bl	800e6bc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012966:	4b46      	ldr	r3, [pc, #280]	; (8012a80 <tcp_receive+0x888>)
 8012968:	891c      	ldrh	r4, [r3, #8]
 801296a:	4b45      	ldr	r3, [pc, #276]	; (8012a80 <tcp_receive+0x888>)
 801296c:	68db      	ldr	r3, [r3, #12]
 801296e:	899b      	ldrh	r3, [r3, #12]
 8012970:	b29b      	uxth	r3, r3
 8012972:	4618      	mov	r0, r3
 8012974:	f7fa fc44 	bl	800d200 <lwip_htons>
 8012978:	4603      	mov	r3, r0
 801297a:	b2db      	uxtb	r3, r3
 801297c:	f003 0303 	and.w	r3, r3, #3
 8012980:	2b00      	cmp	r3, #0
 8012982:	d001      	beq.n	8012988 <tcp_receive+0x790>
 8012984:	2301      	movs	r3, #1
 8012986:	e000      	b.n	801298a <tcp_receive+0x792>
 8012988:	2300      	movs	r3, #0
 801298a:	4423      	add	r3, r4
 801298c:	b29a      	uxth	r2, r3
 801298e:	4b3d      	ldr	r3, [pc, #244]	; (8012a84 <tcp_receive+0x88c>)
 8012990:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012992:	4b3c      	ldr	r3, [pc, #240]	; (8012a84 <tcp_receive+0x88c>)
 8012994:	881b      	ldrh	r3, [r3, #0]
 8012996:	461a      	mov	r2, r3
 8012998:	4b38      	ldr	r3, [pc, #224]	; (8012a7c <tcp_receive+0x884>)
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	441a      	add	r2, r3
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129a2:	6879      	ldr	r1, [r7, #4]
 80129a4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80129a6:	440b      	add	r3, r1
 80129a8:	429a      	cmp	r2, r3
 80129aa:	d006      	beq.n	80129ba <tcp_receive+0x7c2>
 80129ac:	4b36      	ldr	r3, [pc, #216]	; (8012a88 <tcp_receive+0x890>)
 80129ae:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80129b2:	4936      	ldr	r1, [pc, #216]	; (8012a8c <tcp_receive+0x894>)
 80129b4:	4836      	ldr	r0, [pc, #216]	; (8012a90 <tcp_receive+0x898>)
 80129b6:	f008 f9c9 	bl	801ad4c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129be:	2b00      	cmp	r3, #0
 80129c0:	f000 80e7 	beq.w	8012b92 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80129c4:	4b2e      	ldr	r3, [pc, #184]	; (8012a80 <tcp_receive+0x888>)
 80129c6:	68db      	ldr	r3, [r3, #12]
 80129c8:	899b      	ldrh	r3, [r3, #12]
 80129ca:	b29b      	uxth	r3, r3
 80129cc:	4618      	mov	r0, r3
 80129ce:	f7fa fc17 	bl	800d200 <lwip_htons>
 80129d2:	4603      	mov	r3, r0
 80129d4:	b2db      	uxtb	r3, r3
 80129d6:	f003 0301 	and.w	r3, r3, #1
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d010      	beq.n	8012a00 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80129de:	e00a      	b.n	80129f6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129e4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129ea:	681a      	ldr	r2, [r3, #0]
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80129f0:	68f8      	ldr	r0, [r7, #12]
 80129f2:	f7fd fcc8 	bl	8010386 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d1f0      	bne.n	80129e0 <tcp_receive+0x7e8>
 80129fe:	e0c8      	b.n	8012b92 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a04:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012a06:	e052      	b.n	8012aae <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a0a:	68db      	ldr	r3, [r3, #12]
 8012a0c:	899b      	ldrh	r3, [r3, #12]
 8012a0e:	b29b      	uxth	r3, r3
 8012a10:	4618      	mov	r0, r3
 8012a12:	f7fa fbf5 	bl	800d200 <lwip_htons>
 8012a16:	4603      	mov	r3, r0
 8012a18:	b2db      	uxtb	r3, r3
 8012a1a:	f003 0301 	and.w	r3, r3, #1
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d03d      	beq.n	8012a9e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012a22:	4b17      	ldr	r3, [pc, #92]	; (8012a80 <tcp_receive+0x888>)
 8012a24:	68db      	ldr	r3, [r3, #12]
 8012a26:	899b      	ldrh	r3, [r3, #12]
 8012a28:	b29b      	uxth	r3, r3
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	f7fa fbe8 	bl	800d200 <lwip_htons>
 8012a30:	4603      	mov	r3, r0
 8012a32:	b2db      	uxtb	r3, r3
 8012a34:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d130      	bne.n	8012a9e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012a3c:	4b10      	ldr	r3, [pc, #64]	; (8012a80 <tcp_receive+0x888>)
 8012a3e:	68db      	ldr	r3, [r3, #12]
 8012a40:	899b      	ldrh	r3, [r3, #12]
 8012a42:	b29c      	uxth	r4, r3
 8012a44:	2001      	movs	r0, #1
 8012a46:	f7fa fbdb 	bl	800d200 <lwip_htons>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	461a      	mov	r2, r3
 8012a4e:	4b0c      	ldr	r3, [pc, #48]	; (8012a80 <tcp_receive+0x888>)
 8012a50:	68db      	ldr	r3, [r3, #12]
 8012a52:	4322      	orrs	r2, r4
 8012a54:	b292      	uxth	r2, r2
 8012a56:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012a58:	4b09      	ldr	r3, [pc, #36]	; (8012a80 <tcp_receive+0x888>)
 8012a5a:	891c      	ldrh	r4, [r3, #8]
 8012a5c:	4b08      	ldr	r3, [pc, #32]	; (8012a80 <tcp_receive+0x888>)
 8012a5e:	68db      	ldr	r3, [r3, #12]
 8012a60:	899b      	ldrh	r3, [r3, #12]
 8012a62:	b29b      	uxth	r3, r3
 8012a64:	4618      	mov	r0, r3
 8012a66:	f7fa fbcb 	bl	800d200 <lwip_htons>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	b2db      	uxtb	r3, r3
 8012a6e:	f003 0303 	and.w	r3, r3, #3
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d00e      	beq.n	8012a94 <tcp_receive+0x89c>
 8012a76:	2301      	movs	r3, #1
 8012a78:	e00d      	b.n	8012a96 <tcp_receive+0x89e>
 8012a7a:	bf00      	nop
 8012a7c:	2000b23c 	.word	0x2000b23c
 8012a80:	2000b21c 	.word	0x2000b21c
 8012a84:	2000b246 	.word	0x2000b246
 8012a88:	0801dad4 	.word	0x0801dad4
 8012a8c:	0801de7c 	.word	0x0801de7c
 8012a90:	0801db20 	.word	0x0801db20
 8012a94:	2300      	movs	r3, #0
 8012a96:	4423      	add	r3, r4
 8012a98:	b29a      	uxth	r2, r3
 8012a9a:	4b98      	ldr	r3, [pc, #608]	; (8012cfc <tcp_receive+0xb04>)
 8012a9c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012aa0:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012aa8:	6938      	ldr	r0, [r7, #16]
 8012aaa:	f7fd fc6c 	bl	8010386 <tcp_seg_free>
            while (next &&
 8012aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d00e      	beq.n	8012ad2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012ab4:	4b91      	ldr	r3, [pc, #580]	; (8012cfc <tcp_receive+0xb04>)
 8012ab6:	881b      	ldrh	r3, [r3, #0]
 8012ab8:	461a      	mov	r2, r3
 8012aba:	4b91      	ldr	r3, [pc, #580]	; (8012d00 <tcp_receive+0xb08>)
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	441a      	add	r2, r3
 8012ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ac2:	68db      	ldr	r3, [r3, #12]
 8012ac4:	685b      	ldr	r3, [r3, #4]
 8012ac6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012ac8:	8909      	ldrh	r1, [r1, #8]
 8012aca:	440b      	add	r3, r1
 8012acc:	1ad3      	subs	r3, r2, r3
            while (next &&
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	da9a      	bge.n	8012a08 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d059      	beq.n	8012b8c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8012ad8:	4b88      	ldr	r3, [pc, #544]	; (8012cfc <tcp_receive+0xb04>)
 8012ada:	881b      	ldrh	r3, [r3, #0]
 8012adc:	461a      	mov	r2, r3
 8012ade:	4b88      	ldr	r3, [pc, #544]	; (8012d00 <tcp_receive+0xb08>)
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	441a      	add	r2, r3
 8012ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ae6:	68db      	ldr	r3, [r3, #12]
 8012ae8:	685b      	ldr	r3, [r3, #4]
 8012aea:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	dd4d      	ble.n	8012b8c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012af2:	68db      	ldr	r3, [r3, #12]
 8012af4:	685b      	ldr	r3, [r3, #4]
 8012af6:	b29a      	uxth	r2, r3
 8012af8:	4b81      	ldr	r3, [pc, #516]	; (8012d00 <tcp_receive+0xb08>)
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	b29b      	uxth	r3, r3
 8012afe:	1ad3      	subs	r3, r2, r3
 8012b00:	b29a      	uxth	r2, r3
 8012b02:	4b80      	ldr	r3, [pc, #512]	; (8012d04 <tcp_receive+0xb0c>)
 8012b04:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012b06:	4b7f      	ldr	r3, [pc, #508]	; (8012d04 <tcp_receive+0xb0c>)
 8012b08:	68db      	ldr	r3, [r3, #12]
 8012b0a:	899b      	ldrh	r3, [r3, #12]
 8012b0c:	b29b      	uxth	r3, r3
 8012b0e:	4618      	mov	r0, r3
 8012b10:	f7fa fb76 	bl	800d200 <lwip_htons>
 8012b14:	4603      	mov	r3, r0
 8012b16:	b2db      	uxtb	r3, r3
 8012b18:	f003 0302 	and.w	r3, r3, #2
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d005      	beq.n	8012b2c <tcp_receive+0x934>
                inseg.len -= 1;
 8012b20:	4b78      	ldr	r3, [pc, #480]	; (8012d04 <tcp_receive+0xb0c>)
 8012b22:	891b      	ldrh	r3, [r3, #8]
 8012b24:	3b01      	subs	r3, #1
 8012b26:	b29a      	uxth	r2, r3
 8012b28:	4b76      	ldr	r3, [pc, #472]	; (8012d04 <tcp_receive+0xb0c>)
 8012b2a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012b2c:	4b75      	ldr	r3, [pc, #468]	; (8012d04 <tcp_receive+0xb0c>)
 8012b2e:	685b      	ldr	r3, [r3, #4]
 8012b30:	4a74      	ldr	r2, [pc, #464]	; (8012d04 <tcp_receive+0xb0c>)
 8012b32:	8912      	ldrh	r2, [r2, #8]
 8012b34:	4611      	mov	r1, r2
 8012b36:	4618      	mov	r0, r3
 8012b38:	f7fb fdc0 	bl	800e6bc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012b3c:	4b71      	ldr	r3, [pc, #452]	; (8012d04 <tcp_receive+0xb0c>)
 8012b3e:	891c      	ldrh	r4, [r3, #8]
 8012b40:	4b70      	ldr	r3, [pc, #448]	; (8012d04 <tcp_receive+0xb0c>)
 8012b42:	68db      	ldr	r3, [r3, #12]
 8012b44:	899b      	ldrh	r3, [r3, #12]
 8012b46:	b29b      	uxth	r3, r3
 8012b48:	4618      	mov	r0, r3
 8012b4a:	f7fa fb59 	bl	800d200 <lwip_htons>
 8012b4e:	4603      	mov	r3, r0
 8012b50:	b2db      	uxtb	r3, r3
 8012b52:	f003 0303 	and.w	r3, r3, #3
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d001      	beq.n	8012b5e <tcp_receive+0x966>
 8012b5a:	2301      	movs	r3, #1
 8012b5c:	e000      	b.n	8012b60 <tcp_receive+0x968>
 8012b5e:	2300      	movs	r3, #0
 8012b60:	4423      	add	r3, r4
 8012b62:	b29a      	uxth	r2, r3
 8012b64:	4b65      	ldr	r3, [pc, #404]	; (8012cfc <tcp_receive+0xb04>)
 8012b66:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012b68:	4b64      	ldr	r3, [pc, #400]	; (8012cfc <tcp_receive+0xb04>)
 8012b6a:	881b      	ldrh	r3, [r3, #0]
 8012b6c:	461a      	mov	r2, r3
 8012b6e:	4b64      	ldr	r3, [pc, #400]	; (8012d00 <tcp_receive+0xb08>)
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	441a      	add	r2, r3
 8012b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b76:	68db      	ldr	r3, [r3, #12]
 8012b78:	685b      	ldr	r3, [r3, #4]
 8012b7a:	429a      	cmp	r2, r3
 8012b7c:	d006      	beq.n	8012b8c <tcp_receive+0x994>
 8012b7e:	4b62      	ldr	r3, [pc, #392]	; (8012d08 <tcp_receive+0xb10>)
 8012b80:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8012b84:	4961      	ldr	r1, [pc, #388]	; (8012d0c <tcp_receive+0xb14>)
 8012b86:	4862      	ldr	r0, [pc, #392]	; (8012d10 <tcp_receive+0xb18>)
 8012b88:	f008 f8e0 	bl	801ad4c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012b90:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012b92:	4b5a      	ldr	r3, [pc, #360]	; (8012cfc <tcp_receive+0xb04>)
 8012b94:	881b      	ldrh	r3, [r3, #0]
 8012b96:	461a      	mov	r2, r3
 8012b98:	4b59      	ldr	r3, [pc, #356]	; (8012d00 <tcp_receive+0xb08>)
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	441a      	add	r2, r3
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012ba6:	4b55      	ldr	r3, [pc, #340]	; (8012cfc <tcp_receive+0xb04>)
 8012ba8:	881b      	ldrh	r3, [r3, #0]
 8012baa:	429a      	cmp	r2, r3
 8012bac:	d206      	bcs.n	8012bbc <tcp_receive+0x9c4>
 8012bae:	4b56      	ldr	r3, [pc, #344]	; (8012d08 <tcp_receive+0xb10>)
 8012bb0:	f240 6207 	movw	r2, #1543	; 0x607
 8012bb4:	4957      	ldr	r1, [pc, #348]	; (8012d14 <tcp_receive+0xb1c>)
 8012bb6:	4856      	ldr	r0, [pc, #344]	; (8012d10 <tcp_receive+0xb18>)
 8012bb8:	f008 f8c8 	bl	801ad4c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012bc0:	4b4e      	ldr	r3, [pc, #312]	; (8012cfc <tcp_receive+0xb04>)
 8012bc2:	881b      	ldrh	r3, [r3, #0]
 8012bc4:	1ad3      	subs	r3, r2, r3
 8012bc6:	b29a      	uxth	r2, r3
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012bcc:	6878      	ldr	r0, [r7, #4]
 8012bce:	f7fc feb5 	bl	800f93c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012bd2:	4b4c      	ldr	r3, [pc, #304]	; (8012d04 <tcp_receive+0xb0c>)
 8012bd4:	685b      	ldr	r3, [r3, #4]
 8012bd6:	891b      	ldrh	r3, [r3, #8]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d006      	beq.n	8012bea <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8012bdc:	4b49      	ldr	r3, [pc, #292]	; (8012d04 <tcp_receive+0xb0c>)
 8012bde:	685b      	ldr	r3, [r3, #4]
 8012be0:	4a4d      	ldr	r2, [pc, #308]	; (8012d18 <tcp_receive+0xb20>)
 8012be2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012be4:	4b47      	ldr	r3, [pc, #284]	; (8012d04 <tcp_receive+0xb0c>)
 8012be6:	2200      	movs	r2, #0
 8012be8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012bea:	4b46      	ldr	r3, [pc, #280]	; (8012d04 <tcp_receive+0xb0c>)
 8012bec:	68db      	ldr	r3, [r3, #12]
 8012bee:	899b      	ldrh	r3, [r3, #12]
 8012bf0:	b29b      	uxth	r3, r3
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	f7fa fb04 	bl	800d200 <lwip_htons>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	b2db      	uxtb	r3, r3
 8012bfc:	f003 0301 	and.w	r3, r3, #1
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	f000 80b8 	beq.w	8012d76 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012c06:	4b45      	ldr	r3, [pc, #276]	; (8012d1c <tcp_receive+0xb24>)
 8012c08:	781b      	ldrb	r3, [r3, #0]
 8012c0a:	f043 0320 	orr.w	r3, r3, #32
 8012c0e:	b2da      	uxtb	r2, r3
 8012c10:	4b42      	ldr	r3, [pc, #264]	; (8012d1c <tcp_receive+0xb24>)
 8012c12:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012c14:	e0af      	b.n	8012d76 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c1a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c20:	68db      	ldr	r3, [r3, #12]
 8012c22:	685b      	ldr	r3, [r3, #4]
 8012c24:	4a36      	ldr	r2, [pc, #216]	; (8012d00 <tcp_receive+0xb08>)
 8012c26:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012c28:	68bb      	ldr	r3, [r7, #8]
 8012c2a:	891b      	ldrh	r3, [r3, #8]
 8012c2c:	461c      	mov	r4, r3
 8012c2e:	68bb      	ldr	r3, [r7, #8]
 8012c30:	68db      	ldr	r3, [r3, #12]
 8012c32:	899b      	ldrh	r3, [r3, #12]
 8012c34:	b29b      	uxth	r3, r3
 8012c36:	4618      	mov	r0, r3
 8012c38:	f7fa fae2 	bl	800d200 <lwip_htons>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	b2db      	uxtb	r3, r3
 8012c40:	f003 0303 	and.w	r3, r3, #3
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d001      	beq.n	8012c4c <tcp_receive+0xa54>
 8012c48:	2301      	movs	r3, #1
 8012c4a:	e000      	b.n	8012c4e <tcp_receive+0xa56>
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	191a      	adds	r2, r3, r4
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c54:	441a      	add	r2, r3
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c5e:	461c      	mov	r4, r3
 8012c60:	68bb      	ldr	r3, [r7, #8]
 8012c62:	891b      	ldrh	r3, [r3, #8]
 8012c64:	461d      	mov	r5, r3
 8012c66:	68bb      	ldr	r3, [r7, #8]
 8012c68:	68db      	ldr	r3, [r3, #12]
 8012c6a:	899b      	ldrh	r3, [r3, #12]
 8012c6c:	b29b      	uxth	r3, r3
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f7fa fac6 	bl	800d200 <lwip_htons>
 8012c74:	4603      	mov	r3, r0
 8012c76:	b2db      	uxtb	r3, r3
 8012c78:	f003 0303 	and.w	r3, r3, #3
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d001      	beq.n	8012c84 <tcp_receive+0xa8c>
 8012c80:	2301      	movs	r3, #1
 8012c82:	e000      	b.n	8012c86 <tcp_receive+0xa8e>
 8012c84:	2300      	movs	r3, #0
 8012c86:	442b      	add	r3, r5
 8012c88:	429c      	cmp	r4, r3
 8012c8a:	d206      	bcs.n	8012c9a <tcp_receive+0xaa2>
 8012c8c:	4b1e      	ldr	r3, [pc, #120]	; (8012d08 <tcp_receive+0xb10>)
 8012c8e:	f240 622b 	movw	r2, #1579	; 0x62b
 8012c92:	4923      	ldr	r1, [pc, #140]	; (8012d20 <tcp_receive+0xb28>)
 8012c94:	481e      	ldr	r0, [pc, #120]	; (8012d10 <tcp_receive+0xb18>)
 8012c96:	f008 f859 	bl	801ad4c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012c9a:	68bb      	ldr	r3, [r7, #8]
 8012c9c:	891b      	ldrh	r3, [r3, #8]
 8012c9e:	461c      	mov	r4, r3
 8012ca0:	68bb      	ldr	r3, [r7, #8]
 8012ca2:	68db      	ldr	r3, [r3, #12]
 8012ca4:	899b      	ldrh	r3, [r3, #12]
 8012ca6:	b29b      	uxth	r3, r3
 8012ca8:	4618      	mov	r0, r3
 8012caa:	f7fa faa9 	bl	800d200 <lwip_htons>
 8012cae:	4603      	mov	r3, r0
 8012cb0:	b2db      	uxtb	r3, r3
 8012cb2:	f003 0303 	and.w	r3, r3, #3
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d001      	beq.n	8012cbe <tcp_receive+0xac6>
 8012cba:	2301      	movs	r3, #1
 8012cbc:	e000      	b.n	8012cc0 <tcp_receive+0xac8>
 8012cbe:	2300      	movs	r3, #0
 8012cc0:	1919      	adds	r1, r3, r4
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012cc6:	b28b      	uxth	r3, r1
 8012cc8:	1ad3      	subs	r3, r2, r3
 8012cca:	b29a      	uxth	r2, r3
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012cd0:	6878      	ldr	r0, [r7, #4]
 8012cd2:	f7fc fe33 	bl	800f93c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012cd6:	68bb      	ldr	r3, [r7, #8]
 8012cd8:	685b      	ldr	r3, [r3, #4]
 8012cda:	891b      	ldrh	r3, [r3, #8]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d028      	beq.n	8012d32 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012ce0:	4b0d      	ldr	r3, [pc, #52]	; (8012d18 <tcp_receive+0xb20>)
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d01d      	beq.n	8012d24 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012ce8:	4b0b      	ldr	r3, [pc, #44]	; (8012d18 <tcp_receive+0xb20>)
 8012cea:	681a      	ldr	r2, [r3, #0]
 8012cec:	68bb      	ldr	r3, [r7, #8]
 8012cee:	685b      	ldr	r3, [r3, #4]
 8012cf0:	4619      	mov	r1, r3
 8012cf2:	4610      	mov	r0, r2
 8012cf4:	f7fb ff68 	bl	800ebc8 <pbuf_cat>
 8012cf8:	e018      	b.n	8012d2c <tcp_receive+0xb34>
 8012cfa:	bf00      	nop
 8012cfc:	2000b246 	.word	0x2000b246
 8012d00:	2000b23c 	.word	0x2000b23c
 8012d04:	2000b21c 	.word	0x2000b21c
 8012d08:	0801dad4 	.word	0x0801dad4
 8012d0c:	0801deb4 	.word	0x0801deb4
 8012d10:	0801db20 	.word	0x0801db20
 8012d14:	0801def0 	.word	0x0801def0
 8012d18:	2000b24c 	.word	0x2000b24c
 8012d1c:	2000b249 	.word	0x2000b249
 8012d20:	0801df10 	.word	0x0801df10
            } else {
              recv_data = cseg->p;
 8012d24:	68bb      	ldr	r3, [r7, #8]
 8012d26:	685b      	ldr	r3, [r3, #4]
 8012d28:	4a70      	ldr	r2, [pc, #448]	; (8012eec <tcp_receive+0xcf4>)
 8012d2a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012d2c:	68bb      	ldr	r3, [r7, #8]
 8012d2e:	2200      	movs	r2, #0
 8012d30:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012d32:	68bb      	ldr	r3, [r7, #8]
 8012d34:	68db      	ldr	r3, [r3, #12]
 8012d36:	899b      	ldrh	r3, [r3, #12]
 8012d38:	b29b      	uxth	r3, r3
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	f7fa fa60 	bl	800d200 <lwip_htons>
 8012d40:	4603      	mov	r3, r0
 8012d42:	b2db      	uxtb	r3, r3
 8012d44:	f003 0301 	and.w	r3, r3, #1
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d00d      	beq.n	8012d68 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012d4c:	4b68      	ldr	r3, [pc, #416]	; (8012ef0 <tcp_receive+0xcf8>)
 8012d4e:	781b      	ldrb	r3, [r3, #0]
 8012d50:	f043 0320 	orr.w	r3, r3, #32
 8012d54:	b2da      	uxtb	r2, r3
 8012d56:	4b66      	ldr	r3, [pc, #408]	; (8012ef0 <tcp_receive+0xcf8>)
 8012d58:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	7d1b      	ldrb	r3, [r3, #20]
 8012d5e:	2b04      	cmp	r3, #4
 8012d60:	d102      	bne.n	8012d68 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	2207      	movs	r2, #7
 8012d66:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012d68:	68bb      	ldr	r3, [r7, #8]
 8012d6a:	681a      	ldr	r2, [r3, #0]
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012d70:	68b8      	ldr	r0, [r7, #8]
 8012d72:	f7fd fb08 	bl	8010386 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d008      	beq.n	8012d90 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012d82:	68db      	ldr	r3, [r3, #12]
 8012d84:	685a      	ldr	r2, [r3, #4]
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012d8a:	429a      	cmp	r2, r3
 8012d8c:	f43f af43 	beq.w	8012c16 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	8b5b      	ldrh	r3, [r3, #26]
 8012d94:	f003 0301 	and.w	r3, r3, #1
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d00e      	beq.n	8012dba <tcp_receive+0xbc2>
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	8b5b      	ldrh	r3, [r3, #26]
 8012da0:	f023 0301 	bic.w	r3, r3, #1
 8012da4:	b29a      	uxth	r2, r3
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	835a      	strh	r2, [r3, #26]
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	8b5b      	ldrh	r3, [r3, #26]
 8012dae:	f043 0302 	orr.w	r3, r3, #2
 8012db2:	b29a      	uxth	r2, r3
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012db8:	e188      	b.n	80130cc <tcp_receive+0xed4>
        tcp_ack(pcb);
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	8b5b      	ldrh	r3, [r3, #26]
 8012dbe:	f043 0301 	orr.w	r3, r3, #1
 8012dc2:	b29a      	uxth	r2, r3
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012dc8:	e180      	b.n	80130cc <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d106      	bne.n	8012de0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012dd2:	4848      	ldr	r0, [pc, #288]	; (8012ef4 <tcp_receive+0xcfc>)
 8012dd4:	f7fd faf0 	bl	80103b8 <tcp_seg_copy>
 8012dd8:	4602      	mov	r2, r0
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	675a      	str	r2, [r3, #116]	; 0x74
 8012dde:	e16d      	b.n	80130bc <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012de0:	2300      	movs	r3, #0
 8012de2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012de8:	63bb      	str	r3, [r7, #56]	; 0x38
 8012dea:	e157      	b.n	801309c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8012dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dee:	68db      	ldr	r3, [r3, #12]
 8012df0:	685a      	ldr	r2, [r3, #4]
 8012df2:	4b41      	ldr	r3, [pc, #260]	; (8012ef8 <tcp_receive+0xd00>)
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	429a      	cmp	r2, r3
 8012df8:	d11d      	bne.n	8012e36 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012dfa:	4b3e      	ldr	r3, [pc, #248]	; (8012ef4 <tcp_receive+0xcfc>)
 8012dfc:	891a      	ldrh	r2, [r3, #8]
 8012dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e00:	891b      	ldrh	r3, [r3, #8]
 8012e02:	429a      	cmp	r2, r3
 8012e04:	f240 814f 	bls.w	80130a6 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012e08:	483a      	ldr	r0, [pc, #232]	; (8012ef4 <tcp_receive+0xcfc>)
 8012e0a:	f7fd fad5 	bl	80103b8 <tcp_seg_copy>
 8012e0e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012e10:	697b      	ldr	r3, [r7, #20]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	f000 8149 	beq.w	80130aa <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8012e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d003      	beq.n	8012e26 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8012e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e20:	697a      	ldr	r2, [r7, #20]
 8012e22:	601a      	str	r2, [r3, #0]
 8012e24:	e002      	b.n	8012e2c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	697a      	ldr	r2, [r7, #20]
 8012e2a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012e2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012e2e:	6978      	ldr	r0, [r7, #20]
 8012e30:	f7ff f8de 	bl	8011ff0 <tcp_oos_insert_segment>
                }
                break;
 8012e34:	e139      	b.n	80130aa <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d117      	bne.n	8012e6c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012e3c:	4b2e      	ldr	r3, [pc, #184]	; (8012ef8 <tcp_receive+0xd00>)
 8012e3e:	681a      	ldr	r2, [r3, #0]
 8012e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e42:	68db      	ldr	r3, [r3, #12]
 8012e44:	685b      	ldr	r3, [r3, #4]
 8012e46:	1ad3      	subs	r3, r2, r3
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	da57      	bge.n	8012efc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012e4c:	4829      	ldr	r0, [pc, #164]	; (8012ef4 <tcp_receive+0xcfc>)
 8012e4e:	f7fd fab3 	bl	80103b8 <tcp_seg_copy>
 8012e52:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012e54:	69bb      	ldr	r3, [r7, #24]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	f000 8129 	beq.w	80130ae <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	69ba      	ldr	r2, [r7, #24]
 8012e60:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012e62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012e64:	69b8      	ldr	r0, [r7, #24]
 8012e66:	f7ff f8c3 	bl	8011ff0 <tcp_oos_insert_segment>
                  }
                  break;
 8012e6a:	e120      	b.n	80130ae <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012e6c:	4b22      	ldr	r3, [pc, #136]	; (8012ef8 <tcp_receive+0xd00>)
 8012e6e:	681a      	ldr	r2, [r3, #0]
 8012e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e72:	68db      	ldr	r3, [r3, #12]
 8012e74:	685b      	ldr	r3, [r3, #4]
 8012e76:	1ad3      	subs	r3, r2, r3
 8012e78:	3b01      	subs	r3, #1
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	db3e      	blt.n	8012efc <tcp_receive+0xd04>
 8012e7e:	4b1e      	ldr	r3, [pc, #120]	; (8012ef8 <tcp_receive+0xd00>)
 8012e80:	681a      	ldr	r2, [r3, #0]
 8012e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e84:	68db      	ldr	r3, [r3, #12]
 8012e86:	685b      	ldr	r3, [r3, #4]
 8012e88:	1ad3      	subs	r3, r2, r3
 8012e8a:	3301      	adds	r3, #1
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	dc35      	bgt.n	8012efc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012e90:	4818      	ldr	r0, [pc, #96]	; (8012ef4 <tcp_receive+0xcfc>)
 8012e92:	f7fd fa91 	bl	80103b8 <tcp_seg_copy>
 8012e96:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012e98:	69fb      	ldr	r3, [r7, #28]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	f000 8109 	beq.w	80130b2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ea2:	68db      	ldr	r3, [r3, #12]
 8012ea4:	685b      	ldr	r3, [r3, #4]
 8012ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ea8:	8912      	ldrh	r2, [r2, #8]
 8012eaa:	441a      	add	r2, r3
 8012eac:	4b12      	ldr	r3, [pc, #72]	; (8012ef8 <tcp_receive+0xd00>)
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	1ad3      	subs	r3, r2, r3
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	dd12      	ble.n	8012edc <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012eb6:	4b10      	ldr	r3, [pc, #64]	; (8012ef8 <tcp_receive+0xd00>)
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	b29a      	uxth	r2, r3
 8012ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ebe:	68db      	ldr	r3, [r3, #12]
 8012ec0:	685b      	ldr	r3, [r3, #4]
 8012ec2:	b29b      	uxth	r3, r3
 8012ec4:	1ad3      	subs	r3, r2, r3
 8012ec6:	b29a      	uxth	r2, r3
 8012ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012eca:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ece:	685a      	ldr	r2, [r3, #4]
 8012ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ed2:	891b      	ldrh	r3, [r3, #8]
 8012ed4:	4619      	mov	r1, r3
 8012ed6:	4610      	mov	r0, r2
 8012ed8:	f7fb fbf0 	bl	800e6bc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ede:	69fa      	ldr	r2, [r7, #28]
 8012ee0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012ee2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012ee4:	69f8      	ldr	r0, [r7, #28]
 8012ee6:	f7ff f883 	bl	8011ff0 <tcp_oos_insert_segment>
                  }
                  break;
 8012eea:	e0e2      	b.n	80130b2 <tcp_receive+0xeba>
 8012eec:	2000b24c 	.word	0x2000b24c
 8012ef0:	2000b249 	.word	0x2000b249
 8012ef4:	2000b21c 	.word	0x2000b21c
 8012ef8:	2000b23c 	.word	0x2000b23c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012efe:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	f040 80c6 	bne.w	8013096 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012f0a:	4b80      	ldr	r3, [pc, #512]	; (801310c <tcp_receive+0xf14>)
 8012f0c:	681a      	ldr	r2, [r3, #0]
 8012f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f10:	68db      	ldr	r3, [r3, #12]
 8012f12:	685b      	ldr	r3, [r3, #4]
 8012f14:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	f340 80bd 	ble.w	8013096 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f1e:	68db      	ldr	r3, [r3, #12]
 8012f20:	899b      	ldrh	r3, [r3, #12]
 8012f22:	b29b      	uxth	r3, r3
 8012f24:	4618      	mov	r0, r3
 8012f26:	f7fa f96b 	bl	800d200 <lwip_htons>
 8012f2a:	4603      	mov	r3, r0
 8012f2c:	b2db      	uxtb	r3, r3
 8012f2e:	f003 0301 	and.w	r3, r3, #1
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	f040 80bf 	bne.w	80130b6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012f38:	4875      	ldr	r0, [pc, #468]	; (8013110 <tcp_receive+0xf18>)
 8012f3a:	f7fd fa3d 	bl	80103b8 <tcp_seg_copy>
 8012f3e:	4602      	mov	r2, r0
 8012f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f42:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	f000 80b6 	beq.w	80130ba <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f50:	68db      	ldr	r3, [r3, #12]
 8012f52:	685b      	ldr	r3, [r3, #4]
 8012f54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f56:	8912      	ldrh	r2, [r2, #8]
 8012f58:	441a      	add	r2, r3
 8012f5a:	4b6c      	ldr	r3, [pc, #432]	; (801310c <tcp_receive+0xf14>)
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	1ad3      	subs	r3, r2, r3
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	dd12      	ble.n	8012f8a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012f64:	4b69      	ldr	r3, [pc, #420]	; (801310c <tcp_receive+0xf14>)
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	b29a      	uxth	r2, r3
 8012f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f6c:	68db      	ldr	r3, [r3, #12]
 8012f6e:	685b      	ldr	r3, [r3, #4]
 8012f70:	b29b      	uxth	r3, r3
 8012f72:	1ad3      	subs	r3, r2, r3
 8012f74:	b29a      	uxth	r2, r3
 8012f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f78:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f7c:	685a      	ldr	r2, [r3, #4]
 8012f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f80:	891b      	ldrh	r3, [r3, #8]
 8012f82:	4619      	mov	r1, r3
 8012f84:	4610      	mov	r0, r2
 8012f86:	f7fb fb99 	bl	800e6bc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012f8a:	4b62      	ldr	r3, [pc, #392]	; (8013114 <tcp_receive+0xf1c>)
 8012f8c:	881b      	ldrh	r3, [r3, #0]
 8012f8e:	461a      	mov	r2, r3
 8012f90:	4b5e      	ldr	r3, [pc, #376]	; (801310c <tcp_receive+0xf14>)
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	441a      	add	r2, r3
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f9a:	6879      	ldr	r1, [r7, #4]
 8012f9c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012f9e:	440b      	add	r3, r1
 8012fa0:	1ad3      	subs	r3, r2, r3
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	f340 8089 	ble.w	80130ba <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	68db      	ldr	r3, [r3, #12]
 8012fae:	899b      	ldrh	r3, [r3, #12]
 8012fb0:	b29b      	uxth	r3, r3
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	f7fa f924 	bl	800d200 <lwip_htons>
 8012fb8:	4603      	mov	r3, r0
 8012fba:	b2db      	uxtb	r3, r3
 8012fbc:	f003 0301 	and.w	r3, r3, #1
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d022      	beq.n	801300a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	68db      	ldr	r3, [r3, #12]
 8012fca:	899b      	ldrh	r3, [r3, #12]
 8012fcc:	b29b      	uxth	r3, r3
 8012fce:	b21b      	sxth	r3, r3
 8012fd0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012fd4:	b21c      	sxth	r4, r3
 8012fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	68db      	ldr	r3, [r3, #12]
 8012fdc:	899b      	ldrh	r3, [r3, #12]
 8012fde:	b29b      	uxth	r3, r3
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	f7fa f90d 	bl	800d200 <lwip_htons>
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	b2db      	uxtb	r3, r3
 8012fea:	b29b      	uxth	r3, r3
 8012fec:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012ff0:	b29b      	uxth	r3, r3
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f7fa f904 	bl	800d200 <lwip_htons>
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	b21b      	sxth	r3, r3
 8012ffc:	4323      	orrs	r3, r4
 8012ffe:	b21a      	sxth	r2, r3
 8013000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	68db      	ldr	r3, [r3, #12]
 8013006:	b292      	uxth	r2, r2
 8013008:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801300e:	b29a      	uxth	r2, r3
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013014:	4413      	add	r3, r2
 8013016:	b299      	uxth	r1, r3
 8013018:	4b3c      	ldr	r3, [pc, #240]	; (801310c <tcp_receive+0xf14>)
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	b29a      	uxth	r2, r3
 801301e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	1a8a      	subs	r2, r1, r2
 8013024:	b292      	uxth	r2, r2
 8013026:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8013028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	685a      	ldr	r2, [r3, #4]
 801302e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	891b      	ldrh	r3, [r3, #8]
 8013034:	4619      	mov	r1, r3
 8013036:	4610      	mov	r0, r2
 8013038:	f7fb fb40 	bl	800e6bc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801303c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	891c      	ldrh	r4, [r3, #8]
 8013042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	68db      	ldr	r3, [r3, #12]
 8013048:	899b      	ldrh	r3, [r3, #12]
 801304a:	b29b      	uxth	r3, r3
 801304c:	4618      	mov	r0, r3
 801304e:	f7fa f8d7 	bl	800d200 <lwip_htons>
 8013052:	4603      	mov	r3, r0
 8013054:	b2db      	uxtb	r3, r3
 8013056:	f003 0303 	and.w	r3, r3, #3
 801305a:	2b00      	cmp	r3, #0
 801305c:	d001      	beq.n	8013062 <tcp_receive+0xe6a>
 801305e:	2301      	movs	r3, #1
 8013060:	e000      	b.n	8013064 <tcp_receive+0xe6c>
 8013062:	2300      	movs	r3, #0
 8013064:	4423      	add	r3, r4
 8013066:	b29a      	uxth	r2, r3
 8013068:	4b2a      	ldr	r3, [pc, #168]	; (8013114 <tcp_receive+0xf1c>)
 801306a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801306c:	4b29      	ldr	r3, [pc, #164]	; (8013114 <tcp_receive+0xf1c>)
 801306e:	881b      	ldrh	r3, [r3, #0]
 8013070:	461a      	mov	r2, r3
 8013072:	4b26      	ldr	r3, [pc, #152]	; (801310c <tcp_receive+0xf14>)
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	441a      	add	r2, r3
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801307c:	6879      	ldr	r1, [r7, #4]
 801307e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013080:	440b      	add	r3, r1
 8013082:	429a      	cmp	r2, r3
 8013084:	d019      	beq.n	80130ba <tcp_receive+0xec2>
 8013086:	4b24      	ldr	r3, [pc, #144]	; (8013118 <tcp_receive+0xf20>)
 8013088:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801308c:	4923      	ldr	r1, [pc, #140]	; (801311c <tcp_receive+0xf24>)
 801308e:	4824      	ldr	r0, [pc, #144]	; (8013120 <tcp_receive+0xf28>)
 8013090:	f007 fe5c 	bl	801ad4c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013094:	e011      	b.n	80130ba <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	63bb      	str	r3, [r7, #56]	; 0x38
 801309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801309e:	2b00      	cmp	r3, #0
 80130a0:	f47f aea4 	bne.w	8012dec <tcp_receive+0xbf4>
 80130a4:	e00a      	b.n	80130bc <tcp_receive+0xec4>
                break;
 80130a6:	bf00      	nop
 80130a8:	e008      	b.n	80130bc <tcp_receive+0xec4>
                break;
 80130aa:	bf00      	nop
 80130ac:	e006      	b.n	80130bc <tcp_receive+0xec4>
                  break;
 80130ae:	bf00      	nop
 80130b0:	e004      	b.n	80130bc <tcp_receive+0xec4>
                  break;
 80130b2:	bf00      	nop
 80130b4:	e002      	b.n	80130bc <tcp_receive+0xec4>
                  break;
 80130b6:	bf00      	nop
 80130b8:	e000      	b.n	80130bc <tcp_receive+0xec4>
                break;
 80130ba:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80130bc:	6878      	ldr	r0, [r7, #4]
 80130be:	f001 fe8b 	bl	8014dd8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80130c2:	e003      	b.n	80130cc <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80130c4:	6878      	ldr	r0, [r7, #4]
 80130c6:	f001 fe87 	bl	8014dd8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80130ca:	e01a      	b.n	8013102 <tcp_receive+0xf0a>
 80130cc:	e019      	b.n	8013102 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80130ce:	4b0f      	ldr	r3, [pc, #60]	; (801310c <tcp_receive+0xf14>)
 80130d0:	681a      	ldr	r2, [r3, #0]
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130d6:	1ad3      	subs	r3, r2, r3
 80130d8:	2b00      	cmp	r3, #0
 80130da:	db0a      	blt.n	80130f2 <tcp_receive+0xefa>
 80130dc:	4b0b      	ldr	r3, [pc, #44]	; (801310c <tcp_receive+0xf14>)
 80130de:	681a      	ldr	r2, [r3, #0]
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130e4:	6879      	ldr	r1, [r7, #4]
 80130e6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80130e8:	440b      	add	r3, r1
 80130ea:	1ad3      	subs	r3, r2, r3
 80130ec:	3301      	adds	r3, #1
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	dd07      	ble.n	8013102 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	8b5b      	ldrh	r3, [r3, #26]
 80130f6:	f043 0302 	orr.w	r3, r3, #2
 80130fa:	b29a      	uxth	r2, r3
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8013100:	e7ff      	b.n	8013102 <tcp_receive+0xf0a>
 8013102:	bf00      	nop
 8013104:	3750      	adds	r7, #80	; 0x50
 8013106:	46bd      	mov	sp, r7
 8013108:	bdb0      	pop	{r4, r5, r7, pc}
 801310a:	bf00      	nop
 801310c:	2000b23c 	.word	0x2000b23c
 8013110:	2000b21c 	.word	0x2000b21c
 8013114:	2000b246 	.word	0x2000b246
 8013118:	0801dad4 	.word	0x0801dad4
 801311c:	0801de7c 	.word	0x0801de7c
 8013120:	0801db20 	.word	0x0801db20

08013124 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8013124:	b480      	push	{r7}
 8013126:	b083      	sub	sp, #12
 8013128:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801312a:	4b15      	ldr	r3, [pc, #84]	; (8013180 <tcp_get_next_optbyte+0x5c>)
 801312c:	881b      	ldrh	r3, [r3, #0]
 801312e:	1c5a      	adds	r2, r3, #1
 8013130:	b291      	uxth	r1, r2
 8013132:	4a13      	ldr	r2, [pc, #76]	; (8013180 <tcp_get_next_optbyte+0x5c>)
 8013134:	8011      	strh	r1, [r2, #0]
 8013136:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8013138:	4b12      	ldr	r3, [pc, #72]	; (8013184 <tcp_get_next_optbyte+0x60>)
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d004      	beq.n	801314a <tcp_get_next_optbyte+0x26>
 8013140:	4b11      	ldr	r3, [pc, #68]	; (8013188 <tcp_get_next_optbyte+0x64>)
 8013142:	881b      	ldrh	r3, [r3, #0]
 8013144:	88fa      	ldrh	r2, [r7, #6]
 8013146:	429a      	cmp	r2, r3
 8013148:	d208      	bcs.n	801315c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801314a:	4b10      	ldr	r3, [pc, #64]	; (801318c <tcp_get_next_optbyte+0x68>)
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	3314      	adds	r3, #20
 8013150:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8013152:	88fb      	ldrh	r3, [r7, #6]
 8013154:	683a      	ldr	r2, [r7, #0]
 8013156:	4413      	add	r3, r2
 8013158:	781b      	ldrb	r3, [r3, #0]
 801315a:	e00b      	b.n	8013174 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801315c:	88fb      	ldrh	r3, [r7, #6]
 801315e:	b2da      	uxtb	r2, r3
 8013160:	4b09      	ldr	r3, [pc, #36]	; (8013188 <tcp_get_next_optbyte+0x64>)
 8013162:	881b      	ldrh	r3, [r3, #0]
 8013164:	b2db      	uxtb	r3, r3
 8013166:	1ad3      	subs	r3, r2, r3
 8013168:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801316a:	4b06      	ldr	r3, [pc, #24]	; (8013184 <tcp_get_next_optbyte+0x60>)
 801316c:	681a      	ldr	r2, [r3, #0]
 801316e:	797b      	ldrb	r3, [r7, #5]
 8013170:	4413      	add	r3, r2
 8013172:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013174:	4618      	mov	r0, r3
 8013176:	370c      	adds	r7, #12
 8013178:	46bd      	mov	sp, r7
 801317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317e:	4770      	bx	lr
 8013180:	2000b238 	.word	0x2000b238
 8013184:	2000b234 	.word	0x2000b234
 8013188:	2000b232 	.word	0x2000b232
 801318c:	2000b22c 	.word	0x2000b22c

08013190 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b084      	sub	sp, #16
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d106      	bne.n	80131ac <tcp_parseopt+0x1c>
 801319e:	4b32      	ldr	r3, [pc, #200]	; (8013268 <tcp_parseopt+0xd8>)
 80131a0:	f240 727d 	movw	r2, #1917	; 0x77d
 80131a4:	4931      	ldr	r1, [pc, #196]	; (801326c <tcp_parseopt+0xdc>)
 80131a6:	4832      	ldr	r0, [pc, #200]	; (8013270 <tcp_parseopt+0xe0>)
 80131a8:	f007 fdd0 	bl	801ad4c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80131ac:	4b31      	ldr	r3, [pc, #196]	; (8013274 <tcp_parseopt+0xe4>)
 80131ae:	881b      	ldrh	r3, [r3, #0]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d055      	beq.n	8013260 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80131b4:	4b30      	ldr	r3, [pc, #192]	; (8013278 <tcp_parseopt+0xe8>)
 80131b6:	2200      	movs	r2, #0
 80131b8:	801a      	strh	r2, [r3, #0]
 80131ba:	e045      	b.n	8013248 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80131bc:	f7ff ffb2 	bl	8013124 <tcp_get_next_optbyte>
 80131c0:	4603      	mov	r3, r0
 80131c2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80131c4:	7bfb      	ldrb	r3, [r7, #15]
 80131c6:	2b02      	cmp	r3, #2
 80131c8:	d006      	beq.n	80131d8 <tcp_parseopt+0x48>
 80131ca:	2b02      	cmp	r3, #2
 80131cc:	dc2b      	bgt.n	8013226 <tcp_parseopt+0x96>
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d041      	beq.n	8013256 <tcp_parseopt+0xc6>
 80131d2:	2b01      	cmp	r3, #1
 80131d4:	d127      	bne.n	8013226 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80131d6:	e037      	b.n	8013248 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80131d8:	f7ff ffa4 	bl	8013124 <tcp_get_next_optbyte>
 80131dc:	4603      	mov	r3, r0
 80131de:	2b04      	cmp	r3, #4
 80131e0:	d13b      	bne.n	801325a <tcp_parseopt+0xca>
 80131e2:	4b25      	ldr	r3, [pc, #148]	; (8013278 <tcp_parseopt+0xe8>)
 80131e4:	881b      	ldrh	r3, [r3, #0]
 80131e6:	3301      	adds	r3, #1
 80131e8:	4a22      	ldr	r2, [pc, #136]	; (8013274 <tcp_parseopt+0xe4>)
 80131ea:	8812      	ldrh	r2, [r2, #0]
 80131ec:	4293      	cmp	r3, r2
 80131ee:	da34      	bge.n	801325a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80131f0:	f7ff ff98 	bl	8013124 <tcp_get_next_optbyte>
 80131f4:	4603      	mov	r3, r0
 80131f6:	b29b      	uxth	r3, r3
 80131f8:	021b      	lsls	r3, r3, #8
 80131fa:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80131fc:	f7ff ff92 	bl	8013124 <tcp_get_next_optbyte>
 8013200:	4603      	mov	r3, r0
 8013202:	b29a      	uxth	r2, r3
 8013204:	89bb      	ldrh	r3, [r7, #12]
 8013206:	4313      	orrs	r3, r2
 8013208:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801320a:	89bb      	ldrh	r3, [r7, #12]
 801320c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013210:	d804      	bhi.n	801321c <tcp_parseopt+0x8c>
 8013212:	89bb      	ldrh	r3, [r7, #12]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d001      	beq.n	801321c <tcp_parseopt+0x8c>
 8013218:	89ba      	ldrh	r2, [r7, #12]
 801321a:	e001      	b.n	8013220 <tcp_parseopt+0x90>
 801321c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8013224:	e010      	b.n	8013248 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8013226:	f7ff ff7d 	bl	8013124 <tcp_get_next_optbyte>
 801322a:	4603      	mov	r3, r0
 801322c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801322e:	7afb      	ldrb	r3, [r7, #11]
 8013230:	2b01      	cmp	r3, #1
 8013232:	d914      	bls.n	801325e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013234:	7afb      	ldrb	r3, [r7, #11]
 8013236:	b29a      	uxth	r2, r3
 8013238:	4b0f      	ldr	r3, [pc, #60]	; (8013278 <tcp_parseopt+0xe8>)
 801323a:	881b      	ldrh	r3, [r3, #0]
 801323c:	4413      	add	r3, r2
 801323e:	b29b      	uxth	r3, r3
 8013240:	3b02      	subs	r3, #2
 8013242:	b29a      	uxth	r2, r3
 8013244:	4b0c      	ldr	r3, [pc, #48]	; (8013278 <tcp_parseopt+0xe8>)
 8013246:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013248:	4b0b      	ldr	r3, [pc, #44]	; (8013278 <tcp_parseopt+0xe8>)
 801324a:	881a      	ldrh	r2, [r3, #0]
 801324c:	4b09      	ldr	r3, [pc, #36]	; (8013274 <tcp_parseopt+0xe4>)
 801324e:	881b      	ldrh	r3, [r3, #0]
 8013250:	429a      	cmp	r2, r3
 8013252:	d3b3      	bcc.n	80131bc <tcp_parseopt+0x2c>
 8013254:	e004      	b.n	8013260 <tcp_parseopt+0xd0>
          return;
 8013256:	bf00      	nop
 8013258:	e002      	b.n	8013260 <tcp_parseopt+0xd0>
            return;
 801325a:	bf00      	nop
 801325c:	e000      	b.n	8013260 <tcp_parseopt+0xd0>
            return;
 801325e:	bf00      	nop
      }
    }
  }
}
 8013260:	3710      	adds	r7, #16
 8013262:	46bd      	mov	sp, r7
 8013264:	bd80      	pop	{r7, pc}
 8013266:	bf00      	nop
 8013268:	0801dad4 	.word	0x0801dad4
 801326c:	0801df38 	.word	0x0801df38
 8013270:	0801db20 	.word	0x0801db20
 8013274:	2000b230 	.word	0x2000b230
 8013278:	2000b238 	.word	0x2000b238

0801327c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801327c:	b480      	push	{r7}
 801327e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013280:	4b05      	ldr	r3, [pc, #20]	; (8013298 <tcp_trigger_input_pcb_close+0x1c>)
 8013282:	781b      	ldrb	r3, [r3, #0]
 8013284:	f043 0310 	orr.w	r3, r3, #16
 8013288:	b2da      	uxtb	r2, r3
 801328a:	4b03      	ldr	r3, [pc, #12]	; (8013298 <tcp_trigger_input_pcb_close+0x1c>)
 801328c:	701a      	strb	r2, [r3, #0]
}
 801328e:	bf00      	nop
 8013290:	46bd      	mov	sp, r7
 8013292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013296:	4770      	bx	lr
 8013298:	2000b249 	.word	0x2000b249

0801329c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801329c:	b580      	push	{r7, lr}
 801329e:	b084      	sub	sp, #16
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	60f8      	str	r0, [r7, #12]
 80132a4:	60b9      	str	r1, [r7, #8]
 80132a6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d00a      	beq.n	80132c4 <tcp_route+0x28>
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	7a1b      	ldrb	r3, [r3, #8]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d006      	beq.n	80132c4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	7a1b      	ldrb	r3, [r3, #8]
 80132ba:	4618      	mov	r0, r3
 80132bc:	f7fa ffbe 	bl	800e23c <netif_get_by_index>
 80132c0:	4603      	mov	r3, r0
 80132c2:	e003      	b.n	80132cc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f003 fe4f 	bl	8016f68 <ip4_route>
 80132ca:	4603      	mov	r3, r0
  }
}
 80132cc:	4618      	mov	r0, r3
 80132ce:	3710      	adds	r7, #16
 80132d0:	46bd      	mov	sp, r7
 80132d2:	bd80      	pop	{r7, pc}

080132d4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80132d4:	b590      	push	{r4, r7, lr}
 80132d6:	b087      	sub	sp, #28
 80132d8:	af00      	add	r7, sp, #0
 80132da:	60f8      	str	r0, [r7, #12]
 80132dc:	60b9      	str	r1, [r7, #8]
 80132de:	603b      	str	r3, [r7, #0]
 80132e0:	4613      	mov	r3, r2
 80132e2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d105      	bne.n	80132f6 <tcp_create_segment+0x22>
 80132ea:	4b44      	ldr	r3, [pc, #272]	; (80133fc <tcp_create_segment+0x128>)
 80132ec:	22a3      	movs	r2, #163	; 0xa3
 80132ee:	4944      	ldr	r1, [pc, #272]	; (8013400 <tcp_create_segment+0x12c>)
 80132f0:	4844      	ldr	r0, [pc, #272]	; (8013404 <tcp_create_segment+0x130>)
 80132f2:	f007 fd2b 	bl	801ad4c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80132f6:	68bb      	ldr	r3, [r7, #8]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d105      	bne.n	8013308 <tcp_create_segment+0x34>
 80132fc:	4b3f      	ldr	r3, [pc, #252]	; (80133fc <tcp_create_segment+0x128>)
 80132fe:	22a4      	movs	r2, #164	; 0xa4
 8013300:	4941      	ldr	r1, [pc, #260]	; (8013408 <tcp_create_segment+0x134>)
 8013302:	4840      	ldr	r0, [pc, #256]	; (8013404 <tcp_create_segment+0x130>)
 8013304:	f007 fd22 	bl	801ad4c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013308:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801330c:	009b      	lsls	r3, r3, #2
 801330e:	b2db      	uxtb	r3, r3
 8013310:	f003 0304 	and.w	r3, r3, #4
 8013314:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013316:	2003      	movs	r0, #3
 8013318:	f7fa fc28 	bl	800db6c <memp_malloc>
 801331c:	6138      	str	r0, [r7, #16]
 801331e:	693b      	ldr	r3, [r7, #16]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d104      	bne.n	801332e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013324:	68b8      	ldr	r0, [r7, #8]
 8013326:	f7fb fb81 	bl	800ea2c <pbuf_free>
    return NULL;
 801332a:	2300      	movs	r3, #0
 801332c:	e061      	b.n	80133f2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801332e:	693b      	ldr	r3, [r7, #16]
 8013330:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013334:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013336:	693b      	ldr	r3, [r7, #16]
 8013338:	2200      	movs	r2, #0
 801333a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801333c:	693b      	ldr	r3, [r7, #16]
 801333e:	68ba      	ldr	r2, [r7, #8]
 8013340:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013342:	68bb      	ldr	r3, [r7, #8]
 8013344:	891a      	ldrh	r2, [r3, #8]
 8013346:	7dfb      	ldrb	r3, [r7, #23]
 8013348:	b29b      	uxth	r3, r3
 801334a:	429a      	cmp	r2, r3
 801334c:	d205      	bcs.n	801335a <tcp_create_segment+0x86>
 801334e:	4b2b      	ldr	r3, [pc, #172]	; (80133fc <tcp_create_segment+0x128>)
 8013350:	22b0      	movs	r2, #176	; 0xb0
 8013352:	492e      	ldr	r1, [pc, #184]	; (801340c <tcp_create_segment+0x138>)
 8013354:	482b      	ldr	r0, [pc, #172]	; (8013404 <tcp_create_segment+0x130>)
 8013356:	f007 fcf9 	bl	801ad4c <iprintf>
  seg->len = p->tot_len - optlen;
 801335a:	68bb      	ldr	r3, [r7, #8]
 801335c:	891a      	ldrh	r2, [r3, #8]
 801335e:	7dfb      	ldrb	r3, [r7, #23]
 8013360:	b29b      	uxth	r3, r3
 8013362:	1ad3      	subs	r3, r2, r3
 8013364:	b29a      	uxth	r2, r3
 8013366:	693b      	ldr	r3, [r7, #16]
 8013368:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801336a:	2114      	movs	r1, #20
 801336c:	68b8      	ldr	r0, [r7, #8]
 801336e:	f7fb fa95 	bl	800e89c <pbuf_add_header>
 8013372:	4603      	mov	r3, r0
 8013374:	2b00      	cmp	r3, #0
 8013376:	d004      	beq.n	8013382 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013378:	6938      	ldr	r0, [r7, #16]
 801337a:	f7fd f804 	bl	8010386 <tcp_seg_free>
    return NULL;
 801337e:	2300      	movs	r3, #0
 8013380:	e037      	b.n	80133f2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013382:	693b      	ldr	r3, [r7, #16]
 8013384:	685b      	ldr	r3, [r3, #4]
 8013386:	685a      	ldr	r2, [r3, #4]
 8013388:	693b      	ldr	r3, [r7, #16]
 801338a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	8ada      	ldrh	r2, [r3, #22]
 8013390:	693b      	ldr	r3, [r7, #16]
 8013392:	68dc      	ldr	r4, [r3, #12]
 8013394:	4610      	mov	r0, r2
 8013396:	f7f9 ff33 	bl	800d200 <lwip_htons>
 801339a:	4603      	mov	r3, r0
 801339c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	8b1a      	ldrh	r2, [r3, #24]
 80133a2:	693b      	ldr	r3, [r7, #16]
 80133a4:	68dc      	ldr	r4, [r3, #12]
 80133a6:	4610      	mov	r0, r2
 80133a8:	f7f9 ff2a 	bl	800d200 <lwip_htons>
 80133ac:	4603      	mov	r3, r0
 80133ae:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80133b0:	693b      	ldr	r3, [r7, #16]
 80133b2:	68dc      	ldr	r4, [r3, #12]
 80133b4:	6838      	ldr	r0, [r7, #0]
 80133b6:	f7f9 ff38 	bl	800d22a <lwip_htonl>
 80133ba:	4603      	mov	r3, r0
 80133bc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80133be:	7dfb      	ldrb	r3, [r7, #23]
 80133c0:	089b      	lsrs	r3, r3, #2
 80133c2:	b2db      	uxtb	r3, r3
 80133c4:	b29b      	uxth	r3, r3
 80133c6:	3305      	adds	r3, #5
 80133c8:	b29b      	uxth	r3, r3
 80133ca:	031b      	lsls	r3, r3, #12
 80133cc:	b29a      	uxth	r2, r3
 80133ce:	79fb      	ldrb	r3, [r7, #7]
 80133d0:	b29b      	uxth	r3, r3
 80133d2:	4313      	orrs	r3, r2
 80133d4:	b29a      	uxth	r2, r3
 80133d6:	693b      	ldr	r3, [r7, #16]
 80133d8:	68dc      	ldr	r4, [r3, #12]
 80133da:	4610      	mov	r0, r2
 80133dc:	f7f9 ff10 	bl	800d200 <lwip_htons>
 80133e0:	4603      	mov	r3, r0
 80133e2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80133e4:	693b      	ldr	r3, [r7, #16]
 80133e6:	68db      	ldr	r3, [r3, #12]
 80133e8:	2200      	movs	r2, #0
 80133ea:	749a      	strb	r2, [r3, #18]
 80133ec:	2200      	movs	r2, #0
 80133ee:	74da      	strb	r2, [r3, #19]
  return seg;
 80133f0:	693b      	ldr	r3, [r7, #16]
}
 80133f2:	4618      	mov	r0, r3
 80133f4:	371c      	adds	r7, #28
 80133f6:	46bd      	mov	sp, r7
 80133f8:	bd90      	pop	{r4, r7, pc}
 80133fa:	bf00      	nop
 80133fc:	0801df54 	.word	0x0801df54
 8013400:	0801df88 	.word	0x0801df88
 8013404:	0801dfa8 	.word	0x0801dfa8
 8013408:	0801dfd0 	.word	0x0801dfd0
 801340c:	0801dff4 	.word	0x0801dff4

08013410 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8013410:	b580      	push	{r7, lr}
 8013412:	b086      	sub	sp, #24
 8013414:	af00      	add	r7, sp, #0
 8013416:	607b      	str	r3, [r7, #4]
 8013418:	4603      	mov	r3, r0
 801341a:	73fb      	strb	r3, [r7, #15]
 801341c:	460b      	mov	r3, r1
 801341e:	81bb      	strh	r3, [r7, #12]
 8013420:	4613      	mov	r3, r2
 8013422:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013424:	89bb      	ldrh	r3, [r7, #12]
 8013426:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d105      	bne.n	801343a <tcp_pbuf_prealloc+0x2a>
 801342e:	4b30      	ldr	r3, [pc, #192]	; (80134f0 <tcp_pbuf_prealloc+0xe0>)
 8013430:	22e8      	movs	r2, #232	; 0xe8
 8013432:	4930      	ldr	r1, [pc, #192]	; (80134f4 <tcp_pbuf_prealloc+0xe4>)
 8013434:	4830      	ldr	r0, [pc, #192]	; (80134f8 <tcp_pbuf_prealloc+0xe8>)
 8013436:	f007 fc89 	bl	801ad4c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801343a:	6a3b      	ldr	r3, [r7, #32]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d105      	bne.n	801344c <tcp_pbuf_prealloc+0x3c>
 8013440:	4b2b      	ldr	r3, [pc, #172]	; (80134f0 <tcp_pbuf_prealloc+0xe0>)
 8013442:	22e9      	movs	r2, #233	; 0xe9
 8013444:	492d      	ldr	r1, [pc, #180]	; (80134fc <tcp_pbuf_prealloc+0xec>)
 8013446:	482c      	ldr	r0, [pc, #176]	; (80134f8 <tcp_pbuf_prealloc+0xe8>)
 8013448:	f007 fc80 	bl	801ad4c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801344c:	89ba      	ldrh	r2, [r7, #12]
 801344e:	897b      	ldrh	r3, [r7, #10]
 8013450:	429a      	cmp	r2, r3
 8013452:	d221      	bcs.n	8013498 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013454:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013458:	f003 0302 	and.w	r3, r3, #2
 801345c:	2b00      	cmp	r3, #0
 801345e:	d111      	bne.n	8013484 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8013460:	6a3b      	ldr	r3, [r7, #32]
 8013462:	8b5b      	ldrh	r3, [r3, #26]
 8013464:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013468:	2b00      	cmp	r3, #0
 801346a:	d115      	bne.n	8013498 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801346c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013470:	2b00      	cmp	r3, #0
 8013472:	d007      	beq.n	8013484 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8013474:	6a3b      	ldr	r3, [r7, #32]
 8013476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8013478:	2b00      	cmp	r3, #0
 801347a:	d103      	bne.n	8013484 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801347c:	6a3b      	ldr	r3, [r7, #32]
 801347e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8013480:	2b00      	cmp	r3, #0
 8013482:	d009      	beq.n	8013498 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8013484:	89bb      	ldrh	r3, [r7, #12]
 8013486:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801348a:	f023 0203 	bic.w	r2, r3, #3
 801348e:	897b      	ldrh	r3, [r7, #10]
 8013490:	4293      	cmp	r3, r2
 8013492:	bf28      	it	cs
 8013494:	4613      	movcs	r3, r2
 8013496:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8013498:	8af9      	ldrh	r1, [r7, #22]
 801349a:	7bfb      	ldrb	r3, [r7, #15]
 801349c:	f44f 7220 	mov.w	r2, #640	; 0x280
 80134a0:	4618      	mov	r0, r3
 80134a2:	f7fa ffad 	bl	800e400 <pbuf_alloc>
 80134a6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80134a8:	693b      	ldr	r3, [r7, #16]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d101      	bne.n	80134b2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80134ae:	2300      	movs	r3, #0
 80134b0:	e019      	b.n	80134e6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80134b2:	693b      	ldr	r3, [r7, #16]
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d006      	beq.n	80134c8 <tcp_pbuf_prealloc+0xb8>
 80134ba:	4b0d      	ldr	r3, [pc, #52]	; (80134f0 <tcp_pbuf_prealloc+0xe0>)
 80134bc:	f240 120b 	movw	r2, #267	; 0x10b
 80134c0:	490f      	ldr	r1, [pc, #60]	; (8013500 <tcp_pbuf_prealloc+0xf0>)
 80134c2:	480d      	ldr	r0, [pc, #52]	; (80134f8 <tcp_pbuf_prealloc+0xe8>)
 80134c4:	f007 fc42 	bl	801ad4c <iprintf>
  *oversize = p->len - length;
 80134c8:	693b      	ldr	r3, [r7, #16]
 80134ca:	895a      	ldrh	r2, [r3, #10]
 80134cc:	89bb      	ldrh	r3, [r7, #12]
 80134ce:	1ad3      	subs	r3, r2, r3
 80134d0:	b29a      	uxth	r2, r3
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80134d6:	693b      	ldr	r3, [r7, #16]
 80134d8:	89ba      	ldrh	r2, [r7, #12]
 80134da:	811a      	strh	r2, [r3, #8]
 80134dc:	693b      	ldr	r3, [r7, #16]
 80134de:	891a      	ldrh	r2, [r3, #8]
 80134e0:	693b      	ldr	r3, [r7, #16]
 80134e2:	815a      	strh	r2, [r3, #10]
  return p;
 80134e4:	693b      	ldr	r3, [r7, #16]
}
 80134e6:	4618      	mov	r0, r3
 80134e8:	3718      	adds	r7, #24
 80134ea:	46bd      	mov	sp, r7
 80134ec:	bd80      	pop	{r7, pc}
 80134ee:	bf00      	nop
 80134f0:	0801df54 	.word	0x0801df54
 80134f4:	0801e00c 	.word	0x0801e00c
 80134f8:	0801dfa8 	.word	0x0801dfa8
 80134fc:	0801e030 	.word	0x0801e030
 8013500:	0801e050 	.word	0x0801e050

08013504 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8013504:	b580      	push	{r7, lr}
 8013506:	b082      	sub	sp, #8
 8013508:	af00      	add	r7, sp, #0
 801350a:	6078      	str	r0, [r7, #4]
 801350c:	460b      	mov	r3, r1
 801350e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	2b00      	cmp	r3, #0
 8013514:	d106      	bne.n	8013524 <tcp_write_checks+0x20>
 8013516:	4b33      	ldr	r3, [pc, #204]	; (80135e4 <tcp_write_checks+0xe0>)
 8013518:	f240 1233 	movw	r2, #307	; 0x133
 801351c:	4932      	ldr	r1, [pc, #200]	; (80135e8 <tcp_write_checks+0xe4>)
 801351e:	4833      	ldr	r0, [pc, #204]	; (80135ec <tcp_write_checks+0xe8>)
 8013520:	f007 fc14 	bl	801ad4c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	7d1b      	ldrb	r3, [r3, #20]
 8013528:	2b04      	cmp	r3, #4
 801352a:	d00e      	beq.n	801354a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8013530:	2b07      	cmp	r3, #7
 8013532:	d00a      	beq.n	801354a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013538:	2b02      	cmp	r3, #2
 801353a:	d006      	beq.n	801354a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8013540:	2b03      	cmp	r3, #3
 8013542:	d002      	beq.n	801354a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013544:	f06f 030a 	mvn.w	r3, #10
 8013548:	e048      	b.n	80135dc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801354a:	887b      	ldrh	r3, [r7, #2]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d101      	bne.n	8013554 <tcp_write_checks+0x50>
    return ERR_OK;
 8013550:	2300      	movs	r3, #0
 8013552:	e043      	b.n	80135dc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801355a:	887a      	ldrh	r2, [r7, #2]
 801355c:	429a      	cmp	r2, r3
 801355e:	d909      	bls.n	8013574 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	8b5b      	ldrh	r3, [r3, #26]
 8013564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013568:	b29a      	uxth	r2, r3
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801356e:	f04f 33ff 	mov.w	r3, #4294967295
 8013572:	e033      	b.n	80135dc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801357a:	2b08      	cmp	r3, #8
 801357c:	d909      	bls.n	8013592 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	8b5b      	ldrh	r3, [r3, #26]
 8013582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013586:	b29a      	uxth	r2, r3
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801358c:	f04f 33ff 	mov.w	r3, #4294967295
 8013590:	e024      	b.n	80135dc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013598:	2b00      	cmp	r3, #0
 801359a:	d00f      	beq.n	80135bc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d11a      	bne.n	80135da <tcp_write_checks+0xd6>
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d116      	bne.n	80135da <tcp_write_checks+0xd6>
 80135ac:	4b0d      	ldr	r3, [pc, #52]	; (80135e4 <tcp_write_checks+0xe0>)
 80135ae:	f240 1255 	movw	r2, #341	; 0x155
 80135b2:	490f      	ldr	r1, [pc, #60]	; (80135f0 <tcp_write_checks+0xec>)
 80135b4:	480d      	ldr	r0, [pc, #52]	; (80135ec <tcp_write_checks+0xe8>)
 80135b6:	f007 fbc9 	bl	801ad4c <iprintf>
 80135ba:	e00e      	b.n	80135da <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d103      	bne.n	80135cc <tcp_write_checks+0xc8>
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d006      	beq.n	80135da <tcp_write_checks+0xd6>
 80135cc:	4b05      	ldr	r3, [pc, #20]	; (80135e4 <tcp_write_checks+0xe0>)
 80135ce:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80135d2:	4908      	ldr	r1, [pc, #32]	; (80135f4 <tcp_write_checks+0xf0>)
 80135d4:	4805      	ldr	r0, [pc, #20]	; (80135ec <tcp_write_checks+0xe8>)
 80135d6:	f007 fbb9 	bl	801ad4c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80135da:	2300      	movs	r3, #0
}
 80135dc:	4618      	mov	r0, r3
 80135de:	3708      	adds	r7, #8
 80135e0:	46bd      	mov	sp, r7
 80135e2:	bd80      	pop	{r7, pc}
 80135e4:	0801df54 	.word	0x0801df54
 80135e8:	0801e064 	.word	0x0801e064
 80135ec:	0801dfa8 	.word	0x0801dfa8
 80135f0:	0801e084 	.word	0x0801e084
 80135f4:	0801e0c0 	.word	0x0801e0c0

080135f8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80135f8:	b590      	push	{r4, r7, lr}
 80135fa:	b09b      	sub	sp, #108	; 0x6c
 80135fc:	af04      	add	r7, sp, #16
 80135fe:	60f8      	str	r0, [r7, #12]
 8013600:	60b9      	str	r1, [r7, #8]
 8013602:	4611      	mov	r1, r2
 8013604:	461a      	mov	r2, r3
 8013606:	460b      	mov	r3, r1
 8013608:	80fb      	strh	r3, [r7, #6]
 801360a:	4613      	mov	r3, r2
 801360c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801360e:	2300      	movs	r3, #0
 8013610:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8013612:	2300      	movs	r3, #0
 8013614:	653b      	str	r3, [r7, #80]	; 0x50
 8013616:	2300      	movs	r3, #0
 8013618:	64fb      	str	r3, [r7, #76]	; 0x4c
 801361a:	2300      	movs	r3, #0
 801361c:	64bb      	str	r3, [r7, #72]	; 0x48
 801361e:	2300      	movs	r3, #0
 8013620:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8013622:	2300      	movs	r3, #0
 8013624:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8013628:	2300      	movs	r3, #0
 801362a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801362e:	2300      	movs	r3, #0
 8013630:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8013632:	2300      	movs	r3, #0
 8013634:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013636:	2300      	movs	r3, #0
 8013638:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d109      	bne.n	8013654 <tcp_write+0x5c>
 8013640:	4ba4      	ldr	r3, [pc, #656]	; (80138d4 <tcp_write+0x2dc>)
 8013642:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8013646:	49a4      	ldr	r1, [pc, #656]	; (80138d8 <tcp_write+0x2e0>)
 8013648:	48a4      	ldr	r0, [pc, #656]	; (80138dc <tcp_write+0x2e4>)
 801364a:	f007 fb7f 	bl	801ad4c <iprintf>
 801364e:	f06f 030f 	mvn.w	r3, #15
 8013652:	e32a      	b.n	8013caa <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801365a:	085b      	lsrs	r3, r3, #1
 801365c:	b29a      	uxth	r2, r3
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013662:	4293      	cmp	r3, r2
 8013664:	bf28      	it	cs
 8013666:	4613      	movcs	r3, r2
 8013668:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801366a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801366c:	2b00      	cmp	r3, #0
 801366e:	d102      	bne.n	8013676 <tcp_write+0x7e>
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013674:	e000      	b.n	8013678 <tcp_write+0x80>
 8013676:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013678:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801367a:	68bb      	ldr	r3, [r7, #8]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d109      	bne.n	8013694 <tcp_write+0x9c>
 8013680:	4b94      	ldr	r3, [pc, #592]	; (80138d4 <tcp_write+0x2dc>)
 8013682:	f240 12ad 	movw	r2, #429	; 0x1ad
 8013686:	4996      	ldr	r1, [pc, #600]	; (80138e0 <tcp_write+0x2e8>)
 8013688:	4894      	ldr	r0, [pc, #592]	; (80138dc <tcp_write+0x2e4>)
 801368a:	f007 fb5f 	bl	801ad4c <iprintf>
 801368e:	f06f 030f 	mvn.w	r3, #15
 8013692:	e30a      	b.n	8013caa <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8013694:	88fb      	ldrh	r3, [r7, #6]
 8013696:	4619      	mov	r1, r3
 8013698:	68f8      	ldr	r0, [r7, #12]
 801369a:	f7ff ff33 	bl	8013504 <tcp_write_checks>
 801369e:	4603      	mov	r3, r0
 80136a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80136a4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d002      	beq.n	80136b2 <tcp_write+0xba>
    return err;
 80136ac:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80136b0:	e2fb      	b.n	8013caa <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80136b8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80136bc:	2300      	movs	r3, #0
 80136be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	f000 80f6 	beq.w	80138b8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136d0:	653b      	str	r3, [r7, #80]	; 0x50
 80136d2:	e002      	b.n	80136da <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80136d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80136da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d1f8      	bne.n	80136d4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80136e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136e4:	7a9b      	ldrb	r3, [r3, #10]
 80136e6:	009b      	lsls	r3, r3, #2
 80136e8:	b29b      	uxth	r3, r3
 80136ea:	f003 0304 	and.w	r3, r3, #4
 80136ee:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80136f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80136f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136f4:	891b      	ldrh	r3, [r3, #8]
 80136f6:	4619      	mov	r1, r3
 80136f8:	8c3b      	ldrh	r3, [r7, #32]
 80136fa:	440b      	add	r3, r1
 80136fc:	429a      	cmp	r2, r3
 80136fe:	da06      	bge.n	801370e <tcp_write+0x116>
 8013700:	4b74      	ldr	r3, [pc, #464]	; (80138d4 <tcp_write+0x2dc>)
 8013702:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013706:	4977      	ldr	r1, [pc, #476]	; (80138e4 <tcp_write+0x2ec>)
 8013708:	4874      	ldr	r0, [pc, #464]	; (80138dc <tcp_write+0x2e4>)
 801370a:	f007 fb1f 	bl	801ad4c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801370e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013710:	891a      	ldrh	r2, [r3, #8]
 8013712:	8c3b      	ldrh	r3, [r7, #32]
 8013714:	4413      	add	r3, r2
 8013716:	b29b      	uxth	r3, r3
 8013718:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801371a:	1ad3      	subs	r3, r2, r3
 801371c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013724:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8013726:	8a7b      	ldrh	r3, [r7, #18]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d026      	beq.n	801377a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801372c:	8a7b      	ldrh	r3, [r7, #18]
 801372e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013730:	429a      	cmp	r2, r3
 8013732:	d206      	bcs.n	8013742 <tcp_write+0x14a>
 8013734:	4b67      	ldr	r3, [pc, #412]	; (80138d4 <tcp_write+0x2dc>)
 8013736:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801373a:	496b      	ldr	r1, [pc, #428]	; (80138e8 <tcp_write+0x2f0>)
 801373c:	4867      	ldr	r0, [pc, #412]	; (80138dc <tcp_write+0x2e4>)
 801373e:	f007 fb05 	bl	801ad4c <iprintf>
      seg = last_unsent;
 8013742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013744:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013746:	8a7b      	ldrh	r3, [r7, #18]
 8013748:	88fa      	ldrh	r2, [r7, #6]
 801374a:	4293      	cmp	r3, r2
 801374c:	bf28      	it	cs
 801374e:	4613      	movcs	r3, r2
 8013750:	b29b      	uxth	r3, r3
 8013752:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013754:	4293      	cmp	r3, r2
 8013756:	bf28      	it	cs
 8013758:	4613      	movcs	r3, r2
 801375a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801375c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013760:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013762:	4413      	add	r3, r2
 8013764:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8013768:	8a7a      	ldrh	r2, [r7, #18]
 801376a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801376c:	1ad3      	subs	r3, r2, r3
 801376e:	b29b      	uxth	r3, r3
 8013770:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8013772:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013774:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013776:	1ad3      	subs	r3, r2, r3
 8013778:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801377a:	8a7b      	ldrh	r3, [r7, #18]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d00b      	beq.n	8013798 <tcp_write+0x1a0>
 8013780:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013784:	88fb      	ldrh	r3, [r7, #6]
 8013786:	429a      	cmp	r2, r3
 8013788:	d006      	beq.n	8013798 <tcp_write+0x1a0>
 801378a:	4b52      	ldr	r3, [pc, #328]	; (80138d4 <tcp_write+0x2dc>)
 801378c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013790:	4956      	ldr	r1, [pc, #344]	; (80138ec <tcp_write+0x2f4>)
 8013792:	4852      	ldr	r0, [pc, #328]	; (80138dc <tcp_write+0x2e4>)
 8013794:	f007 fada 	bl	801ad4c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013798:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801379c:	88fb      	ldrh	r3, [r7, #6]
 801379e:	429a      	cmp	r2, r3
 80137a0:	f080 8167 	bcs.w	8013a72 <tcp_write+0x47a>
 80137a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	f000 8163 	beq.w	8013a72 <tcp_write+0x47a>
 80137ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137ae:	891b      	ldrh	r3, [r3, #8]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	f000 815e 	beq.w	8013a72 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80137b6:	88fa      	ldrh	r2, [r7, #6]
 80137b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80137bc:	1ad2      	subs	r2, r2, r3
 80137be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80137c0:	4293      	cmp	r3, r2
 80137c2:	bfa8      	it	ge
 80137c4:	4613      	movge	r3, r2
 80137c6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80137c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137ca:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80137cc:	797b      	ldrb	r3, [r7, #5]
 80137ce:	f003 0301 	and.w	r3, r3, #1
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d027      	beq.n	8013826 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80137d6:	f107 0012 	add.w	r0, r7, #18
 80137da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80137dc:	8bf9      	ldrh	r1, [r7, #30]
 80137de:	2301      	movs	r3, #1
 80137e0:	9302      	str	r3, [sp, #8]
 80137e2:	797b      	ldrb	r3, [r7, #5]
 80137e4:	9301      	str	r3, [sp, #4]
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	9300      	str	r3, [sp, #0]
 80137ea:	4603      	mov	r3, r0
 80137ec:	2000      	movs	r0, #0
 80137ee:	f7ff fe0f 	bl	8013410 <tcp_pbuf_prealloc>
 80137f2:	6578      	str	r0, [r7, #84]	; 0x54
 80137f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	f000 8225 	beq.w	8013c46 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80137fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80137fe:	6858      	ldr	r0, [r3, #4]
 8013800:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013804:	68ba      	ldr	r2, [r7, #8]
 8013806:	4413      	add	r3, r2
 8013808:	8bfa      	ldrh	r2, [r7, #30]
 801380a:	4619      	mov	r1, r3
 801380c:	f006 fed6 	bl	801a5bc <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8013810:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013812:	f7fb f999 	bl	800eb48 <pbuf_clen>
 8013816:	4603      	mov	r3, r0
 8013818:	461a      	mov	r2, r3
 801381a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801381e:	4413      	add	r3, r2
 8013820:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013824:	e041      	b.n	80138aa <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013828:	685b      	ldr	r3, [r3, #4]
 801382a:	637b      	str	r3, [r7, #52]	; 0x34
 801382c:	e002      	b.n	8013834 <tcp_write+0x23c>
 801382e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	637b      	str	r3, [r7, #52]	; 0x34
 8013834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d1f8      	bne.n	801382e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801383c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801383e:	7b1b      	ldrb	r3, [r3, #12]
 8013840:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013844:	2b00      	cmp	r3, #0
 8013846:	d115      	bne.n	8013874 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801384a:	685b      	ldr	r3, [r3, #4]
 801384c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801384e:	8952      	ldrh	r2, [r2, #10]
 8013850:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013852:	68ba      	ldr	r2, [r7, #8]
 8013854:	429a      	cmp	r2, r3
 8013856:	d10d      	bne.n	8013874 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8013858:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801385c:	2b00      	cmp	r3, #0
 801385e:	d006      	beq.n	801386e <tcp_write+0x276>
 8013860:	4b1c      	ldr	r3, [pc, #112]	; (80138d4 <tcp_write+0x2dc>)
 8013862:	f240 2231 	movw	r2, #561	; 0x231
 8013866:	4922      	ldr	r1, [pc, #136]	; (80138f0 <tcp_write+0x2f8>)
 8013868:	481c      	ldr	r0, [pc, #112]	; (80138dc <tcp_write+0x2e4>)
 801386a:	f007 fa6f 	bl	801ad4c <iprintf>
          extendlen = seglen;
 801386e:	8bfb      	ldrh	r3, [r7, #30]
 8013870:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8013872:	e01a      	b.n	80138aa <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8013874:	8bfb      	ldrh	r3, [r7, #30]
 8013876:	2201      	movs	r2, #1
 8013878:	4619      	mov	r1, r3
 801387a:	2000      	movs	r0, #0
 801387c:	f7fa fdc0 	bl	800e400 <pbuf_alloc>
 8013880:	6578      	str	r0, [r7, #84]	; 0x54
 8013882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013884:	2b00      	cmp	r3, #0
 8013886:	f000 81e0 	beq.w	8013c4a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801388a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801388e:	68ba      	ldr	r2, [r7, #8]
 8013890:	441a      	add	r2, r3
 8013892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013894:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8013896:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013898:	f7fb f956 	bl	800eb48 <pbuf_clen>
 801389c:	4603      	mov	r3, r0
 801389e:	461a      	mov	r2, r3
 80138a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80138a4:	4413      	add	r3, r2
 80138a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80138aa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80138ae:	8bfb      	ldrh	r3, [r7, #30]
 80138b0:	4413      	add	r3, r2
 80138b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80138b6:	e0dc      	b.n	8013a72 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80138be:	2b00      	cmp	r3, #0
 80138c0:	f000 80d7 	beq.w	8013a72 <tcp_write+0x47a>
 80138c4:	4b03      	ldr	r3, [pc, #12]	; (80138d4 <tcp_write+0x2dc>)
 80138c6:	f240 224a 	movw	r2, #586	; 0x24a
 80138ca:	490a      	ldr	r1, [pc, #40]	; (80138f4 <tcp_write+0x2fc>)
 80138cc:	4803      	ldr	r0, [pc, #12]	; (80138dc <tcp_write+0x2e4>)
 80138ce:	f007 fa3d 	bl	801ad4c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80138d2:	e0ce      	b.n	8013a72 <tcp_write+0x47a>
 80138d4:	0801df54 	.word	0x0801df54
 80138d8:	0801e0f4 	.word	0x0801e0f4
 80138dc:	0801dfa8 	.word	0x0801dfa8
 80138e0:	0801e10c 	.word	0x0801e10c
 80138e4:	0801e140 	.word	0x0801e140
 80138e8:	0801e158 	.word	0x0801e158
 80138ec:	0801e178 	.word	0x0801e178
 80138f0:	0801e198 	.word	0x0801e198
 80138f4:	0801e1c4 	.word	0x0801e1c4
    struct pbuf *p;
    u16_t left = len - pos;
 80138f8:	88fa      	ldrh	r2, [r7, #6]
 80138fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80138fe:	1ad3      	subs	r3, r2, r3
 8013900:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8013902:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013906:	b29b      	uxth	r3, r3
 8013908:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801390a:	1ad3      	subs	r3, r2, r3
 801390c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801390e:	8b7a      	ldrh	r2, [r7, #26]
 8013910:	8bbb      	ldrh	r3, [r7, #28]
 8013912:	4293      	cmp	r3, r2
 8013914:	bf28      	it	cs
 8013916:	4613      	movcs	r3, r2
 8013918:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801391a:	797b      	ldrb	r3, [r7, #5]
 801391c:	f003 0301 	and.w	r3, r3, #1
 8013920:	2b00      	cmp	r3, #0
 8013922:	d036      	beq.n	8013992 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013924:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013928:	b29a      	uxth	r2, r3
 801392a:	8b3b      	ldrh	r3, [r7, #24]
 801392c:	4413      	add	r3, r2
 801392e:	b299      	uxth	r1, r3
 8013930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013932:	2b00      	cmp	r3, #0
 8013934:	bf0c      	ite	eq
 8013936:	2301      	moveq	r3, #1
 8013938:	2300      	movne	r3, #0
 801393a:	b2db      	uxtb	r3, r3
 801393c:	f107 0012 	add.w	r0, r7, #18
 8013940:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013942:	9302      	str	r3, [sp, #8]
 8013944:	797b      	ldrb	r3, [r7, #5]
 8013946:	9301      	str	r3, [sp, #4]
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	9300      	str	r3, [sp, #0]
 801394c:	4603      	mov	r3, r0
 801394e:	2036      	movs	r0, #54	; 0x36
 8013950:	f7ff fd5e 	bl	8013410 <tcp_pbuf_prealloc>
 8013954:	6338      	str	r0, [r7, #48]	; 0x30
 8013956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013958:	2b00      	cmp	r3, #0
 801395a:	f000 8178 	beq.w	8013c4e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801395e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013960:	895b      	ldrh	r3, [r3, #10]
 8013962:	8b3a      	ldrh	r2, [r7, #24]
 8013964:	429a      	cmp	r2, r3
 8013966:	d906      	bls.n	8013976 <tcp_write+0x37e>
 8013968:	4b8c      	ldr	r3, [pc, #560]	; (8013b9c <tcp_write+0x5a4>)
 801396a:	f240 2266 	movw	r2, #614	; 0x266
 801396e:	498c      	ldr	r1, [pc, #560]	; (8013ba0 <tcp_write+0x5a8>)
 8013970:	488c      	ldr	r0, [pc, #560]	; (8013ba4 <tcp_write+0x5ac>)
 8013972:	f007 f9eb 	bl	801ad4c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8013976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013978:	685a      	ldr	r2, [r3, #4]
 801397a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801397e:	18d0      	adds	r0, r2, r3
 8013980:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013984:	68ba      	ldr	r2, [r7, #8]
 8013986:	4413      	add	r3, r2
 8013988:	8b3a      	ldrh	r2, [r7, #24]
 801398a:	4619      	mov	r1, r3
 801398c:	f006 fe16 	bl	801a5bc <memcpy>
 8013990:	e02f      	b.n	80139f2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8013992:	8a7b      	ldrh	r3, [r7, #18]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d006      	beq.n	80139a6 <tcp_write+0x3ae>
 8013998:	4b80      	ldr	r3, [pc, #512]	; (8013b9c <tcp_write+0x5a4>)
 801399a:	f240 2271 	movw	r2, #625	; 0x271
 801399e:	4982      	ldr	r1, [pc, #520]	; (8013ba8 <tcp_write+0x5b0>)
 80139a0:	4880      	ldr	r0, [pc, #512]	; (8013ba4 <tcp_write+0x5ac>)
 80139a2:	f007 f9d3 	bl	801ad4c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80139a6:	8b3b      	ldrh	r3, [r7, #24]
 80139a8:	2201      	movs	r2, #1
 80139aa:	4619      	mov	r1, r3
 80139ac:	2036      	movs	r0, #54	; 0x36
 80139ae:	f7fa fd27 	bl	800e400 <pbuf_alloc>
 80139b2:	6178      	str	r0, [r7, #20]
 80139b4:	697b      	ldr	r3, [r7, #20]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	f000 814b 	beq.w	8013c52 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80139bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80139c0:	68ba      	ldr	r2, [r7, #8]
 80139c2:	441a      	add	r2, r3
 80139c4:	697b      	ldr	r3, [r7, #20]
 80139c6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80139c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80139cc:	b29b      	uxth	r3, r3
 80139ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80139d2:	4619      	mov	r1, r3
 80139d4:	2036      	movs	r0, #54	; 0x36
 80139d6:	f7fa fd13 	bl	800e400 <pbuf_alloc>
 80139da:	6338      	str	r0, [r7, #48]	; 0x30
 80139dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d103      	bne.n	80139ea <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80139e2:	6978      	ldr	r0, [r7, #20]
 80139e4:	f7fb f822 	bl	800ea2c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80139e8:	e136      	b.n	8013c58 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80139ea:	6979      	ldr	r1, [r7, #20]
 80139ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139ee:	f7fb f8eb 	bl	800ebc8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80139f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139f4:	f7fb f8a8 	bl	800eb48 <pbuf_clen>
 80139f8:	4603      	mov	r3, r0
 80139fa:	461a      	mov	r2, r3
 80139fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013a00:	4413      	add	r3, r2
 8013a02:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8013a06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013a0a:	2b09      	cmp	r3, #9
 8013a0c:	d903      	bls.n	8013a16 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8013a0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a10:	f7fb f80c 	bl	800ea2c <pbuf_free>
      goto memerr;
 8013a14:	e120      	b.n	8013c58 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013a1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013a1e:	441a      	add	r2, r3
 8013a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a24:	9300      	str	r3, [sp, #0]
 8013a26:	4613      	mov	r3, r2
 8013a28:	2200      	movs	r2, #0
 8013a2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013a2c:	68f8      	ldr	r0, [r7, #12]
 8013a2e:	f7ff fc51 	bl	80132d4 <tcp_create_segment>
 8013a32:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	f000 810d 	beq.w	8013c56 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8013a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d102      	bne.n	8013a48 <tcp_write+0x450>
      queue = seg;
 8013a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a44:	647b      	str	r3, [r7, #68]	; 0x44
 8013a46:	e00c      	b.n	8013a62 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d106      	bne.n	8013a5c <tcp_write+0x464>
 8013a4e:	4b53      	ldr	r3, [pc, #332]	; (8013b9c <tcp_write+0x5a4>)
 8013a50:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013a54:	4955      	ldr	r1, [pc, #340]	; (8013bac <tcp_write+0x5b4>)
 8013a56:	4853      	ldr	r0, [pc, #332]	; (8013ba4 <tcp_write+0x5ac>)
 8013a58:	f007 f978 	bl	801ad4c <iprintf>
      prev_seg->next = seg;
 8013a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013a60:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8013a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a64:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8013a66:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013a6a:	8b3b      	ldrh	r3, [r7, #24]
 8013a6c:	4413      	add	r3, r2
 8013a6e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8013a72:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013a76:	88fb      	ldrh	r3, [r7, #6]
 8013a78:	429a      	cmp	r2, r3
 8013a7a:	f4ff af3d 	bcc.w	80138f8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8013a7e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d02c      	beq.n	8013ade <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8013a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a86:	685b      	ldr	r3, [r3, #4]
 8013a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a8a:	e01e      	b.n	8013aca <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8013a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a8e:	891a      	ldrh	r2, [r3, #8]
 8013a90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013a92:	4413      	add	r3, r2
 8013a94:	b29a      	uxth	r2, r3
 8013a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a98:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8013a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d110      	bne.n	8013ac4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8013aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aa4:	685b      	ldr	r3, [r3, #4]
 8013aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013aa8:	8952      	ldrh	r2, [r2, #10]
 8013aaa:	4413      	add	r3, r2
 8013aac:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013aae:	68b9      	ldr	r1, [r7, #8]
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	f006 fd83 	bl	801a5bc <memcpy>
        p->len += oversize_used;
 8013ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ab8:	895a      	ldrh	r2, [r3, #10]
 8013aba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013abc:	4413      	add	r3, r2
 8013abe:	b29a      	uxth	r2, r3
 8013ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ac2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d1dd      	bne.n	8013a8c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8013ad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ad2:	891a      	ldrh	r2, [r3, #8]
 8013ad4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013ad6:	4413      	add	r3, r2
 8013ad8:	b29a      	uxth	r2, r3
 8013ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013adc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8013ade:	8a7a      	ldrh	r2, [r7, #18]
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8013ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d018      	beq.n	8013b1e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8013aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d106      	bne.n	8013b00 <tcp_write+0x508>
 8013af2:	4b2a      	ldr	r3, [pc, #168]	; (8013b9c <tcp_write+0x5a4>)
 8013af4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8013af8:	492d      	ldr	r1, [pc, #180]	; (8013bb0 <tcp_write+0x5b8>)
 8013afa:	482a      	ldr	r0, [pc, #168]	; (8013ba4 <tcp_write+0x5ac>)
 8013afc:	f007 f926 	bl	801ad4c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8013b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b02:	685b      	ldr	r3, [r3, #4]
 8013b04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013b06:	4618      	mov	r0, r3
 8013b08:	f7fb f85e 	bl	800ebc8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8013b0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b0e:	891a      	ldrh	r2, [r3, #8]
 8013b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b12:	891b      	ldrh	r3, [r3, #8]
 8013b14:	4413      	add	r3, r2
 8013b16:	b29a      	uxth	r2, r3
 8013b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b1a:	811a      	strh	r2, [r3, #8]
 8013b1c:	e037      	b.n	8013b8e <tcp_write+0x596>
  } else if (extendlen > 0) {
 8013b1e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d034      	beq.n	8013b8e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d003      	beq.n	8013b32 <tcp_write+0x53a>
 8013b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b2c:	685b      	ldr	r3, [r3, #4]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d106      	bne.n	8013b40 <tcp_write+0x548>
 8013b32:	4b1a      	ldr	r3, [pc, #104]	; (8013b9c <tcp_write+0x5a4>)
 8013b34:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013b38:	491e      	ldr	r1, [pc, #120]	; (8013bb4 <tcp_write+0x5bc>)
 8013b3a:	481a      	ldr	r0, [pc, #104]	; (8013ba4 <tcp_write+0x5ac>)
 8013b3c:	f007 f906 	bl	801ad4c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b42:	685b      	ldr	r3, [r3, #4]
 8013b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8013b46:	e009      	b.n	8013b5c <tcp_write+0x564>
      p->tot_len += extendlen;
 8013b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b4a:	891a      	ldrh	r2, [r3, #8]
 8013b4c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013b4e:	4413      	add	r3, r2
 8013b50:	b29a      	uxth	r2, r3
 8013b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b54:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8013b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d1f1      	bne.n	8013b48 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8013b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b66:	891a      	ldrh	r2, [r3, #8]
 8013b68:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013b6a:	4413      	add	r3, r2
 8013b6c:	b29a      	uxth	r2, r3
 8013b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b70:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8013b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b74:	895a      	ldrh	r2, [r3, #10]
 8013b76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013b78:	4413      	add	r3, r2
 8013b7a:	b29a      	uxth	r2, r3
 8013b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b7e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8013b80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b82:	891a      	ldrh	r2, [r3, #8]
 8013b84:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013b86:	4413      	add	r3, r2
 8013b88:	b29a      	uxth	r2, r3
 8013b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b8c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8013b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d111      	bne.n	8013bb8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013b98:	66da      	str	r2, [r3, #108]	; 0x6c
 8013b9a:	e010      	b.n	8013bbe <tcp_write+0x5c6>
 8013b9c:	0801df54 	.word	0x0801df54
 8013ba0:	0801e1f4 	.word	0x0801e1f4
 8013ba4:	0801dfa8 	.word	0x0801dfa8
 8013ba8:	0801e234 	.word	0x0801e234
 8013bac:	0801e244 	.word	0x0801e244
 8013bb0:	0801e258 	.word	0x0801e258
 8013bb4:	0801e290 	.word	0x0801e290
  } else {
    last_unsent->next = queue;
 8013bb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013bba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013bbc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013bc2:	88fb      	ldrh	r3, [r7, #6]
 8013bc4:	441a      	add	r2, r3
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013bd0:	88fb      	ldrh	r3, [r7, #6]
 8013bd2:	1ad3      	subs	r3, r2, r3
 8013bd4:	b29a      	uxth	r2, r3
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013be2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d00e      	beq.n	8013c0e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d10a      	bne.n	8013c0e <tcp_write+0x616>
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d106      	bne.n	8013c0e <tcp_write+0x616>
 8013c00:	4b2c      	ldr	r3, [pc, #176]	; (8013cb4 <tcp_write+0x6bc>)
 8013c02:	f240 3212 	movw	r2, #786	; 0x312
 8013c06:	492c      	ldr	r1, [pc, #176]	; (8013cb8 <tcp_write+0x6c0>)
 8013c08:	482c      	ldr	r0, [pc, #176]	; (8013cbc <tcp_write+0x6c4>)
 8013c0a:	f007 f89f 	bl	801ad4c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8013c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d016      	beq.n	8013c42 <tcp_write+0x64a>
 8013c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c16:	68db      	ldr	r3, [r3, #12]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d012      	beq.n	8013c42 <tcp_write+0x64a>
 8013c1c:	797b      	ldrb	r3, [r7, #5]
 8013c1e:	f003 0302 	and.w	r3, r3, #2
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d10d      	bne.n	8013c42 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c28:	68db      	ldr	r3, [r3, #12]
 8013c2a:	899b      	ldrh	r3, [r3, #12]
 8013c2c:	b29c      	uxth	r4, r3
 8013c2e:	2008      	movs	r0, #8
 8013c30:	f7f9 fae6 	bl	800d200 <lwip_htons>
 8013c34:	4603      	mov	r3, r0
 8013c36:	461a      	mov	r2, r3
 8013c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c3a:	68db      	ldr	r3, [r3, #12]
 8013c3c:	4322      	orrs	r2, r4
 8013c3e:	b292      	uxth	r2, r2
 8013c40:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013c42:	2300      	movs	r3, #0
 8013c44:	e031      	b.n	8013caa <tcp_write+0x6b2>
          goto memerr;
 8013c46:	bf00      	nop
 8013c48:	e006      	b.n	8013c58 <tcp_write+0x660>
            goto memerr;
 8013c4a:	bf00      	nop
 8013c4c:	e004      	b.n	8013c58 <tcp_write+0x660>
        goto memerr;
 8013c4e:	bf00      	nop
 8013c50:	e002      	b.n	8013c58 <tcp_write+0x660>
        goto memerr;
 8013c52:	bf00      	nop
 8013c54:	e000      	b.n	8013c58 <tcp_write+0x660>
      goto memerr;
 8013c56:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	8b5b      	ldrh	r3, [r3, #26]
 8013c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c60:	b29a      	uxth	r2, r3
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8013c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d002      	beq.n	8013c72 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8013c6c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013c6e:	f7fa fedd 	bl	800ea2c <pbuf_free>
  }
  if (queue != NULL) {
 8013c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d002      	beq.n	8013c7e <tcp_write+0x686>
    tcp_segs_free(queue);
 8013c78:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013c7a:	f7fc fb6f 	bl	801035c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d00e      	beq.n	8013ca6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d10a      	bne.n	8013ca6 <tcp_write+0x6ae>
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d106      	bne.n	8013ca6 <tcp_write+0x6ae>
 8013c98:	4b06      	ldr	r3, [pc, #24]	; (8013cb4 <tcp_write+0x6bc>)
 8013c9a:	f240 3227 	movw	r2, #807	; 0x327
 8013c9e:	4906      	ldr	r1, [pc, #24]	; (8013cb8 <tcp_write+0x6c0>)
 8013ca0:	4806      	ldr	r0, [pc, #24]	; (8013cbc <tcp_write+0x6c4>)
 8013ca2:	f007 f853 	bl	801ad4c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013ca6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013caa:	4618      	mov	r0, r3
 8013cac:	375c      	adds	r7, #92	; 0x5c
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	bd90      	pop	{r4, r7, pc}
 8013cb2:	bf00      	nop
 8013cb4:	0801df54 	.word	0x0801df54
 8013cb8:	0801e2c8 	.word	0x0801e2c8
 8013cbc:	0801dfa8 	.word	0x0801dfa8

08013cc0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013cc0:	b590      	push	{r4, r7, lr}
 8013cc2:	b08b      	sub	sp, #44	; 0x2c
 8013cc4:	af02      	add	r7, sp, #8
 8013cc6:	6078      	str	r0, [r7, #4]
 8013cc8:	460b      	mov	r3, r1
 8013cca:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013ccc:	2300      	movs	r3, #0
 8013cce:	61fb      	str	r3, [r7, #28]
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d106      	bne.n	8013cec <tcp_split_unsent_seg+0x2c>
 8013cde:	4b95      	ldr	r3, [pc, #596]	; (8013f34 <tcp_split_unsent_seg+0x274>)
 8013ce0:	f240 324b 	movw	r2, #843	; 0x34b
 8013ce4:	4994      	ldr	r1, [pc, #592]	; (8013f38 <tcp_split_unsent_seg+0x278>)
 8013ce6:	4895      	ldr	r0, [pc, #596]	; (8013f3c <tcp_split_unsent_seg+0x27c>)
 8013ce8:	f007 f830 	bl	801ad4c <iprintf>

  useg = pcb->unsent;
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013cf0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013cf2:	697b      	ldr	r3, [r7, #20]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d102      	bne.n	8013cfe <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8013cfc:	e116      	b.n	8013f2c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8013cfe:	887b      	ldrh	r3, [r7, #2]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d109      	bne.n	8013d18 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013d04:	4b8b      	ldr	r3, [pc, #556]	; (8013f34 <tcp_split_unsent_seg+0x274>)
 8013d06:	f240 3253 	movw	r2, #851	; 0x353
 8013d0a:	498d      	ldr	r1, [pc, #564]	; (8013f40 <tcp_split_unsent_seg+0x280>)
 8013d0c:	488b      	ldr	r0, [pc, #556]	; (8013f3c <tcp_split_unsent_seg+0x27c>)
 8013d0e:	f007 f81d 	bl	801ad4c <iprintf>
    return ERR_VAL;
 8013d12:	f06f 0305 	mvn.w	r3, #5
 8013d16:	e109      	b.n	8013f2c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013d18:	697b      	ldr	r3, [r7, #20]
 8013d1a:	891b      	ldrh	r3, [r3, #8]
 8013d1c:	887a      	ldrh	r2, [r7, #2]
 8013d1e:	429a      	cmp	r2, r3
 8013d20:	d301      	bcc.n	8013d26 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013d22:	2300      	movs	r3, #0
 8013d24:	e102      	b.n	8013f2c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d2a:	887a      	ldrh	r2, [r7, #2]
 8013d2c:	429a      	cmp	r2, r3
 8013d2e:	d906      	bls.n	8013d3e <tcp_split_unsent_seg+0x7e>
 8013d30:	4b80      	ldr	r3, [pc, #512]	; (8013f34 <tcp_split_unsent_seg+0x274>)
 8013d32:	f240 325b 	movw	r2, #859	; 0x35b
 8013d36:	4983      	ldr	r1, [pc, #524]	; (8013f44 <tcp_split_unsent_seg+0x284>)
 8013d38:	4880      	ldr	r0, [pc, #512]	; (8013f3c <tcp_split_unsent_seg+0x27c>)
 8013d3a:	f007 f807 	bl	801ad4c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013d3e:	697b      	ldr	r3, [r7, #20]
 8013d40:	891b      	ldrh	r3, [r3, #8]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d106      	bne.n	8013d54 <tcp_split_unsent_seg+0x94>
 8013d46:	4b7b      	ldr	r3, [pc, #492]	; (8013f34 <tcp_split_unsent_seg+0x274>)
 8013d48:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013d4c:	497e      	ldr	r1, [pc, #504]	; (8013f48 <tcp_split_unsent_seg+0x288>)
 8013d4e:	487b      	ldr	r0, [pc, #492]	; (8013f3c <tcp_split_unsent_seg+0x27c>)
 8013d50:	f006 fffc 	bl	801ad4c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013d54:	697b      	ldr	r3, [r7, #20]
 8013d56:	7a9b      	ldrb	r3, [r3, #10]
 8013d58:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013d5a:	7bfb      	ldrb	r3, [r7, #15]
 8013d5c:	009b      	lsls	r3, r3, #2
 8013d5e:	b2db      	uxtb	r3, r3
 8013d60:	f003 0304 	and.w	r3, r3, #4
 8013d64:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013d66:	697b      	ldr	r3, [r7, #20]
 8013d68:	891a      	ldrh	r2, [r3, #8]
 8013d6a:	887b      	ldrh	r3, [r7, #2]
 8013d6c:	1ad3      	subs	r3, r2, r3
 8013d6e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013d70:	7bbb      	ldrb	r3, [r7, #14]
 8013d72:	b29a      	uxth	r2, r3
 8013d74:	89bb      	ldrh	r3, [r7, #12]
 8013d76:	4413      	add	r3, r2
 8013d78:	b29b      	uxth	r3, r3
 8013d7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013d7e:	4619      	mov	r1, r3
 8013d80:	2036      	movs	r0, #54	; 0x36
 8013d82:	f7fa fb3d 	bl	800e400 <pbuf_alloc>
 8013d86:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013d88:	693b      	ldr	r3, [r7, #16]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	f000 80b7 	beq.w	8013efe <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013d90:	697b      	ldr	r3, [r7, #20]
 8013d92:	685b      	ldr	r3, [r3, #4]
 8013d94:	891a      	ldrh	r2, [r3, #8]
 8013d96:	697b      	ldr	r3, [r7, #20]
 8013d98:	891b      	ldrh	r3, [r3, #8]
 8013d9a:	1ad3      	subs	r3, r2, r3
 8013d9c:	b29a      	uxth	r2, r3
 8013d9e:	887b      	ldrh	r3, [r7, #2]
 8013da0:	4413      	add	r3, r2
 8013da2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013da4:	697b      	ldr	r3, [r7, #20]
 8013da6:	6858      	ldr	r0, [r3, #4]
 8013da8:	693b      	ldr	r3, [r7, #16]
 8013daa:	685a      	ldr	r2, [r3, #4]
 8013dac:	7bbb      	ldrb	r3, [r7, #14]
 8013dae:	18d1      	adds	r1, r2, r3
 8013db0:	897b      	ldrh	r3, [r7, #10]
 8013db2:	89ba      	ldrh	r2, [r7, #12]
 8013db4:	f7fb f840 	bl	800ee38 <pbuf_copy_partial>
 8013db8:	4603      	mov	r3, r0
 8013dba:	461a      	mov	r2, r3
 8013dbc:	89bb      	ldrh	r3, [r7, #12]
 8013dbe:	4293      	cmp	r3, r2
 8013dc0:	f040 809f 	bne.w	8013f02 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013dc4:	697b      	ldr	r3, [r7, #20]
 8013dc6:	68db      	ldr	r3, [r3, #12]
 8013dc8:	899b      	ldrh	r3, [r3, #12]
 8013dca:	b29b      	uxth	r3, r3
 8013dcc:	4618      	mov	r0, r3
 8013dce:	f7f9 fa17 	bl	800d200 <lwip_htons>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	b2db      	uxtb	r3, r3
 8013dd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013dda:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013ddc:	2300      	movs	r3, #0
 8013dde:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013de0:	7efb      	ldrb	r3, [r7, #27]
 8013de2:	f003 0308 	and.w	r3, r3, #8
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d007      	beq.n	8013dfa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013dea:	7efb      	ldrb	r3, [r7, #27]
 8013dec:	f023 0308 	bic.w	r3, r3, #8
 8013df0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013df2:	7ebb      	ldrb	r3, [r7, #26]
 8013df4:	f043 0308 	orr.w	r3, r3, #8
 8013df8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013dfa:	7efb      	ldrb	r3, [r7, #27]
 8013dfc:	f003 0301 	and.w	r3, r3, #1
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d007      	beq.n	8013e14 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013e04:	7efb      	ldrb	r3, [r7, #27]
 8013e06:	f023 0301 	bic.w	r3, r3, #1
 8013e0a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013e0c:	7ebb      	ldrb	r3, [r7, #26]
 8013e0e:	f043 0301 	orr.w	r3, r3, #1
 8013e12:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013e14:	697b      	ldr	r3, [r7, #20]
 8013e16:	68db      	ldr	r3, [r3, #12]
 8013e18:	685b      	ldr	r3, [r3, #4]
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	f7f9 fa05 	bl	800d22a <lwip_htonl>
 8013e20:	4602      	mov	r2, r0
 8013e22:	887b      	ldrh	r3, [r7, #2]
 8013e24:	18d1      	adds	r1, r2, r3
 8013e26:	7eba      	ldrb	r2, [r7, #26]
 8013e28:	7bfb      	ldrb	r3, [r7, #15]
 8013e2a:	9300      	str	r3, [sp, #0]
 8013e2c:	460b      	mov	r3, r1
 8013e2e:	6939      	ldr	r1, [r7, #16]
 8013e30:	6878      	ldr	r0, [r7, #4]
 8013e32:	f7ff fa4f 	bl	80132d4 <tcp_create_segment>
 8013e36:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013e38:	69fb      	ldr	r3, [r7, #28]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d063      	beq.n	8013f06 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013e3e:	697b      	ldr	r3, [r7, #20]
 8013e40:	685b      	ldr	r3, [r3, #4]
 8013e42:	4618      	mov	r0, r3
 8013e44:	f7fa fe80 	bl	800eb48 <pbuf_clen>
 8013e48:	4603      	mov	r3, r0
 8013e4a:	461a      	mov	r2, r3
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013e52:	1a9b      	subs	r3, r3, r2
 8013e54:	b29a      	uxth	r2, r3
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013e5c:	697b      	ldr	r3, [r7, #20]
 8013e5e:	6858      	ldr	r0, [r3, #4]
 8013e60:	697b      	ldr	r3, [r7, #20]
 8013e62:	685b      	ldr	r3, [r3, #4]
 8013e64:	891a      	ldrh	r2, [r3, #8]
 8013e66:	89bb      	ldrh	r3, [r7, #12]
 8013e68:	1ad3      	subs	r3, r2, r3
 8013e6a:	b29b      	uxth	r3, r3
 8013e6c:	4619      	mov	r1, r3
 8013e6e:	f7fa fc25 	bl	800e6bc <pbuf_realloc>
  useg->len -= remainder;
 8013e72:	697b      	ldr	r3, [r7, #20]
 8013e74:	891a      	ldrh	r2, [r3, #8]
 8013e76:	89bb      	ldrh	r3, [r7, #12]
 8013e78:	1ad3      	subs	r3, r2, r3
 8013e7a:	b29a      	uxth	r2, r3
 8013e7c:	697b      	ldr	r3, [r7, #20]
 8013e7e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013e80:	697b      	ldr	r3, [r7, #20]
 8013e82:	68db      	ldr	r3, [r3, #12]
 8013e84:	899b      	ldrh	r3, [r3, #12]
 8013e86:	b29c      	uxth	r4, r3
 8013e88:	7efb      	ldrb	r3, [r7, #27]
 8013e8a:	b29b      	uxth	r3, r3
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	f7f9 f9b7 	bl	800d200 <lwip_htons>
 8013e92:	4603      	mov	r3, r0
 8013e94:	461a      	mov	r2, r3
 8013e96:	697b      	ldr	r3, [r7, #20]
 8013e98:	68db      	ldr	r3, [r3, #12]
 8013e9a:	4322      	orrs	r2, r4
 8013e9c:	b292      	uxth	r2, r2
 8013e9e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013ea0:	697b      	ldr	r3, [r7, #20]
 8013ea2:	685b      	ldr	r3, [r3, #4]
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	f7fa fe4f 	bl	800eb48 <pbuf_clen>
 8013eaa:	4603      	mov	r3, r0
 8013eac:	461a      	mov	r2, r3
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013eb4:	4413      	add	r3, r2
 8013eb6:	b29a      	uxth	r2, r3
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013ebe:	69fb      	ldr	r3, [r7, #28]
 8013ec0:	685b      	ldr	r3, [r3, #4]
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	f7fa fe40 	bl	800eb48 <pbuf_clen>
 8013ec8:	4603      	mov	r3, r0
 8013eca:	461a      	mov	r2, r3
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ed2:	4413      	add	r3, r2
 8013ed4:	b29a      	uxth	r2, r3
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013edc:	697b      	ldr	r3, [r7, #20]
 8013ede:	681a      	ldr	r2, [r3, #0]
 8013ee0:	69fb      	ldr	r3, [r7, #28]
 8013ee2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013ee4:	697b      	ldr	r3, [r7, #20]
 8013ee6:	69fa      	ldr	r2, [r7, #28]
 8013ee8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013eea:	69fb      	ldr	r3, [r7, #28]
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d103      	bne.n	8013efa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	2200      	movs	r2, #0
 8013ef6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013efa:	2300      	movs	r3, #0
 8013efc:	e016      	b.n	8013f2c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013efe:	bf00      	nop
 8013f00:	e002      	b.n	8013f08 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013f02:	bf00      	nop
 8013f04:	e000      	b.n	8013f08 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013f06:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013f08:	69fb      	ldr	r3, [r7, #28]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d006      	beq.n	8013f1c <tcp_split_unsent_seg+0x25c>
 8013f0e:	4b09      	ldr	r3, [pc, #36]	; (8013f34 <tcp_split_unsent_seg+0x274>)
 8013f10:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013f14:	490d      	ldr	r1, [pc, #52]	; (8013f4c <tcp_split_unsent_seg+0x28c>)
 8013f16:	4809      	ldr	r0, [pc, #36]	; (8013f3c <tcp_split_unsent_seg+0x27c>)
 8013f18:	f006 ff18 	bl	801ad4c <iprintf>
  if (p != NULL) {
 8013f1c:	693b      	ldr	r3, [r7, #16]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d002      	beq.n	8013f28 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013f22:	6938      	ldr	r0, [r7, #16]
 8013f24:	f7fa fd82 	bl	800ea2c <pbuf_free>
  }

  return ERR_MEM;
 8013f28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	3724      	adds	r7, #36	; 0x24
 8013f30:	46bd      	mov	sp, r7
 8013f32:	bd90      	pop	{r4, r7, pc}
 8013f34:	0801df54 	.word	0x0801df54
 8013f38:	0801e2e8 	.word	0x0801e2e8
 8013f3c:	0801dfa8 	.word	0x0801dfa8
 8013f40:	0801e30c 	.word	0x0801e30c
 8013f44:	0801e330 	.word	0x0801e330
 8013f48:	0801e340 	.word	0x0801e340
 8013f4c:	0801e350 	.word	0x0801e350

08013f50 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013f50:	b590      	push	{r4, r7, lr}
 8013f52:	b085      	sub	sp, #20
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d106      	bne.n	8013f6c <tcp_send_fin+0x1c>
 8013f5e:	4b21      	ldr	r3, [pc, #132]	; (8013fe4 <tcp_send_fin+0x94>)
 8013f60:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013f64:	4920      	ldr	r1, [pc, #128]	; (8013fe8 <tcp_send_fin+0x98>)
 8013f66:	4821      	ldr	r0, [pc, #132]	; (8013fec <tcp_send_fin+0x9c>)
 8013f68:	f006 fef0 	bl	801ad4c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d02e      	beq.n	8013fd2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f78:	60fb      	str	r3, [r7, #12]
 8013f7a:	e002      	b.n	8013f82 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d1f8      	bne.n	8013f7c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	68db      	ldr	r3, [r3, #12]
 8013f8e:	899b      	ldrh	r3, [r3, #12]
 8013f90:	b29b      	uxth	r3, r3
 8013f92:	4618      	mov	r0, r3
 8013f94:	f7f9 f934 	bl	800d200 <lwip_htons>
 8013f98:	4603      	mov	r3, r0
 8013f9a:	b2db      	uxtb	r3, r3
 8013f9c:	f003 0307 	and.w	r3, r3, #7
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d116      	bne.n	8013fd2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	68db      	ldr	r3, [r3, #12]
 8013fa8:	899b      	ldrh	r3, [r3, #12]
 8013faa:	b29c      	uxth	r4, r3
 8013fac:	2001      	movs	r0, #1
 8013fae:	f7f9 f927 	bl	800d200 <lwip_htons>
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	461a      	mov	r2, r3
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	68db      	ldr	r3, [r3, #12]
 8013fba:	4322      	orrs	r2, r4
 8013fbc:	b292      	uxth	r2, r2
 8013fbe:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	8b5b      	ldrh	r3, [r3, #26]
 8013fc4:	f043 0320 	orr.w	r3, r3, #32
 8013fc8:	b29a      	uxth	r2, r3
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013fce:	2300      	movs	r3, #0
 8013fd0:	e004      	b.n	8013fdc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013fd2:	2101      	movs	r1, #1
 8013fd4:	6878      	ldr	r0, [r7, #4]
 8013fd6:	f000 f80b 	bl	8013ff0 <tcp_enqueue_flags>
 8013fda:	4603      	mov	r3, r0
}
 8013fdc:	4618      	mov	r0, r3
 8013fde:	3714      	adds	r7, #20
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd90      	pop	{r4, r7, pc}
 8013fe4:	0801df54 	.word	0x0801df54
 8013fe8:	0801e35c 	.word	0x0801e35c
 8013fec:	0801dfa8 	.word	0x0801dfa8

08013ff0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b08a      	sub	sp, #40	; 0x28
 8013ff4:	af02      	add	r7, sp, #8
 8013ff6:	6078      	str	r0, [r7, #4]
 8013ff8:	460b      	mov	r3, r1
 8013ffa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8014000:	2300      	movs	r3, #0
 8014002:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014004:	78fb      	ldrb	r3, [r7, #3]
 8014006:	f003 0303 	and.w	r3, r3, #3
 801400a:	2b00      	cmp	r3, #0
 801400c:	d106      	bne.n	801401c <tcp_enqueue_flags+0x2c>
 801400e:	4b67      	ldr	r3, [pc, #412]	; (80141ac <tcp_enqueue_flags+0x1bc>)
 8014010:	f240 4211 	movw	r2, #1041	; 0x411
 8014014:	4966      	ldr	r1, [pc, #408]	; (80141b0 <tcp_enqueue_flags+0x1c0>)
 8014016:	4867      	ldr	r0, [pc, #412]	; (80141b4 <tcp_enqueue_flags+0x1c4>)
 8014018:	f006 fe98 	bl	801ad4c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d106      	bne.n	8014030 <tcp_enqueue_flags+0x40>
 8014022:	4b62      	ldr	r3, [pc, #392]	; (80141ac <tcp_enqueue_flags+0x1bc>)
 8014024:	f240 4213 	movw	r2, #1043	; 0x413
 8014028:	4963      	ldr	r1, [pc, #396]	; (80141b8 <tcp_enqueue_flags+0x1c8>)
 801402a:	4862      	ldr	r0, [pc, #392]	; (80141b4 <tcp_enqueue_flags+0x1c4>)
 801402c:	f006 fe8e 	bl	801ad4c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014030:	78fb      	ldrb	r3, [r7, #3]
 8014032:	f003 0302 	and.w	r3, r3, #2
 8014036:	2b00      	cmp	r3, #0
 8014038:	d001      	beq.n	801403e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801403a:	2301      	movs	r3, #1
 801403c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801403e:	7ffb      	ldrb	r3, [r7, #31]
 8014040:	009b      	lsls	r3, r3, #2
 8014042:	b2db      	uxtb	r3, r3
 8014044:	f003 0304 	and.w	r3, r3, #4
 8014048:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801404a:	7dfb      	ldrb	r3, [r7, #23]
 801404c:	b29b      	uxth	r3, r3
 801404e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014052:	4619      	mov	r1, r3
 8014054:	2036      	movs	r0, #54	; 0x36
 8014056:	f7fa f9d3 	bl	800e400 <pbuf_alloc>
 801405a:	6138      	str	r0, [r7, #16]
 801405c:	693b      	ldr	r3, [r7, #16]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d109      	bne.n	8014076 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	8b5b      	ldrh	r3, [r3, #26]
 8014066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801406a:	b29a      	uxth	r2, r3
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014070:	f04f 33ff 	mov.w	r3, #4294967295
 8014074:	e095      	b.n	80141a2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014076:	693b      	ldr	r3, [r7, #16]
 8014078:	895a      	ldrh	r2, [r3, #10]
 801407a:	7dfb      	ldrb	r3, [r7, #23]
 801407c:	b29b      	uxth	r3, r3
 801407e:	429a      	cmp	r2, r3
 8014080:	d206      	bcs.n	8014090 <tcp_enqueue_flags+0xa0>
 8014082:	4b4a      	ldr	r3, [pc, #296]	; (80141ac <tcp_enqueue_flags+0x1bc>)
 8014084:	f240 4239 	movw	r2, #1081	; 0x439
 8014088:	494c      	ldr	r1, [pc, #304]	; (80141bc <tcp_enqueue_flags+0x1cc>)
 801408a:	484a      	ldr	r0, [pc, #296]	; (80141b4 <tcp_enqueue_flags+0x1c4>)
 801408c:	f006 fe5e 	bl	801ad4c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8014094:	78fa      	ldrb	r2, [r7, #3]
 8014096:	7ffb      	ldrb	r3, [r7, #31]
 8014098:	9300      	str	r3, [sp, #0]
 801409a:	460b      	mov	r3, r1
 801409c:	6939      	ldr	r1, [r7, #16]
 801409e:	6878      	ldr	r0, [r7, #4]
 80140a0:	f7ff f918 	bl	80132d4 <tcp_create_segment>
 80140a4:	60f8      	str	r0, [r7, #12]
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d109      	bne.n	80140c0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	8b5b      	ldrh	r3, [r3, #26]
 80140b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80140b4:	b29a      	uxth	r2, r3
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80140ba:	f04f 33ff 	mov.w	r3, #4294967295
 80140be:	e070      	b.n	80141a2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	68db      	ldr	r3, [r3, #12]
 80140c4:	f003 0303 	and.w	r3, r3, #3
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d006      	beq.n	80140da <tcp_enqueue_flags+0xea>
 80140cc:	4b37      	ldr	r3, [pc, #220]	; (80141ac <tcp_enqueue_flags+0x1bc>)
 80140ce:	f240 4242 	movw	r2, #1090	; 0x442
 80140d2:	493b      	ldr	r1, [pc, #236]	; (80141c0 <tcp_enqueue_flags+0x1d0>)
 80140d4:	4837      	ldr	r0, [pc, #220]	; (80141b4 <tcp_enqueue_flags+0x1c4>)
 80140d6:	f006 fe39 	bl	801ad4c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	891b      	ldrh	r3, [r3, #8]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d006      	beq.n	80140f0 <tcp_enqueue_flags+0x100>
 80140e2:	4b32      	ldr	r3, [pc, #200]	; (80141ac <tcp_enqueue_flags+0x1bc>)
 80140e4:	f240 4243 	movw	r2, #1091	; 0x443
 80140e8:	4936      	ldr	r1, [pc, #216]	; (80141c4 <tcp_enqueue_flags+0x1d4>)
 80140ea:	4832      	ldr	r0, [pc, #200]	; (80141b4 <tcp_enqueue_flags+0x1c4>)
 80140ec:	f006 fe2e 	bl	801ad4c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d103      	bne.n	8014100 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	68fa      	ldr	r2, [r7, #12]
 80140fc:	66da      	str	r2, [r3, #108]	; 0x6c
 80140fe:	e00d      	b.n	801411c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014104:	61bb      	str	r3, [r7, #24]
 8014106:	e002      	b.n	801410e <tcp_enqueue_flags+0x11e>
 8014108:	69bb      	ldr	r3, [r7, #24]
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	61bb      	str	r3, [r7, #24]
 801410e:	69bb      	ldr	r3, [r7, #24]
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d1f8      	bne.n	8014108 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014116:	69bb      	ldr	r3, [r7, #24]
 8014118:	68fa      	ldr	r2, [r7, #12]
 801411a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	2200      	movs	r2, #0
 8014120:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014124:	78fb      	ldrb	r3, [r7, #3]
 8014126:	f003 0302 	and.w	r3, r3, #2
 801412a:	2b00      	cmp	r3, #0
 801412c:	d104      	bne.n	8014138 <tcp_enqueue_flags+0x148>
 801412e:	78fb      	ldrb	r3, [r7, #3]
 8014130:	f003 0301 	and.w	r3, r3, #1
 8014134:	2b00      	cmp	r3, #0
 8014136:	d004      	beq.n	8014142 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801413c:	1c5a      	adds	r2, r3, #1
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014142:	78fb      	ldrb	r3, [r7, #3]
 8014144:	f003 0301 	and.w	r3, r3, #1
 8014148:	2b00      	cmp	r3, #0
 801414a:	d006      	beq.n	801415a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	8b5b      	ldrh	r3, [r3, #26]
 8014150:	f043 0320 	orr.w	r3, r3, #32
 8014154:	b29a      	uxth	r2, r3
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	685b      	ldr	r3, [r3, #4]
 801415e:	4618      	mov	r0, r3
 8014160:	f7fa fcf2 	bl	800eb48 <pbuf_clen>
 8014164:	4603      	mov	r3, r0
 8014166:	461a      	mov	r2, r3
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801416e:	4413      	add	r3, r2
 8014170:	b29a      	uxth	r2, r3
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801417e:	2b00      	cmp	r3, #0
 8014180:	d00e      	beq.n	80141a0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014186:	2b00      	cmp	r3, #0
 8014188:	d10a      	bne.n	80141a0 <tcp_enqueue_flags+0x1b0>
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801418e:	2b00      	cmp	r3, #0
 8014190:	d106      	bne.n	80141a0 <tcp_enqueue_flags+0x1b0>
 8014192:	4b06      	ldr	r3, [pc, #24]	; (80141ac <tcp_enqueue_flags+0x1bc>)
 8014194:	f240 4265 	movw	r2, #1125	; 0x465
 8014198:	490b      	ldr	r1, [pc, #44]	; (80141c8 <tcp_enqueue_flags+0x1d8>)
 801419a:	4806      	ldr	r0, [pc, #24]	; (80141b4 <tcp_enqueue_flags+0x1c4>)
 801419c:	f006 fdd6 	bl	801ad4c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80141a0:	2300      	movs	r3, #0
}
 80141a2:	4618      	mov	r0, r3
 80141a4:	3720      	adds	r7, #32
 80141a6:	46bd      	mov	sp, r7
 80141a8:	bd80      	pop	{r7, pc}
 80141aa:	bf00      	nop
 80141ac:	0801df54 	.word	0x0801df54
 80141b0:	0801e378 	.word	0x0801e378
 80141b4:	0801dfa8 	.word	0x0801dfa8
 80141b8:	0801e3d0 	.word	0x0801e3d0
 80141bc:	0801e3f0 	.word	0x0801e3f0
 80141c0:	0801e42c 	.word	0x0801e42c
 80141c4:	0801e444 	.word	0x0801e444
 80141c8:	0801e470 	.word	0x0801e470

080141cc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80141cc:	b5b0      	push	{r4, r5, r7, lr}
 80141ce:	b08a      	sub	sp, #40	; 0x28
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d106      	bne.n	80141e8 <tcp_output+0x1c>
 80141da:	4b9e      	ldr	r3, [pc, #632]	; (8014454 <tcp_output+0x288>)
 80141dc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80141e0:	499d      	ldr	r1, [pc, #628]	; (8014458 <tcp_output+0x28c>)
 80141e2:	489e      	ldr	r0, [pc, #632]	; (801445c <tcp_output+0x290>)
 80141e4:	f006 fdb2 	bl	801ad4c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	7d1b      	ldrb	r3, [r3, #20]
 80141ec:	2b01      	cmp	r3, #1
 80141ee:	d106      	bne.n	80141fe <tcp_output+0x32>
 80141f0:	4b98      	ldr	r3, [pc, #608]	; (8014454 <tcp_output+0x288>)
 80141f2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80141f6:	499a      	ldr	r1, [pc, #616]	; (8014460 <tcp_output+0x294>)
 80141f8:	4898      	ldr	r0, [pc, #608]	; (801445c <tcp_output+0x290>)
 80141fa:	f006 fda7 	bl	801ad4c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80141fe:	4b99      	ldr	r3, [pc, #612]	; (8014464 <tcp_output+0x298>)
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	687a      	ldr	r2, [r7, #4]
 8014204:	429a      	cmp	r2, r3
 8014206:	d101      	bne.n	801420c <tcp_output+0x40>
    return ERR_OK;
 8014208:	2300      	movs	r3, #0
 801420a:	e1ce      	b.n	80145aa <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014218:	4293      	cmp	r3, r2
 801421a:	bf28      	it	cs
 801421c:	4613      	movcs	r3, r2
 801421e:	b29b      	uxth	r3, r3
 8014220:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014226:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8014228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801422a:	2b00      	cmp	r3, #0
 801422c:	d10b      	bne.n	8014246 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	8b5b      	ldrh	r3, [r3, #26]
 8014232:	f003 0302 	and.w	r3, r3, #2
 8014236:	2b00      	cmp	r3, #0
 8014238:	f000 81aa 	beq.w	8014590 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801423c:	6878      	ldr	r0, [r7, #4]
 801423e:	f000 fdcb 	bl	8014dd8 <tcp_send_empty_ack>
 8014242:	4603      	mov	r3, r0
 8014244:	e1b1      	b.n	80145aa <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014246:	6879      	ldr	r1, [r7, #4]
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	3304      	adds	r3, #4
 801424c:	461a      	mov	r2, r3
 801424e:	6878      	ldr	r0, [r7, #4]
 8014250:	f7ff f824 	bl	801329c <tcp_route>
 8014254:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014256:	697b      	ldr	r3, [r7, #20]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d102      	bne.n	8014262 <tcp_output+0x96>
    return ERR_RTE;
 801425c:	f06f 0303 	mvn.w	r3, #3
 8014260:	e1a3      	b.n	80145aa <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d003      	beq.n	8014270 <tcp_output+0xa4>
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d111      	bne.n	8014294 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014270:	697b      	ldr	r3, [r7, #20]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d002      	beq.n	801427c <tcp_output+0xb0>
 8014276:	697b      	ldr	r3, [r7, #20]
 8014278:	3304      	adds	r3, #4
 801427a:	e000      	b.n	801427e <tcp_output+0xb2>
 801427c:	2300      	movs	r3, #0
 801427e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014280:	693b      	ldr	r3, [r7, #16]
 8014282:	2b00      	cmp	r3, #0
 8014284:	d102      	bne.n	801428c <tcp_output+0xc0>
      return ERR_RTE;
 8014286:	f06f 0303 	mvn.w	r3, #3
 801428a:	e18e      	b.n	80145aa <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801428c:	693b      	ldr	r3, [r7, #16]
 801428e:	681a      	ldr	r2, [r3, #0]
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014296:	68db      	ldr	r3, [r3, #12]
 8014298:	685b      	ldr	r3, [r3, #4]
 801429a:	4618      	mov	r0, r3
 801429c:	f7f8 ffc5 	bl	800d22a <lwip_htonl>
 80142a0:	4602      	mov	r2, r0
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142a6:	1ad3      	subs	r3, r2, r3
 80142a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142aa:	8912      	ldrh	r2, [r2, #8]
 80142ac:	4413      	add	r3, r2
 80142ae:	69ba      	ldr	r2, [r7, #24]
 80142b0:	429a      	cmp	r2, r3
 80142b2:	d227      	bcs.n	8014304 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80142ba:	461a      	mov	r2, r3
 80142bc:	69bb      	ldr	r3, [r7, #24]
 80142be:	4293      	cmp	r3, r2
 80142c0:	d114      	bne.n	80142ec <tcp_output+0x120>
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d110      	bne.n	80142ec <tcp_output+0x120>
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d10b      	bne.n	80142ec <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	2200      	movs	r2, #0
 80142d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	2201      	movs	r2, #1
 80142e0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	2200      	movs	r2, #0
 80142e8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	8b5b      	ldrh	r3, [r3, #26]
 80142f0:	f003 0302 	and.w	r3, r3, #2
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	f000 814d 	beq.w	8014594 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80142fa:	6878      	ldr	r0, [r7, #4]
 80142fc:	f000 fd6c 	bl	8014dd8 <tcp_send_empty_ack>
 8014300:	4603      	mov	r3, r0
 8014302:	e152      	b.n	80145aa <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	2200      	movs	r2, #0
 8014308:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014310:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014312:	6a3b      	ldr	r3, [r7, #32]
 8014314:	2b00      	cmp	r3, #0
 8014316:	f000 811c 	beq.w	8014552 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801431a:	e002      	b.n	8014322 <tcp_output+0x156>
 801431c:	6a3b      	ldr	r3, [r7, #32]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	623b      	str	r3, [r7, #32]
 8014322:	6a3b      	ldr	r3, [r7, #32]
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d1f8      	bne.n	801431c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801432a:	e112      	b.n	8014552 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801432e:	68db      	ldr	r3, [r3, #12]
 8014330:	899b      	ldrh	r3, [r3, #12]
 8014332:	b29b      	uxth	r3, r3
 8014334:	4618      	mov	r0, r3
 8014336:	f7f8 ff63 	bl	800d200 <lwip_htons>
 801433a:	4603      	mov	r3, r0
 801433c:	b2db      	uxtb	r3, r3
 801433e:	f003 0304 	and.w	r3, r3, #4
 8014342:	2b00      	cmp	r3, #0
 8014344:	d006      	beq.n	8014354 <tcp_output+0x188>
 8014346:	4b43      	ldr	r3, [pc, #268]	; (8014454 <tcp_output+0x288>)
 8014348:	f240 5236 	movw	r2, #1334	; 0x536
 801434c:	4946      	ldr	r1, [pc, #280]	; (8014468 <tcp_output+0x29c>)
 801434e:	4843      	ldr	r0, [pc, #268]	; (801445c <tcp_output+0x290>)
 8014350:	f006 fcfc 	bl	801ad4c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014358:	2b00      	cmp	r3, #0
 801435a:	d01f      	beq.n	801439c <tcp_output+0x1d0>
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	8b5b      	ldrh	r3, [r3, #26]
 8014360:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014364:	2b00      	cmp	r3, #0
 8014366:	d119      	bne.n	801439c <tcp_output+0x1d0>
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801436c:	2b00      	cmp	r3, #0
 801436e:	d00b      	beq.n	8014388 <tcp_output+0x1bc>
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d110      	bne.n	801439c <tcp_output+0x1d0>
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801437e:	891a      	ldrh	r2, [r3, #8]
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014384:	429a      	cmp	r2, r3
 8014386:	d209      	bcs.n	801439c <tcp_output+0x1d0>
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801438e:	2b00      	cmp	r3, #0
 8014390:	d004      	beq.n	801439c <tcp_output+0x1d0>
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014398:	2b08      	cmp	r3, #8
 801439a:	d901      	bls.n	80143a0 <tcp_output+0x1d4>
 801439c:	2301      	movs	r3, #1
 801439e:	e000      	b.n	80143a2 <tcp_output+0x1d6>
 80143a0:	2300      	movs	r3, #0
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d106      	bne.n	80143b4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	8b5b      	ldrh	r3, [r3, #26]
 80143aa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	f000 80e4 	beq.w	801457c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	7d1b      	ldrb	r3, [r3, #20]
 80143b8:	2b02      	cmp	r3, #2
 80143ba:	d00d      	beq.n	80143d8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80143bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143be:	68db      	ldr	r3, [r3, #12]
 80143c0:	899b      	ldrh	r3, [r3, #12]
 80143c2:	b29c      	uxth	r4, r3
 80143c4:	2010      	movs	r0, #16
 80143c6:	f7f8 ff1b 	bl	800d200 <lwip_htons>
 80143ca:	4603      	mov	r3, r0
 80143cc:	461a      	mov	r2, r3
 80143ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143d0:	68db      	ldr	r3, [r3, #12]
 80143d2:	4322      	orrs	r2, r4
 80143d4:	b292      	uxth	r2, r2
 80143d6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80143d8:	697a      	ldr	r2, [r7, #20]
 80143da:	6879      	ldr	r1, [r7, #4]
 80143dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80143de:	f000 f909 	bl	80145f4 <tcp_output_segment>
 80143e2:	4603      	mov	r3, r0
 80143e4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80143e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d009      	beq.n	8014402 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	8b5b      	ldrh	r3, [r3, #26]
 80143f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80143f6:	b29a      	uxth	r2, r3
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	835a      	strh	r2, [r3, #26]
      return err;
 80143fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014400:	e0d3      	b.n	80145aa <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8014402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014404:	681a      	ldr	r2, [r3, #0]
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	7d1b      	ldrb	r3, [r3, #20]
 801440e:	2b02      	cmp	r3, #2
 8014410:	d006      	beq.n	8014420 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	8b5b      	ldrh	r3, [r3, #26]
 8014416:	f023 0303 	bic.w	r3, r3, #3
 801441a:	b29a      	uxth	r2, r3
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014422:	68db      	ldr	r3, [r3, #12]
 8014424:	685b      	ldr	r3, [r3, #4]
 8014426:	4618      	mov	r0, r3
 8014428:	f7f8 feff 	bl	800d22a <lwip_htonl>
 801442c:	4604      	mov	r4, r0
 801442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014430:	891b      	ldrh	r3, [r3, #8]
 8014432:	461d      	mov	r5, r3
 8014434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014436:	68db      	ldr	r3, [r3, #12]
 8014438:	899b      	ldrh	r3, [r3, #12]
 801443a:	b29b      	uxth	r3, r3
 801443c:	4618      	mov	r0, r3
 801443e:	f7f8 fedf 	bl	800d200 <lwip_htons>
 8014442:	4603      	mov	r3, r0
 8014444:	b2db      	uxtb	r3, r3
 8014446:	f003 0303 	and.w	r3, r3, #3
 801444a:	2b00      	cmp	r3, #0
 801444c:	d00e      	beq.n	801446c <tcp_output+0x2a0>
 801444e:	2301      	movs	r3, #1
 8014450:	e00d      	b.n	801446e <tcp_output+0x2a2>
 8014452:	bf00      	nop
 8014454:	0801df54 	.word	0x0801df54
 8014458:	0801e498 	.word	0x0801e498
 801445c:	0801dfa8 	.word	0x0801dfa8
 8014460:	0801e4b0 	.word	0x0801e4b0
 8014464:	200120b4 	.word	0x200120b4
 8014468:	0801e4d8 	.word	0x0801e4d8
 801446c:	2300      	movs	r3, #0
 801446e:	442b      	add	r3, r5
 8014470:	4423      	add	r3, r4
 8014472:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014478:	68bb      	ldr	r3, [r7, #8]
 801447a:	1ad3      	subs	r3, r2, r3
 801447c:	2b00      	cmp	r3, #0
 801447e:	da02      	bge.n	8014486 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	68ba      	ldr	r2, [r7, #8]
 8014484:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014488:	891b      	ldrh	r3, [r3, #8]
 801448a:	461c      	mov	r4, r3
 801448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801448e:	68db      	ldr	r3, [r3, #12]
 8014490:	899b      	ldrh	r3, [r3, #12]
 8014492:	b29b      	uxth	r3, r3
 8014494:	4618      	mov	r0, r3
 8014496:	f7f8 feb3 	bl	800d200 <lwip_htons>
 801449a:	4603      	mov	r3, r0
 801449c:	b2db      	uxtb	r3, r3
 801449e:	f003 0303 	and.w	r3, r3, #3
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d001      	beq.n	80144aa <tcp_output+0x2de>
 80144a6:	2301      	movs	r3, #1
 80144a8:	e000      	b.n	80144ac <tcp_output+0x2e0>
 80144aa:	2300      	movs	r3, #0
 80144ac:	4423      	add	r3, r4
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d049      	beq.n	8014546 <tcp_output+0x37a>
      seg->next = NULL;
 80144b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144b4:	2200      	movs	r2, #0
 80144b6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d105      	bne.n	80144cc <tcp_output+0x300>
        pcb->unacked = seg;
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144c4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80144c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144c8:	623b      	str	r3, [r7, #32]
 80144ca:	e03f      	b.n	801454c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80144cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144ce:	68db      	ldr	r3, [r3, #12]
 80144d0:	685b      	ldr	r3, [r3, #4]
 80144d2:	4618      	mov	r0, r3
 80144d4:	f7f8 fea9 	bl	800d22a <lwip_htonl>
 80144d8:	4604      	mov	r4, r0
 80144da:	6a3b      	ldr	r3, [r7, #32]
 80144dc:	68db      	ldr	r3, [r3, #12]
 80144de:	685b      	ldr	r3, [r3, #4]
 80144e0:	4618      	mov	r0, r3
 80144e2:	f7f8 fea2 	bl	800d22a <lwip_htonl>
 80144e6:	4603      	mov	r3, r0
 80144e8:	1ae3      	subs	r3, r4, r3
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	da24      	bge.n	8014538 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	3370      	adds	r3, #112	; 0x70
 80144f2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80144f4:	e002      	b.n	80144fc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80144f6:	69fb      	ldr	r3, [r7, #28]
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80144fc:	69fb      	ldr	r3, [r7, #28]
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d011      	beq.n	8014528 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014504:	69fb      	ldr	r3, [r7, #28]
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	68db      	ldr	r3, [r3, #12]
 801450a:	685b      	ldr	r3, [r3, #4]
 801450c:	4618      	mov	r0, r3
 801450e:	f7f8 fe8c 	bl	800d22a <lwip_htonl>
 8014512:	4604      	mov	r4, r0
 8014514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014516:	68db      	ldr	r3, [r3, #12]
 8014518:	685b      	ldr	r3, [r3, #4]
 801451a:	4618      	mov	r0, r3
 801451c:	f7f8 fe85 	bl	800d22a <lwip_htonl>
 8014520:	4603      	mov	r3, r0
 8014522:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014524:	2b00      	cmp	r3, #0
 8014526:	dbe6      	blt.n	80144f6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014528:	69fb      	ldr	r3, [r7, #28]
 801452a:	681a      	ldr	r2, [r3, #0]
 801452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801452e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014530:	69fb      	ldr	r3, [r7, #28]
 8014532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014534:	601a      	str	r2, [r3, #0]
 8014536:	e009      	b.n	801454c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014538:	6a3b      	ldr	r3, [r7, #32]
 801453a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801453c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801453e:	6a3b      	ldr	r3, [r7, #32]
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	623b      	str	r3, [r7, #32]
 8014544:	e002      	b.n	801454c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014546:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014548:	f7fb ff1d 	bl	8010386 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014550:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014554:	2b00      	cmp	r3, #0
 8014556:	d012      	beq.n	801457e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801455a:	68db      	ldr	r3, [r3, #12]
 801455c:	685b      	ldr	r3, [r3, #4]
 801455e:	4618      	mov	r0, r3
 8014560:	f7f8 fe63 	bl	800d22a <lwip_htonl>
 8014564:	4602      	mov	r2, r0
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801456a:	1ad3      	subs	r3, r2, r3
 801456c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801456e:	8912      	ldrh	r2, [r2, #8]
 8014570:	4413      	add	r3, r2
  while (seg != NULL &&
 8014572:	69ba      	ldr	r2, [r7, #24]
 8014574:	429a      	cmp	r2, r3
 8014576:	f4bf aed9 	bcs.w	801432c <tcp_output+0x160>
 801457a:	e000      	b.n	801457e <tcp_output+0x3b2>
      break;
 801457c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014582:	2b00      	cmp	r3, #0
 8014584:	d108      	bne.n	8014598 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	2200      	movs	r2, #0
 801458a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801458e:	e004      	b.n	801459a <tcp_output+0x3ce>
    goto output_done;
 8014590:	bf00      	nop
 8014592:	e002      	b.n	801459a <tcp_output+0x3ce>
    goto output_done;
 8014594:	bf00      	nop
 8014596:	e000      	b.n	801459a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014598:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	8b5b      	ldrh	r3, [r3, #26]
 801459e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80145a2:	b29a      	uxth	r2, r3
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80145a8:	2300      	movs	r3, #0
}
 80145aa:	4618      	mov	r0, r3
 80145ac:	3728      	adds	r7, #40	; 0x28
 80145ae:	46bd      	mov	sp, r7
 80145b0:	bdb0      	pop	{r4, r5, r7, pc}
 80145b2:	bf00      	nop

080145b4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80145b4:	b580      	push	{r7, lr}
 80145b6:	b082      	sub	sp, #8
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d106      	bne.n	80145d0 <tcp_output_segment_busy+0x1c>
 80145c2:	4b09      	ldr	r3, [pc, #36]	; (80145e8 <tcp_output_segment_busy+0x34>)
 80145c4:	f240 529a 	movw	r2, #1434	; 0x59a
 80145c8:	4908      	ldr	r1, [pc, #32]	; (80145ec <tcp_output_segment_busy+0x38>)
 80145ca:	4809      	ldr	r0, [pc, #36]	; (80145f0 <tcp_output_segment_busy+0x3c>)
 80145cc:	f006 fbbe 	bl	801ad4c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	685b      	ldr	r3, [r3, #4]
 80145d4:	7b9b      	ldrb	r3, [r3, #14]
 80145d6:	2b01      	cmp	r3, #1
 80145d8:	d001      	beq.n	80145de <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80145da:	2301      	movs	r3, #1
 80145dc:	e000      	b.n	80145e0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80145de:	2300      	movs	r3, #0
}
 80145e0:	4618      	mov	r0, r3
 80145e2:	3708      	adds	r7, #8
 80145e4:	46bd      	mov	sp, r7
 80145e6:	bd80      	pop	{r7, pc}
 80145e8:	0801df54 	.word	0x0801df54
 80145ec:	0801e4f0 	.word	0x0801e4f0
 80145f0:	0801dfa8 	.word	0x0801dfa8

080145f4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80145f4:	b5b0      	push	{r4, r5, r7, lr}
 80145f6:	b08c      	sub	sp, #48	; 0x30
 80145f8:	af04      	add	r7, sp, #16
 80145fa:	60f8      	str	r0, [r7, #12]
 80145fc:	60b9      	str	r1, [r7, #8]
 80145fe:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d106      	bne.n	8014614 <tcp_output_segment+0x20>
 8014606:	4b63      	ldr	r3, [pc, #396]	; (8014794 <tcp_output_segment+0x1a0>)
 8014608:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801460c:	4962      	ldr	r1, [pc, #392]	; (8014798 <tcp_output_segment+0x1a4>)
 801460e:	4863      	ldr	r0, [pc, #396]	; (801479c <tcp_output_segment+0x1a8>)
 8014610:	f006 fb9c 	bl	801ad4c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014614:	68bb      	ldr	r3, [r7, #8]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d106      	bne.n	8014628 <tcp_output_segment+0x34>
 801461a:	4b5e      	ldr	r3, [pc, #376]	; (8014794 <tcp_output_segment+0x1a0>)
 801461c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014620:	495f      	ldr	r1, [pc, #380]	; (80147a0 <tcp_output_segment+0x1ac>)
 8014622:	485e      	ldr	r0, [pc, #376]	; (801479c <tcp_output_segment+0x1a8>)
 8014624:	f006 fb92 	bl	801ad4c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d106      	bne.n	801463c <tcp_output_segment+0x48>
 801462e:	4b59      	ldr	r3, [pc, #356]	; (8014794 <tcp_output_segment+0x1a0>)
 8014630:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014634:	495b      	ldr	r1, [pc, #364]	; (80147a4 <tcp_output_segment+0x1b0>)
 8014636:	4859      	ldr	r0, [pc, #356]	; (801479c <tcp_output_segment+0x1a8>)
 8014638:	f006 fb88 	bl	801ad4c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801463c:	68f8      	ldr	r0, [r7, #12]
 801463e:	f7ff ffb9 	bl	80145b4 <tcp_output_segment_busy>
 8014642:	4603      	mov	r3, r0
 8014644:	2b00      	cmp	r3, #0
 8014646:	d001      	beq.n	801464c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014648:	2300      	movs	r3, #0
 801464a:	e09f      	b.n	801478c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801464c:	68bb      	ldr	r3, [r7, #8]
 801464e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	68dc      	ldr	r4, [r3, #12]
 8014654:	4610      	mov	r0, r2
 8014656:	f7f8 fde8 	bl	800d22a <lwip_htonl>
 801465a:	4603      	mov	r3, r0
 801465c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801465e:	68bb      	ldr	r3, [r7, #8]
 8014660:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	68dc      	ldr	r4, [r3, #12]
 8014666:	4610      	mov	r0, r2
 8014668:	f7f8 fdca 	bl	800d200 <lwip_htons>
 801466c:	4603      	mov	r3, r0
 801466e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014670:	68bb      	ldr	r3, [r7, #8]
 8014672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014674:	68ba      	ldr	r2, [r7, #8]
 8014676:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014678:	441a      	add	r2, r3
 801467a:	68bb      	ldr	r3, [r7, #8]
 801467c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	68db      	ldr	r3, [r3, #12]
 8014682:	3314      	adds	r3, #20
 8014684:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	7a9b      	ldrb	r3, [r3, #10]
 801468a:	f003 0301 	and.w	r3, r3, #1
 801468e:	2b00      	cmp	r3, #0
 8014690:	d015      	beq.n	80146be <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014692:	68bb      	ldr	r3, [r7, #8]
 8014694:	3304      	adds	r3, #4
 8014696:	461a      	mov	r2, r3
 8014698:	6879      	ldr	r1, [r7, #4]
 801469a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801469e:	f7fc fa37 	bl	8010b10 <tcp_eff_send_mss_netif>
 80146a2:	4603      	mov	r3, r0
 80146a4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80146a6:	8b7b      	ldrh	r3, [r7, #26]
 80146a8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80146ac:	4618      	mov	r0, r3
 80146ae:	f7f8 fdbc 	bl	800d22a <lwip_htonl>
 80146b2:	4602      	mov	r2, r0
 80146b4:	69fb      	ldr	r3, [r7, #28]
 80146b6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80146b8:	69fb      	ldr	r3, [r7, #28]
 80146ba:	3304      	adds	r3, #4
 80146bc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80146be:	68bb      	ldr	r3, [r7, #8]
 80146c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	da02      	bge.n	80146ce <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80146c8:	68bb      	ldr	r3, [r7, #8]
 80146ca:	2200      	movs	r2, #0
 80146cc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80146ce:	68bb      	ldr	r3, [r7, #8]
 80146d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d10c      	bne.n	80146f0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80146d6:	4b34      	ldr	r3, [pc, #208]	; (80147a8 <tcp_output_segment+0x1b4>)
 80146d8:	681a      	ldr	r2, [r3, #0]
 80146da:	68bb      	ldr	r3, [r7, #8]
 80146dc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	68db      	ldr	r3, [r3, #12]
 80146e2:	685b      	ldr	r3, [r3, #4]
 80146e4:	4618      	mov	r0, r3
 80146e6:	f7f8 fda0 	bl	800d22a <lwip_htonl>
 80146ea:	4602      	mov	r2, r0
 80146ec:	68bb      	ldr	r3, [r7, #8]
 80146ee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	68da      	ldr	r2, [r3, #12]
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	685b      	ldr	r3, [r3, #4]
 80146f8:	685b      	ldr	r3, [r3, #4]
 80146fa:	1ad3      	subs	r3, r2, r3
 80146fc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	685b      	ldr	r3, [r3, #4]
 8014702:	8959      	ldrh	r1, [r3, #10]
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	685b      	ldr	r3, [r3, #4]
 8014708:	8b3a      	ldrh	r2, [r7, #24]
 801470a:	1a8a      	subs	r2, r1, r2
 801470c:	b292      	uxth	r2, r2
 801470e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	685b      	ldr	r3, [r3, #4]
 8014714:	8919      	ldrh	r1, [r3, #8]
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	685b      	ldr	r3, [r3, #4]
 801471a:	8b3a      	ldrh	r2, [r7, #24]
 801471c:	1a8a      	subs	r2, r1, r2
 801471e:	b292      	uxth	r2, r2
 8014720:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	685b      	ldr	r3, [r3, #4]
 8014726:	68fa      	ldr	r2, [r7, #12]
 8014728:	68d2      	ldr	r2, [r2, #12]
 801472a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	68db      	ldr	r3, [r3, #12]
 8014730:	2200      	movs	r2, #0
 8014732:	741a      	strb	r2, [r3, #16]
 8014734:	2200      	movs	r2, #0
 8014736:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	68db      	ldr	r3, [r3, #12]
 801473c:	f103 0214 	add.w	r2, r3, #20
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	7a9b      	ldrb	r3, [r3, #10]
 8014744:	009b      	lsls	r3, r3, #2
 8014746:	f003 0304 	and.w	r3, r3, #4
 801474a:	4413      	add	r3, r2
 801474c:	69fa      	ldr	r2, [r7, #28]
 801474e:	429a      	cmp	r2, r3
 8014750:	d006      	beq.n	8014760 <tcp_output_segment+0x16c>
 8014752:	4b10      	ldr	r3, [pc, #64]	; (8014794 <tcp_output_segment+0x1a0>)
 8014754:	f240 621c 	movw	r2, #1564	; 0x61c
 8014758:	4914      	ldr	r1, [pc, #80]	; (80147ac <tcp_output_segment+0x1b8>)
 801475a:	4810      	ldr	r0, [pc, #64]	; (801479c <tcp_output_segment+0x1a8>)
 801475c:	f006 faf6 	bl	801ad4c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	6858      	ldr	r0, [r3, #4]
 8014764:	68b9      	ldr	r1, [r7, #8]
 8014766:	68bb      	ldr	r3, [r7, #8]
 8014768:	1d1c      	adds	r4, r3, #4
 801476a:	68bb      	ldr	r3, [r7, #8]
 801476c:	7add      	ldrb	r5, [r3, #11]
 801476e:	68bb      	ldr	r3, [r7, #8]
 8014770:	7a9b      	ldrb	r3, [r3, #10]
 8014772:	687a      	ldr	r2, [r7, #4]
 8014774:	9202      	str	r2, [sp, #8]
 8014776:	2206      	movs	r2, #6
 8014778:	9201      	str	r2, [sp, #4]
 801477a:	9300      	str	r3, [sp, #0]
 801477c:	462b      	mov	r3, r5
 801477e:	4622      	mov	r2, r4
 8014780:	f002 fdb0 	bl	80172e4 <ip4_output_if>
 8014784:	4603      	mov	r3, r0
 8014786:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014788:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801478c:	4618      	mov	r0, r3
 801478e:	3720      	adds	r7, #32
 8014790:	46bd      	mov	sp, r7
 8014792:	bdb0      	pop	{r4, r5, r7, pc}
 8014794:	0801df54 	.word	0x0801df54
 8014798:	0801e518 	.word	0x0801e518
 801479c:	0801dfa8 	.word	0x0801dfa8
 80147a0:	0801e538 	.word	0x0801e538
 80147a4:	0801e558 	.word	0x0801e558
 80147a8:	200120a4 	.word	0x200120a4
 80147ac:	0801e57c 	.word	0x0801e57c

080147b0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80147b0:	b5b0      	push	{r4, r5, r7, lr}
 80147b2:	b084      	sub	sp, #16
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d106      	bne.n	80147cc <tcp_rexmit_rto_prepare+0x1c>
 80147be:	4b31      	ldr	r3, [pc, #196]	; (8014884 <tcp_rexmit_rto_prepare+0xd4>)
 80147c0:	f240 6263 	movw	r2, #1635	; 0x663
 80147c4:	4930      	ldr	r1, [pc, #192]	; (8014888 <tcp_rexmit_rto_prepare+0xd8>)
 80147c6:	4831      	ldr	r0, [pc, #196]	; (801488c <tcp_rexmit_rto_prepare+0xdc>)
 80147c8:	f006 fac0 	bl	801ad4c <iprintf>

  if (pcb->unacked == NULL) {
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d102      	bne.n	80147da <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80147d4:	f06f 0305 	mvn.w	r3, #5
 80147d8:	e050      	b.n	801487c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147de:	60fb      	str	r3, [r7, #12]
 80147e0:	e00b      	b.n	80147fa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80147e2:	68f8      	ldr	r0, [r7, #12]
 80147e4:	f7ff fee6 	bl	80145b4 <tcp_output_segment_busy>
 80147e8:	4603      	mov	r3, r0
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d002      	beq.n	80147f4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80147ee:	f06f 0305 	mvn.w	r3, #5
 80147f2:	e043      	b.n	801487c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	60fb      	str	r3, [r7, #12]
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d1ef      	bne.n	80147e2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014802:	68f8      	ldr	r0, [r7, #12]
 8014804:	f7ff fed6 	bl	80145b4 <tcp_output_segment_busy>
 8014808:	4603      	mov	r3, r0
 801480a:	2b00      	cmp	r3, #0
 801480c:	d002      	beq.n	8014814 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801480e:	f06f 0305 	mvn.w	r3, #5
 8014812:	e033      	b.n	801487c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	2200      	movs	r2, #0
 8014828:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	8b5b      	ldrh	r3, [r3, #26]
 801482e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014832:	b29a      	uxth	r2, r3
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	68db      	ldr	r3, [r3, #12]
 801483c:	685b      	ldr	r3, [r3, #4]
 801483e:	4618      	mov	r0, r3
 8014840:	f7f8 fcf3 	bl	800d22a <lwip_htonl>
 8014844:	4604      	mov	r4, r0
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	891b      	ldrh	r3, [r3, #8]
 801484a:	461d      	mov	r5, r3
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	68db      	ldr	r3, [r3, #12]
 8014850:	899b      	ldrh	r3, [r3, #12]
 8014852:	b29b      	uxth	r3, r3
 8014854:	4618      	mov	r0, r3
 8014856:	f7f8 fcd3 	bl	800d200 <lwip_htons>
 801485a:	4603      	mov	r3, r0
 801485c:	b2db      	uxtb	r3, r3
 801485e:	f003 0303 	and.w	r3, r3, #3
 8014862:	2b00      	cmp	r3, #0
 8014864:	d001      	beq.n	801486a <tcp_rexmit_rto_prepare+0xba>
 8014866:	2301      	movs	r3, #1
 8014868:	e000      	b.n	801486c <tcp_rexmit_rto_prepare+0xbc>
 801486a:	2300      	movs	r3, #0
 801486c:	442b      	add	r3, r5
 801486e:	18e2      	adds	r2, r4, r3
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	2200      	movs	r2, #0
 8014878:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801487a:	2300      	movs	r3, #0
}
 801487c:	4618      	mov	r0, r3
 801487e:	3710      	adds	r7, #16
 8014880:	46bd      	mov	sp, r7
 8014882:	bdb0      	pop	{r4, r5, r7, pc}
 8014884:	0801df54 	.word	0x0801df54
 8014888:	0801e590 	.word	0x0801e590
 801488c:	0801dfa8 	.word	0x0801dfa8

08014890 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014890:	b580      	push	{r7, lr}
 8014892:	b082      	sub	sp, #8
 8014894:	af00      	add	r7, sp, #0
 8014896:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d106      	bne.n	80148ac <tcp_rexmit_rto_commit+0x1c>
 801489e:	4b0d      	ldr	r3, [pc, #52]	; (80148d4 <tcp_rexmit_rto_commit+0x44>)
 80148a0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80148a4:	490c      	ldr	r1, [pc, #48]	; (80148d8 <tcp_rexmit_rto_commit+0x48>)
 80148a6:	480d      	ldr	r0, [pc, #52]	; (80148dc <tcp_rexmit_rto_commit+0x4c>)
 80148a8:	f006 fa50 	bl	801ad4c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80148b2:	2bff      	cmp	r3, #255	; 0xff
 80148b4:	d007      	beq.n	80148c6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80148bc:	3301      	adds	r3, #1
 80148be:	b2da      	uxtb	r2, r3
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80148c6:	6878      	ldr	r0, [r7, #4]
 80148c8:	f7ff fc80 	bl	80141cc <tcp_output>
}
 80148cc:	bf00      	nop
 80148ce:	3708      	adds	r7, #8
 80148d0:	46bd      	mov	sp, r7
 80148d2:	bd80      	pop	{r7, pc}
 80148d4:	0801df54 	.word	0x0801df54
 80148d8:	0801e5b4 	.word	0x0801e5b4
 80148dc:	0801dfa8 	.word	0x0801dfa8

080148e0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b082      	sub	sp, #8
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d106      	bne.n	80148fc <tcp_rexmit_rto+0x1c>
 80148ee:	4b0a      	ldr	r3, [pc, #40]	; (8014918 <tcp_rexmit_rto+0x38>)
 80148f0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80148f4:	4909      	ldr	r1, [pc, #36]	; (801491c <tcp_rexmit_rto+0x3c>)
 80148f6:	480a      	ldr	r0, [pc, #40]	; (8014920 <tcp_rexmit_rto+0x40>)
 80148f8:	f006 fa28 	bl	801ad4c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80148fc:	6878      	ldr	r0, [r7, #4]
 80148fe:	f7ff ff57 	bl	80147b0 <tcp_rexmit_rto_prepare>
 8014902:	4603      	mov	r3, r0
 8014904:	2b00      	cmp	r3, #0
 8014906:	d102      	bne.n	801490e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014908:	6878      	ldr	r0, [r7, #4]
 801490a:	f7ff ffc1 	bl	8014890 <tcp_rexmit_rto_commit>
  }
}
 801490e:	bf00      	nop
 8014910:	3708      	adds	r7, #8
 8014912:	46bd      	mov	sp, r7
 8014914:	bd80      	pop	{r7, pc}
 8014916:	bf00      	nop
 8014918:	0801df54 	.word	0x0801df54
 801491c:	0801e5d8 	.word	0x0801e5d8
 8014920:	0801dfa8 	.word	0x0801dfa8

08014924 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014924:	b590      	push	{r4, r7, lr}
 8014926:	b085      	sub	sp, #20
 8014928:	af00      	add	r7, sp, #0
 801492a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d106      	bne.n	8014940 <tcp_rexmit+0x1c>
 8014932:	4b2f      	ldr	r3, [pc, #188]	; (80149f0 <tcp_rexmit+0xcc>)
 8014934:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014938:	492e      	ldr	r1, [pc, #184]	; (80149f4 <tcp_rexmit+0xd0>)
 801493a:	482f      	ldr	r0, [pc, #188]	; (80149f8 <tcp_rexmit+0xd4>)
 801493c:	f006 fa06 	bl	801ad4c <iprintf>

  if (pcb->unacked == NULL) {
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014944:	2b00      	cmp	r3, #0
 8014946:	d102      	bne.n	801494e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014948:	f06f 0305 	mvn.w	r3, #5
 801494c:	e04c      	b.n	80149e8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014952:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014954:	68b8      	ldr	r0, [r7, #8]
 8014956:	f7ff fe2d 	bl	80145b4 <tcp_output_segment_busy>
 801495a:	4603      	mov	r3, r0
 801495c:	2b00      	cmp	r3, #0
 801495e:	d002      	beq.n	8014966 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8014960:	f06f 0305 	mvn.w	r3, #5
 8014964:	e040      	b.n	80149e8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014966:	68bb      	ldr	r3, [r7, #8]
 8014968:	681a      	ldr	r2, [r3, #0]
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	336c      	adds	r3, #108	; 0x6c
 8014972:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014974:	e002      	b.n	801497c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d011      	beq.n	80149a8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	68db      	ldr	r3, [r3, #12]
 801498a:	685b      	ldr	r3, [r3, #4]
 801498c:	4618      	mov	r0, r3
 801498e:	f7f8 fc4c 	bl	800d22a <lwip_htonl>
 8014992:	4604      	mov	r4, r0
 8014994:	68bb      	ldr	r3, [r7, #8]
 8014996:	68db      	ldr	r3, [r3, #12]
 8014998:	685b      	ldr	r3, [r3, #4]
 801499a:	4618      	mov	r0, r3
 801499c:	f7f8 fc45 	bl	800d22a <lwip_htonl>
 80149a0:	4603      	mov	r3, r0
 80149a2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	dbe6      	blt.n	8014976 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	681a      	ldr	r2, [r3, #0]
 80149ac:	68bb      	ldr	r3, [r7, #8]
 80149ae:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	68ba      	ldr	r2, [r7, #8]
 80149b4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80149b6:	68bb      	ldr	r3, [r7, #8]
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d103      	bne.n	80149c6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	2200      	movs	r2, #0
 80149c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80149cc:	2bff      	cmp	r3, #255	; 0xff
 80149ce:	d007      	beq.n	80149e0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80149d6:	3301      	adds	r3, #1
 80149d8:	b2da      	uxtb	r2, r3
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	2200      	movs	r2, #0
 80149e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80149e6:	2300      	movs	r3, #0
}
 80149e8:	4618      	mov	r0, r3
 80149ea:	3714      	adds	r7, #20
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd90      	pop	{r4, r7, pc}
 80149f0:	0801df54 	.word	0x0801df54
 80149f4:	0801e5f4 	.word	0x0801e5f4
 80149f8:	0801dfa8 	.word	0x0801dfa8

080149fc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b082      	sub	sp, #8
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d106      	bne.n	8014a18 <tcp_rexmit_fast+0x1c>
 8014a0a:	4b2a      	ldr	r3, [pc, #168]	; (8014ab4 <tcp_rexmit_fast+0xb8>)
 8014a0c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014a10:	4929      	ldr	r1, [pc, #164]	; (8014ab8 <tcp_rexmit_fast+0xbc>)
 8014a12:	482a      	ldr	r0, [pc, #168]	; (8014abc <tcp_rexmit_fast+0xc0>)
 8014a14:	f006 f99a 	bl	801ad4c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d044      	beq.n	8014aaa <tcp_rexmit_fast+0xae>
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	8b5b      	ldrh	r3, [r3, #26]
 8014a24:	f003 0304 	and.w	r3, r3, #4
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d13e      	bne.n	8014aaa <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014a2c:	6878      	ldr	r0, [r7, #4]
 8014a2e:	f7ff ff79 	bl	8014924 <tcp_rexmit>
 8014a32:	4603      	mov	r3, r0
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d138      	bne.n	8014aaa <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014a44:	4293      	cmp	r3, r2
 8014a46:	bf28      	it	cs
 8014a48:	4613      	movcs	r3, r2
 8014a4a:	b29b      	uxth	r3, r3
 8014a4c:	0fda      	lsrs	r2, r3, #31
 8014a4e:	4413      	add	r3, r2
 8014a50:	105b      	asrs	r3, r3, #1
 8014a52:	b29a      	uxth	r2, r3
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014a60:	461a      	mov	r2, r3
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014a66:	005b      	lsls	r3, r3, #1
 8014a68:	429a      	cmp	r2, r3
 8014a6a:	d206      	bcs.n	8014a7a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014a70:	005b      	lsls	r3, r3, #1
 8014a72:	b29a      	uxth	r2, r3
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014a84:	4619      	mov	r1, r3
 8014a86:	0049      	lsls	r1, r1, #1
 8014a88:	440b      	add	r3, r1
 8014a8a:	b29b      	uxth	r3, r3
 8014a8c:	4413      	add	r3, r2
 8014a8e:	b29a      	uxth	r2, r3
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	8b5b      	ldrh	r3, [r3, #26]
 8014a9a:	f043 0304 	orr.w	r3, r3, #4
 8014a9e:	b29a      	uxth	r2, r3
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	2200      	movs	r2, #0
 8014aa8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8014aaa:	bf00      	nop
 8014aac:	3708      	adds	r7, #8
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	bd80      	pop	{r7, pc}
 8014ab2:	bf00      	nop
 8014ab4:	0801df54 	.word	0x0801df54
 8014ab8:	0801e60c 	.word	0x0801e60c
 8014abc:	0801dfa8 	.word	0x0801dfa8

08014ac0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b086      	sub	sp, #24
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	60f8      	str	r0, [r7, #12]
 8014ac8:	607b      	str	r3, [r7, #4]
 8014aca:	460b      	mov	r3, r1
 8014acc:	817b      	strh	r3, [r7, #10]
 8014ace:	4613      	mov	r3, r2
 8014ad0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014ad2:	897a      	ldrh	r2, [r7, #10]
 8014ad4:	893b      	ldrh	r3, [r7, #8]
 8014ad6:	4413      	add	r3, r2
 8014ad8:	b29b      	uxth	r3, r3
 8014ada:	3314      	adds	r3, #20
 8014adc:	b29b      	uxth	r3, r3
 8014ade:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014ae2:	4619      	mov	r1, r3
 8014ae4:	2022      	movs	r0, #34	; 0x22
 8014ae6:	f7f9 fc8b 	bl	800e400 <pbuf_alloc>
 8014aea:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014aec:	697b      	ldr	r3, [r7, #20]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d04d      	beq.n	8014b8e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014af2:	897b      	ldrh	r3, [r7, #10]
 8014af4:	3313      	adds	r3, #19
 8014af6:	697a      	ldr	r2, [r7, #20]
 8014af8:	8952      	ldrh	r2, [r2, #10]
 8014afa:	4293      	cmp	r3, r2
 8014afc:	db06      	blt.n	8014b0c <tcp_output_alloc_header_common+0x4c>
 8014afe:	4b26      	ldr	r3, [pc, #152]	; (8014b98 <tcp_output_alloc_header_common+0xd8>)
 8014b00:	f240 7223 	movw	r2, #1827	; 0x723
 8014b04:	4925      	ldr	r1, [pc, #148]	; (8014b9c <tcp_output_alloc_header_common+0xdc>)
 8014b06:	4826      	ldr	r0, [pc, #152]	; (8014ba0 <tcp_output_alloc_header_common+0xe0>)
 8014b08:	f006 f920 	bl	801ad4c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014b0c:	697b      	ldr	r3, [r7, #20]
 8014b0e:	685b      	ldr	r3, [r3, #4]
 8014b10:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014b12:	8c3b      	ldrh	r3, [r7, #32]
 8014b14:	4618      	mov	r0, r3
 8014b16:	f7f8 fb73 	bl	800d200 <lwip_htons>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	461a      	mov	r2, r3
 8014b1e:	693b      	ldr	r3, [r7, #16]
 8014b20:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014b22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b24:	4618      	mov	r0, r3
 8014b26:	f7f8 fb6b 	bl	800d200 <lwip_htons>
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	461a      	mov	r2, r3
 8014b2e:	693b      	ldr	r3, [r7, #16]
 8014b30:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014b32:	693b      	ldr	r3, [r7, #16]
 8014b34:	687a      	ldr	r2, [r7, #4]
 8014b36:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014b38:	68f8      	ldr	r0, [r7, #12]
 8014b3a:	f7f8 fb76 	bl	800d22a <lwip_htonl>
 8014b3e:	4602      	mov	r2, r0
 8014b40:	693b      	ldr	r3, [r7, #16]
 8014b42:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014b44:	897b      	ldrh	r3, [r7, #10]
 8014b46:	089b      	lsrs	r3, r3, #2
 8014b48:	b29b      	uxth	r3, r3
 8014b4a:	3305      	adds	r3, #5
 8014b4c:	b29b      	uxth	r3, r3
 8014b4e:	031b      	lsls	r3, r3, #12
 8014b50:	b29a      	uxth	r2, r3
 8014b52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014b56:	b29b      	uxth	r3, r3
 8014b58:	4313      	orrs	r3, r2
 8014b5a:	b29b      	uxth	r3, r3
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	f7f8 fb4f 	bl	800d200 <lwip_htons>
 8014b62:	4603      	mov	r3, r0
 8014b64:	461a      	mov	r2, r3
 8014b66:	693b      	ldr	r3, [r7, #16]
 8014b68:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014b6a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	f7f8 fb47 	bl	800d200 <lwip_htons>
 8014b72:	4603      	mov	r3, r0
 8014b74:	461a      	mov	r2, r3
 8014b76:	693b      	ldr	r3, [r7, #16]
 8014b78:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014b7a:	693b      	ldr	r3, [r7, #16]
 8014b7c:	2200      	movs	r2, #0
 8014b7e:	741a      	strb	r2, [r3, #16]
 8014b80:	2200      	movs	r2, #0
 8014b82:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014b84:	693b      	ldr	r3, [r7, #16]
 8014b86:	2200      	movs	r2, #0
 8014b88:	749a      	strb	r2, [r3, #18]
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8014b8e:	697b      	ldr	r3, [r7, #20]
}
 8014b90:	4618      	mov	r0, r3
 8014b92:	3718      	adds	r7, #24
 8014b94:	46bd      	mov	sp, r7
 8014b96:	bd80      	pop	{r7, pc}
 8014b98:	0801df54 	.word	0x0801df54
 8014b9c:	0801e62c 	.word	0x0801e62c
 8014ba0:	0801dfa8 	.word	0x0801dfa8

08014ba4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014ba4:	b5b0      	push	{r4, r5, r7, lr}
 8014ba6:	b08a      	sub	sp, #40	; 0x28
 8014ba8:	af04      	add	r7, sp, #16
 8014baa:	60f8      	str	r0, [r7, #12]
 8014bac:	607b      	str	r3, [r7, #4]
 8014bae:	460b      	mov	r3, r1
 8014bb0:	817b      	strh	r3, [r7, #10]
 8014bb2:	4613      	mov	r3, r2
 8014bb4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d106      	bne.n	8014bca <tcp_output_alloc_header+0x26>
 8014bbc:	4b15      	ldr	r3, [pc, #84]	; (8014c14 <tcp_output_alloc_header+0x70>)
 8014bbe:	f240 7242 	movw	r2, #1858	; 0x742
 8014bc2:	4915      	ldr	r1, [pc, #84]	; (8014c18 <tcp_output_alloc_header+0x74>)
 8014bc4:	4815      	ldr	r0, [pc, #84]	; (8014c1c <tcp_output_alloc_header+0x78>)
 8014bc6:	f006 f8c1 	bl	801ad4c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	8adb      	ldrh	r3, [r3, #22]
 8014bd2:	68fa      	ldr	r2, [r7, #12]
 8014bd4:	8b12      	ldrh	r2, [r2, #24]
 8014bd6:	68f9      	ldr	r1, [r7, #12]
 8014bd8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8014bda:	893d      	ldrh	r5, [r7, #8]
 8014bdc:	897c      	ldrh	r4, [r7, #10]
 8014bde:	9103      	str	r1, [sp, #12]
 8014be0:	2110      	movs	r1, #16
 8014be2:	9102      	str	r1, [sp, #8]
 8014be4:	9201      	str	r2, [sp, #4]
 8014be6:	9300      	str	r3, [sp, #0]
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	462a      	mov	r2, r5
 8014bec:	4621      	mov	r1, r4
 8014bee:	f7ff ff67 	bl	8014ac0 <tcp_output_alloc_header_common>
 8014bf2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014bf4:	697b      	ldr	r3, [r7, #20]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d006      	beq.n	8014c08 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bfe:	68fa      	ldr	r2, [r7, #12]
 8014c00:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014c02:	441a      	add	r2, r3
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014c08:	697b      	ldr	r3, [r7, #20]
}
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	3718      	adds	r7, #24
 8014c0e:	46bd      	mov	sp, r7
 8014c10:	bdb0      	pop	{r4, r5, r7, pc}
 8014c12:	bf00      	nop
 8014c14:	0801df54 	.word	0x0801df54
 8014c18:	0801e65c 	.word	0x0801e65c
 8014c1c:	0801dfa8 	.word	0x0801dfa8

08014c20 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014c20:	b580      	push	{r7, lr}
 8014c22:	b088      	sub	sp, #32
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	60f8      	str	r0, [r7, #12]
 8014c28:	60b9      	str	r1, [r7, #8]
 8014c2a:	4611      	mov	r1, r2
 8014c2c:	461a      	mov	r2, r3
 8014c2e:	460b      	mov	r3, r1
 8014c30:	71fb      	strb	r3, [r7, #7]
 8014c32:	4613      	mov	r3, r2
 8014c34:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014c36:	2300      	movs	r3, #0
 8014c38:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014c3a:	68bb      	ldr	r3, [r7, #8]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d106      	bne.n	8014c4e <tcp_output_fill_options+0x2e>
 8014c40:	4b13      	ldr	r3, [pc, #76]	; (8014c90 <tcp_output_fill_options+0x70>)
 8014c42:	f240 7256 	movw	r2, #1878	; 0x756
 8014c46:	4913      	ldr	r1, [pc, #76]	; (8014c94 <tcp_output_fill_options+0x74>)
 8014c48:	4813      	ldr	r0, [pc, #76]	; (8014c98 <tcp_output_fill_options+0x78>)
 8014c4a:	f006 f87f 	bl	801ad4c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014c4e:	68bb      	ldr	r3, [r7, #8]
 8014c50:	685b      	ldr	r3, [r3, #4]
 8014c52:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014c54:	69bb      	ldr	r3, [r7, #24]
 8014c56:	3314      	adds	r3, #20
 8014c58:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014c5a:	69bb      	ldr	r3, [r7, #24]
 8014c5c:	f103 0214 	add.w	r2, r3, #20
 8014c60:	8bfb      	ldrh	r3, [r7, #30]
 8014c62:	009b      	lsls	r3, r3, #2
 8014c64:	4619      	mov	r1, r3
 8014c66:	79fb      	ldrb	r3, [r7, #7]
 8014c68:	009b      	lsls	r3, r3, #2
 8014c6a:	f003 0304 	and.w	r3, r3, #4
 8014c6e:	440b      	add	r3, r1
 8014c70:	4413      	add	r3, r2
 8014c72:	697a      	ldr	r2, [r7, #20]
 8014c74:	429a      	cmp	r2, r3
 8014c76:	d006      	beq.n	8014c86 <tcp_output_fill_options+0x66>
 8014c78:	4b05      	ldr	r3, [pc, #20]	; (8014c90 <tcp_output_fill_options+0x70>)
 8014c7a:	f240 7275 	movw	r2, #1909	; 0x775
 8014c7e:	4907      	ldr	r1, [pc, #28]	; (8014c9c <tcp_output_fill_options+0x7c>)
 8014c80:	4805      	ldr	r0, [pc, #20]	; (8014c98 <tcp_output_fill_options+0x78>)
 8014c82:	f006 f863 	bl	801ad4c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014c86:	bf00      	nop
 8014c88:	3720      	adds	r7, #32
 8014c8a:	46bd      	mov	sp, r7
 8014c8c:	bd80      	pop	{r7, pc}
 8014c8e:	bf00      	nop
 8014c90:	0801df54 	.word	0x0801df54
 8014c94:	0801e684 	.word	0x0801e684
 8014c98:	0801dfa8 	.word	0x0801dfa8
 8014c9c:	0801e57c 	.word	0x0801e57c

08014ca0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014ca0:	b580      	push	{r7, lr}
 8014ca2:	b08a      	sub	sp, #40	; 0x28
 8014ca4:	af04      	add	r7, sp, #16
 8014ca6:	60f8      	str	r0, [r7, #12]
 8014ca8:	60b9      	str	r1, [r7, #8]
 8014caa:	607a      	str	r2, [r7, #4]
 8014cac:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014cae:	68bb      	ldr	r3, [r7, #8]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d106      	bne.n	8014cc2 <tcp_output_control_segment+0x22>
 8014cb4:	4b1c      	ldr	r3, [pc, #112]	; (8014d28 <tcp_output_control_segment+0x88>)
 8014cb6:	f240 7287 	movw	r2, #1927	; 0x787
 8014cba:	491c      	ldr	r1, [pc, #112]	; (8014d2c <tcp_output_control_segment+0x8c>)
 8014cbc:	481c      	ldr	r0, [pc, #112]	; (8014d30 <tcp_output_control_segment+0x90>)
 8014cbe:	f006 f845 	bl	801ad4c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014cc2:	683a      	ldr	r2, [r7, #0]
 8014cc4:	6879      	ldr	r1, [r7, #4]
 8014cc6:	68f8      	ldr	r0, [r7, #12]
 8014cc8:	f7fe fae8 	bl	801329c <tcp_route>
 8014ccc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014cce:	693b      	ldr	r3, [r7, #16]
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d102      	bne.n	8014cda <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014cd4:	23fc      	movs	r3, #252	; 0xfc
 8014cd6:	75fb      	strb	r3, [r7, #23]
 8014cd8:	e01c      	b.n	8014d14 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d006      	beq.n	8014cee <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	7adb      	ldrb	r3, [r3, #11]
 8014ce4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	7a9b      	ldrb	r3, [r3, #10]
 8014cea:	757b      	strb	r3, [r7, #21]
 8014cec:	e003      	b.n	8014cf6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014cee:	23ff      	movs	r3, #255	; 0xff
 8014cf0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014cf6:	7dba      	ldrb	r2, [r7, #22]
 8014cf8:	693b      	ldr	r3, [r7, #16]
 8014cfa:	9302      	str	r3, [sp, #8]
 8014cfc:	2306      	movs	r3, #6
 8014cfe:	9301      	str	r3, [sp, #4]
 8014d00:	7d7b      	ldrb	r3, [r7, #21]
 8014d02:	9300      	str	r3, [sp, #0]
 8014d04:	4613      	mov	r3, r2
 8014d06:	683a      	ldr	r2, [r7, #0]
 8014d08:	6879      	ldr	r1, [r7, #4]
 8014d0a:	68b8      	ldr	r0, [r7, #8]
 8014d0c:	f002 faea 	bl	80172e4 <ip4_output_if>
 8014d10:	4603      	mov	r3, r0
 8014d12:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014d14:	68b8      	ldr	r0, [r7, #8]
 8014d16:	f7f9 fe89 	bl	800ea2c <pbuf_free>
  return err;
 8014d1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014d1e:	4618      	mov	r0, r3
 8014d20:	3718      	adds	r7, #24
 8014d22:	46bd      	mov	sp, r7
 8014d24:	bd80      	pop	{r7, pc}
 8014d26:	bf00      	nop
 8014d28:	0801df54 	.word	0x0801df54
 8014d2c:	0801e6ac 	.word	0x0801e6ac
 8014d30:	0801dfa8 	.word	0x0801dfa8

08014d34 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014d34:	b590      	push	{r4, r7, lr}
 8014d36:	b08b      	sub	sp, #44	; 0x2c
 8014d38:	af04      	add	r7, sp, #16
 8014d3a:	60f8      	str	r0, [r7, #12]
 8014d3c:	60b9      	str	r1, [r7, #8]
 8014d3e:	607a      	str	r2, [r7, #4]
 8014d40:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014d42:	683b      	ldr	r3, [r7, #0]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d106      	bne.n	8014d56 <tcp_rst+0x22>
 8014d48:	4b1f      	ldr	r3, [pc, #124]	; (8014dc8 <tcp_rst+0x94>)
 8014d4a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014d4e:	491f      	ldr	r1, [pc, #124]	; (8014dcc <tcp_rst+0x98>)
 8014d50:	481f      	ldr	r0, [pc, #124]	; (8014dd0 <tcp_rst+0x9c>)
 8014d52:	f005 fffb 	bl	801ad4c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d106      	bne.n	8014d6a <tcp_rst+0x36>
 8014d5c:	4b1a      	ldr	r3, [pc, #104]	; (8014dc8 <tcp_rst+0x94>)
 8014d5e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014d62:	491c      	ldr	r1, [pc, #112]	; (8014dd4 <tcp_rst+0xa0>)
 8014d64:	481a      	ldr	r0, [pc, #104]	; (8014dd0 <tcp_rst+0x9c>)
 8014d66:	f005 fff1 	bl	801ad4c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014d6a:	2300      	movs	r3, #0
 8014d6c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014d6e:	f246 0308 	movw	r3, #24584	; 0x6008
 8014d72:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014d74:	7dfb      	ldrb	r3, [r7, #23]
 8014d76:	b29c      	uxth	r4, r3
 8014d78:	68b8      	ldr	r0, [r7, #8]
 8014d7a:	f7f8 fa56 	bl	800d22a <lwip_htonl>
 8014d7e:	4602      	mov	r2, r0
 8014d80:	8abb      	ldrh	r3, [r7, #20]
 8014d82:	9303      	str	r3, [sp, #12]
 8014d84:	2314      	movs	r3, #20
 8014d86:	9302      	str	r3, [sp, #8]
 8014d88:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014d8a:	9301      	str	r3, [sp, #4]
 8014d8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014d8e:	9300      	str	r3, [sp, #0]
 8014d90:	4613      	mov	r3, r2
 8014d92:	2200      	movs	r2, #0
 8014d94:	4621      	mov	r1, r4
 8014d96:	6878      	ldr	r0, [r7, #4]
 8014d98:	f7ff fe92 	bl	8014ac0 <tcp_output_alloc_header_common>
 8014d9c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014d9e:	693b      	ldr	r3, [r7, #16]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d00c      	beq.n	8014dbe <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014da4:	7dfb      	ldrb	r3, [r7, #23]
 8014da6:	2200      	movs	r2, #0
 8014da8:	6939      	ldr	r1, [r7, #16]
 8014daa:	68f8      	ldr	r0, [r7, #12]
 8014dac:	f7ff ff38 	bl	8014c20 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014db2:	683a      	ldr	r2, [r7, #0]
 8014db4:	6939      	ldr	r1, [r7, #16]
 8014db6:	68f8      	ldr	r0, [r7, #12]
 8014db8:	f7ff ff72 	bl	8014ca0 <tcp_output_control_segment>
 8014dbc:	e000      	b.n	8014dc0 <tcp_rst+0x8c>
    return;
 8014dbe:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014dc0:	371c      	adds	r7, #28
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	bd90      	pop	{r4, r7, pc}
 8014dc6:	bf00      	nop
 8014dc8:	0801df54 	.word	0x0801df54
 8014dcc:	0801e6d8 	.word	0x0801e6d8
 8014dd0:	0801dfa8 	.word	0x0801dfa8
 8014dd4:	0801e6f4 	.word	0x0801e6f4

08014dd8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014dd8:	b590      	push	{r4, r7, lr}
 8014dda:	b087      	sub	sp, #28
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014de0:	2300      	movs	r3, #0
 8014de2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014de4:	2300      	movs	r3, #0
 8014de6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d106      	bne.n	8014dfc <tcp_send_empty_ack+0x24>
 8014dee:	4b28      	ldr	r3, [pc, #160]	; (8014e90 <tcp_send_empty_ack+0xb8>)
 8014df0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014df4:	4927      	ldr	r1, [pc, #156]	; (8014e94 <tcp_send_empty_ack+0xbc>)
 8014df6:	4828      	ldr	r0, [pc, #160]	; (8014e98 <tcp_send_empty_ack+0xc0>)
 8014df8:	f005 ffa8 	bl	801ad4c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014dfc:	7dfb      	ldrb	r3, [r7, #23]
 8014dfe:	009b      	lsls	r3, r3, #2
 8014e00:	b2db      	uxtb	r3, r3
 8014e02:	f003 0304 	and.w	r3, r3, #4
 8014e06:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014e08:	7d7b      	ldrb	r3, [r7, #21]
 8014e0a:	b29c      	uxth	r4, r3
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014e10:	4618      	mov	r0, r3
 8014e12:	f7f8 fa0a 	bl	800d22a <lwip_htonl>
 8014e16:	4603      	mov	r3, r0
 8014e18:	2200      	movs	r2, #0
 8014e1a:	4621      	mov	r1, r4
 8014e1c:	6878      	ldr	r0, [r7, #4]
 8014e1e:	f7ff fec1 	bl	8014ba4 <tcp_output_alloc_header>
 8014e22:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014e24:	693b      	ldr	r3, [r7, #16]
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d109      	bne.n	8014e3e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	8b5b      	ldrh	r3, [r3, #26]
 8014e2e:	f043 0303 	orr.w	r3, r3, #3
 8014e32:	b29a      	uxth	r2, r3
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014e38:	f06f 0301 	mvn.w	r3, #1
 8014e3c:	e023      	b.n	8014e86 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014e3e:	7dbb      	ldrb	r3, [r7, #22]
 8014e40:	7dfa      	ldrb	r2, [r7, #23]
 8014e42:	6939      	ldr	r1, [r7, #16]
 8014e44:	6878      	ldr	r0, [r7, #4]
 8014e46:	f7ff feeb 	bl	8014c20 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014e4a:	687a      	ldr	r2, [r7, #4]
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	3304      	adds	r3, #4
 8014e50:	6939      	ldr	r1, [r7, #16]
 8014e52:	6878      	ldr	r0, [r7, #4]
 8014e54:	f7ff ff24 	bl	8014ca0 <tcp_output_control_segment>
 8014e58:	4603      	mov	r3, r0
 8014e5a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d007      	beq.n	8014e74 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	8b5b      	ldrh	r3, [r3, #26]
 8014e68:	f043 0303 	orr.w	r3, r3, #3
 8014e6c:	b29a      	uxth	r2, r3
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	835a      	strh	r2, [r3, #26]
 8014e72:	e006      	b.n	8014e82 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	8b5b      	ldrh	r3, [r3, #26]
 8014e78:	f023 0303 	bic.w	r3, r3, #3
 8014e7c:	b29a      	uxth	r2, r3
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014e86:	4618      	mov	r0, r3
 8014e88:	371c      	adds	r7, #28
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	bd90      	pop	{r4, r7, pc}
 8014e8e:	bf00      	nop
 8014e90:	0801df54 	.word	0x0801df54
 8014e94:	0801e710 	.word	0x0801e710
 8014e98:	0801dfa8 	.word	0x0801dfa8

08014e9c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014e9c:	b590      	push	{r4, r7, lr}
 8014e9e:	b087      	sub	sp, #28
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014ea4:	2300      	movs	r3, #0
 8014ea6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d106      	bne.n	8014ebc <tcp_keepalive+0x20>
 8014eae:	4b18      	ldr	r3, [pc, #96]	; (8014f10 <tcp_keepalive+0x74>)
 8014eb0:	f640 0224 	movw	r2, #2084	; 0x824
 8014eb4:	4917      	ldr	r1, [pc, #92]	; (8014f14 <tcp_keepalive+0x78>)
 8014eb6:	4818      	ldr	r0, [pc, #96]	; (8014f18 <tcp_keepalive+0x7c>)
 8014eb8:	f005 ff48 	bl	801ad4c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014ebc:	7dfb      	ldrb	r3, [r7, #23]
 8014ebe:	b29c      	uxth	r4, r3
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014ec4:	3b01      	subs	r3, #1
 8014ec6:	4618      	mov	r0, r3
 8014ec8:	f7f8 f9af 	bl	800d22a <lwip_htonl>
 8014ecc:	4603      	mov	r3, r0
 8014ece:	2200      	movs	r2, #0
 8014ed0:	4621      	mov	r1, r4
 8014ed2:	6878      	ldr	r0, [r7, #4]
 8014ed4:	f7ff fe66 	bl	8014ba4 <tcp_output_alloc_header>
 8014ed8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014eda:	693b      	ldr	r3, [r7, #16]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d102      	bne.n	8014ee6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8014ee4:	e010      	b.n	8014f08 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014ee6:	7dfb      	ldrb	r3, [r7, #23]
 8014ee8:	2200      	movs	r2, #0
 8014eea:	6939      	ldr	r1, [r7, #16]
 8014eec:	6878      	ldr	r0, [r7, #4]
 8014eee:	f7ff fe97 	bl	8014c20 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014ef2:	687a      	ldr	r2, [r7, #4]
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	3304      	adds	r3, #4
 8014ef8:	6939      	ldr	r1, [r7, #16]
 8014efa:	6878      	ldr	r0, [r7, #4]
 8014efc:	f7ff fed0 	bl	8014ca0 <tcp_output_control_segment>
 8014f00:	4603      	mov	r3, r0
 8014f02:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014f08:	4618      	mov	r0, r3
 8014f0a:	371c      	adds	r7, #28
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	bd90      	pop	{r4, r7, pc}
 8014f10:	0801df54 	.word	0x0801df54
 8014f14:	0801e730 	.word	0x0801e730
 8014f18:	0801dfa8 	.word	0x0801dfa8

08014f1c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014f1c:	b590      	push	{r4, r7, lr}
 8014f1e:	b08b      	sub	sp, #44	; 0x2c
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014f24:	2300      	movs	r3, #0
 8014f26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d106      	bne.n	8014f3e <tcp_zero_window_probe+0x22>
 8014f30:	4b4c      	ldr	r3, [pc, #304]	; (8015064 <tcp_zero_window_probe+0x148>)
 8014f32:	f640 024f 	movw	r2, #2127	; 0x84f
 8014f36:	494c      	ldr	r1, [pc, #304]	; (8015068 <tcp_zero_window_probe+0x14c>)
 8014f38:	484c      	ldr	r0, [pc, #304]	; (801506c <tcp_zero_window_probe+0x150>)
 8014f3a:	f005 ff07 	bl	801ad4c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f42:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014f44:	6a3b      	ldr	r3, [r7, #32]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d101      	bne.n	8014f4e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	e086      	b.n	801505c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014f54:	2bff      	cmp	r3, #255	; 0xff
 8014f56:	d007      	beq.n	8014f68 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014f5e:	3301      	adds	r3, #1
 8014f60:	b2da      	uxtb	r2, r3
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014f68:	6a3b      	ldr	r3, [r7, #32]
 8014f6a:	68db      	ldr	r3, [r3, #12]
 8014f6c:	899b      	ldrh	r3, [r3, #12]
 8014f6e:	b29b      	uxth	r3, r3
 8014f70:	4618      	mov	r0, r3
 8014f72:	f7f8 f945 	bl	800d200 <lwip_htons>
 8014f76:	4603      	mov	r3, r0
 8014f78:	b2db      	uxtb	r3, r3
 8014f7a:	f003 0301 	and.w	r3, r3, #1
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d005      	beq.n	8014f8e <tcp_zero_window_probe+0x72>
 8014f82:	6a3b      	ldr	r3, [r7, #32]
 8014f84:	891b      	ldrh	r3, [r3, #8]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d101      	bne.n	8014f8e <tcp_zero_window_probe+0x72>
 8014f8a:	2301      	movs	r3, #1
 8014f8c:	e000      	b.n	8014f90 <tcp_zero_window_probe+0x74>
 8014f8e:	2300      	movs	r3, #0
 8014f90:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014f92:	7ffb      	ldrb	r3, [r7, #31]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	bf0c      	ite	eq
 8014f98:	2301      	moveq	r3, #1
 8014f9a:	2300      	movne	r3, #0
 8014f9c:	b2db      	uxtb	r3, r3
 8014f9e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014fa4:	b299      	uxth	r1, r3
 8014fa6:	6a3b      	ldr	r3, [r7, #32]
 8014fa8:	68db      	ldr	r3, [r3, #12]
 8014faa:	685b      	ldr	r3, [r3, #4]
 8014fac:	8bba      	ldrh	r2, [r7, #28]
 8014fae:	6878      	ldr	r0, [r7, #4]
 8014fb0:	f7ff fdf8 	bl	8014ba4 <tcp_output_alloc_header>
 8014fb4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014fb6:	69bb      	ldr	r3, [r7, #24]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d102      	bne.n	8014fc2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8014fc0:	e04c      	b.n	801505c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014fc2:	69bb      	ldr	r3, [r7, #24]
 8014fc4:	685b      	ldr	r3, [r3, #4]
 8014fc6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014fc8:	7ffb      	ldrb	r3, [r7, #31]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d011      	beq.n	8014ff2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014fce:	697b      	ldr	r3, [r7, #20]
 8014fd0:	899b      	ldrh	r3, [r3, #12]
 8014fd2:	b29b      	uxth	r3, r3
 8014fd4:	b21b      	sxth	r3, r3
 8014fd6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014fda:	b21c      	sxth	r4, r3
 8014fdc:	2011      	movs	r0, #17
 8014fde:	f7f8 f90f 	bl	800d200 <lwip_htons>
 8014fe2:	4603      	mov	r3, r0
 8014fe4:	b21b      	sxth	r3, r3
 8014fe6:	4323      	orrs	r3, r4
 8014fe8:	b21b      	sxth	r3, r3
 8014fea:	b29a      	uxth	r2, r3
 8014fec:	697b      	ldr	r3, [r7, #20]
 8014fee:	819a      	strh	r2, [r3, #12]
 8014ff0:	e010      	b.n	8015014 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014ff2:	69bb      	ldr	r3, [r7, #24]
 8014ff4:	685b      	ldr	r3, [r3, #4]
 8014ff6:	3314      	adds	r3, #20
 8014ff8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014ffa:	6a3b      	ldr	r3, [r7, #32]
 8014ffc:	6858      	ldr	r0, [r3, #4]
 8014ffe:	6a3b      	ldr	r3, [r7, #32]
 8015000:	685b      	ldr	r3, [r3, #4]
 8015002:	891a      	ldrh	r2, [r3, #8]
 8015004:	6a3b      	ldr	r3, [r7, #32]
 8015006:	891b      	ldrh	r3, [r3, #8]
 8015008:	1ad3      	subs	r3, r2, r3
 801500a:	b29b      	uxth	r3, r3
 801500c:	2201      	movs	r2, #1
 801500e:	6939      	ldr	r1, [r7, #16]
 8015010:	f7f9 ff12 	bl	800ee38 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015014:	6a3b      	ldr	r3, [r7, #32]
 8015016:	68db      	ldr	r3, [r3, #12]
 8015018:	685b      	ldr	r3, [r3, #4]
 801501a:	4618      	mov	r0, r3
 801501c:	f7f8 f905 	bl	800d22a <lwip_htonl>
 8015020:	4603      	mov	r3, r0
 8015022:	3301      	adds	r3, #1
 8015024:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	1ad3      	subs	r3, r2, r3
 801502e:	2b00      	cmp	r3, #0
 8015030:	da02      	bge.n	8015038 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	68fa      	ldr	r2, [r7, #12]
 8015036:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801503c:	2200      	movs	r2, #0
 801503e:	69b9      	ldr	r1, [r7, #24]
 8015040:	6878      	ldr	r0, [r7, #4]
 8015042:	f7ff fded 	bl	8014c20 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015046:	687a      	ldr	r2, [r7, #4]
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	3304      	adds	r3, #4
 801504c:	69b9      	ldr	r1, [r7, #24]
 801504e:	6878      	ldr	r0, [r7, #4]
 8015050:	f7ff fe26 	bl	8014ca0 <tcp_output_control_segment>
 8015054:	4603      	mov	r3, r0
 8015056:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015058:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801505c:	4618      	mov	r0, r3
 801505e:	372c      	adds	r7, #44	; 0x2c
 8015060:	46bd      	mov	sp, r7
 8015062:	bd90      	pop	{r4, r7, pc}
 8015064:	0801df54 	.word	0x0801df54
 8015068:	0801e74c 	.word	0x0801e74c
 801506c:	0801dfa8 	.word	0x0801dfa8

08015070 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015070:	b580      	push	{r7, lr}
 8015072:	b082      	sub	sp, #8
 8015074:	af00      	add	r7, sp, #0
 8015076:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015078:	f7f9 ffcc 	bl	800f014 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801507c:	4b0a      	ldr	r3, [pc, #40]	; (80150a8 <tcpip_tcp_timer+0x38>)
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d103      	bne.n	801508c <tcpip_tcp_timer+0x1c>
 8015084:	4b09      	ldr	r3, [pc, #36]	; (80150ac <tcpip_tcp_timer+0x3c>)
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d005      	beq.n	8015098 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801508c:	2200      	movs	r2, #0
 801508e:	4908      	ldr	r1, [pc, #32]	; (80150b0 <tcpip_tcp_timer+0x40>)
 8015090:	20fa      	movs	r0, #250	; 0xfa
 8015092:	f000 f8f3 	bl	801527c <sys_timeout>
 8015096:	e003      	b.n	80150a0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015098:	4b06      	ldr	r3, [pc, #24]	; (80150b4 <tcpip_tcp_timer+0x44>)
 801509a:	2200      	movs	r2, #0
 801509c:	601a      	str	r2, [r3, #0]
  }
}
 801509e:	bf00      	nop
 80150a0:	bf00      	nop
 80150a2:	3708      	adds	r7, #8
 80150a4:	46bd      	mov	sp, r7
 80150a6:	bd80      	pop	{r7, pc}
 80150a8:	200120a0 	.word	0x200120a0
 80150ac:	200120b0 	.word	0x200120b0
 80150b0:	08015071 	.word	0x08015071
 80150b4:	2000b258 	.word	0x2000b258

080150b8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80150bc:	4b0a      	ldr	r3, [pc, #40]	; (80150e8 <tcp_timer_needed+0x30>)
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d10f      	bne.n	80150e4 <tcp_timer_needed+0x2c>
 80150c4:	4b09      	ldr	r3, [pc, #36]	; (80150ec <tcp_timer_needed+0x34>)
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d103      	bne.n	80150d4 <tcp_timer_needed+0x1c>
 80150cc:	4b08      	ldr	r3, [pc, #32]	; (80150f0 <tcp_timer_needed+0x38>)
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d007      	beq.n	80150e4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80150d4:	4b04      	ldr	r3, [pc, #16]	; (80150e8 <tcp_timer_needed+0x30>)
 80150d6:	2201      	movs	r2, #1
 80150d8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80150da:	2200      	movs	r2, #0
 80150dc:	4905      	ldr	r1, [pc, #20]	; (80150f4 <tcp_timer_needed+0x3c>)
 80150de:	20fa      	movs	r0, #250	; 0xfa
 80150e0:	f000 f8cc 	bl	801527c <sys_timeout>
  }
}
 80150e4:	bf00      	nop
 80150e6:	bd80      	pop	{r7, pc}
 80150e8:	2000b258 	.word	0x2000b258
 80150ec:	200120a0 	.word	0x200120a0
 80150f0:	200120b0 	.word	0x200120b0
 80150f4:	08015071 	.word	0x08015071

080150f8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80150f8:	b580      	push	{r7, lr}
 80150fa:	b086      	sub	sp, #24
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	60f8      	str	r0, [r7, #12]
 8015100:	60b9      	str	r1, [r7, #8]
 8015102:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015104:	200a      	movs	r0, #10
 8015106:	f7f8 fd31 	bl	800db6c <memp_malloc>
 801510a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801510c:	693b      	ldr	r3, [r7, #16]
 801510e:	2b00      	cmp	r3, #0
 8015110:	d109      	bne.n	8015126 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015112:	693b      	ldr	r3, [r7, #16]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d151      	bne.n	80151bc <sys_timeout_abs+0xc4>
 8015118:	4b2a      	ldr	r3, [pc, #168]	; (80151c4 <sys_timeout_abs+0xcc>)
 801511a:	22be      	movs	r2, #190	; 0xbe
 801511c:	492a      	ldr	r1, [pc, #168]	; (80151c8 <sys_timeout_abs+0xd0>)
 801511e:	482b      	ldr	r0, [pc, #172]	; (80151cc <sys_timeout_abs+0xd4>)
 8015120:	f005 fe14 	bl	801ad4c <iprintf>
    return;
 8015124:	e04a      	b.n	80151bc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015126:	693b      	ldr	r3, [r7, #16]
 8015128:	2200      	movs	r2, #0
 801512a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801512c:	693b      	ldr	r3, [r7, #16]
 801512e:	68ba      	ldr	r2, [r7, #8]
 8015130:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015132:	693b      	ldr	r3, [r7, #16]
 8015134:	687a      	ldr	r2, [r7, #4]
 8015136:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015138:	693b      	ldr	r3, [r7, #16]
 801513a:	68fa      	ldr	r2, [r7, #12]
 801513c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801513e:	4b24      	ldr	r3, [pc, #144]	; (80151d0 <sys_timeout_abs+0xd8>)
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d103      	bne.n	801514e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015146:	4a22      	ldr	r2, [pc, #136]	; (80151d0 <sys_timeout_abs+0xd8>)
 8015148:	693b      	ldr	r3, [r7, #16]
 801514a:	6013      	str	r3, [r2, #0]
    return;
 801514c:	e037      	b.n	80151be <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801514e:	693b      	ldr	r3, [r7, #16]
 8015150:	685a      	ldr	r2, [r3, #4]
 8015152:	4b1f      	ldr	r3, [pc, #124]	; (80151d0 <sys_timeout_abs+0xd8>)
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	685b      	ldr	r3, [r3, #4]
 8015158:	1ad3      	subs	r3, r2, r3
 801515a:	0fdb      	lsrs	r3, r3, #31
 801515c:	f003 0301 	and.w	r3, r3, #1
 8015160:	b2db      	uxtb	r3, r3
 8015162:	2b00      	cmp	r3, #0
 8015164:	d007      	beq.n	8015176 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8015166:	4b1a      	ldr	r3, [pc, #104]	; (80151d0 <sys_timeout_abs+0xd8>)
 8015168:	681a      	ldr	r2, [r3, #0]
 801516a:	693b      	ldr	r3, [r7, #16]
 801516c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801516e:	4a18      	ldr	r2, [pc, #96]	; (80151d0 <sys_timeout_abs+0xd8>)
 8015170:	693b      	ldr	r3, [r7, #16]
 8015172:	6013      	str	r3, [r2, #0]
 8015174:	e023      	b.n	80151be <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015176:	4b16      	ldr	r3, [pc, #88]	; (80151d0 <sys_timeout_abs+0xd8>)
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	617b      	str	r3, [r7, #20]
 801517c:	e01a      	b.n	80151b4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801517e:	697b      	ldr	r3, [r7, #20]
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d00b      	beq.n	801519e <sys_timeout_abs+0xa6>
 8015186:	693b      	ldr	r3, [r7, #16]
 8015188:	685a      	ldr	r2, [r3, #4]
 801518a:	697b      	ldr	r3, [r7, #20]
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	685b      	ldr	r3, [r3, #4]
 8015190:	1ad3      	subs	r3, r2, r3
 8015192:	0fdb      	lsrs	r3, r3, #31
 8015194:	f003 0301 	and.w	r3, r3, #1
 8015198:	b2db      	uxtb	r3, r3
 801519a:	2b00      	cmp	r3, #0
 801519c:	d007      	beq.n	80151ae <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801519e:	697b      	ldr	r3, [r7, #20]
 80151a0:	681a      	ldr	r2, [r3, #0]
 80151a2:	693b      	ldr	r3, [r7, #16]
 80151a4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80151a6:	697b      	ldr	r3, [r7, #20]
 80151a8:	693a      	ldr	r2, [r7, #16]
 80151aa:	601a      	str	r2, [r3, #0]
        break;
 80151ac:	e007      	b.n	80151be <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80151ae:	697b      	ldr	r3, [r7, #20]
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	617b      	str	r3, [r7, #20]
 80151b4:	697b      	ldr	r3, [r7, #20]
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d1e1      	bne.n	801517e <sys_timeout_abs+0x86>
 80151ba:	e000      	b.n	80151be <sys_timeout_abs+0xc6>
    return;
 80151bc:	bf00      	nop
      }
    }
  }
}
 80151be:	3718      	adds	r7, #24
 80151c0:	46bd      	mov	sp, r7
 80151c2:	bd80      	pop	{r7, pc}
 80151c4:	0801e770 	.word	0x0801e770
 80151c8:	0801e7a4 	.word	0x0801e7a4
 80151cc:	0801e7e4 	.word	0x0801e7e4
 80151d0:	2000b250 	.word	0x2000b250

080151d4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b086      	sub	sp, #24
 80151d8:	af00      	add	r7, sp, #0
 80151da:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80151e0:	697b      	ldr	r3, [r7, #20]
 80151e2:	685b      	ldr	r3, [r3, #4]
 80151e4:	4798      	blx	r3

  now = sys_now();
 80151e6:	f7ef ffff 	bl	80051e8 <sys_now>
 80151ea:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80151ec:	697b      	ldr	r3, [r7, #20]
 80151ee:	681a      	ldr	r2, [r3, #0]
 80151f0:	4b0f      	ldr	r3, [pc, #60]	; (8015230 <lwip_cyclic_timer+0x5c>)
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	4413      	add	r3, r2
 80151f6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80151f8:	68fa      	ldr	r2, [r7, #12]
 80151fa:	693b      	ldr	r3, [r7, #16]
 80151fc:	1ad3      	subs	r3, r2, r3
 80151fe:	0fdb      	lsrs	r3, r3, #31
 8015200:	f003 0301 	and.w	r3, r3, #1
 8015204:	b2db      	uxtb	r3, r3
 8015206:	2b00      	cmp	r3, #0
 8015208:	d009      	beq.n	801521e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801520a:	697b      	ldr	r3, [r7, #20]
 801520c:	681a      	ldr	r2, [r3, #0]
 801520e:	693b      	ldr	r3, [r7, #16]
 8015210:	4413      	add	r3, r2
 8015212:	687a      	ldr	r2, [r7, #4]
 8015214:	4907      	ldr	r1, [pc, #28]	; (8015234 <lwip_cyclic_timer+0x60>)
 8015216:	4618      	mov	r0, r3
 8015218:	f7ff ff6e 	bl	80150f8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801521c:	e004      	b.n	8015228 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801521e:	687a      	ldr	r2, [r7, #4]
 8015220:	4904      	ldr	r1, [pc, #16]	; (8015234 <lwip_cyclic_timer+0x60>)
 8015222:	68f8      	ldr	r0, [r7, #12]
 8015224:	f7ff ff68 	bl	80150f8 <sys_timeout_abs>
}
 8015228:	bf00      	nop
 801522a:	3718      	adds	r7, #24
 801522c:	46bd      	mov	sp, r7
 801522e:	bd80      	pop	{r7, pc}
 8015230:	2000b254 	.word	0x2000b254
 8015234:	080151d5 	.word	0x080151d5

08015238 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015238:	b580      	push	{r7, lr}
 801523a:	b082      	sub	sp, #8
 801523c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801523e:	2301      	movs	r3, #1
 8015240:	607b      	str	r3, [r7, #4]
 8015242:	e00e      	b.n	8015262 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015244:	4a0b      	ldr	r2, [pc, #44]	; (8015274 <sys_timeouts_init+0x3c>)
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	00db      	lsls	r3, r3, #3
 8015250:	4a08      	ldr	r2, [pc, #32]	; (8015274 <sys_timeouts_init+0x3c>)
 8015252:	4413      	add	r3, r2
 8015254:	461a      	mov	r2, r3
 8015256:	4908      	ldr	r1, [pc, #32]	; (8015278 <sys_timeouts_init+0x40>)
 8015258:	f000 f810 	bl	801527c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	3301      	adds	r3, #1
 8015260:	607b      	str	r3, [r7, #4]
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	2b02      	cmp	r3, #2
 8015266:	d9ed      	bls.n	8015244 <sys_timeouts_init+0xc>
  }
}
 8015268:	bf00      	nop
 801526a:	bf00      	nop
 801526c:	3708      	adds	r7, #8
 801526e:	46bd      	mov	sp, r7
 8015270:	bd80      	pop	{r7, pc}
 8015272:	bf00      	nop
 8015274:	0801f5cc 	.word	0x0801f5cc
 8015278:	080151d5 	.word	0x080151d5

0801527c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801527c:	b580      	push	{r7, lr}
 801527e:	b086      	sub	sp, #24
 8015280:	af00      	add	r7, sp, #0
 8015282:	60f8      	str	r0, [r7, #12]
 8015284:	60b9      	str	r1, [r7, #8]
 8015286:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801528e:	d306      	bcc.n	801529e <sys_timeout+0x22>
 8015290:	4b0a      	ldr	r3, [pc, #40]	; (80152bc <sys_timeout+0x40>)
 8015292:	f240 1229 	movw	r2, #297	; 0x129
 8015296:	490a      	ldr	r1, [pc, #40]	; (80152c0 <sys_timeout+0x44>)
 8015298:	480a      	ldr	r0, [pc, #40]	; (80152c4 <sys_timeout+0x48>)
 801529a:	f005 fd57 	bl	801ad4c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801529e:	f7ef ffa3 	bl	80051e8 <sys_now>
 80152a2:	4602      	mov	r2, r0
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	4413      	add	r3, r2
 80152a8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80152aa:	687a      	ldr	r2, [r7, #4]
 80152ac:	68b9      	ldr	r1, [r7, #8]
 80152ae:	6978      	ldr	r0, [r7, #20]
 80152b0:	f7ff ff22 	bl	80150f8 <sys_timeout_abs>
#endif
}
 80152b4:	bf00      	nop
 80152b6:	3718      	adds	r7, #24
 80152b8:	46bd      	mov	sp, r7
 80152ba:	bd80      	pop	{r7, pc}
 80152bc:	0801e770 	.word	0x0801e770
 80152c0:	0801e80c 	.word	0x0801e80c
 80152c4:	0801e7e4 	.word	0x0801e7e4

080152c8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b084      	sub	sp, #16
 80152cc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80152ce:	f7ef ff8b 	bl	80051e8 <sys_now>
 80152d2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80152d4:	4b17      	ldr	r3, [pc, #92]	; (8015334 <sys_check_timeouts+0x6c>)
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80152da:	68bb      	ldr	r3, [r7, #8]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d022      	beq.n	8015326 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80152e0:	68bb      	ldr	r3, [r7, #8]
 80152e2:	685b      	ldr	r3, [r3, #4]
 80152e4:	68fa      	ldr	r2, [r7, #12]
 80152e6:	1ad3      	subs	r3, r2, r3
 80152e8:	0fdb      	lsrs	r3, r3, #31
 80152ea:	f003 0301 	and.w	r3, r3, #1
 80152ee:	b2db      	uxtb	r3, r3
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d11a      	bne.n	801532a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80152f4:	68bb      	ldr	r3, [r7, #8]
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	4a0e      	ldr	r2, [pc, #56]	; (8015334 <sys_check_timeouts+0x6c>)
 80152fa:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80152fc:	68bb      	ldr	r3, [r7, #8]
 80152fe:	689b      	ldr	r3, [r3, #8]
 8015300:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8015302:	68bb      	ldr	r3, [r7, #8]
 8015304:	68db      	ldr	r3, [r3, #12]
 8015306:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8015308:	68bb      	ldr	r3, [r7, #8]
 801530a:	685b      	ldr	r3, [r3, #4]
 801530c:	4a0a      	ldr	r2, [pc, #40]	; (8015338 <sys_check_timeouts+0x70>)
 801530e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8015310:	68b9      	ldr	r1, [r7, #8]
 8015312:	200a      	movs	r0, #10
 8015314:	f7f8 fc7c 	bl	800dc10 <memp_free>
    if (handler != NULL) {
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	2b00      	cmp	r3, #0
 801531c:	d0da      	beq.n	80152d4 <sys_check_timeouts+0xc>
      handler(arg);
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	6838      	ldr	r0, [r7, #0]
 8015322:	4798      	blx	r3
  do {
 8015324:	e7d6      	b.n	80152d4 <sys_check_timeouts+0xc>
      return;
 8015326:	bf00      	nop
 8015328:	e000      	b.n	801532c <sys_check_timeouts+0x64>
      return;
 801532a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801532c:	3710      	adds	r7, #16
 801532e:	46bd      	mov	sp, r7
 8015330:	bd80      	pop	{r7, pc}
 8015332:	bf00      	nop
 8015334:	2000b250 	.word	0x2000b250
 8015338:	2000b254 	.word	0x2000b254

0801533c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801533c:	b580      	push	{r7, lr}
 801533e:	b082      	sub	sp, #8
 8015340:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8015342:	4b16      	ldr	r3, [pc, #88]	; (801539c <sys_timeouts_sleeptime+0x60>)
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d102      	bne.n	8015350 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801534a:	f04f 33ff 	mov.w	r3, #4294967295
 801534e:	e020      	b.n	8015392 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8015350:	f7ef ff4a 	bl	80051e8 <sys_now>
 8015354:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8015356:	4b11      	ldr	r3, [pc, #68]	; (801539c <sys_timeouts_sleeptime+0x60>)
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	685a      	ldr	r2, [r3, #4]
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	1ad3      	subs	r3, r2, r3
 8015360:	0fdb      	lsrs	r3, r3, #31
 8015362:	f003 0301 	and.w	r3, r3, #1
 8015366:	b2db      	uxtb	r3, r3
 8015368:	2b00      	cmp	r3, #0
 801536a:	d001      	beq.n	8015370 <sys_timeouts_sleeptime+0x34>
    return 0;
 801536c:	2300      	movs	r3, #0
 801536e:	e010      	b.n	8015392 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8015370:	4b0a      	ldr	r3, [pc, #40]	; (801539c <sys_timeouts_sleeptime+0x60>)
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	685a      	ldr	r2, [r3, #4]
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	1ad3      	subs	r3, r2, r3
 801537a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801537c:	683b      	ldr	r3, [r7, #0]
 801537e:	2b00      	cmp	r3, #0
 8015380:	da06      	bge.n	8015390 <sys_timeouts_sleeptime+0x54>
 8015382:	4b07      	ldr	r3, [pc, #28]	; (80153a0 <sys_timeouts_sleeptime+0x64>)
 8015384:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8015388:	4906      	ldr	r1, [pc, #24]	; (80153a4 <sys_timeouts_sleeptime+0x68>)
 801538a:	4807      	ldr	r0, [pc, #28]	; (80153a8 <sys_timeouts_sleeptime+0x6c>)
 801538c:	f005 fcde 	bl	801ad4c <iprintf>
    return ret;
 8015390:	683b      	ldr	r3, [r7, #0]
  }
}
 8015392:	4618      	mov	r0, r3
 8015394:	3708      	adds	r7, #8
 8015396:	46bd      	mov	sp, r7
 8015398:	bd80      	pop	{r7, pc}
 801539a:	bf00      	nop
 801539c:	2000b250 	.word	0x2000b250
 80153a0:	0801e770 	.word	0x0801e770
 80153a4:	0801e844 	.word	0x0801e844
 80153a8:	0801e7e4 	.word	0x0801e7e4

080153ac <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80153ac:	b580      	push	{r7, lr}
 80153ae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80153b0:	f005 fce4 	bl	801ad7c <rand>
 80153b4:	4603      	mov	r3, r0
 80153b6:	b29b      	uxth	r3, r3
 80153b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80153bc:	b29b      	uxth	r3, r3
 80153be:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80153c2:	b29a      	uxth	r2, r3
 80153c4:	4b01      	ldr	r3, [pc, #4]	; (80153cc <udp_init+0x20>)
 80153c6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80153c8:	bf00      	nop
 80153ca:	bd80      	pop	{r7, pc}
 80153cc:	20000018 	.word	0x20000018

080153d0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80153d0:	b480      	push	{r7}
 80153d2:	b083      	sub	sp, #12
 80153d4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80153d6:	2300      	movs	r3, #0
 80153d8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80153da:	4b17      	ldr	r3, [pc, #92]	; (8015438 <udp_new_port+0x68>)
 80153dc:	881b      	ldrh	r3, [r3, #0]
 80153de:	1c5a      	adds	r2, r3, #1
 80153e0:	b291      	uxth	r1, r2
 80153e2:	4a15      	ldr	r2, [pc, #84]	; (8015438 <udp_new_port+0x68>)
 80153e4:	8011      	strh	r1, [r2, #0]
 80153e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80153ea:	4293      	cmp	r3, r2
 80153ec:	d103      	bne.n	80153f6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80153ee:	4b12      	ldr	r3, [pc, #72]	; (8015438 <udp_new_port+0x68>)
 80153f0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80153f4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80153f6:	4b11      	ldr	r3, [pc, #68]	; (801543c <udp_new_port+0x6c>)
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	603b      	str	r3, [r7, #0]
 80153fc:	e011      	b.n	8015422 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80153fe:	683b      	ldr	r3, [r7, #0]
 8015400:	8a5a      	ldrh	r2, [r3, #18]
 8015402:	4b0d      	ldr	r3, [pc, #52]	; (8015438 <udp_new_port+0x68>)
 8015404:	881b      	ldrh	r3, [r3, #0]
 8015406:	429a      	cmp	r2, r3
 8015408:	d108      	bne.n	801541c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801540a:	88fb      	ldrh	r3, [r7, #6]
 801540c:	3301      	adds	r3, #1
 801540e:	80fb      	strh	r3, [r7, #6]
 8015410:	88fb      	ldrh	r3, [r7, #6]
 8015412:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015416:	d3e0      	bcc.n	80153da <udp_new_port+0xa>
        return 0;
 8015418:	2300      	movs	r3, #0
 801541a:	e007      	b.n	801542c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801541c:	683b      	ldr	r3, [r7, #0]
 801541e:	68db      	ldr	r3, [r3, #12]
 8015420:	603b      	str	r3, [r7, #0]
 8015422:	683b      	ldr	r3, [r7, #0]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d1ea      	bne.n	80153fe <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015428:	4b03      	ldr	r3, [pc, #12]	; (8015438 <udp_new_port+0x68>)
 801542a:	881b      	ldrh	r3, [r3, #0]
}
 801542c:	4618      	mov	r0, r3
 801542e:	370c      	adds	r7, #12
 8015430:	46bd      	mov	sp, r7
 8015432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015436:	4770      	bx	lr
 8015438:	20000018 	.word	0x20000018
 801543c:	200120b8 	.word	0x200120b8

08015440 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b084      	sub	sp, #16
 8015444:	af00      	add	r7, sp, #0
 8015446:	60f8      	str	r0, [r7, #12]
 8015448:	60b9      	str	r1, [r7, #8]
 801544a:	4613      	mov	r3, r2
 801544c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	2b00      	cmp	r3, #0
 8015452:	d105      	bne.n	8015460 <udp_input_local_match+0x20>
 8015454:	4b27      	ldr	r3, [pc, #156]	; (80154f4 <udp_input_local_match+0xb4>)
 8015456:	2287      	movs	r2, #135	; 0x87
 8015458:	4927      	ldr	r1, [pc, #156]	; (80154f8 <udp_input_local_match+0xb8>)
 801545a:	4828      	ldr	r0, [pc, #160]	; (80154fc <udp_input_local_match+0xbc>)
 801545c:	f005 fc76 	bl	801ad4c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015460:	68bb      	ldr	r3, [r7, #8]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d105      	bne.n	8015472 <udp_input_local_match+0x32>
 8015466:	4b23      	ldr	r3, [pc, #140]	; (80154f4 <udp_input_local_match+0xb4>)
 8015468:	2288      	movs	r2, #136	; 0x88
 801546a:	4925      	ldr	r1, [pc, #148]	; (8015500 <udp_input_local_match+0xc0>)
 801546c:	4823      	ldr	r0, [pc, #140]	; (80154fc <udp_input_local_match+0xbc>)
 801546e:	f005 fc6d 	bl	801ad4c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	7a1b      	ldrb	r3, [r3, #8]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d00b      	beq.n	8015492 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	7a1a      	ldrb	r2, [r3, #8]
 801547e:	4b21      	ldr	r3, [pc, #132]	; (8015504 <udp_input_local_match+0xc4>)
 8015480:	685b      	ldr	r3, [r3, #4]
 8015482:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015486:	3301      	adds	r3, #1
 8015488:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801548a:	429a      	cmp	r2, r3
 801548c:	d001      	beq.n	8015492 <udp_input_local_match+0x52>
    return 0;
 801548e:	2300      	movs	r3, #0
 8015490:	e02b      	b.n	80154ea <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015492:	79fb      	ldrb	r3, [r7, #7]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d018      	beq.n	80154ca <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d013      	beq.n	80154c6 <udp_input_local_match+0x86>
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d00f      	beq.n	80154c6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80154a6:	4b17      	ldr	r3, [pc, #92]	; (8015504 <udp_input_local_match+0xc4>)
 80154a8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80154aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154ae:	d00a      	beq.n	80154c6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	681a      	ldr	r2, [r3, #0]
 80154b4:	4b13      	ldr	r3, [pc, #76]	; (8015504 <udp_input_local_match+0xc4>)
 80154b6:	695b      	ldr	r3, [r3, #20]
 80154b8:	405a      	eors	r2, r3
 80154ba:	68bb      	ldr	r3, [r7, #8]
 80154bc:	3308      	adds	r3, #8
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d110      	bne.n	80154e8 <udp_input_local_match+0xa8>
          return 1;
 80154c6:	2301      	movs	r3, #1
 80154c8:	e00f      	b.n	80154ea <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d009      	beq.n	80154e4 <udp_input_local_match+0xa4>
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d005      	beq.n	80154e4 <udp_input_local_match+0xa4>
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	681a      	ldr	r2, [r3, #0]
 80154dc:	4b09      	ldr	r3, [pc, #36]	; (8015504 <udp_input_local_match+0xc4>)
 80154de:	695b      	ldr	r3, [r3, #20]
 80154e0:	429a      	cmp	r2, r3
 80154e2:	d101      	bne.n	80154e8 <udp_input_local_match+0xa8>
        return 1;
 80154e4:	2301      	movs	r3, #1
 80154e6:	e000      	b.n	80154ea <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80154e8:	2300      	movs	r3, #0
}
 80154ea:	4618      	mov	r0, r3
 80154ec:	3710      	adds	r7, #16
 80154ee:	46bd      	mov	sp, r7
 80154f0:	bd80      	pop	{r7, pc}
 80154f2:	bf00      	nop
 80154f4:	0801e858 	.word	0x0801e858
 80154f8:	0801e888 	.word	0x0801e888
 80154fc:	0801e8ac 	.word	0x0801e8ac
 8015500:	0801e8d4 	.word	0x0801e8d4
 8015504:	2000e98c 	.word	0x2000e98c

08015508 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015508:	b590      	push	{r4, r7, lr}
 801550a:	b08d      	sub	sp, #52	; 0x34
 801550c:	af02      	add	r7, sp, #8
 801550e:	6078      	str	r0, [r7, #4]
 8015510:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015512:	2300      	movs	r3, #0
 8015514:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d105      	bne.n	8015528 <udp_input+0x20>
 801551c:	4b7c      	ldr	r3, [pc, #496]	; (8015710 <udp_input+0x208>)
 801551e:	22cf      	movs	r2, #207	; 0xcf
 8015520:	497c      	ldr	r1, [pc, #496]	; (8015714 <udp_input+0x20c>)
 8015522:	487d      	ldr	r0, [pc, #500]	; (8015718 <udp_input+0x210>)
 8015524:	f005 fc12 	bl	801ad4c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015528:	683b      	ldr	r3, [r7, #0]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d105      	bne.n	801553a <udp_input+0x32>
 801552e:	4b78      	ldr	r3, [pc, #480]	; (8015710 <udp_input+0x208>)
 8015530:	22d0      	movs	r2, #208	; 0xd0
 8015532:	497a      	ldr	r1, [pc, #488]	; (801571c <udp_input+0x214>)
 8015534:	4878      	ldr	r0, [pc, #480]	; (8015718 <udp_input+0x210>)
 8015536:	f005 fc09 	bl	801ad4c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	895b      	ldrh	r3, [r3, #10]
 801553e:	2b07      	cmp	r3, #7
 8015540:	d803      	bhi.n	801554a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015542:	6878      	ldr	r0, [r7, #4]
 8015544:	f7f9 fa72 	bl	800ea2c <pbuf_free>
    goto end;
 8015548:	e0de      	b.n	8015708 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	685b      	ldr	r3, [r3, #4]
 801554e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015550:	4b73      	ldr	r3, [pc, #460]	; (8015720 <udp_input+0x218>)
 8015552:	695b      	ldr	r3, [r3, #20]
 8015554:	4a72      	ldr	r2, [pc, #456]	; (8015720 <udp_input+0x218>)
 8015556:	6812      	ldr	r2, [r2, #0]
 8015558:	4611      	mov	r1, r2
 801555a:	4618      	mov	r0, r3
 801555c:	f001 ff9a 	bl	8017494 <ip4_addr_isbroadcast_u32>
 8015560:	4603      	mov	r3, r0
 8015562:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015564:	697b      	ldr	r3, [r7, #20]
 8015566:	881b      	ldrh	r3, [r3, #0]
 8015568:	b29b      	uxth	r3, r3
 801556a:	4618      	mov	r0, r3
 801556c:	f7f7 fe48 	bl	800d200 <lwip_htons>
 8015570:	4603      	mov	r3, r0
 8015572:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015574:	697b      	ldr	r3, [r7, #20]
 8015576:	885b      	ldrh	r3, [r3, #2]
 8015578:	b29b      	uxth	r3, r3
 801557a:	4618      	mov	r0, r3
 801557c:	f7f7 fe40 	bl	800d200 <lwip_htons>
 8015580:	4603      	mov	r3, r0
 8015582:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015584:	2300      	movs	r3, #0
 8015586:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015588:	2300      	movs	r3, #0
 801558a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801558c:	2300      	movs	r3, #0
 801558e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015590:	4b64      	ldr	r3, [pc, #400]	; (8015724 <udp_input+0x21c>)
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	627b      	str	r3, [r7, #36]	; 0x24
 8015596:	e054      	b.n	8015642 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801559a:	8a5b      	ldrh	r3, [r3, #18]
 801559c:	89fa      	ldrh	r2, [r7, #14]
 801559e:	429a      	cmp	r2, r3
 80155a0:	d14a      	bne.n	8015638 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80155a2:	7cfb      	ldrb	r3, [r7, #19]
 80155a4:	461a      	mov	r2, r3
 80155a6:	6839      	ldr	r1, [r7, #0]
 80155a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80155aa:	f7ff ff49 	bl	8015440 <udp_input_local_match>
 80155ae:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d041      	beq.n	8015638 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80155b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155b6:	7c1b      	ldrb	r3, [r3, #16]
 80155b8:	f003 0304 	and.w	r3, r3, #4
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d11d      	bne.n	80155fc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80155c0:	69fb      	ldr	r3, [r7, #28]
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d102      	bne.n	80155cc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80155c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155c8:	61fb      	str	r3, [r7, #28]
 80155ca:	e017      	b.n	80155fc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80155cc:	7cfb      	ldrb	r3, [r7, #19]
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d014      	beq.n	80155fc <udp_input+0xf4>
 80155d2:	4b53      	ldr	r3, [pc, #332]	; (8015720 <udp_input+0x218>)
 80155d4:	695b      	ldr	r3, [r3, #20]
 80155d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155da:	d10f      	bne.n	80155fc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80155dc:	69fb      	ldr	r3, [r7, #28]
 80155de:	681a      	ldr	r2, [r3, #0]
 80155e0:	683b      	ldr	r3, [r7, #0]
 80155e2:	3304      	adds	r3, #4
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	429a      	cmp	r2, r3
 80155e8:	d008      	beq.n	80155fc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80155ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155ec:	681a      	ldr	r2, [r3, #0]
 80155ee:	683b      	ldr	r3, [r7, #0]
 80155f0:	3304      	adds	r3, #4
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	429a      	cmp	r2, r3
 80155f6:	d101      	bne.n	80155fc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80155f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155fa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80155fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155fe:	8a9b      	ldrh	r3, [r3, #20]
 8015600:	8a3a      	ldrh	r2, [r7, #16]
 8015602:	429a      	cmp	r2, r3
 8015604:	d118      	bne.n	8015638 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015608:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801560a:	2b00      	cmp	r3, #0
 801560c:	d005      	beq.n	801561a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015610:	685a      	ldr	r2, [r3, #4]
 8015612:	4b43      	ldr	r3, [pc, #268]	; (8015720 <udp_input+0x218>)
 8015614:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015616:	429a      	cmp	r2, r3
 8015618:	d10e      	bne.n	8015638 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801561a:	6a3b      	ldr	r3, [r7, #32]
 801561c:	2b00      	cmp	r3, #0
 801561e:	d014      	beq.n	801564a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015622:	68da      	ldr	r2, [r3, #12]
 8015624:	6a3b      	ldr	r3, [r7, #32]
 8015626:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015628:	4b3e      	ldr	r3, [pc, #248]	; (8015724 <udp_input+0x21c>)
 801562a:	681a      	ldr	r2, [r3, #0]
 801562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801562e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015630:	4a3c      	ldr	r2, [pc, #240]	; (8015724 <udp_input+0x21c>)
 8015632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015634:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015636:	e008      	b.n	801564a <udp_input+0x142>
      }
    }

    prev = pcb;
 8015638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801563a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801563c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801563e:	68db      	ldr	r3, [r3, #12]
 8015640:	627b      	str	r3, [r7, #36]	; 0x24
 8015642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015644:	2b00      	cmp	r3, #0
 8015646:	d1a7      	bne.n	8015598 <udp_input+0x90>
 8015648:	e000      	b.n	801564c <udp_input+0x144>
        break;
 801564a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801564e:	2b00      	cmp	r3, #0
 8015650:	d101      	bne.n	8015656 <udp_input+0x14e>
    pcb = uncon_pcb;
 8015652:	69fb      	ldr	r3, [r7, #28]
 8015654:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015658:	2b00      	cmp	r3, #0
 801565a:	d002      	beq.n	8015662 <udp_input+0x15a>
    for_us = 1;
 801565c:	2301      	movs	r3, #1
 801565e:	76fb      	strb	r3, [r7, #27]
 8015660:	e00a      	b.n	8015678 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015662:	683b      	ldr	r3, [r7, #0]
 8015664:	3304      	adds	r3, #4
 8015666:	681a      	ldr	r2, [r3, #0]
 8015668:	4b2d      	ldr	r3, [pc, #180]	; (8015720 <udp_input+0x218>)
 801566a:	695b      	ldr	r3, [r3, #20]
 801566c:	429a      	cmp	r2, r3
 801566e:	bf0c      	ite	eq
 8015670:	2301      	moveq	r3, #1
 8015672:	2300      	movne	r3, #0
 8015674:	b2db      	uxtb	r3, r3
 8015676:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015678:	7efb      	ldrb	r3, [r7, #27]
 801567a:	2b00      	cmp	r3, #0
 801567c:	d041      	beq.n	8015702 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801567e:	2108      	movs	r1, #8
 8015680:	6878      	ldr	r0, [r7, #4]
 8015682:	f7f9 f91b 	bl	800e8bc <pbuf_remove_header>
 8015686:	4603      	mov	r3, r0
 8015688:	2b00      	cmp	r3, #0
 801568a:	d00a      	beq.n	80156a2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801568c:	4b20      	ldr	r3, [pc, #128]	; (8015710 <udp_input+0x208>)
 801568e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8015692:	4925      	ldr	r1, [pc, #148]	; (8015728 <udp_input+0x220>)
 8015694:	4820      	ldr	r0, [pc, #128]	; (8015718 <udp_input+0x210>)
 8015696:	f005 fb59 	bl	801ad4c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801569a:	6878      	ldr	r0, [r7, #4]
 801569c:	f7f9 f9c6 	bl	800ea2c <pbuf_free>
      goto end;
 80156a0:	e032      	b.n	8015708 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80156a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d012      	beq.n	80156ce <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80156a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156aa:	699b      	ldr	r3, [r3, #24]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d00a      	beq.n	80156c6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80156b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156b2:	699c      	ldr	r4, [r3, #24]
 80156b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156b6:	69d8      	ldr	r0, [r3, #28]
 80156b8:	8a3b      	ldrh	r3, [r7, #16]
 80156ba:	9300      	str	r3, [sp, #0]
 80156bc:	4b1b      	ldr	r3, [pc, #108]	; (801572c <udp_input+0x224>)
 80156be:	687a      	ldr	r2, [r7, #4]
 80156c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80156c2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80156c4:	e021      	b.n	801570a <udp_input+0x202>
        pbuf_free(p);
 80156c6:	6878      	ldr	r0, [r7, #4]
 80156c8:	f7f9 f9b0 	bl	800ea2c <pbuf_free>
        goto end;
 80156cc:	e01c      	b.n	8015708 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80156ce:	7cfb      	ldrb	r3, [r7, #19]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d112      	bne.n	80156fa <udp_input+0x1f2>
 80156d4:	4b12      	ldr	r3, [pc, #72]	; (8015720 <udp_input+0x218>)
 80156d6:	695b      	ldr	r3, [r3, #20]
 80156d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80156dc:	2be0      	cmp	r3, #224	; 0xe0
 80156de:	d00c      	beq.n	80156fa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80156e0:	4b0f      	ldr	r3, [pc, #60]	; (8015720 <udp_input+0x218>)
 80156e2:	899b      	ldrh	r3, [r3, #12]
 80156e4:	3308      	adds	r3, #8
 80156e6:	b29b      	uxth	r3, r3
 80156e8:	b21b      	sxth	r3, r3
 80156ea:	4619      	mov	r1, r3
 80156ec:	6878      	ldr	r0, [r7, #4]
 80156ee:	f7f9 f958 	bl	800e9a2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80156f2:	2103      	movs	r1, #3
 80156f4:	6878      	ldr	r0, [r7, #4]
 80156f6:	f001 fbad 	bl	8016e54 <icmp_dest_unreach>
      pbuf_free(p);
 80156fa:	6878      	ldr	r0, [r7, #4]
 80156fc:	f7f9 f996 	bl	800ea2c <pbuf_free>
  return;
 8015700:	e003      	b.n	801570a <udp_input+0x202>
    pbuf_free(p);
 8015702:	6878      	ldr	r0, [r7, #4]
 8015704:	f7f9 f992 	bl	800ea2c <pbuf_free>
  return;
 8015708:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801570a:	372c      	adds	r7, #44	; 0x2c
 801570c:	46bd      	mov	sp, r7
 801570e:	bd90      	pop	{r4, r7, pc}
 8015710:	0801e858 	.word	0x0801e858
 8015714:	0801e8fc 	.word	0x0801e8fc
 8015718:	0801e8ac 	.word	0x0801e8ac
 801571c:	0801e914 	.word	0x0801e914
 8015720:	2000e98c 	.word	0x2000e98c
 8015724:	200120b8 	.word	0x200120b8
 8015728:	0801e930 	.word	0x0801e930
 801572c:	2000e99c 	.word	0x2000e99c

08015730 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b082      	sub	sp, #8
 8015734:	af00      	add	r7, sp, #0
 8015736:	6078      	str	r0, [r7, #4]
 8015738:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	2b00      	cmp	r3, #0
 801573e:	d109      	bne.n	8015754 <udp_send+0x24>
 8015740:	4b11      	ldr	r3, [pc, #68]	; (8015788 <udp_send+0x58>)
 8015742:	f240 12d5 	movw	r2, #469	; 0x1d5
 8015746:	4911      	ldr	r1, [pc, #68]	; (801578c <udp_send+0x5c>)
 8015748:	4811      	ldr	r0, [pc, #68]	; (8015790 <udp_send+0x60>)
 801574a:	f005 faff 	bl	801ad4c <iprintf>
 801574e:	f06f 030f 	mvn.w	r3, #15
 8015752:	e015      	b.n	8015780 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8015754:	683b      	ldr	r3, [r7, #0]
 8015756:	2b00      	cmp	r3, #0
 8015758:	d109      	bne.n	801576e <udp_send+0x3e>
 801575a:	4b0b      	ldr	r3, [pc, #44]	; (8015788 <udp_send+0x58>)
 801575c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8015760:	490c      	ldr	r1, [pc, #48]	; (8015794 <udp_send+0x64>)
 8015762:	480b      	ldr	r0, [pc, #44]	; (8015790 <udp_send+0x60>)
 8015764:	f005 faf2 	bl	801ad4c <iprintf>
 8015768:	f06f 030f 	mvn.w	r3, #15
 801576c:	e008      	b.n	8015780 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	1d1a      	adds	r2, r3, #4
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	8a9b      	ldrh	r3, [r3, #20]
 8015776:	6839      	ldr	r1, [r7, #0]
 8015778:	6878      	ldr	r0, [r7, #4]
 801577a:	f000 f80d 	bl	8015798 <udp_sendto>
 801577e:	4603      	mov	r3, r0
}
 8015780:	4618      	mov	r0, r3
 8015782:	3708      	adds	r7, #8
 8015784:	46bd      	mov	sp, r7
 8015786:	bd80      	pop	{r7, pc}
 8015788:	0801e858 	.word	0x0801e858
 801578c:	0801e94c 	.word	0x0801e94c
 8015790:	0801e8ac 	.word	0x0801e8ac
 8015794:	0801e964 	.word	0x0801e964

08015798 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8015798:	b580      	push	{r7, lr}
 801579a:	b088      	sub	sp, #32
 801579c:	af02      	add	r7, sp, #8
 801579e:	60f8      	str	r0, [r7, #12]
 80157a0:	60b9      	str	r1, [r7, #8]
 80157a2:	607a      	str	r2, [r7, #4]
 80157a4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d109      	bne.n	80157c0 <udp_sendto+0x28>
 80157ac:	4b23      	ldr	r3, [pc, #140]	; (801583c <udp_sendto+0xa4>)
 80157ae:	f44f 7206 	mov.w	r2, #536	; 0x218
 80157b2:	4923      	ldr	r1, [pc, #140]	; (8015840 <udp_sendto+0xa8>)
 80157b4:	4823      	ldr	r0, [pc, #140]	; (8015844 <udp_sendto+0xac>)
 80157b6:	f005 fac9 	bl	801ad4c <iprintf>
 80157ba:	f06f 030f 	mvn.w	r3, #15
 80157be:	e038      	b.n	8015832 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80157c0:	68bb      	ldr	r3, [r7, #8]
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d109      	bne.n	80157da <udp_sendto+0x42>
 80157c6:	4b1d      	ldr	r3, [pc, #116]	; (801583c <udp_sendto+0xa4>)
 80157c8:	f240 2219 	movw	r2, #537	; 0x219
 80157cc:	491e      	ldr	r1, [pc, #120]	; (8015848 <udp_sendto+0xb0>)
 80157ce:	481d      	ldr	r0, [pc, #116]	; (8015844 <udp_sendto+0xac>)
 80157d0:	f005 fabc 	bl	801ad4c <iprintf>
 80157d4:	f06f 030f 	mvn.w	r3, #15
 80157d8:	e02b      	b.n	8015832 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d109      	bne.n	80157f4 <udp_sendto+0x5c>
 80157e0:	4b16      	ldr	r3, [pc, #88]	; (801583c <udp_sendto+0xa4>)
 80157e2:	f240 221a 	movw	r2, #538	; 0x21a
 80157e6:	4919      	ldr	r1, [pc, #100]	; (801584c <udp_sendto+0xb4>)
 80157e8:	4816      	ldr	r0, [pc, #88]	; (8015844 <udp_sendto+0xac>)
 80157ea:	f005 faaf 	bl	801ad4c <iprintf>
 80157ee:	f06f 030f 	mvn.w	r3, #15
 80157f2:	e01e      	b.n	8015832 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	7a1b      	ldrb	r3, [r3, #8]
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d006      	beq.n	801580a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	7a1b      	ldrb	r3, [r3, #8]
 8015800:	4618      	mov	r0, r3
 8015802:	f7f8 fd1b 	bl	800e23c <netif_get_by_index>
 8015806:	6178      	str	r0, [r7, #20]
 8015808:	e003      	b.n	8015812 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801580a:	6878      	ldr	r0, [r7, #4]
 801580c:	f001 fbac 	bl	8016f68 <ip4_route>
 8015810:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8015812:	697b      	ldr	r3, [r7, #20]
 8015814:	2b00      	cmp	r3, #0
 8015816:	d102      	bne.n	801581e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8015818:	f06f 0303 	mvn.w	r3, #3
 801581c:	e009      	b.n	8015832 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801581e:	887a      	ldrh	r2, [r7, #2]
 8015820:	697b      	ldr	r3, [r7, #20]
 8015822:	9300      	str	r3, [sp, #0]
 8015824:	4613      	mov	r3, r2
 8015826:	687a      	ldr	r2, [r7, #4]
 8015828:	68b9      	ldr	r1, [r7, #8]
 801582a:	68f8      	ldr	r0, [r7, #12]
 801582c:	f000 f810 	bl	8015850 <udp_sendto_if>
 8015830:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015832:	4618      	mov	r0, r3
 8015834:	3718      	adds	r7, #24
 8015836:	46bd      	mov	sp, r7
 8015838:	bd80      	pop	{r7, pc}
 801583a:	bf00      	nop
 801583c:	0801e858 	.word	0x0801e858
 8015840:	0801e97c 	.word	0x0801e97c
 8015844:	0801e8ac 	.word	0x0801e8ac
 8015848:	0801e994 	.word	0x0801e994
 801584c:	0801e9b0 	.word	0x0801e9b0

08015850 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8015850:	b580      	push	{r7, lr}
 8015852:	b088      	sub	sp, #32
 8015854:	af02      	add	r7, sp, #8
 8015856:	60f8      	str	r0, [r7, #12]
 8015858:	60b9      	str	r1, [r7, #8]
 801585a:	607a      	str	r2, [r7, #4]
 801585c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	2b00      	cmp	r3, #0
 8015862:	d109      	bne.n	8015878 <udp_sendto_if+0x28>
 8015864:	4b2e      	ldr	r3, [pc, #184]	; (8015920 <udp_sendto_if+0xd0>)
 8015866:	f44f 7220 	mov.w	r2, #640	; 0x280
 801586a:	492e      	ldr	r1, [pc, #184]	; (8015924 <udp_sendto_if+0xd4>)
 801586c:	482e      	ldr	r0, [pc, #184]	; (8015928 <udp_sendto_if+0xd8>)
 801586e:	f005 fa6d 	bl	801ad4c <iprintf>
 8015872:	f06f 030f 	mvn.w	r3, #15
 8015876:	e04f      	b.n	8015918 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015878:	68bb      	ldr	r3, [r7, #8]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d109      	bne.n	8015892 <udp_sendto_if+0x42>
 801587e:	4b28      	ldr	r3, [pc, #160]	; (8015920 <udp_sendto_if+0xd0>)
 8015880:	f240 2281 	movw	r2, #641	; 0x281
 8015884:	4929      	ldr	r1, [pc, #164]	; (801592c <udp_sendto_if+0xdc>)
 8015886:	4828      	ldr	r0, [pc, #160]	; (8015928 <udp_sendto_if+0xd8>)
 8015888:	f005 fa60 	bl	801ad4c <iprintf>
 801588c:	f06f 030f 	mvn.w	r3, #15
 8015890:	e042      	b.n	8015918 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	2b00      	cmp	r3, #0
 8015896:	d109      	bne.n	80158ac <udp_sendto_if+0x5c>
 8015898:	4b21      	ldr	r3, [pc, #132]	; (8015920 <udp_sendto_if+0xd0>)
 801589a:	f240 2282 	movw	r2, #642	; 0x282
 801589e:	4924      	ldr	r1, [pc, #144]	; (8015930 <udp_sendto_if+0xe0>)
 80158a0:	4821      	ldr	r0, [pc, #132]	; (8015928 <udp_sendto_if+0xd8>)
 80158a2:	f005 fa53 	bl	801ad4c <iprintf>
 80158a6:	f06f 030f 	mvn.w	r3, #15
 80158aa:	e035      	b.n	8015918 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80158ac:	6a3b      	ldr	r3, [r7, #32]
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d109      	bne.n	80158c6 <udp_sendto_if+0x76>
 80158b2:	4b1b      	ldr	r3, [pc, #108]	; (8015920 <udp_sendto_if+0xd0>)
 80158b4:	f240 2283 	movw	r2, #643	; 0x283
 80158b8:	491e      	ldr	r1, [pc, #120]	; (8015934 <udp_sendto_if+0xe4>)
 80158ba:	481b      	ldr	r0, [pc, #108]	; (8015928 <udp_sendto_if+0xd8>)
 80158bc:	f005 fa46 	bl	801ad4c <iprintf>
 80158c0:	f06f 030f 	mvn.w	r3, #15
 80158c4:	e028      	b.n	8015918 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d009      	beq.n	80158e0 <udp_sendto_if+0x90>
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d005      	beq.n	80158e0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80158dc:	2be0      	cmp	r3, #224	; 0xe0
 80158de:	d103      	bne.n	80158e8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80158e0:	6a3b      	ldr	r3, [r7, #32]
 80158e2:	3304      	adds	r3, #4
 80158e4:	617b      	str	r3, [r7, #20]
 80158e6:	e00b      	b.n	8015900 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	681a      	ldr	r2, [r3, #0]
 80158ec:	6a3b      	ldr	r3, [r7, #32]
 80158ee:	3304      	adds	r3, #4
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	429a      	cmp	r2, r3
 80158f4:	d002      	beq.n	80158fc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80158f6:	f06f 0303 	mvn.w	r3, #3
 80158fa:	e00d      	b.n	8015918 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8015900:	887a      	ldrh	r2, [r7, #2]
 8015902:	697b      	ldr	r3, [r7, #20]
 8015904:	9301      	str	r3, [sp, #4]
 8015906:	6a3b      	ldr	r3, [r7, #32]
 8015908:	9300      	str	r3, [sp, #0]
 801590a:	4613      	mov	r3, r2
 801590c:	687a      	ldr	r2, [r7, #4]
 801590e:	68b9      	ldr	r1, [r7, #8]
 8015910:	68f8      	ldr	r0, [r7, #12]
 8015912:	f000 f811 	bl	8015938 <udp_sendto_if_src>
 8015916:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015918:	4618      	mov	r0, r3
 801591a:	3718      	adds	r7, #24
 801591c:	46bd      	mov	sp, r7
 801591e:	bd80      	pop	{r7, pc}
 8015920:	0801e858 	.word	0x0801e858
 8015924:	0801e9cc 	.word	0x0801e9cc
 8015928:	0801e8ac 	.word	0x0801e8ac
 801592c:	0801e9e8 	.word	0x0801e9e8
 8015930:	0801ea04 	.word	0x0801ea04
 8015934:	0801ea24 	.word	0x0801ea24

08015938 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8015938:	b580      	push	{r7, lr}
 801593a:	b08c      	sub	sp, #48	; 0x30
 801593c:	af04      	add	r7, sp, #16
 801593e:	60f8      	str	r0, [r7, #12]
 8015940:	60b9      	str	r1, [r7, #8]
 8015942:	607a      	str	r2, [r7, #4]
 8015944:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	2b00      	cmp	r3, #0
 801594a:	d109      	bne.n	8015960 <udp_sendto_if_src+0x28>
 801594c:	4b65      	ldr	r3, [pc, #404]	; (8015ae4 <udp_sendto_if_src+0x1ac>)
 801594e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8015952:	4965      	ldr	r1, [pc, #404]	; (8015ae8 <udp_sendto_if_src+0x1b0>)
 8015954:	4865      	ldr	r0, [pc, #404]	; (8015aec <udp_sendto_if_src+0x1b4>)
 8015956:	f005 f9f9 	bl	801ad4c <iprintf>
 801595a:	f06f 030f 	mvn.w	r3, #15
 801595e:	e0bc      	b.n	8015ada <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8015960:	68bb      	ldr	r3, [r7, #8]
 8015962:	2b00      	cmp	r3, #0
 8015964:	d109      	bne.n	801597a <udp_sendto_if_src+0x42>
 8015966:	4b5f      	ldr	r3, [pc, #380]	; (8015ae4 <udp_sendto_if_src+0x1ac>)
 8015968:	f240 22d2 	movw	r2, #722	; 0x2d2
 801596c:	4960      	ldr	r1, [pc, #384]	; (8015af0 <udp_sendto_if_src+0x1b8>)
 801596e:	485f      	ldr	r0, [pc, #380]	; (8015aec <udp_sendto_if_src+0x1b4>)
 8015970:	f005 f9ec 	bl	801ad4c <iprintf>
 8015974:	f06f 030f 	mvn.w	r3, #15
 8015978:	e0af      	b.n	8015ada <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	2b00      	cmp	r3, #0
 801597e:	d109      	bne.n	8015994 <udp_sendto_if_src+0x5c>
 8015980:	4b58      	ldr	r3, [pc, #352]	; (8015ae4 <udp_sendto_if_src+0x1ac>)
 8015982:	f240 22d3 	movw	r2, #723	; 0x2d3
 8015986:	495b      	ldr	r1, [pc, #364]	; (8015af4 <udp_sendto_if_src+0x1bc>)
 8015988:	4858      	ldr	r0, [pc, #352]	; (8015aec <udp_sendto_if_src+0x1b4>)
 801598a:	f005 f9df 	bl	801ad4c <iprintf>
 801598e:	f06f 030f 	mvn.w	r3, #15
 8015992:	e0a2      	b.n	8015ada <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8015994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015996:	2b00      	cmp	r3, #0
 8015998:	d109      	bne.n	80159ae <udp_sendto_if_src+0x76>
 801599a:	4b52      	ldr	r3, [pc, #328]	; (8015ae4 <udp_sendto_if_src+0x1ac>)
 801599c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80159a0:	4955      	ldr	r1, [pc, #340]	; (8015af8 <udp_sendto_if_src+0x1c0>)
 80159a2:	4852      	ldr	r0, [pc, #328]	; (8015aec <udp_sendto_if_src+0x1b4>)
 80159a4:	f005 f9d2 	bl	801ad4c <iprintf>
 80159a8:	f06f 030f 	mvn.w	r3, #15
 80159ac:	e095      	b.n	8015ada <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80159ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d109      	bne.n	80159c8 <udp_sendto_if_src+0x90>
 80159b4:	4b4b      	ldr	r3, [pc, #300]	; (8015ae4 <udp_sendto_if_src+0x1ac>)
 80159b6:	f240 22d5 	movw	r2, #725	; 0x2d5
 80159ba:	4950      	ldr	r1, [pc, #320]	; (8015afc <udp_sendto_if_src+0x1c4>)
 80159bc:	484b      	ldr	r0, [pc, #300]	; (8015aec <udp_sendto_if_src+0x1b4>)
 80159be:	f005 f9c5 	bl	801ad4c <iprintf>
 80159c2:	f06f 030f 	mvn.w	r3, #15
 80159c6:	e088      	b.n	8015ada <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	8a5b      	ldrh	r3, [r3, #18]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d10f      	bne.n	80159f0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80159d0:	68f9      	ldr	r1, [r7, #12]
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	8a5b      	ldrh	r3, [r3, #18]
 80159d6:	461a      	mov	r2, r3
 80159d8:	68f8      	ldr	r0, [r7, #12]
 80159da:	f000 f893 	bl	8015b04 <udp_bind>
 80159de:	4603      	mov	r3, r0
 80159e0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80159e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d002      	beq.n	80159f0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80159ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80159ee:	e074      	b.n	8015ada <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80159f0:	68bb      	ldr	r3, [r7, #8]
 80159f2:	891b      	ldrh	r3, [r3, #8]
 80159f4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80159f8:	4293      	cmp	r3, r2
 80159fa:	d902      	bls.n	8015a02 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80159fc:	f04f 33ff 	mov.w	r3, #4294967295
 8015a00:	e06b      	b.n	8015ada <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8015a02:	2108      	movs	r1, #8
 8015a04:	68b8      	ldr	r0, [r7, #8]
 8015a06:	f7f8 ff49 	bl	800e89c <pbuf_add_header>
 8015a0a:	4603      	mov	r3, r0
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d015      	beq.n	8015a3c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8015a10:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015a14:	2108      	movs	r1, #8
 8015a16:	2022      	movs	r0, #34	; 0x22
 8015a18:	f7f8 fcf2 	bl	800e400 <pbuf_alloc>
 8015a1c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8015a1e:	69fb      	ldr	r3, [r7, #28]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d102      	bne.n	8015a2a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8015a24:	f04f 33ff 	mov.w	r3, #4294967295
 8015a28:	e057      	b.n	8015ada <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8015a2a:	68bb      	ldr	r3, [r7, #8]
 8015a2c:	891b      	ldrh	r3, [r3, #8]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d006      	beq.n	8015a40 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8015a32:	68b9      	ldr	r1, [r7, #8]
 8015a34:	69f8      	ldr	r0, [r7, #28]
 8015a36:	f7f9 f91d 	bl	800ec74 <pbuf_chain>
 8015a3a:	e001      	b.n	8015a40 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8015a3c:	68bb      	ldr	r3, [r7, #8]
 8015a3e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8015a40:	69fb      	ldr	r3, [r7, #28]
 8015a42:	895b      	ldrh	r3, [r3, #10]
 8015a44:	2b07      	cmp	r3, #7
 8015a46:	d806      	bhi.n	8015a56 <udp_sendto_if_src+0x11e>
 8015a48:	4b26      	ldr	r3, [pc, #152]	; (8015ae4 <udp_sendto_if_src+0x1ac>)
 8015a4a:	f240 320d 	movw	r2, #781	; 0x30d
 8015a4e:	492c      	ldr	r1, [pc, #176]	; (8015b00 <udp_sendto_if_src+0x1c8>)
 8015a50:	4826      	ldr	r0, [pc, #152]	; (8015aec <udp_sendto_if_src+0x1b4>)
 8015a52:	f005 f97b 	bl	801ad4c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8015a56:	69fb      	ldr	r3, [r7, #28]
 8015a58:	685b      	ldr	r3, [r3, #4]
 8015a5a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	8a5b      	ldrh	r3, [r3, #18]
 8015a60:	4618      	mov	r0, r3
 8015a62:	f7f7 fbcd 	bl	800d200 <lwip_htons>
 8015a66:	4603      	mov	r3, r0
 8015a68:	461a      	mov	r2, r3
 8015a6a:	697b      	ldr	r3, [r7, #20]
 8015a6c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8015a6e:	887b      	ldrh	r3, [r7, #2]
 8015a70:	4618      	mov	r0, r3
 8015a72:	f7f7 fbc5 	bl	800d200 <lwip_htons>
 8015a76:	4603      	mov	r3, r0
 8015a78:	461a      	mov	r2, r3
 8015a7a:	697b      	ldr	r3, [r7, #20]
 8015a7c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8015a7e:	697b      	ldr	r3, [r7, #20]
 8015a80:	2200      	movs	r2, #0
 8015a82:	719a      	strb	r2, [r3, #6]
 8015a84:	2200      	movs	r2, #0
 8015a86:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8015a88:	69fb      	ldr	r3, [r7, #28]
 8015a8a:	891b      	ldrh	r3, [r3, #8]
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	f7f7 fbb7 	bl	800d200 <lwip_htons>
 8015a92:	4603      	mov	r3, r0
 8015a94:	461a      	mov	r2, r3
 8015a96:	697b      	ldr	r3, [r7, #20]
 8015a98:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8015a9a:	2311      	movs	r3, #17
 8015a9c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	7adb      	ldrb	r3, [r3, #11]
 8015aa2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	7a9b      	ldrb	r3, [r3, #10]
 8015aa8:	7cb9      	ldrb	r1, [r7, #18]
 8015aaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015aac:	9202      	str	r2, [sp, #8]
 8015aae:	7cfa      	ldrb	r2, [r7, #19]
 8015ab0:	9201      	str	r2, [sp, #4]
 8015ab2:	9300      	str	r3, [sp, #0]
 8015ab4:	460b      	mov	r3, r1
 8015ab6:	687a      	ldr	r2, [r7, #4]
 8015ab8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015aba:	69f8      	ldr	r0, [r7, #28]
 8015abc:	f001 fc3c 	bl	8017338 <ip4_output_if_src>
 8015ac0:	4603      	mov	r3, r0
 8015ac2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8015ac4:	69fa      	ldr	r2, [r7, #28]
 8015ac6:	68bb      	ldr	r3, [r7, #8]
 8015ac8:	429a      	cmp	r2, r3
 8015aca:	d004      	beq.n	8015ad6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8015acc:	69f8      	ldr	r0, [r7, #28]
 8015ace:	f7f8 ffad 	bl	800ea2c <pbuf_free>
    q = NULL;
 8015ad2:	2300      	movs	r3, #0
 8015ad4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8015ad6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8015ada:	4618      	mov	r0, r3
 8015adc:	3720      	adds	r7, #32
 8015ade:	46bd      	mov	sp, r7
 8015ae0:	bd80      	pop	{r7, pc}
 8015ae2:	bf00      	nop
 8015ae4:	0801e858 	.word	0x0801e858
 8015ae8:	0801ea44 	.word	0x0801ea44
 8015aec:	0801e8ac 	.word	0x0801e8ac
 8015af0:	0801ea64 	.word	0x0801ea64
 8015af4:	0801ea84 	.word	0x0801ea84
 8015af8:	0801eaa8 	.word	0x0801eaa8
 8015afc:	0801eacc 	.word	0x0801eacc
 8015b00:	0801eaf0 	.word	0x0801eaf0

08015b04 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b086      	sub	sp, #24
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	60f8      	str	r0, [r7, #12]
 8015b0c:	60b9      	str	r1, [r7, #8]
 8015b0e:	4613      	mov	r3, r2
 8015b10:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015b12:	68bb      	ldr	r3, [r7, #8]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d101      	bne.n	8015b1c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8015b18:	4b39      	ldr	r3, [pc, #228]	; (8015c00 <udp_bind+0xfc>)
 8015b1a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d109      	bne.n	8015b36 <udp_bind+0x32>
 8015b22:	4b38      	ldr	r3, [pc, #224]	; (8015c04 <udp_bind+0x100>)
 8015b24:	f240 32b7 	movw	r2, #951	; 0x3b7
 8015b28:	4937      	ldr	r1, [pc, #220]	; (8015c08 <udp_bind+0x104>)
 8015b2a:	4838      	ldr	r0, [pc, #224]	; (8015c0c <udp_bind+0x108>)
 8015b2c:	f005 f90e 	bl	801ad4c <iprintf>
 8015b30:	f06f 030f 	mvn.w	r3, #15
 8015b34:	e060      	b.n	8015bf8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8015b36:	2300      	movs	r3, #0
 8015b38:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015b3a:	4b35      	ldr	r3, [pc, #212]	; (8015c10 <udp_bind+0x10c>)
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	617b      	str	r3, [r7, #20]
 8015b40:	e009      	b.n	8015b56 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8015b42:	68fa      	ldr	r2, [r7, #12]
 8015b44:	697b      	ldr	r3, [r7, #20]
 8015b46:	429a      	cmp	r2, r3
 8015b48:	d102      	bne.n	8015b50 <udp_bind+0x4c>
      rebind = 1;
 8015b4a:	2301      	movs	r3, #1
 8015b4c:	74fb      	strb	r3, [r7, #19]
      break;
 8015b4e:	e005      	b.n	8015b5c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015b50:	697b      	ldr	r3, [r7, #20]
 8015b52:	68db      	ldr	r3, [r3, #12]
 8015b54:	617b      	str	r3, [r7, #20]
 8015b56:	697b      	ldr	r3, [r7, #20]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d1f2      	bne.n	8015b42 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8015b5c:	88fb      	ldrh	r3, [r7, #6]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d109      	bne.n	8015b76 <udp_bind+0x72>
    port = udp_new_port();
 8015b62:	f7ff fc35 	bl	80153d0 <udp_new_port>
 8015b66:	4603      	mov	r3, r0
 8015b68:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015b6a:	88fb      	ldrh	r3, [r7, #6]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d12c      	bne.n	8015bca <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8015b70:	f06f 0307 	mvn.w	r3, #7
 8015b74:	e040      	b.n	8015bf8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015b76:	4b26      	ldr	r3, [pc, #152]	; (8015c10 <udp_bind+0x10c>)
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	617b      	str	r3, [r7, #20]
 8015b7c:	e022      	b.n	8015bc4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8015b7e:	68fa      	ldr	r2, [r7, #12]
 8015b80:	697b      	ldr	r3, [r7, #20]
 8015b82:	429a      	cmp	r2, r3
 8015b84:	d01b      	beq.n	8015bbe <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8015b86:	697b      	ldr	r3, [r7, #20]
 8015b88:	8a5b      	ldrh	r3, [r3, #18]
 8015b8a:	88fa      	ldrh	r2, [r7, #6]
 8015b8c:	429a      	cmp	r2, r3
 8015b8e:	d116      	bne.n	8015bbe <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015b90:	697b      	ldr	r3, [r7, #20]
 8015b92:	681a      	ldr	r2, [r3, #0]
 8015b94:	68bb      	ldr	r3, [r7, #8]
 8015b96:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015b98:	429a      	cmp	r2, r3
 8015b9a:	d00d      	beq.n	8015bb8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015b9c:	68bb      	ldr	r3, [r7, #8]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d00a      	beq.n	8015bb8 <udp_bind+0xb4>
 8015ba2:	68bb      	ldr	r3, [r7, #8]
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d006      	beq.n	8015bb8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015baa:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d003      	beq.n	8015bb8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015bb0:	697b      	ldr	r3, [r7, #20]
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d102      	bne.n	8015bbe <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015bb8:	f06f 0307 	mvn.w	r3, #7
 8015bbc:	e01c      	b.n	8015bf8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015bbe:	697b      	ldr	r3, [r7, #20]
 8015bc0:	68db      	ldr	r3, [r3, #12]
 8015bc2:	617b      	str	r3, [r7, #20]
 8015bc4:	697b      	ldr	r3, [r7, #20]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d1d9      	bne.n	8015b7e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8015bca:	68bb      	ldr	r3, [r7, #8]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d002      	beq.n	8015bd6 <udp_bind+0xd2>
 8015bd0:	68bb      	ldr	r3, [r7, #8]
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	e000      	b.n	8015bd8 <udp_bind+0xd4>
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	68fa      	ldr	r2, [r7, #12]
 8015bda:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	88fa      	ldrh	r2, [r7, #6]
 8015be0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8015be2:	7cfb      	ldrb	r3, [r7, #19]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d106      	bne.n	8015bf6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015be8:	4b09      	ldr	r3, [pc, #36]	; (8015c10 <udp_bind+0x10c>)
 8015bea:	681a      	ldr	r2, [r3, #0]
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8015bf0:	4a07      	ldr	r2, [pc, #28]	; (8015c10 <udp_bind+0x10c>)
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8015bf6:	2300      	movs	r3, #0
}
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	3718      	adds	r7, #24
 8015bfc:	46bd      	mov	sp, r7
 8015bfe:	bd80      	pop	{r7, pc}
 8015c00:	0801f5e4 	.word	0x0801f5e4
 8015c04:	0801e858 	.word	0x0801e858
 8015c08:	0801eb20 	.word	0x0801eb20
 8015c0c:	0801e8ac 	.word	0x0801e8ac
 8015c10:	200120b8 	.word	0x200120b8

08015c14 <udp_bind_netif>:
 *
 * @see udp_disconnect()
 */
void
udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
{
 8015c14:	b480      	push	{r7}
 8015c16:	b083      	sub	sp, #12
 8015c18:	af00      	add	r7, sp, #0
 8015c1a:	6078      	str	r0, [r7, #4]
 8015c1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif != NULL) {
 8015c1e:	683b      	ldr	r3, [r7, #0]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d007      	beq.n	8015c34 <udp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 8015c24:	683b      	ldr	r3, [r7, #0]
 8015c26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015c2a:	3301      	adds	r3, #1
 8015c2c:	b2da      	uxtb	r2, r3
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 8015c32:	e002      	b.n	8015c3a <udp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	2200      	movs	r2, #0
 8015c38:	721a      	strb	r2, [r3, #8]
}
 8015c3a:	bf00      	nop
 8015c3c:	370c      	adds	r7, #12
 8015c3e:	46bd      	mov	sp, r7
 8015c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c44:	4770      	bx	lr
	...

08015c48 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	b084      	sub	sp, #16
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	60f8      	str	r0, [r7, #12]
 8015c50:	60b9      	str	r1, [r7, #8]
 8015c52:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d107      	bne.n	8015c6a <udp_recv+0x22>
 8015c5a:	4b08      	ldr	r3, [pc, #32]	; (8015c7c <udp_recv+0x34>)
 8015c5c:	f240 428a 	movw	r2, #1162	; 0x48a
 8015c60:	4907      	ldr	r1, [pc, #28]	; (8015c80 <udp_recv+0x38>)
 8015c62:	4808      	ldr	r0, [pc, #32]	; (8015c84 <udp_recv+0x3c>)
 8015c64:	f005 f872 	bl	801ad4c <iprintf>
 8015c68:	e005      	b.n	8015c76 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	68ba      	ldr	r2, [r7, #8]
 8015c6e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	687a      	ldr	r2, [r7, #4]
 8015c74:	61da      	str	r2, [r3, #28]
}
 8015c76:	3710      	adds	r7, #16
 8015c78:	46bd      	mov	sp, r7
 8015c7a:	bd80      	pop	{r7, pc}
 8015c7c:	0801e858 	.word	0x0801e858
 8015c80:	0801eb8c 	.word	0x0801eb8c
 8015c84:	0801e8ac 	.word	0x0801e8ac

08015c88 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b084      	sub	sp, #16
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d107      	bne.n	8015ca6 <udp_remove+0x1e>
 8015c96:	4b19      	ldr	r3, [pc, #100]	; (8015cfc <udp_remove+0x74>)
 8015c98:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8015c9c:	4918      	ldr	r1, [pc, #96]	; (8015d00 <udp_remove+0x78>)
 8015c9e:	4819      	ldr	r0, [pc, #100]	; (8015d04 <udp_remove+0x7c>)
 8015ca0:	f005 f854 	bl	801ad4c <iprintf>
 8015ca4:	e026      	b.n	8015cf4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8015ca6:	4b18      	ldr	r3, [pc, #96]	; (8015d08 <udp_remove+0x80>)
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	687a      	ldr	r2, [r7, #4]
 8015cac:	429a      	cmp	r2, r3
 8015cae:	d105      	bne.n	8015cbc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8015cb0:	4b15      	ldr	r3, [pc, #84]	; (8015d08 <udp_remove+0x80>)
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	68db      	ldr	r3, [r3, #12]
 8015cb6:	4a14      	ldr	r2, [pc, #80]	; (8015d08 <udp_remove+0x80>)
 8015cb8:	6013      	str	r3, [r2, #0]
 8015cba:	e017      	b.n	8015cec <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015cbc:	4b12      	ldr	r3, [pc, #72]	; (8015d08 <udp_remove+0x80>)
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	60fb      	str	r3, [r7, #12]
 8015cc2:	e010      	b.n	8015ce6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	68db      	ldr	r3, [r3, #12]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d009      	beq.n	8015ce0 <udp_remove+0x58>
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	68db      	ldr	r3, [r3, #12]
 8015cd0:	687a      	ldr	r2, [r7, #4]
 8015cd2:	429a      	cmp	r2, r3
 8015cd4:	d104      	bne.n	8015ce0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	68da      	ldr	r2, [r3, #12]
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	60da      	str	r2, [r3, #12]
        break;
 8015cde:	e005      	b.n	8015cec <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	68db      	ldr	r3, [r3, #12]
 8015ce4:	60fb      	str	r3, [r7, #12]
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d1eb      	bne.n	8015cc4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015cec:	6879      	ldr	r1, [r7, #4]
 8015cee:	2000      	movs	r0, #0
 8015cf0:	f7f7 ff8e 	bl	800dc10 <memp_free>
}
 8015cf4:	3710      	adds	r7, #16
 8015cf6:	46bd      	mov	sp, r7
 8015cf8:	bd80      	pop	{r7, pc}
 8015cfa:	bf00      	nop
 8015cfc:	0801e858 	.word	0x0801e858
 8015d00:	0801eba4 	.word	0x0801eba4
 8015d04:	0801e8ac 	.word	0x0801e8ac
 8015d08:	200120b8 	.word	0x200120b8

08015d0c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b082      	sub	sp, #8
 8015d10:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8015d12:	2000      	movs	r0, #0
 8015d14:	f7f7 ff2a 	bl	800db6c <memp_malloc>
 8015d18:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d007      	beq.n	8015d30 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015d20:	2220      	movs	r2, #32
 8015d22:	2100      	movs	r1, #0
 8015d24:	6878      	ldr	r0, [r7, #4]
 8015d26:	f004 fc71 	bl	801a60c <memset>
    pcb->ttl = UDP_TTL;
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	22ff      	movs	r2, #255	; 0xff
 8015d2e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015d30:	687b      	ldr	r3, [r7, #4]
}
 8015d32:	4618      	mov	r0, r3
 8015d34:	3708      	adds	r7, #8
 8015d36:	46bd      	mov	sp, r7
 8015d38:	bd80      	pop	{r7, pc}

08015d3a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8015d3a:	b580      	push	{r7, lr}
 8015d3c:	b084      	sub	sp, #16
 8015d3e:	af00      	add	r7, sp, #0
 8015d40:	4603      	mov	r3, r0
 8015d42:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8015d44:	f7ff ffe2 	bl	8015d0c <udp_new>
 8015d48:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8015d4a:	68fb      	ldr	r3, [r7, #12]
}
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	3710      	adds	r7, #16
 8015d50:	46bd      	mov	sp, r7
 8015d52:	bd80      	pop	{r7, pc}

08015d54 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015d54:	b480      	push	{r7}
 8015d56:	b085      	sub	sp, #20
 8015d58:	af00      	add	r7, sp, #0
 8015d5a:	6078      	str	r0, [r7, #4]
 8015d5c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d01e      	beq.n	8015da2 <udp_netif_ip_addr_changed+0x4e>
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d01a      	beq.n	8015da2 <udp_netif_ip_addr_changed+0x4e>
 8015d6c:	683b      	ldr	r3, [r7, #0]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d017      	beq.n	8015da2 <udp_netif_ip_addr_changed+0x4e>
 8015d72:	683b      	ldr	r3, [r7, #0]
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d013      	beq.n	8015da2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015d7a:	4b0d      	ldr	r3, [pc, #52]	; (8015db0 <udp_netif_ip_addr_changed+0x5c>)
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	60fb      	str	r3, [r7, #12]
 8015d80:	e00c      	b.n	8015d9c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	681a      	ldr	r2, [r3, #0]
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	429a      	cmp	r2, r3
 8015d8c:	d103      	bne.n	8015d96 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015d8e:	683b      	ldr	r3, [r7, #0]
 8015d90:	681a      	ldr	r2, [r3, #0]
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	68db      	ldr	r3, [r3, #12]
 8015d9a:	60fb      	str	r3, [r7, #12]
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d1ef      	bne.n	8015d82 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015da2:	bf00      	nop
 8015da4:	3714      	adds	r7, #20
 8015da6:	46bd      	mov	sp, r7
 8015da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dac:	4770      	bx	lr
 8015dae:	bf00      	nop
 8015db0:	200120b8 	.word	0x200120b8

08015db4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015db4:	b580      	push	{r7, lr}
 8015db6:	b082      	sub	sp, #8
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015dbc:	4915      	ldr	r1, [pc, #84]	; (8015e14 <etharp_free_entry+0x60>)
 8015dbe:	687a      	ldr	r2, [r7, #4]
 8015dc0:	4613      	mov	r3, r2
 8015dc2:	005b      	lsls	r3, r3, #1
 8015dc4:	4413      	add	r3, r2
 8015dc6:	00db      	lsls	r3, r3, #3
 8015dc8:	440b      	add	r3, r1
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d013      	beq.n	8015df8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015dd0:	4910      	ldr	r1, [pc, #64]	; (8015e14 <etharp_free_entry+0x60>)
 8015dd2:	687a      	ldr	r2, [r7, #4]
 8015dd4:	4613      	mov	r3, r2
 8015dd6:	005b      	lsls	r3, r3, #1
 8015dd8:	4413      	add	r3, r2
 8015dda:	00db      	lsls	r3, r3, #3
 8015ddc:	440b      	add	r3, r1
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	4618      	mov	r0, r3
 8015de2:	f7f8 fe23 	bl	800ea2c <pbuf_free>
    arp_table[i].q = NULL;
 8015de6:	490b      	ldr	r1, [pc, #44]	; (8015e14 <etharp_free_entry+0x60>)
 8015de8:	687a      	ldr	r2, [r7, #4]
 8015dea:	4613      	mov	r3, r2
 8015dec:	005b      	lsls	r3, r3, #1
 8015dee:	4413      	add	r3, r2
 8015df0:	00db      	lsls	r3, r3, #3
 8015df2:	440b      	add	r3, r1
 8015df4:	2200      	movs	r2, #0
 8015df6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015df8:	4906      	ldr	r1, [pc, #24]	; (8015e14 <etharp_free_entry+0x60>)
 8015dfa:	687a      	ldr	r2, [r7, #4]
 8015dfc:	4613      	mov	r3, r2
 8015dfe:	005b      	lsls	r3, r3, #1
 8015e00:	4413      	add	r3, r2
 8015e02:	00db      	lsls	r3, r3, #3
 8015e04:	440b      	add	r3, r1
 8015e06:	3314      	adds	r3, #20
 8015e08:	2200      	movs	r2, #0
 8015e0a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015e0c:	bf00      	nop
 8015e0e:	3708      	adds	r7, #8
 8015e10:	46bd      	mov	sp, r7
 8015e12:	bd80      	pop	{r7, pc}
 8015e14:	2000b25c 	.word	0x2000b25c

08015e18 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015e18:	b580      	push	{r7, lr}
 8015e1a:	b082      	sub	sp, #8
 8015e1c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015e1e:	2300      	movs	r3, #0
 8015e20:	607b      	str	r3, [r7, #4]
 8015e22:	e096      	b.n	8015f52 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015e24:	494f      	ldr	r1, [pc, #316]	; (8015f64 <etharp_tmr+0x14c>)
 8015e26:	687a      	ldr	r2, [r7, #4]
 8015e28:	4613      	mov	r3, r2
 8015e2a:	005b      	lsls	r3, r3, #1
 8015e2c:	4413      	add	r3, r2
 8015e2e:	00db      	lsls	r3, r3, #3
 8015e30:	440b      	add	r3, r1
 8015e32:	3314      	adds	r3, #20
 8015e34:	781b      	ldrb	r3, [r3, #0]
 8015e36:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015e38:	78fb      	ldrb	r3, [r7, #3]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	f000 8086 	beq.w	8015f4c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015e40:	4948      	ldr	r1, [pc, #288]	; (8015f64 <etharp_tmr+0x14c>)
 8015e42:	687a      	ldr	r2, [r7, #4]
 8015e44:	4613      	mov	r3, r2
 8015e46:	005b      	lsls	r3, r3, #1
 8015e48:	4413      	add	r3, r2
 8015e4a:	00db      	lsls	r3, r3, #3
 8015e4c:	440b      	add	r3, r1
 8015e4e:	3312      	adds	r3, #18
 8015e50:	881b      	ldrh	r3, [r3, #0]
 8015e52:	3301      	adds	r3, #1
 8015e54:	b298      	uxth	r0, r3
 8015e56:	4943      	ldr	r1, [pc, #268]	; (8015f64 <etharp_tmr+0x14c>)
 8015e58:	687a      	ldr	r2, [r7, #4]
 8015e5a:	4613      	mov	r3, r2
 8015e5c:	005b      	lsls	r3, r3, #1
 8015e5e:	4413      	add	r3, r2
 8015e60:	00db      	lsls	r3, r3, #3
 8015e62:	440b      	add	r3, r1
 8015e64:	3312      	adds	r3, #18
 8015e66:	4602      	mov	r2, r0
 8015e68:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015e6a:	493e      	ldr	r1, [pc, #248]	; (8015f64 <etharp_tmr+0x14c>)
 8015e6c:	687a      	ldr	r2, [r7, #4]
 8015e6e:	4613      	mov	r3, r2
 8015e70:	005b      	lsls	r3, r3, #1
 8015e72:	4413      	add	r3, r2
 8015e74:	00db      	lsls	r3, r3, #3
 8015e76:	440b      	add	r3, r1
 8015e78:	3312      	adds	r3, #18
 8015e7a:	881b      	ldrh	r3, [r3, #0]
 8015e7c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015e80:	d215      	bcs.n	8015eae <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015e82:	4938      	ldr	r1, [pc, #224]	; (8015f64 <etharp_tmr+0x14c>)
 8015e84:	687a      	ldr	r2, [r7, #4]
 8015e86:	4613      	mov	r3, r2
 8015e88:	005b      	lsls	r3, r3, #1
 8015e8a:	4413      	add	r3, r2
 8015e8c:	00db      	lsls	r3, r3, #3
 8015e8e:	440b      	add	r3, r1
 8015e90:	3314      	adds	r3, #20
 8015e92:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015e94:	2b01      	cmp	r3, #1
 8015e96:	d10e      	bne.n	8015eb6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015e98:	4932      	ldr	r1, [pc, #200]	; (8015f64 <etharp_tmr+0x14c>)
 8015e9a:	687a      	ldr	r2, [r7, #4]
 8015e9c:	4613      	mov	r3, r2
 8015e9e:	005b      	lsls	r3, r3, #1
 8015ea0:	4413      	add	r3, r2
 8015ea2:	00db      	lsls	r3, r3, #3
 8015ea4:	440b      	add	r3, r1
 8015ea6:	3312      	adds	r3, #18
 8015ea8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015eaa:	2b04      	cmp	r3, #4
 8015eac:	d903      	bls.n	8015eb6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015eae:	6878      	ldr	r0, [r7, #4]
 8015eb0:	f7ff ff80 	bl	8015db4 <etharp_free_entry>
 8015eb4:	e04a      	b.n	8015f4c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015eb6:	492b      	ldr	r1, [pc, #172]	; (8015f64 <etharp_tmr+0x14c>)
 8015eb8:	687a      	ldr	r2, [r7, #4]
 8015eba:	4613      	mov	r3, r2
 8015ebc:	005b      	lsls	r3, r3, #1
 8015ebe:	4413      	add	r3, r2
 8015ec0:	00db      	lsls	r3, r3, #3
 8015ec2:	440b      	add	r3, r1
 8015ec4:	3314      	adds	r3, #20
 8015ec6:	781b      	ldrb	r3, [r3, #0]
 8015ec8:	2b03      	cmp	r3, #3
 8015eca:	d10a      	bne.n	8015ee2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015ecc:	4925      	ldr	r1, [pc, #148]	; (8015f64 <etharp_tmr+0x14c>)
 8015ece:	687a      	ldr	r2, [r7, #4]
 8015ed0:	4613      	mov	r3, r2
 8015ed2:	005b      	lsls	r3, r3, #1
 8015ed4:	4413      	add	r3, r2
 8015ed6:	00db      	lsls	r3, r3, #3
 8015ed8:	440b      	add	r3, r1
 8015eda:	3314      	adds	r3, #20
 8015edc:	2204      	movs	r2, #4
 8015ede:	701a      	strb	r2, [r3, #0]
 8015ee0:	e034      	b.n	8015f4c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015ee2:	4920      	ldr	r1, [pc, #128]	; (8015f64 <etharp_tmr+0x14c>)
 8015ee4:	687a      	ldr	r2, [r7, #4]
 8015ee6:	4613      	mov	r3, r2
 8015ee8:	005b      	lsls	r3, r3, #1
 8015eea:	4413      	add	r3, r2
 8015eec:	00db      	lsls	r3, r3, #3
 8015eee:	440b      	add	r3, r1
 8015ef0:	3314      	adds	r3, #20
 8015ef2:	781b      	ldrb	r3, [r3, #0]
 8015ef4:	2b04      	cmp	r3, #4
 8015ef6:	d10a      	bne.n	8015f0e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015ef8:	491a      	ldr	r1, [pc, #104]	; (8015f64 <etharp_tmr+0x14c>)
 8015efa:	687a      	ldr	r2, [r7, #4]
 8015efc:	4613      	mov	r3, r2
 8015efe:	005b      	lsls	r3, r3, #1
 8015f00:	4413      	add	r3, r2
 8015f02:	00db      	lsls	r3, r3, #3
 8015f04:	440b      	add	r3, r1
 8015f06:	3314      	adds	r3, #20
 8015f08:	2202      	movs	r2, #2
 8015f0a:	701a      	strb	r2, [r3, #0]
 8015f0c:	e01e      	b.n	8015f4c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015f0e:	4915      	ldr	r1, [pc, #84]	; (8015f64 <etharp_tmr+0x14c>)
 8015f10:	687a      	ldr	r2, [r7, #4]
 8015f12:	4613      	mov	r3, r2
 8015f14:	005b      	lsls	r3, r3, #1
 8015f16:	4413      	add	r3, r2
 8015f18:	00db      	lsls	r3, r3, #3
 8015f1a:	440b      	add	r3, r1
 8015f1c:	3314      	adds	r3, #20
 8015f1e:	781b      	ldrb	r3, [r3, #0]
 8015f20:	2b01      	cmp	r3, #1
 8015f22:	d113      	bne.n	8015f4c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015f24:	490f      	ldr	r1, [pc, #60]	; (8015f64 <etharp_tmr+0x14c>)
 8015f26:	687a      	ldr	r2, [r7, #4]
 8015f28:	4613      	mov	r3, r2
 8015f2a:	005b      	lsls	r3, r3, #1
 8015f2c:	4413      	add	r3, r2
 8015f2e:	00db      	lsls	r3, r3, #3
 8015f30:	440b      	add	r3, r1
 8015f32:	3308      	adds	r3, #8
 8015f34:	6818      	ldr	r0, [r3, #0]
 8015f36:	687a      	ldr	r2, [r7, #4]
 8015f38:	4613      	mov	r3, r2
 8015f3a:	005b      	lsls	r3, r3, #1
 8015f3c:	4413      	add	r3, r2
 8015f3e:	00db      	lsls	r3, r3, #3
 8015f40:	4a08      	ldr	r2, [pc, #32]	; (8015f64 <etharp_tmr+0x14c>)
 8015f42:	4413      	add	r3, r2
 8015f44:	3304      	adds	r3, #4
 8015f46:	4619      	mov	r1, r3
 8015f48:	f000 fe6e 	bl	8016c28 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	3301      	adds	r3, #1
 8015f50:	607b      	str	r3, [r7, #4]
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	2b09      	cmp	r3, #9
 8015f56:	f77f af65 	ble.w	8015e24 <etharp_tmr+0xc>
      }
    }
  }
}
 8015f5a:	bf00      	nop
 8015f5c:	bf00      	nop
 8015f5e:	3708      	adds	r7, #8
 8015f60:	46bd      	mov	sp, r7
 8015f62:	bd80      	pop	{r7, pc}
 8015f64:	2000b25c 	.word	0x2000b25c

08015f68 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015f68:	b580      	push	{r7, lr}
 8015f6a:	b08a      	sub	sp, #40	; 0x28
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	60f8      	str	r0, [r7, #12]
 8015f70:	460b      	mov	r3, r1
 8015f72:	607a      	str	r2, [r7, #4]
 8015f74:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015f76:	230a      	movs	r3, #10
 8015f78:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015f7a:	230a      	movs	r3, #10
 8015f7c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8015f7e:	230a      	movs	r3, #10
 8015f80:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8015f82:	2300      	movs	r3, #0
 8015f84:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015f86:	230a      	movs	r3, #10
 8015f88:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	83bb      	strh	r3, [r7, #28]
 8015f8e:	2300      	movs	r3, #0
 8015f90:	837b      	strh	r3, [r7, #26]
 8015f92:	2300      	movs	r3, #0
 8015f94:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015f96:	2300      	movs	r3, #0
 8015f98:	843b      	strh	r3, [r7, #32]
 8015f9a:	e0ae      	b.n	80160fa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015f9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015fa0:	49a6      	ldr	r1, [pc, #664]	; (801623c <etharp_find_entry+0x2d4>)
 8015fa2:	4613      	mov	r3, r2
 8015fa4:	005b      	lsls	r3, r3, #1
 8015fa6:	4413      	add	r3, r2
 8015fa8:	00db      	lsls	r3, r3, #3
 8015faa:	440b      	add	r3, r1
 8015fac:	3314      	adds	r3, #20
 8015fae:	781b      	ldrb	r3, [r3, #0]
 8015fb0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015fb2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015fb6:	2b0a      	cmp	r3, #10
 8015fb8:	d105      	bne.n	8015fc6 <etharp_find_entry+0x5e>
 8015fba:	7dfb      	ldrb	r3, [r7, #23]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d102      	bne.n	8015fc6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015fc0:	8c3b      	ldrh	r3, [r7, #32]
 8015fc2:	847b      	strh	r3, [r7, #34]	; 0x22
 8015fc4:	e095      	b.n	80160f2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015fc6:	7dfb      	ldrb	r3, [r7, #23]
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	f000 8092 	beq.w	80160f2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015fce:	7dfb      	ldrb	r3, [r7, #23]
 8015fd0:	2b01      	cmp	r3, #1
 8015fd2:	d009      	beq.n	8015fe8 <etharp_find_entry+0x80>
 8015fd4:	7dfb      	ldrb	r3, [r7, #23]
 8015fd6:	2b01      	cmp	r3, #1
 8015fd8:	d806      	bhi.n	8015fe8 <etharp_find_entry+0x80>
 8015fda:	4b99      	ldr	r3, [pc, #612]	; (8016240 <etharp_find_entry+0x2d8>)
 8015fdc:	f240 1223 	movw	r2, #291	; 0x123
 8015fe0:	4998      	ldr	r1, [pc, #608]	; (8016244 <etharp_find_entry+0x2dc>)
 8015fe2:	4899      	ldr	r0, [pc, #612]	; (8016248 <etharp_find_entry+0x2e0>)
 8015fe4:	f004 feb2 	bl	801ad4c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d020      	beq.n	8016030 <etharp_find_entry+0xc8>
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	6819      	ldr	r1, [r3, #0]
 8015ff2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ff6:	4891      	ldr	r0, [pc, #580]	; (801623c <etharp_find_entry+0x2d4>)
 8015ff8:	4613      	mov	r3, r2
 8015ffa:	005b      	lsls	r3, r3, #1
 8015ffc:	4413      	add	r3, r2
 8015ffe:	00db      	lsls	r3, r3, #3
 8016000:	4403      	add	r3, r0
 8016002:	3304      	adds	r3, #4
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	4299      	cmp	r1, r3
 8016008:	d112      	bne.n	8016030 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d00c      	beq.n	801602a <etharp_find_entry+0xc2>
 8016010:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016014:	4989      	ldr	r1, [pc, #548]	; (801623c <etharp_find_entry+0x2d4>)
 8016016:	4613      	mov	r3, r2
 8016018:	005b      	lsls	r3, r3, #1
 801601a:	4413      	add	r3, r2
 801601c:	00db      	lsls	r3, r3, #3
 801601e:	440b      	add	r3, r1
 8016020:	3308      	adds	r3, #8
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	687a      	ldr	r2, [r7, #4]
 8016026:	429a      	cmp	r2, r3
 8016028:	d102      	bne.n	8016030 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801602a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801602e:	e100      	b.n	8016232 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016030:	7dfb      	ldrb	r3, [r7, #23]
 8016032:	2b01      	cmp	r3, #1
 8016034:	d140      	bne.n	80160b8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016036:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801603a:	4980      	ldr	r1, [pc, #512]	; (801623c <etharp_find_entry+0x2d4>)
 801603c:	4613      	mov	r3, r2
 801603e:	005b      	lsls	r3, r3, #1
 8016040:	4413      	add	r3, r2
 8016042:	00db      	lsls	r3, r3, #3
 8016044:	440b      	add	r3, r1
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	2b00      	cmp	r3, #0
 801604a:	d01a      	beq.n	8016082 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801604c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016050:	497a      	ldr	r1, [pc, #488]	; (801623c <etharp_find_entry+0x2d4>)
 8016052:	4613      	mov	r3, r2
 8016054:	005b      	lsls	r3, r3, #1
 8016056:	4413      	add	r3, r2
 8016058:	00db      	lsls	r3, r3, #3
 801605a:	440b      	add	r3, r1
 801605c:	3312      	adds	r3, #18
 801605e:	881b      	ldrh	r3, [r3, #0]
 8016060:	8bba      	ldrh	r2, [r7, #28]
 8016062:	429a      	cmp	r2, r3
 8016064:	d845      	bhi.n	80160f2 <etharp_find_entry+0x18a>
            old_queue = i;
 8016066:	8c3b      	ldrh	r3, [r7, #32]
 8016068:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801606a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801606e:	4973      	ldr	r1, [pc, #460]	; (801623c <etharp_find_entry+0x2d4>)
 8016070:	4613      	mov	r3, r2
 8016072:	005b      	lsls	r3, r3, #1
 8016074:	4413      	add	r3, r2
 8016076:	00db      	lsls	r3, r3, #3
 8016078:	440b      	add	r3, r1
 801607a:	3312      	adds	r3, #18
 801607c:	881b      	ldrh	r3, [r3, #0]
 801607e:	83bb      	strh	r3, [r7, #28]
 8016080:	e037      	b.n	80160f2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016082:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016086:	496d      	ldr	r1, [pc, #436]	; (801623c <etharp_find_entry+0x2d4>)
 8016088:	4613      	mov	r3, r2
 801608a:	005b      	lsls	r3, r3, #1
 801608c:	4413      	add	r3, r2
 801608e:	00db      	lsls	r3, r3, #3
 8016090:	440b      	add	r3, r1
 8016092:	3312      	adds	r3, #18
 8016094:	881b      	ldrh	r3, [r3, #0]
 8016096:	8b7a      	ldrh	r2, [r7, #26]
 8016098:	429a      	cmp	r2, r3
 801609a:	d82a      	bhi.n	80160f2 <etharp_find_entry+0x18a>
            old_pending = i;
 801609c:	8c3b      	ldrh	r3, [r7, #32]
 801609e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80160a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80160a4:	4965      	ldr	r1, [pc, #404]	; (801623c <etharp_find_entry+0x2d4>)
 80160a6:	4613      	mov	r3, r2
 80160a8:	005b      	lsls	r3, r3, #1
 80160aa:	4413      	add	r3, r2
 80160ac:	00db      	lsls	r3, r3, #3
 80160ae:	440b      	add	r3, r1
 80160b0:	3312      	adds	r3, #18
 80160b2:	881b      	ldrh	r3, [r3, #0]
 80160b4:	837b      	strh	r3, [r7, #26]
 80160b6:	e01c      	b.n	80160f2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80160b8:	7dfb      	ldrb	r3, [r7, #23]
 80160ba:	2b01      	cmp	r3, #1
 80160bc:	d919      	bls.n	80160f2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80160be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80160c2:	495e      	ldr	r1, [pc, #376]	; (801623c <etharp_find_entry+0x2d4>)
 80160c4:	4613      	mov	r3, r2
 80160c6:	005b      	lsls	r3, r3, #1
 80160c8:	4413      	add	r3, r2
 80160ca:	00db      	lsls	r3, r3, #3
 80160cc:	440b      	add	r3, r1
 80160ce:	3312      	adds	r3, #18
 80160d0:	881b      	ldrh	r3, [r3, #0]
 80160d2:	8b3a      	ldrh	r2, [r7, #24]
 80160d4:	429a      	cmp	r2, r3
 80160d6:	d80c      	bhi.n	80160f2 <etharp_find_entry+0x18a>
            old_stable = i;
 80160d8:	8c3b      	ldrh	r3, [r7, #32]
 80160da:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80160dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80160e0:	4956      	ldr	r1, [pc, #344]	; (801623c <etharp_find_entry+0x2d4>)
 80160e2:	4613      	mov	r3, r2
 80160e4:	005b      	lsls	r3, r3, #1
 80160e6:	4413      	add	r3, r2
 80160e8:	00db      	lsls	r3, r3, #3
 80160ea:	440b      	add	r3, r1
 80160ec:	3312      	adds	r3, #18
 80160ee:	881b      	ldrh	r3, [r3, #0]
 80160f0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80160f2:	8c3b      	ldrh	r3, [r7, #32]
 80160f4:	3301      	adds	r3, #1
 80160f6:	b29b      	uxth	r3, r3
 80160f8:	843b      	strh	r3, [r7, #32]
 80160fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80160fe:	2b09      	cmp	r3, #9
 8016100:	f77f af4c 	ble.w	8015f9c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016104:	7afb      	ldrb	r3, [r7, #11]
 8016106:	f003 0302 	and.w	r3, r3, #2
 801610a:	2b00      	cmp	r3, #0
 801610c:	d108      	bne.n	8016120 <etharp_find_entry+0x1b8>
 801610e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016112:	2b0a      	cmp	r3, #10
 8016114:	d107      	bne.n	8016126 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016116:	7afb      	ldrb	r3, [r7, #11]
 8016118:	f003 0301 	and.w	r3, r3, #1
 801611c:	2b00      	cmp	r3, #0
 801611e:	d102      	bne.n	8016126 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016120:	f04f 33ff 	mov.w	r3, #4294967295
 8016124:	e085      	b.n	8016232 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016126:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801612a:	2b09      	cmp	r3, #9
 801612c:	dc02      	bgt.n	8016134 <etharp_find_entry+0x1cc>
    i = empty;
 801612e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016130:	843b      	strh	r3, [r7, #32]
 8016132:	e039      	b.n	80161a8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016134:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016138:	2b09      	cmp	r3, #9
 801613a:	dc14      	bgt.n	8016166 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801613c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801613e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016140:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016144:	493d      	ldr	r1, [pc, #244]	; (801623c <etharp_find_entry+0x2d4>)
 8016146:	4613      	mov	r3, r2
 8016148:	005b      	lsls	r3, r3, #1
 801614a:	4413      	add	r3, r2
 801614c:	00db      	lsls	r3, r3, #3
 801614e:	440b      	add	r3, r1
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d018      	beq.n	8016188 <etharp_find_entry+0x220>
 8016156:	4b3a      	ldr	r3, [pc, #232]	; (8016240 <etharp_find_entry+0x2d8>)
 8016158:	f240 126d 	movw	r2, #365	; 0x16d
 801615c:	493b      	ldr	r1, [pc, #236]	; (801624c <etharp_find_entry+0x2e4>)
 801615e:	483a      	ldr	r0, [pc, #232]	; (8016248 <etharp_find_entry+0x2e0>)
 8016160:	f004 fdf4 	bl	801ad4c <iprintf>
 8016164:	e010      	b.n	8016188 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016166:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801616a:	2b09      	cmp	r3, #9
 801616c:	dc02      	bgt.n	8016174 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801616e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016170:	843b      	strh	r3, [r7, #32]
 8016172:	e009      	b.n	8016188 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016174:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016178:	2b09      	cmp	r3, #9
 801617a:	dc02      	bgt.n	8016182 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801617c:	8bfb      	ldrh	r3, [r7, #30]
 801617e:	843b      	strh	r3, [r7, #32]
 8016180:	e002      	b.n	8016188 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016182:	f04f 33ff 	mov.w	r3, #4294967295
 8016186:	e054      	b.n	8016232 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016188:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801618c:	2b09      	cmp	r3, #9
 801618e:	dd06      	ble.n	801619e <etharp_find_entry+0x236>
 8016190:	4b2b      	ldr	r3, [pc, #172]	; (8016240 <etharp_find_entry+0x2d8>)
 8016192:	f240 127f 	movw	r2, #383	; 0x17f
 8016196:	492e      	ldr	r1, [pc, #184]	; (8016250 <etharp_find_entry+0x2e8>)
 8016198:	482b      	ldr	r0, [pc, #172]	; (8016248 <etharp_find_entry+0x2e0>)
 801619a:	f004 fdd7 	bl	801ad4c <iprintf>
    etharp_free_entry(i);
 801619e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80161a2:	4618      	mov	r0, r3
 80161a4:	f7ff fe06 	bl	8015db4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80161a8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80161ac:	2b09      	cmp	r3, #9
 80161ae:	dd06      	ble.n	80161be <etharp_find_entry+0x256>
 80161b0:	4b23      	ldr	r3, [pc, #140]	; (8016240 <etharp_find_entry+0x2d8>)
 80161b2:	f240 1283 	movw	r2, #387	; 0x183
 80161b6:	4926      	ldr	r1, [pc, #152]	; (8016250 <etharp_find_entry+0x2e8>)
 80161b8:	4823      	ldr	r0, [pc, #140]	; (8016248 <etharp_find_entry+0x2e0>)
 80161ba:	f004 fdc7 	bl	801ad4c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80161be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80161c2:	491e      	ldr	r1, [pc, #120]	; (801623c <etharp_find_entry+0x2d4>)
 80161c4:	4613      	mov	r3, r2
 80161c6:	005b      	lsls	r3, r3, #1
 80161c8:	4413      	add	r3, r2
 80161ca:	00db      	lsls	r3, r3, #3
 80161cc:	440b      	add	r3, r1
 80161ce:	3314      	adds	r3, #20
 80161d0:	781b      	ldrb	r3, [r3, #0]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d006      	beq.n	80161e4 <etharp_find_entry+0x27c>
 80161d6:	4b1a      	ldr	r3, [pc, #104]	; (8016240 <etharp_find_entry+0x2d8>)
 80161d8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80161dc:	491d      	ldr	r1, [pc, #116]	; (8016254 <etharp_find_entry+0x2ec>)
 80161de:	481a      	ldr	r0, [pc, #104]	; (8016248 <etharp_find_entry+0x2e0>)
 80161e0:	f004 fdb4 	bl	801ad4c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d00b      	beq.n	8016202 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80161ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	6819      	ldr	r1, [r3, #0]
 80161f2:	4812      	ldr	r0, [pc, #72]	; (801623c <etharp_find_entry+0x2d4>)
 80161f4:	4613      	mov	r3, r2
 80161f6:	005b      	lsls	r3, r3, #1
 80161f8:	4413      	add	r3, r2
 80161fa:	00db      	lsls	r3, r3, #3
 80161fc:	4403      	add	r3, r0
 80161fe:	3304      	adds	r3, #4
 8016200:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016202:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016206:	490d      	ldr	r1, [pc, #52]	; (801623c <etharp_find_entry+0x2d4>)
 8016208:	4613      	mov	r3, r2
 801620a:	005b      	lsls	r3, r3, #1
 801620c:	4413      	add	r3, r2
 801620e:	00db      	lsls	r3, r3, #3
 8016210:	440b      	add	r3, r1
 8016212:	3312      	adds	r3, #18
 8016214:	2200      	movs	r2, #0
 8016216:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016218:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801621c:	4907      	ldr	r1, [pc, #28]	; (801623c <etharp_find_entry+0x2d4>)
 801621e:	4613      	mov	r3, r2
 8016220:	005b      	lsls	r3, r3, #1
 8016222:	4413      	add	r3, r2
 8016224:	00db      	lsls	r3, r3, #3
 8016226:	440b      	add	r3, r1
 8016228:	3308      	adds	r3, #8
 801622a:	687a      	ldr	r2, [r7, #4]
 801622c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801622e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016232:	4618      	mov	r0, r3
 8016234:	3728      	adds	r7, #40	; 0x28
 8016236:	46bd      	mov	sp, r7
 8016238:	bd80      	pop	{r7, pc}
 801623a:	bf00      	nop
 801623c:	2000b25c 	.word	0x2000b25c
 8016240:	0801ebbc 	.word	0x0801ebbc
 8016244:	0801ebf4 	.word	0x0801ebf4
 8016248:	0801ec34 	.word	0x0801ec34
 801624c:	0801ec5c 	.word	0x0801ec5c
 8016250:	0801ec74 	.word	0x0801ec74
 8016254:	0801ec88 	.word	0x0801ec88

08016258 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016258:	b580      	push	{r7, lr}
 801625a:	b088      	sub	sp, #32
 801625c:	af02      	add	r7, sp, #8
 801625e:	60f8      	str	r0, [r7, #12]
 8016260:	60b9      	str	r1, [r7, #8]
 8016262:	607a      	str	r2, [r7, #4]
 8016264:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801626c:	2b06      	cmp	r3, #6
 801626e:	d006      	beq.n	801627e <etharp_update_arp_entry+0x26>
 8016270:	4b48      	ldr	r3, [pc, #288]	; (8016394 <etharp_update_arp_entry+0x13c>)
 8016272:	f240 12a9 	movw	r2, #425	; 0x1a9
 8016276:	4948      	ldr	r1, [pc, #288]	; (8016398 <etharp_update_arp_entry+0x140>)
 8016278:	4848      	ldr	r0, [pc, #288]	; (801639c <etharp_update_arp_entry+0x144>)
 801627a:	f004 fd67 	bl	801ad4c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801627e:	68bb      	ldr	r3, [r7, #8]
 8016280:	2b00      	cmp	r3, #0
 8016282:	d012      	beq.n	80162aa <etharp_update_arp_entry+0x52>
 8016284:	68bb      	ldr	r3, [r7, #8]
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d00e      	beq.n	80162aa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801628c:	68bb      	ldr	r3, [r7, #8]
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	68f9      	ldr	r1, [r7, #12]
 8016292:	4618      	mov	r0, r3
 8016294:	f001 f8fe 	bl	8017494 <ip4_addr_isbroadcast_u32>
 8016298:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801629a:	2b00      	cmp	r3, #0
 801629c:	d105      	bne.n	80162aa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801629e:	68bb      	ldr	r3, [r7, #8]
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80162a6:	2be0      	cmp	r3, #224	; 0xe0
 80162a8:	d102      	bne.n	80162b0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80162aa:	f06f 030f 	mvn.w	r3, #15
 80162ae:	e06c      	b.n	801638a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80162b0:	78fb      	ldrb	r3, [r7, #3]
 80162b2:	68fa      	ldr	r2, [r7, #12]
 80162b4:	4619      	mov	r1, r3
 80162b6:	68b8      	ldr	r0, [r7, #8]
 80162b8:	f7ff fe56 	bl	8015f68 <etharp_find_entry>
 80162bc:	4603      	mov	r3, r0
 80162be:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80162c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	da02      	bge.n	80162ce <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80162c8:	8afb      	ldrh	r3, [r7, #22]
 80162ca:	b25b      	sxtb	r3, r3
 80162cc:	e05d      	b.n	801638a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80162ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80162d2:	4933      	ldr	r1, [pc, #204]	; (80163a0 <etharp_update_arp_entry+0x148>)
 80162d4:	4613      	mov	r3, r2
 80162d6:	005b      	lsls	r3, r3, #1
 80162d8:	4413      	add	r3, r2
 80162da:	00db      	lsls	r3, r3, #3
 80162dc:	440b      	add	r3, r1
 80162de:	3314      	adds	r3, #20
 80162e0:	2202      	movs	r2, #2
 80162e2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80162e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80162e8:	492d      	ldr	r1, [pc, #180]	; (80163a0 <etharp_update_arp_entry+0x148>)
 80162ea:	4613      	mov	r3, r2
 80162ec:	005b      	lsls	r3, r3, #1
 80162ee:	4413      	add	r3, r2
 80162f0:	00db      	lsls	r3, r3, #3
 80162f2:	440b      	add	r3, r1
 80162f4:	3308      	adds	r3, #8
 80162f6:	68fa      	ldr	r2, [r7, #12]
 80162f8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80162fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80162fe:	4613      	mov	r3, r2
 8016300:	005b      	lsls	r3, r3, #1
 8016302:	4413      	add	r3, r2
 8016304:	00db      	lsls	r3, r3, #3
 8016306:	3308      	adds	r3, #8
 8016308:	4a25      	ldr	r2, [pc, #148]	; (80163a0 <etharp_update_arp_entry+0x148>)
 801630a:	4413      	add	r3, r2
 801630c:	3304      	adds	r3, #4
 801630e:	2206      	movs	r2, #6
 8016310:	6879      	ldr	r1, [r7, #4]
 8016312:	4618      	mov	r0, r3
 8016314:	f004 f952 	bl	801a5bc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016318:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801631c:	4920      	ldr	r1, [pc, #128]	; (80163a0 <etharp_update_arp_entry+0x148>)
 801631e:	4613      	mov	r3, r2
 8016320:	005b      	lsls	r3, r3, #1
 8016322:	4413      	add	r3, r2
 8016324:	00db      	lsls	r3, r3, #3
 8016326:	440b      	add	r3, r1
 8016328:	3312      	adds	r3, #18
 801632a:	2200      	movs	r2, #0
 801632c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801632e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016332:	491b      	ldr	r1, [pc, #108]	; (80163a0 <etharp_update_arp_entry+0x148>)
 8016334:	4613      	mov	r3, r2
 8016336:	005b      	lsls	r3, r3, #1
 8016338:	4413      	add	r3, r2
 801633a:	00db      	lsls	r3, r3, #3
 801633c:	440b      	add	r3, r1
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d021      	beq.n	8016388 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016344:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016348:	4915      	ldr	r1, [pc, #84]	; (80163a0 <etharp_update_arp_entry+0x148>)
 801634a:	4613      	mov	r3, r2
 801634c:	005b      	lsls	r3, r3, #1
 801634e:	4413      	add	r3, r2
 8016350:	00db      	lsls	r3, r3, #3
 8016352:	440b      	add	r3, r1
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016358:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801635c:	4910      	ldr	r1, [pc, #64]	; (80163a0 <etharp_update_arp_entry+0x148>)
 801635e:	4613      	mov	r3, r2
 8016360:	005b      	lsls	r3, r3, #1
 8016362:	4413      	add	r3, r2
 8016364:	00db      	lsls	r3, r3, #3
 8016366:	440b      	add	r3, r1
 8016368:	2200      	movs	r2, #0
 801636a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8016372:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016376:	9300      	str	r3, [sp, #0]
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	6939      	ldr	r1, [r7, #16]
 801637c:	68f8      	ldr	r0, [r7, #12]
 801637e:	f002 f813 	bl	80183a8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016382:	6938      	ldr	r0, [r7, #16]
 8016384:	f7f8 fb52 	bl	800ea2c <pbuf_free>
  }
  return ERR_OK;
 8016388:	2300      	movs	r3, #0
}
 801638a:	4618      	mov	r0, r3
 801638c:	3718      	adds	r7, #24
 801638e:	46bd      	mov	sp, r7
 8016390:	bd80      	pop	{r7, pc}
 8016392:	bf00      	nop
 8016394:	0801ebbc 	.word	0x0801ebbc
 8016398:	0801ecb4 	.word	0x0801ecb4
 801639c:	0801ec34 	.word	0x0801ec34
 80163a0:	2000b25c 	.word	0x2000b25c

080163a4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80163a4:	b580      	push	{r7, lr}
 80163a6:	b084      	sub	sp, #16
 80163a8:	af00      	add	r7, sp, #0
 80163aa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80163ac:	2300      	movs	r3, #0
 80163ae:	60fb      	str	r3, [r7, #12]
 80163b0:	e01e      	b.n	80163f0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80163b2:	4913      	ldr	r1, [pc, #76]	; (8016400 <etharp_cleanup_netif+0x5c>)
 80163b4:	68fa      	ldr	r2, [r7, #12]
 80163b6:	4613      	mov	r3, r2
 80163b8:	005b      	lsls	r3, r3, #1
 80163ba:	4413      	add	r3, r2
 80163bc:	00db      	lsls	r3, r3, #3
 80163be:	440b      	add	r3, r1
 80163c0:	3314      	adds	r3, #20
 80163c2:	781b      	ldrb	r3, [r3, #0]
 80163c4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80163c6:	7afb      	ldrb	r3, [r7, #11]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d00e      	beq.n	80163ea <etharp_cleanup_netif+0x46>
 80163cc:	490c      	ldr	r1, [pc, #48]	; (8016400 <etharp_cleanup_netif+0x5c>)
 80163ce:	68fa      	ldr	r2, [r7, #12]
 80163d0:	4613      	mov	r3, r2
 80163d2:	005b      	lsls	r3, r3, #1
 80163d4:	4413      	add	r3, r2
 80163d6:	00db      	lsls	r3, r3, #3
 80163d8:	440b      	add	r3, r1
 80163da:	3308      	adds	r3, #8
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	687a      	ldr	r2, [r7, #4]
 80163e0:	429a      	cmp	r2, r3
 80163e2:	d102      	bne.n	80163ea <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80163e4:	68f8      	ldr	r0, [r7, #12]
 80163e6:	f7ff fce5 	bl	8015db4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	3301      	adds	r3, #1
 80163ee:	60fb      	str	r3, [r7, #12]
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	2b09      	cmp	r3, #9
 80163f4:	dddd      	ble.n	80163b2 <etharp_cleanup_netif+0xe>
    }
  }
}
 80163f6:	bf00      	nop
 80163f8:	bf00      	nop
 80163fa:	3710      	adds	r7, #16
 80163fc:	46bd      	mov	sp, r7
 80163fe:	bd80      	pop	{r7, pc}
 8016400:	2000b25c 	.word	0x2000b25c

08016404 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016404:	b5b0      	push	{r4, r5, r7, lr}
 8016406:	b08a      	sub	sp, #40	; 0x28
 8016408:	af04      	add	r7, sp, #16
 801640a:	6078      	str	r0, [r7, #4]
 801640c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801640e:	683b      	ldr	r3, [r7, #0]
 8016410:	2b00      	cmp	r3, #0
 8016412:	d107      	bne.n	8016424 <etharp_input+0x20>
 8016414:	4b3d      	ldr	r3, [pc, #244]	; (801650c <etharp_input+0x108>)
 8016416:	f240 228a 	movw	r2, #650	; 0x28a
 801641a:	493d      	ldr	r1, [pc, #244]	; (8016510 <etharp_input+0x10c>)
 801641c:	483d      	ldr	r0, [pc, #244]	; (8016514 <etharp_input+0x110>)
 801641e:	f004 fc95 	bl	801ad4c <iprintf>
 8016422:	e06f      	b.n	8016504 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	685b      	ldr	r3, [r3, #4]
 8016428:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801642a:	693b      	ldr	r3, [r7, #16]
 801642c:	881b      	ldrh	r3, [r3, #0]
 801642e:	b29b      	uxth	r3, r3
 8016430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016434:	d10c      	bne.n	8016450 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016436:	693b      	ldr	r3, [r7, #16]
 8016438:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801643a:	2b06      	cmp	r3, #6
 801643c:	d108      	bne.n	8016450 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801643e:	693b      	ldr	r3, [r7, #16]
 8016440:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016442:	2b04      	cmp	r3, #4
 8016444:	d104      	bne.n	8016450 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016446:	693b      	ldr	r3, [r7, #16]
 8016448:	885b      	ldrh	r3, [r3, #2]
 801644a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801644c:	2b08      	cmp	r3, #8
 801644e:	d003      	beq.n	8016458 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016450:	6878      	ldr	r0, [r7, #4]
 8016452:	f7f8 faeb 	bl	800ea2c <pbuf_free>
    return;
 8016456:	e055      	b.n	8016504 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016458:	693b      	ldr	r3, [r7, #16]
 801645a:	330e      	adds	r3, #14
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016460:	693b      	ldr	r3, [r7, #16]
 8016462:	3318      	adds	r3, #24
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016468:	683b      	ldr	r3, [r7, #0]
 801646a:	3304      	adds	r3, #4
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	2b00      	cmp	r3, #0
 8016470:	d102      	bne.n	8016478 <etharp_input+0x74>
    for_us = 0;
 8016472:	2300      	movs	r3, #0
 8016474:	75fb      	strb	r3, [r7, #23]
 8016476:	e009      	b.n	801648c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016478:	68ba      	ldr	r2, [r7, #8]
 801647a:	683b      	ldr	r3, [r7, #0]
 801647c:	3304      	adds	r3, #4
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	429a      	cmp	r2, r3
 8016482:	bf0c      	ite	eq
 8016484:	2301      	moveq	r3, #1
 8016486:	2300      	movne	r3, #0
 8016488:	b2db      	uxtb	r3, r3
 801648a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801648c:	693b      	ldr	r3, [r7, #16]
 801648e:	f103 0208 	add.w	r2, r3, #8
 8016492:	7dfb      	ldrb	r3, [r7, #23]
 8016494:	2b00      	cmp	r3, #0
 8016496:	d001      	beq.n	801649c <etharp_input+0x98>
 8016498:	2301      	movs	r3, #1
 801649a:	e000      	b.n	801649e <etharp_input+0x9a>
 801649c:	2302      	movs	r3, #2
 801649e:	f107 010c 	add.w	r1, r7, #12
 80164a2:	6838      	ldr	r0, [r7, #0]
 80164a4:	f7ff fed8 	bl	8016258 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80164a8:	693b      	ldr	r3, [r7, #16]
 80164aa:	88db      	ldrh	r3, [r3, #6]
 80164ac:	b29b      	uxth	r3, r3
 80164ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80164b2:	d003      	beq.n	80164bc <etharp_input+0xb8>
 80164b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80164b8:	d01e      	beq.n	80164f8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80164ba:	e020      	b.n	80164fe <etharp_input+0xfa>
      if (for_us) {
 80164bc:	7dfb      	ldrb	r3, [r7, #23]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d01c      	beq.n	80164fc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80164c2:	683b      	ldr	r3, [r7, #0]
 80164c4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80164c8:	693b      	ldr	r3, [r7, #16]
 80164ca:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80164ce:	683b      	ldr	r3, [r7, #0]
 80164d0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80164d4:	683b      	ldr	r3, [r7, #0]
 80164d6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80164d8:	693a      	ldr	r2, [r7, #16]
 80164da:	3208      	adds	r2, #8
        etharp_raw(netif,
 80164dc:	2102      	movs	r1, #2
 80164de:	9103      	str	r1, [sp, #12]
 80164e0:	f107 010c 	add.w	r1, r7, #12
 80164e4:	9102      	str	r1, [sp, #8]
 80164e6:	9201      	str	r2, [sp, #4]
 80164e8:	9300      	str	r3, [sp, #0]
 80164ea:	462b      	mov	r3, r5
 80164ec:	4622      	mov	r2, r4
 80164ee:	4601      	mov	r1, r0
 80164f0:	6838      	ldr	r0, [r7, #0]
 80164f2:	f000 faeb 	bl	8016acc <etharp_raw>
      break;
 80164f6:	e001      	b.n	80164fc <etharp_input+0xf8>
      break;
 80164f8:	bf00      	nop
 80164fa:	e000      	b.n	80164fe <etharp_input+0xfa>
      break;
 80164fc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80164fe:	6878      	ldr	r0, [r7, #4]
 8016500:	f7f8 fa94 	bl	800ea2c <pbuf_free>
}
 8016504:	3718      	adds	r7, #24
 8016506:	46bd      	mov	sp, r7
 8016508:	bdb0      	pop	{r4, r5, r7, pc}
 801650a:	bf00      	nop
 801650c:	0801ebbc 	.word	0x0801ebbc
 8016510:	0801ed0c 	.word	0x0801ed0c
 8016514:	0801ec34 	.word	0x0801ec34

08016518 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016518:	b580      	push	{r7, lr}
 801651a:	b086      	sub	sp, #24
 801651c:	af02      	add	r7, sp, #8
 801651e:	60f8      	str	r0, [r7, #12]
 8016520:	60b9      	str	r1, [r7, #8]
 8016522:	4613      	mov	r3, r2
 8016524:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016526:	79fa      	ldrb	r2, [r7, #7]
 8016528:	4944      	ldr	r1, [pc, #272]	; (801663c <etharp_output_to_arp_index+0x124>)
 801652a:	4613      	mov	r3, r2
 801652c:	005b      	lsls	r3, r3, #1
 801652e:	4413      	add	r3, r2
 8016530:	00db      	lsls	r3, r3, #3
 8016532:	440b      	add	r3, r1
 8016534:	3314      	adds	r3, #20
 8016536:	781b      	ldrb	r3, [r3, #0]
 8016538:	2b01      	cmp	r3, #1
 801653a:	d806      	bhi.n	801654a <etharp_output_to_arp_index+0x32>
 801653c:	4b40      	ldr	r3, [pc, #256]	; (8016640 <etharp_output_to_arp_index+0x128>)
 801653e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016542:	4940      	ldr	r1, [pc, #256]	; (8016644 <etharp_output_to_arp_index+0x12c>)
 8016544:	4840      	ldr	r0, [pc, #256]	; (8016648 <etharp_output_to_arp_index+0x130>)
 8016546:	f004 fc01 	bl	801ad4c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801654a:	79fa      	ldrb	r2, [r7, #7]
 801654c:	493b      	ldr	r1, [pc, #236]	; (801663c <etharp_output_to_arp_index+0x124>)
 801654e:	4613      	mov	r3, r2
 8016550:	005b      	lsls	r3, r3, #1
 8016552:	4413      	add	r3, r2
 8016554:	00db      	lsls	r3, r3, #3
 8016556:	440b      	add	r3, r1
 8016558:	3314      	adds	r3, #20
 801655a:	781b      	ldrb	r3, [r3, #0]
 801655c:	2b02      	cmp	r3, #2
 801655e:	d153      	bne.n	8016608 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016560:	79fa      	ldrb	r2, [r7, #7]
 8016562:	4936      	ldr	r1, [pc, #216]	; (801663c <etharp_output_to_arp_index+0x124>)
 8016564:	4613      	mov	r3, r2
 8016566:	005b      	lsls	r3, r3, #1
 8016568:	4413      	add	r3, r2
 801656a:	00db      	lsls	r3, r3, #3
 801656c:	440b      	add	r3, r1
 801656e:	3312      	adds	r3, #18
 8016570:	881b      	ldrh	r3, [r3, #0]
 8016572:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016576:	d919      	bls.n	80165ac <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016578:	79fa      	ldrb	r2, [r7, #7]
 801657a:	4613      	mov	r3, r2
 801657c:	005b      	lsls	r3, r3, #1
 801657e:	4413      	add	r3, r2
 8016580:	00db      	lsls	r3, r3, #3
 8016582:	4a2e      	ldr	r2, [pc, #184]	; (801663c <etharp_output_to_arp_index+0x124>)
 8016584:	4413      	add	r3, r2
 8016586:	3304      	adds	r3, #4
 8016588:	4619      	mov	r1, r3
 801658a:	68f8      	ldr	r0, [r7, #12]
 801658c:	f000 fb4c 	bl	8016c28 <etharp_request>
 8016590:	4603      	mov	r3, r0
 8016592:	2b00      	cmp	r3, #0
 8016594:	d138      	bne.n	8016608 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016596:	79fa      	ldrb	r2, [r7, #7]
 8016598:	4928      	ldr	r1, [pc, #160]	; (801663c <etharp_output_to_arp_index+0x124>)
 801659a:	4613      	mov	r3, r2
 801659c:	005b      	lsls	r3, r3, #1
 801659e:	4413      	add	r3, r2
 80165a0:	00db      	lsls	r3, r3, #3
 80165a2:	440b      	add	r3, r1
 80165a4:	3314      	adds	r3, #20
 80165a6:	2203      	movs	r2, #3
 80165a8:	701a      	strb	r2, [r3, #0]
 80165aa:	e02d      	b.n	8016608 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80165ac:	79fa      	ldrb	r2, [r7, #7]
 80165ae:	4923      	ldr	r1, [pc, #140]	; (801663c <etharp_output_to_arp_index+0x124>)
 80165b0:	4613      	mov	r3, r2
 80165b2:	005b      	lsls	r3, r3, #1
 80165b4:	4413      	add	r3, r2
 80165b6:	00db      	lsls	r3, r3, #3
 80165b8:	440b      	add	r3, r1
 80165ba:	3312      	adds	r3, #18
 80165bc:	881b      	ldrh	r3, [r3, #0]
 80165be:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80165c2:	d321      	bcc.n	8016608 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80165c4:	79fa      	ldrb	r2, [r7, #7]
 80165c6:	4613      	mov	r3, r2
 80165c8:	005b      	lsls	r3, r3, #1
 80165ca:	4413      	add	r3, r2
 80165cc:	00db      	lsls	r3, r3, #3
 80165ce:	4a1b      	ldr	r2, [pc, #108]	; (801663c <etharp_output_to_arp_index+0x124>)
 80165d0:	4413      	add	r3, r2
 80165d2:	1d19      	adds	r1, r3, #4
 80165d4:	79fa      	ldrb	r2, [r7, #7]
 80165d6:	4613      	mov	r3, r2
 80165d8:	005b      	lsls	r3, r3, #1
 80165da:	4413      	add	r3, r2
 80165dc:	00db      	lsls	r3, r3, #3
 80165de:	3308      	adds	r3, #8
 80165e0:	4a16      	ldr	r2, [pc, #88]	; (801663c <etharp_output_to_arp_index+0x124>)
 80165e2:	4413      	add	r3, r2
 80165e4:	3304      	adds	r3, #4
 80165e6:	461a      	mov	r2, r3
 80165e8:	68f8      	ldr	r0, [r7, #12]
 80165ea:	f000 fafb 	bl	8016be4 <etharp_request_dst>
 80165ee:	4603      	mov	r3, r0
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d109      	bne.n	8016608 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80165f4:	79fa      	ldrb	r2, [r7, #7]
 80165f6:	4911      	ldr	r1, [pc, #68]	; (801663c <etharp_output_to_arp_index+0x124>)
 80165f8:	4613      	mov	r3, r2
 80165fa:	005b      	lsls	r3, r3, #1
 80165fc:	4413      	add	r3, r2
 80165fe:	00db      	lsls	r3, r3, #3
 8016600:	440b      	add	r3, r1
 8016602:	3314      	adds	r3, #20
 8016604:	2203      	movs	r2, #3
 8016606:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801660e:	79fa      	ldrb	r2, [r7, #7]
 8016610:	4613      	mov	r3, r2
 8016612:	005b      	lsls	r3, r3, #1
 8016614:	4413      	add	r3, r2
 8016616:	00db      	lsls	r3, r3, #3
 8016618:	3308      	adds	r3, #8
 801661a:	4a08      	ldr	r2, [pc, #32]	; (801663c <etharp_output_to_arp_index+0x124>)
 801661c:	4413      	add	r3, r2
 801661e:	3304      	adds	r3, #4
 8016620:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016624:	9200      	str	r2, [sp, #0]
 8016626:	460a      	mov	r2, r1
 8016628:	68b9      	ldr	r1, [r7, #8]
 801662a:	68f8      	ldr	r0, [r7, #12]
 801662c:	f001 febc 	bl	80183a8 <ethernet_output>
 8016630:	4603      	mov	r3, r0
}
 8016632:	4618      	mov	r0, r3
 8016634:	3710      	adds	r7, #16
 8016636:	46bd      	mov	sp, r7
 8016638:	bd80      	pop	{r7, pc}
 801663a:	bf00      	nop
 801663c:	2000b25c 	.word	0x2000b25c
 8016640:	0801ebbc 	.word	0x0801ebbc
 8016644:	0801ed2c 	.word	0x0801ed2c
 8016648:	0801ec34 	.word	0x0801ec34

0801664c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801664c:	b580      	push	{r7, lr}
 801664e:	b08a      	sub	sp, #40	; 0x28
 8016650:	af02      	add	r7, sp, #8
 8016652:	60f8      	str	r0, [r7, #12]
 8016654:	60b9      	str	r1, [r7, #8]
 8016656:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	2b00      	cmp	r3, #0
 8016660:	d106      	bne.n	8016670 <etharp_output+0x24>
 8016662:	4b73      	ldr	r3, [pc, #460]	; (8016830 <etharp_output+0x1e4>)
 8016664:	f240 321e 	movw	r2, #798	; 0x31e
 8016668:	4972      	ldr	r1, [pc, #456]	; (8016834 <etharp_output+0x1e8>)
 801666a:	4873      	ldr	r0, [pc, #460]	; (8016838 <etharp_output+0x1ec>)
 801666c:	f004 fb6e 	bl	801ad4c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016670:	68bb      	ldr	r3, [r7, #8]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d106      	bne.n	8016684 <etharp_output+0x38>
 8016676:	4b6e      	ldr	r3, [pc, #440]	; (8016830 <etharp_output+0x1e4>)
 8016678:	f240 321f 	movw	r2, #799	; 0x31f
 801667c:	496f      	ldr	r1, [pc, #444]	; (801683c <etharp_output+0x1f0>)
 801667e:	486e      	ldr	r0, [pc, #440]	; (8016838 <etharp_output+0x1ec>)
 8016680:	f004 fb64 	bl	801ad4c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	2b00      	cmp	r3, #0
 8016688:	d106      	bne.n	8016698 <etharp_output+0x4c>
 801668a:	4b69      	ldr	r3, [pc, #420]	; (8016830 <etharp_output+0x1e4>)
 801668c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016690:	496b      	ldr	r1, [pc, #428]	; (8016840 <etharp_output+0x1f4>)
 8016692:	4869      	ldr	r0, [pc, #420]	; (8016838 <etharp_output+0x1ec>)
 8016694:	f004 fb5a 	bl	801ad4c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	681b      	ldr	r3, [r3, #0]
 801669c:	68f9      	ldr	r1, [r7, #12]
 801669e:	4618      	mov	r0, r3
 80166a0:	f000 fef8 	bl	8017494 <ip4_addr_isbroadcast_u32>
 80166a4:	4603      	mov	r3, r0
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d002      	beq.n	80166b0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80166aa:	4b66      	ldr	r3, [pc, #408]	; (8016844 <etharp_output+0x1f8>)
 80166ac:	61fb      	str	r3, [r7, #28]
 80166ae:	e0af      	b.n	8016810 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80166b8:	2be0      	cmp	r3, #224	; 0xe0
 80166ba:	d118      	bne.n	80166ee <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80166bc:	2301      	movs	r3, #1
 80166be:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80166c0:	2300      	movs	r3, #0
 80166c2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80166c4:	235e      	movs	r3, #94	; 0x5e
 80166c6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	3301      	adds	r3, #1
 80166cc:	781b      	ldrb	r3, [r3, #0]
 80166ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80166d2:	b2db      	uxtb	r3, r3
 80166d4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	3302      	adds	r3, #2
 80166da:	781b      	ldrb	r3, [r3, #0]
 80166dc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	3303      	adds	r3, #3
 80166e2:	781b      	ldrb	r3, [r3, #0]
 80166e4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80166e6:	f107 0310 	add.w	r3, r7, #16
 80166ea:	61fb      	str	r3, [r7, #28]
 80166ec:	e090      	b.n	8016810 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	681a      	ldr	r2, [r3, #0]
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	3304      	adds	r3, #4
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	405a      	eors	r2, r3
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	3308      	adds	r3, #8
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	4013      	ands	r3, r2
 8016702:	2b00      	cmp	r3, #0
 8016704:	d012      	beq.n	801672c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801670c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016710:	4293      	cmp	r3, r2
 8016712:	d00b      	beq.n	801672c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016714:	68fb      	ldr	r3, [r7, #12]
 8016716:	330c      	adds	r3, #12
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	2b00      	cmp	r3, #0
 801671c:	d003      	beq.n	8016726 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	330c      	adds	r3, #12
 8016722:	61bb      	str	r3, [r7, #24]
 8016724:	e002      	b.n	801672c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016726:	f06f 0303 	mvn.w	r3, #3
 801672a:	e07d      	b.n	8016828 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801672c:	4b46      	ldr	r3, [pc, #280]	; (8016848 <etharp_output+0x1fc>)
 801672e:	781b      	ldrb	r3, [r3, #0]
 8016730:	4619      	mov	r1, r3
 8016732:	4a46      	ldr	r2, [pc, #280]	; (801684c <etharp_output+0x200>)
 8016734:	460b      	mov	r3, r1
 8016736:	005b      	lsls	r3, r3, #1
 8016738:	440b      	add	r3, r1
 801673a:	00db      	lsls	r3, r3, #3
 801673c:	4413      	add	r3, r2
 801673e:	3314      	adds	r3, #20
 8016740:	781b      	ldrb	r3, [r3, #0]
 8016742:	2b01      	cmp	r3, #1
 8016744:	d925      	bls.n	8016792 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016746:	4b40      	ldr	r3, [pc, #256]	; (8016848 <etharp_output+0x1fc>)
 8016748:	781b      	ldrb	r3, [r3, #0]
 801674a:	4619      	mov	r1, r3
 801674c:	4a3f      	ldr	r2, [pc, #252]	; (801684c <etharp_output+0x200>)
 801674e:	460b      	mov	r3, r1
 8016750:	005b      	lsls	r3, r3, #1
 8016752:	440b      	add	r3, r1
 8016754:	00db      	lsls	r3, r3, #3
 8016756:	4413      	add	r3, r2
 8016758:	3308      	adds	r3, #8
 801675a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801675c:	68fa      	ldr	r2, [r7, #12]
 801675e:	429a      	cmp	r2, r3
 8016760:	d117      	bne.n	8016792 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016762:	69bb      	ldr	r3, [r7, #24]
 8016764:	681a      	ldr	r2, [r3, #0]
 8016766:	4b38      	ldr	r3, [pc, #224]	; (8016848 <etharp_output+0x1fc>)
 8016768:	781b      	ldrb	r3, [r3, #0]
 801676a:	4618      	mov	r0, r3
 801676c:	4937      	ldr	r1, [pc, #220]	; (801684c <etharp_output+0x200>)
 801676e:	4603      	mov	r3, r0
 8016770:	005b      	lsls	r3, r3, #1
 8016772:	4403      	add	r3, r0
 8016774:	00db      	lsls	r3, r3, #3
 8016776:	440b      	add	r3, r1
 8016778:	3304      	adds	r3, #4
 801677a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801677c:	429a      	cmp	r2, r3
 801677e:	d108      	bne.n	8016792 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016780:	4b31      	ldr	r3, [pc, #196]	; (8016848 <etharp_output+0x1fc>)
 8016782:	781b      	ldrb	r3, [r3, #0]
 8016784:	461a      	mov	r2, r3
 8016786:	68b9      	ldr	r1, [r7, #8]
 8016788:	68f8      	ldr	r0, [r7, #12]
 801678a:	f7ff fec5 	bl	8016518 <etharp_output_to_arp_index>
 801678e:	4603      	mov	r3, r0
 8016790:	e04a      	b.n	8016828 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016792:	2300      	movs	r3, #0
 8016794:	75fb      	strb	r3, [r7, #23]
 8016796:	e031      	b.n	80167fc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016798:	7dfa      	ldrb	r2, [r7, #23]
 801679a:	492c      	ldr	r1, [pc, #176]	; (801684c <etharp_output+0x200>)
 801679c:	4613      	mov	r3, r2
 801679e:	005b      	lsls	r3, r3, #1
 80167a0:	4413      	add	r3, r2
 80167a2:	00db      	lsls	r3, r3, #3
 80167a4:	440b      	add	r3, r1
 80167a6:	3314      	adds	r3, #20
 80167a8:	781b      	ldrb	r3, [r3, #0]
 80167aa:	2b01      	cmp	r3, #1
 80167ac:	d923      	bls.n	80167f6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80167ae:	7dfa      	ldrb	r2, [r7, #23]
 80167b0:	4926      	ldr	r1, [pc, #152]	; (801684c <etharp_output+0x200>)
 80167b2:	4613      	mov	r3, r2
 80167b4:	005b      	lsls	r3, r3, #1
 80167b6:	4413      	add	r3, r2
 80167b8:	00db      	lsls	r3, r3, #3
 80167ba:	440b      	add	r3, r1
 80167bc:	3308      	adds	r3, #8
 80167be:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80167c0:	68fa      	ldr	r2, [r7, #12]
 80167c2:	429a      	cmp	r2, r3
 80167c4:	d117      	bne.n	80167f6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80167c6:	69bb      	ldr	r3, [r7, #24]
 80167c8:	6819      	ldr	r1, [r3, #0]
 80167ca:	7dfa      	ldrb	r2, [r7, #23]
 80167cc:	481f      	ldr	r0, [pc, #124]	; (801684c <etharp_output+0x200>)
 80167ce:	4613      	mov	r3, r2
 80167d0:	005b      	lsls	r3, r3, #1
 80167d2:	4413      	add	r3, r2
 80167d4:	00db      	lsls	r3, r3, #3
 80167d6:	4403      	add	r3, r0
 80167d8:	3304      	adds	r3, #4
 80167da:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80167dc:	4299      	cmp	r1, r3
 80167de:	d10a      	bne.n	80167f6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80167e0:	4a19      	ldr	r2, [pc, #100]	; (8016848 <etharp_output+0x1fc>)
 80167e2:	7dfb      	ldrb	r3, [r7, #23]
 80167e4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80167e6:	7dfb      	ldrb	r3, [r7, #23]
 80167e8:	461a      	mov	r2, r3
 80167ea:	68b9      	ldr	r1, [r7, #8]
 80167ec:	68f8      	ldr	r0, [r7, #12]
 80167ee:	f7ff fe93 	bl	8016518 <etharp_output_to_arp_index>
 80167f2:	4603      	mov	r3, r0
 80167f4:	e018      	b.n	8016828 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80167f6:	7dfb      	ldrb	r3, [r7, #23]
 80167f8:	3301      	adds	r3, #1
 80167fa:	75fb      	strb	r3, [r7, #23]
 80167fc:	7dfb      	ldrb	r3, [r7, #23]
 80167fe:	2b09      	cmp	r3, #9
 8016800:	d9ca      	bls.n	8016798 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016802:	68ba      	ldr	r2, [r7, #8]
 8016804:	69b9      	ldr	r1, [r7, #24]
 8016806:	68f8      	ldr	r0, [r7, #12]
 8016808:	f000 f822 	bl	8016850 <etharp_query>
 801680c:	4603      	mov	r3, r0
 801680e:	e00b      	b.n	8016828 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8016816:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801681a:	9300      	str	r3, [sp, #0]
 801681c:	69fb      	ldr	r3, [r7, #28]
 801681e:	68b9      	ldr	r1, [r7, #8]
 8016820:	68f8      	ldr	r0, [r7, #12]
 8016822:	f001 fdc1 	bl	80183a8 <ethernet_output>
 8016826:	4603      	mov	r3, r0
}
 8016828:	4618      	mov	r0, r3
 801682a:	3720      	adds	r7, #32
 801682c:	46bd      	mov	sp, r7
 801682e:	bd80      	pop	{r7, pc}
 8016830:	0801ebbc 	.word	0x0801ebbc
 8016834:	0801ed0c 	.word	0x0801ed0c
 8016838:	0801ec34 	.word	0x0801ec34
 801683c:	0801ed5c 	.word	0x0801ed5c
 8016840:	0801ecfc 	.word	0x0801ecfc
 8016844:	0801f5e8 	.word	0x0801f5e8
 8016848:	2000b34c 	.word	0x2000b34c
 801684c:	2000b25c 	.word	0x2000b25c

08016850 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b08c      	sub	sp, #48	; 0x30
 8016854:	af02      	add	r7, sp, #8
 8016856:	60f8      	str	r0, [r7, #12]
 8016858:	60b9      	str	r1, [r7, #8]
 801685a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	3326      	adds	r3, #38	; 0x26
 8016860:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016862:	23ff      	movs	r3, #255	; 0xff
 8016864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016868:	2300      	movs	r3, #0
 801686a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801686c:	68bb      	ldr	r3, [r7, #8]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	68f9      	ldr	r1, [r7, #12]
 8016872:	4618      	mov	r0, r3
 8016874:	f000 fe0e 	bl	8017494 <ip4_addr_isbroadcast_u32>
 8016878:	4603      	mov	r3, r0
 801687a:	2b00      	cmp	r3, #0
 801687c:	d10c      	bne.n	8016898 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801687e:	68bb      	ldr	r3, [r7, #8]
 8016880:	681b      	ldr	r3, [r3, #0]
 8016882:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016886:	2be0      	cmp	r3, #224	; 0xe0
 8016888:	d006      	beq.n	8016898 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801688a:	68bb      	ldr	r3, [r7, #8]
 801688c:	2b00      	cmp	r3, #0
 801688e:	d003      	beq.n	8016898 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016890:	68bb      	ldr	r3, [r7, #8]
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	2b00      	cmp	r3, #0
 8016896:	d102      	bne.n	801689e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016898:	f06f 030f 	mvn.w	r3, #15
 801689c:	e101      	b.n	8016aa2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801689e:	68fa      	ldr	r2, [r7, #12]
 80168a0:	2101      	movs	r1, #1
 80168a2:	68b8      	ldr	r0, [r7, #8]
 80168a4:	f7ff fb60 	bl	8015f68 <etharp_find_entry>
 80168a8:	4603      	mov	r3, r0
 80168aa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80168ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	da02      	bge.n	80168ba <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80168b4:	8a7b      	ldrh	r3, [r7, #18]
 80168b6:	b25b      	sxtb	r3, r3
 80168b8:	e0f3      	b.n	8016aa2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80168ba:	8a7b      	ldrh	r3, [r7, #18]
 80168bc:	2b7e      	cmp	r3, #126	; 0x7e
 80168be:	d906      	bls.n	80168ce <etharp_query+0x7e>
 80168c0:	4b7a      	ldr	r3, [pc, #488]	; (8016aac <etharp_query+0x25c>)
 80168c2:	f240 32c1 	movw	r2, #961	; 0x3c1
 80168c6:	497a      	ldr	r1, [pc, #488]	; (8016ab0 <etharp_query+0x260>)
 80168c8:	487a      	ldr	r0, [pc, #488]	; (8016ab4 <etharp_query+0x264>)
 80168ca:	f004 fa3f 	bl	801ad4c <iprintf>
  i = (netif_addr_idx_t)i_err;
 80168ce:	8a7b      	ldrh	r3, [r7, #18]
 80168d0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80168d2:	7c7a      	ldrb	r2, [r7, #17]
 80168d4:	4978      	ldr	r1, [pc, #480]	; (8016ab8 <etharp_query+0x268>)
 80168d6:	4613      	mov	r3, r2
 80168d8:	005b      	lsls	r3, r3, #1
 80168da:	4413      	add	r3, r2
 80168dc:	00db      	lsls	r3, r3, #3
 80168de:	440b      	add	r3, r1
 80168e0:	3314      	adds	r3, #20
 80168e2:	781b      	ldrb	r3, [r3, #0]
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d115      	bne.n	8016914 <etharp_query+0xc4>
    is_new_entry = 1;
 80168e8:	2301      	movs	r3, #1
 80168ea:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80168ec:	7c7a      	ldrb	r2, [r7, #17]
 80168ee:	4972      	ldr	r1, [pc, #456]	; (8016ab8 <etharp_query+0x268>)
 80168f0:	4613      	mov	r3, r2
 80168f2:	005b      	lsls	r3, r3, #1
 80168f4:	4413      	add	r3, r2
 80168f6:	00db      	lsls	r3, r3, #3
 80168f8:	440b      	add	r3, r1
 80168fa:	3314      	adds	r3, #20
 80168fc:	2201      	movs	r2, #1
 80168fe:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016900:	7c7a      	ldrb	r2, [r7, #17]
 8016902:	496d      	ldr	r1, [pc, #436]	; (8016ab8 <etharp_query+0x268>)
 8016904:	4613      	mov	r3, r2
 8016906:	005b      	lsls	r3, r3, #1
 8016908:	4413      	add	r3, r2
 801690a:	00db      	lsls	r3, r3, #3
 801690c:	440b      	add	r3, r1
 801690e:	3308      	adds	r3, #8
 8016910:	68fa      	ldr	r2, [r7, #12]
 8016912:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016914:	7c7a      	ldrb	r2, [r7, #17]
 8016916:	4968      	ldr	r1, [pc, #416]	; (8016ab8 <etharp_query+0x268>)
 8016918:	4613      	mov	r3, r2
 801691a:	005b      	lsls	r3, r3, #1
 801691c:	4413      	add	r3, r2
 801691e:	00db      	lsls	r3, r3, #3
 8016920:	440b      	add	r3, r1
 8016922:	3314      	adds	r3, #20
 8016924:	781b      	ldrb	r3, [r3, #0]
 8016926:	2b01      	cmp	r3, #1
 8016928:	d011      	beq.n	801694e <etharp_query+0xfe>
 801692a:	7c7a      	ldrb	r2, [r7, #17]
 801692c:	4962      	ldr	r1, [pc, #392]	; (8016ab8 <etharp_query+0x268>)
 801692e:	4613      	mov	r3, r2
 8016930:	005b      	lsls	r3, r3, #1
 8016932:	4413      	add	r3, r2
 8016934:	00db      	lsls	r3, r3, #3
 8016936:	440b      	add	r3, r1
 8016938:	3314      	adds	r3, #20
 801693a:	781b      	ldrb	r3, [r3, #0]
 801693c:	2b01      	cmp	r3, #1
 801693e:	d806      	bhi.n	801694e <etharp_query+0xfe>
 8016940:	4b5a      	ldr	r3, [pc, #360]	; (8016aac <etharp_query+0x25c>)
 8016942:	f240 32cd 	movw	r2, #973	; 0x3cd
 8016946:	495d      	ldr	r1, [pc, #372]	; (8016abc <etharp_query+0x26c>)
 8016948:	485a      	ldr	r0, [pc, #360]	; (8016ab4 <etharp_query+0x264>)
 801694a:	f004 f9ff 	bl	801ad4c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801694e:	6a3b      	ldr	r3, [r7, #32]
 8016950:	2b00      	cmp	r3, #0
 8016952:	d102      	bne.n	801695a <etharp_query+0x10a>
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	2b00      	cmp	r3, #0
 8016958:	d10c      	bne.n	8016974 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801695a:	68b9      	ldr	r1, [r7, #8]
 801695c:	68f8      	ldr	r0, [r7, #12]
 801695e:	f000 f963 	bl	8016c28 <etharp_request>
 8016962:	4603      	mov	r3, r0
 8016964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d102      	bne.n	8016974 <etharp_query+0x124>
      return result;
 801696e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016972:	e096      	b.n	8016aa2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	2b00      	cmp	r3, #0
 8016978:	d106      	bne.n	8016988 <etharp_query+0x138>
 801697a:	4b4c      	ldr	r3, [pc, #304]	; (8016aac <etharp_query+0x25c>)
 801697c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016980:	494f      	ldr	r1, [pc, #316]	; (8016ac0 <etharp_query+0x270>)
 8016982:	484c      	ldr	r0, [pc, #304]	; (8016ab4 <etharp_query+0x264>)
 8016984:	f004 f9e2 	bl	801ad4c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016988:	7c7a      	ldrb	r2, [r7, #17]
 801698a:	494b      	ldr	r1, [pc, #300]	; (8016ab8 <etharp_query+0x268>)
 801698c:	4613      	mov	r3, r2
 801698e:	005b      	lsls	r3, r3, #1
 8016990:	4413      	add	r3, r2
 8016992:	00db      	lsls	r3, r3, #3
 8016994:	440b      	add	r3, r1
 8016996:	3314      	adds	r3, #20
 8016998:	781b      	ldrb	r3, [r3, #0]
 801699a:	2b01      	cmp	r3, #1
 801699c:	d917      	bls.n	80169ce <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801699e:	4a49      	ldr	r2, [pc, #292]	; (8016ac4 <etharp_query+0x274>)
 80169a0:	7c7b      	ldrb	r3, [r7, #17]
 80169a2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80169a4:	7c7a      	ldrb	r2, [r7, #17]
 80169a6:	4613      	mov	r3, r2
 80169a8:	005b      	lsls	r3, r3, #1
 80169aa:	4413      	add	r3, r2
 80169ac:	00db      	lsls	r3, r3, #3
 80169ae:	3308      	adds	r3, #8
 80169b0:	4a41      	ldr	r2, [pc, #260]	; (8016ab8 <etharp_query+0x268>)
 80169b2:	4413      	add	r3, r2
 80169b4:	3304      	adds	r3, #4
 80169b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80169ba:	9200      	str	r2, [sp, #0]
 80169bc:	697a      	ldr	r2, [r7, #20]
 80169be:	6879      	ldr	r1, [r7, #4]
 80169c0:	68f8      	ldr	r0, [r7, #12]
 80169c2:	f001 fcf1 	bl	80183a8 <ethernet_output>
 80169c6:	4603      	mov	r3, r0
 80169c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80169cc:	e067      	b.n	8016a9e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80169ce:	7c7a      	ldrb	r2, [r7, #17]
 80169d0:	4939      	ldr	r1, [pc, #228]	; (8016ab8 <etharp_query+0x268>)
 80169d2:	4613      	mov	r3, r2
 80169d4:	005b      	lsls	r3, r3, #1
 80169d6:	4413      	add	r3, r2
 80169d8:	00db      	lsls	r3, r3, #3
 80169da:	440b      	add	r3, r1
 80169dc:	3314      	adds	r3, #20
 80169de:	781b      	ldrb	r3, [r3, #0]
 80169e0:	2b01      	cmp	r3, #1
 80169e2:	d15c      	bne.n	8016a9e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80169e4:	2300      	movs	r3, #0
 80169e6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	61fb      	str	r3, [r7, #28]
    while (p) {
 80169ec:	e01c      	b.n	8016a28 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80169ee:	69fb      	ldr	r3, [r7, #28]
 80169f0:	895a      	ldrh	r2, [r3, #10]
 80169f2:	69fb      	ldr	r3, [r7, #28]
 80169f4:	891b      	ldrh	r3, [r3, #8]
 80169f6:	429a      	cmp	r2, r3
 80169f8:	d10a      	bne.n	8016a10 <etharp_query+0x1c0>
 80169fa:	69fb      	ldr	r3, [r7, #28]
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d006      	beq.n	8016a10 <etharp_query+0x1c0>
 8016a02:	4b2a      	ldr	r3, [pc, #168]	; (8016aac <etharp_query+0x25c>)
 8016a04:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016a08:	492f      	ldr	r1, [pc, #188]	; (8016ac8 <etharp_query+0x278>)
 8016a0a:	482a      	ldr	r0, [pc, #168]	; (8016ab4 <etharp_query+0x264>)
 8016a0c:	f004 f99e 	bl	801ad4c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016a10:	69fb      	ldr	r3, [r7, #28]
 8016a12:	7b1b      	ldrb	r3, [r3, #12]
 8016a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d002      	beq.n	8016a22 <etharp_query+0x1d2>
        copy_needed = 1;
 8016a1c:	2301      	movs	r3, #1
 8016a1e:	61bb      	str	r3, [r7, #24]
        break;
 8016a20:	e005      	b.n	8016a2e <etharp_query+0x1de>
      }
      p = p->next;
 8016a22:	69fb      	ldr	r3, [r7, #28]
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016a28:	69fb      	ldr	r3, [r7, #28]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d1df      	bne.n	80169ee <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016a2e:	69bb      	ldr	r3, [r7, #24]
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d007      	beq.n	8016a44 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016a34:	687a      	ldr	r2, [r7, #4]
 8016a36:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016a3a:	200e      	movs	r0, #14
 8016a3c:	f7f8 fa6e 	bl	800ef1c <pbuf_clone>
 8016a40:	61f8      	str	r0, [r7, #28]
 8016a42:	e004      	b.n	8016a4e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016a48:	69f8      	ldr	r0, [r7, #28]
 8016a4a:	f7f8 f895 	bl	800eb78 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016a4e:	69fb      	ldr	r3, [r7, #28]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d021      	beq.n	8016a98 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016a54:	7c7a      	ldrb	r2, [r7, #17]
 8016a56:	4918      	ldr	r1, [pc, #96]	; (8016ab8 <etharp_query+0x268>)
 8016a58:	4613      	mov	r3, r2
 8016a5a:	005b      	lsls	r3, r3, #1
 8016a5c:	4413      	add	r3, r2
 8016a5e:	00db      	lsls	r3, r3, #3
 8016a60:	440b      	add	r3, r1
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d00a      	beq.n	8016a7e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016a68:	7c7a      	ldrb	r2, [r7, #17]
 8016a6a:	4913      	ldr	r1, [pc, #76]	; (8016ab8 <etharp_query+0x268>)
 8016a6c:	4613      	mov	r3, r2
 8016a6e:	005b      	lsls	r3, r3, #1
 8016a70:	4413      	add	r3, r2
 8016a72:	00db      	lsls	r3, r3, #3
 8016a74:	440b      	add	r3, r1
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	4618      	mov	r0, r3
 8016a7a:	f7f7 ffd7 	bl	800ea2c <pbuf_free>
      }
      arp_table[i].q = p;
 8016a7e:	7c7a      	ldrb	r2, [r7, #17]
 8016a80:	490d      	ldr	r1, [pc, #52]	; (8016ab8 <etharp_query+0x268>)
 8016a82:	4613      	mov	r3, r2
 8016a84:	005b      	lsls	r3, r3, #1
 8016a86:	4413      	add	r3, r2
 8016a88:	00db      	lsls	r3, r3, #3
 8016a8a:	440b      	add	r3, r1
 8016a8c:	69fa      	ldr	r2, [r7, #28]
 8016a8e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016a90:	2300      	movs	r3, #0
 8016a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016a96:	e002      	b.n	8016a9e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016a98:	23ff      	movs	r3, #255	; 0xff
 8016a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016a9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016aa2:	4618      	mov	r0, r3
 8016aa4:	3728      	adds	r7, #40	; 0x28
 8016aa6:	46bd      	mov	sp, r7
 8016aa8:	bd80      	pop	{r7, pc}
 8016aaa:	bf00      	nop
 8016aac:	0801ebbc 	.word	0x0801ebbc
 8016ab0:	0801ed68 	.word	0x0801ed68
 8016ab4:	0801ec34 	.word	0x0801ec34
 8016ab8:	2000b25c 	.word	0x2000b25c
 8016abc:	0801ed78 	.word	0x0801ed78
 8016ac0:	0801ed5c 	.word	0x0801ed5c
 8016ac4:	2000b34c 	.word	0x2000b34c
 8016ac8:	0801eda0 	.word	0x0801eda0

08016acc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016acc:	b580      	push	{r7, lr}
 8016ace:	b08a      	sub	sp, #40	; 0x28
 8016ad0:	af02      	add	r7, sp, #8
 8016ad2:	60f8      	str	r0, [r7, #12]
 8016ad4:	60b9      	str	r1, [r7, #8]
 8016ad6:	607a      	str	r2, [r7, #4]
 8016ad8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016ada:	2300      	movs	r3, #0
 8016adc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d106      	bne.n	8016af2 <etharp_raw+0x26>
 8016ae4:	4b3a      	ldr	r3, [pc, #232]	; (8016bd0 <etharp_raw+0x104>)
 8016ae6:	f240 4257 	movw	r2, #1111	; 0x457
 8016aea:	493a      	ldr	r1, [pc, #232]	; (8016bd4 <etharp_raw+0x108>)
 8016aec:	483a      	ldr	r0, [pc, #232]	; (8016bd8 <etharp_raw+0x10c>)
 8016aee:	f004 f92d 	bl	801ad4c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016af2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016af6:	211c      	movs	r1, #28
 8016af8:	200e      	movs	r0, #14
 8016afa:	f7f7 fc81 	bl	800e400 <pbuf_alloc>
 8016afe:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016b00:	69bb      	ldr	r3, [r7, #24]
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d102      	bne.n	8016b0c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016b06:	f04f 33ff 	mov.w	r3, #4294967295
 8016b0a:	e05d      	b.n	8016bc8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016b0c:	69bb      	ldr	r3, [r7, #24]
 8016b0e:	895b      	ldrh	r3, [r3, #10]
 8016b10:	2b1b      	cmp	r3, #27
 8016b12:	d806      	bhi.n	8016b22 <etharp_raw+0x56>
 8016b14:	4b2e      	ldr	r3, [pc, #184]	; (8016bd0 <etharp_raw+0x104>)
 8016b16:	f240 4262 	movw	r2, #1122	; 0x462
 8016b1a:	4930      	ldr	r1, [pc, #192]	; (8016bdc <etharp_raw+0x110>)
 8016b1c:	482e      	ldr	r0, [pc, #184]	; (8016bd8 <etharp_raw+0x10c>)
 8016b1e:	f004 f915 	bl	801ad4c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016b22:	69bb      	ldr	r3, [r7, #24]
 8016b24:	685b      	ldr	r3, [r3, #4]
 8016b26:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016b28:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016b2a:	4618      	mov	r0, r3
 8016b2c:	f7f6 fb68 	bl	800d200 <lwip_htons>
 8016b30:	4603      	mov	r3, r0
 8016b32:	461a      	mov	r2, r3
 8016b34:	697b      	ldr	r3, [r7, #20]
 8016b36:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016b3e:	2b06      	cmp	r3, #6
 8016b40:	d006      	beq.n	8016b50 <etharp_raw+0x84>
 8016b42:	4b23      	ldr	r3, [pc, #140]	; (8016bd0 <etharp_raw+0x104>)
 8016b44:	f240 4269 	movw	r2, #1129	; 0x469
 8016b48:	4925      	ldr	r1, [pc, #148]	; (8016be0 <etharp_raw+0x114>)
 8016b4a:	4823      	ldr	r0, [pc, #140]	; (8016bd8 <etharp_raw+0x10c>)
 8016b4c:	f004 f8fe 	bl	801ad4c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016b50:	697b      	ldr	r3, [r7, #20]
 8016b52:	3308      	adds	r3, #8
 8016b54:	2206      	movs	r2, #6
 8016b56:	6839      	ldr	r1, [r7, #0]
 8016b58:	4618      	mov	r0, r3
 8016b5a:	f003 fd2f 	bl	801a5bc <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016b5e:	697b      	ldr	r3, [r7, #20]
 8016b60:	3312      	adds	r3, #18
 8016b62:	2206      	movs	r2, #6
 8016b64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016b66:	4618      	mov	r0, r3
 8016b68:	f003 fd28 	bl	801a5bc <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016b6c:	697b      	ldr	r3, [r7, #20]
 8016b6e:	330e      	adds	r3, #14
 8016b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016b72:	6812      	ldr	r2, [r2, #0]
 8016b74:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016b76:	697b      	ldr	r3, [r7, #20]
 8016b78:	3318      	adds	r3, #24
 8016b7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016b7c:	6812      	ldr	r2, [r2, #0]
 8016b7e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016b80:	697b      	ldr	r3, [r7, #20]
 8016b82:	2200      	movs	r2, #0
 8016b84:	701a      	strb	r2, [r3, #0]
 8016b86:	2200      	movs	r2, #0
 8016b88:	f042 0201 	orr.w	r2, r2, #1
 8016b8c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016b8e:	697b      	ldr	r3, [r7, #20]
 8016b90:	2200      	movs	r2, #0
 8016b92:	f042 0208 	orr.w	r2, r2, #8
 8016b96:	709a      	strb	r2, [r3, #2]
 8016b98:	2200      	movs	r2, #0
 8016b9a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016b9c:	697b      	ldr	r3, [r7, #20]
 8016b9e:	2206      	movs	r2, #6
 8016ba0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016ba2:	697b      	ldr	r3, [r7, #20]
 8016ba4:	2204      	movs	r2, #4
 8016ba6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016ba8:	f640 0306 	movw	r3, #2054	; 0x806
 8016bac:	9300      	str	r3, [sp, #0]
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	68ba      	ldr	r2, [r7, #8]
 8016bb2:	69b9      	ldr	r1, [r7, #24]
 8016bb4:	68f8      	ldr	r0, [r7, #12]
 8016bb6:	f001 fbf7 	bl	80183a8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016bba:	69b8      	ldr	r0, [r7, #24]
 8016bbc:	f7f7 ff36 	bl	800ea2c <pbuf_free>
  p = NULL;
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016bc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016bc8:	4618      	mov	r0, r3
 8016bca:	3720      	adds	r7, #32
 8016bcc:	46bd      	mov	sp, r7
 8016bce:	bd80      	pop	{r7, pc}
 8016bd0:	0801ebbc 	.word	0x0801ebbc
 8016bd4:	0801ed0c 	.word	0x0801ed0c
 8016bd8:	0801ec34 	.word	0x0801ec34
 8016bdc:	0801edbc 	.word	0x0801edbc
 8016be0:	0801edf0 	.word	0x0801edf0

08016be4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016be4:	b580      	push	{r7, lr}
 8016be6:	b088      	sub	sp, #32
 8016be8:	af04      	add	r7, sp, #16
 8016bea:	60f8      	str	r0, [r7, #12]
 8016bec:	60b9      	str	r1, [r7, #8]
 8016bee:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016c00:	2201      	movs	r2, #1
 8016c02:	9203      	str	r2, [sp, #12]
 8016c04:	68ba      	ldr	r2, [r7, #8]
 8016c06:	9202      	str	r2, [sp, #8]
 8016c08:	4a06      	ldr	r2, [pc, #24]	; (8016c24 <etharp_request_dst+0x40>)
 8016c0a:	9201      	str	r2, [sp, #4]
 8016c0c:	9300      	str	r3, [sp, #0]
 8016c0e:	4603      	mov	r3, r0
 8016c10:	687a      	ldr	r2, [r7, #4]
 8016c12:	68f8      	ldr	r0, [r7, #12]
 8016c14:	f7ff ff5a 	bl	8016acc <etharp_raw>
 8016c18:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	3710      	adds	r7, #16
 8016c1e:	46bd      	mov	sp, r7
 8016c20:	bd80      	pop	{r7, pc}
 8016c22:	bf00      	nop
 8016c24:	0801f5f0 	.word	0x0801f5f0

08016c28 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016c28:	b580      	push	{r7, lr}
 8016c2a:	b082      	sub	sp, #8
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	6078      	str	r0, [r7, #4]
 8016c30:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016c32:	4a05      	ldr	r2, [pc, #20]	; (8016c48 <etharp_request+0x20>)
 8016c34:	6839      	ldr	r1, [r7, #0]
 8016c36:	6878      	ldr	r0, [r7, #4]
 8016c38:	f7ff ffd4 	bl	8016be4 <etharp_request_dst>
 8016c3c:	4603      	mov	r3, r0
}
 8016c3e:	4618      	mov	r0, r3
 8016c40:	3708      	adds	r7, #8
 8016c42:	46bd      	mov	sp, r7
 8016c44:	bd80      	pop	{r7, pc}
 8016c46:	bf00      	nop
 8016c48:	0801f5e8 	.word	0x0801f5e8

08016c4c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016c4c:	b580      	push	{r7, lr}
 8016c4e:	b08e      	sub	sp, #56	; 0x38
 8016c50:	af04      	add	r7, sp, #16
 8016c52:	6078      	str	r0, [r7, #4]
 8016c54:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016c56:	4b79      	ldr	r3, [pc, #484]	; (8016e3c <icmp_input+0x1f0>)
 8016c58:	689b      	ldr	r3, [r3, #8]
 8016c5a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c5e:	781b      	ldrb	r3, [r3, #0]
 8016c60:	f003 030f 	and.w	r3, r3, #15
 8016c64:	b2db      	uxtb	r3, r3
 8016c66:	009b      	lsls	r3, r3, #2
 8016c68:	b2db      	uxtb	r3, r3
 8016c6a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016c6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016c6e:	2b13      	cmp	r3, #19
 8016c70:	f240 80cd 	bls.w	8016e0e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	895b      	ldrh	r3, [r3, #10]
 8016c78:	2b03      	cmp	r3, #3
 8016c7a:	f240 80ca 	bls.w	8016e12 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	685b      	ldr	r3, [r3, #4]
 8016c82:	781b      	ldrb	r3, [r3, #0]
 8016c84:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016c88:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	f000 80b7 	beq.w	8016e00 <icmp_input+0x1b4>
 8016c92:	2b08      	cmp	r3, #8
 8016c94:	f040 80b7 	bne.w	8016e06 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016c98:	4b69      	ldr	r3, [pc, #420]	; (8016e40 <icmp_input+0x1f4>)
 8016c9a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016c9c:	4b67      	ldr	r3, [pc, #412]	; (8016e3c <icmp_input+0x1f0>)
 8016c9e:	695b      	ldr	r3, [r3, #20]
 8016ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016ca4:	2be0      	cmp	r3, #224	; 0xe0
 8016ca6:	f000 80bb 	beq.w	8016e20 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016caa:	4b64      	ldr	r3, [pc, #400]	; (8016e3c <icmp_input+0x1f0>)
 8016cac:	695b      	ldr	r3, [r3, #20]
 8016cae:	4a63      	ldr	r2, [pc, #396]	; (8016e3c <icmp_input+0x1f0>)
 8016cb0:	6812      	ldr	r2, [r2, #0]
 8016cb2:	4611      	mov	r1, r2
 8016cb4:	4618      	mov	r0, r3
 8016cb6:	f000 fbed 	bl	8017494 <ip4_addr_isbroadcast_u32>
 8016cba:	4603      	mov	r3, r0
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	f040 80b1 	bne.w	8016e24 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	891b      	ldrh	r3, [r3, #8]
 8016cc6:	2b07      	cmp	r3, #7
 8016cc8:	f240 80a5 	bls.w	8016e16 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016ccc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016cce:	330e      	adds	r3, #14
 8016cd0:	4619      	mov	r1, r3
 8016cd2:	6878      	ldr	r0, [r7, #4]
 8016cd4:	f7f7 fde2 	bl	800e89c <pbuf_add_header>
 8016cd8:	4603      	mov	r3, r0
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d04b      	beq.n	8016d76 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	891a      	ldrh	r2, [r3, #8]
 8016ce2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016ce4:	4413      	add	r3, r2
 8016ce6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	891b      	ldrh	r3, [r3, #8]
 8016cec:	8b7a      	ldrh	r2, [r7, #26]
 8016cee:	429a      	cmp	r2, r3
 8016cf0:	f0c0 809a 	bcc.w	8016e28 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016cf4:	8b7b      	ldrh	r3, [r7, #26]
 8016cf6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016cfa:	4619      	mov	r1, r3
 8016cfc:	200e      	movs	r0, #14
 8016cfe:	f7f7 fb7f 	bl	800e400 <pbuf_alloc>
 8016d02:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016d04:	697b      	ldr	r3, [r7, #20]
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	f000 8090 	beq.w	8016e2c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016d0c:	697b      	ldr	r3, [r7, #20]
 8016d0e:	895b      	ldrh	r3, [r3, #10]
 8016d10:	461a      	mov	r2, r3
 8016d12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016d14:	3308      	adds	r3, #8
 8016d16:	429a      	cmp	r2, r3
 8016d18:	d203      	bcs.n	8016d22 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016d1a:	6978      	ldr	r0, [r7, #20]
 8016d1c:	f7f7 fe86 	bl	800ea2c <pbuf_free>
          goto icmperr;
 8016d20:	e085      	b.n	8016e2e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8016d22:	697b      	ldr	r3, [r7, #20]
 8016d24:	685b      	ldr	r3, [r3, #4]
 8016d26:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016d28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016d2a:	4618      	mov	r0, r3
 8016d2c:	f003 fc46 	bl	801a5bc <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016d30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016d32:	4619      	mov	r1, r3
 8016d34:	6978      	ldr	r0, [r7, #20]
 8016d36:	f7f7 fdc1 	bl	800e8bc <pbuf_remove_header>
 8016d3a:	4603      	mov	r3, r0
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d009      	beq.n	8016d54 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016d40:	4b40      	ldr	r3, [pc, #256]	; (8016e44 <icmp_input+0x1f8>)
 8016d42:	22b6      	movs	r2, #182	; 0xb6
 8016d44:	4940      	ldr	r1, [pc, #256]	; (8016e48 <icmp_input+0x1fc>)
 8016d46:	4841      	ldr	r0, [pc, #260]	; (8016e4c <icmp_input+0x200>)
 8016d48:	f004 f800 	bl	801ad4c <iprintf>
          pbuf_free(r);
 8016d4c:	6978      	ldr	r0, [r7, #20]
 8016d4e:	f7f7 fe6d 	bl	800ea2c <pbuf_free>
          goto icmperr;
 8016d52:	e06c      	b.n	8016e2e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016d54:	6879      	ldr	r1, [r7, #4]
 8016d56:	6978      	ldr	r0, [r7, #20]
 8016d58:	f7f7 ff9c 	bl	800ec94 <pbuf_copy>
 8016d5c:	4603      	mov	r3, r0
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d003      	beq.n	8016d6a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016d62:	6978      	ldr	r0, [r7, #20]
 8016d64:	f7f7 fe62 	bl	800ea2c <pbuf_free>
          goto icmperr;
 8016d68:	e061      	b.n	8016e2e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8016d6a:	6878      	ldr	r0, [r7, #4]
 8016d6c:	f7f7 fe5e 	bl	800ea2c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016d70:	697b      	ldr	r3, [r7, #20]
 8016d72:	607b      	str	r3, [r7, #4]
 8016d74:	e00f      	b.n	8016d96 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016d76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016d78:	330e      	adds	r3, #14
 8016d7a:	4619      	mov	r1, r3
 8016d7c:	6878      	ldr	r0, [r7, #4]
 8016d7e:	f7f7 fd9d 	bl	800e8bc <pbuf_remove_header>
 8016d82:	4603      	mov	r3, r0
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d006      	beq.n	8016d96 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016d88:	4b2e      	ldr	r3, [pc, #184]	; (8016e44 <icmp_input+0x1f8>)
 8016d8a:	22c7      	movs	r2, #199	; 0xc7
 8016d8c:	4930      	ldr	r1, [pc, #192]	; (8016e50 <icmp_input+0x204>)
 8016d8e:	482f      	ldr	r0, [pc, #188]	; (8016e4c <icmp_input+0x200>)
 8016d90:	f003 ffdc 	bl	801ad4c <iprintf>
          goto icmperr;
 8016d94:	e04b      	b.n	8016e2e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	685b      	ldr	r3, [r3, #4]
 8016d9a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016d9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016d9e:	4619      	mov	r1, r3
 8016da0:	6878      	ldr	r0, [r7, #4]
 8016da2:	f7f7 fd7b 	bl	800e89c <pbuf_add_header>
 8016da6:	4603      	mov	r3, r0
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d12b      	bne.n	8016e04 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	685b      	ldr	r3, [r3, #4]
 8016db0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8016db2:	69fb      	ldr	r3, [r7, #28]
 8016db4:	681a      	ldr	r2, [r3, #0]
 8016db6:	68fb      	ldr	r3, [r7, #12]
 8016db8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016dba:	4b20      	ldr	r3, [pc, #128]	; (8016e3c <icmp_input+0x1f0>)
 8016dbc:	691a      	ldr	r2, [r3, #16]
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016dc2:	693b      	ldr	r3, [r7, #16]
 8016dc4:	2200      	movs	r2, #0
 8016dc6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016dc8:	693b      	ldr	r3, [r7, #16]
 8016dca:	2200      	movs	r2, #0
 8016dcc:	709a      	strb	r2, [r3, #2]
 8016dce:	2200      	movs	r2, #0
 8016dd0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	22ff      	movs	r2, #255	; 0xff
 8016dd6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	2200      	movs	r2, #0
 8016ddc:	729a      	strb	r2, [r3, #10]
 8016dde:	2200      	movs	r2, #0
 8016de0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016de2:	683b      	ldr	r3, [r7, #0]
 8016de4:	9302      	str	r3, [sp, #8]
 8016de6:	2301      	movs	r3, #1
 8016de8:	9301      	str	r3, [sp, #4]
 8016dea:	2300      	movs	r3, #0
 8016dec:	9300      	str	r3, [sp, #0]
 8016dee:	23ff      	movs	r3, #255	; 0xff
 8016df0:	2200      	movs	r2, #0
 8016df2:	69f9      	ldr	r1, [r7, #28]
 8016df4:	6878      	ldr	r0, [r7, #4]
 8016df6:	f000 fa75 	bl	80172e4 <ip4_output_if>
 8016dfa:	4603      	mov	r3, r0
 8016dfc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016dfe:	e001      	b.n	8016e04 <icmp_input+0x1b8>
      break;
 8016e00:	bf00      	nop
 8016e02:	e000      	b.n	8016e06 <icmp_input+0x1ba>
      break;
 8016e04:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016e06:	6878      	ldr	r0, [r7, #4]
 8016e08:	f7f7 fe10 	bl	800ea2c <pbuf_free>
  return;
 8016e0c:	e013      	b.n	8016e36 <icmp_input+0x1ea>
    goto lenerr;
 8016e0e:	bf00      	nop
 8016e10:	e002      	b.n	8016e18 <icmp_input+0x1cc>
    goto lenerr;
 8016e12:	bf00      	nop
 8016e14:	e000      	b.n	8016e18 <icmp_input+0x1cc>
        goto lenerr;
 8016e16:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016e18:	6878      	ldr	r0, [r7, #4]
 8016e1a:	f7f7 fe07 	bl	800ea2c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016e1e:	e00a      	b.n	8016e36 <icmp_input+0x1ea>
        goto icmperr;
 8016e20:	bf00      	nop
 8016e22:	e004      	b.n	8016e2e <icmp_input+0x1e2>
        goto icmperr;
 8016e24:	bf00      	nop
 8016e26:	e002      	b.n	8016e2e <icmp_input+0x1e2>
          goto icmperr;
 8016e28:	bf00      	nop
 8016e2a:	e000      	b.n	8016e2e <icmp_input+0x1e2>
          goto icmperr;
 8016e2c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016e2e:	6878      	ldr	r0, [r7, #4]
 8016e30:	f7f7 fdfc 	bl	800ea2c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016e34:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016e36:	3728      	adds	r7, #40	; 0x28
 8016e38:	46bd      	mov	sp, r7
 8016e3a:	bd80      	pop	{r7, pc}
 8016e3c:	2000e98c 	.word	0x2000e98c
 8016e40:	2000e9a0 	.word	0x2000e9a0
 8016e44:	0801ee34 	.word	0x0801ee34
 8016e48:	0801ee6c 	.word	0x0801ee6c
 8016e4c:	0801eea4 	.word	0x0801eea4
 8016e50:	0801eecc 	.word	0x0801eecc

08016e54 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016e54:	b580      	push	{r7, lr}
 8016e56:	b082      	sub	sp, #8
 8016e58:	af00      	add	r7, sp, #0
 8016e5a:	6078      	str	r0, [r7, #4]
 8016e5c:	460b      	mov	r3, r1
 8016e5e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016e60:	78fb      	ldrb	r3, [r7, #3]
 8016e62:	461a      	mov	r2, r3
 8016e64:	2103      	movs	r1, #3
 8016e66:	6878      	ldr	r0, [r7, #4]
 8016e68:	f000 f814 	bl	8016e94 <icmp_send_response>
}
 8016e6c:	bf00      	nop
 8016e6e:	3708      	adds	r7, #8
 8016e70:	46bd      	mov	sp, r7
 8016e72:	bd80      	pop	{r7, pc}

08016e74 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016e74:	b580      	push	{r7, lr}
 8016e76:	b082      	sub	sp, #8
 8016e78:	af00      	add	r7, sp, #0
 8016e7a:	6078      	str	r0, [r7, #4]
 8016e7c:	460b      	mov	r3, r1
 8016e7e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016e80:	78fb      	ldrb	r3, [r7, #3]
 8016e82:	461a      	mov	r2, r3
 8016e84:	210b      	movs	r1, #11
 8016e86:	6878      	ldr	r0, [r7, #4]
 8016e88:	f000 f804 	bl	8016e94 <icmp_send_response>
}
 8016e8c:	bf00      	nop
 8016e8e:	3708      	adds	r7, #8
 8016e90:	46bd      	mov	sp, r7
 8016e92:	bd80      	pop	{r7, pc}

08016e94 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016e94:	b580      	push	{r7, lr}
 8016e96:	b08c      	sub	sp, #48	; 0x30
 8016e98:	af04      	add	r7, sp, #16
 8016e9a:	6078      	str	r0, [r7, #4]
 8016e9c:	460b      	mov	r3, r1
 8016e9e:	70fb      	strb	r3, [r7, #3]
 8016ea0:	4613      	mov	r3, r2
 8016ea2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016ea4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016ea8:	2124      	movs	r1, #36	; 0x24
 8016eaa:	2022      	movs	r0, #34	; 0x22
 8016eac:	f7f7 faa8 	bl	800e400 <pbuf_alloc>
 8016eb0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016eb2:	69fb      	ldr	r3, [r7, #28]
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d04c      	beq.n	8016f52 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016eb8:	69fb      	ldr	r3, [r7, #28]
 8016eba:	895b      	ldrh	r3, [r3, #10]
 8016ebc:	2b23      	cmp	r3, #35	; 0x23
 8016ebe:	d806      	bhi.n	8016ece <icmp_send_response+0x3a>
 8016ec0:	4b26      	ldr	r3, [pc, #152]	; (8016f5c <icmp_send_response+0xc8>)
 8016ec2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016ec6:	4926      	ldr	r1, [pc, #152]	; (8016f60 <icmp_send_response+0xcc>)
 8016ec8:	4826      	ldr	r0, [pc, #152]	; (8016f64 <icmp_send_response+0xd0>)
 8016eca:	f003 ff3f 	bl	801ad4c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	685b      	ldr	r3, [r3, #4]
 8016ed2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016ed4:	69fb      	ldr	r3, [r7, #28]
 8016ed6:	685b      	ldr	r3, [r3, #4]
 8016ed8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016eda:	697b      	ldr	r3, [r7, #20]
 8016edc:	78fa      	ldrb	r2, [r7, #3]
 8016ede:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016ee0:	697b      	ldr	r3, [r7, #20]
 8016ee2:	78ba      	ldrb	r2, [r7, #2]
 8016ee4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016ee6:	697b      	ldr	r3, [r7, #20]
 8016ee8:	2200      	movs	r2, #0
 8016eea:	711a      	strb	r2, [r3, #4]
 8016eec:	2200      	movs	r2, #0
 8016eee:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016ef0:	697b      	ldr	r3, [r7, #20]
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	719a      	strb	r2, [r3, #6]
 8016ef6:	2200      	movs	r2, #0
 8016ef8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016efa:	69fb      	ldr	r3, [r7, #28]
 8016efc:	685b      	ldr	r3, [r3, #4]
 8016efe:	f103 0008 	add.w	r0, r3, #8
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	685b      	ldr	r3, [r3, #4]
 8016f06:	221c      	movs	r2, #28
 8016f08:	4619      	mov	r1, r3
 8016f0a:	f003 fb57 	bl	801a5bc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016f0e:	69bb      	ldr	r3, [r7, #24]
 8016f10:	68db      	ldr	r3, [r3, #12]
 8016f12:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016f14:	f107 030c 	add.w	r3, r7, #12
 8016f18:	4618      	mov	r0, r3
 8016f1a:	f000 f825 	bl	8016f68 <ip4_route>
 8016f1e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016f20:	693b      	ldr	r3, [r7, #16]
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d011      	beq.n	8016f4a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016f26:	697b      	ldr	r3, [r7, #20]
 8016f28:	2200      	movs	r2, #0
 8016f2a:	709a      	strb	r2, [r3, #2]
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016f30:	f107 020c 	add.w	r2, r7, #12
 8016f34:	693b      	ldr	r3, [r7, #16]
 8016f36:	9302      	str	r3, [sp, #8]
 8016f38:	2301      	movs	r3, #1
 8016f3a:	9301      	str	r3, [sp, #4]
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	9300      	str	r3, [sp, #0]
 8016f40:	23ff      	movs	r3, #255	; 0xff
 8016f42:	2100      	movs	r1, #0
 8016f44:	69f8      	ldr	r0, [r7, #28]
 8016f46:	f000 f9cd 	bl	80172e4 <ip4_output_if>
  }
  pbuf_free(q);
 8016f4a:	69f8      	ldr	r0, [r7, #28]
 8016f4c:	f7f7 fd6e 	bl	800ea2c <pbuf_free>
 8016f50:	e000      	b.n	8016f54 <icmp_send_response+0xc0>
    return;
 8016f52:	bf00      	nop
}
 8016f54:	3720      	adds	r7, #32
 8016f56:	46bd      	mov	sp, r7
 8016f58:	bd80      	pop	{r7, pc}
 8016f5a:	bf00      	nop
 8016f5c:	0801ee34 	.word	0x0801ee34
 8016f60:	0801ef00 	.word	0x0801ef00
 8016f64:	0801eea4 	.word	0x0801eea4

08016f68 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016f68:	b480      	push	{r7}
 8016f6a:	b085      	sub	sp, #20
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016f70:	4b33      	ldr	r3, [pc, #204]	; (8017040 <ip4_route+0xd8>)
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	60fb      	str	r3, [r7, #12]
 8016f76:	e036      	b.n	8016fe6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016f7e:	f003 0301 	and.w	r3, r3, #1
 8016f82:	b2db      	uxtb	r3, r3
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d02b      	beq.n	8016fe0 <ip4_route+0x78>
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016f8e:	089b      	lsrs	r3, r3, #2
 8016f90:	f003 0301 	and.w	r3, r3, #1
 8016f94:	b2db      	uxtb	r3, r3
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d022      	beq.n	8016fe0 <ip4_route+0x78>
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	3304      	adds	r3, #4
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d01d      	beq.n	8016fe0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	681a      	ldr	r2, [r3, #0]
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	3304      	adds	r3, #4
 8016fac:	681b      	ldr	r3, [r3, #0]
 8016fae:	405a      	eors	r2, r3
 8016fb0:	68fb      	ldr	r3, [r7, #12]
 8016fb2:	3308      	adds	r3, #8
 8016fb4:	681b      	ldr	r3, [r3, #0]
 8016fb6:	4013      	ands	r3, r2
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d101      	bne.n	8016fc0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	e038      	b.n	8017032 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016fc6:	f003 0302 	and.w	r3, r3, #2
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d108      	bne.n	8016fe0 <ip4_route+0x78>
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	681a      	ldr	r2, [r3, #0]
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	330c      	adds	r3, #12
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	429a      	cmp	r2, r3
 8016fda:	d101      	bne.n	8016fe0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	e028      	b.n	8017032 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016fe0:	68fb      	ldr	r3, [r7, #12]
 8016fe2:	681b      	ldr	r3, [r3, #0]
 8016fe4:	60fb      	str	r3, [r7, #12]
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d1c5      	bne.n	8016f78 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016fec:	4b15      	ldr	r3, [pc, #84]	; (8017044 <ip4_route+0xdc>)
 8016fee:	681b      	ldr	r3, [r3, #0]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d01a      	beq.n	801702a <ip4_route+0xc2>
 8016ff4:	4b13      	ldr	r3, [pc, #76]	; (8017044 <ip4_route+0xdc>)
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016ffc:	f003 0301 	and.w	r3, r3, #1
 8017000:	2b00      	cmp	r3, #0
 8017002:	d012      	beq.n	801702a <ip4_route+0xc2>
 8017004:	4b0f      	ldr	r3, [pc, #60]	; (8017044 <ip4_route+0xdc>)
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801700c:	f003 0304 	and.w	r3, r3, #4
 8017010:	2b00      	cmp	r3, #0
 8017012:	d00a      	beq.n	801702a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017014:	4b0b      	ldr	r3, [pc, #44]	; (8017044 <ip4_route+0xdc>)
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	3304      	adds	r3, #4
 801701a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801701c:	2b00      	cmp	r3, #0
 801701e:	d004      	beq.n	801702a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	b2db      	uxtb	r3, r3
 8017026:	2b7f      	cmp	r3, #127	; 0x7f
 8017028:	d101      	bne.n	801702e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801702a:	2300      	movs	r3, #0
 801702c:	e001      	b.n	8017032 <ip4_route+0xca>
  }

  return netif_default;
 801702e:	4b05      	ldr	r3, [pc, #20]	; (8017044 <ip4_route+0xdc>)
 8017030:	681b      	ldr	r3, [r3, #0]
}
 8017032:	4618      	mov	r0, r3
 8017034:	3714      	adds	r7, #20
 8017036:	46bd      	mov	sp, r7
 8017038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801703c:	4770      	bx	lr
 801703e:	bf00      	nop
 8017040:	20012090 	.word	0x20012090
 8017044:	20012094 	.word	0x20012094

08017048 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017048:	b580      	push	{r7, lr}
 801704a:	b082      	sub	sp, #8
 801704c:	af00      	add	r7, sp, #0
 801704e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017056:	f003 0301 	and.w	r3, r3, #1
 801705a:	b2db      	uxtb	r3, r3
 801705c:	2b00      	cmp	r3, #0
 801705e:	d016      	beq.n	801708e <ip4_input_accept+0x46>
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	3304      	adds	r3, #4
 8017064:	681b      	ldr	r3, [r3, #0]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d011      	beq.n	801708e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801706a:	4b0b      	ldr	r3, [pc, #44]	; (8017098 <ip4_input_accept+0x50>)
 801706c:	695a      	ldr	r2, [r3, #20]
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	3304      	adds	r3, #4
 8017072:	681b      	ldr	r3, [r3, #0]
 8017074:	429a      	cmp	r2, r3
 8017076:	d008      	beq.n	801708a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017078:	4b07      	ldr	r3, [pc, #28]	; (8017098 <ip4_input_accept+0x50>)
 801707a:	695b      	ldr	r3, [r3, #20]
 801707c:	6879      	ldr	r1, [r7, #4]
 801707e:	4618      	mov	r0, r3
 8017080:	f000 fa08 	bl	8017494 <ip4_addr_isbroadcast_u32>
 8017084:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017086:	2b00      	cmp	r3, #0
 8017088:	d001      	beq.n	801708e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801708a:	2301      	movs	r3, #1
 801708c:	e000      	b.n	8017090 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801708e:	2300      	movs	r3, #0
}
 8017090:	4618      	mov	r0, r3
 8017092:	3708      	adds	r7, #8
 8017094:	46bd      	mov	sp, r7
 8017096:	bd80      	pop	{r7, pc}
 8017098:	2000e98c 	.word	0x2000e98c

0801709c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801709c:	b580      	push	{r7, lr}
 801709e:	b086      	sub	sp, #24
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	6078      	str	r0, [r7, #4]
 80170a4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	685b      	ldr	r3, [r3, #4]
 80170aa:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80170ac:	697b      	ldr	r3, [r7, #20]
 80170ae:	781b      	ldrb	r3, [r3, #0]
 80170b0:	091b      	lsrs	r3, r3, #4
 80170b2:	b2db      	uxtb	r3, r3
 80170b4:	2b04      	cmp	r3, #4
 80170b6:	d004      	beq.n	80170c2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80170b8:	6878      	ldr	r0, [r7, #4]
 80170ba:	f7f7 fcb7 	bl	800ea2c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80170be:	2300      	movs	r3, #0
 80170c0:	e107      	b.n	80172d2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80170c2:	697b      	ldr	r3, [r7, #20]
 80170c4:	781b      	ldrb	r3, [r3, #0]
 80170c6:	f003 030f 	and.w	r3, r3, #15
 80170ca:	b2db      	uxtb	r3, r3
 80170cc:	009b      	lsls	r3, r3, #2
 80170ce:	b2db      	uxtb	r3, r3
 80170d0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80170d2:	697b      	ldr	r3, [r7, #20]
 80170d4:	885b      	ldrh	r3, [r3, #2]
 80170d6:	b29b      	uxth	r3, r3
 80170d8:	4618      	mov	r0, r3
 80170da:	f7f6 f891 	bl	800d200 <lwip_htons>
 80170de:	4603      	mov	r3, r0
 80170e0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	891b      	ldrh	r3, [r3, #8]
 80170e6:	89ba      	ldrh	r2, [r7, #12]
 80170e8:	429a      	cmp	r2, r3
 80170ea:	d204      	bcs.n	80170f6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80170ec:	89bb      	ldrh	r3, [r7, #12]
 80170ee:	4619      	mov	r1, r3
 80170f0:	6878      	ldr	r0, [r7, #4]
 80170f2:	f7f7 fae3 	bl	800e6bc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	895b      	ldrh	r3, [r3, #10]
 80170fa:	89fa      	ldrh	r2, [r7, #14]
 80170fc:	429a      	cmp	r2, r3
 80170fe:	d807      	bhi.n	8017110 <ip4_input+0x74>
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	891b      	ldrh	r3, [r3, #8]
 8017104:	89ba      	ldrh	r2, [r7, #12]
 8017106:	429a      	cmp	r2, r3
 8017108:	d802      	bhi.n	8017110 <ip4_input+0x74>
 801710a:	89fb      	ldrh	r3, [r7, #14]
 801710c:	2b13      	cmp	r3, #19
 801710e:	d804      	bhi.n	801711a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017110:	6878      	ldr	r0, [r7, #4]
 8017112:	f7f7 fc8b 	bl	800ea2c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017116:	2300      	movs	r3, #0
 8017118:	e0db      	b.n	80172d2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801711a:	697b      	ldr	r3, [r7, #20]
 801711c:	691b      	ldr	r3, [r3, #16]
 801711e:	4a6f      	ldr	r2, [pc, #444]	; (80172dc <ip4_input+0x240>)
 8017120:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017122:	697b      	ldr	r3, [r7, #20]
 8017124:	68db      	ldr	r3, [r3, #12]
 8017126:	4a6d      	ldr	r2, [pc, #436]	; (80172dc <ip4_input+0x240>)
 8017128:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801712a:	4b6c      	ldr	r3, [pc, #432]	; (80172dc <ip4_input+0x240>)
 801712c:	695b      	ldr	r3, [r3, #20]
 801712e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017132:	2be0      	cmp	r3, #224	; 0xe0
 8017134:	d112      	bne.n	801715c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017136:	683b      	ldr	r3, [r7, #0]
 8017138:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801713c:	f003 0301 	and.w	r3, r3, #1
 8017140:	b2db      	uxtb	r3, r3
 8017142:	2b00      	cmp	r3, #0
 8017144:	d007      	beq.n	8017156 <ip4_input+0xba>
 8017146:	683b      	ldr	r3, [r7, #0]
 8017148:	3304      	adds	r3, #4
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	2b00      	cmp	r3, #0
 801714e:	d002      	beq.n	8017156 <ip4_input+0xba>
      netif = inp;
 8017150:	683b      	ldr	r3, [r7, #0]
 8017152:	613b      	str	r3, [r7, #16]
 8017154:	e02a      	b.n	80171ac <ip4_input+0x110>
    } else {
      netif = NULL;
 8017156:	2300      	movs	r3, #0
 8017158:	613b      	str	r3, [r7, #16]
 801715a:	e027      	b.n	80171ac <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801715c:	6838      	ldr	r0, [r7, #0]
 801715e:	f7ff ff73 	bl	8017048 <ip4_input_accept>
 8017162:	4603      	mov	r3, r0
 8017164:	2b00      	cmp	r3, #0
 8017166:	d002      	beq.n	801716e <ip4_input+0xd2>
      netif = inp;
 8017168:	683b      	ldr	r3, [r7, #0]
 801716a:	613b      	str	r3, [r7, #16]
 801716c:	e01e      	b.n	80171ac <ip4_input+0x110>
    } else {
      netif = NULL;
 801716e:	2300      	movs	r3, #0
 8017170:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017172:	4b5a      	ldr	r3, [pc, #360]	; (80172dc <ip4_input+0x240>)
 8017174:	695b      	ldr	r3, [r3, #20]
 8017176:	b2db      	uxtb	r3, r3
 8017178:	2b7f      	cmp	r3, #127	; 0x7f
 801717a:	d017      	beq.n	80171ac <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801717c:	4b58      	ldr	r3, [pc, #352]	; (80172e0 <ip4_input+0x244>)
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	613b      	str	r3, [r7, #16]
 8017182:	e00e      	b.n	80171a2 <ip4_input+0x106>
          if (netif == inp) {
 8017184:	693a      	ldr	r2, [r7, #16]
 8017186:	683b      	ldr	r3, [r7, #0]
 8017188:	429a      	cmp	r2, r3
 801718a:	d006      	beq.n	801719a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801718c:	6938      	ldr	r0, [r7, #16]
 801718e:	f7ff ff5b 	bl	8017048 <ip4_input_accept>
 8017192:	4603      	mov	r3, r0
 8017194:	2b00      	cmp	r3, #0
 8017196:	d108      	bne.n	80171aa <ip4_input+0x10e>
 8017198:	e000      	b.n	801719c <ip4_input+0x100>
            continue;
 801719a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801719c:	693b      	ldr	r3, [r7, #16]
 801719e:	681b      	ldr	r3, [r3, #0]
 80171a0:	613b      	str	r3, [r7, #16]
 80171a2:	693b      	ldr	r3, [r7, #16]
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d1ed      	bne.n	8017184 <ip4_input+0xe8>
 80171a8:	e000      	b.n	80171ac <ip4_input+0x110>
            break;
 80171aa:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80171ac:	4b4b      	ldr	r3, [pc, #300]	; (80172dc <ip4_input+0x240>)
 80171ae:	691b      	ldr	r3, [r3, #16]
 80171b0:	6839      	ldr	r1, [r7, #0]
 80171b2:	4618      	mov	r0, r3
 80171b4:	f000 f96e 	bl	8017494 <ip4_addr_isbroadcast_u32>
 80171b8:	4603      	mov	r3, r0
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d105      	bne.n	80171ca <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80171be:	4b47      	ldr	r3, [pc, #284]	; (80172dc <ip4_input+0x240>)
 80171c0:	691b      	ldr	r3, [r3, #16]
 80171c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80171c6:	2be0      	cmp	r3, #224	; 0xe0
 80171c8:	d104      	bne.n	80171d4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80171ca:	6878      	ldr	r0, [r7, #4]
 80171cc:	f7f7 fc2e 	bl	800ea2c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80171d0:	2300      	movs	r3, #0
 80171d2:	e07e      	b.n	80172d2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80171d4:	693b      	ldr	r3, [r7, #16]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d104      	bne.n	80171e4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80171da:	6878      	ldr	r0, [r7, #4]
 80171dc:	f7f7 fc26 	bl	800ea2c <pbuf_free>
    return ERR_OK;
 80171e0:	2300      	movs	r3, #0
 80171e2:	e076      	b.n	80172d2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80171e4:	697b      	ldr	r3, [r7, #20]
 80171e6:	88db      	ldrh	r3, [r3, #6]
 80171e8:	b29b      	uxth	r3, r3
 80171ea:	461a      	mov	r2, r3
 80171ec:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80171f0:	4013      	ands	r3, r2
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d00b      	beq.n	801720e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80171f6:	6878      	ldr	r0, [r7, #4]
 80171f8:	f000 fd14 	bl	8017c24 <ip4_reass>
 80171fc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	2b00      	cmp	r3, #0
 8017202:	d101      	bne.n	8017208 <ip4_input+0x16c>
      return ERR_OK;
 8017204:	2300      	movs	r3, #0
 8017206:	e064      	b.n	80172d2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	685b      	ldr	r3, [r3, #4]
 801720c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801720e:	4a33      	ldr	r2, [pc, #204]	; (80172dc <ip4_input+0x240>)
 8017210:	693b      	ldr	r3, [r7, #16]
 8017212:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017214:	4a31      	ldr	r2, [pc, #196]	; (80172dc <ip4_input+0x240>)
 8017216:	683b      	ldr	r3, [r7, #0]
 8017218:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801721a:	4a30      	ldr	r2, [pc, #192]	; (80172dc <ip4_input+0x240>)
 801721c:	697b      	ldr	r3, [r7, #20]
 801721e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017220:	697b      	ldr	r3, [r7, #20]
 8017222:	781b      	ldrb	r3, [r3, #0]
 8017224:	f003 030f 	and.w	r3, r3, #15
 8017228:	b2db      	uxtb	r3, r3
 801722a:	009b      	lsls	r3, r3, #2
 801722c:	b2db      	uxtb	r3, r3
 801722e:	b29a      	uxth	r2, r3
 8017230:	4b2a      	ldr	r3, [pc, #168]	; (80172dc <ip4_input+0x240>)
 8017232:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017234:	89fb      	ldrh	r3, [r7, #14]
 8017236:	4619      	mov	r1, r3
 8017238:	6878      	ldr	r0, [r7, #4]
 801723a:	f7f7 fb3f 	bl	800e8bc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801723e:	697b      	ldr	r3, [r7, #20]
 8017240:	7a5b      	ldrb	r3, [r3, #9]
 8017242:	2b11      	cmp	r3, #17
 8017244:	d006      	beq.n	8017254 <ip4_input+0x1b8>
 8017246:	2b11      	cmp	r3, #17
 8017248:	dc13      	bgt.n	8017272 <ip4_input+0x1d6>
 801724a:	2b01      	cmp	r3, #1
 801724c:	d00c      	beq.n	8017268 <ip4_input+0x1cc>
 801724e:	2b06      	cmp	r3, #6
 8017250:	d005      	beq.n	801725e <ip4_input+0x1c2>
 8017252:	e00e      	b.n	8017272 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017254:	6839      	ldr	r1, [r7, #0]
 8017256:	6878      	ldr	r0, [r7, #4]
 8017258:	f7fe f956 	bl	8015508 <udp_input>
        break;
 801725c:	e026      	b.n	80172ac <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801725e:	6839      	ldr	r1, [r7, #0]
 8017260:	6878      	ldr	r0, [r7, #4]
 8017262:	f7f9 fd13 	bl	8010c8c <tcp_input>
        break;
 8017266:	e021      	b.n	80172ac <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017268:	6839      	ldr	r1, [r7, #0]
 801726a:	6878      	ldr	r0, [r7, #4]
 801726c:	f7ff fcee 	bl	8016c4c <icmp_input>
        break;
 8017270:	e01c      	b.n	80172ac <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017272:	4b1a      	ldr	r3, [pc, #104]	; (80172dc <ip4_input+0x240>)
 8017274:	695b      	ldr	r3, [r3, #20]
 8017276:	6939      	ldr	r1, [r7, #16]
 8017278:	4618      	mov	r0, r3
 801727a:	f000 f90b 	bl	8017494 <ip4_addr_isbroadcast_u32>
 801727e:	4603      	mov	r3, r0
 8017280:	2b00      	cmp	r3, #0
 8017282:	d10f      	bne.n	80172a4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017284:	4b15      	ldr	r3, [pc, #84]	; (80172dc <ip4_input+0x240>)
 8017286:	695b      	ldr	r3, [r3, #20]
 8017288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801728c:	2be0      	cmp	r3, #224	; 0xe0
 801728e:	d009      	beq.n	80172a4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017290:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017294:	4619      	mov	r1, r3
 8017296:	6878      	ldr	r0, [r7, #4]
 8017298:	f7f7 fb83 	bl	800e9a2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801729c:	2102      	movs	r1, #2
 801729e:	6878      	ldr	r0, [r7, #4]
 80172a0:	f7ff fdd8 	bl	8016e54 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80172a4:	6878      	ldr	r0, [r7, #4]
 80172a6:	f7f7 fbc1 	bl	800ea2c <pbuf_free>
        break;
 80172aa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80172ac:	4b0b      	ldr	r3, [pc, #44]	; (80172dc <ip4_input+0x240>)
 80172ae:	2200      	movs	r2, #0
 80172b0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80172b2:	4b0a      	ldr	r3, [pc, #40]	; (80172dc <ip4_input+0x240>)
 80172b4:	2200      	movs	r2, #0
 80172b6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80172b8:	4b08      	ldr	r3, [pc, #32]	; (80172dc <ip4_input+0x240>)
 80172ba:	2200      	movs	r2, #0
 80172bc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80172be:	4b07      	ldr	r3, [pc, #28]	; (80172dc <ip4_input+0x240>)
 80172c0:	2200      	movs	r2, #0
 80172c2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80172c4:	4b05      	ldr	r3, [pc, #20]	; (80172dc <ip4_input+0x240>)
 80172c6:	2200      	movs	r2, #0
 80172c8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80172ca:	4b04      	ldr	r3, [pc, #16]	; (80172dc <ip4_input+0x240>)
 80172cc:	2200      	movs	r2, #0
 80172ce:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80172d0:	2300      	movs	r3, #0
}
 80172d2:	4618      	mov	r0, r3
 80172d4:	3718      	adds	r7, #24
 80172d6:	46bd      	mov	sp, r7
 80172d8:	bd80      	pop	{r7, pc}
 80172da:	bf00      	nop
 80172dc:	2000e98c 	.word	0x2000e98c
 80172e0:	20012090 	.word	0x20012090

080172e4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80172e4:	b580      	push	{r7, lr}
 80172e6:	b08a      	sub	sp, #40	; 0x28
 80172e8:	af04      	add	r7, sp, #16
 80172ea:	60f8      	str	r0, [r7, #12]
 80172ec:	60b9      	str	r1, [r7, #8]
 80172ee:	607a      	str	r2, [r7, #4]
 80172f0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80172f2:	68bb      	ldr	r3, [r7, #8]
 80172f4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d009      	beq.n	8017310 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80172fc:	68bb      	ldr	r3, [r7, #8]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d003      	beq.n	801730a <ip4_output_if+0x26>
 8017302:	68bb      	ldr	r3, [r7, #8]
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	2b00      	cmp	r3, #0
 8017308:	d102      	bne.n	8017310 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801730a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801730c:	3304      	adds	r3, #4
 801730e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017310:	78fa      	ldrb	r2, [r7, #3]
 8017312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017314:	9302      	str	r3, [sp, #8]
 8017316:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801731a:	9301      	str	r3, [sp, #4]
 801731c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017320:	9300      	str	r3, [sp, #0]
 8017322:	4613      	mov	r3, r2
 8017324:	687a      	ldr	r2, [r7, #4]
 8017326:	6979      	ldr	r1, [r7, #20]
 8017328:	68f8      	ldr	r0, [r7, #12]
 801732a:	f000 f805 	bl	8017338 <ip4_output_if_src>
 801732e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017330:	4618      	mov	r0, r3
 8017332:	3718      	adds	r7, #24
 8017334:	46bd      	mov	sp, r7
 8017336:	bd80      	pop	{r7, pc}

08017338 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017338:	b580      	push	{r7, lr}
 801733a:	b088      	sub	sp, #32
 801733c:	af00      	add	r7, sp, #0
 801733e:	60f8      	str	r0, [r7, #12]
 8017340:	60b9      	str	r1, [r7, #8]
 8017342:	607a      	str	r2, [r7, #4]
 8017344:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	7b9b      	ldrb	r3, [r3, #14]
 801734a:	2b01      	cmp	r3, #1
 801734c:	d006      	beq.n	801735c <ip4_output_if_src+0x24>
 801734e:	4b4b      	ldr	r3, [pc, #300]	; (801747c <ip4_output_if_src+0x144>)
 8017350:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017354:	494a      	ldr	r1, [pc, #296]	; (8017480 <ip4_output_if_src+0x148>)
 8017356:	484b      	ldr	r0, [pc, #300]	; (8017484 <ip4_output_if_src+0x14c>)
 8017358:	f003 fcf8 	bl	801ad4c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	2b00      	cmp	r3, #0
 8017360:	d060      	beq.n	8017424 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017362:	2314      	movs	r3, #20
 8017364:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017366:	2114      	movs	r1, #20
 8017368:	68f8      	ldr	r0, [r7, #12]
 801736a:	f7f7 fa97 	bl	800e89c <pbuf_add_header>
 801736e:	4603      	mov	r3, r0
 8017370:	2b00      	cmp	r3, #0
 8017372:	d002      	beq.n	801737a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017374:	f06f 0301 	mvn.w	r3, #1
 8017378:	e07c      	b.n	8017474 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801737a:	68fb      	ldr	r3, [r7, #12]
 801737c:	685b      	ldr	r3, [r3, #4]
 801737e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	895b      	ldrh	r3, [r3, #10]
 8017384:	2b13      	cmp	r3, #19
 8017386:	d806      	bhi.n	8017396 <ip4_output_if_src+0x5e>
 8017388:	4b3c      	ldr	r3, [pc, #240]	; (801747c <ip4_output_if_src+0x144>)
 801738a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801738e:	493e      	ldr	r1, [pc, #248]	; (8017488 <ip4_output_if_src+0x150>)
 8017390:	483c      	ldr	r0, [pc, #240]	; (8017484 <ip4_output_if_src+0x14c>)
 8017392:	f003 fcdb 	bl	801ad4c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017396:	69fb      	ldr	r3, [r7, #28]
 8017398:	78fa      	ldrb	r2, [r7, #3]
 801739a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801739c:	69fb      	ldr	r3, [r7, #28]
 801739e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80173a2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	681a      	ldr	r2, [r3, #0]
 80173a8:	69fb      	ldr	r3, [r7, #28]
 80173aa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80173ac:	8b7b      	ldrh	r3, [r7, #26]
 80173ae:	089b      	lsrs	r3, r3, #2
 80173b0:	b29b      	uxth	r3, r3
 80173b2:	b2db      	uxtb	r3, r3
 80173b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173b8:	b2da      	uxtb	r2, r3
 80173ba:	69fb      	ldr	r3, [r7, #28]
 80173bc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80173be:	69fb      	ldr	r3, [r7, #28]
 80173c0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80173c4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	891b      	ldrh	r3, [r3, #8]
 80173ca:	4618      	mov	r0, r3
 80173cc:	f7f5 ff18 	bl	800d200 <lwip_htons>
 80173d0:	4603      	mov	r3, r0
 80173d2:	461a      	mov	r2, r3
 80173d4:	69fb      	ldr	r3, [r7, #28]
 80173d6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80173d8:	69fb      	ldr	r3, [r7, #28]
 80173da:	2200      	movs	r2, #0
 80173dc:	719a      	strb	r2, [r3, #6]
 80173de:	2200      	movs	r2, #0
 80173e0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80173e2:	4b2a      	ldr	r3, [pc, #168]	; (801748c <ip4_output_if_src+0x154>)
 80173e4:	881b      	ldrh	r3, [r3, #0]
 80173e6:	4618      	mov	r0, r3
 80173e8:	f7f5 ff0a 	bl	800d200 <lwip_htons>
 80173ec:	4603      	mov	r3, r0
 80173ee:	461a      	mov	r2, r3
 80173f0:	69fb      	ldr	r3, [r7, #28]
 80173f2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80173f4:	4b25      	ldr	r3, [pc, #148]	; (801748c <ip4_output_if_src+0x154>)
 80173f6:	881b      	ldrh	r3, [r3, #0]
 80173f8:	3301      	adds	r3, #1
 80173fa:	b29a      	uxth	r2, r3
 80173fc:	4b23      	ldr	r3, [pc, #140]	; (801748c <ip4_output_if_src+0x154>)
 80173fe:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017400:	68bb      	ldr	r3, [r7, #8]
 8017402:	2b00      	cmp	r3, #0
 8017404:	d104      	bne.n	8017410 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017406:	4b22      	ldr	r3, [pc, #136]	; (8017490 <ip4_output_if_src+0x158>)
 8017408:	681a      	ldr	r2, [r3, #0]
 801740a:	69fb      	ldr	r3, [r7, #28]
 801740c:	60da      	str	r2, [r3, #12]
 801740e:	e003      	b.n	8017418 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017410:	68bb      	ldr	r3, [r7, #8]
 8017412:	681a      	ldr	r2, [r3, #0]
 8017414:	69fb      	ldr	r3, [r7, #28]
 8017416:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017418:	69fb      	ldr	r3, [r7, #28]
 801741a:	2200      	movs	r2, #0
 801741c:	729a      	strb	r2, [r3, #10]
 801741e:	2200      	movs	r2, #0
 8017420:	72da      	strb	r2, [r3, #11]
 8017422:	e00f      	b.n	8017444 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	895b      	ldrh	r3, [r3, #10]
 8017428:	2b13      	cmp	r3, #19
 801742a:	d802      	bhi.n	8017432 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801742c:	f06f 0301 	mvn.w	r3, #1
 8017430:	e020      	b.n	8017474 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017432:	68fb      	ldr	r3, [r7, #12]
 8017434:	685b      	ldr	r3, [r3, #4]
 8017436:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017438:	69fb      	ldr	r3, [r7, #28]
 801743a:	691b      	ldr	r3, [r3, #16]
 801743c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801743e:	f107 0314 	add.w	r3, r7, #20
 8017442:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017446:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017448:	2b00      	cmp	r3, #0
 801744a:	d00c      	beq.n	8017466 <ip4_output_if_src+0x12e>
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	891a      	ldrh	r2, [r3, #8]
 8017450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017452:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017454:	429a      	cmp	r2, r3
 8017456:	d906      	bls.n	8017466 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017458:	687a      	ldr	r2, [r7, #4]
 801745a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801745c:	68f8      	ldr	r0, [r7, #12]
 801745e:	f000 fdcf 	bl	8018000 <ip4_frag>
 8017462:	4603      	mov	r3, r0
 8017464:	e006      	b.n	8017474 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017468:	695b      	ldr	r3, [r3, #20]
 801746a:	687a      	ldr	r2, [r7, #4]
 801746c:	68f9      	ldr	r1, [r7, #12]
 801746e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017470:	4798      	blx	r3
 8017472:	4603      	mov	r3, r0
}
 8017474:	4618      	mov	r0, r3
 8017476:	3720      	adds	r7, #32
 8017478:	46bd      	mov	sp, r7
 801747a:	bd80      	pop	{r7, pc}
 801747c:	0801ef2c 	.word	0x0801ef2c
 8017480:	0801ef60 	.word	0x0801ef60
 8017484:	0801ef6c 	.word	0x0801ef6c
 8017488:	0801ef94 	.word	0x0801ef94
 801748c:	2000b34e 	.word	0x2000b34e
 8017490:	0801f5e4 	.word	0x0801f5e4

08017494 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017494:	b480      	push	{r7}
 8017496:	b085      	sub	sp, #20
 8017498:	af00      	add	r7, sp, #0
 801749a:	6078      	str	r0, [r7, #4]
 801749c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80174a8:	d002      	beq.n	80174b0 <ip4_addr_isbroadcast_u32+0x1c>
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d101      	bne.n	80174b4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80174b0:	2301      	movs	r3, #1
 80174b2:	e02a      	b.n	801750a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80174b4:	683b      	ldr	r3, [r7, #0]
 80174b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80174ba:	f003 0302 	and.w	r3, r3, #2
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d101      	bne.n	80174c6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80174c2:	2300      	movs	r3, #0
 80174c4:	e021      	b.n	801750a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80174c6:	683b      	ldr	r3, [r7, #0]
 80174c8:	3304      	adds	r3, #4
 80174ca:	681b      	ldr	r3, [r3, #0]
 80174cc:	687a      	ldr	r2, [r7, #4]
 80174ce:	429a      	cmp	r2, r3
 80174d0:	d101      	bne.n	80174d6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80174d2:	2300      	movs	r3, #0
 80174d4:	e019      	b.n	801750a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80174d6:	68fa      	ldr	r2, [r7, #12]
 80174d8:	683b      	ldr	r3, [r7, #0]
 80174da:	3304      	adds	r3, #4
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	405a      	eors	r2, r3
 80174e0:	683b      	ldr	r3, [r7, #0]
 80174e2:	3308      	adds	r3, #8
 80174e4:	681b      	ldr	r3, [r3, #0]
 80174e6:	4013      	ands	r3, r2
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d10d      	bne.n	8017508 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80174ec:	683b      	ldr	r3, [r7, #0]
 80174ee:	3308      	adds	r3, #8
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	43da      	mvns	r2, r3
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80174f8:	683b      	ldr	r3, [r7, #0]
 80174fa:	3308      	adds	r3, #8
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017500:	429a      	cmp	r2, r3
 8017502:	d101      	bne.n	8017508 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017504:	2301      	movs	r3, #1
 8017506:	e000      	b.n	801750a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017508:	2300      	movs	r3, #0
  }
}
 801750a:	4618      	mov	r0, r3
 801750c:	3714      	adds	r7, #20
 801750e:	46bd      	mov	sp, r7
 8017510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017514:	4770      	bx	lr
	...

08017518 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8017518:	b480      	push	{r7}
 801751a:	b08d      	sub	sp, #52	; 0x34
 801751c:	af00      	add	r7, sp, #0
 801751e:	60f8      	str	r0, [r7, #12]
 8017520:	60b9      	str	r1, [r7, #8]
 8017522:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8017524:	2300      	movs	r3, #0
 8017526:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801752e:	68bb      	ldr	r3, [r7, #8]
 8017530:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8017532:	f107 0318 	add.w	r3, r7, #24
 8017536:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8017538:	2300      	movs	r3, #0
 801753a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801753e:	e059      	b.n	80175f4 <ip4addr_ntoa_r+0xdc>
    i = 0;
 8017540:	2300      	movs	r3, #0
 8017542:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8017546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017548:	781a      	ldrb	r2, [r3, #0]
 801754a:	4b33      	ldr	r3, [pc, #204]	; (8017618 <ip4addr_ntoa_r+0x100>)
 801754c:	fba3 1302 	umull	r1, r3, r3, r2
 8017550:	08d9      	lsrs	r1, r3, #3
 8017552:	460b      	mov	r3, r1
 8017554:	009b      	lsls	r3, r3, #2
 8017556:	440b      	add	r3, r1
 8017558:	005b      	lsls	r3, r3, #1
 801755a:	1ad3      	subs	r3, r2, r3
 801755c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017560:	781b      	ldrb	r3, [r3, #0]
 8017562:	4a2d      	ldr	r2, [pc, #180]	; (8017618 <ip4addr_ntoa_r+0x100>)
 8017564:	fba2 2303 	umull	r2, r3, r2, r3
 8017568:	08db      	lsrs	r3, r3, #3
 801756a:	b2da      	uxtb	r2, r3
 801756c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801756e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8017570:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017574:	1c5a      	adds	r2, r3, #1
 8017576:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801757a:	4619      	mov	r1, r3
 801757c:	7ffb      	ldrb	r3, [r7, #31]
 801757e:	3330      	adds	r3, #48	; 0x30
 8017580:	b2da      	uxtb	r2, r3
 8017582:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017586:	440b      	add	r3, r1
 8017588:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801758c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801758e:	781b      	ldrb	r3, [r3, #0]
 8017590:	2b00      	cmp	r3, #0
 8017592:	d1d8      	bne.n	8017546 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8017594:	e012      	b.n	80175bc <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 8017596:	6a3b      	ldr	r3, [r7, #32]
 8017598:	1c5a      	adds	r2, r3, #1
 801759a:	623a      	str	r2, [r7, #32]
 801759c:	687a      	ldr	r2, [r7, #4]
 801759e:	429a      	cmp	r2, r3
 80175a0:	dc01      	bgt.n	80175a6 <ip4addr_ntoa_r+0x8e>
        return NULL;
 80175a2:	2300      	movs	r3, #0
 80175a4:	e031      	b.n	801760a <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 80175a6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80175aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175ac:	1c59      	adds	r1, r3, #1
 80175ae:	62f9      	str	r1, [r7, #44]	; 0x2c
 80175b0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80175b4:	440a      	add	r2, r1
 80175b6:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80175ba:	701a      	strb	r2, [r3, #0]
    while (i--) {
 80175bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80175c0:	1e5a      	subs	r2, r3, #1
 80175c2:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d1e5      	bne.n	8017596 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 80175ca:	6a3b      	ldr	r3, [r7, #32]
 80175cc:	1c5a      	adds	r2, r3, #1
 80175ce:	623a      	str	r2, [r7, #32]
 80175d0:	687a      	ldr	r2, [r7, #4]
 80175d2:	429a      	cmp	r2, r3
 80175d4:	dc01      	bgt.n	80175da <ip4addr_ntoa_r+0xc2>
      return NULL;
 80175d6:	2300      	movs	r3, #0
 80175d8:	e017      	b.n	801760a <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 80175da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175dc:	1c5a      	adds	r2, r3, #1
 80175de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80175e0:	222e      	movs	r2, #46	; 0x2e
 80175e2:	701a      	strb	r2, [r3, #0]
    ap++;
 80175e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175e6:	3301      	adds	r3, #1
 80175e8:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80175ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80175ee:	3301      	adds	r3, #1
 80175f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80175f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80175f8:	2b03      	cmp	r3, #3
 80175fa:	d9a1      	bls.n	8017540 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80175fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175fe:	3b01      	subs	r3, #1
 8017600:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017604:	2200      	movs	r2, #0
 8017606:	701a      	strb	r2, [r3, #0]
  return buf;
 8017608:	68bb      	ldr	r3, [r7, #8]
}
 801760a:	4618      	mov	r0, r3
 801760c:	3734      	adds	r7, #52	; 0x34
 801760e:	46bd      	mov	sp, r7
 8017610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017614:	4770      	bx	lr
 8017616:	bf00      	nop
 8017618:	cccccccd 	.word	0xcccccccd

0801761c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801761c:	b580      	push	{r7, lr}
 801761e:	b084      	sub	sp, #16
 8017620:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017622:	2300      	movs	r3, #0
 8017624:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017626:	4b12      	ldr	r3, [pc, #72]	; (8017670 <ip_reass_tmr+0x54>)
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801762c:	e018      	b.n	8017660 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801762e:	68fb      	ldr	r3, [r7, #12]
 8017630:	7fdb      	ldrb	r3, [r3, #31]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d00b      	beq.n	801764e <ip_reass_tmr+0x32>
      r->timer--;
 8017636:	68fb      	ldr	r3, [r7, #12]
 8017638:	7fdb      	ldrb	r3, [r3, #31]
 801763a:	3b01      	subs	r3, #1
 801763c:	b2da      	uxtb	r2, r3
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017642:	68fb      	ldr	r3, [r7, #12]
 8017644:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017646:	68fb      	ldr	r3, [r7, #12]
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	60fb      	str	r3, [r7, #12]
 801764c:	e008      	b.n	8017660 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801764e:	68fb      	ldr	r3, [r7, #12]
 8017650:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017658:	68b9      	ldr	r1, [r7, #8]
 801765a:	6878      	ldr	r0, [r7, #4]
 801765c:	f000 f80a 	bl	8017674 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	2b00      	cmp	r3, #0
 8017664:	d1e3      	bne.n	801762e <ip_reass_tmr+0x12>
    }
  }
}
 8017666:	bf00      	nop
 8017668:	bf00      	nop
 801766a:	3710      	adds	r7, #16
 801766c:	46bd      	mov	sp, r7
 801766e:	bd80      	pop	{r7, pc}
 8017670:	2000b350 	.word	0x2000b350

08017674 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017674:	b580      	push	{r7, lr}
 8017676:	b088      	sub	sp, #32
 8017678:	af00      	add	r7, sp, #0
 801767a:	6078      	str	r0, [r7, #4]
 801767c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801767e:	2300      	movs	r3, #0
 8017680:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017682:	683a      	ldr	r2, [r7, #0]
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	429a      	cmp	r2, r3
 8017688:	d105      	bne.n	8017696 <ip_reass_free_complete_datagram+0x22>
 801768a:	4b45      	ldr	r3, [pc, #276]	; (80177a0 <ip_reass_free_complete_datagram+0x12c>)
 801768c:	22ab      	movs	r2, #171	; 0xab
 801768e:	4945      	ldr	r1, [pc, #276]	; (80177a4 <ip_reass_free_complete_datagram+0x130>)
 8017690:	4845      	ldr	r0, [pc, #276]	; (80177a8 <ip_reass_free_complete_datagram+0x134>)
 8017692:	f003 fb5b 	bl	801ad4c <iprintf>
  if (prev != NULL) {
 8017696:	683b      	ldr	r3, [r7, #0]
 8017698:	2b00      	cmp	r3, #0
 801769a:	d00a      	beq.n	80176b2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801769c:	683b      	ldr	r3, [r7, #0]
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	687a      	ldr	r2, [r7, #4]
 80176a2:	429a      	cmp	r2, r3
 80176a4:	d005      	beq.n	80176b2 <ip_reass_free_complete_datagram+0x3e>
 80176a6:	4b3e      	ldr	r3, [pc, #248]	; (80177a0 <ip_reass_free_complete_datagram+0x12c>)
 80176a8:	22ad      	movs	r2, #173	; 0xad
 80176aa:	4940      	ldr	r1, [pc, #256]	; (80177ac <ip_reass_free_complete_datagram+0x138>)
 80176ac:	483e      	ldr	r0, [pc, #248]	; (80177a8 <ip_reass_free_complete_datagram+0x134>)
 80176ae:	f003 fb4d 	bl	801ad4c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	685b      	ldr	r3, [r3, #4]
 80176b6:	685b      	ldr	r3, [r3, #4]
 80176b8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80176ba:	697b      	ldr	r3, [r7, #20]
 80176bc:	889b      	ldrh	r3, [r3, #4]
 80176be:	b29b      	uxth	r3, r3
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d12a      	bne.n	801771a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	685b      	ldr	r3, [r3, #4]
 80176c8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80176ca:	697b      	ldr	r3, [r7, #20]
 80176cc:	681a      	ldr	r2, [r3, #0]
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80176d2:	69bb      	ldr	r3, [r7, #24]
 80176d4:	6858      	ldr	r0, [r3, #4]
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	3308      	adds	r3, #8
 80176da:	2214      	movs	r2, #20
 80176dc:	4619      	mov	r1, r3
 80176de:	f002 ff6d 	bl	801a5bc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80176e2:	2101      	movs	r1, #1
 80176e4:	69b8      	ldr	r0, [r7, #24]
 80176e6:	f7ff fbc5 	bl	8016e74 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80176ea:	69b8      	ldr	r0, [r7, #24]
 80176ec:	f7f7 fa2c 	bl	800eb48 <pbuf_clen>
 80176f0:	4603      	mov	r3, r0
 80176f2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80176f4:	8bfa      	ldrh	r2, [r7, #30]
 80176f6:	8a7b      	ldrh	r3, [r7, #18]
 80176f8:	4413      	add	r3, r2
 80176fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80176fe:	db05      	blt.n	801770c <ip_reass_free_complete_datagram+0x98>
 8017700:	4b27      	ldr	r3, [pc, #156]	; (80177a0 <ip_reass_free_complete_datagram+0x12c>)
 8017702:	22bc      	movs	r2, #188	; 0xbc
 8017704:	492a      	ldr	r1, [pc, #168]	; (80177b0 <ip_reass_free_complete_datagram+0x13c>)
 8017706:	4828      	ldr	r0, [pc, #160]	; (80177a8 <ip_reass_free_complete_datagram+0x134>)
 8017708:	f003 fb20 	bl	801ad4c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801770c:	8bfa      	ldrh	r2, [r7, #30]
 801770e:	8a7b      	ldrh	r3, [r7, #18]
 8017710:	4413      	add	r3, r2
 8017712:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017714:	69b8      	ldr	r0, [r7, #24]
 8017716:	f7f7 f989 	bl	800ea2c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	685b      	ldr	r3, [r3, #4]
 801771e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017720:	e01f      	b.n	8017762 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017722:	69bb      	ldr	r3, [r7, #24]
 8017724:	685b      	ldr	r3, [r3, #4]
 8017726:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017728:	69bb      	ldr	r3, [r7, #24]
 801772a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801772c:	697b      	ldr	r3, [r7, #20]
 801772e:	681b      	ldr	r3, [r3, #0]
 8017730:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017732:	68f8      	ldr	r0, [r7, #12]
 8017734:	f7f7 fa08 	bl	800eb48 <pbuf_clen>
 8017738:	4603      	mov	r3, r0
 801773a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801773c:	8bfa      	ldrh	r2, [r7, #30]
 801773e:	8a7b      	ldrh	r3, [r7, #18]
 8017740:	4413      	add	r3, r2
 8017742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017746:	db05      	blt.n	8017754 <ip_reass_free_complete_datagram+0xe0>
 8017748:	4b15      	ldr	r3, [pc, #84]	; (80177a0 <ip_reass_free_complete_datagram+0x12c>)
 801774a:	22cc      	movs	r2, #204	; 0xcc
 801774c:	4918      	ldr	r1, [pc, #96]	; (80177b0 <ip_reass_free_complete_datagram+0x13c>)
 801774e:	4816      	ldr	r0, [pc, #88]	; (80177a8 <ip_reass_free_complete_datagram+0x134>)
 8017750:	f003 fafc 	bl	801ad4c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017754:	8bfa      	ldrh	r2, [r7, #30]
 8017756:	8a7b      	ldrh	r3, [r7, #18]
 8017758:	4413      	add	r3, r2
 801775a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801775c:	68f8      	ldr	r0, [r7, #12]
 801775e:	f7f7 f965 	bl	800ea2c <pbuf_free>
  while (p != NULL) {
 8017762:	69bb      	ldr	r3, [r7, #24]
 8017764:	2b00      	cmp	r3, #0
 8017766:	d1dc      	bne.n	8017722 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017768:	6839      	ldr	r1, [r7, #0]
 801776a:	6878      	ldr	r0, [r7, #4]
 801776c:	f000 f8c2 	bl	80178f4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017770:	4b10      	ldr	r3, [pc, #64]	; (80177b4 <ip_reass_free_complete_datagram+0x140>)
 8017772:	881b      	ldrh	r3, [r3, #0]
 8017774:	8bfa      	ldrh	r2, [r7, #30]
 8017776:	429a      	cmp	r2, r3
 8017778:	d905      	bls.n	8017786 <ip_reass_free_complete_datagram+0x112>
 801777a:	4b09      	ldr	r3, [pc, #36]	; (80177a0 <ip_reass_free_complete_datagram+0x12c>)
 801777c:	22d2      	movs	r2, #210	; 0xd2
 801777e:	490e      	ldr	r1, [pc, #56]	; (80177b8 <ip_reass_free_complete_datagram+0x144>)
 8017780:	4809      	ldr	r0, [pc, #36]	; (80177a8 <ip_reass_free_complete_datagram+0x134>)
 8017782:	f003 fae3 	bl	801ad4c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017786:	4b0b      	ldr	r3, [pc, #44]	; (80177b4 <ip_reass_free_complete_datagram+0x140>)
 8017788:	881a      	ldrh	r2, [r3, #0]
 801778a:	8bfb      	ldrh	r3, [r7, #30]
 801778c:	1ad3      	subs	r3, r2, r3
 801778e:	b29a      	uxth	r2, r3
 8017790:	4b08      	ldr	r3, [pc, #32]	; (80177b4 <ip_reass_free_complete_datagram+0x140>)
 8017792:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017794:	8bfb      	ldrh	r3, [r7, #30]
}
 8017796:	4618      	mov	r0, r3
 8017798:	3720      	adds	r7, #32
 801779a:	46bd      	mov	sp, r7
 801779c:	bd80      	pop	{r7, pc}
 801779e:	bf00      	nop
 80177a0:	0801efc4 	.word	0x0801efc4
 80177a4:	0801f000 	.word	0x0801f000
 80177a8:	0801f00c 	.word	0x0801f00c
 80177ac:	0801f034 	.word	0x0801f034
 80177b0:	0801f048 	.word	0x0801f048
 80177b4:	2000b354 	.word	0x2000b354
 80177b8:	0801f068 	.word	0x0801f068

080177bc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80177bc:	b580      	push	{r7, lr}
 80177be:	b08a      	sub	sp, #40	; 0x28
 80177c0:	af00      	add	r7, sp, #0
 80177c2:	6078      	str	r0, [r7, #4]
 80177c4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80177c6:	2300      	movs	r3, #0
 80177c8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80177ca:	2300      	movs	r3, #0
 80177cc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80177ce:	2300      	movs	r3, #0
 80177d0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80177d2:	2300      	movs	r3, #0
 80177d4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80177d6:	2300      	movs	r3, #0
 80177d8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80177da:	4b28      	ldr	r3, [pc, #160]	; (801787c <ip_reass_remove_oldest_datagram+0xc0>)
 80177dc:	681b      	ldr	r3, [r3, #0]
 80177de:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80177e0:	e030      	b.n	8017844 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80177e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177e4:	695a      	ldr	r2, [r3, #20]
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	68db      	ldr	r3, [r3, #12]
 80177ea:	429a      	cmp	r2, r3
 80177ec:	d10c      	bne.n	8017808 <ip_reass_remove_oldest_datagram+0x4c>
 80177ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177f0:	699a      	ldr	r2, [r3, #24]
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	691b      	ldr	r3, [r3, #16]
 80177f6:	429a      	cmp	r2, r3
 80177f8:	d106      	bne.n	8017808 <ip_reass_remove_oldest_datagram+0x4c>
 80177fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177fc:	899a      	ldrh	r2, [r3, #12]
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	889b      	ldrh	r3, [r3, #4]
 8017802:	b29b      	uxth	r3, r3
 8017804:	429a      	cmp	r2, r3
 8017806:	d014      	beq.n	8017832 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017808:	693b      	ldr	r3, [r7, #16]
 801780a:	3301      	adds	r3, #1
 801780c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801780e:	6a3b      	ldr	r3, [r7, #32]
 8017810:	2b00      	cmp	r3, #0
 8017812:	d104      	bne.n	801781e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017816:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017818:	69fb      	ldr	r3, [r7, #28]
 801781a:	61bb      	str	r3, [r7, #24]
 801781c:	e009      	b.n	8017832 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017820:	7fda      	ldrb	r2, [r3, #31]
 8017822:	6a3b      	ldr	r3, [r7, #32]
 8017824:	7fdb      	ldrb	r3, [r3, #31]
 8017826:	429a      	cmp	r2, r3
 8017828:	d803      	bhi.n	8017832 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801782a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801782c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801782e:	69fb      	ldr	r3, [r7, #28]
 8017830:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	2b00      	cmp	r3, #0
 8017838:	d001      	beq.n	801783e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801783c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801783e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017840:	681b      	ldr	r3, [r3, #0]
 8017842:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017846:	2b00      	cmp	r3, #0
 8017848:	d1cb      	bne.n	80177e2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801784a:	6a3b      	ldr	r3, [r7, #32]
 801784c:	2b00      	cmp	r3, #0
 801784e:	d008      	beq.n	8017862 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017850:	69b9      	ldr	r1, [r7, #24]
 8017852:	6a38      	ldr	r0, [r7, #32]
 8017854:	f7ff ff0e 	bl	8017674 <ip_reass_free_complete_datagram>
 8017858:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801785a:	697a      	ldr	r2, [r7, #20]
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	4413      	add	r3, r2
 8017860:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017862:	697a      	ldr	r2, [r7, #20]
 8017864:	683b      	ldr	r3, [r7, #0]
 8017866:	429a      	cmp	r2, r3
 8017868:	da02      	bge.n	8017870 <ip_reass_remove_oldest_datagram+0xb4>
 801786a:	693b      	ldr	r3, [r7, #16]
 801786c:	2b01      	cmp	r3, #1
 801786e:	dcac      	bgt.n	80177ca <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017870:	697b      	ldr	r3, [r7, #20]
}
 8017872:	4618      	mov	r0, r3
 8017874:	3728      	adds	r7, #40	; 0x28
 8017876:	46bd      	mov	sp, r7
 8017878:	bd80      	pop	{r7, pc}
 801787a:	bf00      	nop
 801787c:	2000b350 	.word	0x2000b350

08017880 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017880:	b580      	push	{r7, lr}
 8017882:	b084      	sub	sp, #16
 8017884:	af00      	add	r7, sp, #0
 8017886:	6078      	str	r0, [r7, #4]
 8017888:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801788a:	2004      	movs	r0, #4
 801788c:	f7f6 f96e 	bl	800db6c <memp_malloc>
 8017890:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	2b00      	cmp	r3, #0
 8017896:	d110      	bne.n	80178ba <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017898:	6839      	ldr	r1, [r7, #0]
 801789a:	6878      	ldr	r0, [r7, #4]
 801789c:	f7ff ff8e 	bl	80177bc <ip_reass_remove_oldest_datagram>
 80178a0:	4602      	mov	r2, r0
 80178a2:	683b      	ldr	r3, [r7, #0]
 80178a4:	4293      	cmp	r3, r2
 80178a6:	dc03      	bgt.n	80178b0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80178a8:	2004      	movs	r0, #4
 80178aa:	f7f6 f95f 	bl	800db6c <memp_malloc>
 80178ae:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d101      	bne.n	80178ba <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80178b6:	2300      	movs	r3, #0
 80178b8:	e016      	b.n	80178e8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80178ba:	2220      	movs	r2, #32
 80178bc:	2100      	movs	r1, #0
 80178be:	68f8      	ldr	r0, [r7, #12]
 80178c0:	f002 fea4 	bl	801a60c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	220f      	movs	r2, #15
 80178c8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80178ca:	4b09      	ldr	r3, [pc, #36]	; (80178f0 <ip_reass_enqueue_new_datagram+0x70>)
 80178cc:	681a      	ldr	r2, [r3, #0]
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80178d2:	4a07      	ldr	r2, [pc, #28]	; (80178f0 <ip_reass_enqueue_new_datagram+0x70>)
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	3308      	adds	r3, #8
 80178dc:	2214      	movs	r2, #20
 80178de:	6879      	ldr	r1, [r7, #4]
 80178e0:	4618      	mov	r0, r3
 80178e2:	f002 fe6b 	bl	801a5bc <memcpy>
  return ipr;
 80178e6:	68fb      	ldr	r3, [r7, #12]
}
 80178e8:	4618      	mov	r0, r3
 80178ea:	3710      	adds	r7, #16
 80178ec:	46bd      	mov	sp, r7
 80178ee:	bd80      	pop	{r7, pc}
 80178f0:	2000b350 	.word	0x2000b350

080178f4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80178f4:	b580      	push	{r7, lr}
 80178f6:	b082      	sub	sp, #8
 80178f8:	af00      	add	r7, sp, #0
 80178fa:	6078      	str	r0, [r7, #4]
 80178fc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80178fe:	4b10      	ldr	r3, [pc, #64]	; (8017940 <ip_reass_dequeue_datagram+0x4c>)
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	687a      	ldr	r2, [r7, #4]
 8017904:	429a      	cmp	r2, r3
 8017906:	d104      	bne.n	8017912 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	4a0c      	ldr	r2, [pc, #48]	; (8017940 <ip_reass_dequeue_datagram+0x4c>)
 801790e:	6013      	str	r3, [r2, #0]
 8017910:	e00d      	b.n	801792e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017912:	683b      	ldr	r3, [r7, #0]
 8017914:	2b00      	cmp	r3, #0
 8017916:	d106      	bne.n	8017926 <ip_reass_dequeue_datagram+0x32>
 8017918:	4b0a      	ldr	r3, [pc, #40]	; (8017944 <ip_reass_dequeue_datagram+0x50>)
 801791a:	f240 1245 	movw	r2, #325	; 0x145
 801791e:	490a      	ldr	r1, [pc, #40]	; (8017948 <ip_reass_dequeue_datagram+0x54>)
 8017920:	480a      	ldr	r0, [pc, #40]	; (801794c <ip_reass_dequeue_datagram+0x58>)
 8017922:	f003 fa13 	bl	801ad4c <iprintf>
    prev->next = ipr->next;
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	681a      	ldr	r2, [r3, #0]
 801792a:	683b      	ldr	r3, [r7, #0]
 801792c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801792e:	6879      	ldr	r1, [r7, #4]
 8017930:	2004      	movs	r0, #4
 8017932:	f7f6 f96d 	bl	800dc10 <memp_free>
}
 8017936:	bf00      	nop
 8017938:	3708      	adds	r7, #8
 801793a:	46bd      	mov	sp, r7
 801793c:	bd80      	pop	{r7, pc}
 801793e:	bf00      	nop
 8017940:	2000b350 	.word	0x2000b350
 8017944:	0801efc4 	.word	0x0801efc4
 8017948:	0801f08c 	.word	0x0801f08c
 801794c:	0801f00c 	.word	0x0801f00c

08017950 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017950:	b580      	push	{r7, lr}
 8017952:	b08c      	sub	sp, #48	; 0x30
 8017954:	af00      	add	r7, sp, #0
 8017956:	60f8      	str	r0, [r7, #12]
 8017958:	60b9      	str	r1, [r7, #8]
 801795a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801795c:	2300      	movs	r3, #0
 801795e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017960:	2301      	movs	r3, #1
 8017962:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017964:	68bb      	ldr	r3, [r7, #8]
 8017966:	685b      	ldr	r3, [r3, #4]
 8017968:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801796a:	69fb      	ldr	r3, [r7, #28]
 801796c:	885b      	ldrh	r3, [r3, #2]
 801796e:	b29b      	uxth	r3, r3
 8017970:	4618      	mov	r0, r3
 8017972:	f7f5 fc45 	bl	800d200 <lwip_htons>
 8017976:	4603      	mov	r3, r0
 8017978:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801797a:	69fb      	ldr	r3, [r7, #28]
 801797c:	781b      	ldrb	r3, [r3, #0]
 801797e:	f003 030f 	and.w	r3, r3, #15
 8017982:	b2db      	uxtb	r3, r3
 8017984:	009b      	lsls	r3, r3, #2
 8017986:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017988:	7e7b      	ldrb	r3, [r7, #25]
 801798a:	b29b      	uxth	r3, r3
 801798c:	8b7a      	ldrh	r2, [r7, #26]
 801798e:	429a      	cmp	r2, r3
 8017990:	d202      	bcs.n	8017998 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017992:	f04f 33ff 	mov.w	r3, #4294967295
 8017996:	e135      	b.n	8017c04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017998:	7e7b      	ldrb	r3, [r7, #25]
 801799a:	b29b      	uxth	r3, r3
 801799c:	8b7a      	ldrh	r2, [r7, #26]
 801799e:	1ad3      	subs	r3, r2, r3
 80179a0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80179a2:	69fb      	ldr	r3, [r7, #28]
 80179a4:	88db      	ldrh	r3, [r3, #6]
 80179a6:	b29b      	uxth	r3, r3
 80179a8:	4618      	mov	r0, r3
 80179aa:	f7f5 fc29 	bl	800d200 <lwip_htons>
 80179ae:	4603      	mov	r3, r0
 80179b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80179b4:	b29b      	uxth	r3, r3
 80179b6:	00db      	lsls	r3, r3, #3
 80179b8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80179ba:	68bb      	ldr	r3, [r7, #8]
 80179bc:	685b      	ldr	r3, [r3, #4]
 80179be:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80179c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179c2:	2200      	movs	r2, #0
 80179c4:	701a      	strb	r2, [r3, #0]
 80179c6:	2200      	movs	r2, #0
 80179c8:	705a      	strb	r2, [r3, #1]
 80179ca:	2200      	movs	r2, #0
 80179cc:	709a      	strb	r2, [r3, #2]
 80179ce:	2200      	movs	r2, #0
 80179d0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80179d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179d4:	8afa      	ldrh	r2, [r7, #22]
 80179d6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80179d8:	8afa      	ldrh	r2, [r7, #22]
 80179da:	8b7b      	ldrh	r3, [r7, #26]
 80179dc:	4413      	add	r3, r2
 80179de:	b29a      	uxth	r2, r3
 80179e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179e2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80179e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179e6:	88db      	ldrh	r3, [r3, #6]
 80179e8:	b29b      	uxth	r3, r3
 80179ea:	8afa      	ldrh	r2, [r7, #22]
 80179ec:	429a      	cmp	r2, r3
 80179ee:	d902      	bls.n	80179f6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80179f0:	f04f 33ff 	mov.w	r3, #4294967295
 80179f4:	e106      	b.n	8017c04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80179f6:	68fb      	ldr	r3, [r7, #12]
 80179f8:	685b      	ldr	r3, [r3, #4]
 80179fa:	627b      	str	r3, [r7, #36]	; 0x24
 80179fc:	e068      	b.n	8017ad0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80179fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a00:	685b      	ldr	r3, [r3, #4]
 8017a02:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a06:	889b      	ldrh	r3, [r3, #4]
 8017a08:	b29a      	uxth	r2, r3
 8017a0a:	693b      	ldr	r3, [r7, #16]
 8017a0c:	889b      	ldrh	r3, [r3, #4]
 8017a0e:	b29b      	uxth	r3, r3
 8017a10:	429a      	cmp	r2, r3
 8017a12:	d235      	bcs.n	8017a80 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017a18:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d020      	beq.n	8017a62 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a22:	889b      	ldrh	r3, [r3, #4]
 8017a24:	b29a      	uxth	r2, r3
 8017a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a28:	88db      	ldrh	r3, [r3, #6]
 8017a2a:	b29b      	uxth	r3, r3
 8017a2c:	429a      	cmp	r2, r3
 8017a2e:	d307      	bcc.n	8017a40 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a32:	88db      	ldrh	r3, [r3, #6]
 8017a34:	b29a      	uxth	r2, r3
 8017a36:	693b      	ldr	r3, [r7, #16]
 8017a38:	889b      	ldrh	r3, [r3, #4]
 8017a3a:	b29b      	uxth	r3, r3
 8017a3c:	429a      	cmp	r2, r3
 8017a3e:	d902      	bls.n	8017a46 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017a40:	f04f 33ff 	mov.w	r3, #4294967295
 8017a44:	e0de      	b.n	8017c04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a48:	68ba      	ldr	r2, [r7, #8]
 8017a4a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a4e:	88db      	ldrh	r3, [r3, #6]
 8017a50:	b29a      	uxth	r2, r3
 8017a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a54:	889b      	ldrh	r3, [r3, #4]
 8017a56:	b29b      	uxth	r3, r3
 8017a58:	429a      	cmp	r2, r3
 8017a5a:	d03d      	beq.n	8017ad8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017a5c:	2300      	movs	r3, #0
 8017a5e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017a60:	e03a      	b.n	8017ad8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a64:	88db      	ldrh	r3, [r3, #6]
 8017a66:	b29a      	uxth	r2, r3
 8017a68:	693b      	ldr	r3, [r7, #16]
 8017a6a:	889b      	ldrh	r3, [r3, #4]
 8017a6c:	b29b      	uxth	r3, r3
 8017a6e:	429a      	cmp	r2, r3
 8017a70:	d902      	bls.n	8017a78 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017a72:	f04f 33ff 	mov.w	r3, #4294967295
 8017a76:	e0c5      	b.n	8017c04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017a78:	68fb      	ldr	r3, [r7, #12]
 8017a7a:	68ba      	ldr	r2, [r7, #8]
 8017a7c:	605a      	str	r2, [r3, #4]
      break;
 8017a7e:	e02b      	b.n	8017ad8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a82:	889b      	ldrh	r3, [r3, #4]
 8017a84:	b29a      	uxth	r2, r3
 8017a86:	693b      	ldr	r3, [r7, #16]
 8017a88:	889b      	ldrh	r3, [r3, #4]
 8017a8a:	b29b      	uxth	r3, r3
 8017a8c:	429a      	cmp	r2, r3
 8017a8e:	d102      	bne.n	8017a96 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017a90:	f04f 33ff 	mov.w	r3, #4294967295
 8017a94:	e0b6      	b.n	8017c04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a98:	889b      	ldrh	r3, [r3, #4]
 8017a9a:	b29a      	uxth	r2, r3
 8017a9c:	693b      	ldr	r3, [r7, #16]
 8017a9e:	88db      	ldrh	r3, [r3, #6]
 8017aa0:	b29b      	uxth	r3, r3
 8017aa2:	429a      	cmp	r2, r3
 8017aa4:	d202      	bcs.n	8017aac <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8017aaa:	e0ab      	b.n	8017c04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d009      	beq.n	8017ac6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ab4:	88db      	ldrh	r3, [r3, #6]
 8017ab6:	b29a      	uxth	r2, r3
 8017ab8:	693b      	ldr	r3, [r7, #16]
 8017aba:	889b      	ldrh	r3, [r3, #4]
 8017abc:	b29b      	uxth	r3, r3
 8017abe:	429a      	cmp	r2, r3
 8017ac0:	d001      	beq.n	8017ac6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017ac2:	2300      	movs	r3, #0
 8017ac4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017ac6:	693b      	ldr	r3, [r7, #16]
 8017ac8:	681b      	ldr	r3, [r3, #0]
 8017aca:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017acc:	693b      	ldr	r3, [r7, #16]
 8017ace:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d193      	bne.n	80179fe <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017ad6:	e000      	b.n	8017ada <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017ad8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d12d      	bne.n	8017b3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d01c      	beq.n	8017b20 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ae8:	88db      	ldrh	r3, [r3, #6]
 8017aea:	b29a      	uxth	r2, r3
 8017aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017aee:	889b      	ldrh	r3, [r3, #4]
 8017af0:	b29b      	uxth	r3, r3
 8017af2:	429a      	cmp	r2, r3
 8017af4:	d906      	bls.n	8017b04 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017af6:	4b45      	ldr	r3, [pc, #276]	; (8017c0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017af8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017afc:	4944      	ldr	r1, [pc, #272]	; (8017c10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017afe:	4845      	ldr	r0, [pc, #276]	; (8017c14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017b00:	f003 f924 	bl	801ad4c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b06:	68ba      	ldr	r2, [r7, #8]
 8017b08:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b0c:	88db      	ldrh	r3, [r3, #6]
 8017b0e:	b29a      	uxth	r2, r3
 8017b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b12:	889b      	ldrh	r3, [r3, #4]
 8017b14:	b29b      	uxth	r3, r3
 8017b16:	429a      	cmp	r2, r3
 8017b18:	d010      	beq.n	8017b3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017b1a:	2300      	movs	r3, #0
 8017b1c:	623b      	str	r3, [r7, #32]
 8017b1e:	e00d      	b.n	8017b3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017b20:	68fb      	ldr	r3, [r7, #12]
 8017b22:	685b      	ldr	r3, [r3, #4]
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d006      	beq.n	8017b36 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017b28:	4b38      	ldr	r3, [pc, #224]	; (8017c0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017b2a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017b2e:	493a      	ldr	r1, [pc, #232]	; (8017c18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017b30:	4838      	ldr	r0, [pc, #224]	; (8017c14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017b32:	f003 f90b 	bl	801ad4c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	68ba      	ldr	r2, [r7, #8]
 8017b3a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d105      	bne.n	8017b4e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017b42:	68fb      	ldr	r3, [r7, #12]
 8017b44:	7f9b      	ldrb	r3, [r3, #30]
 8017b46:	f003 0301 	and.w	r3, r3, #1
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d059      	beq.n	8017c02 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017b4e:	6a3b      	ldr	r3, [r7, #32]
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d04f      	beq.n	8017bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	685b      	ldr	r3, [r3, #4]
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d006      	beq.n	8017b6a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	685b      	ldr	r3, [r3, #4]
 8017b60:	685b      	ldr	r3, [r3, #4]
 8017b62:	889b      	ldrh	r3, [r3, #4]
 8017b64:	b29b      	uxth	r3, r3
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d002      	beq.n	8017b70 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017b6a:	2300      	movs	r3, #0
 8017b6c:	623b      	str	r3, [r7, #32]
 8017b6e:	e041      	b.n	8017bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b72:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b76:	681b      	ldr	r3, [r3, #0]
 8017b78:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017b7a:	e012      	b.n	8017ba2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b7e:	685b      	ldr	r3, [r3, #4]
 8017b80:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b84:	88db      	ldrh	r3, [r3, #6]
 8017b86:	b29a      	uxth	r2, r3
 8017b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b8a:	889b      	ldrh	r3, [r3, #4]
 8017b8c:	b29b      	uxth	r3, r3
 8017b8e:	429a      	cmp	r2, r3
 8017b90:	d002      	beq.n	8017b98 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017b92:	2300      	movs	r3, #0
 8017b94:	623b      	str	r3, [r7, #32]
            break;
 8017b96:	e007      	b.n	8017ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b9a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d1e9      	bne.n	8017b7c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017ba8:	6a3b      	ldr	r3, [r7, #32]
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d022      	beq.n	8017bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	685b      	ldr	r3, [r3, #4]
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d106      	bne.n	8017bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017bb6:	4b15      	ldr	r3, [pc, #84]	; (8017c0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017bb8:	f240 12df 	movw	r2, #479	; 0x1df
 8017bbc:	4917      	ldr	r1, [pc, #92]	; (8017c1c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017bbe:	4815      	ldr	r0, [pc, #84]	; (8017c14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017bc0:	f003 f8c4 	bl	801ad4c <iprintf>
          LWIP_ASSERT("sanity check",
 8017bc4:	68fb      	ldr	r3, [r7, #12]
 8017bc6:	685b      	ldr	r3, [r3, #4]
 8017bc8:	685b      	ldr	r3, [r3, #4]
 8017bca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017bcc:	429a      	cmp	r2, r3
 8017bce:	d106      	bne.n	8017bde <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017bd0:	4b0e      	ldr	r3, [pc, #56]	; (8017c0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017bd2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017bd6:	4911      	ldr	r1, [pc, #68]	; (8017c1c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017bd8:	480e      	ldr	r0, [pc, #56]	; (8017c14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017bda:	f003 f8b7 	bl	801ad4c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	d006      	beq.n	8017bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017be6:	4b09      	ldr	r3, [pc, #36]	; (8017c0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017be8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8017bec:	490c      	ldr	r1, [pc, #48]	; (8017c20 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017bee:	4809      	ldr	r0, [pc, #36]	; (8017c14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017bf0:	f003 f8ac 	bl	801ad4c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017bf4:	6a3b      	ldr	r3, [r7, #32]
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	bf14      	ite	ne
 8017bfa:	2301      	movne	r3, #1
 8017bfc:	2300      	moveq	r3, #0
 8017bfe:	b2db      	uxtb	r3, r3
 8017c00:	e000      	b.n	8017c04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017c02:	2300      	movs	r3, #0
}
 8017c04:	4618      	mov	r0, r3
 8017c06:	3730      	adds	r7, #48	; 0x30
 8017c08:	46bd      	mov	sp, r7
 8017c0a:	bd80      	pop	{r7, pc}
 8017c0c:	0801efc4 	.word	0x0801efc4
 8017c10:	0801f0a8 	.word	0x0801f0a8
 8017c14:	0801f00c 	.word	0x0801f00c
 8017c18:	0801f0c8 	.word	0x0801f0c8
 8017c1c:	0801f100 	.word	0x0801f100
 8017c20:	0801f110 	.word	0x0801f110

08017c24 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017c24:	b580      	push	{r7, lr}
 8017c26:	b08e      	sub	sp, #56	; 0x38
 8017c28:	af00      	add	r7, sp, #0
 8017c2a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	685b      	ldr	r3, [r3, #4]
 8017c30:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c34:	781b      	ldrb	r3, [r3, #0]
 8017c36:	f003 030f 	and.w	r3, r3, #15
 8017c3a:	b2db      	uxtb	r3, r3
 8017c3c:	009b      	lsls	r3, r3, #2
 8017c3e:	b2db      	uxtb	r3, r3
 8017c40:	2b14      	cmp	r3, #20
 8017c42:	f040 8167 	bne.w	8017f14 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c48:	88db      	ldrh	r3, [r3, #6]
 8017c4a:	b29b      	uxth	r3, r3
 8017c4c:	4618      	mov	r0, r3
 8017c4e:	f7f5 fad7 	bl	800d200 <lwip_htons>
 8017c52:	4603      	mov	r3, r0
 8017c54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017c58:	b29b      	uxth	r3, r3
 8017c5a:	00db      	lsls	r3, r3, #3
 8017c5c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c60:	885b      	ldrh	r3, [r3, #2]
 8017c62:	b29b      	uxth	r3, r3
 8017c64:	4618      	mov	r0, r3
 8017c66:	f7f5 facb 	bl	800d200 <lwip_htons>
 8017c6a:	4603      	mov	r3, r0
 8017c6c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c70:	781b      	ldrb	r3, [r3, #0]
 8017c72:	f003 030f 	and.w	r3, r3, #15
 8017c76:	b2db      	uxtb	r3, r3
 8017c78:	009b      	lsls	r3, r3, #2
 8017c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017c7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017c82:	b29b      	uxth	r3, r3
 8017c84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017c86:	429a      	cmp	r2, r3
 8017c88:	f0c0 8146 	bcc.w	8017f18 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017c8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017c90:	b29b      	uxth	r3, r3
 8017c92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017c94:	1ad3      	subs	r3, r2, r3
 8017c96:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017c98:	6878      	ldr	r0, [r7, #4]
 8017c9a:	f7f6 ff55 	bl	800eb48 <pbuf_clen>
 8017c9e:	4603      	mov	r3, r0
 8017ca0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017ca2:	4b9f      	ldr	r3, [pc, #636]	; (8017f20 <ip4_reass+0x2fc>)
 8017ca4:	881b      	ldrh	r3, [r3, #0]
 8017ca6:	461a      	mov	r2, r3
 8017ca8:	8c3b      	ldrh	r3, [r7, #32]
 8017caa:	4413      	add	r3, r2
 8017cac:	2b0a      	cmp	r3, #10
 8017cae:	dd10      	ble.n	8017cd2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017cb0:	8c3b      	ldrh	r3, [r7, #32]
 8017cb2:	4619      	mov	r1, r3
 8017cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017cb6:	f7ff fd81 	bl	80177bc <ip_reass_remove_oldest_datagram>
 8017cba:	4603      	mov	r3, r0
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	f000 812d 	beq.w	8017f1c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017cc2:	4b97      	ldr	r3, [pc, #604]	; (8017f20 <ip4_reass+0x2fc>)
 8017cc4:	881b      	ldrh	r3, [r3, #0]
 8017cc6:	461a      	mov	r2, r3
 8017cc8:	8c3b      	ldrh	r3, [r7, #32]
 8017cca:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017ccc:	2b0a      	cmp	r3, #10
 8017cce:	f300 8125 	bgt.w	8017f1c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017cd2:	4b94      	ldr	r3, [pc, #592]	; (8017f24 <ip4_reass+0x300>)
 8017cd4:	681b      	ldr	r3, [r3, #0]
 8017cd6:	633b      	str	r3, [r7, #48]	; 0x30
 8017cd8:	e015      	b.n	8017d06 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cdc:	695a      	ldr	r2, [r3, #20]
 8017cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ce0:	68db      	ldr	r3, [r3, #12]
 8017ce2:	429a      	cmp	r2, r3
 8017ce4:	d10c      	bne.n	8017d00 <ip4_reass+0xdc>
 8017ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ce8:	699a      	ldr	r2, [r3, #24]
 8017cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cec:	691b      	ldr	r3, [r3, #16]
 8017cee:	429a      	cmp	r2, r3
 8017cf0:	d106      	bne.n	8017d00 <ip4_reass+0xdc>
 8017cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cf4:	899a      	ldrh	r2, [r3, #12]
 8017cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cf8:	889b      	ldrh	r3, [r3, #4]
 8017cfa:	b29b      	uxth	r3, r3
 8017cfc:	429a      	cmp	r2, r3
 8017cfe:	d006      	beq.n	8017d0e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d02:	681b      	ldr	r3, [r3, #0]
 8017d04:	633b      	str	r3, [r7, #48]	; 0x30
 8017d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d1e6      	bne.n	8017cda <ip4_reass+0xb6>
 8017d0c:	e000      	b.n	8017d10 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017d0e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d109      	bne.n	8017d2a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017d16:	8c3b      	ldrh	r3, [r7, #32]
 8017d18:	4619      	mov	r1, r3
 8017d1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017d1c:	f7ff fdb0 	bl	8017880 <ip_reass_enqueue_new_datagram>
 8017d20:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d11c      	bne.n	8017d62 <ip4_reass+0x13e>
      goto nullreturn;
 8017d28:	e109      	b.n	8017f3e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d2c:	88db      	ldrh	r3, [r3, #6]
 8017d2e:	b29b      	uxth	r3, r3
 8017d30:	4618      	mov	r0, r3
 8017d32:	f7f5 fa65 	bl	800d200 <lwip_htons>
 8017d36:	4603      	mov	r3, r0
 8017d38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d110      	bne.n	8017d62 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d42:	89db      	ldrh	r3, [r3, #14]
 8017d44:	4618      	mov	r0, r3
 8017d46:	f7f5 fa5b 	bl	800d200 <lwip_htons>
 8017d4a:	4603      	mov	r3, r0
 8017d4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d006      	beq.n	8017d62 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d56:	3308      	adds	r3, #8
 8017d58:	2214      	movs	r2, #20
 8017d5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017d5c:	4618      	mov	r0, r3
 8017d5e:	f002 fc2d 	bl	801a5bc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d64:	88db      	ldrh	r3, [r3, #6]
 8017d66:	b29b      	uxth	r3, r3
 8017d68:	f003 0320 	and.w	r3, r3, #32
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	bf0c      	ite	eq
 8017d70:	2301      	moveq	r3, #1
 8017d72:	2300      	movne	r3, #0
 8017d74:	b2db      	uxtb	r3, r3
 8017d76:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017d78:	69fb      	ldr	r3, [r7, #28]
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d00e      	beq.n	8017d9c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017d7e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017d80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017d82:	4413      	add	r3, r2
 8017d84:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017d86:	8b7a      	ldrh	r2, [r7, #26]
 8017d88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017d8a:	429a      	cmp	r2, r3
 8017d8c:	f0c0 80a0 	bcc.w	8017ed0 <ip4_reass+0x2ac>
 8017d90:	8b7b      	ldrh	r3, [r7, #26]
 8017d92:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8017d96:	4293      	cmp	r3, r2
 8017d98:	f200 809a 	bhi.w	8017ed0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017d9c:	69fa      	ldr	r2, [r7, #28]
 8017d9e:	6879      	ldr	r1, [r7, #4]
 8017da0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017da2:	f7ff fdd5 	bl	8017950 <ip_reass_chain_frag_into_datagram_and_validate>
 8017da6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017da8:	697b      	ldr	r3, [r7, #20]
 8017daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017dae:	f000 8091 	beq.w	8017ed4 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017db2:	4b5b      	ldr	r3, [pc, #364]	; (8017f20 <ip4_reass+0x2fc>)
 8017db4:	881a      	ldrh	r2, [r3, #0]
 8017db6:	8c3b      	ldrh	r3, [r7, #32]
 8017db8:	4413      	add	r3, r2
 8017dba:	b29a      	uxth	r2, r3
 8017dbc:	4b58      	ldr	r3, [pc, #352]	; (8017f20 <ip4_reass+0x2fc>)
 8017dbe:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017dc0:	69fb      	ldr	r3, [r7, #28]
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d00d      	beq.n	8017de2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017dc6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017dc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017dca:	4413      	add	r3, r2
 8017dcc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dd0:	8a7a      	ldrh	r2, [r7, #18]
 8017dd2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dd6:	7f9b      	ldrb	r3, [r3, #30]
 8017dd8:	f043 0301 	orr.w	r3, r3, #1
 8017ddc:	b2da      	uxtb	r2, r3
 8017dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017de0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017de2:	697b      	ldr	r3, [r7, #20]
 8017de4:	2b01      	cmp	r3, #1
 8017de6:	d171      	bne.n	8017ecc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dea:	8b9b      	ldrh	r3, [r3, #28]
 8017dec:	3314      	adds	r3, #20
 8017dee:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017df2:	685b      	ldr	r3, [r3, #4]
 8017df4:	685b      	ldr	r3, [r3, #4]
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dfc:	685b      	ldr	r3, [r3, #4]
 8017dfe:	685b      	ldr	r3, [r3, #4]
 8017e00:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e04:	3308      	adds	r3, #8
 8017e06:	2214      	movs	r2, #20
 8017e08:	4619      	mov	r1, r3
 8017e0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e0c:	f002 fbd6 	bl	801a5bc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017e10:	8a3b      	ldrh	r3, [r7, #16]
 8017e12:	4618      	mov	r0, r3
 8017e14:	f7f5 f9f4 	bl	800d200 <lwip_htons>
 8017e18:	4603      	mov	r3, r0
 8017e1a:	461a      	mov	r2, r3
 8017e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e1e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e22:	2200      	movs	r2, #0
 8017e24:	719a      	strb	r2, [r3, #6]
 8017e26:	2200      	movs	r2, #0
 8017e28:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e2c:	2200      	movs	r2, #0
 8017e2e:	729a      	strb	r2, [r3, #10]
 8017e30:	2200      	movs	r2, #0
 8017e32:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e36:	685b      	ldr	r3, [r3, #4]
 8017e38:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017e3a:	e00d      	b.n	8017e58 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e3e:	685b      	ldr	r3, [r3, #4]
 8017e40:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017e42:	2114      	movs	r1, #20
 8017e44:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017e46:	f7f6 fd39 	bl	800e8bc <pbuf_remove_header>
      pbuf_cat(p, r);
 8017e4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017e4c:	6878      	ldr	r0, [r7, #4]
 8017e4e:	f7f6 febb 	bl	800ebc8 <pbuf_cat>
      r = iprh->next_pbuf;
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	681b      	ldr	r3, [r3, #0]
 8017e56:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d1ee      	bne.n	8017e3c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017e5e:	4b31      	ldr	r3, [pc, #196]	; (8017f24 <ip4_reass+0x300>)
 8017e60:	681b      	ldr	r3, [r3, #0]
 8017e62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017e64:	429a      	cmp	r2, r3
 8017e66:	d102      	bne.n	8017e6e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017e68:	2300      	movs	r3, #0
 8017e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017e6c:	e010      	b.n	8017e90 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017e6e:	4b2d      	ldr	r3, [pc, #180]	; (8017f24 <ip4_reass+0x300>)
 8017e70:	681b      	ldr	r3, [r3, #0]
 8017e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017e74:	e007      	b.n	8017e86 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8017e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e78:	681b      	ldr	r3, [r3, #0]
 8017e7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017e7c:	429a      	cmp	r2, r3
 8017e7e:	d006      	beq.n	8017e8e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d1f4      	bne.n	8017e76 <ip4_reass+0x252>
 8017e8c:	e000      	b.n	8017e90 <ip4_reass+0x26c>
          break;
 8017e8e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017e90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017e92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017e94:	f7ff fd2e 	bl	80178f4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017e98:	6878      	ldr	r0, [r7, #4]
 8017e9a:	f7f6 fe55 	bl	800eb48 <pbuf_clen>
 8017e9e:	4603      	mov	r3, r0
 8017ea0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017ea2:	4b1f      	ldr	r3, [pc, #124]	; (8017f20 <ip4_reass+0x2fc>)
 8017ea4:	881b      	ldrh	r3, [r3, #0]
 8017ea6:	8c3a      	ldrh	r2, [r7, #32]
 8017ea8:	429a      	cmp	r2, r3
 8017eaa:	d906      	bls.n	8017eba <ip4_reass+0x296>
 8017eac:	4b1e      	ldr	r3, [pc, #120]	; (8017f28 <ip4_reass+0x304>)
 8017eae:	f240 229b 	movw	r2, #667	; 0x29b
 8017eb2:	491e      	ldr	r1, [pc, #120]	; (8017f2c <ip4_reass+0x308>)
 8017eb4:	481e      	ldr	r0, [pc, #120]	; (8017f30 <ip4_reass+0x30c>)
 8017eb6:	f002 ff49 	bl	801ad4c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017eba:	4b19      	ldr	r3, [pc, #100]	; (8017f20 <ip4_reass+0x2fc>)
 8017ebc:	881a      	ldrh	r2, [r3, #0]
 8017ebe:	8c3b      	ldrh	r3, [r7, #32]
 8017ec0:	1ad3      	subs	r3, r2, r3
 8017ec2:	b29a      	uxth	r2, r3
 8017ec4:	4b16      	ldr	r3, [pc, #88]	; (8017f20 <ip4_reass+0x2fc>)
 8017ec6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	e03c      	b.n	8017f46 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017ecc:	2300      	movs	r3, #0
 8017ece:	e03a      	b.n	8017f46 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8017ed0:	bf00      	nop
 8017ed2:	e000      	b.n	8017ed6 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8017ed4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8017ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d106      	bne.n	8017eea <ip4_reass+0x2c6>
 8017edc:	4b12      	ldr	r3, [pc, #72]	; (8017f28 <ip4_reass+0x304>)
 8017ede:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8017ee2:	4914      	ldr	r1, [pc, #80]	; (8017f34 <ip4_reass+0x310>)
 8017ee4:	4812      	ldr	r0, [pc, #72]	; (8017f30 <ip4_reass+0x30c>)
 8017ee6:	f002 ff31 	bl	801ad4c <iprintf>
  if (ipr->p == NULL) {
 8017eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eec:	685b      	ldr	r3, [r3, #4]
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	d124      	bne.n	8017f3c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8017ef2:	4b0c      	ldr	r3, [pc, #48]	; (8017f24 <ip4_reass+0x300>)
 8017ef4:	681b      	ldr	r3, [r3, #0]
 8017ef6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ef8:	429a      	cmp	r2, r3
 8017efa:	d006      	beq.n	8017f0a <ip4_reass+0x2e6>
 8017efc:	4b0a      	ldr	r3, [pc, #40]	; (8017f28 <ip4_reass+0x304>)
 8017efe:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017f02:	490d      	ldr	r1, [pc, #52]	; (8017f38 <ip4_reass+0x314>)
 8017f04:	480a      	ldr	r0, [pc, #40]	; (8017f30 <ip4_reass+0x30c>)
 8017f06:	f002 ff21 	bl	801ad4c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017f0a:	2100      	movs	r1, #0
 8017f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017f0e:	f7ff fcf1 	bl	80178f4 <ip_reass_dequeue_datagram>
 8017f12:	e014      	b.n	8017f3e <ip4_reass+0x31a>
    goto nullreturn;
 8017f14:	bf00      	nop
 8017f16:	e012      	b.n	8017f3e <ip4_reass+0x31a>
    goto nullreturn;
 8017f18:	bf00      	nop
 8017f1a:	e010      	b.n	8017f3e <ip4_reass+0x31a>
      goto nullreturn;
 8017f1c:	bf00      	nop
 8017f1e:	e00e      	b.n	8017f3e <ip4_reass+0x31a>
 8017f20:	2000b354 	.word	0x2000b354
 8017f24:	2000b350 	.word	0x2000b350
 8017f28:	0801efc4 	.word	0x0801efc4
 8017f2c:	0801f134 	.word	0x0801f134
 8017f30:	0801f00c 	.word	0x0801f00c
 8017f34:	0801f150 	.word	0x0801f150
 8017f38:	0801f15c 	.word	0x0801f15c
  }

nullreturn:
 8017f3c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017f3e:	6878      	ldr	r0, [r7, #4]
 8017f40:	f7f6 fd74 	bl	800ea2c <pbuf_free>
  return NULL;
 8017f44:	2300      	movs	r3, #0
}
 8017f46:	4618      	mov	r0, r3
 8017f48:	3738      	adds	r7, #56	; 0x38
 8017f4a:	46bd      	mov	sp, r7
 8017f4c:	bd80      	pop	{r7, pc}
 8017f4e:	bf00      	nop

08017f50 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017f50:	b580      	push	{r7, lr}
 8017f52:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017f54:	2005      	movs	r0, #5
 8017f56:	f7f5 fe09 	bl	800db6c <memp_malloc>
 8017f5a:	4603      	mov	r3, r0
}
 8017f5c:	4618      	mov	r0, r3
 8017f5e:	bd80      	pop	{r7, pc}

08017f60 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017f60:	b580      	push	{r7, lr}
 8017f62:	b082      	sub	sp, #8
 8017f64:	af00      	add	r7, sp, #0
 8017f66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d106      	bne.n	8017f7c <ip_frag_free_pbuf_custom_ref+0x1c>
 8017f6e:	4b07      	ldr	r3, [pc, #28]	; (8017f8c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017f70:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8017f74:	4906      	ldr	r1, [pc, #24]	; (8017f90 <ip_frag_free_pbuf_custom_ref+0x30>)
 8017f76:	4807      	ldr	r0, [pc, #28]	; (8017f94 <ip_frag_free_pbuf_custom_ref+0x34>)
 8017f78:	f002 fee8 	bl	801ad4c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017f7c:	6879      	ldr	r1, [r7, #4]
 8017f7e:	2005      	movs	r0, #5
 8017f80:	f7f5 fe46 	bl	800dc10 <memp_free>
}
 8017f84:	bf00      	nop
 8017f86:	3708      	adds	r7, #8
 8017f88:	46bd      	mov	sp, r7
 8017f8a:	bd80      	pop	{r7, pc}
 8017f8c:	0801efc4 	.word	0x0801efc4
 8017f90:	0801f17c 	.word	0x0801f17c
 8017f94:	0801f00c 	.word	0x0801f00c

08017f98 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017f98:	b580      	push	{r7, lr}
 8017f9a:	b084      	sub	sp, #16
 8017f9c:	af00      	add	r7, sp, #0
 8017f9e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017fa4:	68fb      	ldr	r3, [r7, #12]
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d106      	bne.n	8017fb8 <ipfrag_free_pbuf_custom+0x20>
 8017faa:	4b11      	ldr	r3, [pc, #68]	; (8017ff0 <ipfrag_free_pbuf_custom+0x58>)
 8017fac:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017fb0:	4910      	ldr	r1, [pc, #64]	; (8017ff4 <ipfrag_free_pbuf_custom+0x5c>)
 8017fb2:	4811      	ldr	r0, [pc, #68]	; (8017ff8 <ipfrag_free_pbuf_custom+0x60>)
 8017fb4:	f002 feca 	bl	801ad4c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017fb8:	68fa      	ldr	r2, [r7, #12]
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	429a      	cmp	r2, r3
 8017fbe:	d006      	beq.n	8017fce <ipfrag_free_pbuf_custom+0x36>
 8017fc0:	4b0b      	ldr	r3, [pc, #44]	; (8017ff0 <ipfrag_free_pbuf_custom+0x58>)
 8017fc2:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017fc6:	490d      	ldr	r1, [pc, #52]	; (8017ffc <ipfrag_free_pbuf_custom+0x64>)
 8017fc8:	480b      	ldr	r0, [pc, #44]	; (8017ff8 <ipfrag_free_pbuf_custom+0x60>)
 8017fca:	f002 febf 	bl	801ad4c <iprintf>
  if (pcr->original != NULL) {
 8017fce:	68fb      	ldr	r3, [r7, #12]
 8017fd0:	695b      	ldr	r3, [r3, #20]
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d004      	beq.n	8017fe0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017fd6:	68fb      	ldr	r3, [r7, #12]
 8017fd8:	695b      	ldr	r3, [r3, #20]
 8017fda:	4618      	mov	r0, r3
 8017fdc:	f7f6 fd26 	bl	800ea2c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017fe0:	68f8      	ldr	r0, [r7, #12]
 8017fe2:	f7ff ffbd 	bl	8017f60 <ip_frag_free_pbuf_custom_ref>
}
 8017fe6:	bf00      	nop
 8017fe8:	3710      	adds	r7, #16
 8017fea:	46bd      	mov	sp, r7
 8017fec:	bd80      	pop	{r7, pc}
 8017fee:	bf00      	nop
 8017ff0:	0801efc4 	.word	0x0801efc4
 8017ff4:	0801f188 	.word	0x0801f188
 8017ff8:	0801f00c 	.word	0x0801f00c
 8017ffc:	0801f194 	.word	0x0801f194

08018000 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018000:	b580      	push	{r7, lr}
 8018002:	b094      	sub	sp, #80	; 0x50
 8018004:	af02      	add	r7, sp, #8
 8018006:	60f8      	str	r0, [r7, #12]
 8018008:	60b9      	str	r1, [r7, #8]
 801800a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801800c:	2300      	movs	r3, #0
 801800e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018012:	68bb      	ldr	r3, [r7, #8]
 8018014:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018016:	3b14      	subs	r3, #20
 8018018:	2b00      	cmp	r3, #0
 801801a:	da00      	bge.n	801801e <ip4_frag+0x1e>
 801801c:	3307      	adds	r3, #7
 801801e:	10db      	asrs	r3, r3, #3
 8018020:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018022:	2314      	movs	r3, #20
 8018024:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018026:	68fb      	ldr	r3, [r7, #12]
 8018028:	685b      	ldr	r3, [r3, #4]
 801802a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801802c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801802e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018032:	781b      	ldrb	r3, [r3, #0]
 8018034:	f003 030f 	and.w	r3, r3, #15
 8018038:	b2db      	uxtb	r3, r3
 801803a:	009b      	lsls	r3, r3, #2
 801803c:	b2db      	uxtb	r3, r3
 801803e:	2b14      	cmp	r3, #20
 8018040:	d002      	beq.n	8018048 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018042:	f06f 0305 	mvn.w	r3, #5
 8018046:	e110      	b.n	801826a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018048:	68fb      	ldr	r3, [r7, #12]
 801804a:	895b      	ldrh	r3, [r3, #10]
 801804c:	2b13      	cmp	r3, #19
 801804e:	d809      	bhi.n	8018064 <ip4_frag+0x64>
 8018050:	4b88      	ldr	r3, [pc, #544]	; (8018274 <ip4_frag+0x274>)
 8018052:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8018056:	4988      	ldr	r1, [pc, #544]	; (8018278 <ip4_frag+0x278>)
 8018058:	4888      	ldr	r0, [pc, #544]	; (801827c <ip4_frag+0x27c>)
 801805a:	f002 fe77 	bl	801ad4c <iprintf>
 801805e:	f06f 0305 	mvn.w	r3, #5
 8018062:	e102      	b.n	801826a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018066:	88db      	ldrh	r3, [r3, #6]
 8018068:	b29b      	uxth	r3, r3
 801806a:	4618      	mov	r0, r3
 801806c:	f7f5 f8c8 	bl	800d200 <lwip_htons>
 8018070:	4603      	mov	r3, r0
 8018072:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018074:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018076:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801807a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801807e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018080:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018084:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018086:	68fb      	ldr	r3, [r7, #12]
 8018088:	891b      	ldrh	r3, [r3, #8]
 801808a:	3b14      	subs	r3, #20
 801808c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018090:	e0e1      	b.n	8018256 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018092:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018094:	00db      	lsls	r3, r3, #3
 8018096:	b29b      	uxth	r3, r3
 8018098:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801809c:	4293      	cmp	r3, r2
 801809e:	bf28      	it	cs
 80180a0:	4613      	movcs	r3, r2
 80180a2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80180a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80180a8:	2114      	movs	r1, #20
 80180aa:	200e      	movs	r0, #14
 80180ac:	f7f6 f9a8 	bl	800e400 <pbuf_alloc>
 80180b0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80180b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	f000 80d5 	beq.w	8018264 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80180ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180bc:	895b      	ldrh	r3, [r3, #10]
 80180be:	2b13      	cmp	r3, #19
 80180c0:	d806      	bhi.n	80180d0 <ip4_frag+0xd0>
 80180c2:	4b6c      	ldr	r3, [pc, #432]	; (8018274 <ip4_frag+0x274>)
 80180c4:	f44f 7249 	mov.w	r2, #804	; 0x324
 80180c8:	496d      	ldr	r1, [pc, #436]	; (8018280 <ip4_frag+0x280>)
 80180ca:	486c      	ldr	r0, [pc, #432]	; (801827c <ip4_frag+0x27c>)
 80180cc:	f002 fe3e 	bl	801ad4c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80180d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180d2:	685b      	ldr	r3, [r3, #4]
 80180d4:	2214      	movs	r2, #20
 80180d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80180d8:	4618      	mov	r0, r3
 80180da:	f002 fa6f 	bl	801a5bc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80180de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180e0:	685b      	ldr	r3, [r3, #4]
 80180e2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80180e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80180e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80180ea:	e064      	b.n	80181b6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80180ec:	68fb      	ldr	r3, [r7, #12]
 80180ee:	895a      	ldrh	r2, [r3, #10]
 80180f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80180f2:	1ad3      	subs	r3, r2, r3
 80180f4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80180f6:	68fb      	ldr	r3, [r7, #12]
 80180f8:	895b      	ldrh	r3, [r3, #10]
 80180fa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80180fc:	429a      	cmp	r2, r3
 80180fe:	d906      	bls.n	801810e <ip4_frag+0x10e>
 8018100:	4b5c      	ldr	r3, [pc, #368]	; (8018274 <ip4_frag+0x274>)
 8018102:	f240 322d 	movw	r2, #813	; 0x32d
 8018106:	495f      	ldr	r1, [pc, #380]	; (8018284 <ip4_frag+0x284>)
 8018108:	485c      	ldr	r0, [pc, #368]	; (801827c <ip4_frag+0x27c>)
 801810a:	f002 fe1f 	bl	801ad4c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801810e:	8bfa      	ldrh	r2, [r7, #30]
 8018110:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018114:	4293      	cmp	r3, r2
 8018116:	bf28      	it	cs
 8018118:	4613      	movcs	r3, r2
 801811a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801811e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018122:	2b00      	cmp	r3, #0
 8018124:	d105      	bne.n	8018132 <ip4_frag+0x132>
        poff = 0;
 8018126:	2300      	movs	r3, #0
 8018128:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801812a:	68fb      	ldr	r3, [r7, #12]
 801812c:	681b      	ldr	r3, [r3, #0]
 801812e:	60fb      	str	r3, [r7, #12]
        continue;
 8018130:	e041      	b.n	80181b6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018132:	f7ff ff0d 	bl	8017f50 <ip_frag_alloc_pbuf_custom_ref>
 8018136:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018138:	69bb      	ldr	r3, [r7, #24]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d103      	bne.n	8018146 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801813e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018140:	f7f6 fc74 	bl	800ea2c <pbuf_free>
        goto memerr;
 8018144:	e08f      	b.n	8018266 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018146:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018148:	68fb      	ldr	r3, [r7, #12]
 801814a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801814c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801814e:	4413      	add	r3, r2
 8018150:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018154:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018158:	9201      	str	r2, [sp, #4]
 801815a:	9300      	str	r3, [sp, #0]
 801815c:	4603      	mov	r3, r0
 801815e:	2241      	movs	r2, #65	; 0x41
 8018160:	2000      	movs	r0, #0
 8018162:	f7f6 fa77 	bl	800e654 <pbuf_alloced_custom>
 8018166:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018168:	697b      	ldr	r3, [r7, #20]
 801816a:	2b00      	cmp	r3, #0
 801816c:	d106      	bne.n	801817c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801816e:	69b8      	ldr	r0, [r7, #24]
 8018170:	f7ff fef6 	bl	8017f60 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018174:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018176:	f7f6 fc59 	bl	800ea2c <pbuf_free>
        goto memerr;
 801817a:	e074      	b.n	8018266 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801817c:	68f8      	ldr	r0, [r7, #12]
 801817e:	f7f6 fcfb 	bl	800eb78 <pbuf_ref>
      pcr->original = p;
 8018182:	69bb      	ldr	r3, [r7, #24]
 8018184:	68fa      	ldr	r2, [r7, #12]
 8018186:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018188:	69bb      	ldr	r3, [r7, #24]
 801818a:	4a3f      	ldr	r2, [pc, #252]	; (8018288 <ip4_frag+0x288>)
 801818c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801818e:	6979      	ldr	r1, [r7, #20]
 8018190:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018192:	f7f6 fd19 	bl	800ebc8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018196:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801819a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801819e:	1ad3      	subs	r3, r2, r3
 80181a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80181a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d004      	beq.n	80181b6 <ip4_frag+0x1b6>
        poff = 0;
 80181ac:	2300      	movs	r3, #0
 80181ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80181b0:	68fb      	ldr	r3, [r7, #12]
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80181b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d196      	bne.n	80180ec <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80181be:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80181c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80181c4:	4413      	add	r3, r2
 80181c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80181c8:	68bb      	ldr	r3, [r7, #8]
 80181ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80181cc:	f1a3 0213 	sub.w	r2, r3, #19
 80181d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80181d4:	429a      	cmp	r2, r3
 80181d6:	bfcc      	ite	gt
 80181d8:	2301      	movgt	r3, #1
 80181da:	2300      	movle	r3, #0
 80181dc:	b2db      	uxtb	r3, r3
 80181de:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80181e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80181e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80181e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80181ea:	6a3b      	ldr	r3, [r7, #32]
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d002      	beq.n	80181f6 <ip4_frag+0x1f6>
 80181f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d003      	beq.n	80181fe <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80181f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80181f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80181fc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80181fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018200:	4618      	mov	r0, r3
 8018202:	f7f4 fffd 	bl	800d200 <lwip_htons>
 8018206:	4603      	mov	r3, r0
 8018208:	461a      	mov	r2, r3
 801820a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801820c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801820e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018210:	3314      	adds	r3, #20
 8018212:	b29b      	uxth	r3, r3
 8018214:	4618      	mov	r0, r3
 8018216:	f7f4 fff3 	bl	800d200 <lwip_htons>
 801821a:	4603      	mov	r3, r0
 801821c:	461a      	mov	r2, r3
 801821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018220:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018224:	2200      	movs	r2, #0
 8018226:	729a      	strb	r2, [r3, #10]
 8018228:	2200      	movs	r2, #0
 801822a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801822c:	68bb      	ldr	r3, [r7, #8]
 801822e:	695b      	ldr	r3, [r3, #20]
 8018230:	687a      	ldr	r2, [r7, #4]
 8018232:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018234:	68b8      	ldr	r0, [r7, #8]
 8018236:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018238:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801823a:	f7f6 fbf7 	bl	800ea2c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801823e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018242:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018244:	1ad3      	subs	r3, r2, r3
 8018246:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801824a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801824e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018250:	4413      	add	r3, r2
 8018252:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8018256:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801825a:	2b00      	cmp	r3, #0
 801825c:	f47f af19 	bne.w	8018092 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018260:	2300      	movs	r3, #0
 8018262:	e002      	b.n	801826a <ip4_frag+0x26a>
      goto memerr;
 8018264:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018266:	f04f 33ff 	mov.w	r3, #4294967295
}
 801826a:	4618      	mov	r0, r3
 801826c:	3748      	adds	r7, #72	; 0x48
 801826e:	46bd      	mov	sp, r7
 8018270:	bd80      	pop	{r7, pc}
 8018272:	bf00      	nop
 8018274:	0801efc4 	.word	0x0801efc4
 8018278:	0801f1a0 	.word	0x0801f1a0
 801827c:	0801f00c 	.word	0x0801f00c
 8018280:	0801f1bc 	.word	0x0801f1bc
 8018284:	0801f1dc 	.word	0x0801f1dc
 8018288:	08017f99 	.word	0x08017f99

0801828c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801828c:	b580      	push	{r7, lr}
 801828e:	b086      	sub	sp, #24
 8018290:	af00      	add	r7, sp, #0
 8018292:	6078      	str	r0, [r7, #4]
 8018294:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018296:	230e      	movs	r3, #14
 8018298:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	895b      	ldrh	r3, [r3, #10]
 801829e:	2b0e      	cmp	r3, #14
 80182a0:	d96e      	bls.n	8018380 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	7bdb      	ldrb	r3, [r3, #15]
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d106      	bne.n	80182b8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80182aa:	683b      	ldr	r3, [r7, #0]
 80182ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80182b0:	3301      	adds	r3, #1
 80182b2:	b2da      	uxtb	r2, r3
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	685b      	ldr	r3, [r3, #4]
 80182bc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80182be:	693b      	ldr	r3, [r7, #16]
 80182c0:	7b1a      	ldrb	r2, [r3, #12]
 80182c2:	7b5b      	ldrb	r3, [r3, #13]
 80182c4:	021b      	lsls	r3, r3, #8
 80182c6:	4313      	orrs	r3, r2
 80182c8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80182ca:	693b      	ldr	r3, [r7, #16]
 80182cc:	781b      	ldrb	r3, [r3, #0]
 80182ce:	f003 0301 	and.w	r3, r3, #1
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	d023      	beq.n	801831e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80182d6:	693b      	ldr	r3, [r7, #16]
 80182d8:	781b      	ldrb	r3, [r3, #0]
 80182da:	2b01      	cmp	r3, #1
 80182dc:	d10f      	bne.n	80182fe <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80182de:	693b      	ldr	r3, [r7, #16]
 80182e0:	785b      	ldrb	r3, [r3, #1]
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	d11b      	bne.n	801831e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80182e6:	693b      	ldr	r3, [r7, #16]
 80182e8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80182ea:	2b5e      	cmp	r3, #94	; 0x5e
 80182ec:	d117      	bne.n	801831e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	7b5b      	ldrb	r3, [r3, #13]
 80182f2:	f043 0310 	orr.w	r3, r3, #16
 80182f6:	b2da      	uxtb	r2, r3
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	735a      	strb	r2, [r3, #13]
 80182fc:	e00f      	b.n	801831e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80182fe:	693b      	ldr	r3, [r7, #16]
 8018300:	2206      	movs	r2, #6
 8018302:	4928      	ldr	r1, [pc, #160]	; (80183a4 <ethernet_input+0x118>)
 8018304:	4618      	mov	r0, r3
 8018306:	f002 f94b 	bl	801a5a0 <memcmp>
 801830a:	4603      	mov	r3, r0
 801830c:	2b00      	cmp	r3, #0
 801830e:	d106      	bne.n	801831e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	7b5b      	ldrb	r3, [r3, #13]
 8018314:	f043 0308 	orr.w	r3, r3, #8
 8018318:	b2da      	uxtb	r2, r3
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801831e:	89fb      	ldrh	r3, [r7, #14]
 8018320:	2b08      	cmp	r3, #8
 8018322:	d003      	beq.n	801832c <ethernet_input+0xa0>
 8018324:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018328:	d014      	beq.n	8018354 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801832a:	e032      	b.n	8018392 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801832c:	683b      	ldr	r3, [r7, #0]
 801832e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018332:	f003 0308 	and.w	r3, r3, #8
 8018336:	2b00      	cmp	r3, #0
 8018338:	d024      	beq.n	8018384 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801833a:	8afb      	ldrh	r3, [r7, #22]
 801833c:	4619      	mov	r1, r3
 801833e:	6878      	ldr	r0, [r7, #4]
 8018340:	f7f6 fabc 	bl	800e8bc <pbuf_remove_header>
 8018344:	4603      	mov	r3, r0
 8018346:	2b00      	cmp	r3, #0
 8018348:	d11e      	bne.n	8018388 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801834a:	6839      	ldr	r1, [r7, #0]
 801834c:	6878      	ldr	r0, [r7, #4]
 801834e:	f7fe fea5 	bl	801709c <ip4_input>
      break;
 8018352:	e013      	b.n	801837c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018354:	683b      	ldr	r3, [r7, #0]
 8018356:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801835a:	f003 0308 	and.w	r3, r3, #8
 801835e:	2b00      	cmp	r3, #0
 8018360:	d014      	beq.n	801838c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018362:	8afb      	ldrh	r3, [r7, #22]
 8018364:	4619      	mov	r1, r3
 8018366:	6878      	ldr	r0, [r7, #4]
 8018368:	f7f6 faa8 	bl	800e8bc <pbuf_remove_header>
 801836c:	4603      	mov	r3, r0
 801836e:	2b00      	cmp	r3, #0
 8018370:	d10e      	bne.n	8018390 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018372:	6839      	ldr	r1, [r7, #0]
 8018374:	6878      	ldr	r0, [r7, #4]
 8018376:	f7fe f845 	bl	8016404 <etharp_input>
      break;
 801837a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801837c:	2300      	movs	r3, #0
 801837e:	e00c      	b.n	801839a <ethernet_input+0x10e>
    goto free_and_return;
 8018380:	bf00      	nop
 8018382:	e006      	b.n	8018392 <ethernet_input+0x106>
        goto free_and_return;
 8018384:	bf00      	nop
 8018386:	e004      	b.n	8018392 <ethernet_input+0x106>
        goto free_and_return;
 8018388:	bf00      	nop
 801838a:	e002      	b.n	8018392 <ethernet_input+0x106>
        goto free_and_return;
 801838c:	bf00      	nop
 801838e:	e000      	b.n	8018392 <ethernet_input+0x106>
        goto free_and_return;
 8018390:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018392:	6878      	ldr	r0, [r7, #4]
 8018394:	f7f6 fb4a 	bl	800ea2c <pbuf_free>
  return ERR_OK;
 8018398:	2300      	movs	r3, #0
}
 801839a:	4618      	mov	r0, r3
 801839c:	3718      	adds	r7, #24
 801839e:	46bd      	mov	sp, r7
 80183a0:	bd80      	pop	{r7, pc}
 80183a2:	bf00      	nop
 80183a4:	0801f5e8 	.word	0x0801f5e8

080183a8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80183a8:	b580      	push	{r7, lr}
 80183aa:	b086      	sub	sp, #24
 80183ac:	af00      	add	r7, sp, #0
 80183ae:	60f8      	str	r0, [r7, #12]
 80183b0:	60b9      	str	r1, [r7, #8]
 80183b2:	607a      	str	r2, [r7, #4]
 80183b4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80183b6:	8c3b      	ldrh	r3, [r7, #32]
 80183b8:	4618      	mov	r0, r3
 80183ba:	f7f4 ff21 	bl	800d200 <lwip_htons>
 80183be:	4603      	mov	r3, r0
 80183c0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80183c2:	210e      	movs	r1, #14
 80183c4:	68b8      	ldr	r0, [r7, #8]
 80183c6:	f7f6 fa69 	bl	800e89c <pbuf_add_header>
 80183ca:	4603      	mov	r3, r0
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d125      	bne.n	801841c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80183d0:	68bb      	ldr	r3, [r7, #8]
 80183d2:	685b      	ldr	r3, [r3, #4]
 80183d4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80183d6:	693b      	ldr	r3, [r7, #16]
 80183d8:	8afa      	ldrh	r2, [r7, #22]
 80183da:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80183dc:	693b      	ldr	r3, [r7, #16]
 80183de:	2206      	movs	r2, #6
 80183e0:	6839      	ldr	r1, [r7, #0]
 80183e2:	4618      	mov	r0, r3
 80183e4:	f002 f8ea 	bl	801a5bc <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80183e8:	693b      	ldr	r3, [r7, #16]
 80183ea:	3306      	adds	r3, #6
 80183ec:	2206      	movs	r2, #6
 80183ee:	6879      	ldr	r1, [r7, #4]
 80183f0:	4618      	mov	r0, r3
 80183f2:	f002 f8e3 	bl	801a5bc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80183f6:	68fb      	ldr	r3, [r7, #12]
 80183f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80183fc:	2b06      	cmp	r3, #6
 80183fe:	d006      	beq.n	801840e <ethernet_output+0x66>
 8018400:	4b0a      	ldr	r3, [pc, #40]	; (801842c <ethernet_output+0x84>)
 8018402:	f44f 7299 	mov.w	r2, #306	; 0x132
 8018406:	490a      	ldr	r1, [pc, #40]	; (8018430 <ethernet_output+0x88>)
 8018408:	480a      	ldr	r0, [pc, #40]	; (8018434 <ethernet_output+0x8c>)
 801840a:	f002 fc9f 	bl	801ad4c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801840e:	68fb      	ldr	r3, [r7, #12]
 8018410:	699b      	ldr	r3, [r3, #24]
 8018412:	68b9      	ldr	r1, [r7, #8]
 8018414:	68f8      	ldr	r0, [r7, #12]
 8018416:	4798      	blx	r3
 8018418:	4603      	mov	r3, r0
 801841a:	e002      	b.n	8018422 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801841c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801841e:	f06f 0301 	mvn.w	r3, #1
}
 8018422:	4618      	mov	r0, r3
 8018424:	3718      	adds	r7, #24
 8018426:	46bd      	mov	sp, r7
 8018428:	bd80      	pop	{r7, pc}
 801842a:	bf00      	nop
 801842c:	0801f1ec 	.word	0x0801f1ec
 8018430:	0801f224 	.word	0x0801f224
 8018434:	0801f258 	.word	0x0801f258

08018438 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018438:	b580      	push	{r7, lr}
 801843a:	b082      	sub	sp, #8
 801843c:	af00      	add	r7, sp, #0
 801843e:	6078      	str	r0, [r7, #4]
 8018440:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8018442:	683b      	ldr	r3, [r7, #0]
 8018444:	2200      	movs	r2, #0
 8018446:	2104      	movs	r1, #4
 8018448:	4618      	mov	r0, r3
 801844a:	f7ed fb39 	bl	8005ac0 <osMessageQueueNew>
 801844e:	4602      	mov	r2, r0
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	2b00      	cmp	r3, #0
 801845a:	d102      	bne.n	8018462 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801845c:	f04f 33ff 	mov.w	r3, #4294967295
 8018460:	e000      	b.n	8018464 <sys_mbox_new+0x2c>

  return ERR_OK;
 8018462:	2300      	movs	r3, #0
}
 8018464:	4618      	mov	r0, r3
 8018466:	3708      	adds	r7, #8
 8018468:	46bd      	mov	sp, r7
 801846a:	bd80      	pop	{r7, pc}

0801846c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801846c:	b580      	push	{r7, lr}
 801846e:	b082      	sub	sp, #8
 8018470:	af00      	add	r7, sp, #0
 8018472:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	681b      	ldr	r3, [r3, #0]
 8018478:	4618      	mov	r0, r3
 801847a:	f7ed fc53 	bl	8005d24 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	681b      	ldr	r3, [r3, #0]
 8018482:	4618      	mov	r0, r3
 8018484:	f7ed fc6e 	bl	8005d64 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018488:	bf00      	nop
 801848a:	3708      	adds	r7, #8
 801848c:	46bd      	mov	sp, r7
 801848e:	bd80      	pop	{r7, pc}

08018490 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018490:	b580      	push	{r7, lr}
 8018492:	b084      	sub	sp, #16
 8018494:	af00      	add	r7, sp, #0
 8018496:	6078      	str	r0, [r7, #4]
 8018498:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	6818      	ldr	r0, [r3, #0]
 801849e:	4639      	mov	r1, r7
 80184a0:	2300      	movs	r3, #0
 80184a2:	2200      	movs	r2, #0
 80184a4:	f7ed fb80 	bl	8005ba8 <osMessageQueuePut>
 80184a8:	4603      	mov	r3, r0
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d102      	bne.n	80184b4 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80184ae:	2300      	movs	r3, #0
 80184b0:	73fb      	strb	r3, [r7, #15]
 80184b2:	e001      	b.n	80184b8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80184b4:	23ff      	movs	r3, #255	; 0xff
 80184b6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80184b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80184bc:	4618      	mov	r0, r3
 80184be:	3710      	adds	r7, #16
 80184c0:	46bd      	mov	sp, r7
 80184c2:	bd80      	pop	{r7, pc}

080184c4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80184c4:	b580      	push	{r7, lr}
 80184c6:	b086      	sub	sp, #24
 80184c8:	af00      	add	r7, sp, #0
 80184ca:	60f8      	str	r0, [r7, #12]
 80184cc:	60b9      	str	r1, [r7, #8]
 80184ce:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80184d0:	f7ec ffe2 	bl	8005498 <osKernelGetTickCount>
 80184d4:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	2b00      	cmp	r3, #0
 80184da:	d013      	beq.n	8018504 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80184dc:	68fb      	ldr	r3, [r7, #12]
 80184de:	6818      	ldr	r0, [r3, #0]
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	2200      	movs	r2, #0
 80184e4:	68b9      	ldr	r1, [r7, #8]
 80184e6:	f7ed fbbf 	bl	8005c68 <osMessageQueueGet>
 80184ea:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80184ec:	693b      	ldr	r3, [r7, #16]
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d105      	bne.n	80184fe <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80184f2:	f7ec ffd1 	bl	8005498 <osKernelGetTickCount>
 80184f6:	4602      	mov	r2, r0
 80184f8:	697b      	ldr	r3, [r7, #20]
 80184fa:	1ad3      	subs	r3, r2, r3
 80184fc:	e00f      	b.n	801851e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80184fe:	f04f 33ff 	mov.w	r3, #4294967295
 8018502:	e00c      	b.n	801851e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8018504:	68fb      	ldr	r3, [r7, #12]
 8018506:	6818      	ldr	r0, [r3, #0]
 8018508:	f04f 33ff 	mov.w	r3, #4294967295
 801850c:	2200      	movs	r2, #0
 801850e:	68b9      	ldr	r1, [r7, #8]
 8018510:	f7ed fbaa 	bl	8005c68 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8018514:	f7ec ffc0 	bl	8005498 <osKernelGetTickCount>
 8018518:	4602      	mov	r2, r0
 801851a:	697b      	ldr	r3, [r7, #20]
 801851c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801851e:	4618      	mov	r0, r3
 8018520:	3718      	adds	r7, #24
 8018522:	46bd      	mov	sp, r7
 8018524:	bd80      	pop	{r7, pc}

08018526 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8018526:	b580      	push	{r7, lr}
 8018528:	b082      	sub	sp, #8
 801852a:	af00      	add	r7, sp, #0
 801852c:	6078      	str	r0, [r7, #4]
 801852e:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	6818      	ldr	r0, [r3, #0]
 8018534:	2300      	movs	r3, #0
 8018536:	2200      	movs	r2, #0
 8018538:	6839      	ldr	r1, [r7, #0]
 801853a:	f7ed fb95 	bl	8005c68 <osMessageQueueGet>
 801853e:	4603      	mov	r3, r0
 8018540:	2b00      	cmp	r3, #0
 8018542:	d101      	bne.n	8018548 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8018544:	2300      	movs	r3, #0
 8018546:	e001      	b.n	801854c <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018548:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801854c:	4618      	mov	r0, r3
 801854e:	3708      	adds	r7, #8
 8018550:	46bd      	mov	sp, r7
 8018552:	bd80      	pop	{r7, pc}

08018554 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018554:	b480      	push	{r7}
 8018556:	b083      	sub	sp, #12
 8018558:	af00      	add	r7, sp, #0
 801855a:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	2b00      	cmp	r3, #0
 8018562:	d101      	bne.n	8018568 <sys_mbox_valid+0x14>
    return 0;
 8018564:	2300      	movs	r3, #0
 8018566:	e000      	b.n	801856a <sys_mbox_valid+0x16>
  else
    return 1;
 8018568:	2301      	movs	r3, #1
}
 801856a:	4618      	mov	r0, r3
 801856c:	370c      	adds	r7, #12
 801856e:	46bd      	mov	sp, r7
 8018570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018574:	4770      	bx	lr

08018576 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018576:	b480      	push	{r7}
 8018578:	b083      	sub	sp, #12
 801857a:	af00      	add	r7, sp, #0
 801857c:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	2200      	movs	r2, #0
 8018582:	601a      	str	r2, [r3, #0]
}
 8018584:	bf00      	nop
 8018586:	370c      	adds	r7, #12
 8018588:	46bd      	mov	sp, r7
 801858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801858e:	4770      	bx	lr

08018590 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018590:	b580      	push	{r7, lr}
 8018592:	b082      	sub	sp, #8
 8018594:	af00      	add	r7, sp, #0
 8018596:	6078      	str	r0, [r7, #4]
 8018598:	460b      	mov	r3, r1
 801859a:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801859c:	78fb      	ldrb	r3, [r7, #3]
 801859e:	2200      	movs	r2, #0
 80185a0:	4619      	mov	r1, r3
 80185a2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80185a6:	f7ed f948 	bl	800583a <osSemaphoreNew>
 80185aa:	4602      	mov	r2, r0
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	681b      	ldr	r3, [r3, #0]
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	d102      	bne.n	80185be <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80185b8:	f04f 33ff 	mov.w	r3, #4294967295
 80185bc:	e009      	b.n	80185d2 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 80185be:	78fb      	ldrb	r3, [r7, #3]
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d105      	bne.n	80185d0 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	681b      	ldr	r3, [r3, #0]
 80185c8:	2100      	movs	r1, #0
 80185ca:	4618      	mov	r0, r3
 80185cc:	f7ed f9be 	bl	800594c <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80185d0:	2300      	movs	r3, #0
}
 80185d2:	4618      	mov	r0, r3
 80185d4:	3708      	adds	r7, #8
 80185d6:	46bd      	mov	sp, r7
 80185d8:	bd80      	pop	{r7, pc}

080185da <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80185da:	b580      	push	{r7, lr}
 80185dc:	b084      	sub	sp, #16
 80185de:	af00      	add	r7, sp, #0
 80185e0:	6078      	str	r0, [r7, #4]
 80185e2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 80185e4:	f7ec ff58 	bl	8005498 <osKernelGetTickCount>
 80185e8:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 80185ea:	683b      	ldr	r3, [r7, #0]
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d011      	beq.n	8018614 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	6839      	ldr	r1, [r7, #0]
 80185f6:	4618      	mov	r0, r3
 80185f8:	f7ed f9a8 	bl	800594c <osSemaphoreAcquire>
 80185fc:	4603      	mov	r3, r0
 80185fe:	2b00      	cmp	r3, #0
 8018600:	d105      	bne.n	801860e <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8018602:	f7ec ff49 	bl	8005498 <osKernelGetTickCount>
 8018606:	4602      	mov	r2, r0
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	1ad3      	subs	r3, r2, r3
 801860c:	e012      	b.n	8018634 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801860e:	f04f 33ff 	mov.w	r3, #4294967295
 8018612:	e00f      	b.n	8018634 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8018614:	bf00      	nop
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	681b      	ldr	r3, [r3, #0]
 801861a:	f04f 31ff 	mov.w	r1, #4294967295
 801861e:	4618      	mov	r0, r3
 8018620:	f7ed f994 	bl	800594c <osSemaphoreAcquire>
 8018624:	4603      	mov	r3, r0
 8018626:	2b00      	cmp	r3, #0
 8018628:	d1f5      	bne.n	8018616 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801862a:	f7ec ff35 	bl	8005498 <osKernelGetTickCount>
 801862e:	4602      	mov	r2, r0
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8018634:	4618      	mov	r0, r3
 8018636:	3710      	adds	r7, #16
 8018638:	46bd      	mov	sp, r7
 801863a:	bd80      	pop	{r7, pc}

0801863c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801863c:	b580      	push	{r7, lr}
 801863e:	b082      	sub	sp, #8
 8018640:	af00      	add	r7, sp, #0
 8018642:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	681b      	ldr	r3, [r3, #0]
 8018648:	4618      	mov	r0, r3
 801864a:	f7ed f9d1 	bl	80059f0 <osSemaphoreRelease>
}
 801864e:	bf00      	nop
 8018650:	3708      	adds	r7, #8
 8018652:	46bd      	mov	sp, r7
 8018654:	bd80      	pop	{r7, pc}

08018656 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018656:	b580      	push	{r7, lr}
 8018658:	b082      	sub	sp, #8
 801865a:	af00      	add	r7, sp, #0
 801865c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	681b      	ldr	r3, [r3, #0]
 8018662:	4618      	mov	r0, r3
 8018664:	f7ed fa08 	bl	8005a78 <osSemaphoreDelete>
}
 8018668:	bf00      	nop
 801866a:	3708      	adds	r7, #8
 801866c:	46bd      	mov	sp, r7
 801866e:	bd80      	pop	{r7, pc}

08018670 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018670:	b480      	push	{r7}
 8018672:	b083      	sub	sp, #12
 8018674:	af00      	add	r7, sp, #0
 8018676:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	2b00      	cmp	r3, #0
 801867e:	d101      	bne.n	8018684 <sys_sem_valid+0x14>
    return 0;
 8018680:	2300      	movs	r3, #0
 8018682:	e000      	b.n	8018686 <sys_sem_valid+0x16>
  else
    return 1;
 8018684:	2301      	movs	r3, #1
}
 8018686:	4618      	mov	r0, r3
 8018688:	370c      	adds	r7, #12
 801868a:	46bd      	mov	sp, r7
 801868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018690:	4770      	bx	lr

08018692 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018692:	b480      	push	{r7}
 8018694:	b083      	sub	sp, #12
 8018696:	af00      	add	r7, sp, #0
 8018698:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	2200      	movs	r2, #0
 801869e:	601a      	str	r2, [r3, #0]
}
 80186a0:	bf00      	nop
 80186a2:	370c      	adds	r7, #12
 80186a4:	46bd      	mov	sp, r7
 80186a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186aa:	4770      	bx	lr

080186ac <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80186ac:	b580      	push	{r7, lr}
 80186ae:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80186b0:	2000      	movs	r0, #0
 80186b2:	f7ec ffb4 	bl	800561e <osMutexNew>
 80186b6:	4603      	mov	r3, r0
 80186b8:	4a01      	ldr	r2, [pc, #4]	; (80186c0 <sys_init+0x14>)
 80186ba:	6013      	str	r3, [r2, #0]
#endif
}
 80186bc:	bf00      	nop
 80186be:	bd80      	pop	{r7, pc}
 80186c0:	200120c0 	.word	0x200120c0

080186c4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80186c4:	b580      	push	{r7, lr}
 80186c6:	b082      	sub	sp, #8
 80186c8:	af00      	add	r7, sp, #0
 80186ca:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80186cc:	2000      	movs	r0, #0
 80186ce:	f7ec ffa6 	bl	800561e <osMutexNew>
 80186d2:	4602      	mov	r2, r0
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	2b00      	cmp	r3, #0
 80186de:	d102      	bne.n	80186e6 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80186e0:	f04f 33ff 	mov.w	r3, #4294967295
 80186e4:	e000      	b.n	80186e8 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80186e6:	2300      	movs	r3, #0
}
 80186e8:	4618      	mov	r0, r3
 80186ea:	3708      	adds	r7, #8
 80186ec:	46bd      	mov	sp, r7
 80186ee:	bd80      	pop	{r7, pc}

080186f0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80186f0:	b580      	push	{r7, lr}
 80186f2:	b082      	sub	sp, #8
 80186f4:	af00      	add	r7, sp, #0
 80186f6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	f04f 31ff 	mov.w	r1, #4294967295
 8018700:	4618      	mov	r0, r3
 8018702:	f7ed f812 	bl	800572a <osMutexAcquire>
#endif
}
 8018706:	bf00      	nop
 8018708:	3708      	adds	r7, #8
 801870a:	46bd      	mov	sp, r7
 801870c:	bd80      	pop	{r7, pc}

0801870e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801870e:	b580      	push	{r7, lr}
 8018710:	b082      	sub	sp, #8
 8018712:	af00      	add	r7, sp, #0
 8018714:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	681b      	ldr	r3, [r3, #0]
 801871a:	4618      	mov	r0, r3
 801871c:	f7ed f850 	bl	80057c0 <osMutexRelease>
}
 8018720:	bf00      	nop
 8018722:	3708      	adds	r7, #8
 8018724:	46bd      	mov	sp, r7
 8018726:	bd80      	pop	{r7, pc}

08018728 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018728:	b580      	push	{r7, lr}
 801872a:	b08e      	sub	sp, #56	; 0x38
 801872c:	af00      	add	r7, sp, #0
 801872e:	60f8      	str	r0, [r7, #12]
 8018730:	60b9      	str	r1, [r7, #8]
 8018732:	607a      	str	r2, [r7, #4]
 8018734:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8018736:	f107 0314 	add.w	r3, r7, #20
 801873a:	2224      	movs	r2, #36	; 0x24
 801873c:	2100      	movs	r1, #0
 801873e:	4618      	mov	r0, r3
 8018740:	f001 ff64 	bl	801a60c <memset>
 8018744:	68fb      	ldr	r3, [r7, #12]
 8018746:	617b      	str	r3, [r7, #20]
 8018748:	683b      	ldr	r3, [r7, #0]
 801874a:	62bb      	str	r3, [r7, #40]	; 0x28
 801874c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801874e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8018750:	f107 0314 	add.w	r3, r7, #20
 8018754:	461a      	mov	r2, r3
 8018756:	6879      	ldr	r1, [r7, #4]
 8018758:	68b8      	ldr	r0, [r7, #8]
 801875a:	f7ec feb2 	bl	80054c2 <osThreadNew>
 801875e:	4603      	mov	r3, r0
#endif
}
 8018760:	4618      	mov	r0, r3
 8018762:	3738      	adds	r7, #56	; 0x38
 8018764:	46bd      	mov	sp, r7
 8018766:	bd80      	pop	{r7, pc}

08018768 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018768:	b580      	push	{r7, lr}
 801876a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801876c:	4b04      	ldr	r3, [pc, #16]	; (8018780 <sys_arch_protect+0x18>)
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	f04f 31ff 	mov.w	r1, #4294967295
 8018774:	4618      	mov	r0, r3
 8018776:	f7ec ffd8 	bl	800572a <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801877a:	2301      	movs	r3, #1
}
 801877c:	4618      	mov	r0, r3
 801877e:	bd80      	pop	{r7, pc}
 8018780:	200120c0 	.word	0x200120c0

08018784 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018784:	b580      	push	{r7, lr}
 8018786:	b082      	sub	sp, #8
 8018788:	af00      	add	r7, sp, #0
 801878a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801878c:	4b04      	ldr	r3, [pc, #16]	; (80187a0 <sys_arch_unprotect+0x1c>)
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	4618      	mov	r0, r3
 8018792:	f7ed f815 	bl	80057c0 <osMutexRelease>
}
 8018796:	bf00      	nop
 8018798:	3708      	adds	r7, #8
 801879a:	46bd      	mov	sp, r7
 801879c:	bd80      	pop	{r7, pc}
 801879e:	bf00      	nop
 80187a0:	200120c0 	.word	0x200120c0

080187a4 <afe_app_init>:
AFE ltc2335_1 = {.busy = &adc_busy1,.cnv = &adc_cnv1,.p_driver = &spi1,.pd = &adc_rs1,.softSpan = _111};
AFE ltc2335_2 = {.busy = &adc_busy2,.cnv = &adc_cnv2,.p_driver = &spi2,.pd = &adc_rs2,.softSpan = _111};



void afe_app_init(){
 80187a4:	b580      	push	{r7, lr}
 80187a6:	af00      	add	r7, sp, #0
	afe_init(&ltc2335_1);
 80187a8:	4803      	ldr	r0, [pc, #12]	; (80187b8 <afe_app_init+0x14>)
 80187aa:	f000 fd6c 	bl	8019286 <afe_init>
	afe_init(&ltc2335_2);
 80187ae:	4803      	ldr	r0, [pc, #12]	; (80187bc <afe_app_init+0x18>)
 80187b0:	f000 fd69 	bl	8019286 <afe_init>
}
 80187b4:	bf00      	nop
 80187b6:	bd80      	pop	{r7, pc}
 80187b8:	2000001c 	.word	0x2000001c
 80187bc:	20000060 	.word	0x20000060

080187c0 <app_init>:

static void ev_read_sensor_task(void *arg);
static void ev_tcp_server_data_task(void* arg);
static void do_send_data(const int sock);

void app_init(void) {
 80187c0:	b580      	push	{r7, lr}
 80187c2:	b082      	sub	sp, #8
 80187c4:	af02      	add	r7, sp, #8
	ev_data_queue_handle = xQueueCreate(1024,sizeof(float));
 80187c6:	2200      	movs	r2, #0
 80187c8:	2104      	movs	r1, #4
 80187ca:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80187ce:	f7ed fcb5 	bl	800613c <xQueueGenericCreate>
 80187d2:	4603      	mov	r3, r0
 80187d4:	4a0e      	ldr	r2, [pc, #56]	; (8018810 <app_init+0x50>)
 80187d6:	6013      	str	r3, [r2, #0]
	xTaskCreate(ev_read_sensor_task, "read sensor", 1024, NULL,
 80187d8:	4b0e      	ldr	r3, [pc, #56]	; (8018814 <app_init+0x54>)
 80187da:	9301      	str	r3, [sp, #4]
 80187dc:	230a      	movs	r3, #10
 80187de:	9300      	str	r3, [sp, #0]
 80187e0:	2300      	movs	r3, #0
 80187e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80187e6:	490c      	ldr	r1, [pc, #48]	; (8018818 <app_init+0x58>)
 80187e8:	480c      	ldr	r0, [pc, #48]	; (801881c <app_init+0x5c>)
 80187ea:	f7ee fd24 	bl	8007236 <xTaskCreate>
			10, &ev_read_sensor_handle);
	setting_app();
 80187ee:	f000 fa83 	bl	8018cf8 <setting_app>
	xTaskCreate(ev_tcp_server_data_task, "tcp server_dt", 1024, NULL,
 80187f2:	4b0b      	ldr	r3, [pc, #44]	; (8018820 <app_init+0x60>)
 80187f4:	9301      	str	r3, [sp, #4]
 80187f6:	2309      	movs	r3, #9
 80187f8:	9300      	str	r3, [sp, #0]
 80187fa:	2300      	movs	r3, #0
 80187fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018800:	4908      	ldr	r1, [pc, #32]	; (8018824 <app_init+0x64>)
 8018802:	4809      	ldr	r0, [pc, #36]	; (8018828 <app_init+0x68>)
 8018804:	f7ee fd17 	bl	8007236 <xTaskCreate>
			10 - 1, &ev_tcp_server_data_handle);
}
 8018808:	bf00      	nop
 801880a:	46bd      	mov	sp, r7
 801880c:	bd80      	pop	{r7, pc}
 801880e:	bf00      	nop
 8018810:	200120c4 	.word	0x200120c4
 8018814:	200120cc 	.word	0x200120cc
 8018818:	0801f280 	.word	0x0801f280
 801881c:	080188dd 	.word	0x080188dd
 8018820:	200120c8 	.word	0x200120c8
 8018824:	0801f28c 	.word	0x0801f28c
 8018828:	08018999 	.word	0x08018999

0801882c <do_send_data>:
typedef union{
	uint8_t u8_t[4];
	float fl_t;
}Data_Type_t;

static void do_send_data(const int sock){
 801882c:	b580      	push	{r7, lr}
 801882e:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8018832:	af00      	add	r7, sp, #0
 8018834:	1d3b      	adds	r3, r7, #4
 8018836:	6018      	str	r0, [r3, #0]
	uint8_t buff[MAX_BUFF_LENGTH];
	uint16_t length = 0;
 8018838:	2300      	movs	r3, #0
 801883a:	f8a7 3416 	strh.w	r3, [r7, #1046]	; 0x416
	Data_Type_t data_sensor;
	int byte_write = 0;
 801883e:	2300      	movs	r3, #0
 8018840:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	while(1){
		// Read Data
		if(xQueueReceive(ev_data_queue_handle,&data_sensor.fl_t, (TickType_t) 10) == pdPASS){
 8018844:	4b24      	ldr	r3, [pc, #144]	; (80188d8 <do_send_data+0xac>)
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	f107 0108 	add.w	r1, r7, #8
 801884c:	220a      	movs	r2, #10
 801884e:	4618      	mov	r0, r3
 8018850:	f7ee f818 	bl	8006884 <xQueueReceive>
 8018854:	4603      	mov	r3, r0
 8018856:	2b01      	cmp	r3, #1
 8018858:	d11e      	bne.n	8018898 <do_send_data+0x6c>
			for(uint8_t i = 0;i<4;i++){
 801885a:	2300      	movs	r3, #0
 801885c:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
 8018860:	e011      	b.n	8018886 <do_send_data+0x5a>
				buff[length+i] = data_sensor.u8_t[i];
 8018862:	f897 240f 	ldrb.w	r2, [r7, #1039]	; 0x40f
 8018866:	f8b7 1416 	ldrh.w	r1, [r7, #1046]	; 0x416
 801886a:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 801886e:	440b      	add	r3, r1
 8018870:	f107 0108 	add.w	r1, r7, #8
 8018874:	5c89      	ldrb	r1, [r1, r2]
 8018876:	f107 020c 	add.w	r2, r7, #12
 801887a:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0;i<4;i++){
 801887c:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 8018880:	3301      	adds	r3, #1
 8018882:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
 8018886:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 801888a:	2b03      	cmp	r3, #3
 801888c:	d9e9      	bls.n	8018862 <do_send_data+0x36>
			}
			length += 4;
 801888e:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	; 0x416
 8018892:	3304      	adds	r3, #4
 8018894:	f8a7 3416 	strh.w	r3, [r7, #1046]	; 0x416
		}
		// Send Data
		if(length == 1024){
 8018898:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	; 0x416
 801889c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80188a0:	d10d      	bne.n	80188be <do_send_data+0x92>
			byte_write = send(sock,(uint8_t*)buff,length,0);
 80188a2:	f8b7 2416 	ldrh.w	r2, [r7, #1046]	; 0x416
 80188a6:	f107 010c 	add.w	r1, r7, #12
 80188aa:	1d38      	adds	r0, r7, #4
 80188ac:	2300      	movs	r3, #0
 80188ae:	6800      	ldr	r0, [r0, #0]
 80188b0:	f7f3 fde4 	bl	800c47c <lwip_send>
 80188b4:	f8c7 0410 	str.w	r0, [r7, #1040]	; 0x410
			// Reset buff
			length = 0;
 80188b8:	2300      	movs	r3, #0
 80188ba:	f8a7 3416 	strh.w	r3, [r7, #1046]	; 0x416
		}
		// Check connect
		if(byte_write == -1){
 80188be:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80188c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80188c6:	d000      	beq.n	80188ca <do_send_data+0x9e>
		if(xQueueReceive(ev_data_queue_handle,&data_sensor.fl_t, (TickType_t) 10) == pdPASS){
 80188c8:	e7bc      	b.n	8018844 <do_send_data+0x18>
			break;
 80188ca:	bf00      	nop
		}
	}
}
 80188cc:	bf00      	nop
 80188ce:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 80188d2:	46bd      	mov	sp, r7
 80188d4:	bd80      	pop	{r7, pc}
 80188d6:	bf00      	nop
 80188d8:	200120c4 	.word	0x200120c4

080188dc <ev_read_sensor_task>:

#define NUM_MAX_SEND_QUEUE_FALSE 10
uint32_t tick_us = 0;
static void ev_read_sensor_task(void *arg) {
 80188dc:	b580      	push	{r7, lr}
 80188de:	b086      	sub	sp, #24
 80188e0:	af00      	add	r7, sp, #0
 80188e2:	6078      	str	r0, [r7, #4]

	  afe_app_init();
 80188e4:	f7ff ff5e 	bl	80187a4 <afe_app_init>
	  HAL_TIM_Base_Start(&htim2);
 80188e8:	4826      	ldr	r0, [pc, #152]	; (8018984 <ev_read_sensor_task+0xa8>)
 80188ea:	f7eb fb3f 	bl	8003f6c <HAL_TIM_Base_Start>
	  while(1){
		tick_us = __HAL_TIM_GET_COUNTER(&htim2);
 80188ee:	4b25      	ldr	r3, [pc, #148]	; (8018984 <ev_read_sensor_task+0xa8>)
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188f4:	4a24      	ldr	r2, [pc, #144]	; (8018988 <ev_read_sensor_task+0xac>)
 80188f6:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim2,0);
 80188f8:	4b22      	ldr	r3, [pc, #136]	; (8018984 <ev_read_sensor_task+0xa8>)
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	2200      	movs	r2, #0
 80188fe:	625a      	str	r2, [r3, #36]	; 0x24
		for (uint16_t i = 0; i < 300; i++) {
 8018900:	2300      	movs	r3, #0
 8018902:	82fb      	strh	r3, [r7, #22]
 8018904:	e035      	b.n	8018972 <ev_read_sensor_task+0x96>
			static uint8_t channel = 0;
			uint8_t data[4] = { 0 };
 8018906:	2300      	movs	r3, #0
 8018908:	613b      	str	r3, [r7, #16]
			uint8_t config = 0;
 801890a:	2300      	movs	r3, #0
 801890c:	73fb      	strb	r3, [r7, #15]
			afe_create_config_word(channel, _110, &config);
 801890e:	4b1f      	ldr	r3, [pc, #124]	; (801898c <ev_read_sensor_task+0xb0>)
 8018910:	781b      	ldrb	r3, [r3, #0]
 8018912:	f107 020f 	add.w	r2, r7, #15
 8018916:	2106      	movs	r1, #6
 8018918:	4618      	mov	r0, r3
 801891a:	f000 fd37 	bl	801938c <afe_create_config_word>
			afe_read(&ltc2335_1, config, data);
 801891e:	7bfb      	ldrb	r3, [r7, #15]
 8018920:	f107 0210 	add.w	r2, r7, #16
 8018924:	4619      	mov	r1, r3
 8018926:	481a      	ldr	r0, [pc, #104]	; (8018990 <ev_read_sensor_task+0xb4>)
 8018928:	f000 fd09 	bl	801933e <afe_read>
			afe_convert(&ltc2335_1, data);
 801892c:	f107 0310 	add.w	r3, r7, #16
 8018930:	4619      	mov	r1, r3
 8018932:	4817      	ldr	r0, [pc, #92]	; (8018990 <ev_read_sensor_task+0xb4>)
 8018934:	f000 fd47 	bl	80193c6 <afe_convert>
			afe_read(&ltc2335_2, config, data);
 8018938:	7bfb      	ldrb	r3, [r7, #15]
 801893a:	f107 0210 	add.w	r2, r7, #16
 801893e:	4619      	mov	r1, r3
 8018940:	4814      	ldr	r0, [pc, #80]	; (8018994 <ev_read_sensor_task+0xb8>)
 8018942:	f000 fcfc 	bl	801933e <afe_read>
			afe_convert(&ltc2335_2, data);
 8018946:	f107 0310 	add.w	r3, r7, #16
 801894a:	4619      	mov	r1, r3
 801894c:	4811      	ldr	r0, [pc, #68]	; (8018994 <ev_read_sensor_task+0xb8>)
 801894e:	f000 fd3a 	bl	80193c6 <afe_convert>
			channel++;
 8018952:	4b0e      	ldr	r3, [pc, #56]	; (801898c <ev_read_sensor_task+0xb0>)
 8018954:	781b      	ldrb	r3, [r3, #0]
 8018956:	3301      	adds	r3, #1
 8018958:	b2da      	uxtb	r2, r3
 801895a:	4b0c      	ldr	r3, [pc, #48]	; (801898c <ev_read_sensor_task+0xb0>)
 801895c:	701a      	strb	r2, [r3, #0]
			if (channel > 2)
 801895e:	4b0b      	ldr	r3, [pc, #44]	; (801898c <ev_read_sensor_task+0xb0>)
 8018960:	781b      	ldrb	r3, [r3, #0]
 8018962:	2b02      	cmp	r3, #2
 8018964:	d902      	bls.n	801896c <ev_read_sensor_task+0x90>
				channel = 0;
 8018966:	4b09      	ldr	r3, [pc, #36]	; (801898c <ev_read_sensor_task+0xb0>)
 8018968:	2200      	movs	r2, #0
 801896a:	701a      	strb	r2, [r3, #0]
		for (uint16_t i = 0; i < 300; i++) {
 801896c:	8afb      	ldrh	r3, [r7, #22]
 801896e:	3301      	adds	r3, #1
 8018970:	82fb      	strh	r3, [r7, #22]
 8018972:	8afb      	ldrh	r3, [r7, #22]
 8018974:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8018978:	d3c5      	bcc.n	8018906 <ev_read_sensor_task+0x2a>
		}
		vTaskDelay(1);
 801897a:	2001      	movs	r0, #1
 801897c:	f7ee fe28 	bl	80075d0 <vTaskDelay>
		tick_us = __HAL_TIM_GET_COUNTER(&htim2);
 8018980:	e7b5      	b.n	80188ee <ev_read_sensor_task+0x12>
 8018982:	bf00      	nop
 8018984:	2000b694 	.word	0x2000b694
 8018988:	2000b358 	.word	0x2000b358
 801898c:	2000b35c 	.word	0x2000b35c
 8018990:	2000001c 	.word	0x2000001c
 8018994:	20000060 	.word	0x20000060

08018998 <ev_tcp_server_data_task>:
	  }
}


static void ev_tcp_server_data_task(void* arg){
 8018998:	b580      	push	{r7, lr}
 801899a:	b0b8      	sub	sp, #224	; 0xe0
 801899c:	af02      	add	r7, sp, #8
 801899e:	6078      	str	r0, [r7, #4]
    char addr_str[128];
    int addr_family = (int)arg;
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    int ip_protocol = 0;
 80189a6:	2300      	movs	r3, #0
 80189a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    int keepAlive = 1;
 80189ac:	2301      	movs	r3, #1
 80189ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    int keepIdle = KEEPALIVE_IDLE;
 80189b0:	2305      	movs	r3, #5
 80189b2:	63bb      	str	r3, [r7, #56]	; 0x38
    int keepInterval = KEEPALIVE_INTERVAL;
 80189b4:	2305      	movs	r3, #5
 80189b6:	637b      	str	r3, [r7, #52]	; 0x34
    int keepCount = KEEPALIVE_COUNT;
 80189b8:	2301      	movs	r3, #1
 80189ba:	633b      	str	r3, [r7, #48]	; 0x30
    struct sockaddr_storage dest_addr;

    if (addr_family == AF_INET) {
 80189bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80189c0:	2b02      	cmp	r3, #2
 80189c2:	d11a      	bne.n	80189fa <ev_tcp_server_data_task+0x62>
        struct sockaddr_in *dest_addr_ip4 = (struct sockaddr_in *)&dest_addr;
 80189c4:	f107 0320 	add.w	r3, r7, #32
 80189c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        dest_addr_ip4->sin_addr.s_addr = htonl(INADDR_ANY);
 80189cc:	2000      	movs	r0, #0
 80189ce:	f7f4 fc2c 	bl	800d22a <lwip_htonl>
 80189d2:	4602      	mov	r2, r0
 80189d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80189d8:	605a      	str	r2, [r3, #4]
        dest_addr_ip4->sin_family = AF_INET;
 80189da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80189de:	2202      	movs	r2, #2
 80189e0:	705a      	strb	r2, [r3, #1]
        dest_addr_ip4->sin_port = htons(PORT_DATA);
 80189e2:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80189e6:	f7f4 fc0b 	bl	800d200 <lwip_htons>
 80189ea:	4603      	mov	r3, r0
 80189ec:	461a      	mov	r2, r3
 80189ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80189f2:	805a      	strh	r2, [r3, #2]
        ip_protocol = IPPROTO_IP;
 80189f4:	2300      	movs	r3, #0
 80189f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }

    int listen_sock = socket(addr_family, SOCK_STREAM, ip_protocol);
 80189fa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80189fe:	2101      	movs	r1, #1
 8018a00:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8018a04:	f7f3 fe4a 	bl	800c69c <lwip_socket>
 8018a08:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if (listen_sock < 0) {
 8018a0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	da03      	bge.n	8018a1c <ev_tcp_server_data_task+0x84>
        //printf( "Unable to create socket: errno %d", errno);
        vTaskDelete(NULL);
 8018a14:	2000      	movs	r0, #0
 8018a16:	f7ee fd69 	bl	80074ec <vTaskDelete>
 8018a1a:	e083      	b.n	8018b24 <ev_tcp_server_data_task+0x18c>
        return;
    }

    int opt = 1;
 8018a1c:	2301      	movs	r3, #1
 8018a1e:	61fb      	str	r3, [r7, #28]
    setsockopt(listen_sock, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));
 8018a20:	f107 031c 	add.w	r3, r7, #28
 8018a24:	2204      	movs	r2, #4
 8018a26:	9200      	str	r2, [sp, #0]
 8018a28:	2204      	movs	r2, #4
 8018a2a:	f640 71ff 	movw	r1, #4095	; 0xfff
 8018a2e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8018a32:	f7f4 f841 	bl	800cab8 <lwip_setsockopt>

    int err = bind(listen_sock, (struct sockaddr *)&dest_addr, sizeof(dest_addr));
 8018a36:	f107 0320 	add.w	r3, r7, #32
 8018a3a:	2210      	movs	r2, #16
 8018a3c:	4619      	mov	r1, r3
 8018a3e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8018a42:	f7f3 f8d7 	bl	800bbf4 <lwip_bind>
 8018a46:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    if (err != 0) {
 8018a4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d15c      	bne.n	8018b0c <ev_tcp_server_data_task+0x174>
        //printf( "IPPROTO: %d", addr_family);
        goto CLEAN_UP;
    }
    //printf( "Socket bound, port %d", PORT_SETTING);

    err = listen(listen_sock, 1);
 8018a52:	2101      	movs	r1, #1
 8018a54:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8018a58:	f7f3 f990 	bl	800bd7c <lwip_listen>
 8018a5c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    if (err != 0) {
 8018a60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d153      	bne.n	8018b10 <ev_tcp_server_data_task+0x178>
        goto CLEAN_UP;
    }
	for (;;) {
        //printf( "Socket listening");
        struct sockaddr_storage source_addr; // Large enough for both IPv4 or IPv6
        socklen_t addr_len = sizeof(source_addr);
 8018a68:	2310      	movs	r3, #16
 8018a6a:	60bb      	str	r3, [r7, #8]
        int sock = accept(listen_sock, (struct sockaddr *)&source_addr, &addr_len);
 8018a6c:	f107 0208 	add.w	r2, r7, #8
 8018a70:	f107 030c 	add.w	r3, r7, #12
 8018a74:	4619      	mov	r1, r3
 8018a76:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8018a7a:	f7f2 ff9d 	bl	800b9b8 <lwip_accept>
 8018a7e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
        if (sock < 0) {
 8018a82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	db44      	blt.n	8018b14 <ev_tcp_server_data_task+0x17c>
            //printf( "Unable to accept connection: errno %d", errno);
            break;
        }
        // Set tcp keepalive option
        setsockopt(sock, SOL_SOCKET, SO_KEEPALIVE, &keepAlive, sizeof(int));
 8018a8a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018a8e:	2204      	movs	r2, #4
 8018a90:	9200      	str	r2, [sp, #0]
 8018a92:	2208      	movs	r2, #8
 8018a94:	f640 71ff 	movw	r1, #4095	; 0xfff
 8018a98:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8018a9c:	f7f4 f80c 	bl	800cab8 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPIDLE, &keepIdle, sizeof(int));
 8018aa0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018aa4:	2204      	movs	r2, #4
 8018aa6:	9200      	str	r2, [sp, #0]
 8018aa8:	2203      	movs	r2, #3
 8018aaa:	2106      	movs	r1, #6
 8018aac:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8018ab0:	f7f4 f802 	bl	800cab8 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPINTVL, &keepInterval, sizeof(int));
 8018ab4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018ab8:	2204      	movs	r2, #4
 8018aba:	9200      	str	r2, [sp, #0]
 8018abc:	2204      	movs	r2, #4
 8018abe:	2106      	movs	r1, #6
 8018ac0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8018ac4:	f7f3 fff8 	bl	800cab8 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPCNT, &keepCount, sizeof(int));
 8018ac8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018acc:	2204      	movs	r2, #4
 8018ace:	9200      	str	r2, [sp, #0]
 8018ad0:	2205      	movs	r2, #5
 8018ad2:	2106      	movs	r1, #6
 8018ad4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8018ad8:	f7f3 ffee 	bl	800cab8 <lwip_setsockopt>
        // Convert ip address to string
        if (source_addr.ss_family == PF_INET) {
 8018adc:	7b7b      	ldrb	r3, [r7, #13]
 8018ade:	2b02      	cmp	r3, #2
 8018ae0:	d108      	bne.n	8018af4 <ev_tcp_server_data_task+0x15c>
            inet_ntoa_r(((struct sockaddr_in *)&source_addr)->sin_addr, addr_str, sizeof(addr_str) - 1);
 8018ae2:	f107 030c 	add.w	r3, r7, #12
 8018ae6:	3304      	adds	r3, #4
 8018ae8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8018aec:	227f      	movs	r2, #127	; 0x7f
 8018aee:	4618      	mov	r0, r3
 8018af0:	f7fe fd12 	bl	8017518 <ip4addr_ntoa_r>
        }
        //printf( "Socket accepted ip address: %s", addr_str);
        do_send_data(sock);
 8018af4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8018af8:	f7ff fe98 	bl	801882c <do_send_data>
        close(sock);
 8018afc:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8018b00:	f7f3 f8e6 	bl	800bcd0 <lwip_close>
		vTaskDelay(1);
 8018b04:	2001      	movs	r0, #1
 8018b06:	f7ee fd63 	bl	80075d0 <vTaskDelay>
	for (;;) {
 8018b0a:	e7ad      	b.n	8018a68 <ev_tcp_server_data_task+0xd0>
        goto CLEAN_UP;
 8018b0c:	bf00      	nop
 8018b0e:	e002      	b.n	8018b16 <ev_tcp_server_data_task+0x17e>
        goto CLEAN_UP;
 8018b10:	bf00      	nop
 8018b12:	e000      	b.n	8018b16 <ev_tcp_server_data_task+0x17e>
            break;
 8018b14:	bf00      	nop
	}
CLEAN_UP:
    close(listen_sock);
 8018b16:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8018b1a:	f7f3 f8d9 	bl	800bcd0 <lwip_close>
    vTaskDelete(NULL);
 8018b1e:	2000      	movs	r0, #0
 8018b20:	f7ee fce4 	bl	80074ec <vTaskDelete>
}
 8018b24:	37d8      	adds	r7, #216	; 0xd8
 8018b26:	46bd      	mov	sp, r7
 8018b28:	bd80      	pop	{r7, pc}

08018b2a <app_read_sensor_task>:


void app_read_sensor_task(void *arg){
 8018b2a:	b480      	push	{r7}
 8018b2c:	b085      	sub	sp, #20
 8018b2e:	af00      	add	r7, sp, #0
 8018b30:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef*)arg;
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	60fb      	str	r3, [r7, #12]
	if(htim->Instance == htim2.Instance){

	}

}
 8018b36:	bf00      	nop
 8018b38:	3714      	adds	r7, #20
 8018b3a:	46bd      	mov	sp, r7
 8018b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b40:	4770      	bx	lr
	...

08018b44 <__io_putchar>:

/********************** Exported Function Definitions *************************/

QueueHandle_t shell_queue_send;

uint8_t __io_putchar(uint8_t ch){
 8018b44:	b580      	push	{r7, lr}
 8018b46:	b082      	sub	sp, #8
 8018b48:	af00      	add	r7, sp, #0
 8018b4a:	4603      	mov	r3, r0
 8018b4c:	71fb      	strb	r3, [r7, #7]
	xQueueSend(shell_queue_send,&ch,(TickType_t)100);
 8018b4e:	4b06      	ldr	r3, [pc, #24]	; (8018b68 <__io_putchar+0x24>)
 8018b50:	6818      	ldr	r0, [r3, #0]
 8018b52:	1df9      	adds	r1, r7, #7
 8018b54:	2300      	movs	r3, #0
 8018b56:	2264      	movs	r2, #100	; 0x64
 8018b58:	f7ed fc6e 	bl	8006438 <xQueueGenericSend>
	return ch;
 8018b5c:	79fb      	ldrb	r3, [r7, #7]
}
 8018b5e:	4618      	mov	r0, r3
 8018b60:	3708      	adds	r7, #8
 8018b62:	46bd      	mov	sp, r7
 8018b64:	bd80      	pop	{r7, pc}
 8018b66:	bf00      	nop
 8018b68:	200120d4 	.word	0x200120d4

08018b6c <shell_printf>:
#define default_buff_size 1024
int shell_printf(const char *format, ...){
 8018b6c:	b40f      	push	{r0, r1, r2, r3}
 8018b6e:	b580      	push	{r7, lr}
 8018b70:	b084      	sub	sp, #16
 8018b72:	af00      	add	r7, sp, #0
	va_list args;
	char *buff = (char*) malloc(default_buff_size);
 8018b74:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8018b78:	f001 fd02 	bl	801a580 <malloc>
 8018b7c:	4603      	mov	r3, r0
 8018b7e:	60bb      	str	r3, [r7, #8]
	memset(buff, 0, default_buff_size);
 8018b80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018b84:	2100      	movs	r1, #0
 8018b86:	68b8      	ldr	r0, [r7, #8]
 8018b88:	f001 fd40 	bl	801a60c <memset>
	va_start(args, format);
 8018b8c:	f107 031c 	add.w	r3, r7, #28
 8018b90:	603b      	str	r3, [r7, #0]
	vsprintf(buff, format, args);
 8018b92:	683a      	ldr	r2, [r7, #0]
 8018b94:	69b9      	ldr	r1, [r7, #24]
 8018b96:	68b8      	ldr	r0, [r7, #8]
 8018b98:	f002 fa92 	bl	801b0c0 <vsiprintf>

	int len = strlen(buff);
 8018b9c:	68b8      	ldr	r0, [r7, #8]
 8018b9e:	f7e7 fb17 	bl	80001d0 <strlen>
 8018ba2:	4603      	mov	r3, r0
 8018ba4:	607b      	str	r3, [r7, #4]

	for(uint16_t i = 0;i<len;i++)
 8018ba6:	2300      	movs	r3, #0
 8018ba8:	81fb      	strh	r3, [r7, #14]
 8018baa:	e009      	b.n	8018bc0 <shell_printf+0x54>
		__io_putchar(buff[i]);
 8018bac:	89fb      	ldrh	r3, [r7, #14]
 8018bae:	68ba      	ldr	r2, [r7, #8]
 8018bb0:	4413      	add	r3, r2
 8018bb2:	781b      	ldrb	r3, [r3, #0]
 8018bb4:	4618      	mov	r0, r3
 8018bb6:	f7ff ffc5 	bl	8018b44 <__io_putchar>
	for(uint16_t i = 0;i<len;i++)
 8018bba:	89fb      	ldrh	r3, [r7, #14]
 8018bbc:	3301      	adds	r3, #1
 8018bbe:	81fb      	strh	r3, [r7, #14]
 8018bc0:	89fb      	ldrh	r3, [r7, #14]
 8018bc2:	687a      	ldr	r2, [r7, #4]
 8018bc4:	429a      	cmp	r2, r3
 8018bc6:	dcf1      	bgt.n	8018bac <shell_printf+0x40>
	free(buff);
 8018bc8:	68b8      	ldr	r0, [r7, #8]
 8018bca:	f001 fce1 	bl	801a590 <free>
	return len;
 8018bce:	687b      	ldr	r3, [r7, #4]
}
 8018bd0:	4618      	mov	r0, r3
 8018bd2:	3710      	adds	r7, #16
 8018bd4:	46bd      	mov	sp, r7
 8018bd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018bda:	b004      	add	sp, #16
 8018bdc:	4770      	bx	lr

08018bde <user_put_char>:
int user_put_char(uint8_t *buf, uint32_t len) {
 8018bde:	b580      	push	{r7, lr}
 8018be0:	b082      	sub	sp, #8
 8018be2:	af00      	add	r7, sp, #0
 8018be4:	6078      	str	r0, [r7, #4]
 8018be6:	6039      	str	r1, [r7, #0]
	return __io_putchar(*buf);
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	781b      	ldrb	r3, [r3, #0]
 8018bec:	4618      	mov	r0, r3
 8018bee:	f7ff ffa9 	bl	8018b44 <__io_putchar>
 8018bf2:	4603      	mov	r3, r0
}
 8018bf4:	4618      	mov	r0, r3
 8018bf6:	3708      	adds	r7, #8
 8018bf8:	46bd      	mov	sp, r7
 8018bfa:	bd80      	pop	{r7, pc}

08018bfc <user_get_char>:

int user_get_char(uint8_t *buf, uint32_t len) {
 8018bfc:	b580      	push	{r7, lr}
 8018bfe:	b084      	sub	sp, #16
 8018c00:	af00      	add	r7, sp, #0
 8018c02:	6078      	str	r0, [r7, #4]
 8018c04:	6039      	str	r1, [r7, #0]
	uint8_t ch = __io_getchar();
 8018c06:	f000 fd27 	bl	8019658 <__io_getchar>
 8018c0a:	4603      	mov	r3, r0
 8018c0c:	73fb      	strb	r3, [r7, #15]
	*buf = ch;
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	7bfa      	ldrb	r2, [r7, #15]
 8018c12:	701a      	strb	r2, [r3, #0]
	return ch;
 8018c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8018c16:	4618      	mov	r0, r3
 8018c18:	3710      	adds	r7, #16
 8018c1a:	46bd      	mov	sp, r7
 8018c1c:	bd80      	pop	{r7, pc}
	...

08018c20 <cli_app_start>:

void cli_app_start(void) {
 8018c20:	b580      	push	{r7, lr}
 8018c22:	b084      	sub	sp, #16
 8018c24:	af02      	add	r7, sp, #8
	retarget_init();
 8018c26:	f000 fce3 	bl	80195f0 <retarget_init>
	shell_queue_send = xQueueCreate(1024,sizeof(uint8_t));
 8018c2a:	2200      	movs	r2, #0
 8018c2c:	2101      	movs	r1, #1
 8018c2e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8018c32:	f7ed fa83 	bl	800613c <xQueueGenericCreate>
 8018c36:	4603      	mov	r3, r0
 8018c38:	4a11      	ldr	r2, [pc, #68]	; (8018c80 <cli_app_start+0x60>)
 8018c3a:	6013      	str	r3, [r2, #0]
	if(shell_queue_send == NULL) return;
 8018c3c:	4b10      	ldr	r3, [pc, #64]	; (8018c80 <cli_app_start+0x60>)
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d018      	beq.n	8018c76 <cli_app_start+0x56>

	SHELL_Init(&user_context, user_put_char, user_get_char, shell_printf, ">");
 8018c44:	4b0f      	ldr	r3, [pc, #60]	; (8018c84 <cli_app_start+0x64>)
 8018c46:	9300      	str	r3, [sp, #0]
 8018c48:	4b0f      	ldr	r3, [pc, #60]	; (8018c88 <cli_app_start+0x68>)
 8018c4a:	4a10      	ldr	r2, [pc, #64]	; (8018c8c <cli_app_start+0x6c>)
 8018c4c:	4910      	ldr	r1, [pc, #64]	; (8018c90 <cli_app_start+0x70>)
 8018c4e:	4811      	ldr	r0, [pc, #68]	; (8018c94 <cli_app_start+0x74>)
 8018c50:	f000 fd5c 	bl	801970c <SHELL_Init>

	/* Register CLI commands */
	for (int i = 0;
 8018c54:	2300      	movs	r3, #0
 8018c56:	607b      	str	r3, [r7, #4]
 8018c58:	e009      	b.n	8018c6e <cli_app_start+0x4e>
			i < sizeof(cli_command_table) / sizeof(shell_command_context_t);
			i++) {
		SHELL_RegisterCommand(&cli_command_table[i]);
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	011b      	lsls	r3, r3, #4
 8018c5e:	4a0e      	ldr	r2, [pc, #56]	; (8018c98 <cli_app_start+0x78>)
 8018c60:	4413      	add	r3, r2
 8018c62:	4618      	mov	r0, r3
 8018c64:	f001 fb04 	bl	801a270 <SHELL_RegisterCommand>
			i++) {
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	3301      	adds	r3, #1
 8018c6c:	607b      	str	r3, [r7, #4]
	for (int i = 0;
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d0f2      	beq.n	8018c5a <cli_app_start+0x3a>
 8018c74:	e000      	b.n	8018c78 <cli_app_start+0x58>
	if(shell_queue_send == NULL) return;
 8018c76:	bf00      	nop
	}
}
 8018c78:	3708      	adds	r7, #8
 8018c7a:	46bd      	mov	sp, r7
 8018c7c:	bd80      	pop	{r7, pc}
 8018c7e:	bf00      	nop
 8018c80:	200120d4 	.word	0x200120d4
 8018c84:	0801f2bc 	.word	0x0801f2bc
 8018c88:	08018b6d 	.word	0x08018b6d
 8018c8c:	08018bfd 	.word	0x08018bfd
 8018c90:	08018bdf 	.word	0x08018bdf
 8018c94:	2000b360 	.word	0x2000b360
 8018c98:	0801f5f8 	.word	0x0801f5f8

08018c9c <cli_app_main_loop>:

void cli_app_main_loop(void *pvParameters) {
 8018c9c:	b580      	push	{r7, lr}
 8018c9e:	b082      	sub	sp, #8
 8018ca0:	af00      	add	r7, sp, #0
 8018ca2:	6078      	str	r0, [r7, #4]
	SHELL_Process(&user_context);
 8018ca4:	4803      	ldr	r0, [pc, #12]	; (8018cb4 <cli_app_main_loop+0x18>)
 8018ca6:	f000 fd83 	bl	80197b0 <SHELL_Process>
}
 8018caa:	bf00      	nop
 8018cac:	3708      	adds	r7, #8
 8018cae:	46bd      	mov	sp, r7
 8018cb0:	bd80      	pop	{r7, pc}
 8018cb2:	bf00      	nop
 8018cb4:	2000b360 	.word	0x2000b360

08018cb8 <cli_app_on_data_received>:

void cli_app_on_data_received(uint8_t ch) {
 8018cb8:	b580      	push	{r7, lr}
 8018cba:	b082      	sub	sp, #8
 8018cbc:	af00      	add	r7, sp, #0
 8018cbe:	4603      	mov	r3, r0
 8018cc0:	71fb      	strb	r3, [r7, #7]
	on_uart_data_received(ch);
 8018cc2:	79fb      	ldrb	r3, [r7, #7]
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	f000 fcd9 	bl	801967c <on_uart_data_received>
}
 8018cca:	bf00      	nop
 8018ccc:	3708      	adds	r7, #8
 8018cce:	46bd      	mov	sp, r7
 8018cd0:	bd80      	pop	{r7, pc}

08018cd2 <cli_reset_system>:

/********************** Internal Function Definitions *************************/

/* Reset System */
static int32_t cli_reset_system(p_shell_context_t context, int32_t argc,
		char **argv) {
 8018cd2:	b480      	push	{r7}
 8018cd4:	b085      	sub	sp, #20
 8018cd6:	af00      	add	r7, sp, #0
 8018cd8:	60f8      	str	r0, [r7, #12]
 8018cda:	60b9      	str	r1, [r7, #8]
 8018cdc:	607a      	str	r2, [r7, #4]
	if (argc < 1) {
 8018cde:	68bb      	ldr	r3, [r7, #8]
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	dc02      	bgt.n	8018cea <cli_reset_system+0x18>
		//printf("Missing parameter\r\n");
		return -1;
 8018ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8018ce8:	e000      	b.n	8018cec <cli_reset_system+0x1a>
	}
	//printf("sys reset\r\n");
	return 0;
 8018cea:	2300      	movs	r3, #0
}
 8018cec:	4618      	mov	r0, r3
 8018cee:	3714      	adds	r7, #20
 8018cf0:	46bd      	mov	sp, r7
 8018cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cf6:	4770      	bx	lr

08018cf8 <setting_app>:

static void ev_tcp_server_config_task(void *arg);
static void do_retransmit(const int sock);
static void transmit_data(void* arg);
static void send_tcp(const int sock,char* buff,uint16_t len);
void setting_app(){
 8018cf8:	b580      	push	{r7, lr}
 8018cfa:	b082      	sub	sp, #8
 8018cfc:	af02      	add	r7, sp, #8

	tranmiter_semphr = xSemaphoreCreateMutex();
 8018cfe:	2001      	movs	r0, #1
 8018d00:	f7ed fa93 	bl	800622a <xQueueCreateMutex>
 8018d04:	4603      	mov	r3, r0
 8018d06:	4a08      	ldr	r2, [pc, #32]	; (8018d28 <setting_app+0x30>)
 8018d08:	6013      	str	r3, [r2, #0]

	xTaskCreate(ev_tcp_server_config_task, "tcp server_st", 1024, NULL,
 8018d0a:	4b08      	ldr	r3, [pc, #32]	; (8018d2c <setting_app+0x34>)
 8018d0c:	9301      	str	r3, [sp, #4]
 8018d0e:	2337      	movs	r3, #55	; 0x37
 8018d10:	9300      	str	r3, [sp, #0]
 8018d12:	2300      	movs	r3, #0
 8018d14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018d18:	4905      	ldr	r1, [pc, #20]	; (8018d30 <setting_app+0x38>)
 8018d1a:	4806      	ldr	r0, [pc, #24]	; (8018d34 <setting_app+0x3c>)
 8018d1c:	f7ee fa8b 	bl	8007236 <xTaskCreate>
			configMAX_PRIORITIES - 1, &ev_tcp_server_setting_handle);
}
 8018d20:	bf00      	nop
 8018d22:	46bd      	mov	sp, r7
 8018d24:	bd80      	pop	{r7, pc}
 8018d26:	bf00      	nop
 8018d28:	200120d8 	.word	0x200120d8
 8018d2c:	200120dc 	.word	0x200120dc
 8018d30:	0801f2c0 	.word	0x0801f2c0
 8018d34:	08018dfd 	.word	0x08018dfd

08018d38 <do_retransmit>:

static void do_retransmit(const int sock)
{
 8018d38:	b580      	push	{r7, lr}
 8018d3a:	b0a8      	sub	sp, #160	; 0xa0
 8018d3c:	af02      	add	r7, sp, #8
 8018d3e:	6078      	str	r0, [r7, #4]

    int len;
    char rx_buffer[128];
    int p_sock = sock;
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	60fb      	str	r3, [r7, #12]
    xTaskCreate(transmit_data,"transmit", 1024,(void*)&p_sock,configMAX_PRIORITIES, &tranmiter_handle);
 8018d44:	f107 030c 	add.w	r3, r7, #12
 8018d48:	4a29      	ldr	r2, [pc, #164]	; (8018df0 <do_retransmit+0xb8>)
 8018d4a:	9201      	str	r2, [sp, #4]
 8018d4c:	2238      	movs	r2, #56	; 0x38
 8018d4e:	9200      	str	r2, [sp, #0]
 8018d50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018d54:	4927      	ldr	r1, [pc, #156]	; (8018df4 <do_retransmit+0xbc>)
 8018d56:	4828      	ldr	r0, [pc, #160]	; (8018df8 <do_retransmit+0xc0>)
 8018d58:	f7ee fa6d 	bl	8007236 <xTaskCreate>
    do {
        len = recv(sock, rx_buffer, sizeof(rx_buffer) - 1, 0);
 8018d5c:	f107 0110 	add.w	r1, r7, #16
 8018d60:	2300      	movs	r3, #0
 8018d62:	227f      	movs	r2, #127	; 0x7f
 8018d64:	6878      	ldr	r0, [r7, #4]
 8018d66:	f7f3 fb73 	bl	800c450 <lwip_recv>
 8018d6a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        if (len < 0) {
 8018d6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018d72:	2b00      	cmp	r3, #0
 8018d74:	db2f      	blt.n	8018dd6 <do_retransmit+0x9e>
            //printf( "Error occurred during receiving: errno %d", errno);
        } else if (len == 0) {
 8018d76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	d02b      	beq.n	8018dd6 <do_retransmit+0x9e>
            //printf( "Connection closed");
        } else {
            rx_buffer[len] = 0; // Null-terminate whatever is received and treat it like a string
 8018d7e:	f107 0210 	add.w	r2, r7, #16
 8018d82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018d86:	4413      	add	r3, r2
 8018d88:	2200      	movs	r2, #0
 8018d8a:	701a      	strb	r2, [r3, #0]
            //printf( "Received %d bytes: %s", len, rx_buffer);
            // send() can return less bytes than supplied length.
            // Walk-around for robust implementation.
            send_tcp(sock, rx_buffer, len);
 8018d8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018d90:	b29a      	uxth	r2, r3
 8018d92:	f107 0310 	add.w	r3, r7, #16
 8018d96:	4619      	mov	r1, r3
 8018d98:	6878      	ldr	r0, [r7, #4]
 8018d9a:	f000 f929 	bl	8018ff0 <send_tcp>
            for(uint16_t i =0;i<len;i++){
 8018d9e:	2300      	movs	r3, #0
 8018da0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8018da4:	e011      	b.n	8018dca <do_retransmit+0x92>
            	cli_app_on_data_received(rx_buffer[i]);
 8018da6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8018daa:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8018dae:	4413      	add	r3, r2
 8018db0:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 8018db4:	4618      	mov	r0, r3
 8018db6:	f7ff ff7f 	bl	8018cb8 <cli_app_on_data_received>
            	cli_app_main_loop(NULL);
 8018dba:	2000      	movs	r0, #0
 8018dbc:	f7ff ff6e 	bl	8018c9c <cli_app_main_loop>
            for(uint16_t i =0;i<len;i++){
 8018dc0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8018dc4:	3301      	adds	r3, #1
 8018dc6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8018dca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8018dce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8018dd2:	429a      	cmp	r2, r3
 8018dd4:	dce7      	bgt.n	8018da6 <do_retransmit+0x6e>
            }
        }
    } while (len > 0);
 8018dd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	dcbe      	bgt.n	8018d5c <do_retransmit+0x24>
    vTaskDelete(tranmiter_handle);
 8018dde:	4b04      	ldr	r3, [pc, #16]	; (8018df0 <do_retransmit+0xb8>)
 8018de0:	681b      	ldr	r3, [r3, #0]
 8018de2:	4618      	mov	r0, r3
 8018de4:	f7ee fb82 	bl	80074ec <vTaskDelete>
}
 8018de8:	bf00      	nop
 8018dea:	3798      	adds	r7, #152	; 0x98
 8018dec:	46bd      	mov	sp, r7
 8018dee:	bd80      	pop	{r7, pc}
 8018df0:	200120e0 	.word	0x200120e0
 8018df4:	0801f2d0 	.word	0x0801f2d0
 8018df8:	08018f8d 	.word	0x08018f8d

08018dfc <ev_tcp_server_config_task>:

static void ev_tcp_server_config_task(void *arg) {
 8018dfc:	b580      	push	{r7, lr}
 8018dfe:	b0b8      	sub	sp, #224	; 0xe0
 8018e00:	af02      	add	r7, sp, #8
 8018e02:	6078      	str	r0, [r7, #4]

	cli_app_start();
 8018e04:	f7ff ff0c 	bl	8018c20 <cli_app_start>
    char addr_str[128];
    int addr_family = (int)arg;
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    int ip_protocol = 0;
 8018e0e:	2300      	movs	r3, #0
 8018e10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    int keepAlive = 1;
 8018e14:	2301      	movs	r3, #1
 8018e16:	63fb      	str	r3, [r7, #60]	; 0x3c
    int keepIdle = KEEPALIVE_IDLE;
 8018e18:	2305      	movs	r3, #5
 8018e1a:	63bb      	str	r3, [r7, #56]	; 0x38
    int keepInterval = KEEPALIVE_INTERVAL;
 8018e1c:	2305      	movs	r3, #5
 8018e1e:	637b      	str	r3, [r7, #52]	; 0x34
    int keepCount = KEEPALIVE_COUNT;
 8018e20:	2301      	movs	r3, #1
 8018e22:	633b      	str	r3, [r7, #48]	; 0x30
    struct sockaddr_storage dest_addr;

    if (addr_family == AF_INET) {
 8018e24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8018e28:	2b02      	cmp	r3, #2
 8018e2a:	d11a      	bne.n	8018e62 <ev_tcp_server_config_task+0x66>
        struct sockaddr_in *dest_addr_ip4 = (struct sockaddr_in *)&dest_addr;
 8018e2c:	f107 0320 	add.w	r3, r7, #32
 8018e30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        dest_addr_ip4->sin_addr.s_addr = htonl(INADDR_ANY);
 8018e34:	2000      	movs	r0, #0
 8018e36:	f7f4 f9f8 	bl	800d22a <lwip_htonl>
 8018e3a:	4602      	mov	r2, r0
 8018e3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018e40:	605a      	str	r2, [r3, #4]
        dest_addr_ip4->sin_family = AF_INET;
 8018e42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018e46:	2202      	movs	r2, #2
 8018e48:	705a      	strb	r2, [r3, #1]
        dest_addr_ip4->sin_port = htons(PORT_SETTING);
 8018e4a:	f240 40d2 	movw	r0, #1234	; 0x4d2
 8018e4e:	f7f4 f9d7 	bl	800d200 <lwip_htons>
 8018e52:	4603      	mov	r3, r0
 8018e54:	461a      	mov	r2, r3
 8018e56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018e5a:	805a      	strh	r2, [r3, #2]
        ip_protocol = IPPROTO_IP;
 8018e5c:	2300      	movs	r3, #0
 8018e5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }

    int listen_sock = socket(addr_family, SOCK_STREAM, ip_protocol);
 8018e62:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8018e66:	2101      	movs	r1, #1
 8018e68:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8018e6c:	f7f3 fc16 	bl	800c69c <lwip_socket>
 8018e70:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if (listen_sock < 0) {
 8018e74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	da03      	bge.n	8018e84 <ev_tcp_server_config_task+0x88>
        //printf( "Unable to create socket: errno %d", errno);
        vTaskDelete(NULL);
 8018e7c:	2000      	movs	r0, #0
 8018e7e:	f7ee fb35 	bl	80074ec <vTaskDelete>
 8018e82:	e07f      	b.n	8018f84 <ev_tcp_server_config_task+0x188>
        return;
    }

    int opt = 1;
 8018e84:	2301      	movs	r3, #1
 8018e86:	61fb      	str	r3, [r7, #28]
    setsockopt(listen_sock, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));
 8018e88:	f107 031c 	add.w	r3, r7, #28
 8018e8c:	2204      	movs	r2, #4
 8018e8e:	9200      	str	r2, [sp, #0]
 8018e90:	2204      	movs	r2, #4
 8018e92:	f640 71ff 	movw	r1, #4095	; 0xfff
 8018e96:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8018e9a:	f7f3 fe0d 	bl	800cab8 <lwip_setsockopt>

    int err = bind(listen_sock, (struct sockaddr *)&dest_addr, sizeof(dest_addr));
 8018e9e:	f107 0320 	add.w	r3, r7, #32
 8018ea2:	2210      	movs	r2, #16
 8018ea4:	4619      	mov	r1, r3
 8018ea6:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8018eaa:	f7f2 fea3 	bl	800bbf4 <lwip_bind>
 8018eae:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    if (err != 0) {
 8018eb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	d158      	bne.n	8018f6c <ev_tcp_server_config_task+0x170>
        //printf( "IPPROTO: %d", addr_family);
        goto CLEAN_UP;
    }
    //printf( "Socket bound, port %d", PORT_SETTING);

    err = listen(listen_sock, 1);
 8018eba:	2101      	movs	r1, #1
 8018ebc:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8018ec0:	f7f2 ff5c 	bl	800bd7c <lwip_listen>
 8018ec4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    if (err != 0) {
 8018ec8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d14f      	bne.n	8018f70 <ev_tcp_server_config_task+0x174>
        goto CLEAN_UP;
    }
	for (;;) {
        //printf( "Socket listening");
        struct sockaddr_storage source_addr; // Large enough for both IPv4 or IPv6
        socklen_t addr_len = sizeof(source_addr);
 8018ed0:	2310      	movs	r3, #16
 8018ed2:	60bb      	str	r3, [r7, #8]
        int sock = accept(listen_sock, (struct sockaddr *)&source_addr, &addr_len);
 8018ed4:	f107 0208 	add.w	r2, r7, #8
 8018ed8:	f107 030c 	add.w	r3, r7, #12
 8018edc:	4619      	mov	r1, r3
 8018ede:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8018ee2:	f7f2 fd69 	bl	800b9b8 <lwip_accept>
 8018ee6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
        if (sock < 0) {
 8018eea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	db40      	blt.n	8018f74 <ev_tcp_server_config_task+0x178>
            //printf( "Unable to accept connection: errno %d", errno);
            break;
        }
        // Set tcp keepalive option
        setsockopt(sock, SOL_SOCKET, SO_KEEPALIVE, &keepAlive, sizeof(int));
 8018ef2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018ef6:	2204      	movs	r2, #4
 8018ef8:	9200      	str	r2, [sp, #0]
 8018efa:	2208      	movs	r2, #8
 8018efc:	f640 71ff 	movw	r1, #4095	; 0xfff
 8018f00:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8018f04:	f7f3 fdd8 	bl	800cab8 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPIDLE, &keepIdle, sizeof(int));
 8018f08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018f0c:	2204      	movs	r2, #4
 8018f0e:	9200      	str	r2, [sp, #0]
 8018f10:	2203      	movs	r2, #3
 8018f12:	2106      	movs	r1, #6
 8018f14:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8018f18:	f7f3 fdce 	bl	800cab8 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPINTVL, &keepInterval, sizeof(int));
 8018f1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018f20:	2204      	movs	r2, #4
 8018f22:	9200      	str	r2, [sp, #0]
 8018f24:	2204      	movs	r2, #4
 8018f26:	2106      	movs	r1, #6
 8018f28:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8018f2c:	f7f3 fdc4 	bl	800cab8 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPCNT, &keepCount, sizeof(int));
 8018f30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018f34:	2204      	movs	r2, #4
 8018f36:	9200      	str	r2, [sp, #0]
 8018f38:	2205      	movs	r2, #5
 8018f3a:	2106      	movs	r1, #6
 8018f3c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8018f40:	f7f3 fdba 	bl	800cab8 <lwip_setsockopt>
        // Convert ip address to string
        if (source_addr.ss_family == PF_INET) {
 8018f44:	7b7b      	ldrb	r3, [r7, #13]
 8018f46:	2b02      	cmp	r3, #2
 8018f48:	d108      	bne.n	8018f5c <ev_tcp_server_config_task+0x160>
            inet_ntoa_r(((struct sockaddr_in *)&source_addr)->sin_addr, addr_str, sizeof(addr_str) - 1);
 8018f4a:	f107 030c 	add.w	r3, r7, #12
 8018f4e:	3304      	adds	r3, #4
 8018f50:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8018f54:	227f      	movs	r2, #127	; 0x7f
 8018f56:	4618      	mov	r0, r3
 8018f58:	f7fe fade 	bl	8017518 <ip4addr_ntoa_r>
        }
        //printf( "Socket accepted ip address: %s", addr_str);
        do_retransmit(sock);
 8018f5c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8018f60:	f7ff feea 	bl	8018d38 <do_retransmit>
		vTaskDelay(1);
 8018f64:	2001      	movs	r0, #1
 8018f66:	f7ee fb33 	bl	80075d0 <vTaskDelay>
	for (;;) {
 8018f6a:	e7b1      	b.n	8018ed0 <ev_tcp_server_config_task+0xd4>
        goto CLEAN_UP;
 8018f6c:	bf00      	nop
 8018f6e:	e002      	b.n	8018f76 <ev_tcp_server_config_task+0x17a>
        goto CLEAN_UP;
 8018f70:	bf00      	nop
 8018f72:	e000      	b.n	8018f76 <ev_tcp_server_config_task+0x17a>
            break;
 8018f74:	bf00      	nop
	}
CLEAN_UP:
    close(listen_sock);
 8018f76:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8018f7a:	f7f2 fea9 	bl	800bcd0 <lwip_close>
    vTaskDelete(NULL);
 8018f7e:	2000      	movs	r0, #0
 8018f80:	f7ee fab4 	bl	80074ec <vTaskDelete>
}
 8018f84:	37d8      	adds	r7, #216	; 0xd8
 8018f86:	46bd      	mov	sp, r7
 8018f88:	bd80      	pop	{r7, pc}
	...

08018f8c <transmit_data>:
static void transmit_data(void* arg){
 8018f8c:	b580      	push	{r7, lr}
 8018f8e:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8018f92:	af00      	add	r7, sp, #0
 8018f94:	1d3b      	adds	r3, r7, #4
 8018f96:	6018      	str	r0, [r3, #0]

	int* sock = (int*)arg;
 8018f98:	1d3b      	adds	r3, r7, #4
 8018f9a:	681b      	ldr	r3, [r3, #0]
 8018f9c:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	uint8_t buff[1024];
	uint16_t len = 0;
 8018fa0:	2300      	movs	r3, #0
 8018fa2:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	for(;;){
		if(xQueueReceive(shell_queue_send,buff+len,(TickType_t)100) == pdPASS){
 8018fa6:	4b11      	ldr	r3, [pc, #68]	; (8018fec <transmit_data+0x60>)
 8018fa8:	6818      	ldr	r0, [r3, #0]
 8018faa:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8018fae:	f107 0208 	add.w	r2, r7, #8
 8018fb2:	4413      	add	r3, r2
 8018fb4:	2264      	movs	r2, #100	; 0x64
 8018fb6:	4619      	mov	r1, r3
 8018fb8:	f7ed fc64 	bl	8006884 <xQueueReceive>
 8018fbc:	4603      	mov	r3, r0
 8018fbe:	2b01      	cmp	r3, #1
 8018fc0:	d105      	bne.n	8018fce <transmit_data+0x42>
			len++;
 8018fc2:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8018fc6:	3301      	adds	r3, #1
 8018fc8:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
 8018fcc:	e7eb      	b.n	8018fa6 <transmit_data+0x1a>
		}
		else{
			if(len>0){
 8018fce:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	d0e7      	beq.n	8018fa6 <transmit_data+0x1a>
				send_tcp(*sock,(char*)buff,len);
 8018fd6:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8018fe0:	f107 0108 	add.w	r1, r7, #8
 8018fe4:	4618      	mov	r0, r3
 8018fe6:	f000 f803 	bl	8018ff0 <send_tcp>
		if(xQueueReceive(shell_queue_send,buff+len,(TickType_t)100) == pdPASS){
 8018fea:	e7dc      	b.n	8018fa6 <transmit_data+0x1a>
 8018fec:	200120d4 	.word	0x200120d4

08018ff0 <send_tcp>:
			}
		}
	}
}
static void send_tcp(const int sock,char* buff,uint16_t len){
 8018ff0:	b580      	push	{r7, lr}
 8018ff2:	b084      	sub	sp, #16
 8018ff4:	af00      	add	r7, sp, #0
 8018ff6:	60f8      	str	r0, [r7, #12]
 8018ff8:	60b9      	str	r1, [r7, #8]
 8018ffa:	4613      	mov	r3, r2
 8018ffc:	80fb      	strh	r3, [r7, #6]
    xSemaphoreTake(tranmiter_semphr,portMAX_DELAY);
 8018ffe:	4b0c      	ldr	r3, [pc, #48]	; (8019030 <send_tcp+0x40>)
 8019000:	681b      	ldr	r3, [r3, #0]
 8019002:	f04f 31ff 	mov.w	r1, #4294967295
 8019006:	4618      	mov	r0, r3
 8019008:	f7ed fd1c 	bl	8006a44 <xQueueSemaphoreTake>
    send(sock, buff,len, 0);
 801900c:	88fa      	ldrh	r2, [r7, #6]
 801900e:	2300      	movs	r3, #0
 8019010:	68b9      	ldr	r1, [r7, #8]
 8019012:	68f8      	ldr	r0, [r7, #12]
 8019014:	f7f3 fa32 	bl	800c47c <lwip_send>
    xSemaphoreGive(tranmiter_semphr);
 8019018:	4b05      	ldr	r3, [pc, #20]	; (8019030 <send_tcp+0x40>)
 801901a:	6818      	ldr	r0, [r3, #0]
 801901c:	2300      	movs	r3, #0
 801901e:	2200      	movs	r2, #0
 8019020:	2100      	movs	r1, #0
 8019022:	f7ed fa09 	bl	8006438 <xQueueGenericSend>
}
 8019026:	bf00      	nop
 8019028:	3710      	adds	r7, #16
 801902a:	46bd      	mov	sp, r7
 801902c:	bd80      	pop	{r7, pc}
 801902e:	bf00      	nop
 8019030:	200120d8 	.word	0x200120d8

08019034 <board_init>:
BSP_GPIO mux_a[4];
BSP_GPIO mux_b[4];

extern SPI_HandleTypeDef hspi1;

void board_init(){
 8019034:	b580      	push	{r7, lr}
 8019036:	b082      	sub	sp, #8
 8019038:	af00      	add	r7, sp, #0
	gpio_init(&spi1_cs);
 801903a:	4839      	ldr	r0, [pc, #228]	; (8019120 <board_init+0xec>)
 801903c:	f000 f8a6 	bl	801918c <gpio_init>
	gpio_init(&spi2_cs);
 8019040:	4838      	ldr	r0, [pc, #224]	; (8019124 <board_init+0xf0>)
 8019042:	f000 f8a3 	bl	801918c <gpio_init>
	gpio_init(&adc_rs1);
 8019046:	4838      	ldr	r0, [pc, #224]	; (8019128 <board_init+0xf4>)
 8019048:	f000 f8a0 	bl	801918c <gpio_init>
	gpio_init(&adc_busy1);
 801904c:	4837      	ldr	r0, [pc, #220]	; (801912c <board_init+0xf8>)
 801904e:	f000 f89d 	bl	801918c <gpio_init>
	gpio_init(&adc_cnv1);
 8019052:	4837      	ldr	r0, [pc, #220]	; (8019130 <board_init+0xfc>)
 8019054:	f000 f89a 	bl	801918c <gpio_init>
	gpio_init(&adc_rs2);
 8019058:	4836      	ldr	r0, [pc, #216]	; (8019134 <board_init+0x100>)
 801905a:	f000 f897 	bl	801918c <gpio_init>
	gpio_init(&adc_busy2);
 801905e:	4836      	ldr	r0, [pc, #216]	; (8019138 <board_init+0x104>)
 8019060:	f000 f894 	bl	801918c <gpio_init>
	gpio_init(&adc_cnv2);
 8019064:	4835      	ldr	r0, [pc, #212]	; (801913c <board_init+0x108>)
 8019066:	f000 f891 	bl	801918c <gpio_init>
	spi_init(&spi1, &hspi1,&spi1_cs);
 801906a:	4a2d      	ldr	r2, [pc, #180]	; (8019120 <board_init+0xec>)
 801906c:	4934      	ldr	r1, [pc, #208]	; (8019140 <board_init+0x10c>)
 801906e:	4835      	ldr	r0, [pc, #212]	; (8019144 <board_init+0x110>)
 8019070:	f000 f8bd 	bl	80191ee <spi_init>
	spi_init(&spi2, &hspi1,&spi2_cs);
 8019074:	4a2b      	ldr	r2, [pc, #172]	; (8019124 <board_init+0xf0>)
 8019076:	4932      	ldr	r1, [pc, #200]	; (8019140 <board_init+0x10c>)
 8019078:	4833      	ldr	r0, [pc, #204]	; (8019148 <board_init+0x114>)
 801907a:	f000 f8b8 	bl	80191ee <spi_init>

	mux_a[0].p_driver = MUX_A1_GPIO_Port;
 801907e:	4b33      	ldr	r3, [pc, #204]	; (801914c <board_init+0x118>)
 8019080:	4a33      	ldr	r2, [pc, #204]	; (8019150 <board_init+0x11c>)
 8019082:	601a      	str	r2, [r3, #0]
	mux_a[0].pin = MUX_A1_Pin;
 8019084:	4b31      	ldr	r3, [pc, #196]	; (801914c <board_init+0x118>)
 8019086:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801908a:	809a      	strh	r2, [r3, #4]

	mux_a[1].p_driver = MUX_A2_GPIO_Port;
 801908c:	4b2f      	ldr	r3, [pc, #188]	; (801914c <board_init+0x118>)
 801908e:	4a30      	ldr	r2, [pc, #192]	; (8019150 <board_init+0x11c>)
 8019090:	609a      	str	r2, [r3, #8]
	mux_a[1].pin = MUX_A2_Pin;
 8019092:	4b2e      	ldr	r3, [pc, #184]	; (801914c <board_init+0x118>)
 8019094:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019098:	819a      	strh	r2, [r3, #12]

	mux_a[2].p_driver = MUX_A3_GPIO_Port;
 801909a:	4b2c      	ldr	r3, [pc, #176]	; (801914c <board_init+0x118>)
 801909c:	4a2d      	ldr	r2, [pc, #180]	; (8019154 <board_init+0x120>)
 801909e:	611a      	str	r2, [r3, #16]
	mux_a[2].pin = MUX_A3_Pin;
 80190a0:	4b2a      	ldr	r3, [pc, #168]	; (801914c <board_init+0x118>)
 80190a2:	2202      	movs	r2, #2
 80190a4:	829a      	strh	r2, [r3, #20]

	mux_a[3].p_driver = MUX_A4_GPIO_Port;
 80190a6:	4b29      	ldr	r3, [pc, #164]	; (801914c <board_init+0x118>)
 80190a8:	4a2b      	ldr	r2, [pc, #172]	; (8019158 <board_init+0x124>)
 80190aa:	619a      	str	r2, [r3, #24]
	mux_a[3].pin = MUX_A4_Pin;
 80190ac:	4b27      	ldr	r3, [pc, #156]	; (801914c <board_init+0x118>)
 80190ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80190b2:	839a      	strh	r2, [r3, #28]

	mux_b[0].p_driver = MUX_B1_GPIO_Port;
 80190b4:	4b29      	ldr	r3, [pc, #164]	; (801915c <board_init+0x128>)
 80190b6:	4a26      	ldr	r2, [pc, #152]	; (8019150 <board_init+0x11c>)
 80190b8:	601a      	str	r2, [r3, #0]
	mux_b[0].pin = MUX_B1_Pin;
 80190ba:	4b28      	ldr	r3, [pc, #160]	; (801915c <board_init+0x128>)
 80190bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80190c0:	809a      	strh	r2, [r3, #4]

	mux_b[1].p_driver = MUX_B2_GPIO_Port;
 80190c2:	4b26      	ldr	r3, [pc, #152]	; (801915c <board_init+0x128>)
 80190c4:	4a23      	ldr	r2, [pc, #140]	; (8019154 <board_init+0x120>)
 80190c6:	609a      	str	r2, [r3, #8]
	mux_b[1].pin = MUX_B2_Pin;
 80190c8:	4b24      	ldr	r3, [pc, #144]	; (801915c <board_init+0x128>)
 80190ca:	2201      	movs	r2, #1
 80190cc:	819a      	strh	r2, [r3, #12]

	mux_b[2].p_driver = MUX_B3_GPIO_Port;
 80190ce:	4b23      	ldr	r3, [pc, #140]	; (801915c <board_init+0x128>)
 80190d0:	4a21      	ldr	r2, [pc, #132]	; (8019158 <board_init+0x124>)
 80190d2:	611a      	str	r2, [r3, #16]
	mux_b[2].pin = MUX_B3_Pin;
 80190d4:	4b21      	ldr	r3, [pc, #132]	; (801915c <board_init+0x128>)
 80190d6:	2280      	movs	r2, #128	; 0x80
 80190d8:	829a      	strh	r2, [r3, #20]

	mux_b[3].p_driver = MUX_B4_GPIO_Port;
 80190da:	4b20      	ldr	r3, [pc, #128]	; (801915c <board_init+0x128>)
 80190dc:	4a1e      	ldr	r2, [pc, #120]	; (8019158 <board_init+0x124>)
 80190de:	619a      	str	r2, [r3, #24]
	mux_b[3].pin = MUX_B4_Pin;
 80190e0:	4b1e      	ldr	r3, [pc, #120]	; (801915c <board_init+0x128>)
 80190e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80190e6:	839a      	strh	r2, [r3, #28]

	for(uint16_t i = 0;i<4;i++){
 80190e8:	2300      	movs	r3, #0
 80190ea:	80fb      	strh	r3, [r7, #6]
 80190ec:	e010      	b.n	8019110 <board_init+0xdc>
		gpio_init(&mux_a[i]);
 80190ee:	88fb      	ldrh	r3, [r7, #6]
 80190f0:	00db      	lsls	r3, r3, #3
 80190f2:	4a16      	ldr	r2, [pc, #88]	; (801914c <board_init+0x118>)
 80190f4:	4413      	add	r3, r2
 80190f6:	4618      	mov	r0, r3
 80190f8:	f000 f848 	bl	801918c <gpio_init>
		gpio_init(&mux_b[i]);
 80190fc:	88fb      	ldrh	r3, [r7, #6]
 80190fe:	00db      	lsls	r3, r3, #3
 8019100:	4a16      	ldr	r2, [pc, #88]	; (801915c <board_init+0x128>)
 8019102:	4413      	add	r3, r2
 8019104:	4618      	mov	r0, r3
 8019106:	f000 f841 	bl	801918c <gpio_init>
	for(uint16_t i = 0;i<4;i++){
 801910a:	88fb      	ldrh	r3, [r7, #6]
 801910c:	3301      	adds	r3, #1
 801910e:	80fb      	strh	r3, [r7, #6]
 8019110:	88fb      	ldrh	r3, [r7, #6]
 8019112:	2b03      	cmp	r3, #3
 8019114:	d9eb      	bls.n	80190ee <board_init+0xba>
	}
}
 8019116:	bf00      	nop
 8019118:	bf00      	nop
 801911a:	3708      	adds	r7, #8
 801911c:	46bd      	mov	sp, r7
 801911e:	bd80      	pop	{r7, pc}
 8019120:	200000a4 	.word	0x200000a4
 8019124:	200000ac 	.word	0x200000ac
 8019128:	200000b4 	.word	0x200000b4
 801912c:	200000bc 	.word	0x200000bc
 8019130:	200000c4 	.word	0x200000c4
 8019134:	200000cc 	.word	0x200000cc
 8019138:	200000d4 	.word	0x200000d4
 801913c:	200000dc 	.word	0x200000dc
 8019140:	2000b63c 	.word	0x2000b63c
 8019144:	2001212c 	.word	0x2001212c
 8019148:	20012104 	.word	0x20012104
 801914c:	200120e4 	.word	0x200120e4
 8019150:	40021400 	.word	0x40021400
 8019154:	40021800 	.word	0x40021800
 8019158:	40021000 	.word	0x40021000
 801915c:	2001210c 	.word	0x2001210c

08019160 <bsp_delay_ms>:
void board_deinit(){

}
void bsp_delay_ms(unsigned long ms){
 8019160:	b580      	push	{r7, lr}
 8019162:	b082      	sub	sp, #8
 8019164:	af00      	add	r7, sp, #0
 8019166:	6078      	str	r0, [r7, #4]
#if RTOS
	vTaskDelay(pdMS_TO_TICKS(ms));
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801916e:	fb02 f303 	mul.w	r3, r2, r3
 8019172:	4a05      	ldr	r2, [pc, #20]	; (8019188 <bsp_delay_ms+0x28>)
 8019174:	fba2 2303 	umull	r2, r3, r2, r3
 8019178:	099b      	lsrs	r3, r3, #6
 801917a:	4618      	mov	r0, r3
 801917c:	f7ee fa28 	bl	80075d0 <vTaskDelay>
#else
	__HAL_TIM_SET_COUNTER(&htim1,0);
	while(__HAL_TIM_GET_COUNTER(&htim1) < ms*1000);
#endif
}
 8019180:	bf00      	nop
 8019182:	3708      	adds	r7, #8
 8019184:	46bd      	mov	sp, r7
 8019186:	bd80      	pop	{r7, pc}
 8019188:	10624dd3 	.word	0x10624dd3

0801918c <gpio_init>:


#include "gpio.h"


int gpio_init(BSP_GPIO *p_gpio){
 801918c:	b480      	push	{r7}
 801918e:	b083      	sub	sp, #12
 8019190:	af00      	add	r7, sp, #0
 8019192:	6078      	str	r0, [r7, #4]
	return 0;
 8019194:	2300      	movs	r3, #0
}
 8019196:	4618      	mov	r0, r3
 8019198:	370c      	adds	r7, #12
 801919a:	46bd      	mov	sp, r7
 801919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191a0:	4770      	bx	lr

080191a2 <gpio_write_pin>:
int gpio_write_pin(BSP_GPIO *p_gpio,BSP_GPIO_STATE state){
 80191a2:	b580      	push	{r7, lr}
 80191a4:	b082      	sub	sp, #8
 80191a6:	af00      	add	r7, sp, #0
 80191a8:	6078      	str	r0, [r7, #4]
 80191aa:	460b      	mov	r3, r1
 80191ac:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(p_gpio->p_driver,p_gpio->pin,(GPIO_PinState)state);
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	6818      	ldr	r0, [r3, #0]
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	889b      	ldrh	r3, [r3, #4]
 80191b6:	78fa      	ldrb	r2, [r7, #3]
 80191b8:	4619      	mov	r1, r3
 80191ba:	f7e9 fee5 	bl	8002f88 <HAL_GPIO_WritePin>
	return 0;
 80191be:	2300      	movs	r3, #0
}
 80191c0:	4618      	mov	r0, r3
 80191c2:	3708      	adds	r7, #8
 80191c4:	46bd      	mov	sp, r7
 80191c6:	bd80      	pop	{r7, pc}

080191c8 <gpio_read_pin>:
BSP_GPIO_STATE gpio_read_pin(BSP_GPIO *p_gpio){
 80191c8:	b580      	push	{r7, lr}
 80191ca:	b084      	sub	sp, #16
 80191cc:	af00      	add	r7, sp, #0
 80191ce:	6078      	str	r0, [r7, #4]
	BSP_GPIO_STATE state = (BSP_GPIO_STATE)HAL_GPIO_ReadPin(p_gpio->p_driver,p_gpio->pin);
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	681a      	ldr	r2, [r3, #0]
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	889b      	ldrh	r3, [r3, #4]
 80191d8:	4619      	mov	r1, r3
 80191da:	4610      	mov	r0, r2
 80191dc:	f7e9 febc 	bl	8002f58 <HAL_GPIO_ReadPin>
 80191e0:	4603      	mov	r3, r0
 80191e2:	73fb      	strb	r3, [r7, #15]
	return state;
 80191e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80191e6:	4618      	mov	r0, r3
 80191e8:	3710      	adds	r7, #16
 80191ea:	46bd      	mov	sp, r7
 80191ec:	bd80      	pop	{r7, pc}

080191ee <spi_init>:
 */
#include "spi.h"



void spi_init(BSP_SPI *spi, SPI_HandleTypeDef *driver,BSP_GPIO *cs_pin){
 80191ee:	b480      	push	{r7}
 80191f0:	b085      	sub	sp, #20
 80191f2:	af00      	add	r7, sp, #0
 80191f4:	60f8      	str	r0, [r7, #12]
 80191f6:	60b9      	str	r1, [r7, #8]
 80191f8:	607a      	str	r2, [r7, #4]
	spi->p_driver = driver;
 80191fa:	68fb      	ldr	r3, [r7, #12]
 80191fc:	68ba      	ldr	r2, [r7, #8]
 80191fe:	601a      	str	r2, [r3, #0]
	spi->p_cs = cs_pin;
 8019200:	68fb      	ldr	r3, [r7, #12]
 8019202:	687a      	ldr	r2, [r7, #4]
 8019204:	605a      	str	r2, [r3, #4]
}
 8019206:	bf00      	nop
 8019208:	3714      	adds	r7, #20
 801920a:	46bd      	mov	sp, r7
 801920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019210:	4770      	bx	lr

08019212 <spi_write_read>:
void spi_write(BSP_SPI *spi,uint8_t *data,uint16_t len){
	spi_cs_select(spi);
	HAL_SPI_Transmit(spi->p_driver,data, len,1000);
	spi_cs_deselect(spi);
}
uint16_t spi_write_read(BSP_SPI *spi,uint8_t *source,uint8_t *dest,uint16_t len){
 8019212:	b580      	push	{r7, lr}
 8019214:	b088      	sub	sp, #32
 8019216:	af02      	add	r7, sp, #8
 8019218:	60f8      	str	r0, [r7, #12]
 801921a:	60b9      	str	r1, [r7, #8]
 801921c:	607a      	str	r2, [r7, #4]
 801921e:	807b      	strh	r3, [r7, #2]
	spi_cs_select(spi);
 8019220:	68f8      	ldr	r0, [r7, #12]
 8019222:	f000 f814 	bl	801924e <spi_cs_select>
	uint16_t status = HAL_SPI_TransmitReceive(spi->p_driver,source,dest,len,1000);
 8019226:	68fb      	ldr	r3, [r7, #12]
 8019228:	6818      	ldr	r0, [r3, #0]
 801922a:	887b      	ldrh	r3, [r7, #2]
 801922c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019230:	9200      	str	r2, [sp, #0]
 8019232:	687a      	ldr	r2, [r7, #4]
 8019234:	68b9      	ldr	r1, [r7, #8]
 8019236:	f7ea fbdc 	bl	80039f2 <HAL_SPI_TransmitReceive>
 801923a:	4603      	mov	r3, r0
 801923c:	82fb      	strh	r3, [r7, #22]
	spi_cs_deselect(spi);
 801923e:	68f8      	ldr	r0, [r7, #12]
 8019240:	f000 f813 	bl	801926a <spi_cs_deselect>
	return status;
 8019244:	8afb      	ldrh	r3, [r7, #22]
}
 8019246:	4618      	mov	r0, r3
 8019248:	3718      	adds	r7, #24
 801924a:	46bd      	mov	sp, r7
 801924c:	bd80      	pop	{r7, pc}

0801924e <spi_cs_select>:

void spi_cs_select(BSP_SPI *spi){
 801924e:	b580      	push	{r7, lr}
 8019250:	b082      	sub	sp, #8
 8019252:	af00      	add	r7, sp, #0
 8019254:	6078      	str	r0, [r7, #4]
	gpio_write_pin(spi->p_cs,BSP_GPIO_LOW);
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	685b      	ldr	r3, [r3, #4]
 801925a:	2100      	movs	r1, #0
 801925c:	4618      	mov	r0, r3
 801925e:	f7ff ffa0 	bl	80191a2 <gpio_write_pin>
}
 8019262:	bf00      	nop
 8019264:	3708      	adds	r7, #8
 8019266:	46bd      	mov	sp, r7
 8019268:	bd80      	pop	{r7, pc}

0801926a <spi_cs_deselect>:
void spi_cs_deselect(BSP_SPI *spi){
 801926a:	b580      	push	{r7, lr}
 801926c:	b082      	sub	sp, #8
 801926e:	af00      	add	r7, sp, #0
 8019270:	6078      	str	r0, [r7, #4]
	gpio_write_pin(spi->p_cs,BSP_GPIO_HIGH);
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	685b      	ldr	r3, [r3, #4]
 8019276:	2101      	movs	r1, #1
 8019278:	4618      	mov	r0, r3
 801927a:	f7ff ff92 	bl	80191a2 <gpio_write_pin>
}
 801927e:	bf00      	nop
 8019280:	3708      	adds	r7, #8
 8019282:	46bd      	mov	sp, r7
 8019284:	bd80      	pop	{r7, pc}

08019286 <afe_init>:
#define SOFTSPAN_MASK 0b111 // 0x07
#define CHANNEL_MASK 0b111000 // 0x38
#define DATA_MASK 0b111111111111111111000000 // 0xFFFF00


int afe_init(AFE *afe){
 8019286:	b580      	push	{r7, lr}
 8019288:	b084      	sub	sp, #16
 801928a:	af00      	add	r7, sp, #0
 801928c:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0;i<8;i++){
 801928e:	2300      	movs	r3, #0
 8019290:	81fb      	strh	r3, [r7, #14]
 8019292:	e00e      	b.n	80192b2 <afe_init+0x2c>
		afe_create_config_word(i, afe->softSpan, &afe->config_word[i]);
 8019294:	89fb      	ldrh	r3, [r7, #14]
 8019296:	b2d8      	uxtb	r0, r3
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 801929e:	89fb      	ldrh	r3, [r7, #14]
 80192a0:	3338      	adds	r3, #56	; 0x38
 80192a2:	687a      	ldr	r2, [r7, #4]
 80192a4:	4413      	add	r3, r2
 80192a6:	461a      	mov	r2, r3
 80192a8:	f000 f870 	bl	801938c <afe_create_config_word>
	for(uint16_t i = 0;i<8;i++){
 80192ac:	89fb      	ldrh	r3, [r7, #14]
 80192ae:	3301      	adds	r3, #1
 80192b0:	81fb      	strh	r3, [r7, #14]
 80192b2:	89fb      	ldrh	r3, [r7, #14]
 80192b4:	2b07      	cmp	r3, #7
 80192b6:	d9ed      	bls.n	8019294 <afe_init+0xe>
	}
	afe_reset(afe);
 80192b8:	6878      	ldr	r0, [r7, #4]
 80192ba:	f000 f81a 	bl	80192f2 <afe_reset>
	return 0;
 80192be:	2300      	movs	r3, #0
}
 80192c0:	4618      	mov	r0, r3
 80192c2:	3710      	adds	r7, #16
 80192c4:	46bd      	mov	sp, r7
 80192c6:	bd80      	pop	{r7, pc}

080192c8 <afe_start_convert>:
int afe_start_convert(AFE *afe){
 80192c8:	b580      	push	{r7, lr}
 80192ca:	b082      	sub	sp, #8
 80192cc:	af00      	add	r7, sp, #0
 80192ce:	6078      	str	r0, [r7, #4]
	gpio_write_pin(afe->cnv,BSP_GPIO_HIGH);
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	689b      	ldr	r3, [r3, #8]
 80192d4:	2101      	movs	r1, #1
 80192d6:	4618      	mov	r0, r3
 80192d8:	f7ff ff63 	bl	80191a2 <gpio_write_pin>
//	bsp_delay_us(1);
	gpio_write_pin(afe->cnv,BSP_GPIO_LOW);
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	689b      	ldr	r3, [r3, #8]
 80192e0:	2100      	movs	r1, #0
 80192e2:	4618      	mov	r0, r3
 80192e4:	f7ff ff5d 	bl	80191a2 <gpio_write_pin>
	return 0;
 80192e8:	2300      	movs	r3, #0
}
 80192ea:	4618      	mov	r0, r3
 80192ec:	3708      	adds	r7, #8
 80192ee:	46bd      	mov	sp, r7
 80192f0:	bd80      	pop	{r7, pc}

080192f2 <afe_reset>:
int afe_reset(AFE *afe){
 80192f2:	b580      	push	{r7, lr}
 80192f4:	b082      	sub	sp, #8
 80192f6:	af00      	add	r7, sp, #0
 80192f8:	6078      	str	r0, [r7, #4]
	gpio_write_pin(afe->pd,BSP_GPIO_HIGH);
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	685b      	ldr	r3, [r3, #4]
 80192fe:	2101      	movs	r1, #1
 8019300:	4618      	mov	r0, r3
 8019302:	f7ff ff4e 	bl	80191a2 <gpio_write_pin>
	bsp_delay_ms(50);
 8019306:	2032      	movs	r0, #50	; 0x32
 8019308:	f7ff ff2a 	bl	8019160 <bsp_delay_ms>
	gpio_write_pin(afe->pd,BSP_GPIO_LOW);
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	685b      	ldr	r3, [r3, #4]
 8019310:	2100      	movs	r1, #0
 8019312:	4618      	mov	r0, r3
 8019314:	f7ff ff45 	bl	80191a2 <gpio_write_pin>
	return 0;
 8019318:	2300      	movs	r3, #0
}
 801931a:	4618      	mov	r0, r3
 801931c:	3708      	adds	r7, #8
 801931e:	46bd      	mov	sp, r7
 8019320:	bd80      	pop	{r7, pc}

08019322 <afe_busy>:
int afe_power_down(AFE *afe){
	gpio_write_pin(afe->pd,BSP_GPIO_HIGH);
	return 0;
}
int afe_busy(AFE *afe){
 8019322:	b580      	push	{r7, lr}
 8019324:	b082      	sub	sp, #8
 8019326:	af00      	add	r7, sp, #0
 8019328:	6078      	str	r0, [r7, #4]
	return gpio_read_pin(afe->busy);
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	68db      	ldr	r3, [r3, #12]
 801932e:	4618      	mov	r0, r3
 8019330:	f7ff ff4a 	bl	80191c8 <gpio_read_pin>
 8019334:	4603      	mov	r3, r0
}
 8019336:	4618      	mov	r0, r3
 8019338:	3708      	adds	r7, #8
 801933a:	46bd      	mov	sp, r7
 801933c:	bd80      	pop	{r7, pc}

0801933e <afe_read>:
int afe_read(AFE *afe,uint8_t config_word,uint8_t data_array[4]){
 801933e:	b580      	push	{r7, lr}
 8019340:	b086      	sub	sp, #24
 8019342:	af00      	add	r7, sp, #0
 8019344:	60f8      	str	r0, [r7, #12]
 8019346:	460b      	mov	r3, r1
 8019348:	607a      	str	r2, [r7, #4]
 801934a:	72fb      	strb	r3, [r7, #11]
	  uint8_t tx_array[4];
	  memset(tx_array,0,4);
 801934c:	f107 0314 	add.w	r3, r7, #20
 8019350:	2204      	movs	r2, #4
 8019352:	2100      	movs	r1, #0
 8019354:	4618      	mov	r0, r3
 8019356:	f001 f959 	bl	801a60c <memset>
	  tx_array[3] = (uint8_t)(config_word);
 801935a:	7afb      	ldrb	r3, [r7, #11]
 801935c:	75fb      	strb	r3, [r7, #23]
	  afe_start_convert(afe);
 801935e:	68f8      	ldr	r0, [r7, #12]
 8019360:	f7ff ffb2 	bl	80192c8 <afe_start_convert>
	  while(afe_busy(afe));
 8019364:	bf00      	nop
 8019366:	68f8      	ldr	r0, [r7, #12]
 8019368:	f7ff ffdb 	bl	8019322 <afe_busy>
 801936c:	4603      	mov	r3, r0
 801936e:	2b00      	cmp	r3, #0
 8019370:	d1f9      	bne.n	8019366 <afe_read+0x28>
	  return spi_write_read(afe->p_driver,tx_array, data_array, 4);
 8019372:	68fb      	ldr	r3, [r7, #12]
 8019374:	6818      	ldr	r0, [r3, #0]
 8019376:	f107 0114 	add.w	r1, r7, #20
 801937a:	2304      	movs	r3, #4
 801937c:	687a      	ldr	r2, [r7, #4]
 801937e:	f7ff ff48 	bl	8019212 <spi_write_read>
 8019382:	4603      	mov	r3, r0
}
 8019384:	4618      	mov	r0, r3
 8019386:	3718      	adds	r7, #24
 8019388:	46bd      	mov	sp, r7
 801938a:	bd80      	pop	{r7, pc}

0801938c <afe_create_config_word>:
		  return 0;
	  }
	  return -1;
}

uint8_t afe_create_config_word(uint8_t channel,AFE_SoftSpan_Code_t softspan,uint8_t *configword){
 801938c:	b480      	push	{r7}
 801938e:	b085      	sub	sp, #20
 8019390:	af00      	add	r7, sp, #0
 8019392:	4603      	mov	r3, r0
 8019394:	603a      	str	r2, [r7, #0]
 8019396:	71fb      	strb	r3, [r7, #7]
 8019398:	460b      	mov	r3, r1
 801939a:	71bb      	strb	r3, [r7, #6]
	*configword = 1<<7  | 0<<6 | channel << 3 | softspan;// ((uint32_t)(config_number & 0x07) << (channel * 3));
 801939c:	79fb      	ldrb	r3, [r7, #7]
 801939e:	00db      	lsls	r3, r3, #3
 80193a0:	b2da      	uxtb	r2, r3
 80193a2:	79bb      	ldrb	r3, [r7, #6]
 80193a4:	4313      	orrs	r3, r2
 80193a6:	b2db      	uxtb	r3, r3
 80193a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80193ac:	b2da      	uxtb	r2, r3
 80193ae:	683b      	ldr	r3, [r7, #0]
 80193b0:	701a      	strb	r2, [r3, #0]
	uint8_t res = *configword;
 80193b2:	683b      	ldr	r3, [r7, #0]
 80193b4:	781b      	ldrb	r3, [r3, #0]
 80193b6:	73fb      	strb	r3, [r7, #15]
	return res;
 80193b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80193ba:	4618      	mov	r0, r3
 80193bc:	3714      	adds	r7, #20
 80193be:	46bd      	mov	sp, r7
 80193c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193c4:	4770      	bx	lr

080193c6 <afe_convert>:
int afe_convert(AFE *afe,uint8_t data[4]){
 80193c6:	b480      	push	{r7}
 80193c8:	b085      	sub	sp, #20
 80193ca:	af00      	add	r7, sp, #0
 80193cc:	6078      	str	r0, [r7, #4]
 80193ce:	6039      	str	r1, [r7, #0]
	  uint32_t data32 = (uint32_t)data[0] << 16 | (uint32_t)data[1] << 8 | data[2];
 80193d0:	683b      	ldr	r3, [r7, #0]
 80193d2:	781b      	ldrb	r3, [r3, #0]
 80193d4:	041a      	lsls	r2, r3, #16
 80193d6:	683b      	ldr	r3, [r7, #0]
 80193d8:	3301      	adds	r3, #1
 80193da:	781b      	ldrb	r3, [r3, #0]
 80193dc:	021b      	lsls	r3, r3, #8
 80193de:	4313      	orrs	r3, r2
 80193e0:	683a      	ldr	r2, [r7, #0]
 80193e2:	3202      	adds	r2, #2
 80193e4:	7812      	ldrb	r2, [r2, #0]
 80193e6:	4313      	orrs	r3, r2
 80193e8:	60fb      	str	r3, [r7, #12]
	  afe->data_type.softSpan = data32 & SOFTSPAN_MASK;
 80193ea:	68fb      	ldr	r3, [r7, #12]
 80193ec:	b2db      	uxtb	r3, r3
 80193ee:	f003 0307 	and.w	r3, r3, #7
 80193f2:	b2da      	uxtb	r2, r3
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	  afe->data_type.channel = (data32 & CHANNEL_MASK) >> 3;
 80193fa:	68fb      	ldr	r3, [r7, #12]
 80193fc:	08db      	lsrs	r3, r3, #3
 80193fe:	b2db      	uxtb	r3, r3
 8019400:	f003 0307 	and.w	r3, r3, #7
 8019404:	b2da      	uxtb	r2, r3
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  afe->data_type.value = (data32 & DATA_MASK) >> 6;
 801940c:	68fb      	ldr	r3, [r7, #12]
 801940e:	099b      	lsrs	r3, r3, #6
 8019410:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	635a      	str	r2, [r3, #52]	; 0x34
	  afe->data_channel[afe->data_type.channel] = afe->data_type.value;
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801941e:	461a      	mov	r2, r3
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	3204      	adds	r2, #4
 8019428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  return 0;
 801942c:	2300      	movs	r3, #0
}
 801942e:	4618      	mov	r0, r3
 8019430:	3714      	adds	r7, #20
 8019432:	46bd      	mov	sp, r7
 8019434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019438:	4770      	bx	lr

0801943a <fifo_create>:
/************************** Variable Definitions ******************************/

/********************* Exported Function Definitions **************************/

uint8_t fifo_create(fifo_t* p_fifo, void * buf, uint16_t count, size_t size)
{
 801943a:	b480      	push	{r7}
 801943c:	b085      	sub	sp, #20
 801943e:	af00      	add	r7, sp, #0
 8019440:	60f8      	str	r0, [r7, #12]
 8019442:	60b9      	str	r1, [r7, #8]
 8019444:	603b      	str	r3, [r7, #0]
 8019446:	4613      	mov	r3, r2
 8019448:	80fb      	strh	r3, [r7, #6]
    // Sanity check for memory and element sizes
    if (buf != NULL && p_fifo != NULL && count != 0) {
 801944a:	68bb      	ldr	r3, [r7, #8]
 801944c:	2b00      	cmp	r3, #0
 801944e:	d01c      	beq.n	801948a <fifo_create+0x50>
 8019450:	68fb      	ldr	r3, [r7, #12]
 8019452:	2b00      	cmp	r3, #0
 8019454:	d019      	beq.n	801948a <fifo_create+0x50>
 8019456:	88fb      	ldrh	r3, [r7, #6]
 8019458:	2b00      	cmp	r3, #0
 801945a:	d016      	beq.n	801948a <fifo_create+0x50>
        p_fifo->itemspace = buf;
 801945c:	68fb      	ldr	r3, [r7, #12]
 801945e:	68ba      	ldr	r2, [r7, #8]
 8019460:	601a      	str	r2, [r3, #0]
        p_fifo->itemsize = size;
 8019462:	68fb      	ldr	r3, [r7, #12]
 8019464:	683a      	ldr	r2, [r7, #0]
 8019466:	605a      	str	r2, [r3, #4]
        p_fifo->allocatedbytes = count * size;
 8019468:	88fb      	ldrh	r3, [r7, #6]
 801946a:	683a      	ldr	r2, [r7, #0]
 801946c:	fb02 f203 	mul.w	r2, r2, r3
 8019470:	68fb      	ldr	r3, [r7, #12]
 8019472:	609a      	str	r2, [r3, #8]
        p_fifo->readoffset = 0;
 8019474:	68fb      	ldr	r3, [r7, #12]
 8019476:	2200      	movs	r2, #0
 8019478:	819a      	strh	r2, [r3, #12]
        p_fifo->writeoffset = 0;
 801947a:	68fb      	ldr	r3, [r7, #12]
 801947c:	2200      	movs	r2, #0
 801947e:	81da      	strh	r2, [r3, #14]
        p_fifo->storedbytes = 0;
 8019480:	68fb      	ldr	r3, [r7, #12]
 8019482:	2200      	movs	r2, #0
 8019484:	611a      	str	r2, [r3, #16]
        return 1;
 8019486:	2301      	movs	r3, #1
 8019488:	e000      	b.n	801948c <fifo_create+0x52>
    }
    return 0;
 801948a:	2300      	movs	r3, #0
}
 801948c:	4618      	mov	r0, r3
 801948e:	3714      	adds	r7, #20
 8019490:	46bd      	mov	sp, r7
 8019492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019496:	4770      	bx	lr

08019498 <fifo_add>:

uint8_t fifo_add(fifo_t* p_fifo, const void * item)
{
 8019498:	b580      	push	{r7, lr}
 801949a:	b082      	sub	sp, #8
 801949c:	af00      	add	r7, sp, #0
 801949e:	6078      	str	r0, [r7, #4]
 80194a0:	6039      	str	r1, [r7, #0]
    if (!fifo_is_full(p_fifo)) {
 80194a2:	6878      	ldr	r0, [r7, #4]
 80194a4:	f000 f832 	bl	801950c <fifo_is_full>
 80194a8:	4603      	mov	r3, r0
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d10c      	bne.n	80194c8 <fifo_add+0x30>
        fifo_copy_to(p_fifo, item);
 80194ae:	6839      	ldr	r1, [r7, #0]
 80194b0:	6878      	ldr	r0, [r7, #4]
 80194b2:	f000 f876 	bl	80195a2 <fifo_copy_to>
        p_fifo->storedbytes += p_fifo->itemsize;
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	691a      	ldr	r2, [r3, #16]
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	685b      	ldr	r3, [r3, #4]
 80194be:	441a      	add	r2, r3
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	611a      	str	r2, [r3, #16]
        return 1;
 80194c4:	2301      	movs	r3, #1
 80194c6:	e000      	b.n	80194ca <fifo_add+0x32>
    } else {
        return 0;
 80194c8:	2300      	movs	r3, #0
    }
}
 80194ca:	4618      	mov	r0, r3
 80194cc:	3708      	adds	r7, #8
 80194ce:	46bd      	mov	sp, r7
 80194d0:	bd80      	pop	{r7, pc}

080194d2 <fifo_get>:

uint8_t fifo_get(fifo_t* p_fifo, void * item)
{
 80194d2:	b580      	push	{r7, lr}
 80194d4:	b082      	sub	sp, #8
 80194d6:	af00      	add	r7, sp, #0
 80194d8:	6078      	str	r0, [r7, #4]
 80194da:	6039      	str	r1, [r7, #0]
    if (!fifo_is_empty(p_fifo)) {
 80194dc:	6878      	ldr	r0, [r7, #4]
 80194de:	f000 f828 	bl	8019532 <fifo_is_empty>
 80194e2:	4603      	mov	r3, r0
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d10c      	bne.n	8019502 <fifo_get+0x30>
        fifo_copy_from(p_fifo, item);
 80194e8:	6839      	ldr	r1, [r7, #0]
 80194ea:	6878      	ldr	r0, [r7, #4]
 80194ec:	f000 f832 	bl	8019554 <fifo_copy_from>
        p_fifo->storedbytes -= p_fifo->itemsize;
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	691a      	ldr	r2, [r3, #16]
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	685b      	ldr	r3, [r3, #4]
 80194f8:	1ad2      	subs	r2, r2, r3
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	611a      	str	r2, [r3, #16]
        return 1;
 80194fe:	2301      	movs	r3, #1
 8019500:	e000      	b.n	8019504 <fifo_get+0x32>
    } else {
        return 0;
 8019502:	2300      	movs	r3, #0
    }
}
 8019504:	4618      	mov	r0, r3
 8019506:	3708      	adds	r7, #8
 8019508:	46bd      	mov	sp, r7
 801950a:	bd80      	pop	{r7, pc}

0801950c <fifo_is_full>:
    }

}

uint8_t fifo_is_full(fifo_t* p_fifo)
{
 801950c:	b480      	push	{r7}
 801950e:	b083      	sub	sp, #12
 8019510:	af00      	add	r7, sp, #0
 8019512:	6078      	str	r0, [r7, #4]
    if (p_fifo->storedbytes >= p_fifo->allocatedbytes)
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	691a      	ldr	r2, [r3, #16]
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	689b      	ldr	r3, [r3, #8]
 801951c:	429a      	cmp	r2, r3
 801951e:	d301      	bcc.n	8019524 <fifo_is_full+0x18>
        return 1;
 8019520:	2301      	movs	r3, #1
 8019522:	e000      	b.n	8019526 <fifo_is_full+0x1a>
    else
        return 0;
 8019524:	2300      	movs	r3, #0
}
 8019526:	4618      	mov	r0, r3
 8019528:	370c      	adds	r7, #12
 801952a:	46bd      	mov	sp, r7
 801952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019530:	4770      	bx	lr

08019532 <fifo_is_empty>:

uint8_t fifo_is_empty(fifo_t* p_fifo)
{
 8019532:	b480      	push	{r7}
 8019534:	b083      	sub	sp, #12
 8019536:	af00      	add	r7, sp, #0
 8019538:	6078      	str	r0, [r7, #4]
    if (p_fifo->storedbytes == 0)
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	691b      	ldr	r3, [r3, #16]
 801953e:	2b00      	cmp	r3, #0
 8019540:	d101      	bne.n	8019546 <fifo_is_empty+0x14>
        return 1;
 8019542:	2301      	movs	r3, #1
 8019544:	e000      	b.n	8019548 <fifo_is_empty+0x16>
    else
        return 0;
 8019546:	2300      	movs	r3, #0
}
 8019548:	4618      	mov	r0, r3
 801954a:	370c      	adds	r7, #12
 801954c:	46bd      	mov	sp, r7
 801954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019552:	4770      	bx	lr

08019554 <fifo_copy_from>:
    return 0;
}

/********************* Internal Function Definitions *************************/
static void fifo_copy_from(fifo_t* p_fifo, void * item)
{
 8019554:	b580      	push	{r7, lr}
 8019556:	b082      	sub	sp, #8
 8019558:	af00      	add	r7, sp, #0
 801955a:	6078      	str	r0, [r7, #4]
 801955c:	6039      	str	r1, [r7, #0]
    memcpy(item, (uint8_t*)p_fifo->itemspace + p_fifo->readoffset, p_fifo->itemsize);
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	687a      	ldr	r2, [r7, #4]
 8019564:	8992      	ldrh	r2, [r2, #12]
 8019566:	1899      	adds	r1, r3, r2
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	685b      	ldr	r3, [r3, #4]
 801956c:	461a      	mov	r2, r3
 801956e:	6838      	ldr	r0, [r7, #0]
 8019570:	f001 f824 	bl	801a5bc <memcpy>
    p_fifo->readoffset += p_fifo->itemsize;
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	899a      	ldrh	r2, [r3, #12]
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	685b      	ldr	r3, [r3, #4]
 801957c:	b29b      	uxth	r3, r3
 801957e:	4413      	add	r3, r2
 8019580:	b29a      	uxth	r2, r3
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	819a      	strh	r2, [r3, #12]
    if (p_fifo->readoffset >= p_fifo->allocatedbytes) {
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	899b      	ldrh	r3, [r3, #12]
 801958a:	461a      	mov	r2, r3
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	689b      	ldr	r3, [r3, #8]
 8019590:	429a      	cmp	r2, r3
 8019592:	d302      	bcc.n	801959a <fifo_copy_from+0x46>
        p_fifo->readoffset = 0;
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	2200      	movs	r2, #0
 8019598:	819a      	strh	r2, [r3, #12]
    }
}
 801959a:	bf00      	nop
 801959c:	3708      	adds	r7, #8
 801959e:	46bd      	mov	sp, r7
 80195a0:	bd80      	pop	{r7, pc}

080195a2 <fifo_copy_to>:

static void fifo_copy_to(fifo_t* p_fifo, const void *item)
{
 80195a2:	b580      	push	{r7, lr}
 80195a4:	b082      	sub	sp, #8
 80195a6:	af00      	add	r7, sp, #0
 80195a8:	6078      	str	r0, [r7, #4]
 80195aa:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)p_fifo->itemspace + p_fifo->writeoffset, item, p_fifo->itemsize);
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	687a      	ldr	r2, [r7, #4]
 80195b2:	89d2      	ldrh	r2, [r2, #14]
 80195b4:	1898      	adds	r0, r3, r2
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	685b      	ldr	r3, [r3, #4]
 80195ba:	461a      	mov	r2, r3
 80195bc:	6839      	ldr	r1, [r7, #0]
 80195be:	f000 fffd 	bl	801a5bc <memcpy>
    p_fifo->writeoffset += p_fifo->itemsize;
 80195c2:	687b      	ldr	r3, [r7, #4]
 80195c4:	89da      	ldrh	r2, [r3, #14]
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	685b      	ldr	r3, [r3, #4]
 80195ca:	b29b      	uxth	r3, r3
 80195cc:	4413      	add	r3, r2
 80195ce:	b29a      	uxth	r2, r3
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	81da      	strh	r2, [r3, #14]
    if (p_fifo->writeoffset >= p_fifo->allocatedbytes) {
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	89db      	ldrh	r3, [r3, #14]
 80195d8:	461a      	mov	r2, r3
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	689b      	ldr	r3, [r3, #8]
 80195de:	429a      	cmp	r2, r3
 80195e0:	d302      	bcc.n	80195e8 <fifo_copy_to+0x46>
        p_fifo->writeoffset = 0;
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	2200      	movs	r2, #0
 80195e6:	81da      	strh	r2, [r3, #14]
    }
}
 80195e8:	bf00      	nop
 80195ea:	3708      	adds	r7, #8
 80195ec:	46bd      	mov	sp, r7
 80195ee:	bd80      	pop	{r7, pc}

080195f0 <retarget_init>:
/**
 * @brief      Initialize FIFO
 *
 * @return     { description_of_the_return_value }
 */
int retarget_init(void) {
 80195f0:	b580      	push	{r7, lr}
 80195f2:	af00      	add	r7, sp, #0
  fifo_create( &shell_fifo,
 80195f4:	2301      	movs	r3, #1
 80195f6:	2280      	movs	r2, #128	; 0x80
 80195f8:	4903      	ldr	r1, [pc, #12]	; (8019608 <retarget_init+0x18>)
 80195fa:	4804      	ldr	r0, [pc, #16]	; (801960c <retarget_init+0x1c>)
 80195fc:	f7ff ff1d 	bl	801943a <fifo_create>
               shell_rx_buffer,
               sizeof(shell_rx_buffer)/sizeof(uint8_t),
               sizeof(uint8_t)
             );

  return 0;
 8019600:	2300      	movs	r3, #0
}
 8019602:	4618      	mov	r0, r3
 8019604:	bd80      	pop	{r7, pc}
 8019606:	bf00      	nop
 8019608:	2000b47c 	.word	0x2000b47c
 801960c:	20012204 	.word	0x20012204

08019610 <serial_get_char>:


int serial_get_char(uint8_t *c) {
 8019610:	b580      	push	{r7, lr}
 8019612:	b084      	sub	sp, #16
 8019614:	af00      	add	r7, sp, #0
 8019616:	6078      	str	r0, [r7, #4]
  uint8_t item = 0;
 8019618:	2300      	movs	r3, #0
 801961a:	73fb      	strb	r3, [r7, #15]

  if (fifo_is_empty(&shell_fifo) == 1) {
 801961c:	480d      	ldr	r0, [pc, #52]	; (8019654 <serial_get_char+0x44>)
 801961e:	f7ff ff88 	bl	8019532 <fifo_is_empty>
 8019622:	4603      	mov	r3, r0
 8019624:	2b01      	cmp	r3, #1
 8019626:	d101      	bne.n	801962c <serial_get_char+0x1c>
    return 0;
 8019628:	2300      	movs	r3, #0
 801962a:	e00e      	b.n	801964a <serial_get_char+0x3a>
  }

  if(fifo_get(&shell_fifo, &item) == 1) {
 801962c:	f107 030f 	add.w	r3, r7, #15
 8019630:	4619      	mov	r1, r3
 8019632:	4808      	ldr	r0, [pc, #32]	; (8019654 <serial_get_char+0x44>)
 8019634:	f7ff ff4d 	bl	80194d2 <fifo_get>
 8019638:	4603      	mov	r3, r0
 801963a:	2b01      	cmp	r3, #1
 801963c:	d104      	bne.n	8019648 <serial_get_char+0x38>
    *c = item;
 801963e:	7bfa      	ldrb	r2, [r7, #15]
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	701a      	strb	r2, [r3, #0]
    return 1;
 8019644:	2301      	movs	r3, #1
 8019646:	e000      	b.n	801964a <serial_get_char+0x3a>
  }

  return 0;
 8019648:	2300      	movs	r3, #0
}
 801964a:	4618      	mov	r0, r3
 801964c:	3710      	adds	r7, #16
 801964e:	46bd      	mov	sp, r7
 8019650:	bd80      	pop	{r7, pc}
 8019652:	bf00      	nop
 8019654:	20012204 	.word	0x20012204

08019658 <__io_getchar>:
#endif
	return ch;
}

uint8_t __io_getchar(void)
{
 8019658:	b580      	push	{r7, lr}
 801965a:	b082      	sub	sp, #8
 801965c:	af00      	add	r7, sp, #0
	uint8_t ch;
  int ret = serial_get_char((uint8_t*)&ch);
 801965e:	1cfb      	adds	r3, r7, #3
 8019660:	4618      	mov	r0, r3
 8019662:	f7ff ffd5 	bl	8019610 <serial_get_char>
 8019666:	6078      	str	r0, [r7, #4]

  return (ret == 1) ? ch : 0;
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	2b01      	cmp	r3, #1
 801966c:	d101      	bne.n	8019672 <__io_getchar+0x1a>
 801966e:	78fb      	ldrb	r3, [r7, #3]
 8019670:	e000      	b.n	8019674 <__io_getchar+0x1c>
 8019672:	2300      	movs	r3, #0
}
 8019674:	4618      	mov	r0, r3
 8019676:	3708      	adds	r7, #8
 8019678:	46bd      	mov	sp, r7
 801967a:	bd80      	pop	{r7, pc}

0801967c <on_uart_data_received>:

void on_uart_data_received(uint8_t ch) {
 801967c:	b580      	push	{r7, lr}
 801967e:	b082      	sub	sp, #8
 8019680:	af00      	add	r7, sp, #0
 8019682:	4603      	mov	r3, r0
 8019684:	71fb      	strb	r3, [r7, #7]
  if(!fifo_add(&shell_fifo, (const void *)&ch)) {
 8019686:	1dfb      	adds	r3, r7, #7
 8019688:	4619      	mov	r1, r3
 801968a:	4803      	ldr	r0, [pc, #12]	; (8019698 <on_uart_data_received+0x1c>)
 801968c:	f7ff ff04 	bl	8019498 <fifo_add>
    //printf("err");
  }
}
 8019690:	bf00      	nop
 8019692:	3708      	adds	r7, #8
 8019694:	46bd      	mov	sp, r7
 8019696:	bd80      	pop	{r7, pc}
 8019698:	20012204 	.word	0x20012204

0801969c <_read>:
    return ch;
}
#elif defined(__GNUC__)

int _read(int file, char *ptr, int len)
{
 801969c:	b590      	push	{r4, r7, lr}
 801969e:	b087      	sub	sp, #28
 80196a0:	af00      	add	r7, sp, #0
 80196a2:	60f8      	str	r0, [r7, #12]
 80196a4:	60b9      	str	r1, [r7, #8]
 80196a6:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80196a8:	2300      	movs	r3, #0
 80196aa:	617b      	str	r3, [r7, #20]
 80196ac:	e009      	b.n	80196c2 <_read+0x26>
    *ptr++ = __io_getchar();
 80196ae:	68bc      	ldr	r4, [r7, #8]
 80196b0:	1c63      	adds	r3, r4, #1
 80196b2:	60bb      	str	r3, [r7, #8]
 80196b4:	f7ff ffd0 	bl	8019658 <__io_getchar>
 80196b8:	4603      	mov	r3, r0
 80196ba:	7023      	strb	r3, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80196bc:	697b      	ldr	r3, [r7, #20]
 80196be:	3301      	adds	r3, #1
 80196c0:	617b      	str	r3, [r7, #20]
 80196c2:	697a      	ldr	r2, [r7, #20]
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	429a      	cmp	r2, r3
 80196c8:	dbf1      	blt.n	80196ae <_read+0x12>
  }

  return len;
 80196ca:	687b      	ldr	r3, [r7, #4]
}
 80196cc:	4618      	mov	r0, r3
 80196ce:	371c      	adds	r7, #28
 80196d0:	46bd      	mov	sp, r7
 80196d2:	bd90      	pop	{r4, r7, pc}

080196d4 <_write>:

int _write(int file, char *ptr, int len)
{
 80196d4:	b580      	push	{r7, lr}
 80196d6:	b086      	sub	sp, #24
 80196d8:	af00      	add	r7, sp, #0
 80196da:	60f8      	str	r0, [r7, #12]
 80196dc:	60b9      	str	r1, [r7, #8]
 80196de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80196e0:	2300      	movs	r3, #0
 80196e2:	617b      	str	r3, [r7, #20]
 80196e4:	e009      	b.n	80196fa <_write+0x26>
	{
		__io_putchar(*ptr++);
 80196e6:	68bb      	ldr	r3, [r7, #8]
 80196e8:	1c5a      	adds	r2, r3, #1
 80196ea:	60ba      	str	r2, [r7, #8]
 80196ec:	781b      	ldrb	r3, [r3, #0]
 80196ee:	4618      	mov	r0, r3
 80196f0:	f7ff fa28 	bl	8018b44 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80196f4:	697b      	ldr	r3, [r7, #20]
 80196f6:	3301      	adds	r3, #1
 80196f8:	617b      	str	r3, [r7, #20]
 80196fa:	697a      	ldr	r2, [r7, #20]
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	429a      	cmp	r2, r3
 8019700:	dbf1      	blt.n	80196e6 <_write+0x12>
	}
  return len;
 8019702:	687b      	ldr	r3, [r7, #4]
}
 8019704:	4618      	mov	r0, r3
 8019706:	3718      	adds	r7, #24
 8019708:	46bd      	mov	sp, r7
 801970a:	bd80      	pop	{r7, pc}

0801970c <SHELL_Init>:
static char g_paramBuffer[SHELL_BUFFER_SIZE];

/********************** Exported Function Definitions *************************/
void SHELL_Init(
    p_shell_context_t context, send_data_cb_t send_cb, recv_data_cb_t recv_cb, printf_data_t shell_printf, char *prompt)
{
 801970c:	b580      	push	{r7, lr}
 801970e:	b084      	sub	sp, #16
 8019710:	af00      	add	r7, sp, #0
 8019712:	60f8      	str	r0, [r7, #12]
 8019714:	60b9      	str	r1, [r7, #8]
 8019716:	607a      	str	r2, [r7, #4]
 8019718:	603b      	str	r3, [r7, #0]
    assert(send_cb != NULL);
 801971a:	68bb      	ldr	r3, [r7, #8]
 801971c:	2b00      	cmp	r3, #0
 801971e:	d105      	bne.n	801972c <SHELL_Init+0x20>
 8019720:	4b1c      	ldr	r3, [pc, #112]	; (8019794 <SHELL_Init+0x88>)
 8019722:	4a1d      	ldr	r2, [pc, #116]	; (8019798 <SHELL_Init+0x8c>)
 8019724:	214d      	movs	r1, #77	; 0x4d
 8019726:	481d      	ldr	r0, [pc, #116]	; (801979c <SHELL_Init+0x90>)
 8019728:	f000 fdd8 	bl	801a2dc <__assert_func>
    assert(recv_cb != NULL);
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	2b00      	cmp	r3, #0
 8019730:	d105      	bne.n	801973e <SHELL_Init+0x32>
 8019732:	4b1b      	ldr	r3, [pc, #108]	; (80197a0 <SHELL_Init+0x94>)
 8019734:	4a18      	ldr	r2, [pc, #96]	; (8019798 <SHELL_Init+0x8c>)
 8019736:	214e      	movs	r1, #78	; 0x4e
 8019738:	4818      	ldr	r0, [pc, #96]	; (801979c <SHELL_Init+0x90>)
 801973a:	f000 fdcf 	bl	801a2dc <__assert_func>
    assert(prompt != NULL);
 801973e:	69bb      	ldr	r3, [r7, #24]
 8019740:	2b00      	cmp	r3, #0
 8019742:	d105      	bne.n	8019750 <SHELL_Init+0x44>
 8019744:	4b17      	ldr	r3, [pc, #92]	; (80197a4 <SHELL_Init+0x98>)
 8019746:	4a14      	ldr	r2, [pc, #80]	; (8019798 <SHELL_Init+0x8c>)
 8019748:	214f      	movs	r1, #79	; 0x4f
 801974a:	4814      	ldr	r0, [pc, #80]	; (801979c <SHELL_Init+0x90>)
 801974c:	f000 fdc6 	bl	801a2dc <__assert_func>
    assert(shell_printf != NULL);
 8019750:	683b      	ldr	r3, [r7, #0]
 8019752:	2b00      	cmp	r3, #0
 8019754:	d105      	bne.n	8019762 <SHELL_Init+0x56>
 8019756:	4b14      	ldr	r3, [pc, #80]	; (80197a8 <SHELL_Init+0x9c>)
 8019758:	4a0f      	ldr	r2, [pc, #60]	; (8019798 <SHELL_Init+0x8c>)
 801975a:	2150      	movs	r1, #80	; 0x50
 801975c:	480f      	ldr	r0, [pc, #60]	; (801979c <SHELL_Init+0x90>)
 801975e:	f000 fdbd 	bl	801a2dc <__assert_func>

    /* Memset for context */
    memset(context, 0, sizeof(shell_context_struct));
 8019762:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8019766:	2100      	movs	r1, #0
 8019768:	68f8      	ldr	r0, [r7, #12]
 801976a:	f000 ff4f 	bl	801a60c <memset>
    context->send_data_func = send_cb;
 801976e:	68fb      	ldr	r3, [r7, #12]
 8019770:	68ba      	ldr	r2, [r7, #8]
 8019772:	649a      	str	r2, [r3, #72]	; 0x48
    context->recv_data_func = recv_cb;
 8019774:	68fb      	ldr	r3, [r7, #12]
 8019776:	687a      	ldr	r2, [r7, #4]
 8019778:	64da      	str	r2, [r3, #76]	; 0x4c
    context->printf_data_func = shell_printf;
 801977a:	68fb      	ldr	r3, [r7, #12]
 801977c:	683a      	ldr	r2, [r7, #0]
 801977e:	651a      	str	r2, [r3, #80]	; 0x50
    context->prompt = prompt;
 8019780:	68fb      	ldr	r3, [r7, #12]
 8019782:	69ba      	ldr	r2, [r7, #24]
 8019784:	601a      	str	r2, [r3, #0]

    SHELL_RegisterCommand(&xHelpCommand);
 8019786:	4809      	ldr	r0, [pc, #36]	; (80197ac <SHELL_Init+0xa0>)
 8019788:	f000 fd72 	bl	801a270 <SHELL_RegisterCommand>
    // SHELL_RegisterCommand(&xExitCommand);
}
 801978c:	bf00      	nop
 801978e:	3710      	adds	r7, #16
 8019790:	46bd      	mov	sp, r7
 8019792:	bd80      	pop	{r7, pc}
 8019794:	0801f310 	.word	0x0801f310
 8019798:	0801f618 	.word	0x0801f618
 801979c:	0801f320 	.word	0x0801f320
 80197a0:	0801f344 	.word	0x0801f344
 80197a4:	0801f354 	.word	0x0801f354
 80197a8:	0801f364 	.word	0x0801f364
 80197ac:	0801f608 	.word	0x0801f608

080197b0 <SHELL_Process>:


void SHELL_Process(p_shell_context_t context)
{
 80197b0:	b580      	push	{r7, lr}
 80197b2:	b084      	sub	sp, #16
 80197b4:	af00      	add	r7, sp, #0
 80197b6:	6078      	str	r0, [r7, #4]

//   static uint32_t tick = 0;
   static uint8_t first_run  = 1;


    if (!context) {
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	f000 8216 	beq.w	8019bec <SHELL_Process+0x43c>
        return;
    }

    if(first_run == 1) {
 80197c0:	4bad      	ldr	r3, [pc, #692]	; (8019a78 <SHELL_Process+0x2c8>)
 80197c2:	781b      	ldrb	r3, [r3, #0]
 80197c4:	2b01      	cmp	r3, #1
 80197c6:	d115      	bne.n	80197f4 <SHELL_Process+0x44>
        context->exit = false;
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	2200      	movs	r2, #0
 80197cc:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
        context->printf_data_func("\r\nSHELL (build: %s)\r\n", __DATE__);
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80197d4:	49a9      	ldr	r1, [pc, #676]	; (8019a7c <SHELL_Process+0x2cc>)
 80197d6:	48aa      	ldr	r0, [pc, #680]	; (8019a80 <SHELL_Process+0x2d0>)
 80197d8:	4798      	blx	r3
        context->printf_data_func("Copyright (c) 2022 Technology\r\n");
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80197de:	48a9      	ldr	r0, [pc, #676]	; (8019a84 <SHELL_Process+0x2d4>)
 80197e0:	4798      	blx	r3
        context->printf_data_func(context->prompt);
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80197e6:	687a      	ldr	r2, [r7, #4]
 80197e8:	6812      	ldr	r2, [r2, #0]
 80197ea:	4610      	mov	r0, r2
 80197ec:	4798      	blx	r3
        first_run = 0;
 80197ee:	4ba2      	ldr	r3, [pc, #648]	; (8019a78 <SHELL_Process+0x2c8>)
 80197f0:	2200      	movs	r2, #0
 80197f2:	701a      	strb	r2, [r3, #0]
    }


     vTaskDelay( 20 / portTICK_PERIOD_MS );  /* sleep a while */
 80197f4:	2014      	movs	r0, #20
 80197f6:	f7ed feeb 	bl	80075d0 <vTaskDelay>
//        return;
//    }

//    tick = xTaskGetTickCount();

    if (context->exit) {
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8019800:	2b00      	cmp	r3, #0
 8019802:	f040 81f5 	bne.w	8019bf0 <SHELL_Process+0x440>
        return;
    }
    ch = GetChar(context);
 8019806:	6878      	ldr	r0, [r7, #4]
 8019808:	f000 fd58 	bl	801a2bc <GetChar>
 801980c:	4603      	mov	r3, r0
 801980e:	72fb      	strb	r3, [r7, #11]
    if(ch == 0) {
 8019810:	7afb      	ldrb	r3, [r7, #11]
 8019812:	2b00      	cmp	r3, #0
 8019814:	f000 81ee 	beq.w	8019bf4 <SHELL_Process+0x444>
      return;
    }
    /* Special key */
    if (ch == KEY_ESC) {
 8019818:	7afb      	ldrb	r3, [r7, #11]
 801981a:	2b1b      	cmp	r3, #27
 801981c:	d103      	bne.n	8019826 <SHELL_Process+0x76>
        context->stat = kSHELL_Special;
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	2201      	movs	r2, #1
 8019822:	711a      	strb	r2, [r3, #4]
        return;
 8019824:	e1e9      	b.n	8019bfa <SHELL_Process+0x44a>
    } else if (context->stat == kSHELL_Special) {
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	791b      	ldrb	r3, [r3, #4]
 801982a:	2b01      	cmp	r3, #1
 801982c:	d10a      	bne.n	8019844 <SHELL_Process+0x94>
        /* Function key */
        if (ch == '[') {
 801982e:	7afb      	ldrb	r3, [r7, #11]
 8019830:	2b5b      	cmp	r3, #91	; 0x5b
 8019832:	d103      	bne.n	801983c <SHELL_Process+0x8c>
            context->stat = kSHELL_Function;
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	2202      	movs	r2, #2
 8019838:	711a      	strb	r2, [r3, #4]
            return;
 801983a:	e1de      	b.n	8019bfa <SHELL_Process+0x44a>
        }
        context->stat = kSHELL_Normal;
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	2200      	movs	r2, #0
 8019840:	711a      	strb	r2, [r3, #4]
 8019842:	e134      	b.n	8019aae <SHELL_Process+0x2fe>
    } else if (context->stat == kSHELL_Function) {
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	791b      	ldrb	r3, [r3, #4]
 8019848:	2b02      	cmp	r3, #2
 801984a:	d17b      	bne.n	8019944 <SHELL_Process+0x194>
        context->stat = kSHELL_Normal;
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	2200      	movs	r2, #0
 8019850:	711a      	strb	r2, [r3, #4]

        switch ((uint8_t)ch) {
 8019852:	7afb      	ldrb	r3, [r7, #11]
 8019854:	3b41      	subs	r3, #65	; 0x41
 8019856:	2b03      	cmp	r3, #3
 8019858:	d86a      	bhi.n	8019930 <SHELL_Process+0x180>
 801985a:	a201      	add	r2, pc, #4	; (adr r2, 8019860 <SHELL_Process+0xb0>)
 801985c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019860:	08019871 	.word	0x08019871
 8019864:	080198a7 	.word	0x080198a7
 8019868:	080198f7 	.word	0x080198f7
 801986c:	080198d3 	.word	0x080198d3
            /* History operation here */
            case 'A': /* Up key */
                GetHistoryCommand(context, context->hist_current);
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8019876:	b2db      	uxtb	r3, r3
 8019878:	4619      	mov	r1, r3
 801987a:	6878      	ldr	r0, [r7, #4]
 801987c:	f000 fb2c 	bl	8019ed8 <GetHistoryCommand>
                if (context->hist_current < (context->hist_count - 1)) {
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8019886:	461a      	mov	r2, r3
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801988e:	3b01      	subs	r3, #1
 8019890:	429a      	cmp	r2, r3
 8019892:	da4f      	bge.n	8019934 <SHELL_Process+0x184>
                    context->hist_current++;
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801989a:	3301      	adds	r3, #1
 801989c:	b29a      	uxth	r2, r3
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                }
                break;
 80198a4:	e046      	b.n	8019934 <SHELL_Process+0x184>
            case 'B': /* Down key */
                GetHistoryCommand(context, context->hist_current);
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80198ac:	b2db      	uxtb	r3, r3
 80198ae:	4619      	mov	r1, r3
 80198b0:	6878      	ldr	r0, [r7, #4]
 80198b2:	f000 fb11 	bl	8019ed8 <GetHistoryCommand>
                if (context->hist_current > 0) {
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d03b      	beq.n	8019938 <SHELL_Process+0x188>
                    context->hist_current--;
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80198c6:	3b01      	subs	r3, #1
 80198c8:	b29a      	uxth	r2, r3
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                }
                break;
 80198d0:	e032      	b.n	8019938 <SHELL_Process+0x188>
            case 'D': /* Left key */
                if (context->c_pos) {
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d02f      	beq.n	801993c <SHELL_Process+0x18c>
                    context->printf_data_func("\b");
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80198e0:	4869      	ldr	r0, [pc, #420]	; (8019a88 <SHELL_Process+0x2d8>)
 80198e2:	4798      	blx	r3
                    context->c_pos--;
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80198ea:	3b01      	subs	r3, #1
 80198ec:	b2da      	uxtb	r2, r3
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                }
                break;
 80198f4:	e022      	b.n	801993c <SHELL_Process+0x18c>
            case 'C': /* Right key */
                if (context->c_pos < context->l_pos) {
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019902:	429a      	cmp	r2, r3
 8019904:	d21c      	bcs.n	8019940 <SHELL_Process+0x190>
                    context->printf_data_func("%c", context->line[context->c_pos]);
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801990a:	687a      	ldr	r2, [r7, #4]
 801990c:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 8019910:	4611      	mov	r1, r2
 8019912:	687a      	ldr	r2, [r7, #4]
 8019914:	440a      	add	r2, r1
 8019916:	7952      	ldrb	r2, [r2, #5]
 8019918:	4611      	mov	r1, r2
 801991a:	485c      	ldr	r0, [pc, #368]	; (8019a8c <SHELL_Process+0x2dc>)
 801991c:	4798      	blx	r3
                    context->c_pos++;
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019924:	3301      	adds	r3, #1
 8019926:	b2da      	uxtb	r2, r3
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                }
                break;
 801992e:	e007      	b.n	8019940 <SHELL_Process+0x190>
            default:
                break;
 8019930:	bf00      	nop
 8019932:	e162      	b.n	8019bfa <SHELL_Process+0x44a>
                break;
 8019934:	bf00      	nop
 8019936:	e160      	b.n	8019bfa <SHELL_Process+0x44a>
                break;
 8019938:	bf00      	nop
 801993a:	e15e      	b.n	8019bfa <SHELL_Process+0x44a>
                break;
 801993c:	bf00      	nop
 801993e:	e15c      	b.n	8019bfa <SHELL_Process+0x44a>
                break;
 8019940:	bf00      	nop
        }
        return;
 8019942:	e15a      	b.n	8019bfa <SHELL_Process+0x44a>
    }
    /* Handle tab key */
    else if (ch == '\t') {
 8019944:	7afb      	ldrb	r3, [r7, #11]
 8019946:	2b09      	cmp	r3, #9
 8019948:	d124      	bne.n	8019994 <SHELL_Process+0x1e4>
#if SHELL_AUTO_COMPLETE
        /* Move the cursor to the beginning of line */
        for (i = 0; i < context->c_pos; i++) {
 801994a:	2300      	movs	r3, #0
 801994c:	60fb      	str	r3, [r7, #12]
 801994e:	e006      	b.n	801995e <SHELL_Process+0x1ae>
            context->printf_data_func("\b");
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019954:	484c      	ldr	r0, [pc, #304]	; (8019a88 <SHELL_Process+0x2d8>)
 8019956:	4798      	blx	r3
        for (i = 0; i < context->c_pos; i++) {
 8019958:	68fb      	ldr	r3, [r7, #12]
 801995a:	3301      	adds	r3, #1
 801995c:	60fb      	str	r3, [r7, #12]
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019964:	461a      	mov	r2, r3
 8019966:	68fb      	ldr	r3, [r7, #12]
 8019968:	4293      	cmp	r3, r2
 801996a:	dbf1      	blt.n	8019950 <SHELL_Process+0x1a0>
        }
        /* Do auto complete */
        AutoComplete(context);
 801996c:	6878      	ldr	r0, [r7, #4]
 801996e:	f000 fb15 	bl	8019f9c <AutoComplete>
        /* Move position to end */
        context->c_pos = context->l_pos = StrLen(context->line);
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	3305      	adds	r3, #5
 8019976:	4618      	mov	r0, r3
 8019978:	f000 fbbd 	bl	801a0f6 <StrLen>
 801997c:	4603      	mov	r3, r0
 801997e:	b2da      	uxtb	r2, r3
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
#endif
        return;
 8019992:	e132      	b.n	8019bfa <SHELL_Process+0x44a>
    }
#if SHELL_SEARCH_IN_HIST
    /* Search command in history */
    else if ((ch == '`') && (context->l_pos == 0) && (context->line[0] == 0x00)) {
 8019994:	7afb      	ldrb	r3, [r7, #11]
 8019996:	2b60      	cmp	r3, #96	; 0x60
 8019998:	d109      	bne.n	80199ae <SHELL_Process+0x1fe>
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80199a0:	2b00      	cmp	r3, #0
 80199a2:	d104      	bne.n	80199ae <SHELL_Process+0x1fe>
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	795b      	ldrb	r3, [r3, #5]
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	f000 8080 	beq.w	8019aae <SHELL_Process+0x2fe>
    }
#endif
    /* Handle backspace key */
    else if ((ch == KET_DEL) || (ch == '\b')) {
 80199ae:	7afb      	ldrb	r3, [r7, #11]
 80199b0:	2b7f      	cmp	r3, #127	; 0x7f
 80199b2:	d002      	beq.n	80199ba <SHELL_Process+0x20a>
 80199b4:	7afb      	ldrb	r3, [r7, #11]
 80199b6:	2b08      	cmp	r3, #8
 80199b8:	d179      	bne.n	8019aae <SHELL_Process+0x2fe>
        /* There must be at last one char */
        if (context->c_pos == 0) {
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	f000 8119 	beq.w	8019bf8 <SHELL_Process+0x448>
            return;
        }

        context->l_pos--;
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80199cc:	3b01      	subs	r3, #1
 80199ce:	b2da      	uxtb	r2, r3
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        context->c_pos--;
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80199dc:	3b01      	subs	r3, #1
 80199de:	b2da      	uxtb	r2, r3
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

        if (context->l_pos > context->c_pos) {
 80199e6:	687b      	ldr	r3, [r7, #4]
 80199e8:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80199f2:	429a      	cmp	r2, r3
 80199f4:	d94e      	bls.n	8019a94 <SHELL_Process+0x2e4>
            memmove(&context->line[context->c_pos], &context->line[context->c_pos + 1],
 80199f6:	687b      	ldr	r3, [r7, #4]
 80199f8:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80199fc:	461a      	mov	r2, r3
 80199fe:	687b      	ldr	r3, [r7, #4]
 8019a00:	4413      	add	r3, r2
 8019a02:	1d58      	adds	r0, r3, #5
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019a0a:	3301      	adds	r3, #1
 8019a0c:	687a      	ldr	r2, [r7, #4]
 8019a0e:	4413      	add	r3, r2
 8019a10:	1d59      	adds	r1, r3, #5
                    context->l_pos - context->c_pos);
 8019a12:	687b      	ldr	r3, [r7, #4]
 8019a14:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019a18:	461a      	mov	r2, r3
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019a20:	1ad3      	subs	r3, r2, r3
            memmove(&context->line[context->c_pos], &context->line[context->c_pos + 1],
 8019a22:	461a      	mov	r2, r3
 8019a24:	f000 fdd8 	bl	801a5d8 <memmove>
            context->line[context->l_pos] = 0;
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019a2e:	461a      	mov	r2, r3
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	4413      	add	r3, r2
 8019a34:	2200      	movs	r2, #0
 8019a36:	715a      	strb	r2, [r3, #5]
            context->printf_data_func("\b%s  \b", &context->line[context->c_pos]);
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019a3c:	687a      	ldr	r2, [r7, #4]
 8019a3e:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 8019a42:	4611      	mov	r1, r2
 8019a44:	687a      	ldr	r2, [r7, #4]
 8019a46:	440a      	add	r2, r1
 8019a48:	3205      	adds	r2, #5
 8019a4a:	4611      	mov	r1, r2
 8019a4c:	4810      	ldr	r0, [pc, #64]	; (8019a90 <SHELL_Process+0x2e0>)
 8019a4e:	4798      	blx	r3

            /* Reset position */
            for (i = context->c_pos; i <= context->l_pos; i++) {
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019a56:	60fb      	str	r3, [r7, #12]
 8019a58:	e006      	b.n	8019a68 <SHELL_Process+0x2b8>
                context->printf_data_func("\b");
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019a5e:	480a      	ldr	r0, [pc, #40]	; (8019a88 <SHELL_Process+0x2d8>)
 8019a60:	4798      	blx	r3
            for (i = context->c_pos; i <= context->l_pos; i++) {
 8019a62:	68fb      	ldr	r3, [r7, #12]
 8019a64:	3301      	adds	r3, #1
 8019a66:	60fb      	str	r3, [r7, #12]
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019a6e:	461a      	mov	r2, r3
 8019a70:	68fb      	ldr	r3, [r7, #12]
 8019a72:	4293      	cmp	r3, r2
 8019a74:	ddf1      	ble.n	8019a5a <SHELL_Process+0x2aa>
        }  else  {
            /* Normal backspace operation */
            context->printf_data_func("\b \b");
            context->line[context->l_pos] = 0;
        }
        return;
 8019a76:	e0c0      	b.n	8019bfa <SHELL_Process+0x44a>
 8019a78:	200000e4 	.word	0x200000e4
 8019a7c:	0801f37c 	.word	0x0801f37c
 8019a80:	0801f388 	.word	0x0801f388
 8019a84:	0801f3a0 	.word	0x0801f3a0
 8019a88:	0801f3c0 	.word	0x0801f3c0
 8019a8c:	0801f3c4 	.word	0x0801f3c4
 8019a90:	0801f3c8 	.word	0x0801f3c8
            context->printf_data_func("\b \b");
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019a98:	4859      	ldr	r0, [pc, #356]	; (8019c00 <SHELL_Process+0x450>)
 8019a9a:	4798      	blx	r3
            context->line[context->l_pos] = 0;
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019aa2:	461a      	mov	r2, r3
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	4413      	add	r3, r2
 8019aa8:	2200      	movs	r2, #0
 8019aaa:	715a      	strb	r2, [r3, #5]
        return;
 8019aac:	e0a5      	b.n	8019bfa <SHELL_Process+0x44a>
    } else {
    }

    /* Input too long */
    if (context->l_pos >= (SHELL_BUFFER_SIZE - 1)) {
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019ab4:	2b3e      	cmp	r3, #62	; 0x3e
 8019ab6:	d903      	bls.n	8019ac0 <SHELL_Process+0x310>
        context->l_pos = 0;
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	2200      	movs	r2, #0
 8019abc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    }

    /* Handle end of line, break */
    if ((ch == '\r') || (ch == '\n')) {
 8019ac0:	7afb      	ldrb	r3, [r7, #11]
 8019ac2:	2b0d      	cmp	r3, #13
 8019ac4:	d002      	beq.n	8019acc <SHELL_Process+0x31c>
 8019ac6:	7afb      	ldrb	r3, [r7, #11]
 8019ac8:	2b0a      	cmp	r3, #10
 8019aca:	d125      	bne.n	8019b18 <SHELL_Process+0x368>
        context->printf_data_func("\r\n");
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019ad0:	484c      	ldr	r0, [pc, #304]	; (8019c04 <SHELL_Process+0x454>)
 8019ad2:	4798      	blx	r3
        ProcessCommand(context, context->line);
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	3305      	adds	r3, #5
 8019ad8:	4619      	mov	r1, r3
 8019ada:	6878      	ldr	r0, [r7, #4]
 8019adc:	f000 f8be 	bl	8019c5c <ProcessCommand>
        /* Reset all params */
        context->c_pos = context->l_pos = 0;
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	2200      	movs	r2, #0
 8019ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        context->hist_current = 0;
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	2200      	movs	r2, #0
 8019af8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
        context->printf_data_func(context->prompt);
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019b00:	687a      	ldr	r2, [r7, #4]
 8019b02:	6812      	ldr	r2, [r2, #0]
 8019b04:	4610      	mov	r0, r2
 8019b06:	4798      	blx	r3
        memset(context->line, 0, sizeof(context->line));
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	3305      	adds	r3, #5
 8019b0c:	2240      	movs	r2, #64	; 0x40
 8019b0e:	2100      	movs	r1, #0
 8019b10:	4618      	mov	r0, r3
 8019b12:	f000 fd7b 	bl	801a60c <memset>
        return;
 8019b16:	e070      	b.n	8019bfa <SHELL_Process+0x44a>
    }

    /* Normal character */
    if (context->c_pos < context->l_pos) {
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019b24:	429a      	cmp	r2, r3
 8019b26:	d240      	bcs.n	8019baa <SHELL_Process+0x3fa>
        memmove(&context->line[context->c_pos + 1], &context->line[context->c_pos],
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019b2e:	3301      	adds	r3, #1
 8019b30:	687a      	ldr	r2, [r7, #4]
 8019b32:	4413      	add	r3, r2
 8019b34:	1d58      	adds	r0, r3, #5
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019b3c:	461a      	mov	r2, r3
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	4413      	add	r3, r2
 8019b42:	1d59      	adds	r1, r3, #5
                context->l_pos - context->c_pos);
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019b4a:	461a      	mov	r2, r3
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019b52:	1ad3      	subs	r3, r2, r3
        memmove(&context->line[context->c_pos + 1], &context->line[context->c_pos],
 8019b54:	461a      	mov	r2, r3
 8019b56:	f000 fd3f 	bl	801a5d8 <memmove>
        context->line[context->c_pos] = ch;
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019b60:	461a      	mov	r2, r3
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	4413      	add	r3, r2
 8019b66:	7afa      	ldrb	r2, [r7, #11]
 8019b68:	715a      	strb	r2, [r3, #5]
        context->printf_data_func("%s", &context->line[context->c_pos]);
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019b6e:	687a      	ldr	r2, [r7, #4]
 8019b70:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 8019b74:	4611      	mov	r1, r2
 8019b76:	687a      	ldr	r2, [r7, #4]
 8019b78:	440a      	add	r2, r1
 8019b7a:	3205      	adds	r2, #5
 8019b7c:	4611      	mov	r1, r2
 8019b7e:	4822      	ldr	r0, [pc, #136]	; (8019c08 <SHELL_Process+0x458>)
 8019b80:	4798      	blx	r3
        /* Move the cursor to new position */
        for (i = context->c_pos; i < context->l_pos; i++)
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019b88:	60fb      	str	r3, [r7, #12]
 8019b8a:	e006      	b.n	8019b9a <SHELL_Process+0x3ea>
        {
            context->printf_data_func("\b");
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019b90:	481e      	ldr	r0, [pc, #120]	; (8019c0c <SHELL_Process+0x45c>)
 8019b92:	4798      	blx	r3
        for (i = context->c_pos; i < context->l_pos; i++)
 8019b94:	68fb      	ldr	r3, [r7, #12]
 8019b96:	3301      	adds	r3, #1
 8019b98:	60fb      	str	r3, [r7, #12]
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019ba0:	461a      	mov	r2, r3
 8019ba2:	68fb      	ldr	r3, [r7, #12]
 8019ba4:	4293      	cmp	r3, r2
 8019ba6:	dbf1      	blt.n	8019b8c <SHELL_Process+0x3dc>
 8019ba8:	e00d      	b.n	8019bc6 <SHELL_Process+0x416>
        }
    } else {
        context->line[context->l_pos] = ch;
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019bb0:	461a      	mov	r2, r3
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	4413      	add	r3, r2
 8019bb6:	7afa      	ldrb	r2, [r7, #11]
 8019bb8:	715a      	strb	r2, [r3, #5]
        context->printf_data_func("%c", ch);
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019bbe:	7afa      	ldrb	r2, [r7, #11]
 8019bc0:	4611      	mov	r1, r2
 8019bc2:	4813      	ldr	r0, [pc, #76]	; (8019c10 <SHELL_Process+0x460>)
 8019bc4:	4798      	blx	r3
    }

    ch = 0;
 8019bc6:	2300      	movs	r3, #0
 8019bc8:	72fb      	strb	r3, [r7, #11]
    context->l_pos++;
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019bd0:	3301      	adds	r3, #1
 8019bd2:	b2da      	uxtb	r2, r3
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    context->c_pos++;
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019be0:	3301      	adds	r3, #1
 8019be2:	b2da      	uxtb	r2, r3
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8019bea:	e006      	b.n	8019bfa <SHELL_Process+0x44a>
        return;
 8019bec:	bf00      	nop
 8019bee:	e004      	b.n	8019bfa <SHELL_Process+0x44a>
        return;
 8019bf0:	bf00      	nop
 8019bf2:	e002      	b.n	8019bfa <SHELL_Process+0x44a>
      return;
 8019bf4:	bf00      	nop
 8019bf6:	e000      	b.n	8019bfa <SHELL_Process+0x44a>
            return;
 8019bf8:	bf00      	nop
}
 8019bfa:	3710      	adds	r7, #16
 8019bfc:	46bd      	mov	sp, r7
 8019bfe:	bd80      	pop	{r7, pc}
 8019c00:	0801f3d0 	.word	0x0801f3d0
 8019c04:	0801f3d4 	.word	0x0801f3d4
 8019c08:	0801f3d8 	.word	0x0801f3d8
 8019c0c:	0801f3c0 	.word	0x0801f3c0
 8019c10:	0801f3c4 	.word	0x0801f3c4

08019c14 <HelpCommand>:

/********************** Internal Function Definitions *************************/
static int32_t HelpCommand(p_shell_context_t context, int32_t argc, char **argv)
{
 8019c14:	b580      	push	{r7, lr}
 8019c16:	b086      	sub	sp, #24
 8019c18:	af00      	add	r7, sp, #0
 8019c1a:	60f8      	str	r0, [r7, #12]
 8019c1c:	60b9      	str	r1, [r7, #8]
 8019c1e:	607a      	str	r2, [r7, #4]
    uint8_t i = 0;
 8019c20:	2300      	movs	r3, #0
 8019c22:	75fb      	strb	r3, [r7, #23]

    for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 8019c24:	2300      	movs	r3, #0
 8019c26:	75fb      	strb	r3, [r7, #23]
 8019c28:	e00b      	b.n	8019c42 <HelpCommand+0x2e>
        context->printf_data_func(g_RegisteredCommands.CommandList[i]->pcHelpString);
 8019c2a:	68fb      	ldr	r3, [r7, #12]
 8019c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019c2e:	7dfa      	ldrb	r2, [r7, #23]
 8019c30:	4909      	ldr	r1, [pc, #36]	; (8019c58 <HelpCommand+0x44>)
 8019c32:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8019c36:	6852      	ldr	r2, [r2, #4]
 8019c38:	4610      	mov	r0, r2
 8019c3a:	4798      	blx	r3
    for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 8019c3c:	7dfb      	ldrb	r3, [r7, #23]
 8019c3e:	3301      	adds	r3, #1
 8019c40:	75fb      	strb	r3, [r7, #23]
 8019c42:	4b05      	ldr	r3, [pc, #20]	; (8019c58 <HelpCommand+0x44>)
 8019c44:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8019c48:	7dfa      	ldrb	r2, [r7, #23]
 8019c4a:	429a      	cmp	r2, r3
 8019c4c:	d3ed      	bcc.n	8019c2a <HelpCommand+0x16>
    }
    return 0;
 8019c4e:	2300      	movs	r3, #0
}
 8019c50:	4618      	mov	r0, r3
 8019c52:	3718      	adds	r7, #24
 8019c54:	46bd      	mov	sp, r7
 8019c56:	bd80      	pop	{r7, pc}
 8019c58:	2000b4fc 	.word	0x2000b4fc

08019c5c <ProcessCommand>:
//    context->exit = true;
//    return 0;
//}

static void ProcessCommand(p_shell_context_t context, const char *cmd)
{
 8019c5c:	b5b0      	push	{r4, r5, r7, lr}
 8019c5e:	b0c6      	sub	sp, #280	; 0x118
 8019c60:	af00      	add	r7, sp, #0
 8019c62:	1d3b      	adds	r3, r7, #4
 8019c64:	6018      	str	r0, [r3, #0]
 8019c66:	463b      	mov	r3, r7
 8019c68:	6019      	str	r1, [r3, #0]
    static const shell_command_context_t *tmpCommand = NULL;
    static const char *tmpCommandString;
    int32_t argc;
    char *argv[SHELL_BUFFER_SIZE];
    uint8_t flag = 1;
 8019c6a:	2301      	movs	r3, #1
 8019c6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    uint8_t tmpCommandLen;
    uint8_t tmpLen;
    uint8_t i = 0;
 8019c70:	2300      	movs	r3, #0
 8019c72:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

    tmpLen = StrLen(cmd);
 8019c76:	463b      	mov	r3, r7
 8019c78:	6818      	ldr	r0, [r3, #0]
 8019c7a:	f000 fa3c 	bl	801a0f6 <StrLen>
 8019c7e:	4603      	mov	r3, r0
 8019c80:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
    argc = ParseLine(cmd, tmpLen, argv);
 8019c84:	f897 1115 	ldrb.w	r1, [r7, #277]	; 0x115
 8019c88:	f107 020c 	add.w	r2, r7, #12
 8019c8c:	463b      	mov	r3, r7
 8019c8e:	6818      	ldr	r0, [r3, #0]
 8019c90:	f000 fa70 	bl	801a174 <ParseLine>
 8019c94:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    if ((tmpCommand == NULL) && (argc > 0)) {
 8019c98:	4b8b      	ldr	r3, [pc, #556]	; (8019ec8 <ProcessCommand+0x26c>)
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	d168      	bne.n	8019d72 <ProcessCommand+0x116>
 8019ca0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	dd64      	ble.n	8019d72 <ProcessCommand+0x116>
        for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 8019ca8:	2300      	movs	r3, #0
 8019caa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8019cae:	e057      	b.n	8019d60 <ProcessCommand+0x104>
            tmpCommand = g_RegisteredCommands.CommandList[i];
 8019cb0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8019cb4:	4a85      	ldr	r2, [pc, #532]	; (8019ecc <ProcessCommand+0x270>)
 8019cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019cba:	4a83      	ldr	r2, [pc, #524]	; (8019ec8 <ProcessCommand+0x26c>)
 8019cbc:	6013      	str	r3, [r2, #0]
            tmpCommandString = tmpCommand->pcCommand;
 8019cbe:	4b82      	ldr	r3, [pc, #520]	; (8019ec8 <ProcessCommand+0x26c>)
 8019cc0:	681b      	ldr	r3, [r3, #0]
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	4a82      	ldr	r2, [pc, #520]	; (8019ed0 <ProcessCommand+0x274>)
 8019cc6:	6013      	str	r3, [r2, #0]
            tmpCommandLen = StrLen(tmpCommandString);
 8019cc8:	4b81      	ldr	r3, [pc, #516]	; (8019ed0 <ProcessCommand+0x274>)
 8019cca:	681b      	ldr	r3, [r3, #0]
 8019ccc:	4618      	mov	r0, r3
 8019cce:	f000 fa12 	bl	801a0f6 <StrLen>
 8019cd2:	4603      	mov	r3, r0
 8019cd4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
            /* Compare with space or end of string */
            if ((cmd[tmpCommandLen] == ' ') || (cmd[tmpCommandLen] == 0x00)) {
 8019cd8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8019cdc:	463a      	mov	r2, r7
 8019cde:	6812      	ldr	r2, [r2, #0]
 8019ce0:	4413      	add	r3, r2
 8019ce2:	781b      	ldrb	r3, [r3, #0]
 8019ce4:	2b20      	cmp	r3, #32
 8019ce6:	d007      	beq.n	8019cf8 <ProcessCommand+0x9c>
 8019ce8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8019cec:	463a      	mov	r2, r7
 8019cee:	6812      	ldr	r2, [r2, #0]
 8019cf0:	4413      	add	r3, r2
 8019cf2:	781b      	ldrb	r3, [r3, #0]
 8019cf4:	2b00      	cmp	r3, #0
 8019cf6:	d12e      	bne.n	8019d56 <ProcessCommand+0xfa>
                if (StrCompare(tmpCommandString, argv[0], tmpCommandLen) == 0) {
 8019cf8:	4b75      	ldr	r3, [pc, #468]	; (8019ed0 <ProcessCommand+0x274>)
 8019cfa:	6818      	ldr	r0, [r3, #0]
 8019cfc:	f107 030c 	add.w	r3, r7, #12
 8019d00:	681b      	ldr	r3, [r3, #0]
 8019d02:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8019d06:	4619      	mov	r1, r3
 8019d08:	f000 fa0d 	bl	801a126 <StrCompare>
 8019d0c:	4603      	mov	r3, r0
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	d121      	bne.n	8019d56 <ProcessCommand+0xfa>
                    if ((tmpCommand->cExpectedNumberOfParameters == 0) && (argc == 1)) {
 8019d12:	4b6d      	ldr	r3, [pc, #436]	; (8019ec8 <ProcessCommand+0x26c>)
 8019d14:	681b      	ldr	r3, [r3, #0]
 8019d16:	7b1b      	ldrb	r3, [r3, #12]
 8019d18:	2b00      	cmp	r3, #0
 8019d1a:	d107      	bne.n	8019d2c <ProcessCommand+0xd0>
 8019d1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8019d20:	2b01      	cmp	r3, #1
 8019d22:	d103      	bne.n	8019d2c <ProcessCommand+0xd0>
                        flag = 0;
 8019d24:	2300      	movs	r3, #0
 8019d26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
                            flag = 0;
                        }
                    } else {
                        flag = 1;
                    }
                    break;
 8019d2a:	e021      	b.n	8019d70 <ProcessCommand+0x114>
                    } else if (tmpCommand->cExpectedNumberOfParameters > 0) {
 8019d2c:	4b66      	ldr	r3, [pc, #408]	; (8019ec8 <ProcessCommand+0x26c>)
 8019d2e:	681b      	ldr	r3, [r3, #0]
 8019d30:	7b1b      	ldrb	r3, [r3, #12]
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	d00b      	beq.n	8019d4e <ProcessCommand+0xf2>
                        if ((argc - 1) == tmpCommand->cExpectedNumberOfParameters) {
 8019d36:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8019d3a:	3b01      	subs	r3, #1
 8019d3c:	4a62      	ldr	r2, [pc, #392]	; (8019ec8 <ProcessCommand+0x26c>)
 8019d3e:	6812      	ldr	r2, [r2, #0]
 8019d40:	7b12      	ldrb	r2, [r2, #12]
 8019d42:	4293      	cmp	r3, r2
 8019d44:	d114      	bne.n	8019d70 <ProcessCommand+0x114>
                            flag = 0;
 8019d46:	2300      	movs	r3, #0
 8019d48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
                    break;
 8019d4c:	e010      	b.n	8019d70 <ProcessCommand+0x114>
                        flag = 1;
 8019d4e:	2301      	movs	r3, #1
 8019d50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
                    break;
 8019d54:	e00c      	b.n	8019d70 <ProcessCommand+0x114>
        for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 8019d56:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8019d5a:	3301      	adds	r3, #1
 8019d5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8019d60:	4b5a      	ldr	r3, [pc, #360]	; (8019ecc <ProcessCommand+0x270>)
 8019d62:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8019d66:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 8019d6a:	429a      	cmp	r2, r3
 8019d6c:	d3a0      	bcc.n	8019cb0 <ProcessCommand+0x54>
 8019d6e:	e000      	b.n	8019d72 <ProcessCommand+0x116>
                    break;
 8019d70:	bf00      	nop
                }
            }
        }
    }

    if ((tmpCommand != NULL) && (flag == 1U)) {
 8019d72:	4b55      	ldr	r3, [pc, #340]	; (8019ec8 <ProcessCommand+0x26c>)
 8019d74:	681b      	ldr	r3, [r3, #0]
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d00c      	beq.n	8019d94 <ProcessCommand+0x138>
 8019d7a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8019d7e:	2b01      	cmp	r3, #1
 8019d80:	d108      	bne.n	8019d94 <ProcessCommand+0x138>
        context->printf_data_func(
 8019d82:	1d3b      	adds	r3, r7, #4
 8019d84:	681b      	ldr	r3, [r3, #0]
 8019d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019d88:	4852      	ldr	r0, [pc, #328]	; (8019ed4 <ProcessCommand+0x278>)
 8019d8a:	4798      	blx	r3
            "\r\nIncorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n");
        tmpCommand = NULL;
 8019d8c:	4b4e      	ldr	r3, [pc, #312]	; (8019ec8 <ProcessCommand+0x26c>)
 8019d8e:	2200      	movs	r2, #0
 8019d90:	601a      	str	r2, [r3, #0]
    } else {
        // context->printf_data_func(
        //     "\r\nCommand not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n");
        tmpCommand = NULL;
    }
}
 8019d92:	e093      	b.n	8019ebc <ProcessCommand+0x260>
    } else if (tmpCommand != NULL) {
 8019d94:	4b4c      	ldr	r3, [pc, #304]	; (8019ec8 <ProcessCommand+0x26c>)
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	f000 808c 	beq.w	8019eb6 <ProcessCommand+0x25a>
        tmpLen = StrLen(cmd);
 8019d9e:	463b      	mov	r3, r7
 8019da0:	6818      	ldr	r0, [r3, #0]
 8019da2:	f000 f9a8 	bl	801a0f6 <StrLen>
 8019da6:	4603      	mov	r3, r0
 8019da8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
        if (tmpLen != StrCompare(cmd, context->hist_buf[0], StrLen(cmd))) {
 8019dac:	f897 4115 	ldrb.w	r4, [r7, #277]	; 0x115
 8019db0:	1d3b      	adds	r3, r7, #4
 8019db2:	681b      	ldr	r3, [r3, #0]
 8019db4:	f103 0558 	add.w	r5, r3, #88	; 0x58
 8019db8:	463b      	mov	r3, r7
 8019dba:	6818      	ldr	r0, [r3, #0]
 8019dbc:	f000 f99b 	bl	801a0f6 <StrLen>
 8019dc0:	4602      	mov	r2, r0
 8019dc2:	463b      	mov	r3, r7
 8019dc4:	4629      	mov	r1, r5
 8019dc6:	6818      	ldr	r0, [r3, #0]
 8019dc8:	f000 f9ad 	bl	801a126 <StrCompare>
 8019dcc:	4603      	mov	r3, r0
 8019dce:	429c      	cmp	r4, r3
 8019dd0:	d063      	beq.n	8019e9a <ProcessCommand+0x23e>
            for (i = SHELL_HIST_MAX - 1; i > 0; i--) {
 8019dd2:	2302      	movs	r3, #2
 8019dd4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8019dd8:	e032      	b.n	8019e40 <ProcessCommand+0x1e4>
                memset(context->hist_buf[i], '\0', SHELL_BUFFER_SIZE);
 8019dda:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8019dde:	1d3a      	adds	r2, r7, #4
 8019de0:	019b      	lsls	r3, r3, #6
 8019de2:	3358      	adds	r3, #88	; 0x58
 8019de4:	6812      	ldr	r2, [r2, #0]
 8019de6:	4413      	add	r3, r2
 8019de8:	2240      	movs	r2, #64	; 0x40
 8019dea:	2100      	movs	r1, #0
 8019dec:	4618      	mov	r0, r3
 8019dee:	f000 fc0d 	bl	801a60c <memset>
                tmpLen = StrLen(context->hist_buf[i - 1]);
 8019df2:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8019df6:	3b01      	subs	r3, #1
 8019df8:	1d3a      	adds	r2, r7, #4
 8019dfa:	019b      	lsls	r3, r3, #6
 8019dfc:	3358      	adds	r3, #88	; 0x58
 8019dfe:	6812      	ldr	r2, [r2, #0]
 8019e00:	4413      	add	r3, r2
 8019e02:	4618      	mov	r0, r3
 8019e04:	f000 f977 	bl	801a0f6 <StrLen>
 8019e08:	4603      	mov	r3, r0
 8019e0a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
                StrCopy(context->hist_buf[i], context->hist_buf[i - 1], tmpLen);
 8019e0e:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8019e12:	1d3a      	adds	r2, r7, #4
 8019e14:	019b      	lsls	r3, r3, #6
 8019e16:	3358      	adds	r3, #88	; 0x58
 8019e18:	6812      	ldr	r2, [r2, #0]
 8019e1a:	18d0      	adds	r0, r2, r3
 8019e1c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8019e20:	3b01      	subs	r3, #1
 8019e22:	1d3a      	adds	r2, r7, #4
 8019e24:	019b      	lsls	r3, r3, #6
 8019e26:	3358      	adds	r3, #88	; 0x58
 8019e28:	6812      	ldr	r2, [r2, #0]
 8019e2a:	4413      	add	r3, r2
 8019e2c:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 8019e30:	4619      	mov	r1, r3
 8019e32:	f000 f93d 	bl	801a0b0 <StrCopy>
            for (i = SHELL_HIST_MAX - 1; i > 0; i--) {
 8019e36:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8019e3a:	3b01      	subs	r3, #1
 8019e3c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8019e40:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	d1c8      	bne.n	8019dda <ProcessCommand+0x17e>
            memset(context->hist_buf[0], '\0', SHELL_BUFFER_SIZE);
 8019e48:	1d3b      	adds	r3, r7, #4
 8019e4a:	681b      	ldr	r3, [r3, #0]
 8019e4c:	3358      	adds	r3, #88	; 0x58
 8019e4e:	2240      	movs	r2, #64	; 0x40
 8019e50:	2100      	movs	r1, #0
 8019e52:	4618      	mov	r0, r3
 8019e54:	f000 fbda 	bl	801a60c <memset>
            tmpLen = StrLen(cmd);
 8019e58:	463b      	mov	r3, r7
 8019e5a:	6818      	ldr	r0, [r3, #0]
 8019e5c:	f000 f94b 	bl	801a0f6 <StrLen>
 8019e60:	4603      	mov	r3, r0
 8019e62:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
            StrCopy(context->hist_buf[0], cmd, tmpLen);
 8019e66:	1d3b      	adds	r3, r7, #4
 8019e68:	681b      	ldr	r3, [r3, #0]
 8019e6a:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8019e6e:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 8019e72:	463b      	mov	r3, r7
 8019e74:	6819      	ldr	r1, [r3, #0]
 8019e76:	f000 f91b 	bl	801a0b0 <StrCopy>
            if (context->hist_count < SHELL_HIST_MAX) {
 8019e7a:	1d3b      	adds	r3, r7, #4
 8019e7c:	681b      	ldr	r3, [r3, #0]
 8019e7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8019e82:	2b02      	cmp	r3, #2
 8019e84:	d809      	bhi.n	8019e9a <ProcessCommand+0x23e>
                context->hist_count++;
 8019e86:	1d3b      	adds	r3, r7, #4
 8019e88:	681b      	ldr	r3, [r3, #0]
 8019e8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8019e8e:	3301      	adds	r3, #1
 8019e90:	b29a      	uxth	r2, r3
 8019e92:	1d3b      	adds	r3, r7, #4
 8019e94:	681b      	ldr	r3, [r3, #0]
 8019e96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
        tmpCommand->pFuncCallBack(context, argc, argv);
 8019e9a:	4b0b      	ldr	r3, [pc, #44]	; (8019ec8 <ProcessCommand+0x26c>)
 8019e9c:	681b      	ldr	r3, [r3, #0]
 8019e9e:	689b      	ldr	r3, [r3, #8]
 8019ea0:	f107 020c 	add.w	r2, r7, #12
 8019ea4:	1d38      	adds	r0, r7, #4
 8019ea6:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8019eaa:	6800      	ldr	r0, [r0, #0]
 8019eac:	4798      	blx	r3
        tmpCommand = NULL;
 8019eae:	4b06      	ldr	r3, [pc, #24]	; (8019ec8 <ProcessCommand+0x26c>)
 8019eb0:	2200      	movs	r2, #0
 8019eb2:	601a      	str	r2, [r3, #0]
}
 8019eb4:	e002      	b.n	8019ebc <ProcessCommand+0x260>
        tmpCommand = NULL;
 8019eb6:	4b04      	ldr	r3, [pc, #16]	; (8019ec8 <ProcessCommand+0x26c>)
 8019eb8:	2200      	movs	r2, #0
 8019eba:	601a      	str	r2, [r3, #0]
}
 8019ebc:	bf00      	nop
 8019ebe:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8019ec2:	46bd      	mov	sp, r7
 8019ec4:	bdb0      	pop	{r4, r5, r7, pc}
 8019ec6:	bf00      	nop
 8019ec8:	2000b5e0 	.word	0x2000b5e0
 8019ecc:	2000b4fc 	.word	0x2000b4fc
 8019ed0:	2000b5e4 	.word	0x2000b5e4
 8019ed4:	0801f3dc 	.word	0x0801f3dc

08019ed8 <GetHistoryCommand>:

static void GetHistoryCommand(p_shell_context_t context, uint8_t hist_pos)
{
 8019ed8:	b580      	push	{r7, lr}
 8019eda:	b084      	sub	sp, #16
 8019edc:	af00      	add	r7, sp, #0
 8019ede:	6078      	str	r0, [r7, #4]
 8019ee0:	460b      	mov	r3, r1
 8019ee2:	70fb      	strb	r3, [r7, #3]
    uint8_t i;
    uint32_t tmp;

    if (context->hist_buf[0][0] == '\0') {
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d104      	bne.n	8019ef8 <GetHistoryCommand+0x20>
        context->hist_current = 0;
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	2200      	movs	r2, #0
 8019ef2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
        return;
 8019ef6:	e04c      	b.n	8019f92 <GetHistoryCommand+0xba>
    }

    if (hist_pos > SHELL_HIST_MAX) {
 8019ef8:	78fb      	ldrb	r3, [r7, #3]
 8019efa:	2b03      	cmp	r3, #3
 8019efc:	d901      	bls.n	8019f02 <GetHistoryCommand+0x2a>
        hist_pos = SHELL_HIST_MAX - 1;
 8019efe:	2302      	movs	r3, #2
 8019f00:	70fb      	strb	r3, [r7, #3]
    }
    tmp = StrLen(context->line);
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	3305      	adds	r3, #5
 8019f06:	4618      	mov	r0, r3
 8019f08:	f000 f8f5 	bl	801a0f6 <StrLen>
 8019f0c:	4603      	mov	r3, r0
 8019f0e:	60bb      	str	r3, [r7, #8]
    /* Clear current if have */
    if (tmp > 0) {
 8019f10:	68bb      	ldr	r3, [r7, #8]
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	d014      	beq.n	8019f40 <GetHistoryCommand+0x68>
        memset(context->line, '\0', tmp);
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	3305      	adds	r3, #5
 8019f1a:	68ba      	ldr	r2, [r7, #8]
 8019f1c:	2100      	movs	r1, #0
 8019f1e:	4618      	mov	r0, r3
 8019f20:	f000 fb74 	bl	801a60c <memset>
        for (i = 0; i < tmp; i++) {
 8019f24:	2300      	movs	r3, #0
 8019f26:	73fb      	strb	r3, [r7, #15]
 8019f28:	e006      	b.n	8019f38 <GetHistoryCommand+0x60>
            context->printf_data_func("\b \b");
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019f2e:	481a      	ldr	r0, [pc, #104]	; (8019f98 <GetHistoryCommand+0xc0>)
 8019f30:	4798      	blx	r3
        for (i = 0; i < tmp; i++) {
 8019f32:	7bfb      	ldrb	r3, [r7, #15]
 8019f34:	3301      	adds	r3, #1
 8019f36:	73fb      	strb	r3, [r7, #15]
 8019f38:	7bfb      	ldrb	r3, [r7, #15]
 8019f3a:	68ba      	ldr	r2, [r7, #8]
 8019f3c:	429a      	cmp	r2, r3
 8019f3e:	d8f4      	bhi.n	8019f2a <GetHistoryCommand+0x52>
        }
    }

    context->l_pos = StrLen(context->hist_buf[hist_pos]);
 8019f40:	78fb      	ldrb	r3, [r7, #3]
 8019f42:	019b      	lsls	r3, r3, #6
 8019f44:	3358      	adds	r3, #88	; 0x58
 8019f46:	687a      	ldr	r2, [r7, #4]
 8019f48:	4413      	add	r3, r2
 8019f4a:	4618      	mov	r0, r3
 8019f4c:	f000 f8d3 	bl	801a0f6 <StrLen>
 8019f50:	4603      	mov	r3, r0
 8019f52:	b2da      	uxtb	r2, r3
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    context->c_pos = context->l_pos;
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    StrCopy(context->line, context->hist_buf[hist_pos], context->l_pos);
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	1d58      	adds	r0, r3, #5
 8019f6a:	78fb      	ldrb	r3, [r7, #3]
 8019f6c:	019b      	lsls	r3, r3, #6
 8019f6e:	3358      	adds	r3, #88	; 0x58
 8019f70:	687a      	ldr	r2, [r7, #4]
 8019f72:	18d1      	adds	r1, r2, r3
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019f7a:	461a      	mov	r2, r3
 8019f7c:	f000 f898 	bl	801a0b0 <StrCopy>
    context->printf_data_func(context->hist_buf[hist_pos]);
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019f84:	78fa      	ldrb	r2, [r7, #3]
 8019f86:	0192      	lsls	r2, r2, #6
 8019f88:	3258      	adds	r2, #88	; 0x58
 8019f8a:	6879      	ldr	r1, [r7, #4]
 8019f8c:	440a      	add	r2, r1
 8019f8e:	4610      	mov	r0, r2
 8019f90:	4798      	blx	r3
}
 8019f92:	3710      	adds	r7, #16
 8019f94:	46bd      	mov	sp, r7
 8019f96:	bd80      	pop	{r7, pc}
 8019f98:	0801f3d0 	.word	0x0801f3d0

08019f9c <AutoComplete>:

static void AutoComplete(p_shell_context_t context)
{
 8019f9c:	b590      	push	{r4, r7, lr}
 8019f9e:	b089      	sub	sp, #36	; 0x24
 8019fa0:	af00      	add	r7, sp, #0
 8019fa2:	6078      	str	r0, [r7, #4]
    int32_t len;
    int32_t minLen;
    uint8_t i = 0;
 8019fa4:	2300      	movs	r3, #0
 8019fa6:	75fb      	strb	r3, [r7, #23]
    const shell_command_context_t *tmpCommand = NULL;
 8019fa8:	2300      	movs	r3, #0
 8019faa:	60fb      	str	r3, [r7, #12]
    const char *namePtr;
    const char *cmdName;

    minLen = 0;
 8019fac:	2300      	movs	r3, #0
 8019fae:	61bb      	str	r3, [r7, #24]
    namePtr = NULL;
 8019fb0:	2300      	movs	r3, #0
 8019fb2:	613b      	str	r3, [r7, #16]

    if (!StrLen(context->line)) {
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	3305      	adds	r3, #5
 8019fb8:	4618      	mov	r0, r3
 8019fba:	f000 f89c 	bl	801a0f6 <StrLen>
 8019fbe:	4603      	mov	r3, r0
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	d069      	beq.n	801a098 <AutoComplete+0xfc>
        return;
    }
    context->printf_data_func("\r\n");
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019fc8:	4835      	ldr	r0, [pc, #212]	; (801a0a0 <AutoComplete+0x104>)
 8019fca:	4798      	blx	r3
    /* Empty tab, list all commands */
    if (context->line[0] == '\0') {
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	795b      	ldrb	r3, [r3, #5]
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d105      	bne.n	8019fe0 <AutoComplete+0x44>
        HelpCommand(context, 0, NULL);
 8019fd4:	2200      	movs	r2, #0
 8019fd6:	2100      	movs	r1, #0
 8019fd8:	6878      	ldr	r0, [r7, #4]
 8019fda:	f7ff fe1b 	bl	8019c14 <HelpCommand>
        return;
 8019fde:	e05c      	b.n	801a09a <AutoComplete+0xfe>
    }
    /* Do auto complete */
    for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 8019fe0:	2300      	movs	r3, #0
 8019fe2:	75fb      	strb	r3, [r7, #23]
 8019fe4:	e03f      	b.n	801a066 <AutoComplete+0xca>
        tmpCommand = g_RegisteredCommands.CommandList[i];
 8019fe6:	7dfb      	ldrb	r3, [r7, #23]
 8019fe8:	4a2e      	ldr	r2, [pc, #184]	; (801a0a4 <AutoComplete+0x108>)
 8019fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019fee:	60fb      	str	r3, [r7, #12]
        cmdName = tmpCommand->pcCommand;
 8019ff0:	68fb      	ldr	r3, [r7, #12]
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	60bb      	str	r3, [r7, #8]
        if (StrCompare(context->line, cmdName, StrLen(context->line)) == 0) {
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	1d5c      	adds	r4, r3, #5
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	3305      	adds	r3, #5
 8019ffe:	4618      	mov	r0, r3
 801a000:	f000 f879 	bl	801a0f6 <StrLen>
 801a004:	4603      	mov	r3, r0
 801a006:	461a      	mov	r2, r3
 801a008:	68b9      	ldr	r1, [r7, #8]
 801a00a:	4620      	mov	r0, r4
 801a00c:	f000 f88b 	bl	801a126 <StrCompare>
 801a010:	4603      	mov	r3, r0
 801a012:	2b00      	cmp	r3, #0
 801a014:	d124      	bne.n	801a060 <AutoComplete+0xc4>
            if (minLen == 0) {
 801a016:	69bb      	ldr	r3, [r7, #24]
 801a018:	2b00      	cmp	r3, #0
 801a01a:	d10b      	bne.n	801a034 <AutoComplete+0x98>
                namePtr = cmdName;
 801a01c:	68bb      	ldr	r3, [r7, #8]
 801a01e:	613b      	str	r3, [r7, #16]
                minLen = StrLen(namePtr);
 801a020:	6938      	ldr	r0, [r7, #16]
 801a022:	f000 f868 	bl	801a0f6 <StrLen>
 801a026:	61b8      	str	r0, [r7, #24]
                /* Show possible matches */
                context->printf_data_func("%s\r\n", cmdName);
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a02c:	68b9      	ldr	r1, [r7, #8]
 801a02e:	481e      	ldr	r0, [pc, #120]	; (801a0a8 <AutoComplete+0x10c>)
 801a030:	4798      	blx	r3
                continue;
 801a032:	e015      	b.n	801a060 <AutoComplete+0xc4>
            }
            len = StrCompare(namePtr, cmdName, StrLen(namePtr));
 801a034:	6938      	ldr	r0, [r7, #16]
 801a036:	f000 f85e 	bl	801a0f6 <StrLen>
 801a03a:	4603      	mov	r3, r0
 801a03c:	461a      	mov	r2, r3
 801a03e:	68b9      	ldr	r1, [r7, #8]
 801a040:	6938      	ldr	r0, [r7, #16]
 801a042:	f000 f870 	bl	801a126 <StrCompare>
 801a046:	61f8      	str	r0, [r7, #28]
            if (len < 0) {
 801a048:	69fb      	ldr	r3, [r7, #28]
 801a04a:	2b00      	cmp	r3, #0
 801a04c:	da02      	bge.n	801a054 <AutoComplete+0xb8>
                len = len * (-1);
 801a04e:	69fb      	ldr	r3, [r7, #28]
 801a050:	425b      	negs	r3, r3
 801a052:	61fb      	str	r3, [r7, #28]
            }
            if (len < minLen) {
 801a054:	69fa      	ldr	r2, [r7, #28]
 801a056:	69bb      	ldr	r3, [r7, #24]
 801a058:	429a      	cmp	r2, r3
 801a05a:	da01      	bge.n	801a060 <AutoComplete+0xc4>
                minLen = len;
 801a05c:	69fb      	ldr	r3, [r7, #28]
 801a05e:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 801a060:	7dfb      	ldrb	r3, [r7, #23]
 801a062:	3301      	adds	r3, #1
 801a064:	75fb      	strb	r3, [r7, #23]
 801a066:	4b0f      	ldr	r3, [pc, #60]	; (801a0a4 <AutoComplete+0x108>)
 801a068:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 801a06c:	7dfa      	ldrb	r2, [r7, #23]
 801a06e:	429a      	cmp	r2, r3
 801a070:	d3b9      	bcc.n	8019fe6 <AutoComplete+0x4a>
            }
        }
    }
    /* Auto complete string */
    if (namePtr) {
 801a072:	693b      	ldr	r3, [r7, #16]
 801a074:	2b00      	cmp	r3, #0
 801a076:	d006      	beq.n	801a086 <AutoComplete+0xea>
        StrCopy(context->line, namePtr, minLen);
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	3305      	adds	r3, #5
 801a07c:	69ba      	ldr	r2, [r7, #24]
 801a07e:	6939      	ldr	r1, [r7, #16]
 801a080:	4618      	mov	r0, r3
 801a082:	f000 f815 	bl	801a0b0 <StrCopy>
    }
    context->printf_data_func("%s%s", context->prompt, context->line);
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a08a:	687a      	ldr	r2, [r7, #4]
 801a08c:	6811      	ldr	r1, [r2, #0]
 801a08e:	687a      	ldr	r2, [r7, #4]
 801a090:	3205      	adds	r2, #5
 801a092:	4806      	ldr	r0, [pc, #24]	; (801a0ac <AutoComplete+0x110>)
 801a094:	4798      	blx	r3
    return;
 801a096:	e000      	b.n	801a09a <AutoComplete+0xfe>
        return;
 801a098:	bf00      	nop
}
 801a09a:	3724      	adds	r7, #36	; 0x24
 801a09c:	46bd      	mov	sp, r7
 801a09e:	bd90      	pop	{r4, r7, pc}
 801a0a0:	0801f3d4 	.word	0x0801f3d4
 801a0a4:	2000b4fc 	.word	0x2000b4fc
 801a0a8:	0801f438 	.word	0x0801f438
 801a0ac:	0801f440 	.word	0x0801f440

0801a0b0 <StrCopy>:

static char *StrCopy(char *dest, const char *src, int32_t count)
{
 801a0b0:	b480      	push	{r7}
 801a0b2:	b087      	sub	sp, #28
 801a0b4:	af00      	add	r7, sp, #0
 801a0b6:	60f8      	str	r0, [r7, #12]
 801a0b8:	60b9      	str	r1, [r7, #8]
 801a0ba:	607a      	str	r2, [r7, #4]
    char *ret = dest;
 801a0bc:	68fb      	ldr	r3, [r7, #12]
 801a0be:	613b      	str	r3, [r7, #16]
    int32_t i = 0;
 801a0c0:	2300      	movs	r3, #0
 801a0c2:	617b      	str	r3, [r7, #20]

    for (i = 0; i < count; i++) {
 801a0c4:	2300      	movs	r3, #0
 801a0c6:	617b      	str	r3, [r7, #20]
 801a0c8:	e00a      	b.n	801a0e0 <StrCopy+0x30>
        dest[i] = src[i];
 801a0ca:	697b      	ldr	r3, [r7, #20]
 801a0cc:	68ba      	ldr	r2, [r7, #8]
 801a0ce:	441a      	add	r2, r3
 801a0d0:	697b      	ldr	r3, [r7, #20]
 801a0d2:	68f9      	ldr	r1, [r7, #12]
 801a0d4:	440b      	add	r3, r1
 801a0d6:	7812      	ldrb	r2, [r2, #0]
 801a0d8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < count; i++) {
 801a0da:	697b      	ldr	r3, [r7, #20]
 801a0dc:	3301      	adds	r3, #1
 801a0de:	617b      	str	r3, [r7, #20]
 801a0e0:	697a      	ldr	r2, [r7, #20]
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	429a      	cmp	r2, r3
 801a0e6:	dbf0      	blt.n	801a0ca <StrCopy+0x1a>
    }

    return ret;
 801a0e8:	693b      	ldr	r3, [r7, #16]
}
 801a0ea:	4618      	mov	r0, r3
 801a0ec:	371c      	adds	r7, #28
 801a0ee:	46bd      	mov	sp, r7
 801a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0f4:	4770      	bx	lr

0801a0f6 <StrLen>:

static int32_t StrLen(const char *str)
{
 801a0f6:	b480      	push	{r7}
 801a0f8:	b085      	sub	sp, #20
 801a0fa:	af00      	add	r7, sp, #0
 801a0fc:	6078      	str	r0, [r7, #4]
    int32_t i = 0;
 801a0fe:	2300      	movs	r3, #0
 801a100:	60fb      	str	r3, [r7, #12]

    while (*str) {
 801a102:	e005      	b.n	801a110 <StrLen+0x1a>
        str++;
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	3301      	adds	r3, #1
 801a108:	607b      	str	r3, [r7, #4]
        i++;
 801a10a:	68fb      	ldr	r3, [r7, #12]
 801a10c:	3301      	adds	r3, #1
 801a10e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	781b      	ldrb	r3, [r3, #0]
 801a114:	2b00      	cmp	r3, #0
 801a116:	d1f5      	bne.n	801a104 <StrLen+0xe>
    }
    return i;
 801a118:	68fb      	ldr	r3, [r7, #12]
}
 801a11a:	4618      	mov	r0, r3
 801a11c:	3714      	adds	r7, #20
 801a11e:	46bd      	mov	sp, r7
 801a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a124:	4770      	bx	lr

0801a126 <StrCompare>:

static int32_t StrCompare(const char *str1, const char *str2, int32_t count)
{
 801a126:	b480      	push	{r7}
 801a128:	b085      	sub	sp, #20
 801a12a:	af00      	add	r7, sp, #0
 801a12c:	60f8      	str	r0, [r7, #12]
 801a12e:	60b9      	str	r1, [r7, #8]
 801a130:	607a      	str	r2, [r7, #4]
    while (count--) {
 801a132:	e012      	b.n	801a15a <StrCompare+0x34>
        if (*str1++ != *str2++) {
 801a134:	68fb      	ldr	r3, [r7, #12]
 801a136:	1c5a      	adds	r2, r3, #1
 801a138:	60fa      	str	r2, [r7, #12]
 801a13a:	781a      	ldrb	r2, [r3, #0]
 801a13c:	68bb      	ldr	r3, [r7, #8]
 801a13e:	1c59      	adds	r1, r3, #1
 801a140:	60b9      	str	r1, [r7, #8]
 801a142:	781b      	ldrb	r3, [r3, #0]
 801a144:	429a      	cmp	r2, r3
 801a146:	d008      	beq.n	801a15a <StrCompare+0x34>
            return *(unsigned char *)(str1 - 1) - *(unsigned char *)(str2 - 1);
 801a148:	68fb      	ldr	r3, [r7, #12]
 801a14a:	3b01      	subs	r3, #1
 801a14c:	781b      	ldrb	r3, [r3, #0]
 801a14e:	461a      	mov	r2, r3
 801a150:	68bb      	ldr	r3, [r7, #8]
 801a152:	3b01      	subs	r3, #1
 801a154:	781b      	ldrb	r3, [r3, #0]
 801a156:	1ad3      	subs	r3, r2, r3
 801a158:	e005      	b.n	801a166 <StrCompare+0x40>
    while (count--) {
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	1e5a      	subs	r2, r3, #1
 801a15e:	607a      	str	r2, [r7, #4]
 801a160:	2b00      	cmp	r3, #0
 801a162:	d1e7      	bne.n	801a134 <StrCompare+0xe>
        }
    }
    return 0;
 801a164:	2300      	movs	r3, #0
}
 801a166:	4618      	mov	r0, r3
 801a168:	3714      	adds	r7, #20
 801a16a:	46bd      	mov	sp, r7
 801a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a170:	4770      	bx	lr
	...

0801a174 <ParseLine>:

static int32_t ParseLine(const char *cmd, uint32_t len, char *argv[SHELL_MAX_ARGS])
{
 801a174:	b580      	push	{r7, lr}
 801a176:	b088      	sub	sp, #32
 801a178:	af00      	add	r7, sp, #0
 801a17a:	60f8      	str	r0, [r7, #12]
 801a17c:	60b9      	str	r1, [r7, #8]
 801a17e:	607a      	str	r2, [r7, #4]
    uint32_t argc;
    char *p;
    uint32_t position;

    /* Init params */
    memset(g_paramBuffer, '\0', len + 1);
 801a180:	68bb      	ldr	r3, [r7, #8]
 801a182:	3301      	adds	r3, #1
 801a184:	461a      	mov	r2, r3
 801a186:	2100      	movs	r1, #0
 801a188:	4838      	ldr	r0, [pc, #224]	; (801a26c <ParseLine+0xf8>)
 801a18a:	f000 fa3f 	bl	801a60c <memset>
    StrCopy(g_paramBuffer, cmd, len);
 801a18e:	68bb      	ldr	r3, [r7, #8]
 801a190:	461a      	mov	r2, r3
 801a192:	68f9      	ldr	r1, [r7, #12]
 801a194:	4835      	ldr	r0, [pc, #212]	; (801a26c <ParseLine+0xf8>)
 801a196:	f7ff ff8b 	bl	801a0b0 <StrCopy>

    p = g_paramBuffer;
 801a19a:	4b34      	ldr	r3, [pc, #208]	; (801a26c <ParseLine+0xf8>)
 801a19c:	61bb      	str	r3, [r7, #24]
    position = 0;
 801a19e:	2300      	movs	r3, #0
 801a1a0:	617b      	str	r3, [r7, #20]
    argc = 0;
 801a1a2:	2300      	movs	r3, #0
 801a1a4:	61fb      	str	r3, [r7, #28]

    while (position < len) {
 801a1a6:	e058      	b.n	801a25a <ParseLine+0xe6>
        /* Skip all blanks */
        while (((char)(*p) == ' ') && (position < len)) {
            *p = '\0';
 801a1a8:	69bb      	ldr	r3, [r7, #24]
 801a1aa:	2200      	movs	r2, #0
 801a1ac:	701a      	strb	r2, [r3, #0]
            p++;
 801a1ae:	69bb      	ldr	r3, [r7, #24]
 801a1b0:	3301      	adds	r3, #1
 801a1b2:	61bb      	str	r3, [r7, #24]
            position++;
 801a1b4:	697b      	ldr	r3, [r7, #20]
 801a1b6:	3301      	adds	r3, #1
 801a1b8:	617b      	str	r3, [r7, #20]
        while (((char)(*p) == ' ') && (position < len)) {
 801a1ba:	69bb      	ldr	r3, [r7, #24]
 801a1bc:	781b      	ldrb	r3, [r3, #0]
 801a1be:	2b20      	cmp	r3, #32
 801a1c0:	d103      	bne.n	801a1ca <ParseLine+0x56>
 801a1c2:	697a      	ldr	r2, [r7, #20]
 801a1c4:	68bb      	ldr	r3, [r7, #8]
 801a1c6:	429a      	cmp	r2, r3
 801a1c8:	d3ee      	bcc.n	801a1a8 <ParseLine+0x34>
        }
        /* Process begin of a string */
        if (*p == '"') {
 801a1ca:	69bb      	ldr	r3, [r7, #24]
 801a1cc:	781b      	ldrb	r3, [r3, #0]
 801a1ce:	2b22      	cmp	r3, #34	; 0x22
 801a1d0:	d127      	bne.n	801a222 <ParseLine+0xae>
            p++;
 801a1d2:	69bb      	ldr	r3, [r7, #24]
 801a1d4:	3301      	adds	r3, #1
 801a1d6:	61bb      	str	r3, [r7, #24]
            position++;
 801a1d8:	697b      	ldr	r3, [r7, #20]
 801a1da:	3301      	adds	r3, #1
 801a1dc:	617b      	str	r3, [r7, #20]
            argv[argc] = p;
 801a1de:	69fb      	ldr	r3, [r7, #28]
 801a1e0:	009b      	lsls	r3, r3, #2
 801a1e2:	687a      	ldr	r2, [r7, #4]
 801a1e4:	4413      	add	r3, r2
 801a1e6:	69ba      	ldr	r2, [r7, #24]
 801a1e8:	601a      	str	r2, [r3, #0]
            argc++;
 801a1ea:	69fb      	ldr	r3, [r7, #28]
 801a1ec:	3301      	adds	r3, #1
 801a1ee:	61fb      	str	r3, [r7, #28]
            /* Skip this string */
            while ((*p != '"') && (position < len)) {
 801a1f0:	e005      	b.n	801a1fe <ParseLine+0x8a>
                p++;
 801a1f2:	69bb      	ldr	r3, [r7, #24]
 801a1f4:	3301      	adds	r3, #1
 801a1f6:	61bb      	str	r3, [r7, #24]
                position++;
 801a1f8:	697b      	ldr	r3, [r7, #20]
 801a1fa:	3301      	adds	r3, #1
 801a1fc:	617b      	str	r3, [r7, #20]
            while ((*p != '"') && (position < len)) {
 801a1fe:	69bb      	ldr	r3, [r7, #24]
 801a200:	781b      	ldrb	r3, [r3, #0]
 801a202:	2b22      	cmp	r3, #34	; 0x22
 801a204:	d003      	beq.n	801a20e <ParseLine+0x9a>
 801a206:	697a      	ldr	r2, [r7, #20]
 801a208:	68bb      	ldr	r3, [r7, #8]
 801a20a:	429a      	cmp	r2, r3
 801a20c:	d3f1      	bcc.n	801a1f2 <ParseLine+0x7e>
            }
            /* Skip '"' */
            *p = '\0';
 801a20e:	69bb      	ldr	r3, [r7, #24]
 801a210:	2200      	movs	r2, #0
 801a212:	701a      	strb	r2, [r3, #0]
            p++;
 801a214:	69bb      	ldr	r3, [r7, #24]
 801a216:	3301      	adds	r3, #1
 801a218:	61bb      	str	r3, [r7, #24]
            position++;
 801a21a:	697b      	ldr	r3, [r7, #20]
 801a21c:	3301      	adds	r3, #1
 801a21e:	617b      	str	r3, [r7, #20]
 801a220:	e01b      	b.n	801a25a <ParseLine+0xe6>
        } else /* Normal char */ {
            argv[argc] = p;
 801a222:	69fb      	ldr	r3, [r7, #28]
 801a224:	009b      	lsls	r3, r3, #2
 801a226:	687a      	ldr	r2, [r7, #4]
 801a228:	4413      	add	r3, r2
 801a22a:	69ba      	ldr	r2, [r7, #24]
 801a22c:	601a      	str	r2, [r3, #0]
            argc++;
 801a22e:	69fb      	ldr	r3, [r7, #28]
 801a230:	3301      	adds	r3, #1
 801a232:	61fb      	str	r3, [r7, #28]
            while (((char)*p != ' ') && ((char)*p != '\t') && (position < len)) {
 801a234:	e005      	b.n	801a242 <ParseLine+0xce>
                p++;
 801a236:	69bb      	ldr	r3, [r7, #24]
 801a238:	3301      	adds	r3, #1
 801a23a:	61bb      	str	r3, [r7, #24]
                position++;
 801a23c:	697b      	ldr	r3, [r7, #20]
 801a23e:	3301      	adds	r3, #1
 801a240:	617b      	str	r3, [r7, #20]
            while (((char)*p != ' ') && ((char)*p != '\t') && (position < len)) {
 801a242:	69bb      	ldr	r3, [r7, #24]
 801a244:	781b      	ldrb	r3, [r3, #0]
 801a246:	2b20      	cmp	r3, #32
 801a248:	d007      	beq.n	801a25a <ParseLine+0xe6>
 801a24a:	69bb      	ldr	r3, [r7, #24]
 801a24c:	781b      	ldrb	r3, [r3, #0]
 801a24e:	2b09      	cmp	r3, #9
 801a250:	d003      	beq.n	801a25a <ParseLine+0xe6>
 801a252:	697a      	ldr	r2, [r7, #20]
 801a254:	68bb      	ldr	r3, [r7, #8]
 801a256:	429a      	cmp	r2, r3
 801a258:	d3ed      	bcc.n	801a236 <ParseLine+0xc2>
    while (position < len) {
 801a25a:	697a      	ldr	r2, [r7, #20]
 801a25c:	68bb      	ldr	r3, [r7, #8]
 801a25e:	429a      	cmp	r2, r3
 801a260:	d3ab      	bcc.n	801a1ba <ParseLine+0x46>
            }
        }
    }
    return argc;
 801a262:	69fb      	ldr	r3, [r7, #28]
}
 801a264:	4618      	mov	r0, r3
 801a266:	3720      	adds	r7, #32
 801a268:	46bd      	mov	sp, r7
 801a26a:	bd80      	pop	{r7, pc}
 801a26c:	2000b5a0 	.word	0x2000b5a0

0801a270 <SHELL_RegisterCommand>:

int32_t SHELL_RegisterCommand(const shell_command_context_t *command_context)
{
 801a270:	b480      	push	{r7}
 801a272:	b085      	sub	sp, #20
 801a274:	af00      	add	r7, sp, #0
 801a276:	6078      	str	r0, [r7, #4]
    int32_t result = 0;
 801a278:	2300      	movs	r3, #0
 801a27a:	60fb      	str	r3, [r7, #12]

    /* If have room  in command list */
    if (g_RegisteredCommands.numberOfCommandInList < SHELL_MAX_CMD) {
 801a27c:	4b0e      	ldr	r3, [pc, #56]	; (801a2b8 <SHELL_RegisterCommand+0x48>)
 801a27e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 801a282:	2b27      	cmp	r3, #39	; 0x27
 801a284:	d80d      	bhi.n	801a2a2 <SHELL_RegisterCommand+0x32>
        g_RegisteredCommands.CommandList[g_RegisteredCommands.numberOfCommandInList++] = command_context;
 801a286:	4b0c      	ldr	r3, [pc, #48]	; (801a2b8 <SHELL_RegisterCommand+0x48>)
 801a288:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 801a28c:	1c5a      	adds	r2, r3, #1
 801a28e:	b2d1      	uxtb	r1, r2
 801a290:	4a09      	ldr	r2, [pc, #36]	; (801a2b8 <SHELL_RegisterCommand+0x48>)
 801a292:	f882 10a0 	strb.w	r1, [r2, #160]	; 0xa0
 801a296:	4619      	mov	r1, r3
 801a298:	4a07      	ldr	r2, [pc, #28]	; (801a2b8 <SHELL_RegisterCommand+0x48>)
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801a2a0:	e002      	b.n	801a2a8 <SHELL_RegisterCommand+0x38>
    } else {
        result = -1;
 801a2a2:	f04f 33ff 	mov.w	r3, #4294967295
 801a2a6:	60fb      	str	r3, [r7, #12]
    }
    return result;
 801a2a8:	68fb      	ldr	r3, [r7, #12]
}
 801a2aa:	4618      	mov	r0, r3
 801a2ac:	3714      	adds	r7, #20
 801a2ae:	46bd      	mov	sp, r7
 801a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2b4:	4770      	bx	lr
 801a2b6:	bf00      	nop
 801a2b8:	2000b4fc 	.word	0x2000b4fc

0801a2bc <GetChar>:

static uint8_t GetChar(p_shell_context_t context)
{
 801a2bc:	b580      	push	{r7, lr}
 801a2be:	b084      	sub	sp, #16
 801a2c0:	af00      	add	r7, sp, #0
 801a2c2:	6078      	str	r0, [r7, #4]
    uint8_t ch;

#if SHELL_USE_FILE_STREAM
    ch = fgetc(context->STDIN);
#else
    context->recv_data_func(&ch, 1U);
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a2c8:	f107 020f 	add.w	r2, r7, #15
 801a2cc:	2101      	movs	r1, #1
 801a2ce:	4610      	mov	r0, r2
 801a2d0:	4798      	blx	r3
#endif
    return ch;
 801a2d2:	7bfb      	ldrb	r3, [r7, #15]
}
 801a2d4:	4618      	mov	r0, r3
 801a2d6:	3710      	adds	r7, #16
 801a2d8:	46bd      	mov	sp, r7
 801a2da:	bd80      	pop	{r7, pc}

0801a2dc <__assert_func>:
 801a2dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a2de:	4614      	mov	r4, r2
 801a2e0:	461a      	mov	r2, r3
 801a2e2:	4b09      	ldr	r3, [pc, #36]	; (801a308 <__assert_func+0x2c>)
 801a2e4:	681b      	ldr	r3, [r3, #0]
 801a2e6:	4605      	mov	r5, r0
 801a2e8:	68d8      	ldr	r0, [r3, #12]
 801a2ea:	b14c      	cbz	r4, 801a300 <__assert_func+0x24>
 801a2ec:	4b07      	ldr	r3, [pc, #28]	; (801a30c <__assert_func+0x30>)
 801a2ee:	9100      	str	r1, [sp, #0]
 801a2f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a2f4:	4906      	ldr	r1, [pc, #24]	; (801a310 <__assert_func+0x34>)
 801a2f6:	462b      	mov	r3, r5
 801a2f8:	f000 f8e8 	bl	801a4cc <fiprintf>
 801a2fc:	f000 ffbc 	bl	801b278 <abort>
 801a300:	4b04      	ldr	r3, [pc, #16]	; (801a314 <__assert_func+0x38>)
 801a302:	461c      	mov	r4, r3
 801a304:	e7f3      	b.n	801a2ee <__assert_func+0x12>
 801a306:	bf00      	nop
 801a308:	200000e8 	.word	0x200000e8
 801a30c:	0801f623 	.word	0x0801f623
 801a310:	0801f630 	.word	0x0801f630
 801a314:	0801f65e 	.word	0x0801f65e

0801a318 <atoi>:
 801a318:	220a      	movs	r2, #10
 801a31a:	2100      	movs	r1, #0
 801a31c:	f000 beb0 	b.w	801b080 <strtol>

0801a320 <std>:
 801a320:	2300      	movs	r3, #0
 801a322:	b510      	push	{r4, lr}
 801a324:	4604      	mov	r4, r0
 801a326:	e9c0 3300 	strd	r3, r3, [r0]
 801a32a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a32e:	6083      	str	r3, [r0, #8]
 801a330:	8181      	strh	r1, [r0, #12]
 801a332:	6643      	str	r3, [r0, #100]	; 0x64
 801a334:	81c2      	strh	r2, [r0, #14]
 801a336:	6183      	str	r3, [r0, #24]
 801a338:	4619      	mov	r1, r3
 801a33a:	2208      	movs	r2, #8
 801a33c:	305c      	adds	r0, #92	; 0x5c
 801a33e:	f000 f965 	bl	801a60c <memset>
 801a342:	4b05      	ldr	r3, [pc, #20]	; (801a358 <std+0x38>)
 801a344:	6263      	str	r3, [r4, #36]	; 0x24
 801a346:	4b05      	ldr	r3, [pc, #20]	; (801a35c <std+0x3c>)
 801a348:	62a3      	str	r3, [r4, #40]	; 0x28
 801a34a:	4b05      	ldr	r3, [pc, #20]	; (801a360 <std+0x40>)
 801a34c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a34e:	4b05      	ldr	r3, [pc, #20]	; (801a364 <std+0x44>)
 801a350:	6224      	str	r4, [r4, #32]
 801a352:	6323      	str	r3, [r4, #48]	; 0x30
 801a354:	bd10      	pop	{r4, pc}
 801a356:	bf00      	nop
 801a358:	0801aef1 	.word	0x0801aef1
 801a35c:	0801af13 	.word	0x0801af13
 801a360:	0801af4b 	.word	0x0801af4b
 801a364:	0801af6f 	.word	0x0801af6f

0801a368 <_cleanup_r>:
 801a368:	4901      	ldr	r1, [pc, #4]	; (801a370 <_cleanup_r+0x8>)
 801a36a:	f000 b8c1 	b.w	801a4f0 <_fwalk_reent>
 801a36e:	bf00      	nop
 801a370:	0801b3c1 	.word	0x0801b3c1

0801a374 <__sfmoreglue>:
 801a374:	b570      	push	{r4, r5, r6, lr}
 801a376:	1e4a      	subs	r2, r1, #1
 801a378:	2568      	movs	r5, #104	; 0x68
 801a37a:	4355      	muls	r5, r2
 801a37c:	460e      	mov	r6, r1
 801a37e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a382:	f000 f99b 	bl	801a6bc <_malloc_r>
 801a386:	4604      	mov	r4, r0
 801a388:	b140      	cbz	r0, 801a39c <__sfmoreglue+0x28>
 801a38a:	2100      	movs	r1, #0
 801a38c:	e9c0 1600 	strd	r1, r6, [r0]
 801a390:	300c      	adds	r0, #12
 801a392:	60a0      	str	r0, [r4, #8]
 801a394:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a398:	f000 f938 	bl	801a60c <memset>
 801a39c:	4620      	mov	r0, r4
 801a39e:	bd70      	pop	{r4, r5, r6, pc}

0801a3a0 <__sfp_lock_acquire>:
 801a3a0:	4801      	ldr	r0, [pc, #4]	; (801a3a8 <__sfp_lock_acquire+0x8>)
 801a3a2:	f000 b8ea 	b.w	801a57a <__retarget_lock_acquire_recursive>
 801a3a6:	bf00      	nop
 801a3a8:	20012220 	.word	0x20012220

0801a3ac <__sfp_lock_release>:
 801a3ac:	4801      	ldr	r0, [pc, #4]	; (801a3b4 <__sfp_lock_release+0x8>)
 801a3ae:	f000 b8e5 	b.w	801a57c <__retarget_lock_release_recursive>
 801a3b2:	bf00      	nop
 801a3b4:	20012220 	.word	0x20012220

0801a3b8 <__sinit_lock_acquire>:
 801a3b8:	4801      	ldr	r0, [pc, #4]	; (801a3c0 <__sinit_lock_acquire+0x8>)
 801a3ba:	f000 b8de 	b.w	801a57a <__retarget_lock_acquire_recursive>
 801a3be:	bf00      	nop
 801a3c0:	2001221b 	.word	0x2001221b

0801a3c4 <__sinit_lock_release>:
 801a3c4:	4801      	ldr	r0, [pc, #4]	; (801a3cc <__sinit_lock_release+0x8>)
 801a3c6:	f000 b8d9 	b.w	801a57c <__retarget_lock_release_recursive>
 801a3ca:	bf00      	nop
 801a3cc:	2001221b 	.word	0x2001221b

0801a3d0 <__sinit>:
 801a3d0:	b510      	push	{r4, lr}
 801a3d2:	4604      	mov	r4, r0
 801a3d4:	f7ff fff0 	bl	801a3b8 <__sinit_lock_acquire>
 801a3d8:	69a3      	ldr	r3, [r4, #24]
 801a3da:	b11b      	cbz	r3, 801a3e4 <__sinit+0x14>
 801a3dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a3e0:	f7ff bff0 	b.w	801a3c4 <__sinit_lock_release>
 801a3e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a3e8:	6523      	str	r3, [r4, #80]	; 0x50
 801a3ea:	4b13      	ldr	r3, [pc, #76]	; (801a438 <__sinit+0x68>)
 801a3ec:	4a13      	ldr	r2, [pc, #76]	; (801a43c <__sinit+0x6c>)
 801a3ee:	681b      	ldr	r3, [r3, #0]
 801a3f0:	62a2      	str	r2, [r4, #40]	; 0x28
 801a3f2:	42a3      	cmp	r3, r4
 801a3f4:	bf04      	itt	eq
 801a3f6:	2301      	moveq	r3, #1
 801a3f8:	61a3      	streq	r3, [r4, #24]
 801a3fa:	4620      	mov	r0, r4
 801a3fc:	f000 f820 	bl	801a440 <__sfp>
 801a400:	6060      	str	r0, [r4, #4]
 801a402:	4620      	mov	r0, r4
 801a404:	f000 f81c 	bl	801a440 <__sfp>
 801a408:	60a0      	str	r0, [r4, #8]
 801a40a:	4620      	mov	r0, r4
 801a40c:	f000 f818 	bl	801a440 <__sfp>
 801a410:	2200      	movs	r2, #0
 801a412:	60e0      	str	r0, [r4, #12]
 801a414:	2104      	movs	r1, #4
 801a416:	6860      	ldr	r0, [r4, #4]
 801a418:	f7ff ff82 	bl	801a320 <std>
 801a41c:	68a0      	ldr	r0, [r4, #8]
 801a41e:	2201      	movs	r2, #1
 801a420:	2109      	movs	r1, #9
 801a422:	f7ff ff7d 	bl	801a320 <std>
 801a426:	68e0      	ldr	r0, [r4, #12]
 801a428:	2202      	movs	r2, #2
 801a42a:	2112      	movs	r1, #18
 801a42c:	f7ff ff78 	bl	801a320 <std>
 801a430:	2301      	movs	r3, #1
 801a432:	61a3      	str	r3, [r4, #24]
 801a434:	e7d2      	b.n	801a3dc <__sinit+0xc>
 801a436:	bf00      	nop
 801a438:	0801f7c0 	.word	0x0801f7c0
 801a43c:	0801a369 	.word	0x0801a369

0801a440 <__sfp>:
 801a440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a442:	4607      	mov	r7, r0
 801a444:	f7ff ffac 	bl	801a3a0 <__sfp_lock_acquire>
 801a448:	4b1e      	ldr	r3, [pc, #120]	; (801a4c4 <__sfp+0x84>)
 801a44a:	681e      	ldr	r6, [r3, #0]
 801a44c:	69b3      	ldr	r3, [r6, #24]
 801a44e:	b913      	cbnz	r3, 801a456 <__sfp+0x16>
 801a450:	4630      	mov	r0, r6
 801a452:	f7ff ffbd 	bl	801a3d0 <__sinit>
 801a456:	3648      	adds	r6, #72	; 0x48
 801a458:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a45c:	3b01      	subs	r3, #1
 801a45e:	d503      	bpl.n	801a468 <__sfp+0x28>
 801a460:	6833      	ldr	r3, [r6, #0]
 801a462:	b30b      	cbz	r3, 801a4a8 <__sfp+0x68>
 801a464:	6836      	ldr	r6, [r6, #0]
 801a466:	e7f7      	b.n	801a458 <__sfp+0x18>
 801a468:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a46c:	b9d5      	cbnz	r5, 801a4a4 <__sfp+0x64>
 801a46e:	4b16      	ldr	r3, [pc, #88]	; (801a4c8 <__sfp+0x88>)
 801a470:	60e3      	str	r3, [r4, #12]
 801a472:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a476:	6665      	str	r5, [r4, #100]	; 0x64
 801a478:	f000 f87e 	bl	801a578 <__retarget_lock_init_recursive>
 801a47c:	f7ff ff96 	bl	801a3ac <__sfp_lock_release>
 801a480:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a484:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a488:	6025      	str	r5, [r4, #0]
 801a48a:	61a5      	str	r5, [r4, #24]
 801a48c:	2208      	movs	r2, #8
 801a48e:	4629      	mov	r1, r5
 801a490:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a494:	f000 f8ba 	bl	801a60c <memset>
 801a498:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a49c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a4a0:	4620      	mov	r0, r4
 801a4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a4a4:	3468      	adds	r4, #104	; 0x68
 801a4a6:	e7d9      	b.n	801a45c <__sfp+0x1c>
 801a4a8:	2104      	movs	r1, #4
 801a4aa:	4638      	mov	r0, r7
 801a4ac:	f7ff ff62 	bl	801a374 <__sfmoreglue>
 801a4b0:	4604      	mov	r4, r0
 801a4b2:	6030      	str	r0, [r6, #0]
 801a4b4:	2800      	cmp	r0, #0
 801a4b6:	d1d5      	bne.n	801a464 <__sfp+0x24>
 801a4b8:	f7ff ff78 	bl	801a3ac <__sfp_lock_release>
 801a4bc:	230c      	movs	r3, #12
 801a4be:	603b      	str	r3, [r7, #0]
 801a4c0:	e7ee      	b.n	801a4a0 <__sfp+0x60>
 801a4c2:	bf00      	nop
 801a4c4:	0801f7c0 	.word	0x0801f7c0
 801a4c8:	ffff0001 	.word	0xffff0001

0801a4cc <fiprintf>:
 801a4cc:	b40e      	push	{r1, r2, r3}
 801a4ce:	b503      	push	{r0, r1, lr}
 801a4d0:	4601      	mov	r1, r0
 801a4d2:	ab03      	add	r3, sp, #12
 801a4d4:	4805      	ldr	r0, [pc, #20]	; (801a4ec <fiprintf+0x20>)
 801a4d6:	f853 2b04 	ldr.w	r2, [r3], #4
 801a4da:	6800      	ldr	r0, [r0, #0]
 801a4dc:	9301      	str	r3, [sp, #4]
 801a4de:	f000 f971 	bl	801a7c4 <_vfiprintf_r>
 801a4e2:	b002      	add	sp, #8
 801a4e4:	f85d eb04 	ldr.w	lr, [sp], #4
 801a4e8:	b003      	add	sp, #12
 801a4ea:	4770      	bx	lr
 801a4ec:	200000e8 	.word	0x200000e8

0801a4f0 <_fwalk_reent>:
 801a4f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a4f4:	4606      	mov	r6, r0
 801a4f6:	4688      	mov	r8, r1
 801a4f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a4fc:	2700      	movs	r7, #0
 801a4fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a502:	f1b9 0901 	subs.w	r9, r9, #1
 801a506:	d505      	bpl.n	801a514 <_fwalk_reent+0x24>
 801a508:	6824      	ldr	r4, [r4, #0]
 801a50a:	2c00      	cmp	r4, #0
 801a50c:	d1f7      	bne.n	801a4fe <_fwalk_reent+0xe>
 801a50e:	4638      	mov	r0, r7
 801a510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a514:	89ab      	ldrh	r3, [r5, #12]
 801a516:	2b01      	cmp	r3, #1
 801a518:	d907      	bls.n	801a52a <_fwalk_reent+0x3a>
 801a51a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a51e:	3301      	adds	r3, #1
 801a520:	d003      	beq.n	801a52a <_fwalk_reent+0x3a>
 801a522:	4629      	mov	r1, r5
 801a524:	4630      	mov	r0, r6
 801a526:	47c0      	blx	r8
 801a528:	4307      	orrs	r7, r0
 801a52a:	3568      	adds	r5, #104	; 0x68
 801a52c:	e7e9      	b.n	801a502 <_fwalk_reent+0x12>
	...

0801a530 <__libc_init_array>:
 801a530:	b570      	push	{r4, r5, r6, lr}
 801a532:	4d0d      	ldr	r5, [pc, #52]	; (801a568 <__libc_init_array+0x38>)
 801a534:	4c0d      	ldr	r4, [pc, #52]	; (801a56c <__libc_init_array+0x3c>)
 801a536:	1b64      	subs	r4, r4, r5
 801a538:	10a4      	asrs	r4, r4, #2
 801a53a:	2600      	movs	r6, #0
 801a53c:	42a6      	cmp	r6, r4
 801a53e:	d109      	bne.n	801a554 <__libc_init_array+0x24>
 801a540:	4d0b      	ldr	r5, [pc, #44]	; (801a570 <__libc_init_array+0x40>)
 801a542:	4c0c      	ldr	r4, [pc, #48]	; (801a574 <__libc_init_array+0x44>)
 801a544:	f001 f9fc 	bl	801b940 <_init>
 801a548:	1b64      	subs	r4, r4, r5
 801a54a:	10a4      	asrs	r4, r4, #2
 801a54c:	2600      	movs	r6, #0
 801a54e:	42a6      	cmp	r6, r4
 801a550:	d105      	bne.n	801a55e <__libc_init_array+0x2e>
 801a552:	bd70      	pop	{r4, r5, r6, pc}
 801a554:	f855 3b04 	ldr.w	r3, [r5], #4
 801a558:	4798      	blx	r3
 801a55a:	3601      	adds	r6, #1
 801a55c:	e7ee      	b.n	801a53c <__libc_init_array+0xc>
 801a55e:	f855 3b04 	ldr.w	r3, [r5], #4
 801a562:	4798      	blx	r3
 801a564:	3601      	adds	r6, #1
 801a566:	e7f2      	b.n	801a54e <__libc_init_array+0x1e>
 801a568:	0801f878 	.word	0x0801f878
 801a56c:	0801f878 	.word	0x0801f878
 801a570:	0801f878 	.word	0x0801f878
 801a574:	0801f87c 	.word	0x0801f87c

0801a578 <__retarget_lock_init_recursive>:
 801a578:	4770      	bx	lr

0801a57a <__retarget_lock_acquire_recursive>:
 801a57a:	4770      	bx	lr

0801a57c <__retarget_lock_release_recursive>:
 801a57c:	4770      	bx	lr
	...

0801a580 <malloc>:
 801a580:	4b02      	ldr	r3, [pc, #8]	; (801a58c <malloc+0xc>)
 801a582:	4601      	mov	r1, r0
 801a584:	6818      	ldr	r0, [r3, #0]
 801a586:	f000 b899 	b.w	801a6bc <_malloc_r>
 801a58a:	bf00      	nop
 801a58c:	200000e8 	.word	0x200000e8

0801a590 <free>:
 801a590:	4b02      	ldr	r3, [pc, #8]	; (801a59c <free+0xc>)
 801a592:	4601      	mov	r1, r0
 801a594:	6818      	ldr	r0, [r3, #0]
 801a596:	f000 b841 	b.w	801a61c <_free_r>
 801a59a:	bf00      	nop
 801a59c:	200000e8 	.word	0x200000e8

0801a5a0 <memcmp>:
 801a5a0:	b530      	push	{r4, r5, lr}
 801a5a2:	3901      	subs	r1, #1
 801a5a4:	2400      	movs	r4, #0
 801a5a6:	42a2      	cmp	r2, r4
 801a5a8:	d101      	bne.n	801a5ae <memcmp+0xe>
 801a5aa:	2000      	movs	r0, #0
 801a5ac:	e005      	b.n	801a5ba <memcmp+0x1a>
 801a5ae:	5d03      	ldrb	r3, [r0, r4]
 801a5b0:	3401      	adds	r4, #1
 801a5b2:	5d0d      	ldrb	r5, [r1, r4]
 801a5b4:	42ab      	cmp	r3, r5
 801a5b6:	d0f6      	beq.n	801a5a6 <memcmp+0x6>
 801a5b8:	1b58      	subs	r0, r3, r5
 801a5ba:	bd30      	pop	{r4, r5, pc}

0801a5bc <memcpy>:
 801a5bc:	440a      	add	r2, r1
 801a5be:	4291      	cmp	r1, r2
 801a5c0:	f100 33ff 	add.w	r3, r0, #4294967295
 801a5c4:	d100      	bne.n	801a5c8 <memcpy+0xc>
 801a5c6:	4770      	bx	lr
 801a5c8:	b510      	push	{r4, lr}
 801a5ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a5ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a5d2:	4291      	cmp	r1, r2
 801a5d4:	d1f9      	bne.n	801a5ca <memcpy+0xe>
 801a5d6:	bd10      	pop	{r4, pc}

0801a5d8 <memmove>:
 801a5d8:	4288      	cmp	r0, r1
 801a5da:	b510      	push	{r4, lr}
 801a5dc:	eb01 0402 	add.w	r4, r1, r2
 801a5e0:	d902      	bls.n	801a5e8 <memmove+0x10>
 801a5e2:	4284      	cmp	r4, r0
 801a5e4:	4623      	mov	r3, r4
 801a5e6:	d807      	bhi.n	801a5f8 <memmove+0x20>
 801a5e8:	1e43      	subs	r3, r0, #1
 801a5ea:	42a1      	cmp	r1, r4
 801a5ec:	d008      	beq.n	801a600 <memmove+0x28>
 801a5ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a5f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a5f6:	e7f8      	b.n	801a5ea <memmove+0x12>
 801a5f8:	4402      	add	r2, r0
 801a5fa:	4601      	mov	r1, r0
 801a5fc:	428a      	cmp	r2, r1
 801a5fe:	d100      	bne.n	801a602 <memmove+0x2a>
 801a600:	bd10      	pop	{r4, pc}
 801a602:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a606:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a60a:	e7f7      	b.n	801a5fc <memmove+0x24>

0801a60c <memset>:
 801a60c:	4402      	add	r2, r0
 801a60e:	4603      	mov	r3, r0
 801a610:	4293      	cmp	r3, r2
 801a612:	d100      	bne.n	801a616 <memset+0xa>
 801a614:	4770      	bx	lr
 801a616:	f803 1b01 	strb.w	r1, [r3], #1
 801a61a:	e7f9      	b.n	801a610 <memset+0x4>

0801a61c <_free_r>:
 801a61c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a61e:	2900      	cmp	r1, #0
 801a620:	d048      	beq.n	801a6b4 <_free_r+0x98>
 801a622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a626:	9001      	str	r0, [sp, #4]
 801a628:	2b00      	cmp	r3, #0
 801a62a:	f1a1 0404 	sub.w	r4, r1, #4
 801a62e:	bfb8      	it	lt
 801a630:	18e4      	addlt	r4, r4, r3
 801a632:	f000 ff77 	bl	801b524 <__malloc_lock>
 801a636:	4a20      	ldr	r2, [pc, #128]	; (801a6b8 <_free_r+0x9c>)
 801a638:	9801      	ldr	r0, [sp, #4]
 801a63a:	6813      	ldr	r3, [r2, #0]
 801a63c:	4615      	mov	r5, r2
 801a63e:	b933      	cbnz	r3, 801a64e <_free_r+0x32>
 801a640:	6063      	str	r3, [r4, #4]
 801a642:	6014      	str	r4, [r2, #0]
 801a644:	b003      	add	sp, #12
 801a646:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a64a:	f000 bf71 	b.w	801b530 <__malloc_unlock>
 801a64e:	42a3      	cmp	r3, r4
 801a650:	d90b      	bls.n	801a66a <_free_r+0x4e>
 801a652:	6821      	ldr	r1, [r4, #0]
 801a654:	1862      	adds	r2, r4, r1
 801a656:	4293      	cmp	r3, r2
 801a658:	bf04      	itt	eq
 801a65a:	681a      	ldreq	r2, [r3, #0]
 801a65c:	685b      	ldreq	r3, [r3, #4]
 801a65e:	6063      	str	r3, [r4, #4]
 801a660:	bf04      	itt	eq
 801a662:	1852      	addeq	r2, r2, r1
 801a664:	6022      	streq	r2, [r4, #0]
 801a666:	602c      	str	r4, [r5, #0]
 801a668:	e7ec      	b.n	801a644 <_free_r+0x28>
 801a66a:	461a      	mov	r2, r3
 801a66c:	685b      	ldr	r3, [r3, #4]
 801a66e:	b10b      	cbz	r3, 801a674 <_free_r+0x58>
 801a670:	42a3      	cmp	r3, r4
 801a672:	d9fa      	bls.n	801a66a <_free_r+0x4e>
 801a674:	6811      	ldr	r1, [r2, #0]
 801a676:	1855      	adds	r5, r2, r1
 801a678:	42a5      	cmp	r5, r4
 801a67a:	d10b      	bne.n	801a694 <_free_r+0x78>
 801a67c:	6824      	ldr	r4, [r4, #0]
 801a67e:	4421      	add	r1, r4
 801a680:	1854      	adds	r4, r2, r1
 801a682:	42a3      	cmp	r3, r4
 801a684:	6011      	str	r1, [r2, #0]
 801a686:	d1dd      	bne.n	801a644 <_free_r+0x28>
 801a688:	681c      	ldr	r4, [r3, #0]
 801a68a:	685b      	ldr	r3, [r3, #4]
 801a68c:	6053      	str	r3, [r2, #4]
 801a68e:	4421      	add	r1, r4
 801a690:	6011      	str	r1, [r2, #0]
 801a692:	e7d7      	b.n	801a644 <_free_r+0x28>
 801a694:	d902      	bls.n	801a69c <_free_r+0x80>
 801a696:	230c      	movs	r3, #12
 801a698:	6003      	str	r3, [r0, #0]
 801a69a:	e7d3      	b.n	801a644 <_free_r+0x28>
 801a69c:	6825      	ldr	r5, [r4, #0]
 801a69e:	1961      	adds	r1, r4, r5
 801a6a0:	428b      	cmp	r3, r1
 801a6a2:	bf04      	itt	eq
 801a6a4:	6819      	ldreq	r1, [r3, #0]
 801a6a6:	685b      	ldreq	r3, [r3, #4]
 801a6a8:	6063      	str	r3, [r4, #4]
 801a6aa:	bf04      	itt	eq
 801a6ac:	1949      	addeq	r1, r1, r5
 801a6ae:	6021      	streq	r1, [r4, #0]
 801a6b0:	6054      	str	r4, [r2, #4]
 801a6b2:	e7c7      	b.n	801a644 <_free_r+0x28>
 801a6b4:	b003      	add	sp, #12
 801a6b6:	bd30      	pop	{r4, r5, pc}
 801a6b8:	2000b5e8 	.word	0x2000b5e8

0801a6bc <_malloc_r>:
 801a6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6be:	1ccd      	adds	r5, r1, #3
 801a6c0:	f025 0503 	bic.w	r5, r5, #3
 801a6c4:	3508      	adds	r5, #8
 801a6c6:	2d0c      	cmp	r5, #12
 801a6c8:	bf38      	it	cc
 801a6ca:	250c      	movcc	r5, #12
 801a6cc:	2d00      	cmp	r5, #0
 801a6ce:	4606      	mov	r6, r0
 801a6d0:	db01      	blt.n	801a6d6 <_malloc_r+0x1a>
 801a6d2:	42a9      	cmp	r1, r5
 801a6d4:	d903      	bls.n	801a6de <_malloc_r+0x22>
 801a6d6:	230c      	movs	r3, #12
 801a6d8:	6033      	str	r3, [r6, #0]
 801a6da:	2000      	movs	r0, #0
 801a6dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a6de:	f000 ff21 	bl	801b524 <__malloc_lock>
 801a6e2:	4921      	ldr	r1, [pc, #132]	; (801a768 <_malloc_r+0xac>)
 801a6e4:	680a      	ldr	r2, [r1, #0]
 801a6e6:	4614      	mov	r4, r2
 801a6e8:	b99c      	cbnz	r4, 801a712 <_malloc_r+0x56>
 801a6ea:	4f20      	ldr	r7, [pc, #128]	; (801a76c <_malloc_r+0xb0>)
 801a6ec:	683b      	ldr	r3, [r7, #0]
 801a6ee:	b923      	cbnz	r3, 801a6fa <_malloc_r+0x3e>
 801a6f0:	4621      	mov	r1, r4
 801a6f2:	4630      	mov	r0, r6
 801a6f4:	f000 fbec 	bl	801aed0 <_sbrk_r>
 801a6f8:	6038      	str	r0, [r7, #0]
 801a6fa:	4629      	mov	r1, r5
 801a6fc:	4630      	mov	r0, r6
 801a6fe:	f000 fbe7 	bl	801aed0 <_sbrk_r>
 801a702:	1c43      	adds	r3, r0, #1
 801a704:	d123      	bne.n	801a74e <_malloc_r+0x92>
 801a706:	230c      	movs	r3, #12
 801a708:	6033      	str	r3, [r6, #0]
 801a70a:	4630      	mov	r0, r6
 801a70c:	f000 ff10 	bl	801b530 <__malloc_unlock>
 801a710:	e7e3      	b.n	801a6da <_malloc_r+0x1e>
 801a712:	6823      	ldr	r3, [r4, #0]
 801a714:	1b5b      	subs	r3, r3, r5
 801a716:	d417      	bmi.n	801a748 <_malloc_r+0x8c>
 801a718:	2b0b      	cmp	r3, #11
 801a71a:	d903      	bls.n	801a724 <_malloc_r+0x68>
 801a71c:	6023      	str	r3, [r4, #0]
 801a71e:	441c      	add	r4, r3
 801a720:	6025      	str	r5, [r4, #0]
 801a722:	e004      	b.n	801a72e <_malloc_r+0x72>
 801a724:	6863      	ldr	r3, [r4, #4]
 801a726:	42a2      	cmp	r2, r4
 801a728:	bf0c      	ite	eq
 801a72a:	600b      	streq	r3, [r1, #0]
 801a72c:	6053      	strne	r3, [r2, #4]
 801a72e:	4630      	mov	r0, r6
 801a730:	f000 fefe 	bl	801b530 <__malloc_unlock>
 801a734:	f104 000b 	add.w	r0, r4, #11
 801a738:	1d23      	adds	r3, r4, #4
 801a73a:	f020 0007 	bic.w	r0, r0, #7
 801a73e:	1ac2      	subs	r2, r0, r3
 801a740:	d0cc      	beq.n	801a6dc <_malloc_r+0x20>
 801a742:	1a1b      	subs	r3, r3, r0
 801a744:	50a3      	str	r3, [r4, r2]
 801a746:	e7c9      	b.n	801a6dc <_malloc_r+0x20>
 801a748:	4622      	mov	r2, r4
 801a74a:	6864      	ldr	r4, [r4, #4]
 801a74c:	e7cc      	b.n	801a6e8 <_malloc_r+0x2c>
 801a74e:	1cc4      	adds	r4, r0, #3
 801a750:	f024 0403 	bic.w	r4, r4, #3
 801a754:	42a0      	cmp	r0, r4
 801a756:	d0e3      	beq.n	801a720 <_malloc_r+0x64>
 801a758:	1a21      	subs	r1, r4, r0
 801a75a:	4630      	mov	r0, r6
 801a75c:	f000 fbb8 	bl	801aed0 <_sbrk_r>
 801a760:	3001      	adds	r0, #1
 801a762:	d1dd      	bne.n	801a720 <_malloc_r+0x64>
 801a764:	e7cf      	b.n	801a706 <_malloc_r+0x4a>
 801a766:	bf00      	nop
 801a768:	2000b5e8 	.word	0x2000b5e8
 801a76c:	2000b5ec 	.word	0x2000b5ec

0801a770 <__sfputc_r>:
 801a770:	6893      	ldr	r3, [r2, #8]
 801a772:	3b01      	subs	r3, #1
 801a774:	2b00      	cmp	r3, #0
 801a776:	b410      	push	{r4}
 801a778:	6093      	str	r3, [r2, #8]
 801a77a:	da08      	bge.n	801a78e <__sfputc_r+0x1e>
 801a77c:	6994      	ldr	r4, [r2, #24]
 801a77e:	42a3      	cmp	r3, r4
 801a780:	db01      	blt.n	801a786 <__sfputc_r+0x16>
 801a782:	290a      	cmp	r1, #10
 801a784:	d103      	bne.n	801a78e <__sfputc_r+0x1e>
 801a786:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a78a:	f000 bca3 	b.w	801b0d4 <__swbuf_r>
 801a78e:	6813      	ldr	r3, [r2, #0]
 801a790:	1c58      	adds	r0, r3, #1
 801a792:	6010      	str	r0, [r2, #0]
 801a794:	7019      	strb	r1, [r3, #0]
 801a796:	4608      	mov	r0, r1
 801a798:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a79c:	4770      	bx	lr

0801a79e <__sfputs_r>:
 801a79e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7a0:	4606      	mov	r6, r0
 801a7a2:	460f      	mov	r7, r1
 801a7a4:	4614      	mov	r4, r2
 801a7a6:	18d5      	adds	r5, r2, r3
 801a7a8:	42ac      	cmp	r4, r5
 801a7aa:	d101      	bne.n	801a7b0 <__sfputs_r+0x12>
 801a7ac:	2000      	movs	r0, #0
 801a7ae:	e007      	b.n	801a7c0 <__sfputs_r+0x22>
 801a7b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a7b4:	463a      	mov	r2, r7
 801a7b6:	4630      	mov	r0, r6
 801a7b8:	f7ff ffda 	bl	801a770 <__sfputc_r>
 801a7bc:	1c43      	adds	r3, r0, #1
 801a7be:	d1f3      	bne.n	801a7a8 <__sfputs_r+0xa>
 801a7c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a7c4 <_vfiprintf_r>:
 801a7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7c8:	460d      	mov	r5, r1
 801a7ca:	b09d      	sub	sp, #116	; 0x74
 801a7cc:	4614      	mov	r4, r2
 801a7ce:	4698      	mov	r8, r3
 801a7d0:	4606      	mov	r6, r0
 801a7d2:	b118      	cbz	r0, 801a7dc <_vfiprintf_r+0x18>
 801a7d4:	6983      	ldr	r3, [r0, #24]
 801a7d6:	b90b      	cbnz	r3, 801a7dc <_vfiprintf_r+0x18>
 801a7d8:	f7ff fdfa 	bl	801a3d0 <__sinit>
 801a7dc:	4b89      	ldr	r3, [pc, #548]	; (801aa04 <_vfiprintf_r+0x240>)
 801a7de:	429d      	cmp	r5, r3
 801a7e0:	d11b      	bne.n	801a81a <_vfiprintf_r+0x56>
 801a7e2:	6875      	ldr	r5, [r6, #4]
 801a7e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a7e6:	07d9      	lsls	r1, r3, #31
 801a7e8:	d405      	bmi.n	801a7f6 <_vfiprintf_r+0x32>
 801a7ea:	89ab      	ldrh	r3, [r5, #12]
 801a7ec:	059a      	lsls	r2, r3, #22
 801a7ee:	d402      	bmi.n	801a7f6 <_vfiprintf_r+0x32>
 801a7f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a7f2:	f7ff fec2 	bl	801a57a <__retarget_lock_acquire_recursive>
 801a7f6:	89ab      	ldrh	r3, [r5, #12]
 801a7f8:	071b      	lsls	r3, r3, #28
 801a7fa:	d501      	bpl.n	801a800 <_vfiprintf_r+0x3c>
 801a7fc:	692b      	ldr	r3, [r5, #16]
 801a7fe:	b9eb      	cbnz	r3, 801a83c <_vfiprintf_r+0x78>
 801a800:	4629      	mov	r1, r5
 801a802:	4630      	mov	r0, r6
 801a804:	f000 fcca 	bl	801b19c <__swsetup_r>
 801a808:	b1c0      	cbz	r0, 801a83c <_vfiprintf_r+0x78>
 801a80a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a80c:	07dc      	lsls	r4, r3, #31
 801a80e:	d50e      	bpl.n	801a82e <_vfiprintf_r+0x6a>
 801a810:	f04f 30ff 	mov.w	r0, #4294967295
 801a814:	b01d      	add	sp, #116	; 0x74
 801a816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a81a:	4b7b      	ldr	r3, [pc, #492]	; (801aa08 <_vfiprintf_r+0x244>)
 801a81c:	429d      	cmp	r5, r3
 801a81e:	d101      	bne.n	801a824 <_vfiprintf_r+0x60>
 801a820:	68b5      	ldr	r5, [r6, #8]
 801a822:	e7df      	b.n	801a7e4 <_vfiprintf_r+0x20>
 801a824:	4b79      	ldr	r3, [pc, #484]	; (801aa0c <_vfiprintf_r+0x248>)
 801a826:	429d      	cmp	r5, r3
 801a828:	bf08      	it	eq
 801a82a:	68f5      	ldreq	r5, [r6, #12]
 801a82c:	e7da      	b.n	801a7e4 <_vfiprintf_r+0x20>
 801a82e:	89ab      	ldrh	r3, [r5, #12]
 801a830:	0598      	lsls	r0, r3, #22
 801a832:	d4ed      	bmi.n	801a810 <_vfiprintf_r+0x4c>
 801a834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a836:	f7ff fea1 	bl	801a57c <__retarget_lock_release_recursive>
 801a83a:	e7e9      	b.n	801a810 <_vfiprintf_r+0x4c>
 801a83c:	2300      	movs	r3, #0
 801a83e:	9309      	str	r3, [sp, #36]	; 0x24
 801a840:	2320      	movs	r3, #32
 801a842:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a846:	f8cd 800c 	str.w	r8, [sp, #12]
 801a84a:	2330      	movs	r3, #48	; 0x30
 801a84c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801aa10 <_vfiprintf_r+0x24c>
 801a850:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a854:	f04f 0901 	mov.w	r9, #1
 801a858:	4623      	mov	r3, r4
 801a85a:	469a      	mov	sl, r3
 801a85c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a860:	b10a      	cbz	r2, 801a866 <_vfiprintf_r+0xa2>
 801a862:	2a25      	cmp	r2, #37	; 0x25
 801a864:	d1f9      	bne.n	801a85a <_vfiprintf_r+0x96>
 801a866:	ebba 0b04 	subs.w	fp, sl, r4
 801a86a:	d00b      	beq.n	801a884 <_vfiprintf_r+0xc0>
 801a86c:	465b      	mov	r3, fp
 801a86e:	4622      	mov	r2, r4
 801a870:	4629      	mov	r1, r5
 801a872:	4630      	mov	r0, r6
 801a874:	f7ff ff93 	bl	801a79e <__sfputs_r>
 801a878:	3001      	adds	r0, #1
 801a87a:	f000 80aa 	beq.w	801a9d2 <_vfiprintf_r+0x20e>
 801a87e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a880:	445a      	add	r2, fp
 801a882:	9209      	str	r2, [sp, #36]	; 0x24
 801a884:	f89a 3000 	ldrb.w	r3, [sl]
 801a888:	2b00      	cmp	r3, #0
 801a88a:	f000 80a2 	beq.w	801a9d2 <_vfiprintf_r+0x20e>
 801a88e:	2300      	movs	r3, #0
 801a890:	f04f 32ff 	mov.w	r2, #4294967295
 801a894:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a898:	f10a 0a01 	add.w	sl, sl, #1
 801a89c:	9304      	str	r3, [sp, #16]
 801a89e:	9307      	str	r3, [sp, #28]
 801a8a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a8a4:	931a      	str	r3, [sp, #104]	; 0x68
 801a8a6:	4654      	mov	r4, sl
 801a8a8:	2205      	movs	r2, #5
 801a8aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a8ae:	4858      	ldr	r0, [pc, #352]	; (801aa10 <_vfiprintf_r+0x24c>)
 801a8b0:	f7e5 fc96 	bl	80001e0 <memchr>
 801a8b4:	9a04      	ldr	r2, [sp, #16]
 801a8b6:	b9d8      	cbnz	r0, 801a8f0 <_vfiprintf_r+0x12c>
 801a8b8:	06d1      	lsls	r1, r2, #27
 801a8ba:	bf44      	itt	mi
 801a8bc:	2320      	movmi	r3, #32
 801a8be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a8c2:	0713      	lsls	r3, r2, #28
 801a8c4:	bf44      	itt	mi
 801a8c6:	232b      	movmi	r3, #43	; 0x2b
 801a8c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a8cc:	f89a 3000 	ldrb.w	r3, [sl]
 801a8d0:	2b2a      	cmp	r3, #42	; 0x2a
 801a8d2:	d015      	beq.n	801a900 <_vfiprintf_r+0x13c>
 801a8d4:	9a07      	ldr	r2, [sp, #28]
 801a8d6:	4654      	mov	r4, sl
 801a8d8:	2000      	movs	r0, #0
 801a8da:	f04f 0c0a 	mov.w	ip, #10
 801a8de:	4621      	mov	r1, r4
 801a8e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a8e4:	3b30      	subs	r3, #48	; 0x30
 801a8e6:	2b09      	cmp	r3, #9
 801a8e8:	d94e      	bls.n	801a988 <_vfiprintf_r+0x1c4>
 801a8ea:	b1b0      	cbz	r0, 801a91a <_vfiprintf_r+0x156>
 801a8ec:	9207      	str	r2, [sp, #28]
 801a8ee:	e014      	b.n	801a91a <_vfiprintf_r+0x156>
 801a8f0:	eba0 0308 	sub.w	r3, r0, r8
 801a8f4:	fa09 f303 	lsl.w	r3, r9, r3
 801a8f8:	4313      	orrs	r3, r2
 801a8fa:	9304      	str	r3, [sp, #16]
 801a8fc:	46a2      	mov	sl, r4
 801a8fe:	e7d2      	b.n	801a8a6 <_vfiprintf_r+0xe2>
 801a900:	9b03      	ldr	r3, [sp, #12]
 801a902:	1d19      	adds	r1, r3, #4
 801a904:	681b      	ldr	r3, [r3, #0]
 801a906:	9103      	str	r1, [sp, #12]
 801a908:	2b00      	cmp	r3, #0
 801a90a:	bfbb      	ittet	lt
 801a90c:	425b      	neglt	r3, r3
 801a90e:	f042 0202 	orrlt.w	r2, r2, #2
 801a912:	9307      	strge	r3, [sp, #28]
 801a914:	9307      	strlt	r3, [sp, #28]
 801a916:	bfb8      	it	lt
 801a918:	9204      	strlt	r2, [sp, #16]
 801a91a:	7823      	ldrb	r3, [r4, #0]
 801a91c:	2b2e      	cmp	r3, #46	; 0x2e
 801a91e:	d10c      	bne.n	801a93a <_vfiprintf_r+0x176>
 801a920:	7863      	ldrb	r3, [r4, #1]
 801a922:	2b2a      	cmp	r3, #42	; 0x2a
 801a924:	d135      	bne.n	801a992 <_vfiprintf_r+0x1ce>
 801a926:	9b03      	ldr	r3, [sp, #12]
 801a928:	1d1a      	adds	r2, r3, #4
 801a92a:	681b      	ldr	r3, [r3, #0]
 801a92c:	9203      	str	r2, [sp, #12]
 801a92e:	2b00      	cmp	r3, #0
 801a930:	bfb8      	it	lt
 801a932:	f04f 33ff 	movlt.w	r3, #4294967295
 801a936:	3402      	adds	r4, #2
 801a938:	9305      	str	r3, [sp, #20]
 801a93a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801aa20 <_vfiprintf_r+0x25c>
 801a93e:	7821      	ldrb	r1, [r4, #0]
 801a940:	2203      	movs	r2, #3
 801a942:	4650      	mov	r0, sl
 801a944:	f7e5 fc4c 	bl	80001e0 <memchr>
 801a948:	b140      	cbz	r0, 801a95c <_vfiprintf_r+0x198>
 801a94a:	2340      	movs	r3, #64	; 0x40
 801a94c:	eba0 000a 	sub.w	r0, r0, sl
 801a950:	fa03 f000 	lsl.w	r0, r3, r0
 801a954:	9b04      	ldr	r3, [sp, #16]
 801a956:	4303      	orrs	r3, r0
 801a958:	3401      	adds	r4, #1
 801a95a:	9304      	str	r3, [sp, #16]
 801a95c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a960:	482c      	ldr	r0, [pc, #176]	; (801aa14 <_vfiprintf_r+0x250>)
 801a962:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a966:	2206      	movs	r2, #6
 801a968:	f7e5 fc3a 	bl	80001e0 <memchr>
 801a96c:	2800      	cmp	r0, #0
 801a96e:	d03f      	beq.n	801a9f0 <_vfiprintf_r+0x22c>
 801a970:	4b29      	ldr	r3, [pc, #164]	; (801aa18 <_vfiprintf_r+0x254>)
 801a972:	bb1b      	cbnz	r3, 801a9bc <_vfiprintf_r+0x1f8>
 801a974:	9b03      	ldr	r3, [sp, #12]
 801a976:	3307      	adds	r3, #7
 801a978:	f023 0307 	bic.w	r3, r3, #7
 801a97c:	3308      	adds	r3, #8
 801a97e:	9303      	str	r3, [sp, #12]
 801a980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a982:	443b      	add	r3, r7
 801a984:	9309      	str	r3, [sp, #36]	; 0x24
 801a986:	e767      	b.n	801a858 <_vfiprintf_r+0x94>
 801a988:	fb0c 3202 	mla	r2, ip, r2, r3
 801a98c:	460c      	mov	r4, r1
 801a98e:	2001      	movs	r0, #1
 801a990:	e7a5      	b.n	801a8de <_vfiprintf_r+0x11a>
 801a992:	2300      	movs	r3, #0
 801a994:	3401      	adds	r4, #1
 801a996:	9305      	str	r3, [sp, #20]
 801a998:	4619      	mov	r1, r3
 801a99a:	f04f 0c0a 	mov.w	ip, #10
 801a99e:	4620      	mov	r0, r4
 801a9a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a9a4:	3a30      	subs	r2, #48	; 0x30
 801a9a6:	2a09      	cmp	r2, #9
 801a9a8:	d903      	bls.n	801a9b2 <_vfiprintf_r+0x1ee>
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	d0c5      	beq.n	801a93a <_vfiprintf_r+0x176>
 801a9ae:	9105      	str	r1, [sp, #20]
 801a9b0:	e7c3      	b.n	801a93a <_vfiprintf_r+0x176>
 801a9b2:	fb0c 2101 	mla	r1, ip, r1, r2
 801a9b6:	4604      	mov	r4, r0
 801a9b8:	2301      	movs	r3, #1
 801a9ba:	e7f0      	b.n	801a99e <_vfiprintf_r+0x1da>
 801a9bc:	ab03      	add	r3, sp, #12
 801a9be:	9300      	str	r3, [sp, #0]
 801a9c0:	462a      	mov	r2, r5
 801a9c2:	4b16      	ldr	r3, [pc, #88]	; (801aa1c <_vfiprintf_r+0x258>)
 801a9c4:	a904      	add	r1, sp, #16
 801a9c6:	4630      	mov	r0, r6
 801a9c8:	f3af 8000 	nop.w
 801a9cc:	4607      	mov	r7, r0
 801a9ce:	1c78      	adds	r0, r7, #1
 801a9d0:	d1d6      	bne.n	801a980 <_vfiprintf_r+0x1bc>
 801a9d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a9d4:	07d9      	lsls	r1, r3, #31
 801a9d6:	d405      	bmi.n	801a9e4 <_vfiprintf_r+0x220>
 801a9d8:	89ab      	ldrh	r3, [r5, #12]
 801a9da:	059a      	lsls	r2, r3, #22
 801a9dc:	d402      	bmi.n	801a9e4 <_vfiprintf_r+0x220>
 801a9de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a9e0:	f7ff fdcc 	bl	801a57c <__retarget_lock_release_recursive>
 801a9e4:	89ab      	ldrh	r3, [r5, #12]
 801a9e6:	065b      	lsls	r3, r3, #25
 801a9e8:	f53f af12 	bmi.w	801a810 <_vfiprintf_r+0x4c>
 801a9ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a9ee:	e711      	b.n	801a814 <_vfiprintf_r+0x50>
 801a9f0:	ab03      	add	r3, sp, #12
 801a9f2:	9300      	str	r3, [sp, #0]
 801a9f4:	462a      	mov	r2, r5
 801a9f6:	4b09      	ldr	r3, [pc, #36]	; (801aa1c <_vfiprintf_r+0x258>)
 801a9f8:	a904      	add	r1, sp, #16
 801a9fa:	4630      	mov	r0, r6
 801a9fc:	f000 f880 	bl	801ab00 <_printf_i>
 801aa00:	e7e4      	b.n	801a9cc <_vfiprintf_r+0x208>
 801aa02:	bf00      	nop
 801aa04:	0801f780 	.word	0x0801f780
 801aa08:	0801f7a0 	.word	0x0801f7a0
 801aa0c:	0801f760 	.word	0x0801f760
 801aa10:	0801f7c4 	.word	0x0801f7c4
 801aa14:	0801f7ce 	.word	0x0801f7ce
 801aa18:	00000000 	.word	0x00000000
 801aa1c:	0801a79f 	.word	0x0801a79f
 801aa20:	0801f7ca 	.word	0x0801f7ca

0801aa24 <_printf_common>:
 801aa24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aa28:	4616      	mov	r6, r2
 801aa2a:	4699      	mov	r9, r3
 801aa2c:	688a      	ldr	r2, [r1, #8]
 801aa2e:	690b      	ldr	r3, [r1, #16]
 801aa30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801aa34:	4293      	cmp	r3, r2
 801aa36:	bfb8      	it	lt
 801aa38:	4613      	movlt	r3, r2
 801aa3a:	6033      	str	r3, [r6, #0]
 801aa3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801aa40:	4607      	mov	r7, r0
 801aa42:	460c      	mov	r4, r1
 801aa44:	b10a      	cbz	r2, 801aa4a <_printf_common+0x26>
 801aa46:	3301      	adds	r3, #1
 801aa48:	6033      	str	r3, [r6, #0]
 801aa4a:	6823      	ldr	r3, [r4, #0]
 801aa4c:	0699      	lsls	r1, r3, #26
 801aa4e:	bf42      	ittt	mi
 801aa50:	6833      	ldrmi	r3, [r6, #0]
 801aa52:	3302      	addmi	r3, #2
 801aa54:	6033      	strmi	r3, [r6, #0]
 801aa56:	6825      	ldr	r5, [r4, #0]
 801aa58:	f015 0506 	ands.w	r5, r5, #6
 801aa5c:	d106      	bne.n	801aa6c <_printf_common+0x48>
 801aa5e:	f104 0a19 	add.w	sl, r4, #25
 801aa62:	68e3      	ldr	r3, [r4, #12]
 801aa64:	6832      	ldr	r2, [r6, #0]
 801aa66:	1a9b      	subs	r3, r3, r2
 801aa68:	42ab      	cmp	r3, r5
 801aa6a:	dc26      	bgt.n	801aaba <_printf_common+0x96>
 801aa6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801aa70:	1e13      	subs	r3, r2, #0
 801aa72:	6822      	ldr	r2, [r4, #0]
 801aa74:	bf18      	it	ne
 801aa76:	2301      	movne	r3, #1
 801aa78:	0692      	lsls	r2, r2, #26
 801aa7a:	d42b      	bmi.n	801aad4 <_printf_common+0xb0>
 801aa7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801aa80:	4649      	mov	r1, r9
 801aa82:	4638      	mov	r0, r7
 801aa84:	47c0      	blx	r8
 801aa86:	3001      	adds	r0, #1
 801aa88:	d01e      	beq.n	801aac8 <_printf_common+0xa4>
 801aa8a:	6823      	ldr	r3, [r4, #0]
 801aa8c:	68e5      	ldr	r5, [r4, #12]
 801aa8e:	6832      	ldr	r2, [r6, #0]
 801aa90:	f003 0306 	and.w	r3, r3, #6
 801aa94:	2b04      	cmp	r3, #4
 801aa96:	bf08      	it	eq
 801aa98:	1aad      	subeq	r5, r5, r2
 801aa9a:	68a3      	ldr	r3, [r4, #8]
 801aa9c:	6922      	ldr	r2, [r4, #16]
 801aa9e:	bf0c      	ite	eq
 801aaa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801aaa4:	2500      	movne	r5, #0
 801aaa6:	4293      	cmp	r3, r2
 801aaa8:	bfc4      	itt	gt
 801aaaa:	1a9b      	subgt	r3, r3, r2
 801aaac:	18ed      	addgt	r5, r5, r3
 801aaae:	2600      	movs	r6, #0
 801aab0:	341a      	adds	r4, #26
 801aab2:	42b5      	cmp	r5, r6
 801aab4:	d11a      	bne.n	801aaec <_printf_common+0xc8>
 801aab6:	2000      	movs	r0, #0
 801aab8:	e008      	b.n	801aacc <_printf_common+0xa8>
 801aaba:	2301      	movs	r3, #1
 801aabc:	4652      	mov	r2, sl
 801aabe:	4649      	mov	r1, r9
 801aac0:	4638      	mov	r0, r7
 801aac2:	47c0      	blx	r8
 801aac4:	3001      	adds	r0, #1
 801aac6:	d103      	bne.n	801aad0 <_printf_common+0xac>
 801aac8:	f04f 30ff 	mov.w	r0, #4294967295
 801aacc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aad0:	3501      	adds	r5, #1
 801aad2:	e7c6      	b.n	801aa62 <_printf_common+0x3e>
 801aad4:	18e1      	adds	r1, r4, r3
 801aad6:	1c5a      	adds	r2, r3, #1
 801aad8:	2030      	movs	r0, #48	; 0x30
 801aada:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801aade:	4422      	add	r2, r4
 801aae0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801aae4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801aae8:	3302      	adds	r3, #2
 801aaea:	e7c7      	b.n	801aa7c <_printf_common+0x58>
 801aaec:	2301      	movs	r3, #1
 801aaee:	4622      	mov	r2, r4
 801aaf0:	4649      	mov	r1, r9
 801aaf2:	4638      	mov	r0, r7
 801aaf4:	47c0      	blx	r8
 801aaf6:	3001      	adds	r0, #1
 801aaf8:	d0e6      	beq.n	801aac8 <_printf_common+0xa4>
 801aafa:	3601      	adds	r6, #1
 801aafc:	e7d9      	b.n	801aab2 <_printf_common+0x8e>
	...

0801ab00 <_printf_i>:
 801ab00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ab04:	460c      	mov	r4, r1
 801ab06:	4691      	mov	r9, r2
 801ab08:	7e27      	ldrb	r7, [r4, #24]
 801ab0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ab0c:	2f78      	cmp	r7, #120	; 0x78
 801ab0e:	4680      	mov	r8, r0
 801ab10:	469a      	mov	sl, r3
 801ab12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ab16:	d807      	bhi.n	801ab28 <_printf_i+0x28>
 801ab18:	2f62      	cmp	r7, #98	; 0x62
 801ab1a:	d80a      	bhi.n	801ab32 <_printf_i+0x32>
 801ab1c:	2f00      	cmp	r7, #0
 801ab1e:	f000 80d8 	beq.w	801acd2 <_printf_i+0x1d2>
 801ab22:	2f58      	cmp	r7, #88	; 0x58
 801ab24:	f000 80a3 	beq.w	801ac6e <_printf_i+0x16e>
 801ab28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801ab2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ab30:	e03a      	b.n	801aba8 <_printf_i+0xa8>
 801ab32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ab36:	2b15      	cmp	r3, #21
 801ab38:	d8f6      	bhi.n	801ab28 <_printf_i+0x28>
 801ab3a:	a001      	add	r0, pc, #4	; (adr r0, 801ab40 <_printf_i+0x40>)
 801ab3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801ab40:	0801ab99 	.word	0x0801ab99
 801ab44:	0801abad 	.word	0x0801abad
 801ab48:	0801ab29 	.word	0x0801ab29
 801ab4c:	0801ab29 	.word	0x0801ab29
 801ab50:	0801ab29 	.word	0x0801ab29
 801ab54:	0801ab29 	.word	0x0801ab29
 801ab58:	0801abad 	.word	0x0801abad
 801ab5c:	0801ab29 	.word	0x0801ab29
 801ab60:	0801ab29 	.word	0x0801ab29
 801ab64:	0801ab29 	.word	0x0801ab29
 801ab68:	0801ab29 	.word	0x0801ab29
 801ab6c:	0801acb9 	.word	0x0801acb9
 801ab70:	0801abdd 	.word	0x0801abdd
 801ab74:	0801ac9b 	.word	0x0801ac9b
 801ab78:	0801ab29 	.word	0x0801ab29
 801ab7c:	0801ab29 	.word	0x0801ab29
 801ab80:	0801acdb 	.word	0x0801acdb
 801ab84:	0801ab29 	.word	0x0801ab29
 801ab88:	0801abdd 	.word	0x0801abdd
 801ab8c:	0801ab29 	.word	0x0801ab29
 801ab90:	0801ab29 	.word	0x0801ab29
 801ab94:	0801aca3 	.word	0x0801aca3
 801ab98:	680b      	ldr	r3, [r1, #0]
 801ab9a:	1d1a      	adds	r2, r3, #4
 801ab9c:	681b      	ldr	r3, [r3, #0]
 801ab9e:	600a      	str	r2, [r1, #0]
 801aba0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801aba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801aba8:	2301      	movs	r3, #1
 801abaa:	e0a3      	b.n	801acf4 <_printf_i+0x1f4>
 801abac:	6825      	ldr	r5, [r4, #0]
 801abae:	6808      	ldr	r0, [r1, #0]
 801abb0:	062e      	lsls	r6, r5, #24
 801abb2:	f100 0304 	add.w	r3, r0, #4
 801abb6:	d50a      	bpl.n	801abce <_printf_i+0xce>
 801abb8:	6805      	ldr	r5, [r0, #0]
 801abba:	600b      	str	r3, [r1, #0]
 801abbc:	2d00      	cmp	r5, #0
 801abbe:	da03      	bge.n	801abc8 <_printf_i+0xc8>
 801abc0:	232d      	movs	r3, #45	; 0x2d
 801abc2:	426d      	negs	r5, r5
 801abc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801abc8:	485e      	ldr	r0, [pc, #376]	; (801ad44 <_printf_i+0x244>)
 801abca:	230a      	movs	r3, #10
 801abcc:	e019      	b.n	801ac02 <_printf_i+0x102>
 801abce:	f015 0f40 	tst.w	r5, #64	; 0x40
 801abd2:	6805      	ldr	r5, [r0, #0]
 801abd4:	600b      	str	r3, [r1, #0]
 801abd6:	bf18      	it	ne
 801abd8:	b22d      	sxthne	r5, r5
 801abda:	e7ef      	b.n	801abbc <_printf_i+0xbc>
 801abdc:	680b      	ldr	r3, [r1, #0]
 801abde:	6825      	ldr	r5, [r4, #0]
 801abe0:	1d18      	adds	r0, r3, #4
 801abe2:	6008      	str	r0, [r1, #0]
 801abe4:	0628      	lsls	r0, r5, #24
 801abe6:	d501      	bpl.n	801abec <_printf_i+0xec>
 801abe8:	681d      	ldr	r5, [r3, #0]
 801abea:	e002      	b.n	801abf2 <_printf_i+0xf2>
 801abec:	0669      	lsls	r1, r5, #25
 801abee:	d5fb      	bpl.n	801abe8 <_printf_i+0xe8>
 801abf0:	881d      	ldrh	r5, [r3, #0]
 801abf2:	4854      	ldr	r0, [pc, #336]	; (801ad44 <_printf_i+0x244>)
 801abf4:	2f6f      	cmp	r7, #111	; 0x6f
 801abf6:	bf0c      	ite	eq
 801abf8:	2308      	moveq	r3, #8
 801abfa:	230a      	movne	r3, #10
 801abfc:	2100      	movs	r1, #0
 801abfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ac02:	6866      	ldr	r6, [r4, #4]
 801ac04:	60a6      	str	r6, [r4, #8]
 801ac06:	2e00      	cmp	r6, #0
 801ac08:	bfa2      	ittt	ge
 801ac0a:	6821      	ldrge	r1, [r4, #0]
 801ac0c:	f021 0104 	bicge.w	r1, r1, #4
 801ac10:	6021      	strge	r1, [r4, #0]
 801ac12:	b90d      	cbnz	r5, 801ac18 <_printf_i+0x118>
 801ac14:	2e00      	cmp	r6, #0
 801ac16:	d04d      	beq.n	801acb4 <_printf_i+0x1b4>
 801ac18:	4616      	mov	r6, r2
 801ac1a:	fbb5 f1f3 	udiv	r1, r5, r3
 801ac1e:	fb03 5711 	mls	r7, r3, r1, r5
 801ac22:	5dc7      	ldrb	r7, [r0, r7]
 801ac24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ac28:	462f      	mov	r7, r5
 801ac2a:	42bb      	cmp	r3, r7
 801ac2c:	460d      	mov	r5, r1
 801ac2e:	d9f4      	bls.n	801ac1a <_printf_i+0x11a>
 801ac30:	2b08      	cmp	r3, #8
 801ac32:	d10b      	bne.n	801ac4c <_printf_i+0x14c>
 801ac34:	6823      	ldr	r3, [r4, #0]
 801ac36:	07df      	lsls	r7, r3, #31
 801ac38:	d508      	bpl.n	801ac4c <_printf_i+0x14c>
 801ac3a:	6923      	ldr	r3, [r4, #16]
 801ac3c:	6861      	ldr	r1, [r4, #4]
 801ac3e:	4299      	cmp	r1, r3
 801ac40:	bfde      	ittt	le
 801ac42:	2330      	movle	r3, #48	; 0x30
 801ac44:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ac48:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ac4c:	1b92      	subs	r2, r2, r6
 801ac4e:	6122      	str	r2, [r4, #16]
 801ac50:	f8cd a000 	str.w	sl, [sp]
 801ac54:	464b      	mov	r3, r9
 801ac56:	aa03      	add	r2, sp, #12
 801ac58:	4621      	mov	r1, r4
 801ac5a:	4640      	mov	r0, r8
 801ac5c:	f7ff fee2 	bl	801aa24 <_printf_common>
 801ac60:	3001      	adds	r0, #1
 801ac62:	d14c      	bne.n	801acfe <_printf_i+0x1fe>
 801ac64:	f04f 30ff 	mov.w	r0, #4294967295
 801ac68:	b004      	add	sp, #16
 801ac6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac6e:	4835      	ldr	r0, [pc, #212]	; (801ad44 <_printf_i+0x244>)
 801ac70:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ac74:	6823      	ldr	r3, [r4, #0]
 801ac76:	680e      	ldr	r6, [r1, #0]
 801ac78:	061f      	lsls	r7, r3, #24
 801ac7a:	f856 5b04 	ldr.w	r5, [r6], #4
 801ac7e:	600e      	str	r6, [r1, #0]
 801ac80:	d514      	bpl.n	801acac <_printf_i+0x1ac>
 801ac82:	07d9      	lsls	r1, r3, #31
 801ac84:	bf44      	itt	mi
 801ac86:	f043 0320 	orrmi.w	r3, r3, #32
 801ac8a:	6023      	strmi	r3, [r4, #0]
 801ac8c:	b91d      	cbnz	r5, 801ac96 <_printf_i+0x196>
 801ac8e:	6823      	ldr	r3, [r4, #0]
 801ac90:	f023 0320 	bic.w	r3, r3, #32
 801ac94:	6023      	str	r3, [r4, #0]
 801ac96:	2310      	movs	r3, #16
 801ac98:	e7b0      	b.n	801abfc <_printf_i+0xfc>
 801ac9a:	6823      	ldr	r3, [r4, #0]
 801ac9c:	f043 0320 	orr.w	r3, r3, #32
 801aca0:	6023      	str	r3, [r4, #0]
 801aca2:	2378      	movs	r3, #120	; 0x78
 801aca4:	4828      	ldr	r0, [pc, #160]	; (801ad48 <_printf_i+0x248>)
 801aca6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801acaa:	e7e3      	b.n	801ac74 <_printf_i+0x174>
 801acac:	065e      	lsls	r6, r3, #25
 801acae:	bf48      	it	mi
 801acb0:	b2ad      	uxthmi	r5, r5
 801acb2:	e7e6      	b.n	801ac82 <_printf_i+0x182>
 801acb4:	4616      	mov	r6, r2
 801acb6:	e7bb      	b.n	801ac30 <_printf_i+0x130>
 801acb8:	680b      	ldr	r3, [r1, #0]
 801acba:	6826      	ldr	r6, [r4, #0]
 801acbc:	6960      	ldr	r0, [r4, #20]
 801acbe:	1d1d      	adds	r5, r3, #4
 801acc0:	600d      	str	r5, [r1, #0]
 801acc2:	0635      	lsls	r5, r6, #24
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	d501      	bpl.n	801accc <_printf_i+0x1cc>
 801acc8:	6018      	str	r0, [r3, #0]
 801acca:	e002      	b.n	801acd2 <_printf_i+0x1d2>
 801accc:	0671      	lsls	r1, r6, #25
 801acce:	d5fb      	bpl.n	801acc8 <_printf_i+0x1c8>
 801acd0:	8018      	strh	r0, [r3, #0]
 801acd2:	2300      	movs	r3, #0
 801acd4:	6123      	str	r3, [r4, #16]
 801acd6:	4616      	mov	r6, r2
 801acd8:	e7ba      	b.n	801ac50 <_printf_i+0x150>
 801acda:	680b      	ldr	r3, [r1, #0]
 801acdc:	1d1a      	adds	r2, r3, #4
 801acde:	600a      	str	r2, [r1, #0]
 801ace0:	681e      	ldr	r6, [r3, #0]
 801ace2:	6862      	ldr	r2, [r4, #4]
 801ace4:	2100      	movs	r1, #0
 801ace6:	4630      	mov	r0, r6
 801ace8:	f7e5 fa7a 	bl	80001e0 <memchr>
 801acec:	b108      	cbz	r0, 801acf2 <_printf_i+0x1f2>
 801acee:	1b80      	subs	r0, r0, r6
 801acf0:	6060      	str	r0, [r4, #4]
 801acf2:	6863      	ldr	r3, [r4, #4]
 801acf4:	6123      	str	r3, [r4, #16]
 801acf6:	2300      	movs	r3, #0
 801acf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801acfc:	e7a8      	b.n	801ac50 <_printf_i+0x150>
 801acfe:	6923      	ldr	r3, [r4, #16]
 801ad00:	4632      	mov	r2, r6
 801ad02:	4649      	mov	r1, r9
 801ad04:	4640      	mov	r0, r8
 801ad06:	47d0      	blx	sl
 801ad08:	3001      	adds	r0, #1
 801ad0a:	d0ab      	beq.n	801ac64 <_printf_i+0x164>
 801ad0c:	6823      	ldr	r3, [r4, #0]
 801ad0e:	079b      	lsls	r3, r3, #30
 801ad10:	d413      	bmi.n	801ad3a <_printf_i+0x23a>
 801ad12:	68e0      	ldr	r0, [r4, #12]
 801ad14:	9b03      	ldr	r3, [sp, #12]
 801ad16:	4298      	cmp	r0, r3
 801ad18:	bfb8      	it	lt
 801ad1a:	4618      	movlt	r0, r3
 801ad1c:	e7a4      	b.n	801ac68 <_printf_i+0x168>
 801ad1e:	2301      	movs	r3, #1
 801ad20:	4632      	mov	r2, r6
 801ad22:	4649      	mov	r1, r9
 801ad24:	4640      	mov	r0, r8
 801ad26:	47d0      	blx	sl
 801ad28:	3001      	adds	r0, #1
 801ad2a:	d09b      	beq.n	801ac64 <_printf_i+0x164>
 801ad2c:	3501      	adds	r5, #1
 801ad2e:	68e3      	ldr	r3, [r4, #12]
 801ad30:	9903      	ldr	r1, [sp, #12]
 801ad32:	1a5b      	subs	r3, r3, r1
 801ad34:	42ab      	cmp	r3, r5
 801ad36:	dcf2      	bgt.n	801ad1e <_printf_i+0x21e>
 801ad38:	e7eb      	b.n	801ad12 <_printf_i+0x212>
 801ad3a:	2500      	movs	r5, #0
 801ad3c:	f104 0619 	add.w	r6, r4, #25
 801ad40:	e7f5      	b.n	801ad2e <_printf_i+0x22e>
 801ad42:	bf00      	nop
 801ad44:	0801f7d5 	.word	0x0801f7d5
 801ad48:	0801f7e6 	.word	0x0801f7e6

0801ad4c <iprintf>:
 801ad4c:	b40f      	push	{r0, r1, r2, r3}
 801ad4e:	4b0a      	ldr	r3, [pc, #40]	; (801ad78 <iprintf+0x2c>)
 801ad50:	b513      	push	{r0, r1, r4, lr}
 801ad52:	681c      	ldr	r4, [r3, #0]
 801ad54:	b124      	cbz	r4, 801ad60 <iprintf+0x14>
 801ad56:	69a3      	ldr	r3, [r4, #24]
 801ad58:	b913      	cbnz	r3, 801ad60 <iprintf+0x14>
 801ad5a:	4620      	mov	r0, r4
 801ad5c:	f7ff fb38 	bl	801a3d0 <__sinit>
 801ad60:	ab05      	add	r3, sp, #20
 801ad62:	9a04      	ldr	r2, [sp, #16]
 801ad64:	68a1      	ldr	r1, [r4, #8]
 801ad66:	9301      	str	r3, [sp, #4]
 801ad68:	4620      	mov	r0, r4
 801ad6a:	f7ff fd2b 	bl	801a7c4 <_vfiprintf_r>
 801ad6e:	b002      	add	sp, #8
 801ad70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad74:	b004      	add	sp, #16
 801ad76:	4770      	bx	lr
 801ad78:	200000e8 	.word	0x200000e8

0801ad7c <rand>:
 801ad7c:	4b17      	ldr	r3, [pc, #92]	; (801addc <rand+0x60>)
 801ad7e:	b510      	push	{r4, lr}
 801ad80:	681c      	ldr	r4, [r3, #0]
 801ad82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ad84:	b9b3      	cbnz	r3, 801adb4 <rand+0x38>
 801ad86:	2018      	movs	r0, #24
 801ad88:	f7ff fbfa 	bl	801a580 <malloc>
 801ad8c:	63a0      	str	r0, [r4, #56]	; 0x38
 801ad8e:	b928      	cbnz	r0, 801ad9c <rand+0x20>
 801ad90:	4602      	mov	r2, r0
 801ad92:	4b13      	ldr	r3, [pc, #76]	; (801ade0 <rand+0x64>)
 801ad94:	4813      	ldr	r0, [pc, #76]	; (801ade4 <rand+0x68>)
 801ad96:	214e      	movs	r1, #78	; 0x4e
 801ad98:	f7ff faa0 	bl	801a2dc <__assert_func>
 801ad9c:	4a12      	ldr	r2, [pc, #72]	; (801ade8 <rand+0x6c>)
 801ad9e:	4b13      	ldr	r3, [pc, #76]	; (801adec <rand+0x70>)
 801ada0:	e9c0 2300 	strd	r2, r3, [r0]
 801ada4:	4b12      	ldr	r3, [pc, #72]	; (801adf0 <rand+0x74>)
 801ada6:	6083      	str	r3, [r0, #8]
 801ada8:	230b      	movs	r3, #11
 801adaa:	8183      	strh	r3, [r0, #12]
 801adac:	2201      	movs	r2, #1
 801adae:	2300      	movs	r3, #0
 801adb0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801adb4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801adb6:	480f      	ldr	r0, [pc, #60]	; (801adf4 <rand+0x78>)
 801adb8:	690a      	ldr	r2, [r1, #16]
 801adba:	694b      	ldr	r3, [r1, #20]
 801adbc:	4c0e      	ldr	r4, [pc, #56]	; (801adf8 <rand+0x7c>)
 801adbe:	4350      	muls	r0, r2
 801adc0:	fb04 0003 	mla	r0, r4, r3, r0
 801adc4:	fba2 3404 	umull	r3, r4, r2, r4
 801adc8:	1c5a      	adds	r2, r3, #1
 801adca:	4404      	add	r4, r0
 801adcc:	f144 0000 	adc.w	r0, r4, #0
 801add0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801add4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801add8:	bd10      	pop	{r4, pc}
 801adda:	bf00      	nop
 801addc:	200000e8 	.word	0x200000e8
 801ade0:	0801f7f7 	.word	0x0801f7f7
 801ade4:	0801f80e 	.word	0x0801f80e
 801ade8:	abcd330e 	.word	0xabcd330e
 801adec:	e66d1234 	.word	0xe66d1234
 801adf0:	0005deec 	.word	0x0005deec
 801adf4:	5851f42d 	.word	0x5851f42d
 801adf8:	4c957f2d 	.word	0x4c957f2d

0801adfc <cleanup_glue>:
 801adfc:	b538      	push	{r3, r4, r5, lr}
 801adfe:	460c      	mov	r4, r1
 801ae00:	6809      	ldr	r1, [r1, #0]
 801ae02:	4605      	mov	r5, r0
 801ae04:	b109      	cbz	r1, 801ae0a <cleanup_glue+0xe>
 801ae06:	f7ff fff9 	bl	801adfc <cleanup_glue>
 801ae0a:	4621      	mov	r1, r4
 801ae0c:	4628      	mov	r0, r5
 801ae0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ae12:	f7ff bc03 	b.w	801a61c <_free_r>
	...

0801ae18 <_reclaim_reent>:
 801ae18:	4b2c      	ldr	r3, [pc, #176]	; (801aecc <_reclaim_reent+0xb4>)
 801ae1a:	681b      	ldr	r3, [r3, #0]
 801ae1c:	4283      	cmp	r3, r0
 801ae1e:	b570      	push	{r4, r5, r6, lr}
 801ae20:	4604      	mov	r4, r0
 801ae22:	d051      	beq.n	801aec8 <_reclaim_reent+0xb0>
 801ae24:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801ae26:	b143      	cbz	r3, 801ae3a <_reclaim_reent+0x22>
 801ae28:	68db      	ldr	r3, [r3, #12]
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	d14a      	bne.n	801aec4 <_reclaim_reent+0xac>
 801ae2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ae30:	6819      	ldr	r1, [r3, #0]
 801ae32:	b111      	cbz	r1, 801ae3a <_reclaim_reent+0x22>
 801ae34:	4620      	mov	r0, r4
 801ae36:	f7ff fbf1 	bl	801a61c <_free_r>
 801ae3a:	6961      	ldr	r1, [r4, #20]
 801ae3c:	b111      	cbz	r1, 801ae44 <_reclaim_reent+0x2c>
 801ae3e:	4620      	mov	r0, r4
 801ae40:	f7ff fbec 	bl	801a61c <_free_r>
 801ae44:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ae46:	b111      	cbz	r1, 801ae4e <_reclaim_reent+0x36>
 801ae48:	4620      	mov	r0, r4
 801ae4a:	f7ff fbe7 	bl	801a61c <_free_r>
 801ae4e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ae50:	b111      	cbz	r1, 801ae58 <_reclaim_reent+0x40>
 801ae52:	4620      	mov	r0, r4
 801ae54:	f7ff fbe2 	bl	801a61c <_free_r>
 801ae58:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801ae5a:	b111      	cbz	r1, 801ae62 <_reclaim_reent+0x4a>
 801ae5c:	4620      	mov	r0, r4
 801ae5e:	f7ff fbdd 	bl	801a61c <_free_r>
 801ae62:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ae64:	b111      	cbz	r1, 801ae6c <_reclaim_reent+0x54>
 801ae66:	4620      	mov	r0, r4
 801ae68:	f7ff fbd8 	bl	801a61c <_free_r>
 801ae6c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801ae6e:	b111      	cbz	r1, 801ae76 <_reclaim_reent+0x5e>
 801ae70:	4620      	mov	r0, r4
 801ae72:	f7ff fbd3 	bl	801a61c <_free_r>
 801ae76:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801ae78:	b111      	cbz	r1, 801ae80 <_reclaim_reent+0x68>
 801ae7a:	4620      	mov	r0, r4
 801ae7c:	f7ff fbce 	bl	801a61c <_free_r>
 801ae80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ae82:	b111      	cbz	r1, 801ae8a <_reclaim_reent+0x72>
 801ae84:	4620      	mov	r0, r4
 801ae86:	f7ff fbc9 	bl	801a61c <_free_r>
 801ae8a:	69a3      	ldr	r3, [r4, #24]
 801ae8c:	b1e3      	cbz	r3, 801aec8 <_reclaim_reent+0xb0>
 801ae8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ae90:	4620      	mov	r0, r4
 801ae92:	4798      	blx	r3
 801ae94:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801ae96:	b1b9      	cbz	r1, 801aec8 <_reclaim_reent+0xb0>
 801ae98:	4620      	mov	r0, r4
 801ae9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ae9e:	f7ff bfad 	b.w	801adfc <cleanup_glue>
 801aea2:	5949      	ldr	r1, [r1, r5]
 801aea4:	b941      	cbnz	r1, 801aeb8 <_reclaim_reent+0xa0>
 801aea6:	3504      	adds	r5, #4
 801aea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801aeaa:	2d80      	cmp	r5, #128	; 0x80
 801aeac:	68d9      	ldr	r1, [r3, #12]
 801aeae:	d1f8      	bne.n	801aea2 <_reclaim_reent+0x8a>
 801aeb0:	4620      	mov	r0, r4
 801aeb2:	f7ff fbb3 	bl	801a61c <_free_r>
 801aeb6:	e7ba      	b.n	801ae2e <_reclaim_reent+0x16>
 801aeb8:	680e      	ldr	r6, [r1, #0]
 801aeba:	4620      	mov	r0, r4
 801aebc:	f7ff fbae 	bl	801a61c <_free_r>
 801aec0:	4631      	mov	r1, r6
 801aec2:	e7ef      	b.n	801aea4 <_reclaim_reent+0x8c>
 801aec4:	2500      	movs	r5, #0
 801aec6:	e7ef      	b.n	801aea8 <_reclaim_reent+0x90>
 801aec8:	bd70      	pop	{r4, r5, r6, pc}
 801aeca:	bf00      	nop
 801aecc:	200000e8 	.word	0x200000e8

0801aed0 <_sbrk_r>:
 801aed0:	b538      	push	{r3, r4, r5, lr}
 801aed2:	4d06      	ldr	r5, [pc, #24]	; (801aeec <_sbrk_r+0x1c>)
 801aed4:	2300      	movs	r3, #0
 801aed6:	4604      	mov	r4, r0
 801aed8:	4608      	mov	r0, r1
 801aeda:	602b      	str	r3, [r5, #0]
 801aedc:	f7e6 f854 	bl	8000f88 <_sbrk>
 801aee0:	1c43      	adds	r3, r0, #1
 801aee2:	d102      	bne.n	801aeea <_sbrk_r+0x1a>
 801aee4:	682b      	ldr	r3, [r5, #0]
 801aee6:	b103      	cbz	r3, 801aeea <_sbrk_r+0x1a>
 801aee8:	6023      	str	r3, [r4, #0]
 801aeea:	bd38      	pop	{r3, r4, r5, pc}
 801aeec:	200120bc 	.word	0x200120bc

0801aef0 <__sread>:
 801aef0:	b510      	push	{r4, lr}
 801aef2:	460c      	mov	r4, r1
 801aef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aef8:	f000 fca2 	bl	801b840 <_read_r>
 801aefc:	2800      	cmp	r0, #0
 801aefe:	bfab      	itete	ge
 801af00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801af02:	89a3      	ldrhlt	r3, [r4, #12]
 801af04:	181b      	addge	r3, r3, r0
 801af06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801af0a:	bfac      	ite	ge
 801af0c:	6563      	strge	r3, [r4, #84]	; 0x54
 801af0e:	81a3      	strhlt	r3, [r4, #12]
 801af10:	bd10      	pop	{r4, pc}

0801af12 <__swrite>:
 801af12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af16:	461f      	mov	r7, r3
 801af18:	898b      	ldrh	r3, [r1, #12]
 801af1a:	05db      	lsls	r3, r3, #23
 801af1c:	4605      	mov	r5, r0
 801af1e:	460c      	mov	r4, r1
 801af20:	4616      	mov	r6, r2
 801af22:	d505      	bpl.n	801af30 <__swrite+0x1e>
 801af24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af28:	2302      	movs	r3, #2
 801af2a:	2200      	movs	r2, #0
 801af2c:	f000 fa84 	bl	801b438 <_lseek_r>
 801af30:	89a3      	ldrh	r3, [r4, #12]
 801af32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801af36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801af3a:	81a3      	strh	r3, [r4, #12]
 801af3c:	4632      	mov	r2, r6
 801af3e:	463b      	mov	r3, r7
 801af40:	4628      	mov	r0, r5
 801af42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af46:	f000 b917 	b.w	801b178 <_write_r>

0801af4a <__sseek>:
 801af4a:	b510      	push	{r4, lr}
 801af4c:	460c      	mov	r4, r1
 801af4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af52:	f000 fa71 	bl	801b438 <_lseek_r>
 801af56:	1c43      	adds	r3, r0, #1
 801af58:	89a3      	ldrh	r3, [r4, #12]
 801af5a:	bf15      	itete	ne
 801af5c:	6560      	strne	r0, [r4, #84]	; 0x54
 801af5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801af62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801af66:	81a3      	strheq	r3, [r4, #12]
 801af68:	bf18      	it	ne
 801af6a:	81a3      	strhne	r3, [r4, #12]
 801af6c:	bd10      	pop	{r4, pc}

0801af6e <__sclose>:
 801af6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af72:	f000 b989 	b.w	801b288 <_close_r>
	...

0801af78 <_strtol_l.isra.0>:
 801af78:	2b01      	cmp	r3, #1
 801af7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801af7e:	d001      	beq.n	801af84 <_strtol_l.isra.0+0xc>
 801af80:	2b24      	cmp	r3, #36	; 0x24
 801af82:	d906      	bls.n	801af92 <_strtol_l.isra.0+0x1a>
 801af84:	f000 f990 	bl	801b2a8 <__errno>
 801af88:	2316      	movs	r3, #22
 801af8a:	6003      	str	r3, [r0, #0]
 801af8c:	2000      	movs	r0, #0
 801af8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af92:	4f3a      	ldr	r7, [pc, #232]	; (801b07c <_strtol_l.isra.0+0x104>)
 801af94:	468e      	mov	lr, r1
 801af96:	4676      	mov	r6, lr
 801af98:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801af9c:	5de5      	ldrb	r5, [r4, r7]
 801af9e:	f015 0508 	ands.w	r5, r5, #8
 801afa2:	d1f8      	bne.n	801af96 <_strtol_l.isra.0+0x1e>
 801afa4:	2c2d      	cmp	r4, #45	; 0x2d
 801afa6:	d134      	bne.n	801b012 <_strtol_l.isra.0+0x9a>
 801afa8:	f89e 4000 	ldrb.w	r4, [lr]
 801afac:	f04f 0801 	mov.w	r8, #1
 801afb0:	f106 0e02 	add.w	lr, r6, #2
 801afb4:	2b00      	cmp	r3, #0
 801afb6:	d05c      	beq.n	801b072 <_strtol_l.isra.0+0xfa>
 801afb8:	2b10      	cmp	r3, #16
 801afba:	d10c      	bne.n	801afd6 <_strtol_l.isra.0+0x5e>
 801afbc:	2c30      	cmp	r4, #48	; 0x30
 801afbe:	d10a      	bne.n	801afd6 <_strtol_l.isra.0+0x5e>
 801afc0:	f89e 4000 	ldrb.w	r4, [lr]
 801afc4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801afc8:	2c58      	cmp	r4, #88	; 0x58
 801afca:	d14d      	bne.n	801b068 <_strtol_l.isra.0+0xf0>
 801afcc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801afd0:	2310      	movs	r3, #16
 801afd2:	f10e 0e02 	add.w	lr, lr, #2
 801afd6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801afda:	f10c 3cff 	add.w	ip, ip, #4294967295
 801afde:	2600      	movs	r6, #0
 801afe0:	fbbc f9f3 	udiv	r9, ip, r3
 801afe4:	4635      	mov	r5, r6
 801afe6:	fb03 ca19 	mls	sl, r3, r9, ip
 801afea:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801afee:	2f09      	cmp	r7, #9
 801aff0:	d818      	bhi.n	801b024 <_strtol_l.isra.0+0xac>
 801aff2:	463c      	mov	r4, r7
 801aff4:	42a3      	cmp	r3, r4
 801aff6:	dd24      	ble.n	801b042 <_strtol_l.isra.0+0xca>
 801aff8:	2e00      	cmp	r6, #0
 801affa:	db1f      	blt.n	801b03c <_strtol_l.isra.0+0xc4>
 801affc:	45a9      	cmp	r9, r5
 801affe:	d31d      	bcc.n	801b03c <_strtol_l.isra.0+0xc4>
 801b000:	d101      	bne.n	801b006 <_strtol_l.isra.0+0x8e>
 801b002:	45a2      	cmp	sl, r4
 801b004:	db1a      	blt.n	801b03c <_strtol_l.isra.0+0xc4>
 801b006:	fb05 4503 	mla	r5, r5, r3, r4
 801b00a:	2601      	movs	r6, #1
 801b00c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801b010:	e7eb      	b.n	801afea <_strtol_l.isra.0+0x72>
 801b012:	2c2b      	cmp	r4, #43	; 0x2b
 801b014:	bf08      	it	eq
 801b016:	f89e 4000 	ldrbeq.w	r4, [lr]
 801b01a:	46a8      	mov	r8, r5
 801b01c:	bf08      	it	eq
 801b01e:	f106 0e02 	addeq.w	lr, r6, #2
 801b022:	e7c7      	b.n	801afb4 <_strtol_l.isra.0+0x3c>
 801b024:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801b028:	2f19      	cmp	r7, #25
 801b02a:	d801      	bhi.n	801b030 <_strtol_l.isra.0+0xb8>
 801b02c:	3c37      	subs	r4, #55	; 0x37
 801b02e:	e7e1      	b.n	801aff4 <_strtol_l.isra.0+0x7c>
 801b030:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801b034:	2f19      	cmp	r7, #25
 801b036:	d804      	bhi.n	801b042 <_strtol_l.isra.0+0xca>
 801b038:	3c57      	subs	r4, #87	; 0x57
 801b03a:	e7db      	b.n	801aff4 <_strtol_l.isra.0+0x7c>
 801b03c:	f04f 36ff 	mov.w	r6, #4294967295
 801b040:	e7e4      	b.n	801b00c <_strtol_l.isra.0+0x94>
 801b042:	2e00      	cmp	r6, #0
 801b044:	da05      	bge.n	801b052 <_strtol_l.isra.0+0xda>
 801b046:	2322      	movs	r3, #34	; 0x22
 801b048:	6003      	str	r3, [r0, #0]
 801b04a:	4665      	mov	r5, ip
 801b04c:	b942      	cbnz	r2, 801b060 <_strtol_l.isra.0+0xe8>
 801b04e:	4628      	mov	r0, r5
 801b050:	e79d      	b.n	801af8e <_strtol_l.isra.0+0x16>
 801b052:	f1b8 0f00 	cmp.w	r8, #0
 801b056:	d000      	beq.n	801b05a <_strtol_l.isra.0+0xe2>
 801b058:	426d      	negs	r5, r5
 801b05a:	2a00      	cmp	r2, #0
 801b05c:	d0f7      	beq.n	801b04e <_strtol_l.isra.0+0xd6>
 801b05e:	b10e      	cbz	r6, 801b064 <_strtol_l.isra.0+0xec>
 801b060:	f10e 31ff 	add.w	r1, lr, #4294967295
 801b064:	6011      	str	r1, [r2, #0]
 801b066:	e7f2      	b.n	801b04e <_strtol_l.isra.0+0xd6>
 801b068:	2430      	movs	r4, #48	; 0x30
 801b06a:	2b00      	cmp	r3, #0
 801b06c:	d1b3      	bne.n	801afd6 <_strtol_l.isra.0+0x5e>
 801b06e:	2308      	movs	r3, #8
 801b070:	e7b1      	b.n	801afd6 <_strtol_l.isra.0+0x5e>
 801b072:	2c30      	cmp	r4, #48	; 0x30
 801b074:	d0a4      	beq.n	801afc0 <_strtol_l.isra.0+0x48>
 801b076:	230a      	movs	r3, #10
 801b078:	e7ad      	b.n	801afd6 <_strtol_l.isra.0+0x5e>
 801b07a:	bf00      	nop
 801b07c:	0801f660 	.word	0x0801f660

0801b080 <strtol>:
 801b080:	4613      	mov	r3, r2
 801b082:	460a      	mov	r2, r1
 801b084:	4601      	mov	r1, r0
 801b086:	4802      	ldr	r0, [pc, #8]	; (801b090 <strtol+0x10>)
 801b088:	6800      	ldr	r0, [r0, #0]
 801b08a:	f7ff bf75 	b.w	801af78 <_strtol_l.isra.0>
 801b08e:	bf00      	nop
 801b090:	200000e8 	.word	0x200000e8

0801b094 <_vsiprintf_r>:
 801b094:	b500      	push	{lr}
 801b096:	b09b      	sub	sp, #108	; 0x6c
 801b098:	9100      	str	r1, [sp, #0]
 801b09a:	9104      	str	r1, [sp, #16]
 801b09c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b0a0:	9105      	str	r1, [sp, #20]
 801b0a2:	9102      	str	r1, [sp, #8]
 801b0a4:	4905      	ldr	r1, [pc, #20]	; (801b0bc <_vsiprintf_r+0x28>)
 801b0a6:	9103      	str	r1, [sp, #12]
 801b0a8:	4669      	mov	r1, sp
 801b0aa:	f000 fac9 	bl	801b640 <_svfiprintf_r>
 801b0ae:	9b00      	ldr	r3, [sp, #0]
 801b0b0:	2200      	movs	r2, #0
 801b0b2:	701a      	strb	r2, [r3, #0]
 801b0b4:	b01b      	add	sp, #108	; 0x6c
 801b0b6:	f85d fb04 	ldr.w	pc, [sp], #4
 801b0ba:	bf00      	nop
 801b0bc:	ffff0208 	.word	0xffff0208

0801b0c0 <vsiprintf>:
 801b0c0:	4613      	mov	r3, r2
 801b0c2:	460a      	mov	r2, r1
 801b0c4:	4601      	mov	r1, r0
 801b0c6:	4802      	ldr	r0, [pc, #8]	; (801b0d0 <vsiprintf+0x10>)
 801b0c8:	6800      	ldr	r0, [r0, #0]
 801b0ca:	f7ff bfe3 	b.w	801b094 <_vsiprintf_r>
 801b0ce:	bf00      	nop
 801b0d0:	200000e8 	.word	0x200000e8

0801b0d4 <__swbuf_r>:
 801b0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0d6:	460e      	mov	r6, r1
 801b0d8:	4614      	mov	r4, r2
 801b0da:	4605      	mov	r5, r0
 801b0dc:	b118      	cbz	r0, 801b0e6 <__swbuf_r+0x12>
 801b0de:	6983      	ldr	r3, [r0, #24]
 801b0e0:	b90b      	cbnz	r3, 801b0e6 <__swbuf_r+0x12>
 801b0e2:	f7ff f975 	bl	801a3d0 <__sinit>
 801b0e6:	4b21      	ldr	r3, [pc, #132]	; (801b16c <__swbuf_r+0x98>)
 801b0e8:	429c      	cmp	r4, r3
 801b0ea:	d12b      	bne.n	801b144 <__swbuf_r+0x70>
 801b0ec:	686c      	ldr	r4, [r5, #4]
 801b0ee:	69a3      	ldr	r3, [r4, #24]
 801b0f0:	60a3      	str	r3, [r4, #8]
 801b0f2:	89a3      	ldrh	r3, [r4, #12]
 801b0f4:	071a      	lsls	r2, r3, #28
 801b0f6:	d52f      	bpl.n	801b158 <__swbuf_r+0x84>
 801b0f8:	6923      	ldr	r3, [r4, #16]
 801b0fa:	b36b      	cbz	r3, 801b158 <__swbuf_r+0x84>
 801b0fc:	6923      	ldr	r3, [r4, #16]
 801b0fe:	6820      	ldr	r0, [r4, #0]
 801b100:	1ac0      	subs	r0, r0, r3
 801b102:	6963      	ldr	r3, [r4, #20]
 801b104:	b2f6      	uxtb	r6, r6
 801b106:	4283      	cmp	r3, r0
 801b108:	4637      	mov	r7, r6
 801b10a:	dc04      	bgt.n	801b116 <__swbuf_r+0x42>
 801b10c:	4621      	mov	r1, r4
 801b10e:	4628      	mov	r0, r5
 801b110:	f000 f956 	bl	801b3c0 <_fflush_r>
 801b114:	bb30      	cbnz	r0, 801b164 <__swbuf_r+0x90>
 801b116:	68a3      	ldr	r3, [r4, #8]
 801b118:	3b01      	subs	r3, #1
 801b11a:	60a3      	str	r3, [r4, #8]
 801b11c:	6823      	ldr	r3, [r4, #0]
 801b11e:	1c5a      	adds	r2, r3, #1
 801b120:	6022      	str	r2, [r4, #0]
 801b122:	701e      	strb	r6, [r3, #0]
 801b124:	6963      	ldr	r3, [r4, #20]
 801b126:	3001      	adds	r0, #1
 801b128:	4283      	cmp	r3, r0
 801b12a:	d004      	beq.n	801b136 <__swbuf_r+0x62>
 801b12c:	89a3      	ldrh	r3, [r4, #12]
 801b12e:	07db      	lsls	r3, r3, #31
 801b130:	d506      	bpl.n	801b140 <__swbuf_r+0x6c>
 801b132:	2e0a      	cmp	r6, #10
 801b134:	d104      	bne.n	801b140 <__swbuf_r+0x6c>
 801b136:	4621      	mov	r1, r4
 801b138:	4628      	mov	r0, r5
 801b13a:	f000 f941 	bl	801b3c0 <_fflush_r>
 801b13e:	b988      	cbnz	r0, 801b164 <__swbuf_r+0x90>
 801b140:	4638      	mov	r0, r7
 801b142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b144:	4b0a      	ldr	r3, [pc, #40]	; (801b170 <__swbuf_r+0x9c>)
 801b146:	429c      	cmp	r4, r3
 801b148:	d101      	bne.n	801b14e <__swbuf_r+0x7a>
 801b14a:	68ac      	ldr	r4, [r5, #8]
 801b14c:	e7cf      	b.n	801b0ee <__swbuf_r+0x1a>
 801b14e:	4b09      	ldr	r3, [pc, #36]	; (801b174 <__swbuf_r+0xa0>)
 801b150:	429c      	cmp	r4, r3
 801b152:	bf08      	it	eq
 801b154:	68ec      	ldreq	r4, [r5, #12]
 801b156:	e7ca      	b.n	801b0ee <__swbuf_r+0x1a>
 801b158:	4621      	mov	r1, r4
 801b15a:	4628      	mov	r0, r5
 801b15c:	f000 f81e 	bl	801b19c <__swsetup_r>
 801b160:	2800      	cmp	r0, #0
 801b162:	d0cb      	beq.n	801b0fc <__swbuf_r+0x28>
 801b164:	f04f 37ff 	mov.w	r7, #4294967295
 801b168:	e7ea      	b.n	801b140 <__swbuf_r+0x6c>
 801b16a:	bf00      	nop
 801b16c:	0801f780 	.word	0x0801f780
 801b170:	0801f7a0 	.word	0x0801f7a0
 801b174:	0801f760 	.word	0x0801f760

0801b178 <_write_r>:
 801b178:	b538      	push	{r3, r4, r5, lr}
 801b17a:	4d07      	ldr	r5, [pc, #28]	; (801b198 <_write_r+0x20>)
 801b17c:	4604      	mov	r4, r0
 801b17e:	4608      	mov	r0, r1
 801b180:	4611      	mov	r1, r2
 801b182:	2200      	movs	r2, #0
 801b184:	602a      	str	r2, [r5, #0]
 801b186:	461a      	mov	r2, r3
 801b188:	f7fe faa4 	bl	80196d4 <_write>
 801b18c:	1c43      	adds	r3, r0, #1
 801b18e:	d102      	bne.n	801b196 <_write_r+0x1e>
 801b190:	682b      	ldr	r3, [r5, #0]
 801b192:	b103      	cbz	r3, 801b196 <_write_r+0x1e>
 801b194:	6023      	str	r3, [r4, #0]
 801b196:	bd38      	pop	{r3, r4, r5, pc}
 801b198:	200120bc 	.word	0x200120bc

0801b19c <__swsetup_r>:
 801b19c:	4b32      	ldr	r3, [pc, #200]	; (801b268 <__swsetup_r+0xcc>)
 801b19e:	b570      	push	{r4, r5, r6, lr}
 801b1a0:	681d      	ldr	r5, [r3, #0]
 801b1a2:	4606      	mov	r6, r0
 801b1a4:	460c      	mov	r4, r1
 801b1a6:	b125      	cbz	r5, 801b1b2 <__swsetup_r+0x16>
 801b1a8:	69ab      	ldr	r3, [r5, #24]
 801b1aa:	b913      	cbnz	r3, 801b1b2 <__swsetup_r+0x16>
 801b1ac:	4628      	mov	r0, r5
 801b1ae:	f7ff f90f 	bl	801a3d0 <__sinit>
 801b1b2:	4b2e      	ldr	r3, [pc, #184]	; (801b26c <__swsetup_r+0xd0>)
 801b1b4:	429c      	cmp	r4, r3
 801b1b6:	d10f      	bne.n	801b1d8 <__swsetup_r+0x3c>
 801b1b8:	686c      	ldr	r4, [r5, #4]
 801b1ba:	89a3      	ldrh	r3, [r4, #12]
 801b1bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b1c0:	0719      	lsls	r1, r3, #28
 801b1c2:	d42c      	bmi.n	801b21e <__swsetup_r+0x82>
 801b1c4:	06dd      	lsls	r5, r3, #27
 801b1c6:	d411      	bmi.n	801b1ec <__swsetup_r+0x50>
 801b1c8:	2309      	movs	r3, #9
 801b1ca:	6033      	str	r3, [r6, #0]
 801b1cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b1d0:	81a3      	strh	r3, [r4, #12]
 801b1d2:	f04f 30ff 	mov.w	r0, #4294967295
 801b1d6:	e03e      	b.n	801b256 <__swsetup_r+0xba>
 801b1d8:	4b25      	ldr	r3, [pc, #148]	; (801b270 <__swsetup_r+0xd4>)
 801b1da:	429c      	cmp	r4, r3
 801b1dc:	d101      	bne.n	801b1e2 <__swsetup_r+0x46>
 801b1de:	68ac      	ldr	r4, [r5, #8]
 801b1e0:	e7eb      	b.n	801b1ba <__swsetup_r+0x1e>
 801b1e2:	4b24      	ldr	r3, [pc, #144]	; (801b274 <__swsetup_r+0xd8>)
 801b1e4:	429c      	cmp	r4, r3
 801b1e6:	bf08      	it	eq
 801b1e8:	68ec      	ldreq	r4, [r5, #12]
 801b1ea:	e7e6      	b.n	801b1ba <__swsetup_r+0x1e>
 801b1ec:	0758      	lsls	r0, r3, #29
 801b1ee:	d512      	bpl.n	801b216 <__swsetup_r+0x7a>
 801b1f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b1f2:	b141      	cbz	r1, 801b206 <__swsetup_r+0x6a>
 801b1f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b1f8:	4299      	cmp	r1, r3
 801b1fa:	d002      	beq.n	801b202 <__swsetup_r+0x66>
 801b1fc:	4630      	mov	r0, r6
 801b1fe:	f7ff fa0d 	bl	801a61c <_free_r>
 801b202:	2300      	movs	r3, #0
 801b204:	6363      	str	r3, [r4, #52]	; 0x34
 801b206:	89a3      	ldrh	r3, [r4, #12]
 801b208:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b20c:	81a3      	strh	r3, [r4, #12]
 801b20e:	2300      	movs	r3, #0
 801b210:	6063      	str	r3, [r4, #4]
 801b212:	6923      	ldr	r3, [r4, #16]
 801b214:	6023      	str	r3, [r4, #0]
 801b216:	89a3      	ldrh	r3, [r4, #12]
 801b218:	f043 0308 	orr.w	r3, r3, #8
 801b21c:	81a3      	strh	r3, [r4, #12]
 801b21e:	6923      	ldr	r3, [r4, #16]
 801b220:	b94b      	cbnz	r3, 801b236 <__swsetup_r+0x9a>
 801b222:	89a3      	ldrh	r3, [r4, #12]
 801b224:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b22c:	d003      	beq.n	801b236 <__swsetup_r+0x9a>
 801b22e:	4621      	mov	r1, r4
 801b230:	4630      	mov	r0, r6
 801b232:	f000 f937 	bl	801b4a4 <__smakebuf_r>
 801b236:	89a0      	ldrh	r0, [r4, #12]
 801b238:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b23c:	f010 0301 	ands.w	r3, r0, #1
 801b240:	d00a      	beq.n	801b258 <__swsetup_r+0xbc>
 801b242:	2300      	movs	r3, #0
 801b244:	60a3      	str	r3, [r4, #8]
 801b246:	6963      	ldr	r3, [r4, #20]
 801b248:	425b      	negs	r3, r3
 801b24a:	61a3      	str	r3, [r4, #24]
 801b24c:	6923      	ldr	r3, [r4, #16]
 801b24e:	b943      	cbnz	r3, 801b262 <__swsetup_r+0xc6>
 801b250:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b254:	d1ba      	bne.n	801b1cc <__swsetup_r+0x30>
 801b256:	bd70      	pop	{r4, r5, r6, pc}
 801b258:	0781      	lsls	r1, r0, #30
 801b25a:	bf58      	it	pl
 801b25c:	6963      	ldrpl	r3, [r4, #20]
 801b25e:	60a3      	str	r3, [r4, #8]
 801b260:	e7f4      	b.n	801b24c <__swsetup_r+0xb0>
 801b262:	2000      	movs	r0, #0
 801b264:	e7f7      	b.n	801b256 <__swsetup_r+0xba>
 801b266:	bf00      	nop
 801b268:	200000e8 	.word	0x200000e8
 801b26c:	0801f780 	.word	0x0801f780
 801b270:	0801f7a0 	.word	0x0801f7a0
 801b274:	0801f760 	.word	0x0801f760

0801b278 <abort>:
 801b278:	b508      	push	{r3, lr}
 801b27a:	2006      	movs	r0, #6
 801b27c:	f000 fb1a 	bl	801b8b4 <raise>
 801b280:	2001      	movs	r0, #1
 801b282:	f7e5 fe43 	bl	8000f0c <_exit>
	...

0801b288 <_close_r>:
 801b288:	b538      	push	{r3, r4, r5, lr}
 801b28a:	4d06      	ldr	r5, [pc, #24]	; (801b2a4 <_close_r+0x1c>)
 801b28c:	2300      	movs	r3, #0
 801b28e:	4604      	mov	r4, r0
 801b290:	4608      	mov	r0, r1
 801b292:	602b      	str	r3, [r5, #0]
 801b294:	f7e5 fe44 	bl	8000f20 <_close>
 801b298:	1c43      	adds	r3, r0, #1
 801b29a:	d102      	bne.n	801b2a2 <_close_r+0x1a>
 801b29c:	682b      	ldr	r3, [r5, #0]
 801b29e:	b103      	cbz	r3, 801b2a2 <_close_r+0x1a>
 801b2a0:	6023      	str	r3, [r4, #0]
 801b2a2:	bd38      	pop	{r3, r4, r5, pc}
 801b2a4:	200120bc 	.word	0x200120bc

0801b2a8 <__errno>:
 801b2a8:	4b01      	ldr	r3, [pc, #4]	; (801b2b0 <__errno+0x8>)
 801b2aa:	6818      	ldr	r0, [r3, #0]
 801b2ac:	4770      	bx	lr
 801b2ae:	bf00      	nop
 801b2b0:	200000e8 	.word	0x200000e8

0801b2b4 <__sflush_r>:
 801b2b4:	898a      	ldrh	r2, [r1, #12]
 801b2b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2ba:	4605      	mov	r5, r0
 801b2bc:	0710      	lsls	r0, r2, #28
 801b2be:	460c      	mov	r4, r1
 801b2c0:	d458      	bmi.n	801b374 <__sflush_r+0xc0>
 801b2c2:	684b      	ldr	r3, [r1, #4]
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	dc05      	bgt.n	801b2d4 <__sflush_r+0x20>
 801b2c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b2ca:	2b00      	cmp	r3, #0
 801b2cc:	dc02      	bgt.n	801b2d4 <__sflush_r+0x20>
 801b2ce:	2000      	movs	r0, #0
 801b2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b2d6:	2e00      	cmp	r6, #0
 801b2d8:	d0f9      	beq.n	801b2ce <__sflush_r+0x1a>
 801b2da:	2300      	movs	r3, #0
 801b2dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b2e0:	682f      	ldr	r7, [r5, #0]
 801b2e2:	602b      	str	r3, [r5, #0]
 801b2e4:	d032      	beq.n	801b34c <__sflush_r+0x98>
 801b2e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b2e8:	89a3      	ldrh	r3, [r4, #12]
 801b2ea:	075a      	lsls	r2, r3, #29
 801b2ec:	d505      	bpl.n	801b2fa <__sflush_r+0x46>
 801b2ee:	6863      	ldr	r3, [r4, #4]
 801b2f0:	1ac0      	subs	r0, r0, r3
 801b2f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b2f4:	b10b      	cbz	r3, 801b2fa <__sflush_r+0x46>
 801b2f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b2f8:	1ac0      	subs	r0, r0, r3
 801b2fa:	2300      	movs	r3, #0
 801b2fc:	4602      	mov	r2, r0
 801b2fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b300:	6a21      	ldr	r1, [r4, #32]
 801b302:	4628      	mov	r0, r5
 801b304:	47b0      	blx	r6
 801b306:	1c43      	adds	r3, r0, #1
 801b308:	89a3      	ldrh	r3, [r4, #12]
 801b30a:	d106      	bne.n	801b31a <__sflush_r+0x66>
 801b30c:	6829      	ldr	r1, [r5, #0]
 801b30e:	291d      	cmp	r1, #29
 801b310:	d82c      	bhi.n	801b36c <__sflush_r+0xb8>
 801b312:	4a2a      	ldr	r2, [pc, #168]	; (801b3bc <__sflush_r+0x108>)
 801b314:	40ca      	lsrs	r2, r1
 801b316:	07d6      	lsls	r6, r2, #31
 801b318:	d528      	bpl.n	801b36c <__sflush_r+0xb8>
 801b31a:	2200      	movs	r2, #0
 801b31c:	6062      	str	r2, [r4, #4]
 801b31e:	04d9      	lsls	r1, r3, #19
 801b320:	6922      	ldr	r2, [r4, #16]
 801b322:	6022      	str	r2, [r4, #0]
 801b324:	d504      	bpl.n	801b330 <__sflush_r+0x7c>
 801b326:	1c42      	adds	r2, r0, #1
 801b328:	d101      	bne.n	801b32e <__sflush_r+0x7a>
 801b32a:	682b      	ldr	r3, [r5, #0]
 801b32c:	b903      	cbnz	r3, 801b330 <__sflush_r+0x7c>
 801b32e:	6560      	str	r0, [r4, #84]	; 0x54
 801b330:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b332:	602f      	str	r7, [r5, #0]
 801b334:	2900      	cmp	r1, #0
 801b336:	d0ca      	beq.n	801b2ce <__sflush_r+0x1a>
 801b338:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b33c:	4299      	cmp	r1, r3
 801b33e:	d002      	beq.n	801b346 <__sflush_r+0x92>
 801b340:	4628      	mov	r0, r5
 801b342:	f7ff f96b 	bl	801a61c <_free_r>
 801b346:	2000      	movs	r0, #0
 801b348:	6360      	str	r0, [r4, #52]	; 0x34
 801b34a:	e7c1      	b.n	801b2d0 <__sflush_r+0x1c>
 801b34c:	6a21      	ldr	r1, [r4, #32]
 801b34e:	2301      	movs	r3, #1
 801b350:	4628      	mov	r0, r5
 801b352:	47b0      	blx	r6
 801b354:	1c41      	adds	r1, r0, #1
 801b356:	d1c7      	bne.n	801b2e8 <__sflush_r+0x34>
 801b358:	682b      	ldr	r3, [r5, #0]
 801b35a:	2b00      	cmp	r3, #0
 801b35c:	d0c4      	beq.n	801b2e8 <__sflush_r+0x34>
 801b35e:	2b1d      	cmp	r3, #29
 801b360:	d001      	beq.n	801b366 <__sflush_r+0xb2>
 801b362:	2b16      	cmp	r3, #22
 801b364:	d101      	bne.n	801b36a <__sflush_r+0xb6>
 801b366:	602f      	str	r7, [r5, #0]
 801b368:	e7b1      	b.n	801b2ce <__sflush_r+0x1a>
 801b36a:	89a3      	ldrh	r3, [r4, #12]
 801b36c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b370:	81a3      	strh	r3, [r4, #12]
 801b372:	e7ad      	b.n	801b2d0 <__sflush_r+0x1c>
 801b374:	690f      	ldr	r7, [r1, #16]
 801b376:	2f00      	cmp	r7, #0
 801b378:	d0a9      	beq.n	801b2ce <__sflush_r+0x1a>
 801b37a:	0793      	lsls	r3, r2, #30
 801b37c:	680e      	ldr	r6, [r1, #0]
 801b37e:	bf08      	it	eq
 801b380:	694b      	ldreq	r3, [r1, #20]
 801b382:	600f      	str	r7, [r1, #0]
 801b384:	bf18      	it	ne
 801b386:	2300      	movne	r3, #0
 801b388:	eba6 0807 	sub.w	r8, r6, r7
 801b38c:	608b      	str	r3, [r1, #8]
 801b38e:	f1b8 0f00 	cmp.w	r8, #0
 801b392:	dd9c      	ble.n	801b2ce <__sflush_r+0x1a>
 801b394:	6a21      	ldr	r1, [r4, #32]
 801b396:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b398:	4643      	mov	r3, r8
 801b39a:	463a      	mov	r2, r7
 801b39c:	4628      	mov	r0, r5
 801b39e:	47b0      	blx	r6
 801b3a0:	2800      	cmp	r0, #0
 801b3a2:	dc06      	bgt.n	801b3b2 <__sflush_r+0xfe>
 801b3a4:	89a3      	ldrh	r3, [r4, #12]
 801b3a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b3aa:	81a3      	strh	r3, [r4, #12]
 801b3ac:	f04f 30ff 	mov.w	r0, #4294967295
 801b3b0:	e78e      	b.n	801b2d0 <__sflush_r+0x1c>
 801b3b2:	4407      	add	r7, r0
 801b3b4:	eba8 0800 	sub.w	r8, r8, r0
 801b3b8:	e7e9      	b.n	801b38e <__sflush_r+0xda>
 801b3ba:	bf00      	nop
 801b3bc:	20400001 	.word	0x20400001

0801b3c0 <_fflush_r>:
 801b3c0:	b538      	push	{r3, r4, r5, lr}
 801b3c2:	690b      	ldr	r3, [r1, #16]
 801b3c4:	4605      	mov	r5, r0
 801b3c6:	460c      	mov	r4, r1
 801b3c8:	b913      	cbnz	r3, 801b3d0 <_fflush_r+0x10>
 801b3ca:	2500      	movs	r5, #0
 801b3cc:	4628      	mov	r0, r5
 801b3ce:	bd38      	pop	{r3, r4, r5, pc}
 801b3d0:	b118      	cbz	r0, 801b3da <_fflush_r+0x1a>
 801b3d2:	6983      	ldr	r3, [r0, #24]
 801b3d4:	b90b      	cbnz	r3, 801b3da <_fflush_r+0x1a>
 801b3d6:	f7fe fffb 	bl	801a3d0 <__sinit>
 801b3da:	4b14      	ldr	r3, [pc, #80]	; (801b42c <_fflush_r+0x6c>)
 801b3dc:	429c      	cmp	r4, r3
 801b3de:	d11b      	bne.n	801b418 <_fflush_r+0x58>
 801b3e0:	686c      	ldr	r4, [r5, #4]
 801b3e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b3e6:	2b00      	cmp	r3, #0
 801b3e8:	d0ef      	beq.n	801b3ca <_fflush_r+0xa>
 801b3ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b3ec:	07d0      	lsls	r0, r2, #31
 801b3ee:	d404      	bmi.n	801b3fa <_fflush_r+0x3a>
 801b3f0:	0599      	lsls	r1, r3, #22
 801b3f2:	d402      	bmi.n	801b3fa <_fflush_r+0x3a>
 801b3f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b3f6:	f7ff f8c0 	bl	801a57a <__retarget_lock_acquire_recursive>
 801b3fa:	4628      	mov	r0, r5
 801b3fc:	4621      	mov	r1, r4
 801b3fe:	f7ff ff59 	bl	801b2b4 <__sflush_r>
 801b402:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b404:	07da      	lsls	r2, r3, #31
 801b406:	4605      	mov	r5, r0
 801b408:	d4e0      	bmi.n	801b3cc <_fflush_r+0xc>
 801b40a:	89a3      	ldrh	r3, [r4, #12]
 801b40c:	059b      	lsls	r3, r3, #22
 801b40e:	d4dd      	bmi.n	801b3cc <_fflush_r+0xc>
 801b410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b412:	f7ff f8b3 	bl	801a57c <__retarget_lock_release_recursive>
 801b416:	e7d9      	b.n	801b3cc <_fflush_r+0xc>
 801b418:	4b05      	ldr	r3, [pc, #20]	; (801b430 <_fflush_r+0x70>)
 801b41a:	429c      	cmp	r4, r3
 801b41c:	d101      	bne.n	801b422 <_fflush_r+0x62>
 801b41e:	68ac      	ldr	r4, [r5, #8]
 801b420:	e7df      	b.n	801b3e2 <_fflush_r+0x22>
 801b422:	4b04      	ldr	r3, [pc, #16]	; (801b434 <_fflush_r+0x74>)
 801b424:	429c      	cmp	r4, r3
 801b426:	bf08      	it	eq
 801b428:	68ec      	ldreq	r4, [r5, #12]
 801b42a:	e7da      	b.n	801b3e2 <_fflush_r+0x22>
 801b42c:	0801f780 	.word	0x0801f780
 801b430:	0801f7a0 	.word	0x0801f7a0
 801b434:	0801f760 	.word	0x0801f760

0801b438 <_lseek_r>:
 801b438:	b538      	push	{r3, r4, r5, lr}
 801b43a:	4d07      	ldr	r5, [pc, #28]	; (801b458 <_lseek_r+0x20>)
 801b43c:	4604      	mov	r4, r0
 801b43e:	4608      	mov	r0, r1
 801b440:	4611      	mov	r1, r2
 801b442:	2200      	movs	r2, #0
 801b444:	602a      	str	r2, [r5, #0]
 801b446:	461a      	mov	r2, r3
 801b448:	f7e5 fd91 	bl	8000f6e <_lseek>
 801b44c:	1c43      	adds	r3, r0, #1
 801b44e:	d102      	bne.n	801b456 <_lseek_r+0x1e>
 801b450:	682b      	ldr	r3, [r5, #0]
 801b452:	b103      	cbz	r3, 801b456 <_lseek_r+0x1e>
 801b454:	6023      	str	r3, [r4, #0]
 801b456:	bd38      	pop	{r3, r4, r5, pc}
 801b458:	200120bc 	.word	0x200120bc

0801b45c <__swhatbuf_r>:
 801b45c:	b570      	push	{r4, r5, r6, lr}
 801b45e:	460e      	mov	r6, r1
 801b460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b464:	2900      	cmp	r1, #0
 801b466:	b096      	sub	sp, #88	; 0x58
 801b468:	4614      	mov	r4, r2
 801b46a:	461d      	mov	r5, r3
 801b46c:	da07      	bge.n	801b47e <__swhatbuf_r+0x22>
 801b46e:	2300      	movs	r3, #0
 801b470:	602b      	str	r3, [r5, #0]
 801b472:	89b3      	ldrh	r3, [r6, #12]
 801b474:	061a      	lsls	r2, r3, #24
 801b476:	d410      	bmi.n	801b49a <__swhatbuf_r+0x3e>
 801b478:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b47c:	e00e      	b.n	801b49c <__swhatbuf_r+0x40>
 801b47e:	466a      	mov	r2, sp
 801b480:	f000 fa34 	bl	801b8ec <_fstat_r>
 801b484:	2800      	cmp	r0, #0
 801b486:	dbf2      	blt.n	801b46e <__swhatbuf_r+0x12>
 801b488:	9a01      	ldr	r2, [sp, #4]
 801b48a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b48e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b492:	425a      	negs	r2, r3
 801b494:	415a      	adcs	r2, r3
 801b496:	602a      	str	r2, [r5, #0]
 801b498:	e7ee      	b.n	801b478 <__swhatbuf_r+0x1c>
 801b49a:	2340      	movs	r3, #64	; 0x40
 801b49c:	2000      	movs	r0, #0
 801b49e:	6023      	str	r3, [r4, #0]
 801b4a0:	b016      	add	sp, #88	; 0x58
 801b4a2:	bd70      	pop	{r4, r5, r6, pc}

0801b4a4 <__smakebuf_r>:
 801b4a4:	898b      	ldrh	r3, [r1, #12]
 801b4a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b4a8:	079d      	lsls	r5, r3, #30
 801b4aa:	4606      	mov	r6, r0
 801b4ac:	460c      	mov	r4, r1
 801b4ae:	d507      	bpl.n	801b4c0 <__smakebuf_r+0x1c>
 801b4b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b4b4:	6023      	str	r3, [r4, #0]
 801b4b6:	6123      	str	r3, [r4, #16]
 801b4b8:	2301      	movs	r3, #1
 801b4ba:	6163      	str	r3, [r4, #20]
 801b4bc:	b002      	add	sp, #8
 801b4be:	bd70      	pop	{r4, r5, r6, pc}
 801b4c0:	ab01      	add	r3, sp, #4
 801b4c2:	466a      	mov	r2, sp
 801b4c4:	f7ff ffca 	bl	801b45c <__swhatbuf_r>
 801b4c8:	9900      	ldr	r1, [sp, #0]
 801b4ca:	4605      	mov	r5, r0
 801b4cc:	4630      	mov	r0, r6
 801b4ce:	f7ff f8f5 	bl	801a6bc <_malloc_r>
 801b4d2:	b948      	cbnz	r0, 801b4e8 <__smakebuf_r+0x44>
 801b4d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b4d8:	059a      	lsls	r2, r3, #22
 801b4da:	d4ef      	bmi.n	801b4bc <__smakebuf_r+0x18>
 801b4dc:	f023 0303 	bic.w	r3, r3, #3
 801b4e0:	f043 0302 	orr.w	r3, r3, #2
 801b4e4:	81a3      	strh	r3, [r4, #12]
 801b4e6:	e7e3      	b.n	801b4b0 <__smakebuf_r+0xc>
 801b4e8:	4b0d      	ldr	r3, [pc, #52]	; (801b520 <__smakebuf_r+0x7c>)
 801b4ea:	62b3      	str	r3, [r6, #40]	; 0x28
 801b4ec:	89a3      	ldrh	r3, [r4, #12]
 801b4ee:	6020      	str	r0, [r4, #0]
 801b4f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b4f4:	81a3      	strh	r3, [r4, #12]
 801b4f6:	9b00      	ldr	r3, [sp, #0]
 801b4f8:	6163      	str	r3, [r4, #20]
 801b4fa:	9b01      	ldr	r3, [sp, #4]
 801b4fc:	6120      	str	r0, [r4, #16]
 801b4fe:	b15b      	cbz	r3, 801b518 <__smakebuf_r+0x74>
 801b500:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b504:	4630      	mov	r0, r6
 801b506:	f000 fa03 	bl	801b910 <_isatty_r>
 801b50a:	b128      	cbz	r0, 801b518 <__smakebuf_r+0x74>
 801b50c:	89a3      	ldrh	r3, [r4, #12]
 801b50e:	f023 0303 	bic.w	r3, r3, #3
 801b512:	f043 0301 	orr.w	r3, r3, #1
 801b516:	81a3      	strh	r3, [r4, #12]
 801b518:	89a0      	ldrh	r0, [r4, #12]
 801b51a:	4305      	orrs	r5, r0
 801b51c:	81a5      	strh	r5, [r4, #12]
 801b51e:	e7cd      	b.n	801b4bc <__smakebuf_r+0x18>
 801b520:	0801a369 	.word	0x0801a369

0801b524 <__malloc_lock>:
 801b524:	4801      	ldr	r0, [pc, #4]	; (801b52c <__malloc_lock+0x8>)
 801b526:	f7ff b828 	b.w	801a57a <__retarget_lock_acquire_recursive>
 801b52a:	bf00      	nop
 801b52c:	2001221c 	.word	0x2001221c

0801b530 <__malloc_unlock>:
 801b530:	4801      	ldr	r0, [pc, #4]	; (801b538 <__malloc_unlock+0x8>)
 801b532:	f7ff b823 	b.w	801a57c <__retarget_lock_release_recursive>
 801b536:	bf00      	nop
 801b538:	2001221c 	.word	0x2001221c

0801b53c <_realloc_r>:
 801b53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b53e:	4607      	mov	r7, r0
 801b540:	4614      	mov	r4, r2
 801b542:	460e      	mov	r6, r1
 801b544:	b921      	cbnz	r1, 801b550 <_realloc_r+0x14>
 801b546:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b54a:	4611      	mov	r1, r2
 801b54c:	f7ff b8b6 	b.w	801a6bc <_malloc_r>
 801b550:	b922      	cbnz	r2, 801b55c <_realloc_r+0x20>
 801b552:	f7ff f863 	bl	801a61c <_free_r>
 801b556:	4625      	mov	r5, r4
 801b558:	4628      	mov	r0, r5
 801b55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b55c:	f000 f9e8 	bl	801b930 <_malloc_usable_size_r>
 801b560:	42a0      	cmp	r0, r4
 801b562:	d20f      	bcs.n	801b584 <_realloc_r+0x48>
 801b564:	4621      	mov	r1, r4
 801b566:	4638      	mov	r0, r7
 801b568:	f7ff f8a8 	bl	801a6bc <_malloc_r>
 801b56c:	4605      	mov	r5, r0
 801b56e:	2800      	cmp	r0, #0
 801b570:	d0f2      	beq.n	801b558 <_realloc_r+0x1c>
 801b572:	4631      	mov	r1, r6
 801b574:	4622      	mov	r2, r4
 801b576:	f7ff f821 	bl	801a5bc <memcpy>
 801b57a:	4631      	mov	r1, r6
 801b57c:	4638      	mov	r0, r7
 801b57e:	f7ff f84d 	bl	801a61c <_free_r>
 801b582:	e7e9      	b.n	801b558 <_realloc_r+0x1c>
 801b584:	4635      	mov	r5, r6
 801b586:	e7e7      	b.n	801b558 <_realloc_r+0x1c>

0801b588 <__ssputs_r>:
 801b588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b58c:	688e      	ldr	r6, [r1, #8]
 801b58e:	429e      	cmp	r6, r3
 801b590:	4682      	mov	sl, r0
 801b592:	460c      	mov	r4, r1
 801b594:	4690      	mov	r8, r2
 801b596:	461f      	mov	r7, r3
 801b598:	d838      	bhi.n	801b60c <__ssputs_r+0x84>
 801b59a:	898a      	ldrh	r2, [r1, #12]
 801b59c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b5a0:	d032      	beq.n	801b608 <__ssputs_r+0x80>
 801b5a2:	6825      	ldr	r5, [r4, #0]
 801b5a4:	6909      	ldr	r1, [r1, #16]
 801b5a6:	eba5 0901 	sub.w	r9, r5, r1
 801b5aa:	6965      	ldr	r5, [r4, #20]
 801b5ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b5b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b5b4:	3301      	adds	r3, #1
 801b5b6:	444b      	add	r3, r9
 801b5b8:	106d      	asrs	r5, r5, #1
 801b5ba:	429d      	cmp	r5, r3
 801b5bc:	bf38      	it	cc
 801b5be:	461d      	movcc	r5, r3
 801b5c0:	0553      	lsls	r3, r2, #21
 801b5c2:	d531      	bpl.n	801b628 <__ssputs_r+0xa0>
 801b5c4:	4629      	mov	r1, r5
 801b5c6:	f7ff f879 	bl	801a6bc <_malloc_r>
 801b5ca:	4606      	mov	r6, r0
 801b5cc:	b950      	cbnz	r0, 801b5e4 <__ssputs_r+0x5c>
 801b5ce:	230c      	movs	r3, #12
 801b5d0:	f8ca 3000 	str.w	r3, [sl]
 801b5d4:	89a3      	ldrh	r3, [r4, #12]
 801b5d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b5da:	81a3      	strh	r3, [r4, #12]
 801b5dc:	f04f 30ff 	mov.w	r0, #4294967295
 801b5e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b5e4:	6921      	ldr	r1, [r4, #16]
 801b5e6:	464a      	mov	r2, r9
 801b5e8:	f7fe ffe8 	bl	801a5bc <memcpy>
 801b5ec:	89a3      	ldrh	r3, [r4, #12]
 801b5ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b5f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b5f6:	81a3      	strh	r3, [r4, #12]
 801b5f8:	6126      	str	r6, [r4, #16]
 801b5fa:	6165      	str	r5, [r4, #20]
 801b5fc:	444e      	add	r6, r9
 801b5fe:	eba5 0509 	sub.w	r5, r5, r9
 801b602:	6026      	str	r6, [r4, #0]
 801b604:	60a5      	str	r5, [r4, #8]
 801b606:	463e      	mov	r6, r7
 801b608:	42be      	cmp	r6, r7
 801b60a:	d900      	bls.n	801b60e <__ssputs_r+0x86>
 801b60c:	463e      	mov	r6, r7
 801b60e:	4632      	mov	r2, r6
 801b610:	6820      	ldr	r0, [r4, #0]
 801b612:	4641      	mov	r1, r8
 801b614:	f7fe ffe0 	bl	801a5d8 <memmove>
 801b618:	68a3      	ldr	r3, [r4, #8]
 801b61a:	6822      	ldr	r2, [r4, #0]
 801b61c:	1b9b      	subs	r3, r3, r6
 801b61e:	4432      	add	r2, r6
 801b620:	60a3      	str	r3, [r4, #8]
 801b622:	6022      	str	r2, [r4, #0]
 801b624:	2000      	movs	r0, #0
 801b626:	e7db      	b.n	801b5e0 <__ssputs_r+0x58>
 801b628:	462a      	mov	r2, r5
 801b62a:	f7ff ff87 	bl	801b53c <_realloc_r>
 801b62e:	4606      	mov	r6, r0
 801b630:	2800      	cmp	r0, #0
 801b632:	d1e1      	bne.n	801b5f8 <__ssputs_r+0x70>
 801b634:	6921      	ldr	r1, [r4, #16]
 801b636:	4650      	mov	r0, sl
 801b638:	f7fe fff0 	bl	801a61c <_free_r>
 801b63c:	e7c7      	b.n	801b5ce <__ssputs_r+0x46>
	...

0801b640 <_svfiprintf_r>:
 801b640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b644:	4698      	mov	r8, r3
 801b646:	898b      	ldrh	r3, [r1, #12]
 801b648:	061b      	lsls	r3, r3, #24
 801b64a:	b09d      	sub	sp, #116	; 0x74
 801b64c:	4607      	mov	r7, r0
 801b64e:	460d      	mov	r5, r1
 801b650:	4614      	mov	r4, r2
 801b652:	d50e      	bpl.n	801b672 <_svfiprintf_r+0x32>
 801b654:	690b      	ldr	r3, [r1, #16]
 801b656:	b963      	cbnz	r3, 801b672 <_svfiprintf_r+0x32>
 801b658:	2140      	movs	r1, #64	; 0x40
 801b65a:	f7ff f82f 	bl	801a6bc <_malloc_r>
 801b65e:	6028      	str	r0, [r5, #0]
 801b660:	6128      	str	r0, [r5, #16]
 801b662:	b920      	cbnz	r0, 801b66e <_svfiprintf_r+0x2e>
 801b664:	230c      	movs	r3, #12
 801b666:	603b      	str	r3, [r7, #0]
 801b668:	f04f 30ff 	mov.w	r0, #4294967295
 801b66c:	e0d1      	b.n	801b812 <_svfiprintf_r+0x1d2>
 801b66e:	2340      	movs	r3, #64	; 0x40
 801b670:	616b      	str	r3, [r5, #20]
 801b672:	2300      	movs	r3, #0
 801b674:	9309      	str	r3, [sp, #36]	; 0x24
 801b676:	2320      	movs	r3, #32
 801b678:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b67c:	f8cd 800c 	str.w	r8, [sp, #12]
 801b680:	2330      	movs	r3, #48	; 0x30
 801b682:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801b82c <_svfiprintf_r+0x1ec>
 801b686:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b68a:	f04f 0901 	mov.w	r9, #1
 801b68e:	4623      	mov	r3, r4
 801b690:	469a      	mov	sl, r3
 801b692:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b696:	b10a      	cbz	r2, 801b69c <_svfiprintf_r+0x5c>
 801b698:	2a25      	cmp	r2, #37	; 0x25
 801b69a:	d1f9      	bne.n	801b690 <_svfiprintf_r+0x50>
 801b69c:	ebba 0b04 	subs.w	fp, sl, r4
 801b6a0:	d00b      	beq.n	801b6ba <_svfiprintf_r+0x7a>
 801b6a2:	465b      	mov	r3, fp
 801b6a4:	4622      	mov	r2, r4
 801b6a6:	4629      	mov	r1, r5
 801b6a8:	4638      	mov	r0, r7
 801b6aa:	f7ff ff6d 	bl	801b588 <__ssputs_r>
 801b6ae:	3001      	adds	r0, #1
 801b6b0:	f000 80aa 	beq.w	801b808 <_svfiprintf_r+0x1c8>
 801b6b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b6b6:	445a      	add	r2, fp
 801b6b8:	9209      	str	r2, [sp, #36]	; 0x24
 801b6ba:	f89a 3000 	ldrb.w	r3, [sl]
 801b6be:	2b00      	cmp	r3, #0
 801b6c0:	f000 80a2 	beq.w	801b808 <_svfiprintf_r+0x1c8>
 801b6c4:	2300      	movs	r3, #0
 801b6c6:	f04f 32ff 	mov.w	r2, #4294967295
 801b6ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b6ce:	f10a 0a01 	add.w	sl, sl, #1
 801b6d2:	9304      	str	r3, [sp, #16]
 801b6d4:	9307      	str	r3, [sp, #28]
 801b6d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b6da:	931a      	str	r3, [sp, #104]	; 0x68
 801b6dc:	4654      	mov	r4, sl
 801b6de:	2205      	movs	r2, #5
 801b6e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b6e4:	4851      	ldr	r0, [pc, #324]	; (801b82c <_svfiprintf_r+0x1ec>)
 801b6e6:	f7e4 fd7b 	bl	80001e0 <memchr>
 801b6ea:	9a04      	ldr	r2, [sp, #16]
 801b6ec:	b9d8      	cbnz	r0, 801b726 <_svfiprintf_r+0xe6>
 801b6ee:	06d0      	lsls	r0, r2, #27
 801b6f0:	bf44      	itt	mi
 801b6f2:	2320      	movmi	r3, #32
 801b6f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b6f8:	0711      	lsls	r1, r2, #28
 801b6fa:	bf44      	itt	mi
 801b6fc:	232b      	movmi	r3, #43	; 0x2b
 801b6fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b702:	f89a 3000 	ldrb.w	r3, [sl]
 801b706:	2b2a      	cmp	r3, #42	; 0x2a
 801b708:	d015      	beq.n	801b736 <_svfiprintf_r+0xf6>
 801b70a:	9a07      	ldr	r2, [sp, #28]
 801b70c:	4654      	mov	r4, sl
 801b70e:	2000      	movs	r0, #0
 801b710:	f04f 0c0a 	mov.w	ip, #10
 801b714:	4621      	mov	r1, r4
 801b716:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b71a:	3b30      	subs	r3, #48	; 0x30
 801b71c:	2b09      	cmp	r3, #9
 801b71e:	d94e      	bls.n	801b7be <_svfiprintf_r+0x17e>
 801b720:	b1b0      	cbz	r0, 801b750 <_svfiprintf_r+0x110>
 801b722:	9207      	str	r2, [sp, #28]
 801b724:	e014      	b.n	801b750 <_svfiprintf_r+0x110>
 801b726:	eba0 0308 	sub.w	r3, r0, r8
 801b72a:	fa09 f303 	lsl.w	r3, r9, r3
 801b72e:	4313      	orrs	r3, r2
 801b730:	9304      	str	r3, [sp, #16]
 801b732:	46a2      	mov	sl, r4
 801b734:	e7d2      	b.n	801b6dc <_svfiprintf_r+0x9c>
 801b736:	9b03      	ldr	r3, [sp, #12]
 801b738:	1d19      	adds	r1, r3, #4
 801b73a:	681b      	ldr	r3, [r3, #0]
 801b73c:	9103      	str	r1, [sp, #12]
 801b73e:	2b00      	cmp	r3, #0
 801b740:	bfbb      	ittet	lt
 801b742:	425b      	neglt	r3, r3
 801b744:	f042 0202 	orrlt.w	r2, r2, #2
 801b748:	9307      	strge	r3, [sp, #28]
 801b74a:	9307      	strlt	r3, [sp, #28]
 801b74c:	bfb8      	it	lt
 801b74e:	9204      	strlt	r2, [sp, #16]
 801b750:	7823      	ldrb	r3, [r4, #0]
 801b752:	2b2e      	cmp	r3, #46	; 0x2e
 801b754:	d10c      	bne.n	801b770 <_svfiprintf_r+0x130>
 801b756:	7863      	ldrb	r3, [r4, #1]
 801b758:	2b2a      	cmp	r3, #42	; 0x2a
 801b75a:	d135      	bne.n	801b7c8 <_svfiprintf_r+0x188>
 801b75c:	9b03      	ldr	r3, [sp, #12]
 801b75e:	1d1a      	adds	r2, r3, #4
 801b760:	681b      	ldr	r3, [r3, #0]
 801b762:	9203      	str	r2, [sp, #12]
 801b764:	2b00      	cmp	r3, #0
 801b766:	bfb8      	it	lt
 801b768:	f04f 33ff 	movlt.w	r3, #4294967295
 801b76c:	3402      	adds	r4, #2
 801b76e:	9305      	str	r3, [sp, #20]
 801b770:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801b83c <_svfiprintf_r+0x1fc>
 801b774:	7821      	ldrb	r1, [r4, #0]
 801b776:	2203      	movs	r2, #3
 801b778:	4650      	mov	r0, sl
 801b77a:	f7e4 fd31 	bl	80001e0 <memchr>
 801b77e:	b140      	cbz	r0, 801b792 <_svfiprintf_r+0x152>
 801b780:	2340      	movs	r3, #64	; 0x40
 801b782:	eba0 000a 	sub.w	r0, r0, sl
 801b786:	fa03 f000 	lsl.w	r0, r3, r0
 801b78a:	9b04      	ldr	r3, [sp, #16]
 801b78c:	4303      	orrs	r3, r0
 801b78e:	3401      	adds	r4, #1
 801b790:	9304      	str	r3, [sp, #16]
 801b792:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b796:	4826      	ldr	r0, [pc, #152]	; (801b830 <_svfiprintf_r+0x1f0>)
 801b798:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b79c:	2206      	movs	r2, #6
 801b79e:	f7e4 fd1f 	bl	80001e0 <memchr>
 801b7a2:	2800      	cmp	r0, #0
 801b7a4:	d038      	beq.n	801b818 <_svfiprintf_r+0x1d8>
 801b7a6:	4b23      	ldr	r3, [pc, #140]	; (801b834 <_svfiprintf_r+0x1f4>)
 801b7a8:	bb1b      	cbnz	r3, 801b7f2 <_svfiprintf_r+0x1b2>
 801b7aa:	9b03      	ldr	r3, [sp, #12]
 801b7ac:	3307      	adds	r3, #7
 801b7ae:	f023 0307 	bic.w	r3, r3, #7
 801b7b2:	3308      	adds	r3, #8
 801b7b4:	9303      	str	r3, [sp, #12]
 801b7b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7b8:	4433      	add	r3, r6
 801b7ba:	9309      	str	r3, [sp, #36]	; 0x24
 801b7bc:	e767      	b.n	801b68e <_svfiprintf_r+0x4e>
 801b7be:	fb0c 3202 	mla	r2, ip, r2, r3
 801b7c2:	460c      	mov	r4, r1
 801b7c4:	2001      	movs	r0, #1
 801b7c6:	e7a5      	b.n	801b714 <_svfiprintf_r+0xd4>
 801b7c8:	2300      	movs	r3, #0
 801b7ca:	3401      	adds	r4, #1
 801b7cc:	9305      	str	r3, [sp, #20]
 801b7ce:	4619      	mov	r1, r3
 801b7d0:	f04f 0c0a 	mov.w	ip, #10
 801b7d4:	4620      	mov	r0, r4
 801b7d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b7da:	3a30      	subs	r2, #48	; 0x30
 801b7dc:	2a09      	cmp	r2, #9
 801b7de:	d903      	bls.n	801b7e8 <_svfiprintf_r+0x1a8>
 801b7e0:	2b00      	cmp	r3, #0
 801b7e2:	d0c5      	beq.n	801b770 <_svfiprintf_r+0x130>
 801b7e4:	9105      	str	r1, [sp, #20]
 801b7e6:	e7c3      	b.n	801b770 <_svfiprintf_r+0x130>
 801b7e8:	fb0c 2101 	mla	r1, ip, r1, r2
 801b7ec:	4604      	mov	r4, r0
 801b7ee:	2301      	movs	r3, #1
 801b7f0:	e7f0      	b.n	801b7d4 <_svfiprintf_r+0x194>
 801b7f2:	ab03      	add	r3, sp, #12
 801b7f4:	9300      	str	r3, [sp, #0]
 801b7f6:	462a      	mov	r2, r5
 801b7f8:	4b0f      	ldr	r3, [pc, #60]	; (801b838 <_svfiprintf_r+0x1f8>)
 801b7fa:	a904      	add	r1, sp, #16
 801b7fc:	4638      	mov	r0, r7
 801b7fe:	f3af 8000 	nop.w
 801b802:	1c42      	adds	r2, r0, #1
 801b804:	4606      	mov	r6, r0
 801b806:	d1d6      	bne.n	801b7b6 <_svfiprintf_r+0x176>
 801b808:	89ab      	ldrh	r3, [r5, #12]
 801b80a:	065b      	lsls	r3, r3, #25
 801b80c:	f53f af2c 	bmi.w	801b668 <_svfiprintf_r+0x28>
 801b810:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b812:	b01d      	add	sp, #116	; 0x74
 801b814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b818:	ab03      	add	r3, sp, #12
 801b81a:	9300      	str	r3, [sp, #0]
 801b81c:	462a      	mov	r2, r5
 801b81e:	4b06      	ldr	r3, [pc, #24]	; (801b838 <_svfiprintf_r+0x1f8>)
 801b820:	a904      	add	r1, sp, #16
 801b822:	4638      	mov	r0, r7
 801b824:	f7ff f96c 	bl	801ab00 <_printf_i>
 801b828:	e7eb      	b.n	801b802 <_svfiprintf_r+0x1c2>
 801b82a:	bf00      	nop
 801b82c:	0801f7c4 	.word	0x0801f7c4
 801b830:	0801f7ce 	.word	0x0801f7ce
 801b834:	00000000 	.word	0x00000000
 801b838:	0801b589 	.word	0x0801b589
 801b83c:	0801f7ca 	.word	0x0801f7ca

0801b840 <_read_r>:
 801b840:	b538      	push	{r3, r4, r5, lr}
 801b842:	4d07      	ldr	r5, [pc, #28]	; (801b860 <_read_r+0x20>)
 801b844:	4604      	mov	r4, r0
 801b846:	4608      	mov	r0, r1
 801b848:	4611      	mov	r1, r2
 801b84a:	2200      	movs	r2, #0
 801b84c:	602a      	str	r2, [r5, #0]
 801b84e:	461a      	mov	r2, r3
 801b850:	f7fd ff24 	bl	801969c <_read>
 801b854:	1c43      	adds	r3, r0, #1
 801b856:	d102      	bne.n	801b85e <_read_r+0x1e>
 801b858:	682b      	ldr	r3, [r5, #0]
 801b85a:	b103      	cbz	r3, 801b85e <_read_r+0x1e>
 801b85c:	6023      	str	r3, [r4, #0]
 801b85e:	bd38      	pop	{r3, r4, r5, pc}
 801b860:	200120bc 	.word	0x200120bc

0801b864 <_raise_r>:
 801b864:	291f      	cmp	r1, #31
 801b866:	b538      	push	{r3, r4, r5, lr}
 801b868:	4604      	mov	r4, r0
 801b86a:	460d      	mov	r5, r1
 801b86c:	d904      	bls.n	801b878 <_raise_r+0x14>
 801b86e:	2316      	movs	r3, #22
 801b870:	6003      	str	r3, [r0, #0]
 801b872:	f04f 30ff 	mov.w	r0, #4294967295
 801b876:	bd38      	pop	{r3, r4, r5, pc}
 801b878:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b87a:	b112      	cbz	r2, 801b882 <_raise_r+0x1e>
 801b87c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b880:	b94b      	cbnz	r3, 801b896 <_raise_r+0x32>
 801b882:	4620      	mov	r0, r4
 801b884:	f000 f830 	bl	801b8e8 <_getpid_r>
 801b888:	462a      	mov	r2, r5
 801b88a:	4601      	mov	r1, r0
 801b88c:	4620      	mov	r0, r4
 801b88e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b892:	f000 b817 	b.w	801b8c4 <_kill_r>
 801b896:	2b01      	cmp	r3, #1
 801b898:	d00a      	beq.n	801b8b0 <_raise_r+0x4c>
 801b89a:	1c59      	adds	r1, r3, #1
 801b89c:	d103      	bne.n	801b8a6 <_raise_r+0x42>
 801b89e:	2316      	movs	r3, #22
 801b8a0:	6003      	str	r3, [r0, #0]
 801b8a2:	2001      	movs	r0, #1
 801b8a4:	e7e7      	b.n	801b876 <_raise_r+0x12>
 801b8a6:	2400      	movs	r4, #0
 801b8a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b8ac:	4628      	mov	r0, r5
 801b8ae:	4798      	blx	r3
 801b8b0:	2000      	movs	r0, #0
 801b8b2:	e7e0      	b.n	801b876 <_raise_r+0x12>

0801b8b4 <raise>:
 801b8b4:	4b02      	ldr	r3, [pc, #8]	; (801b8c0 <raise+0xc>)
 801b8b6:	4601      	mov	r1, r0
 801b8b8:	6818      	ldr	r0, [r3, #0]
 801b8ba:	f7ff bfd3 	b.w	801b864 <_raise_r>
 801b8be:	bf00      	nop
 801b8c0:	200000e8 	.word	0x200000e8

0801b8c4 <_kill_r>:
 801b8c4:	b538      	push	{r3, r4, r5, lr}
 801b8c6:	4d07      	ldr	r5, [pc, #28]	; (801b8e4 <_kill_r+0x20>)
 801b8c8:	2300      	movs	r3, #0
 801b8ca:	4604      	mov	r4, r0
 801b8cc:	4608      	mov	r0, r1
 801b8ce:	4611      	mov	r1, r2
 801b8d0:	602b      	str	r3, [r5, #0]
 801b8d2:	f7e5 fb09 	bl	8000ee8 <_kill>
 801b8d6:	1c43      	adds	r3, r0, #1
 801b8d8:	d102      	bne.n	801b8e0 <_kill_r+0x1c>
 801b8da:	682b      	ldr	r3, [r5, #0]
 801b8dc:	b103      	cbz	r3, 801b8e0 <_kill_r+0x1c>
 801b8de:	6023      	str	r3, [r4, #0]
 801b8e0:	bd38      	pop	{r3, r4, r5, pc}
 801b8e2:	bf00      	nop
 801b8e4:	200120bc 	.word	0x200120bc

0801b8e8 <_getpid_r>:
 801b8e8:	f7e5 baf6 	b.w	8000ed8 <_getpid>

0801b8ec <_fstat_r>:
 801b8ec:	b538      	push	{r3, r4, r5, lr}
 801b8ee:	4d07      	ldr	r5, [pc, #28]	; (801b90c <_fstat_r+0x20>)
 801b8f0:	2300      	movs	r3, #0
 801b8f2:	4604      	mov	r4, r0
 801b8f4:	4608      	mov	r0, r1
 801b8f6:	4611      	mov	r1, r2
 801b8f8:	602b      	str	r3, [r5, #0]
 801b8fa:	f7e5 fb1d 	bl	8000f38 <_fstat>
 801b8fe:	1c43      	adds	r3, r0, #1
 801b900:	d102      	bne.n	801b908 <_fstat_r+0x1c>
 801b902:	682b      	ldr	r3, [r5, #0]
 801b904:	b103      	cbz	r3, 801b908 <_fstat_r+0x1c>
 801b906:	6023      	str	r3, [r4, #0]
 801b908:	bd38      	pop	{r3, r4, r5, pc}
 801b90a:	bf00      	nop
 801b90c:	200120bc 	.word	0x200120bc

0801b910 <_isatty_r>:
 801b910:	b538      	push	{r3, r4, r5, lr}
 801b912:	4d06      	ldr	r5, [pc, #24]	; (801b92c <_isatty_r+0x1c>)
 801b914:	2300      	movs	r3, #0
 801b916:	4604      	mov	r4, r0
 801b918:	4608      	mov	r0, r1
 801b91a:	602b      	str	r3, [r5, #0]
 801b91c:	f7e5 fb1c 	bl	8000f58 <_isatty>
 801b920:	1c43      	adds	r3, r0, #1
 801b922:	d102      	bne.n	801b92a <_isatty_r+0x1a>
 801b924:	682b      	ldr	r3, [r5, #0]
 801b926:	b103      	cbz	r3, 801b92a <_isatty_r+0x1a>
 801b928:	6023      	str	r3, [r4, #0]
 801b92a:	bd38      	pop	{r3, r4, r5, pc}
 801b92c:	200120bc 	.word	0x200120bc

0801b930 <_malloc_usable_size_r>:
 801b930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b934:	1f18      	subs	r0, r3, #4
 801b936:	2b00      	cmp	r3, #0
 801b938:	bfbc      	itt	lt
 801b93a:	580b      	ldrlt	r3, [r1, r0]
 801b93c:	18c0      	addlt	r0, r0, r3
 801b93e:	4770      	bx	lr

0801b940 <_init>:
 801b940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b942:	bf00      	nop
 801b944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b946:	bc08      	pop	{r3}
 801b948:	469e      	mov	lr, r3
 801b94a:	4770      	bx	lr

0801b94c <_fini>:
 801b94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b94e:	bf00      	nop
 801b950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b952:	bc08      	pop	{r3}
 801b954:	469e      	mov	lr, r3
 801b956:	4770      	bx	lr
