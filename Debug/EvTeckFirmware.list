
EvTeckFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021788  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004634  08021918  08021918  00031918  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025f4c  08025f4c  0004c658  2**0
                  CONTENTS
  4 .ARM          00000008  08025f4c  08025f4c  00035f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025f54  08025f54  0004c658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025f54  08025f54  00035f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025f58  08025f58  00035f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000308  10000000  08025f5c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 ccmram        0000c350  10000308  08026264  00040308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  1000c658  1000c658  0004c658  2**0
                  CONTENTS
 11 .bss          0000c410  20000000  20000000  00050000  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000c410  2000c410  00050000  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0004c658  2**0
                  CONTENTS, READONLY
 14 .debug_info   000654fc  00000000  00000000  0004c688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000b203  00000000  00000000  000b1b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003128  00000000  00000000  000bcd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003018  00000000  00000000  000bfeb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000383b0  00000000  00000000  000c2ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004bc09  00000000  00000000  000fb278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fac3c  00000000  00000000  00146e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00241abd  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000dd8c  00000000  00000000  00241b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000000 	.word	0x20000000
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08021900 	.word	0x08021900

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000004 	.word	0x20000004
 80001cc:	08021900 	.word	0x08021900

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	sprintf(buff_debug,"Task %s over flow hook\r\n",pcTaskName);
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	4903      	ldr	r1, [pc, #12]	; (8000f5c <vApplicationStackOverflowHook+0x1c>)
 8000f4e:	4804      	ldr	r0, [pc, #16]	; (8000f60 <vApplicationStackOverflowHook+0x20>)
 8000f50:	f01e fd64 	bl	801fa1c <siprintf>
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	08021918 	.word	0x08021918
 8000f60:	20001bd8 	.word	0x20001bd8

08000f64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f68:	f000 fe06 	bl	8001b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6c:	f000 f826 	bl	8000fbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f70:	f000 f9b2 	bl	80012d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f74:	f000 f988 	bl	8001288 <MX_DMA_Init>
  MX_SPI1_Init();
 8000f78:	f000 f88a 	bl	8001090 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000f7c:	f000 f8be 	bl	80010fc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f80:	f000 f90c 	bl	800119c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000f84:	f000 f956 	bl	8001234 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000f88:	4808      	ldr	r0, [pc, #32]	; (8000fac <main+0x48>)
 8000f8a:	f003 fe19 	bl	8004bc0 <HAL_TIM_Base_Start>
  board_init();
 8000f8e:	f01c f97f 	bl	801d290 <board_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f92:	f005 fec9 	bl	8006d28 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f96:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <main+0x4c>)
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <main+0x50>)
 8000f9c:	f005 ff23 	bl	8006de6 <osThreadNew>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <main+0x54>)
 8000fa4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fa6:	f005 fee3 	bl	8006d70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <main+0x46>
 8000fac:	20001d24 	.word	0x20001d24
 8000fb0:	08025900 	.word	0x08025900
 8000fb4:	080014c1 	.word	0x080014c1
 8000fb8:	20001cd8 	.word	0x20001cd8

08000fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b094      	sub	sp, #80	; 0x50
 8000fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc2:	f107 0320 	add.w	r3, r7, #32
 8000fc6:	2230      	movs	r2, #48	; 0x30
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f01d fdd6 	bl	801eb7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	4b28      	ldr	r3, [pc, #160]	; (8001088 <SystemClock_Config+0xcc>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	4a27      	ldr	r2, [pc, #156]	; (8001088 <SystemClock_Config+0xcc>)
 8000fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fee:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff0:	4b25      	ldr	r3, [pc, #148]	; (8001088 <SystemClock_Config+0xcc>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	4b22      	ldr	r3, [pc, #136]	; (800108c <SystemClock_Config+0xd0>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a21      	ldr	r2, [pc, #132]	; (800108c <SystemClock_Config+0xd0>)
 8001006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	4b1f      	ldr	r3, [pc, #124]	; (800108c <SystemClock_Config+0xd0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001018:	2301      	movs	r3, #1
 800101a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800101c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001022:	2302      	movs	r3, #2
 8001024:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001026:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800102a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800102c:	2304      	movs	r3, #4
 800102e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001030:	23a8      	movs	r3, #168	; 0xa8
 8001032:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001034:	2302      	movs	r3, #2
 8001036:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001038:	2304      	movs	r3, #4
 800103a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103c:	f107 0320 	add.w	r3, r7, #32
 8001040:	4618      	mov	r0, r3
 8001042:	f002 fdd1 	bl	8003be8 <HAL_RCC_OscConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800104c:	f000 fa68 	bl	8001520 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001050:	230f      	movs	r3, #15
 8001052:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001054:	2302      	movs	r3, #2
 8001056:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800105c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001060:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001066:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	2105      	movs	r1, #5
 800106e:	4618      	mov	r0, r3
 8001070:	f003 f832 	bl	80040d8 <HAL_RCC_ClockConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800107a:	f000 fa51 	bl	8001520 <Error_Handler>
  }
}
 800107e:	bf00      	nop
 8001080:	3750      	adds	r7, #80	; 0x50
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800
 800108c:	40007000 	.word	0x40007000

08001090 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001094:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <MX_SPI1_Init+0x64>)
 8001096:	4a18      	ldr	r2, [pc, #96]	; (80010f8 <MX_SPI1_Init+0x68>)
 8001098:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800109a:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <MX_SPI1_Init+0x64>)
 800109c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <MX_SPI1_Init+0x64>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <MX_SPI1_Init+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_SPI1_Init+0x64>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <MX_SPI1_Init+0x64>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MX_SPI1_Init+0x64>)
 80010bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MX_SPI1_Init+0x64>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <MX_SPI1_Init+0x64>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <MX_SPI1_Init+0x64>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <MX_SPI1_Init+0x64>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <MX_SPI1_Init+0x64>)
 80010dc:	220a      	movs	r2, #10
 80010de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <MX_SPI1_Init+0x64>)
 80010e2:	f003 fa27 	bl	8004534 <HAL_SPI_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010ec:	f000 fa18 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20001d6c 	.word	0x20001d6c
 80010f8:	40013000 	.word	0x40013000

080010fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 0308 	add.w	r3, r7, #8
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	463b      	mov	r3, r7
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001118:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <MX_TIM1_Init+0x98>)
 800111a:	4a1f      	ldr	r2, [pc, #124]	; (8001198 <MX_TIM1_Init+0x9c>)
 800111c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 800111e:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <MX_TIM1_Init+0x98>)
 8001120:	22a7      	movs	r2, #167	; 0xa7
 8001122:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <MX_TIM1_Init+0x98>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_TIM1_Init+0x98>)
 800112c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001130:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <MX_TIM1_Init+0x98>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001138:	4b16      	ldr	r3, [pc, #88]	; (8001194 <MX_TIM1_Init+0x98>)
 800113a:	2200      	movs	r2, #0
 800113c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <MX_TIM1_Init+0x98>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001144:	4813      	ldr	r0, [pc, #76]	; (8001194 <MX_TIM1_Init+0x98>)
 8001146:	f003 fceb 	bl	8004b20 <HAL_TIM_Base_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001150:	f000 f9e6 	bl	8001520 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001158:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	4619      	mov	r1, r3
 8001160:	480c      	ldr	r0, [pc, #48]	; (8001194 <MX_TIM1_Init+0x98>)
 8001162:	f003 ff0d 	bl	8004f80 <HAL_TIM_ConfigClockSource>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800116c:	f000 f9d8 	bl	8001520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001170:	2300      	movs	r3, #0
 8001172:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001178:	463b      	mov	r3, r7
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_TIM1_Init+0x98>)
 800117e:	f004 f929 	bl	80053d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001188:	f000 f9ca 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20001d24 	.word	0x20001d24
 8001198:	40010000 	.word	0x40010000

0800119c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	463b      	mov	r3, r7
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011b8:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <MX_TIM2_Init+0x94>)
 80011ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <MX_TIM2_Init+0x94>)
 80011c2:	22a7      	movs	r2, #167	; 0xa7
 80011c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_TIM2_Init+0x94>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_TIM2_Init+0x94>)
 80011ce:	f04f 32ff 	mov.w	r2, #4294967295
 80011d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <MX_TIM2_Init+0x94>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_TIM2_Init+0x94>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011e0:	4813      	ldr	r0, [pc, #76]	; (8001230 <MX_TIM2_Init+0x94>)
 80011e2:	f003 fc9d 	bl	8004b20 <HAL_TIM_Base_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011ec:	f000 f998 	bl	8001520 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	4619      	mov	r1, r3
 80011fc:	480c      	ldr	r0, [pc, #48]	; (8001230 <MX_TIM2_Init+0x94>)
 80011fe:	f003 febf 	bl	8004f80 <HAL_TIM_ConfigClockSource>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001208:	f000 f98a 	bl	8001520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120c:	2300      	movs	r3, #0
 800120e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	4619      	mov	r1, r3
 8001218:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_TIM2_Init+0x94>)
 800121a:	f004 f8db 	bl	80053d4 <HAL_TIMEx_MasterConfigSynchronization>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001224:	f000 f97c 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20001dc4 	.word	0x20001dc4

08001234 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 800123a:	4a12      	ldr	r2, [pc, #72]	; (8001284 <MX_USART1_UART_Init+0x50>)
 800123c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 8001240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001244:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 800125a:	220c      	movs	r2, #12
 800125c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 800126c:	f004 f942 	bl	80054f4 <HAL_UART_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001276:	f000 f953 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20001ce0 	.word	0x20001ce0
 8001284:	40011000 	.word	0x40011000

08001288 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <MX_DMA_Init+0x4c>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a0f      	ldr	r2, [pc, #60]	; (80012d4 <MX_DMA_Init+0x4c>)
 8001298:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <MX_DMA_Init+0x4c>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2105      	movs	r1, #5
 80012ae:	2038      	movs	r0, #56	; 0x38
 80012b0:	f000 fd80 	bl	8001db4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012b4:	2038      	movs	r0, #56	; 0x38
 80012b6:	f000 fd99 	bl	8001dec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2105      	movs	r1, #5
 80012be:	203b      	movs	r0, #59	; 0x3b
 80012c0:	f000 fd78 	bl	8001db4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80012c4:	203b      	movs	r0, #59	; 0x3b
 80012c6:	f000 fd91 	bl	8001dec <HAL_NVIC_EnableIRQ>

}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800

080012d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08e      	sub	sp, #56	; 0x38
 80012dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
 80012f2:	4b6e      	ldr	r3, [pc, #440]	; (80014ac <MX_GPIO_Init+0x1d4>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a6d      	ldr	r2, [pc, #436]	; (80014ac <MX_GPIO_Init+0x1d4>)
 80012f8:	f043 0310 	orr.w	r3, r3, #16
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b6b      	ldr	r3, [pc, #428]	; (80014ac <MX_GPIO_Init+0x1d4>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0310 	and.w	r3, r3, #16
 8001306:	623b      	str	r3, [r7, #32]
 8001308:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
 800130e:	4b67      	ldr	r3, [pc, #412]	; (80014ac <MX_GPIO_Init+0x1d4>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a66      	ldr	r2, [pc, #408]	; (80014ac <MX_GPIO_Init+0x1d4>)
 8001314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b64      	ldr	r3, [pc, #400]	; (80014ac <MX_GPIO_Init+0x1d4>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001322:	61fb      	str	r3, [r7, #28]
 8001324:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
 800132a:	4b60      	ldr	r3, [pc, #384]	; (80014ac <MX_GPIO_Init+0x1d4>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a5f      	ldr	r2, [pc, #380]	; (80014ac <MX_GPIO_Init+0x1d4>)
 8001330:	f043 0304 	orr.w	r3, r3, #4
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b5d      	ldr	r3, [pc, #372]	; (80014ac <MX_GPIO_Init+0x1d4>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	61bb      	str	r3, [r7, #24]
 8001340:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	4b59      	ldr	r3, [pc, #356]	; (80014ac <MX_GPIO_Init+0x1d4>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a58      	ldr	r2, [pc, #352]	; (80014ac <MX_GPIO_Init+0x1d4>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b56      	ldr	r3, [pc, #344]	; (80014ac <MX_GPIO_Init+0x1d4>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	4b52      	ldr	r3, [pc, #328]	; (80014ac <MX_GPIO_Init+0x1d4>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a51      	ldr	r2, [pc, #324]	; (80014ac <MX_GPIO_Init+0x1d4>)
 8001368:	f043 0320 	orr.w	r3, r3, #32
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b4f      	ldr	r3, [pc, #316]	; (80014ac <MX_GPIO_Init+0x1d4>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0320 	and.w	r3, r3, #32
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b4b      	ldr	r3, [pc, #300]	; (80014ac <MX_GPIO_Init+0x1d4>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a4a      	ldr	r2, [pc, #296]	; (80014ac <MX_GPIO_Init+0x1d4>)
 8001384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b48      	ldr	r3, [pc, #288]	; (80014ac <MX_GPIO_Init+0x1d4>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	4b44      	ldr	r3, [pc, #272]	; (80014ac <MX_GPIO_Init+0x1d4>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a43      	ldr	r2, [pc, #268]	; (80014ac <MX_GPIO_Init+0x1d4>)
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b41      	ldr	r3, [pc, #260]	; (80014ac <MX_GPIO_Init+0x1d4>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	4b3d      	ldr	r3, [pc, #244]	; (80014ac <MX_GPIO_Init+0x1d4>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a3c      	ldr	r2, [pc, #240]	; (80014ac <MX_GPIO_Init+0x1d4>)
 80013bc:	f043 0308 	orr.w	r3, r3, #8
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b3a      	ldr	r3, [pc, #232]	; (80014ac <MX_GPIO_Init+0x1d4>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VAL_Pin|MOTOR_Pin|MUX_B3_Pin|MUX_A4_Pin
 80013ce:	2200      	movs	r2, #0
 80013d0:	f44f 7163 	mov.w	r1, #908	; 0x38c
 80013d4:	4836      	ldr	r0, [pc, #216]	; (80014b0 <MX_GPIO_Init+0x1d8>)
 80013d6:	f002 fbed 	bl	8003bb4 <HAL_GPIO_WritePin>
                          |MUX_B4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MUX_A1_Pin|MUX_B1_Pin|MUX_A2_Pin, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80013e0:	4834      	ldr	r0, [pc, #208]	; (80014b4 <MX_GPIO_Init+0x1dc>)
 80013e2:	f002 fbe7 	bl	8003bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MUX_B2_Pin|MUX_A3_Pin|ADC_CNV2_Pin|ADC_RS2_Pin
 80013e6:	2200      	movs	r2, #0
 80013e8:	2137      	movs	r1, #55	; 0x37
 80013ea:	4833      	ldr	r0, [pc, #204]	; (80014b8 <MX_GPIO_Init+0x1e0>)
 80013ec:	f002 fbe2 	bl	8003bb4 <HAL_GPIO_WritePin>
                          |ADC_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ADC_CNV1_Pin|ADC_RS1_Pin|ADC_CS1_Pin, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 6150 	mov.w	r1, #3328	; 0xd00
 80013f6:	4831      	ldr	r0, [pc, #196]	; (80014bc <MX_GPIO_Init+0x1e4>)
 80013f8:	f002 fbdc 	bl	8003bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VAL_Pin MOTOR_Pin MUX_B3_Pin MUX_A4_Pin
                           MUX_B4_Pin */
  GPIO_InitStruct.Pin = VAL_Pin|MOTOR_Pin|MUX_B3_Pin|MUX_A4_Pin
 80013fc:	f44f 7363 	mov.w	r3, #908	; 0x38c
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
                          |MUX_B4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	2301      	movs	r3, #1
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800140e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001412:	4619      	mov	r1, r3
 8001414:	4826      	ldr	r0, [pc, #152]	; (80014b0 <MX_GPIO_Init+0x1d8>)
 8001416:	f002 fa19 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_A1_Pin MUX_B1_Pin MUX_A2_Pin */
  GPIO_InitStruct.Pin = MUX_A1_Pin|MUX_B1_Pin|MUX_A2_Pin;
 800141a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001420:	2301      	movs	r3, #1
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800142c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001430:	4619      	mov	r1, r3
 8001432:	4820      	ldr	r0, [pc, #128]	; (80014b4 <MX_GPIO_Init+0x1dc>)
 8001434:	f002 fa0a 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_B2_Pin MUX_A3_Pin ADC_CNV2_Pin ADC_RS2_Pin
                           ADC_CS2_Pin */
  GPIO_InitStruct.Pin = MUX_B2_Pin|MUX_A3_Pin|ADC_CNV2_Pin|ADC_RS2_Pin
 8001438:	2337      	movs	r3, #55	; 0x37
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
                          |ADC_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144c:	4619      	mov	r1, r3
 800144e:	481a      	ldr	r0, [pc, #104]	; (80014b8 <MX_GPIO_Init+0x1e0>)
 8001450:	f002 f9fc 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_CNV1_Pin ADC_RS1_Pin ADC_CS1_Pin */
  GPIO_InitStruct.Pin = ADC_CNV1_Pin|ADC_RS1_Pin|ADC_CS1_Pin;
 8001454:	f44f 6350 	mov.w	r3, #3328	; 0xd00
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	2301      	movs	r3, #1
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146a:	4619      	mov	r1, r3
 800146c:	4813      	ldr	r0, [pc, #76]	; (80014bc <MX_GPIO_Init+0x1e4>)
 800146e:	f002 f9ed 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_BUSY1_Pin */
  GPIO_InitStruct.Pin = ADC_BUSY1_Pin;
 8001472:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001478:	2300      	movs	r3, #0
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ADC_BUSY1_GPIO_Port, &GPIO_InitStruct);
 8001480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001484:	4619      	mov	r1, r3
 8001486:	480d      	ldr	r0, [pc, #52]	; (80014bc <MX_GPIO_Init+0x1e4>)
 8001488:	f002 f9e0 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_BUSY2_Pin */
  GPIO_InitStruct.Pin = ADC_BUSY2_Pin;
 800148c:	2308      	movs	r3, #8
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001490:	2300      	movs	r3, #0
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ADC_BUSY2_GPIO_Port, &GPIO_InitStruct);
 8001498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149c:	4619      	mov	r1, r3
 800149e:	4806      	ldr	r0, [pc, #24]	; (80014b8 <MX_GPIO_Init+0x1e0>)
 80014a0:	f002 f9d4 	bl	800384c <HAL_GPIO_Init>

}
 80014a4:	bf00      	nop
 80014a6:	3738      	adds	r7, #56	; 0x38
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40021400 	.word	0x40021400
 80014b8:	40021800 	.word	0x40021800
 80014bc:	40020c00 	.word	0x40020c00

080014c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80014c8:	f004 fe7c 	bl	80061c4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  app_init();
 80014cc:	f01b f9e6 	bl	801c89c <app_init>
  while(ip4_addr_isany_val(*netif_ip4_addr(&gnetif)))
 80014d0:	e002      	b.n	80014d8 <StartDefaultTask+0x18>
	  osDelay(200); // CMSIS-RTOS v1 uses milliseconds
 80014d2:	20c8      	movs	r0, #200	; 0xc8
 80014d4:	f005 fd20 	bl	8006f18 <osDelay>
  while(ip4_addr_isany_val(*netif_ip4_addr(&gnetif)))
 80014d8:	4b02      	ldr	r3, [pc, #8]	; (80014e4 <StartDefaultTask+0x24>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f8      	beq.n	80014d2 <StartDefaultTask+0x12>
//  dns_init();
//  ip_addr_t addr;
//  dns_gethostbyname("hub.dev.selex.vn",&addr,dns_callback,NULL);
//  /* Infinite loop */

  osThreadExit();
 80014e0:	f005 fd14 	bl	8006f0c <osThreadExit>
 80014e4:	20001f4c 	.word	0x20001f4c

080014e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a08      	ldr	r2, [pc, #32]	; (8001518 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d101      	bne.n	80014fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014fa:	f000 fb5f 	bl	8001bbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == htim2.Instance){
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d102      	bne.n	8001510 <HAL_TIM_PeriodElapsedCallback+0x28>
	  app_read_sensor_task((void*)htim);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f01b fc19 	bl	801cd42 <app_read_sensor_task>
  }
  /* USER CODE END Callback 1 */
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40001000 	.word	0x40001000
 800151c:	20001dc4 	.word	0x20001dc4

08001520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001524:	b672      	cpsid	i
}
 8001526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001528:	e7fe      	b.n	8001528 <Error_Handler+0x8>
	...

0800152c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_MspInit+0x54>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	4a11      	ldr	r2, [pc, #68]	; (8001580 <HAL_MspInit+0x54>)
 800153c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001540:	6453      	str	r3, [r2, #68]	; 0x44
 8001542:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <HAL_MspInit+0x54>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <HAL_MspInit+0x54>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <HAL_MspInit+0x54>)
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155c:	6413      	str	r3, [r2, #64]	; 0x40
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <HAL_MspInit+0x54>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	210f      	movs	r1, #15
 800156e:	f06f 0001 	mvn.w	r0, #1
 8001572:	f000 fc1f 	bl	8001db4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800

08001584 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a48      	ldr	r2, [pc, #288]	; (80016c4 <HAL_SPI_MspInit+0x140>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	f040 808a 	bne.w	80016bc <HAL_SPI_MspInit+0x138>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	4b46      	ldr	r3, [pc, #280]	; (80016c8 <HAL_SPI_MspInit+0x144>)
 80015ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b0:	4a45      	ldr	r2, [pc, #276]	; (80016c8 <HAL_SPI_MspInit+0x144>)
 80015b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015b6:	6453      	str	r3, [r2, #68]	; 0x44
 80015b8:	4b43      	ldr	r3, [pc, #268]	; (80016c8 <HAL_SPI_MspInit+0x144>)
 80015ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	4b3f      	ldr	r3, [pc, #252]	; (80016c8 <HAL_SPI_MspInit+0x144>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	4a3e      	ldr	r2, [pc, #248]	; (80016c8 <HAL_SPI_MspInit+0x144>)
 80015ce:	f043 0302 	orr.w	r3, r3, #2
 80015d2:	6313      	str	r3, [r2, #48]	; 0x30
 80015d4:	4b3c      	ldr	r3, [pc, #240]	; (80016c8 <HAL_SPI_MspInit+0x144>)
 80015d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80015e0:	2338      	movs	r3, #56	; 0x38
 80015e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ec:	2303      	movs	r3, #3
 80015ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015f0:	2305      	movs	r3, #5
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4619      	mov	r1, r3
 80015fa:	4834      	ldr	r0, [pc, #208]	; (80016cc <HAL_SPI_MspInit+0x148>)
 80015fc:	f002 f926 	bl	800384c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001600:	4b33      	ldr	r3, [pc, #204]	; (80016d0 <HAL_SPI_MspInit+0x14c>)
 8001602:	4a34      	ldr	r2, [pc, #208]	; (80016d4 <HAL_SPI_MspInit+0x150>)
 8001604:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001606:	4b32      	ldr	r3, [pc, #200]	; (80016d0 <HAL_SPI_MspInit+0x14c>)
 8001608:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800160c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800160e:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <HAL_SPI_MspInit+0x14c>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001614:	4b2e      	ldr	r3, [pc, #184]	; (80016d0 <HAL_SPI_MspInit+0x14c>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800161a:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <HAL_SPI_MspInit+0x14c>)
 800161c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001620:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001622:	4b2b      	ldr	r3, [pc, #172]	; (80016d0 <HAL_SPI_MspInit+0x14c>)
 8001624:	2200      	movs	r2, #0
 8001626:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001628:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <HAL_SPI_MspInit+0x14c>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800162e:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <HAL_SPI_MspInit+0x14c>)
 8001630:	2200      	movs	r2, #0
 8001632:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001634:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <HAL_SPI_MspInit+0x14c>)
 8001636:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800163a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800163c:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <HAL_SPI_MspInit+0x14c>)
 800163e:	2200      	movs	r2, #0
 8001640:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001642:	4823      	ldr	r0, [pc, #140]	; (80016d0 <HAL_SPI_MspInit+0x14c>)
 8001644:	f000 fbe0 	bl	8001e08 <HAL_DMA_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 800164e:	f7ff ff67 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a1e      	ldr	r2, [pc, #120]	; (80016d0 <HAL_SPI_MspInit+0x14c>)
 8001656:	64da      	str	r2, [r3, #76]	; 0x4c
 8001658:	4a1d      	ldr	r2, [pc, #116]	; (80016d0 <HAL_SPI_MspInit+0x14c>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800165e:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <HAL_SPI_MspInit+0x154>)
 8001660:	4a1e      	ldr	r2, [pc, #120]	; (80016dc <HAL_SPI_MspInit+0x158>)
 8001662:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001664:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <HAL_SPI_MspInit+0x154>)
 8001666:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800166a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800166c:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <HAL_SPI_MspInit+0x154>)
 800166e:	2240      	movs	r2, #64	; 0x40
 8001670:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001672:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HAL_SPI_MspInit+0x154>)
 8001674:	2200      	movs	r2, #0
 8001676:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001678:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <HAL_SPI_MspInit+0x154>)
 800167a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800167e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001680:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_SPI_MspInit+0x154>)
 8001682:	2200      	movs	r2, #0
 8001684:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001686:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <HAL_SPI_MspInit+0x154>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_SPI_MspInit+0x154>)
 800168e:	2200      	movs	r2, #0
 8001690:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HAL_SPI_MspInit+0x154>)
 8001694:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001698:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_SPI_MspInit+0x154>)
 800169c:	2200      	movs	r2, #0
 800169e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80016a0:	480d      	ldr	r0, [pc, #52]	; (80016d8 <HAL_SPI_MspInit+0x154>)
 80016a2:	f000 fbb1 	bl	8001e08 <HAL_DMA_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 80016ac:	f7ff ff38 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a09      	ldr	r2, [pc, #36]	; (80016d8 <HAL_SPI_MspInit+0x154>)
 80016b4:	649a      	str	r2, [r3, #72]	; 0x48
 80016b6:	4a08      	ldr	r2, [pc, #32]	; (80016d8 <HAL_SPI_MspInit+0x154>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016bc:	bf00      	nop
 80016be:	3728      	adds	r7, #40	; 0x28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40013000 	.word	0x40013000
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020400 	.word	0x40020400
 80016d0:	20001e0c 	.word	0x20001e0c
 80016d4:	40026410 	.word	0x40026410
 80016d8:	20001e6c 	.word	0x20001e6c
 80016dc:	40026458 	.word	0x40026458

080016e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a28      	ldr	r2, [pc, #160]	; (8001790 <HAL_TIM_Base_MspInit+0xb0>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d12e      	bne.n	8001750 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b27      	ldr	r3, [pc, #156]	; (8001794 <HAL_TIM_Base_MspInit+0xb4>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	4a26      	ldr	r2, [pc, #152]	; (8001794 <HAL_TIM_Base_MspInit+0xb4>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6453      	str	r3, [r2, #68]	; 0x44
 8001702:	4b24      	ldr	r3, [pc, #144]	; (8001794 <HAL_TIM_Base_MspInit+0xb4>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2105      	movs	r1, #5
 8001712:	2018      	movs	r0, #24
 8001714:	f000 fb4e 	bl	8001db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001718:	2018      	movs	r0, #24
 800171a:	f000 fb67 	bl	8001dec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2105      	movs	r1, #5
 8001722:	2019      	movs	r0, #25
 8001724:	f000 fb46 	bl	8001db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001728:	2019      	movs	r0, #25
 800172a:	f000 fb5f 	bl	8001dec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2105      	movs	r1, #5
 8001732:	201a      	movs	r0, #26
 8001734:	f000 fb3e 	bl	8001db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001738:	201a      	movs	r0, #26
 800173a:	f000 fb57 	bl	8001dec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2105      	movs	r1, #5
 8001742:	201b      	movs	r0, #27
 8001744:	f000 fb36 	bl	8001db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001748:	201b      	movs	r0, #27
 800174a:	f000 fb4f 	bl	8001dec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800174e:	e01a      	b.n	8001786 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001758:	d115      	bne.n	8001786 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <HAL_TIM_Base_MspInit+0xb4>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	4a0c      	ldr	r2, [pc, #48]	; (8001794 <HAL_TIM_Base_MspInit+0xb4>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6413      	str	r3, [r2, #64]	; 0x40
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <HAL_TIM_Base_MspInit+0xb4>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	2105      	movs	r1, #5
 800177a:	201c      	movs	r0, #28
 800177c:	f000 fb1a 	bl	8001db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001780:	201c      	movs	r0, #28
 8001782:	f000 fb33 	bl	8001dec <HAL_NVIC_EnableIRQ>
}
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40010000 	.word	0x40010000
 8001794:	40023800 	.word	0x40023800

08001798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	; 0x28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a1d      	ldr	r2, [pc, #116]	; (800182c <HAL_UART_MspInit+0x94>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d134      	bne.n	8001824 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <HAL_UART_MspInit+0x98>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	4a1b      	ldr	r2, [pc, #108]	; (8001830 <HAL_UART_MspInit+0x98>)
 80017c4:	f043 0310 	orr.w	r3, r3, #16
 80017c8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HAL_UART_MspInit+0x98>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	f003 0310 	and.w	r3, r3, #16
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <HAL_UART_MspInit+0x98>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a14      	ldr	r2, [pc, #80]	; (8001830 <HAL_UART_MspInit+0x98>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_UART_MspInit+0x98>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001800:	2303      	movs	r3, #3
 8001802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001804:	2307      	movs	r3, #7
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	4619      	mov	r1, r3
 800180e:	4809      	ldr	r0, [pc, #36]	; (8001834 <HAL_UART_MspInit+0x9c>)
 8001810:	f002 f81c 	bl	800384c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2105      	movs	r1, #5
 8001818:	2025      	movs	r0, #37	; 0x25
 800181a:	f000 facb 	bl	8001db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800181e:	2025      	movs	r0, #37	; 0x25
 8001820:	f000 fae4 	bl	8001dec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001824:	bf00      	nop
 8001826:	3728      	adds	r7, #40	; 0x28
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40011000 	.word	0x40011000
 8001830:	40023800 	.word	0x40023800
 8001834:	40020000 	.word	0x40020000

08001838 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08c      	sub	sp, #48	; 0x30
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001848:	2200      	movs	r2, #0
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	2036      	movs	r0, #54	; 0x36
 800184e:	f000 fab1 	bl	8001db4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001852:	2036      	movs	r0, #54	; 0x36
 8001854:	f000 faca 	bl	8001dec <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <HAL_InitTick+0xa4>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	4a1e      	ldr	r2, [pc, #120]	; (80018dc <HAL_InitTick+0xa4>)
 8001862:	f043 0310 	orr.w	r3, r3, #16
 8001866:	6413      	str	r3, [r2, #64]	; 0x40
 8001868:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <HAL_InitTick+0xa4>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f003 0310 	and.w	r3, r3, #16
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001874:	f107 0210 	add.w	r2, r7, #16
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4611      	mov	r1, r2
 800187e:	4618      	mov	r0, r3
 8001880:	f002 fe26 	bl	80044d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001884:	f002 fdfc 	bl	8004480 <HAL_RCC_GetPCLK1Freq>
 8001888:	4603      	mov	r3, r0
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800188e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001890:	4a13      	ldr	r2, [pc, #76]	; (80018e0 <HAL_InitTick+0xa8>)
 8001892:	fba2 2303 	umull	r2, r3, r2, r3
 8001896:	0c9b      	lsrs	r3, r3, #18
 8001898:	3b01      	subs	r3, #1
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <HAL_InitTick+0xac>)
 800189e:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <HAL_InitTick+0xb0>)
 80018a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <HAL_InitTick+0xac>)
 80018a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018a8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018aa:	4a0e      	ldr	r2, [pc, #56]	; (80018e4 <HAL_InitTick+0xac>)
 80018ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <HAL_InitTick+0xac>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <HAL_InitTick+0xac>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80018bc:	4809      	ldr	r0, [pc, #36]	; (80018e4 <HAL_InitTick+0xac>)
 80018be:	f003 f92f 	bl	8004b20 <HAL_TIM_Base_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d104      	bne.n	80018d2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80018c8:	4806      	ldr	r0, [pc, #24]	; (80018e4 <HAL_InitTick+0xac>)
 80018ca:	f003 f9e1 	bl	8004c90 <HAL_TIM_Base_Start_IT>
 80018ce:	4603      	mov	r3, r0
 80018d0:	e000      	b.n	80018d4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3730      	adds	r7, #48	; 0x30
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40023800 	.word	0x40023800
 80018e0:	431bde83 	.word	0x431bde83
 80018e4:	20001ecc 	.word	0x20001ecc
 80018e8:	40001000 	.word	0x40001000

080018ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <NMI_Handler+0x4>

080018f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f6:	e7fe      	b.n	80018f6 <HardFault_Handler+0x4>

080018f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <MemManage_Handler+0x4>

080018fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001902:	e7fe      	b.n	8001902 <BusFault_Handler+0x4>

08001904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <UsageFault_Handler+0x4>

0800190a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800191c:	4802      	ldr	r0, [pc, #8]	; (8001928 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800191e:	f003 fa27 	bl	8004d70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20001d24 	.word	0x20001d24

0800192c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001932:	f003 fa1d 	bl	8004d70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20001d24 	.word	0x20001d24

08001940 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001946:	f003 fa13 	bl	8004d70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20001d24 	.word	0x20001d24

08001954 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <TIM1_CC_IRQHandler+0x10>)
 800195a:	f003 fa09 	bl	8004d70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20001d24 	.word	0x20001d24

08001968 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <TIM2_IRQHandler+0x10>)
 800196e:	f003 f9ff 	bl	8004d70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20001dc4 	.word	0x20001dc4

0800197c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <USART1_IRQHandler+0x10>)
 8001982:	f003 fe05 	bl	8005590 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20001ce0 	.word	0x20001ce0

08001990 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <TIM6_DAC_IRQHandler+0x10>)
 8001996:	f003 f9eb 	bl	8004d70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20001ecc 	.word	0x20001ecc

080019a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <DMA2_Stream0_IRQHandler+0x10>)
 80019aa:	f000 fb6d 	bl	8002088 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20001e0c 	.word	0x20001e0c

080019b8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <DMA2_Stream3_IRQHandler+0x10>)
 80019be:	f000 fb63 	bl	8002088 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20001e6c 	.word	0x20001e6c

080019cc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <ETH_IRQHandler+0x10>)
 80019d2:	f001 f979 	bl	8002cc8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20003864 	.word	0x20003864

080019e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
	return 1;
 80019e4:	2301      	movs	r3, #1
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <_kill>:

int _kill(int pid, int sig)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019fa:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <_kill+0x20>)
 80019fc:	2216      	movs	r2, #22
 80019fe:	601a      	str	r2, [r3, #0]
	return -1;
 8001a00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	2000898c 	.word	0x2000898c

08001a14 <_exit>:

void _exit (int status)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ffe5 	bl	80019f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a26:	e7fe      	b.n	8001a26 <_exit+0x12>

08001a28 <_close>:
	if(file == 1) HAL_UART_Transmit(&huart1,(uint8_t*) ptr,len,1000);
	return len;
}

int _close(int file)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	return -1;
 8001a30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a50:	605a      	str	r2, [r3, #4]
	return 0;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <_isatty>:

int _isatty(int file)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	return 1;
 8001a68:	2301      	movs	r3, #1
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b085      	sub	sp, #20
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	60f8      	str	r0, [r7, #12]
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
	return 0;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a98:	4a14      	ldr	r2, [pc, #80]	; (8001aec <_sbrk+0x5c>)
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <_sbrk+0x60>)
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa4:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <_sbrk+0x64>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d102      	bne.n	8001ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <_sbrk+0x64>)
 8001aae:	4a12      	ldr	r2, [pc, #72]	; (8001af8 <_sbrk+0x68>)
 8001ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <_sbrk+0x64>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d205      	bcs.n	8001acc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <_sbrk+0x6c>)
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aca:	e009      	b.n	8001ae0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <_sbrk+0x64>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ad2:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <_sbrk+0x64>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	4a06      	ldr	r2, [pc, #24]	; (8001af4 <_sbrk+0x64>)
 8001adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ade:	68fb      	ldr	r3, [r7, #12]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	371c      	adds	r7, #28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	20020000 	.word	0x20020000
 8001af0:	00000400 	.word	0x00000400
 8001af4:	2000001c 	.word	0x2000001c
 8001af8:	2000c410 	.word	0x2000c410
 8001afc:	2000898c 	.word	0x2000898c

08001b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <SystemInit+0x20>)
 8001b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0a:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <SystemInit+0x20>)
 8001b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b28:	480d      	ldr	r0, [pc, #52]	; (8001b60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b2a:	490e      	ldr	r1, [pc, #56]	; (8001b64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b2c:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b30:	e002      	b.n	8001b38 <LoopCopyDataInit>

08001b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b36:	3304      	adds	r3, #4

08001b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b3c:	d3f9      	bcc.n	8001b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3e:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b40:	4c0b      	ldr	r4, [pc, #44]	; (8001b70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b44:	e001      	b.n	8001b4a <LoopFillZerobss>

08001b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b48:	3204      	adds	r2, #4

08001b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b4c:	d3fb      	bcc.n	8001b46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b4e:	f7ff ffd7 	bl	8001b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b52:	f01c ffa5 	bl	801eaa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b56:	f7ff fa05 	bl	8000f64 <main>
  bx  lr    
 8001b5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b60:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8001b64:	10000308 	.word	0x10000308
  ldr r2, =_sidata
 8001b68:	08025f5c 	.word	0x08025f5c
  ldr r2, =_sbss
 8001b6c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001b70:	2000c410 	.word	0x2000c410

08001b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b74:	e7fe      	b.n	8001b74 <ADC_IRQHandler>
	...

08001b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <HAL_Init+0x40>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0d      	ldr	r2, [pc, #52]	; (8001bb8 <HAL_Init+0x40>)
 8001b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <HAL_Init+0x40>)
 8001b8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <HAL_Init+0x40>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a07      	ldr	r2, [pc, #28]	; (8001bb8 <HAL_Init+0x40>)
 8001b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	f000 f8fc 	bl	8001d9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f7ff fe46 	bl	8001838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bac:	f7ff fcbe 	bl	800152c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023c00 	.word	0x40023c00

08001bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_IncTick+0x20>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_IncTick+0x24>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <HAL_IncTick+0x24>)
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	10000008 	.word	0x10000008
 8001be0:	20001f14 	.word	0x20001f14

08001be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return uwTick;
 8001be8:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <HAL_GetTick+0x14>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20001f14 	.word	0x20001f14

08001bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c04:	f7ff ffee 	bl	8001be4 <HAL_GetTick>
 8001c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c14:	d005      	beq.n	8001c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_Delay+0x44>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4413      	add	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c22:	bf00      	nop
 8001c24:	f7ff ffde 	bl	8001be4 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d8f7      	bhi.n	8001c24 <HAL_Delay+0x28>
  {
  }
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	10000008 	.word	0x10000008

08001c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c60:	4013      	ands	r3, r2
 8001c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c76:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	60d3      	str	r3, [r2, #12]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	f003 0307 	and.w	r3, r3, #7
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	db0b      	blt.n	8001cd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	f003 021f 	and.w	r2, r3, #31
 8001cc0:	4907      	ldr	r1, [pc, #28]	; (8001ce0 <__NVIC_EnableIRQ+0x38>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	2001      	movs	r0, #1
 8001cca:	fa00 f202 	lsl.w	r2, r0, r2
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000e100 	.word	0xe000e100

08001ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	6039      	str	r1, [r7, #0]
 8001cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	db0a      	blt.n	8001d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	490c      	ldr	r1, [pc, #48]	; (8001d30 <__NVIC_SetPriority+0x4c>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	0112      	lsls	r2, r2, #4
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	440b      	add	r3, r1
 8001d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d0c:	e00a      	b.n	8001d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4908      	ldr	r1, [pc, #32]	; (8001d34 <__NVIC_SetPriority+0x50>)
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	3b04      	subs	r3, #4
 8001d1c:	0112      	lsls	r2, r2, #4
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	440b      	add	r3, r1
 8001d22:	761a      	strb	r2, [r3, #24]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000e100 	.word	0xe000e100
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b089      	sub	sp, #36	; 0x24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f1c3 0307 	rsb	r3, r3, #7
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	bf28      	it	cs
 8001d56:	2304      	movcs	r3, #4
 8001d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	2b06      	cmp	r3, #6
 8001d60:	d902      	bls.n	8001d68 <NVIC_EncodePriority+0x30>
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3b03      	subs	r3, #3
 8001d66:	e000      	b.n	8001d6a <NVIC_EncodePriority+0x32>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43da      	mvns	r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d80:	f04f 31ff 	mov.w	r1, #4294967295
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8a:	43d9      	mvns	r1, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	4313      	orrs	r3, r2
         );
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3724      	adds	r7, #36	; 0x24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ff4c 	bl	8001c44 <__NVIC_SetPriorityGrouping>
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
 8001dc0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc6:	f7ff ff61 	bl	8001c8c <__NVIC_GetPriorityGrouping>
 8001dca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	68b9      	ldr	r1, [r7, #8]
 8001dd0:	6978      	ldr	r0, [r7, #20]
 8001dd2:	f7ff ffb1 	bl	8001d38 <NVIC_EncodePriority>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ddc:	4611      	mov	r1, r2
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff ff80 	bl	8001ce4 <__NVIC_SetPriority>
}
 8001de4:	bf00      	nop
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff ff54 	bl	8001ca8 <__NVIC_EnableIRQ>
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e14:	f7ff fee6 	bl	8001be4 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e099      	b.n	8001f58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0201 	bic.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e44:	e00f      	b.n	8001e66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e46:	f7ff fecd 	bl	8001be4 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b05      	cmp	r3, #5
 8001e52:	d908      	bls.n	8001e66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2220      	movs	r2, #32
 8001e58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e078      	b.n	8001f58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1e8      	bne.n	8001e46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	4b38      	ldr	r3, [pc, #224]	; (8001f60 <HAL_DMA_Init+0x158>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eaa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d107      	bne.n	8001ed0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f023 0307 	bic.w	r3, r3, #7
 8001ee6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d117      	bne.n	8001f2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00e      	beq.n	8001f2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 fa7b 	bl	8002408 <DMA_CheckFifoParam>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d008      	beq.n	8001f2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2240      	movs	r2, #64	; 0x40
 8001f1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f26:	2301      	movs	r3, #1
 8001f28:	e016      	b.n	8001f58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 fa32 	bl	800239c <DMA_CalcBaseAndBitshift>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f40:	223f      	movs	r2, #63	; 0x3f
 8001f42:	409a      	lsls	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	f010803f 	.word	0xf010803f

08001f64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f70:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f72:	f7ff fe37 	bl	8001be4 <HAL_GetTick>
 8001f76:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d008      	beq.n	8001f96 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2280      	movs	r2, #128	; 0x80
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e052      	b.n	800203c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0216 	bic.w	r2, r2, #22
 8001fa4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	695a      	ldr	r2, [r3, #20]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fb4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d103      	bne.n	8001fc6 <HAL_DMA_Abort+0x62>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d007      	beq.n	8001fd6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0208 	bic.w	r2, r2, #8
 8001fd4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0201 	bic.w	r2, r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fe6:	e013      	b.n	8002010 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fe8:	f7ff fdfc 	bl	8001be4 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b05      	cmp	r3, #5
 8001ff4:	d90c      	bls.n	8002010 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2203      	movs	r2, #3
 8002000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e015      	b.n	800203c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1e4      	bne.n	8001fe8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002022:	223f      	movs	r2, #63	; 0x3f
 8002024:	409a      	lsls	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d004      	beq.n	8002062 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2280      	movs	r2, #128	; 0x80
 800205c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e00c      	b.n	800207c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2205      	movs	r2, #5
 8002066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0201 	bic.w	r2, r2, #1
 8002078:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002094:	4b92      	ldr	r3, [pc, #584]	; (80022e0 <HAL_DMA_IRQHandler+0x258>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a92      	ldr	r2, [pc, #584]	; (80022e4 <HAL_DMA_IRQHandler+0x25c>)
 800209a:	fba2 2303 	umull	r2, r3, r2, r3
 800209e:	0a9b      	lsrs	r3, r3, #10
 80020a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b2:	2208      	movs	r2, #8
 80020b4:	409a      	lsls	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d01a      	beq.n	80020f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d013      	beq.n	80020f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0204 	bic.w	r2, r2, #4
 80020da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e0:	2208      	movs	r2, #8
 80020e2:	409a      	lsls	r2, r3
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ec:	f043 0201 	orr.w	r2, r3, #1
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f8:	2201      	movs	r2, #1
 80020fa:	409a      	lsls	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4013      	ands	r3, r2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d012      	beq.n	800212a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00b      	beq.n	800212a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002116:	2201      	movs	r2, #1
 8002118:	409a      	lsls	r2, r3
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002122:	f043 0202 	orr.w	r2, r3, #2
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212e:	2204      	movs	r2, #4
 8002130:	409a      	lsls	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4013      	ands	r3, r2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d012      	beq.n	8002160 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00b      	beq.n	8002160 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214c:	2204      	movs	r2, #4
 800214e:	409a      	lsls	r2, r3
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002158:	f043 0204 	orr.w	r2, r3, #4
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002164:	2210      	movs	r2, #16
 8002166:	409a      	lsls	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4013      	ands	r3, r2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d043      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d03c      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002182:	2210      	movs	r2, #16
 8002184:	409a      	lsls	r2, r3
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d018      	beq.n	80021ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d108      	bne.n	80021b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d024      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	4798      	blx	r3
 80021b6:	e01f      	b.n	80021f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d01b      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	4798      	blx	r3
 80021c8:	e016      	b.n	80021f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d107      	bne.n	80021e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0208 	bic.w	r2, r2, #8
 80021e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fc:	2220      	movs	r2, #32
 80021fe:	409a      	lsls	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4013      	ands	r3, r2
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 808e 	beq.w	8002326 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0310 	and.w	r3, r3, #16
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 8086 	beq.w	8002326 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221e:	2220      	movs	r2, #32
 8002220:	409a      	lsls	r2, r3
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b05      	cmp	r3, #5
 8002230:	d136      	bne.n	80022a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0216 	bic.w	r2, r2, #22
 8002240:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	695a      	ldr	r2, [r3, #20]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002250:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	2b00      	cmp	r3, #0
 8002258:	d103      	bne.n	8002262 <HAL_DMA_IRQHandler+0x1da>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800225e:	2b00      	cmp	r3, #0
 8002260:	d007      	beq.n	8002272 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0208 	bic.w	r2, r2, #8
 8002270:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002276:	223f      	movs	r2, #63	; 0x3f
 8002278:	409a      	lsls	r2, r3
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002292:	2b00      	cmp	r3, #0
 8002294:	d07d      	beq.n	8002392 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	4798      	blx	r3
        }
        return;
 800229e:	e078      	b.n	8002392 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d01c      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d108      	bne.n	80022ce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d030      	beq.n	8002326 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	4798      	blx	r3
 80022cc:	e02b      	b.n	8002326 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d027      	beq.n	8002326 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	4798      	blx	r3
 80022de:	e022      	b.n	8002326 <HAL_DMA_IRQHandler+0x29e>
 80022e0:	10000000 	.word	0x10000000
 80022e4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10f      	bne.n	8002316 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0210 	bic.w	r2, r2, #16
 8002304:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232a:	2b00      	cmp	r3, #0
 800232c:	d032      	beq.n	8002394 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d022      	beq.n	8002380 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2205      	movs	r2, #5
 800233e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0201 	bic.w	r2, r2, #1
 8002350:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	3301      	adds	r3, #1
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	429a      	cmp	r2, r3
 800235c:	d307      	bcc.n	800236e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1f2      	bne.n	8002352 <HAL_DMA_IRQHandler+0x2ca>
 800236c:	e000      	b.n	8002370 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800236e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	4798      	blx	r3
 8002390:	e000      	b.n	8002394 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002392:	bf00      	nop
    }
  }
}
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop

0800239c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	3b10      	subs	r3, #16
 80023ac:	4a14      	ldr	r2, [pc, #80]	; (8002400 <DMA_CalcBaseAndBitshift+0x64>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	091b      	lsrs	r3, r3, #4
 80023b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023b6:	4a13      	ldr	r2, [pc, #76]	; (8002404 <DMA_CalcBaseAndBitshift+0x68>)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4413      	add	r3, r2
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	461a      	mov	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d909      	bls.n	80023de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023d2:	f023 0303 	bic.w	r3, r3, #3
 80023d6:	1d1a      	adds	r2, r3, #4
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	659a      	str	r2, [r3, #88]	; 0x58
 80023dc:	e007      	b.n	80023ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023e6:	f023 0303 	bic.w	r3, r3, #3
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	aaaaaaab 	.word	0xaaaaaaab
 8002404:	0802593c 	.word	0x0802593c

08002408 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d11f      	bne.n	8002462 <DMA_CheckFifoParam+0x5a>
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b03      	cmp	r3, #3
 8002426:	d856      	bhi.n	80024d6 <DMA_CheckFifoParam+0xce>
 8002428:	a201      	add	r2, pc, #4	; (adr r2, 8002430 <DMA_CheckFifoParam+0x28>)
 800242a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242e:	bf00      	nop
 8002430:	08002441 	.word	0x08002441
 8002434:	08002453 	.word	0x08002453
 8002438:	08002441 	.word	0x08002441
 800243c:	080024d7 	.word	0x080024d7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d046      	beq.n	80024da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002450:	e043      	b.n	80024da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002456:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800245a:	d140      	bne.n	80024de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002460:	e03d      	b.n	80024de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800246a:	d121      	bne.n	80024b0 <DMA_CheckFifoParam+0xa8>
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b03      	cmp	r3, #3
 8002470:	d837      	bhi.n	80024e2 <DMA_CheckFifoParam+0xda>
 8002472:	a201      	add	r2, pc, #4	; (adr r2, 8002478 <DMA_CheckFifoParam+0x70>)
 8002474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002478:	08002489 	.word	0x08002489
 800247c:	0800248f 	.word	0x0800248f
 8002480:	08002489 	.word	0x08002489
 8002484:	080024a1 	.word	0x080024a1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
      break;
 800248c:	e030      	b.n	80024f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d025      	beq.n	80024e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800249e:	e022      	b.n	80024e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024a8:	d11f      	bne.n	80024ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024ae:	e01c      	b.n	80024ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d903      	bls.n	80024be <DMA_CheckFifoParam+0xb6>
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d003      	beq.n	80024c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024bc:	e018      	b.n	80024f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	73fb      	strb	r3, [r7, #15]
      break;
 80024c2:	e015      	b.n	80024f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00e      	beq.n	80024ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
      break;
 80024d4:	e00b      	b.n	80024ee <DMA_CheckFifoParam+0xe6>
      break;
 80024d6:	bf00      	nop
 80024d8:	e00a      	b.n	80024f0 <DMA_CheckFifoParam+0xe8>
      break;
 80024da:	bf00      	nop
 80024dc:	e008      	b.n	80024f0 <DMA_CheckFifoParam+0xe8>
      break;
 80024de:	bf00      	nop
 80024e0:	e006      	b.n	80024f0 <DMA_CheckFifoParam+0xe8>
      break;
 80024e2:	bf00      	nop
 80024e4:	e004      	b.n	80024f0 <DMA_CheckFifoParam+0xe8>
      break;
 80024e6:	bf00      	nop
 80024e8:	e002      	b.n	80024f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80024ea:	bf00      	nop
 80024ec:	e000      	b.n	80024f0 <DMA_CheckFifoParam+0xe8>
      break;
 80024ee:	bf00      	nop
    }
  } 
  
  return status; 
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop

08002500 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	61fb      	str	r3, [r7, #28]
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002510:	4baa      	ldr	r3, [pc, #680]	; (80027bc <HAL_ETH_Init+0x2bc>)
 8002512:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002518:	2300      	movs	r3, #0
 800251a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e183      	b.n	800282e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d106      	bne.n	8002540 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f003 ffa4 	bl	8006488 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002540:	2300      	movs	r3, #0
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	4b9e      	ldr	r3, [pc, #632]	; (80027c0 <HAL_ETH_Init+0x2c0>)
 8002546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002548:	4a9d      	ldr	r2, [pc, #628]	; (80027c0 <HAL_ETH_Init+0x2c0>)
 800254a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800254e:	6453      	str	r3, [r2, #68]	; 0x44
 8002550:	4b9b      	ldr	r3, [pc, #620]	; (80027c0 <HAL_ETH_Init+0x2c0>)
 8002552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800255c:	4b99      	ldr	r3, [pc, #612]	; (80027c4 <HAL_ETH_Init+0x2c4>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	4a98      	ldr	r2, [pc, #608]	; (80027c4 <HAL_ETH_Init+0x2c4>)
 8002562:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002566:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002568:	4b96      	ldr	r3, [pc, #600]	; (80027c4 <HAL_ETH_Init+0x2c4>)
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	4994      	ldr	r1, [pc, #592]	; (80027c4 <HAL_ETH_Init+0x2c4>)
 8002572:	4313      	orrs	r3, r2
 8002574:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 0201 	orr.w	r2, r2, #1
 8002588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800258c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800258e:	f7ff fb29 	bl	8001be4 <HAL_GetTick>
 8002592:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002594:	e011      	b.n	80025ba <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002596:	f7ff fb25 	bl	8001be4 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80025a4:	d909      	bls.n	80025ba <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2203      	movs	r2, #3
 80025aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e139      	b.n	800282e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1e4      	bne.n	8002596 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f023 031c 	bic.w	r3, r3, #28
 80025da:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80025dc:	f001 ff44 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 80025e0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	4a78      	ldr	r2, [pc, #480]	; (80027c8 <HAL_ETH_Init+0x2c8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d908      	bls.n	80025fc <HAL_ETH_Init+0xfc>
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	4a77      	ldr	r2, [pc, #476]	; (80027cc <HAL_ETH_Init+0x2cc>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d804      	bhi.n	80025fc <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f043 0308 	orr.w	r3, r3, #8
 80025f8:	61fb      	str	r3, [r7, #28]
 80025fa:	e027      	b.n	800264c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	4a73      	ldr	r2, [pc, #460]	; (80027cc <HAL_ETH_Init+0x2cc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d908      	bls.n	8002616 <HAL_ETH_Init+0x116>
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	4a6d      	ldr	r2, [pc, #436]	; (80027bc <HAL_ETH_Init+0x2bc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d204      	bcs.n	8002616 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f043 030c 	orr.w	r3, r3, #12
 8002612:	61fb      	str	r3, [r7, #28]
 8002614:	e01a      	b.n	800264c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	4a68      	ldr	r2, [pc, #416]	; (80027bc <HAL_ETH_Init+0x2bc>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d303      	bcc.n	8002626 <HAL_ETH_Init+0x126>
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	4a6b      	ldr	r2, [pc, #428]	; (80027d0 <HAL_ETH_Init+0x2d0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d911      	bls.n	800264a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	4a69      	ldr	r2, [pc, #420]	; (80027d0 <HAL_ETH_Init+0x2d0>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d908      	bls.n	8002640 <HAL_ETH_Init+0x140>
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	4a68      	ldr	r2, [pc, #416]	; (80027d4 <HAL_ETH_Init+0x2d4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d804      	bhi.n	8002640 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	f043 0304 	orr.w	r3, r3, #4
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	e005      	b.n	800264c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f043 0310 	orr.w	r3, r3, #16
 8002646:	61fb      	str	r3, [r7, #28]
 8002648:	e000      	b.n	800264c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800264a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	69fa      	ldr	r2, [r7, #28]
 8002652:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002654:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002658:	2100      	movs	r1, #0
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 fc17 	bl	8002e8e <HAL_ETH_WritePHYRegister>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00b      	beq.n	800267e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800266a:	6939      	ldr	r1, [r7, #16]
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 fdcd 	bl	800320c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e0d7      	b.n	800282e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800267e:	20ff      	movs	r0, #255	; 0xff
 8002680:	f7ff fabc 	bl	8001bfc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80a5 	beq.w	80027d8 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800268e:	f7ff faa9 	bl	8001be4 <HAL_GetTick>
 8002692:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002694:	f107 030c 	add.w	r3, r7, #12
 8002698:	461a      	mov	r2, r3
 800269a:	2101      	movs	r1, #1
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 fb8e 	bl	8002dbe <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80026a2:	f7ff fa9f 	bl	8001be4 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d90f      	bls.n	80026d4 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80026b8:	6939      	ldr	r1, [r7, #16]
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 fda6 	bl	800320c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e0ac      	b.n	800282e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0da      	beq.n	8002694 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80026de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026e2:	2100      	movs	r1, #0
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 fbd2 	bl	8002e8e <HAL_ETH_WritePHYRegister>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00b      	beq.n	8002708 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80026f4:	6939      	ldr	r1, [r7, #16]
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 fd88 	bl	800320c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002704:	2301      	movs	r3, #1
 8002706:	e092      	b.n	800282e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002708:	f7ff fa6c 	bl	8001be4 <HAL_GetTick>
 800270c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800270e:	f107 030c 	add.w	r3, r7, #12
 8002712:	461a      	mov	r2, r3
 8002714:	2101      	movs	r1, #1
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 fb51 	bl	8002dbe <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800271c:	f7ff fa62 	bl	8001be4 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f241 3288 	movw	r2, #5000	; 0x1388
 800272a:	4293      	cmp	r3, r2
 800272c:	d90f      	bls.n	800274e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002732:	6939      	ldr	r1, [r7, #16]
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 fd69 	bl	800320c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e06f      	b.n	800282e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f003 0320 	and.w	r3, r3, #32
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0da      	beq.n	800270e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002758:	f107 030c 	add.w	r3, r7, #12
 800275c:	461a      	mov	r2, r3
 800275e:	2110      	movs	r1, #16
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 fb2c 	bl	8002dbe <HAL_ETH_ReadPHYRegister>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00b      	beq.n	8002784 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002770:	6939      	ldr	r1, [r7, #16]
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fd4a 	bl	800320c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002780:	2301      	movs	r3, #1
 8002782:	e054      	b.n	800282e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	2b00      	cmp	r3, #0
 800278c:	d004      	beq.n	8002798 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	e002      	b.n	800279e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
 80027ae:	e035      	b.n	800281c <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	e030      	b.n	800281c <HAL_ETH_Init+0x31c>
 80027ba:	bf00      	nop
 80027bc:	03938700 	.word	0x03938700
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40013800 	.word	0x40013800
 80027c8:	01312cff 	.word	0x01312cff
 80027cc:	02160ebf 	.word	0x02160ebf
 80027d0:	05f5e0ff 	.word	0x05f5e0ff
 80027d4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	08db      	lsrs	r3, r3, #3
 80027de:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	085b      	lsrs	r3, r3, #1
 80027e6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80027e8:	4313      	orrs	r3, r2
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	2100      	movs	r1, #0
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 fb4c 	bl	8002e8e <HAL_ETH_WritePHYRegister>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00b      	beq.n	8002814 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002800:	6939      	ldr	r1, [r7, #16]
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fd02 	bl	800320c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e00c      	b.n	800282e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002814:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002818:	f7ff f9f0 	bl	8001bfc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800281c:	6939      	ldr	r1, [r7, #16]
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fcf4 	bl	800320c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3720      	adds	r7, #32
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop

08002838 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
 8002844:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_ETH_DMATxDescListInit+0x20>
 8002854:	2302      	movs	r3, #2
 8002856:	e052      	b.n	80028fe <HAL_ETH_DMATxDescListInit+0xc6>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	e030      	b.n	80028d6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	015b      	lsls	r3, r3, #5
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	4413      	add	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002884:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800288c:	fb02 f303 	mul.w	r3, r2, r3
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	4413      	add	r3, r2
 8002894:	461a      	mov	r2, r3
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d105      	bne.n	80028ae <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	3b01      	subs	r3, #1
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d208      	bcs.n	80028ca <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	3301      	adds	r3, #1
 80028bc:	015b      	lsls	r3, r3, #5
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	4413      	add	r3, r2
 80028c2:	461a      	mov	r2, r3
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	60da      	str	r2, [r3, #12]
 80028c8:	e002      	b.n	80028d0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	3301      	adds	r3, #1
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d3ca      	bcc.n	8002874 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e8:	3310      	adds	r3, #16
 80028ea:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800290a:	b480      	push	{r7}
 800290c:	b087      	sub	sp, #28
 800290e:	af00      	add	r7, sp, #0
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	60b9      	str	r1, [r7, #8]
 8002914:	607a      	str	r2, [r7, #4]
 8002916:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002922:	2b01      	cmp	r3, #1
 8002924:	d101      	bne.n	800292a <HAL_ETH_DMARxDescListInit+0x20>
 8002926:	2302      	movs	r3, #2
 8002928:	e056      	b.n	80029d8 <HAL_ETH_DMARxDescListInit+0xce>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2202      	movs	r2, #2
 8002936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	e034      	b.n	80029b0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	015b      	lsls	r3, r3, #5
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	4413      	add	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002956:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800295e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002966:	fb02 f303 	mul.w	r3, r2, r3
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	4413      	add	r3, r2
 800296e:	461a      	mov	r2, r3
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d105      	bne.n	8002988 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	3b01      	subs	r3, #1
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	429a      	cmp	r2, r3
 8002990:	d208      	bcs.n	80029a4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	3301      	adds	r3, #1
 8002996:	015b      	lsls	r3, r3, #5
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	4413      	add	r3, r2
 800299c:	461a      	mov	r2, r3
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	60da      	str	r2, [r3, #12]
 80029a2:	e002      	b.n	80029aa <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	3301      	adds	r3, #1
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d3c6      	bcc.n	8002946 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029c2:	330c      	adds	r3, #12
 80029c4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	371c      	adds	r7, #28
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_ETH_TransmitFrame+0x24>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e0cd      	b.n	8002ba4 <HAL_ETH_TransmitFrame+0x1c0>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e0b8      	b.n	8002ba4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	da09      	bge.n	8002a50 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2212      	movs	r2, #18
 8002a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0a9      	b.n	8002ba4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d915      	bls.n	8002a86 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	4a54      	ldr	r2, [pc, #336]	; (8002bb0 <HAL_ETH_TransmitFrame+0x1cc>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	0a9b      	lsrs	r3, r3, #10
 8002a64:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	4b51      	ldr	r3, [pc, #324]	; (8002bb0 <HAL_ETH_TransmitFrame+0x1cc>)
 8002a6a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a6e:	0a9b      	lsrs	r3, r3, #10
 8002a70:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d005      	beq.n	8002a8a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	3301      	adds	r3, #1
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	e001      	b.n	8002a8a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8002a86:	2301      	movs	r3, #1
 8002a88:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d11c      	bne.n	8002aca <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002a9e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002aaa:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002aba:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ac8:	e04b      	b.n	8002b62 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8002aca:	2300      	movs	r3, #0
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	e044      	b.n	8002b5a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ada:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ade:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d107      	bne.n	8002af6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002af4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002afe:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d116      	bne.n	8002b38 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002b18:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	4a25      	ldr	r2, [pc, #148]	; (8002bb4 <HAL_ETH_TransmitFrame+0x1d0>)
 8002b1e:	fb02 f203 	mul.w	r2, r2, r3
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	4413      	add	r3, r2
 8002b26:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002b2a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002b36:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b42:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b46:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	3301      	adds	r3, #1
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d3b6      	bcc.n	8002ad0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b6a:	3314      	adds	r3, #20
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00d      	beq.n	8002b92 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b7e:	3314      	adds	r3, #20
 8002b80:	2204      	movs	r2, #4
 8002b82:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	371c      	adds	r7, #28
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	ac02b00b 	.word	0xac02b00b
 8002bb4:	fffffa0c 	.word	0xfffffa0c

08002bb8 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e074      	b.n	8002cbc <HAL_ETH_GetReceivedFrame_IT+0x104>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002be2:	e05a      	b.n	8002c9a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	3301      	adds	r3, #1
 8002be8:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf8:	d10d      	bne.n	8002c16 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28
 8002c14:	e041      	b.n	8002c9a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10b      	bne.n	8002c3c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	461a      	mov	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	629a      	str	r2, [r3, #40]	; 0x28
 8002c3a:	e02e      	b.n	8002c9a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d103      	bne.n	8002c5e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	0c1b      	lsrs	r3, r3, #16
 8002c66:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002c6a:	1f1a      	subs	r2, r3, #4
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	461a      	mov	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e010      	b.n	8002cbc <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	db02      	blt.n	8002caa <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d99c      	bls.n	8002be4 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cd8:	3314      	adds	r3, #20
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce0:	2b40      	cmp	r3, #64	; 0x40
 8002ce2:	d112      	bne.n	8002d0a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f003 fc7d 	bl	80065e4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cf2:	3314      	adds	r3, #20
 8002cf4:	2240      	movs	r2, #64	; 0x40
 8002cf6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d08:	e01b      	b.n	8002d42 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d12:	3314      	adds	r3, #20
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d111      	bne.n	8002d42 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f839 	bl	8002d96 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d2c:	3314      	adds	r3, #20
 8002d2e:	2201      	movs	r2, #1
 8002d30:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d4a:	3314      	adds	r3, #20
 8002d4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d50:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d5a:	3314      	adds	r3, #20
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d66:	d112      	bne.n	8002d8e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f81e 	bl	8002daa <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d76:	3314      	adds	r3, #20
 8002d78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d7c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b086      	sub	sp, #24
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	607a      	str	r2, [r7, #4]
 8002dca:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b82      	cmp	r3, #130	; 0x82
 8002dde:	d101      	bne.n	8002de4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002de0:	2302      	movs	r3, #2
 8002de2:	e050      	b.n	8002e86 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2282      	movs	r2, #130	; 0x82
 8002de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f003 031c 	and.w	r3, r3, #28
 8002dfa:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8a1b      	ldrh	r3, [r3, #16]
 8002e00:	02db      	lsls	r3, r3, #11
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002e0a:	897b      	ldrh	r3, [r7, #10]
 8002e0c:	019b      	lsls	r3, r3, #6
 8002e0e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f023 0302 	bic.w	r3, r3, #2
 8002e1e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002e30:	f7fe fed8 	bl	8001be4 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e36:	e015      	b.n	8002e64 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002e38:	f7fe fed4 	bl	8001be4 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e46:	d309      	bcc.n	8002e5c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e014      	b.n	8002e86 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1e4      	bne.n	8002e38 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	461a      	mov	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b086      	sub	sp, #24
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	460b      	mov	r3, r1
 8002e98:	607a      	str	r2, [r7, #4]
 8002e9a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b42      	cmp	r3, #66	; 0x42
 8002eae:	d101      	bne.n	8002eb4 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e04e      	b.n	8002f52 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2242      	movs	r2, #66	; 0x42
 8002eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f003 031c 	and.w	r3, r3, #28
 8002eca:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8a1b      	ldrh	r3, [r3, #16]
 8002ed0:	02db      	lsls	r3, r3, #11
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002eda:	897b      	ldrh	r3, [r7, #10]
 8002edc:	019b      	lsls	r3, r3, #6
 8002ede:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f043 0302 	orr.w	r3, r3, #2
 8002eee:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002f0a:	f7fe fe6b 	bl	8001be4 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f10:	e015      	b.n	8002f3e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002f12:	f7fe fe67 	bl	8001be4 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f20:	d309      	bcc.n	8002f36 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e00d      	b.n	8002f52 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1e4      	bne.n	8002f12 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_ETH_Start+0x16>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e01f      	b.n	8002fb0 <HAL_ETH_Start+0x56>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 fb45 	bl	8003610 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fb7c 	bl	8003684 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 fc13 	bl	80037b8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fbb0 	bl	80036f8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 fbdd 	bl	8003758 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_ETH_Stop+0x16>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e01f      	b.n	800300e <HAL_ETH_Stop+0x56>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fba2 	bl	8003728 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 fbcf 	bl	8003788 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 fb67 	bl	80036be <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 fbe1 	bl	80037b8 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fb27 	bl	800364a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_ETH_ConfigMAC+0x1c>
 8003030:	2302      	movs	r3, #2
 8003032:	e0e4      	b.n	80031fe <HAL_ETH_ConfigMAC+0x1e6>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 80b1 	beq.w	80031ae <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	4b6c      	ldr	r3, [pc, #432]	; (8003208 <HAL_ETH_ConfigMAC+0x1f0>)
 8003058:	4013      	ands	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003064:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800306a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8003070:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8003076:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800307c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8003082:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8003088:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800308e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8003094:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800309a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80030a0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80030a6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80030be:	2001      	movs	r0, #1
 80030c0:	f7fe fd9c 	bl	8001bfc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80030d4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80030da:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80030e0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80030e6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80030ec:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80030f2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80030fe:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003100:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800310a:	2001      	movs	r0, #1
 800310c:	f7fe fd76 	bl	8001bfc <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003120:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800312a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	f64f 7341 	movw	r3, #65345	; 0xff41
 800313a:	4013      	ands	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003142:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003148:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800314e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8003154:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800315a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8003160:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4313      	orrs	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003178:	2001      	movs	r0, #1
 800317a:	f7fe fd3f 	bl	8001bfc <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800319e:	2001      	movs	r0, #1
 80031a0:	f7fe fd2c 	bl	8001bfc <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	61da      	str	r2, [r3, #28]
 80031ac:	e01e      	b.n	80031ec <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80031bc:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80031de:	2001      	movs	r0, #1
 80031e0:	f7fe fd0c 	bl	8001bfc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	ff20810f 	.word	0xff20810f

0800320c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b0b0      	sub	sp, #192	; 0xc0
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d007      	beq.n	8003232 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003228:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003230:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003232:	2300      	movs	r3, #0
 8003234:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003236:	2300      	movs	r3, #0
 8003238:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800323a:	2300      	movs	r3, #0
 800323c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800323e:	2300      	movs	r3, #0
 8003240:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003242:	2300      	movs	r3, #0
 8003244:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003246:	2300      	movs	r3, #0
 8003248:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d103      	bne.n	800325a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003256:	663b      	str	r3, [r7, #96]	; 0x60
 8003258:	e001      	b.n	800325e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800325a:	2300      	movs	r3, #0
 800325c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800325e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003262:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003264:	2300      	movs	r3, #0
 8003266:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003268:	2300      	movs	r3, #0
 800326a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800326c:	2300      	movs	r3, #0
 800326e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003270:	2300      	movs	r3, #0
 8003272:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003274:	2300      	movs	r3, #0
 8003276:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003278:	2340      	movs	r3, #64	; 0x40
 800327a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800327c:	2300      	movs	r3, #0
 800327e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003282:	2300      	movs	r3, #0
 8003284:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003288:	2300      	movs	r3, #0
 800328a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800328e:	2300      	movs	r3, #0
 8003290:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003294:	2300      	movs	r3, #0
 8003296:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800329a:	2300      	movs	r3, #0
 800329c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80032ac:	2380      	movs	r3, #128	; 0x80
 80032ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80032b2:	2300      	movs	r3, #0
 80032b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80032b8:	2300      	movs	r3, #0
 80032ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80032be:	2300      	movs	r3, #0
 80032c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80032c4:	2300      	movs	r3, #0
 80032c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80032ca:	2300      	movs	r3, #0
 80032cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80032e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032e4:	4bac      	ldr	r3, [pc, #688]	; (8003598 <ETH_MACDMAConfig+0x38c>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80032ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80032ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80032f0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80032f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80032f4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80032f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80032f8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80032fe:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003300:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003302:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003306:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800330c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800330e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003310:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003312:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003314:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003316:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003318:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800331a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800331c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800331e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003320:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003322:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003334:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003340:	2001      	movs	r0, #1
 8003342:	f7fe fc5b 	bl	8001bfc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800334e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003350:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003352:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003354:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003356:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003358:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800335a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800335e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003360:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003364:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003366:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800336a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800336c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003370:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003374:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800337c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800337e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800338a:	2001      	movs	r0, #1
 800338c:	f7fe fc36 	bl	8001bfc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003398:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033a2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80033ac:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80033b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033bc:	f64f 7341 	movw	r3, #65345	; 0xff41
 80033c0:	4013      	ands	r3, r2
 80033c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80033c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033ca:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80033cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80033d0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80033d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80033d6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80033d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80033dc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80033de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80033e2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80033e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80033e8:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80033ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033fc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003408:	2001      	movs	r0, #1
 800340a:	f7fe fbf7 	bl	8001bfc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003416:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003418:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800341c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003432:	2001      	movs	r0, #1
 8003434:	f7fe fbe2 	bl	8001bfc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003440:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003442:	2300      	movs	r3, #0
 8003444:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003446:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800344a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800344c:	2300      	movs	r3, #0
 800344e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003450:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003454:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003456:	2300      	movs	r3, #0
 8003458:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800345e:	2300      	movs	r3, #0
 8003460:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003462:	2300      	movs	r3, #0
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003466:	2304      	movs	r3, #4
 8003468:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800346a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800346e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003470:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003474:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003476:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800347a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800347c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003480:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003482:	2380      	movs	r3, #128	; 0x80
 8003484:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8003486:	2300      	movs	r3, #0
 8003488:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800348a:	2300      	movs	r3, #0
 800348c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003496:	3318      	adds	r3, #24
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800349e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034a2:	4b3e      	ldr	r3, [pc, #248]	; (800359c <ETH_MACDMAConfig+0x390>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80034aa:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80034ac:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80034ae:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80034b0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80034b2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80034b4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80034b6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80034b8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80034ba:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80034bc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80034be:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80034c0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80034c2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80034c6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80034c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80034ca:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80034cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034de:	3318      	adds	r3, #24
 80034e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034e4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ee:	3318      	adds	r3, #24
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80034f6:	2001      	movs	r0, #1
 80034f8:	f7fe fb80 	bl	8001bfc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003504:	3318      	adds	r3, #24
 8003506:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800350a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800350c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003510:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003514:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003518:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800351a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800351c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800351e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003520:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003522:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003526:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003534:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003544:	2001      	movs	r0, #1
 8003546:	f7fe fb59 	bl	8001bfc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003552:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003556:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d10f      	bne.n	8003580 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003568:	331c      	adds	r3, #28
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800357c:	331c      	adds	r3, #28
 800357e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	461a      	mov	r2, r3
 8003586:	2100      	movs	r1, #0
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f809 	bl	80035a0 <ETH_MACAddressConfig>
}
 800358e:	bf00      	nop
 8003590:	37c0      	adds	r7, #192	; 0xc0
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	ff20810f 	.word	0xff20810f
 800359c:	f8de3f23 	.word	0xf8de3f23

080035a0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3305      	adds	r3, #5
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	021b      	lsls	r3, r3, #8
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	3204      	adds	r2, #4
 80035b8:	7812      	ldrb	r2, [r2, #0]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	4b11      	ldr	r3, [pc, #68]	; (8003608 <ETH_MACAddressConfig+0x68>)
 80035c2:	4413      	add	r3, r2
 80035c4:	461a      	mov	r2, r3
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3303      	adds	r3, #3
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	061a      	lsls	r2, r3, #24
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	3302      	adds	r3, #2
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	041b      	lsls	r3, r3, #16
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3301      	adds	r3, #1
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	021b      	lsls	r3, r3, #8
 80035e4:	4313      	orrs	r3, r2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	7812      	ldrb	r2, [r2, #0]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	4b06      	ldr	r3, [pc, #24]	; (800360c <ETH_MACAddressConfig+0x6c>)
 80035f2:	4413      	add	r3, r2
 80035f4:	461a      	mov	r2, r3
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	6013      	str	r3, [r2, #0]
}
 80035fa:	bf00      	nop
 80035fc:	371c      	adds	r7, #28
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40028040 	.word	0x40028040
 800360c:	40028044 	.word	0x40028044

08003610 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0208 	orr.w	r2, r2, #8
 800362a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003634:	2001      	movs	r0, #1
 8003636:	f000 f8e9 	bl	800380c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	601a      	str	r2, [r3, #0]
}
 8003642:	bf00      	nop
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800364a:	b580      	push	{r7, lr}
 800364c:	b084      	sub	sp, #16
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0208 	bic.w	r2, r2, #8
 8003664:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800366e:	2001      	movs	r0, #1
 8003670:	f000 f8cc 	bl	800380c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	601a      	str	r2, [r3, #0]
}
 800367c:	bf00      	nop
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0204 	orr.w	r2, r2, #4
 800369e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80036a8:	2001      	movs	r0, #1
 80036aa:	f000 f8af 	bl	800380c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	601a      	str	r2, [r3, #0]
}
 80036b6:	bf00      	nop
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0204 	bic.w	r2, r2, #4
 80036d8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80036e2:	2001      	movs	r0, #1
 80036e4:	f000 f892 	bl	800380c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	601a      	str	r2, [r3, #0]
}
 80036f0:	bf00      	nop
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003708:	3318      	adds	r3, #24
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003718:	3318      	adds	r3, #24
 800371a:	601a      	str	r2, [r3, #0]
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003738:	3318      	adds	r3, #24
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003748:	3318      	adds	r3, #24
 800374a:	601a      	str	r2, [r3, #0]
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003768:	3318      	adds	r3, #24
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f042 0202 	orr.w	r2, r2, #2
 8003774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003778:	3318      	adds	r3, #24
 800377a:	601a      	str	r2, [r3, #0]
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003798:	3318      	adds	r3, #24
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0202 	bic.w	r2, r2, #2
 80037a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037a8:	3318      	adds	r3, #24
 80037aa:	601a      	str	r2, [r3, #0]
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037cc:	3318      	adds	r3, #24
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80037d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037dc:	3318      	adds	r3, #24
 80037de:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037e8:	3318      	adds	r3, #24
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80037ee:	2001      	movs	r0, #1
 80037f0:	f000 f80c 	bl	800380c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037fe:	3318      	adds	r3, #24
 8003800:	601a      	str	r2, [r3, #0]
}
 8003802:	bf00      	nop
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <ETH_Delay+0x38>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a0b      	ldr	r2, [pc, #44]	; (8003848 <ETH_Delay+0x3c>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	0a5b      	lsrs	r3, r3, #9
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	fb02 f303 	mul.w	r3, r2, r3
 8003826:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8003828:	bf00      	nop
  } 
  while (Delay --);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	1e5a      	subs	r2, r3, #1
 800382e:	60fa      	str	r2, [r7, #12]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1f9      	bne.n	8003828 <ETH_Delay+0x1c>
}
 8003834:	bf00      	nop
 8003836:	bf00      	nop
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	10000000 	.word	0x10000000
 8003848:	10624dd3 	.word	0x10624dd3

0800384c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800384c:	b480      	push	{r7}
 800384e:	b089      	sub	sp, #36	; 0x24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800385e:	2300      	movs	r3, #0
 8003860:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003862:	2300      	movs	r3, #0
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	e16b      	b.n	8003b40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003868:	2201      	movs	r2, #1
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4013      	ands	r3, r2
 800387a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	429a      	cmp	r2, r3
 8003882:	f040 815a 	bne.w	8003b3a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	2b01      	cmp	r3, #1
 8003890:	d005      	beq.n	800389e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800389a:	2b02      	cmp	r3, #2
 800389c:	d130      	bne.n	8003900 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	2203      	movs	r2, #3
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	43db      	mvns	r3, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4013      	ands	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038d4:	2201      	movs	r2, #1
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	f003 0201 	and.w	r2, r3, #1
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	2b03      	cmp	r3, #3
 800390a:	d017      	beq.n	800393c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	2203      	movs	r2, #3
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4013      	ands	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4313      	orrs	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 0303 	and.w	r3, r3, #3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d123      	bne.n	8003990 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	08da      	lsrs	r2, r3, #3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3208      	adds	r2, #8
 8003950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003954:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	220f      	movs	r2, #15
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	43db      	mvns	r3, r3
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4013      	ands	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4313      	orrs	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	08da      	lsrs	r2, r3, #3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3208      	adds	r2, #8
 800398a:	69b9      	ldr	r1, [r7, #24]
 800398c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	2203      	movs	r2, #3
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	43db      	mvns	r3, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4013      	ands	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 0203 	and.w	r2, r3, #3
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 80b4 	beq.w	8003b3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	4b60      	ldr	r3, [pc, #384]	; (8003b58 <HAL_GPIO_Init+0x30c>)
 80039d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039da:	4a5f      	ldr	r2, [pc, #380]	; (8003b58 <HAL_GPIO_Init+0x30c>)
 80039dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039e0:	6453      	str	r3, [r2, #68]	; 0x44
 80039e2:	4b5d      	ldr	r3, [pc, #372]	; (8003b58 <HAL_GPIO_Init+0x30c>)
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039ee:	4a5b      	ldr	r2, [pc, #364]	; (8003b5c <HAL_GPIO_Init+0x310>)
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	089b      	lsrs	r3, r3, #2
 80039f4:	3302      	adds	r3, #2
 80039f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	220f      	movs	r2, #15
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a52      	ldr	r2, [pc, #328]	; (8003b60 <HAL_GPIO_Init+0x314>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d02b      	beq.n	8003a72 <HAL_GPIO_Init+0x226>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a51      	ldr	r2, [pc, #324]	; (8003b64 <HAL_GPIO_Init+0x318>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d025      	beq.n	8003a6e <HAL_GPIO_Init+0x222>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a50      	ldr	r2, [pc, #320]	; (8003b68 <HAL_GPIO_Init+0x31c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d01f      	beq.n	8003a6a <HAL_GPIO_Init+0x21e>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a4f      	ldr	r2, [pc, #316]	; (8003b6c <HAL_GPIO_Init+0x320>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d019      	beq.n	8003a66 <HAL_GPIO_Init+0x21a>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a4e      	ldr	r2, [pc, #312]	; (8003b70 <HAL_GPIO_Init+0x324>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d013      	beq.n	8003a62 <HAL_GPIO_Init+0x216>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a4d      	ldr	r2, [pc, #308]	; (8003b74 <HAL_GPIO_Init+0x328>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00d      	beq.n	8003a5e <HAL_GPIO_Init+0x212>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a4c      	ldr	r2, [pc, #304]	; (8003b78 <HAL_GPIO_Init+0x32c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d007      	beq.n	8003a5a <HAL_GPIO_Init+0x20e>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a4b      	ldr	r2, [pc, #300]	; (8003b7c <HAL_GPIO_Init+0x330>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d101      	bne.n	8003a56 <HAL_GPIO_Init+0x20a>
 8003a52:	2307      	movs	r3, #7
 8003a54:	e00e      	b.n	8003a74 <HAL_GPIO_Init+0x228>
 8003a56:	2308      	movs	r3, #8
 8003a58:	e00c      	b.n	8003a74 <HAL_GPIO_Init+0x228>
 8003a5a:	2306      	movs	r3, #6
 8003a5c:	e00a      	b.n	8003a74 <HAL_GPIO_Init+0x228>
 8003a5e:	2305      	movs	r3, #5
 8003a60:	e008      	b.n	8003a74 <HAL_GPIO_Init+0x228>
 8003a62:	2304      	movs	r3, #4
 8003a64:	e006      	b.n	8003a74 <HAL_GPIO_Init+0x228>
 8003a66:	2303      	movs	r3, #3
 8003a68:	e004      	b.n	8003a74 <HAL_GPIO_Init+0x228>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e002      	b.n	8003a74 <HAL_GPIO_Init+0x228>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <HAL_GPIO_Init+0x228>
 8003a72:	2300      	movs	r3, #0
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	f002 0203 	and.w	r2, r2, #3
 8003a7a:	0092      	lsls	r2, r2, #2
 8003a7c:	4093      	lsls	r3, r2
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a84:	4935      	ldr	r1, [pc, #212]	; (8003b5c <HAL_GPIO_Init+0x310>)
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	089b      	lsrs	r3, r3, #2
 8003a8a:	3302      	adds	r3, #2
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a92:	4b3b      	ldr	r3, [pc, #236]	; (8003b80 <HAL_GPIO_Init+0x334>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ab6:	4a32      	ldr	r2, [pc, #200]	; (8003b80 <HAL_GPIO_Init+0x334>)
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003abc:	4b30      	ldr	r3, [pc, #192]	; (8003b80 <HAL_GPIO_Init+0x334>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ae0:	4a27      	ldr	r2, [pc, #156]	; (8003b80 <HAL_GPIO_Init+0x334>)
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ae6:	4b26      	ldr	r3, [pc, #152]	; (8003b80 <HAL_GPIO_Init+0x334>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	43db      	mvns	r3, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4013      	ands	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b0a:	4a1d      	ldr	r2, [pc, #116]	; (8003b80 <HAL_GPIO_Init+0x334>)
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b10:	4b1b      	ldr	r3, [pc, #108]	; (8003b80 <HAL_GPIO_Init+0x334>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b34:	4a12      	ldr	r2, [pc, #72]	; (8003b80 <HAL_GPIO_Init+0x334>)
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	61fb      	str	r3, [r7, #28]
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	2b0f      	cmp	r3, #15
 8003b44:	f67f ae90 	bls.w	8003868 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b48:	bf00      	nop
 8003b4a:	bf00      	nop
 8003b4c:	3724      	adds	r7, #36	; 0x24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	40013800 	.word	0x40013800
 8003b60:	40020000 	.word	0x40020000
 8003b64:	40020400 	.word	0x40020400
 8003b68:	40020800 	.word	0x40020800
 8003b6c:	40020c00 	.word	0x40020c00
 8003b70:	40021000 	.word	0x40021000
 8003b74:	40021400 	.word	0x40021400
 8003b78:	40021800 	.word	0x40021800
 8003b7c:	40021c00 	.word	0x40021c00
 8003b80:	40013c00 	.word	0x40013c00

08003b84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	887b      	ldrh	r3, [r7, #2]
 8003b96:	4013      	ands	r3, r2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	73fb      	strb	r3, [r7, #15]
 8003ba0:	e001      	b.n	8003ba6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	807b      	strh	r3, [r7, #2]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bc4:	787b      	ldrb	r3, [r7, #1]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bca:	887a      	ldrh	r2, [r7, #2]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bd0:	e003      	b.n	8003bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bd2:	887b      	ldrh	r3, [r7, #2]
 8003bd4:	041a      	lsls	r2, r3, #16
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	619a      	str	r2, [r3, #24]
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
	...

08003be8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e264      	b.n	80040c4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d075      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c06:	4ba3      	ldr	r3, [pc, #652]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d00c      	beq.n	8003c2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c12:	4ba0      	ldr	r3, [pc, #640]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d112      	bne.n	8003c44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c1e:	4b9d      	ldr	r3, [pc, #628]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c2a:	d10b      	bne.n	8003c44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c2c:	4b99      	ldr	r3, [pc, #612]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d05b      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x108>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d157      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e23f      	b.n	80040c4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c4c:	d106      	bne.n	8003c5c <HAL_RCC_OscConfig+0x74>
 8003c4e:	4b91      	ldr	r3, [pc, #580]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a90      	ldr	r2, [pc, #576]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	e01d      	b.n	8003c98 <HAL_RCC_OscConfig+0xb0>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c64:	d10c      	bne.n	8003c80 <HAL_RCC_OscConfig+0x98>
 8003c66:	4b8b      	ldr	r3, [pc, #556]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a8a      	ldr	r2, [pc, #552]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	4b88      	ldr	r3, [pc, #544]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a87      	ldr	r2, [pc, #540]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	e00b      	b.n	8003c98 <HAL_RCC_OscConfig+0xb0>
 8003c80:	4b84      	ldr	r3, [pc, #528]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a83      	ldr	r2, [pc, #524]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	4b81      	ldr	r3, [pc, #516]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a80      	ldr	r2, [pc, #512]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d013      	beq.n	8003cc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca0:	f7fd ffa0 	bl	8001be4 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ca8:	f7fd ff9c 	bl	8001be4 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b64      	cmp	r3, #100	; 0x64
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e204      	b.n	80040c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cba:	4b76      	ldr	r3, [pc, #472]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0f0      	beq.n	8003ca8 <HAL_RCC_OscConfig+0xc0>
 8003cc6:	e014      	b.n	8003cf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc8:	f7fd ff8c 	bl	8001be4 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cd0:	f7fd ff88 	bl	8001be4 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b64      	cmp	r3, #100	; 0x64
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e1f0      	b.n	80040c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ce2:	4b6c      	ldr	r3, [pc, #432]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0xe8>
 8003cee:	e000      	b.n	8003cf2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d063      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cfe:	4b65      	ldr	r3, [pc, #404]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00b      	beq.n	8003d22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d0a:	4b62      	ldr	r3, [pc, #392]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d11c      	bne.n	8003d50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d16:	4b5f      	ldr	r3, [pc, #380]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d116      	bne.n	8003d50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d22:	4b5c      	ldr	r3, [pc, #368]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d005      	beq.n	8003d3a <HAL_RCC_OscConfig+0x152>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d001      	beq.n	8003d3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e1c4      	b.n	80040c4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d3a:	4b56      	ldr	r3, [pc, #344]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	4952      	ldr	r1, [pc, #328]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d4e:	e03a      	b.n	8003dc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d020      	beq.n	8003d9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d58:	4b4f      	ldr	r3, [pc, #316]	; (8003e98 <HAL_RCC_OscConfig+0x2b0>)
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5e:	f7fd ff41 	bl	8001be4 <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d64:	e008      	b.n	8003d78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d66:	f7fd ff3d 	bl	8001be4 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e1a5      	b.n	80040c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d78:	4b46      	ldr	r3, [pc, #280]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0f0      	beq.n	8003d66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d84:	4b43      	ldr	r3, [pc, #268]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	4940      	ldr	r1, [pc, #256]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	600b      	str	r3, [r1, #0]
 8003d98:	e015      	b.n	8003dc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d9a:	4b3f      	ldr	r3, [pc, #252]	; (8003e98 <HAL_RCC_OscConfig+0x2b0>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da0:	f7fd ff20 	bl	8001be4 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003da8:	f7fd ff1c 	bl	8001be4 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e184      	b.n	80040c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dba:	4b36      	ldr	r3, [pc, #216]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1f0      	bne.n	8003da8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d030      	beq.n	8003e34 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d016      	beq.n	8003e08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dda:	4b30      	ldr	r3, [pc, #192]	; (8003e9c <HAL_RCC_OscConfig+0x2b4>)
 8003ddc:	2201      	movs	r2, #1
 8003dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de0:	f7fd ff00 	bl	8001be4 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003de8:	f7fd fefc 	bl	8001be4 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e164      	b.n	80040c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dfa:	4b26      	ldr	r3, [pc, #152]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0f0      	beq.n	8003de8 <HAL_RCC_OscConfig+0x200>
 8003e06:	e015      	b.n	8003e34 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e08:	4b24      	ldr	r3, [pc, #144]	; (8003e9c <HAL_RCC_OscConfig+0x2b4>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e0e:	f7fd fee9 	bl	8001be4 <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e16:	f7fd fee5 	bl	8001be4 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e14d      	b.n	80040c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e28:	4b1a      	ldr	r3, [pc, #104]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1f0      	bne.n	8003e16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 80a0 	beq.w	8003f82 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e42:	2300      	movs	r3, #0
 8003e44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e46:	4b13      	ldr	r3, [pc, #76]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10f      	bne.n	8003e72 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e52:	2300      	movs	r3, #0
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	4b0f      	ldr	r3, [pc, #60]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	4a0e      	ldr	r2, [pc, #56]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e60:	6413      	str	r3, [r2, #64]	; 0x40
 8003e62:	4b0c      	ldr	r3, [pc, #48]	; (8003e94 <HAL_RCC_OscConfig+0x2ac>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	60bb      	str	r3, [r7, #8]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e72:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <HAL_RCC_OscConfig+0x2b8>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d121      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e7e:	4b08      	ldr	r3, [pc, #32]	; (8003ea0 <HAL_RCC_OscConfig+0x2b8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a07      	ldr	r2, [pc, #28]	; (8003ea0 <HAL_RCC_OscConfig+0x2b8>)
 8003e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e8a:	f7fd feab 	bl	8001be4 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e90:	e011      	b.n	8003eb6 <HAL_RCC_OscConfig+0x2ce>
 8003e92:	bf00      	nop
 8003e94:	40023800 	.word	0x40023800
 8003e98:	42470000 	.word	0x42470000
 8003e9c:	42470e80 	.word	0x42470e80
 8003ea0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea4:	f7fd fe9e 	bl	8001be4 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e106      	b.n	80040c4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb6:	4b85      	ldr	r3, [pc, #532]	; (80040cc <HAL_RCC_OscConfig+0x4e4>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f0      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d106      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x2f0>
 8003eca:	4b81      	ldr	r3, [pc, #516]	; (80040d0 <HAL_RCC_OscConfig+0x4e8>)
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ece:	4a80      	ldr	r2, [pc, #512]	; (80040d0 <HAL_RCC_OscConfig+0x4e8>)
 8003ed0:	f043 0301 	orr.w	r3, r3, #1
 8003ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed6:	e01c      	b.n	8003f12 <HAL_RCC_OscConfig+0x32a>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2b05      	cmp	r3, #5
 8003ede:	d10c      	bne.n	8003efa <HAL_RCC_OscConfig+0x312>
 8003ee0:	4b7b      	ldr	r3, [pc, #492]	; (80040d0 <HAL_RCC_OscConfig+0x4e8>)
 8003ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee4:	4a7a      	ldr	r2, [pc, #488]	; (80040d0 <HAL_RCC_OscConfig+0x4e8>)
 8003ee6:	f043 0304 	orr.w	r3, r3, #4
 8003eea:	6713      	str	r3, [r2, #112]	; 0x70
 8003eec:	4b78      	ldr	r3, [pc, #480]	; (80040d0 <HAL_RCC_OscConfig+0x4e8>)
 8003eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef0:	4a77      	ldr	r2, [pc, #476]	; (80040d0 <HAL_RCC_OscConfig+0x4e8>)
 8003ef2:	f043 0301 	orr.w	r3, r3, #1
 8003ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef8:	e00b      	b.n	8003f12 <HAL_RCC_OscConfig+0x32a>
 8003efa:	4b75      	ldr	r3, [pc, #468]	; (80040d0 <HAL_RCC_OscConfig+0x4e8>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	4a74      	ldr	r2, [pc, #464]	; (80040d0 <HAL_RCC_OscConfig+0x4e8>)
 8003f00:	f023 0301 	bic.w	r3, r3, #1
 8003f04:	6713      	str	r3, [r2, #112]	; 0x70
 8003f06:	4b72      	ldr	r3, [pc, #456]	; (80040d0 <HAL_RCC_OscConfig+0x4e8>)
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	4a71      	ldr	r2, [pc, #452]	; (80040d0 <HAL_RCC_OscConfig+0x4e8>)
 8003f0c:	f023 0304 	bic.w	r3, r3, #4
 8003f10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d015      	beq.n	8003f46 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1a:	f7fd fe63 	bl	8001be4 <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f20:	e00a      	b.n	8003f38 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f22:	f7fd fe5f 	bl	8001be4 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e0c5      	b.n	80040c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f38:	4b65      	ldr	r3, [pc, #404]	; (80040d0 <HAL_RCC_OscConfig+0x4e8>)
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0ee      	beq.n	8003f22 <HAL_RCC_OscConfig+0x33a>
 8003f44:	e014      	b.n	8003f70 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f46:	f7fd fe4d 	bl	8001be4 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f4c:	e00a      	b.n	8003f64 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f4e:	f7fd fe49 	bl	8001be4 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e0af      	b.n	80040c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f64:	4b5a      	ldr	r3, [pc, #360]	; (80040d0 <HAL_RCC_OscConfig+0x4e8>)
 8003f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1ee      	bne.n	8003f4e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f70:	7dfb      	ldrb	r3, [r7, #23]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d105      	bne.n	8003f82 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f76:	4b56      	ldr	r3, [pc, #344]	; (80040d0 <HAL_RCC_OscConfig+0x4e8>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	4a55      	ldr	r2, [pc, #340]	; (80040d0 <HAL_RCC_OscConfig+0x4e8>)
 8003f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 809b 	beq.w	80040c2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f8c:	4b50      	ldr	r3, [pc, #320]	; (80040d0 <HAL_RCC_OscConfig+0x4e8>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 030c 	and.w	r3, r3, #12
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d05c      	beq.n	8004052 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d141      	bne.n	8004024 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa0:	4b4c      	ldr	r3, [pc, #304]	; (80040d4 <HAL_RCC_OscConfig+0x4ec>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa6:	f7fd fe1d 	bl	8001be4 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fac:	e008      	b.n	8003fc0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fae:	f7fd fe19 	bl	8001be4 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e081      	b.n	80040c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc0:	4b43      	ldr	r3, [pc, #268]	; (80040d0 <HAL_RCC_OscConfig+0x4e8>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1f0      	bne.n	8003fae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	69da      	ldr	r2, [r3, #28]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	019b      	lsls	r3, r3, #6
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe2:	085b      	lsrs	r3, r3, #1
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	041b      	lsls	r3, r3, #16
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fee:	061b      	lsls	r3, r3, #24
 8003ff0:	4937      	ldr	r1, [pc, #220]	; (80040d0 <HAL_RCC_OscConfig+0x4e8>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ff6:	4b37      	ldr	r3, [pc, #220]	; (80040d4 <HAL_RCC_OscConfig+0x4ec>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffc:	f7fd fdf2 	bl	8001be4 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004004:	f7fd fdee 	bl	8001be4 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e056      	b.n	80040c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004016:	4b2e      	ldr	r3, [pc, #184]	; (80040d0 <HAL_RCC_OscConfig+0x4e8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCC_OscConfig+0x41c>
 8004022:	e04e      	b.n	80040c2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004024:	4b2b      	ldr	r3, [pc, #172]	; (80040d4 <HAL_RCC_OscConfig+0x4ec>)
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402a:	f7fd fddb 	bl	8001be4 <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004032:	f7fd fdd7 	bl	8001be4 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e03f      	b.n	80040c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004044:	4b22      	ldr	r3, [pc, #136]	; (80040d0 <HAL_RCC_OscConfig+0x4e8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1f0      	bne.n	8004032 <HAL_RCC_OscConfig+0x44a>
 8004050:	e037      	b.n	80040c2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d101      	bne.n	800405e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e032      	b.n	80040c4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800405e:	4b1c      	ldr	r3, [pc, #112]	; (80040d0 <HAL_RCC_OscConfig+0x4e8>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d028      	beq.n	80040be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004076:	429a      	cmp	r2, r3
 8004078:	d121      	bne.n	80040be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004084:	429a      	cmp	r2, r3
 8004086:	d11a      	bne.n	80040be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800408e:	4013      	ands	r3, r2
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004094:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004096:	4293      	cmp	r3, r2
 8004098:	d111      	bne.n	80040be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a4:	085b      	lsrs	r3, r3, #1
 80040a6:	3b01      	subs	r3, #1
 80040a8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d107      	bne.n	80040be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d001      	beq.n	80040c2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40007000 	.word	0x40007000
 80040d0:	40023800 	.word	0x40023800
 80040d4:	42470060 	.word	0x42470060

080040d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0cc      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040ec:	4b68      	ldr	r3, [pc, #416]	; (8004290 <HAL_RCC_ClockConfig+0x1b8>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d90c      	bls.n	8004114 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fa:	4b65      	ldr	r3, [pc, #404]	; (8004290 <HAL_RCC_ClockConfig+0x1b8>)
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004102:	4b63      	ldr	r3, [pc, #396]	; (8004290 <HAL_RCC_ClockConfig+0x1b8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	429a      	cmp	r2, r3
 800410e:	d001      	beq.n	8004114 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0b8      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d020      	beq.n	8004162 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800412c:	4b59      	ldr	r3, [pc, #356]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4a58      	ldr	r2, [pc, #352]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004136:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004144:	4b53      	ldr	r3, [pc, #332]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	4a52      	ldr	r2, [pc, #328]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800414e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004150:	4b50      	ldr	r3, [pc, #320]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	494d      	ldr	r1, [pc, #308]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	4313      	orrs	r3, r2
 8004160:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d044      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d107      	bne.n	8004186 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004176:	4b47      	ldr	r3, [pc, #284]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d119      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e07f      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d003      	beq.n	8004196 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004192:	2b03      	cmp	r3, #3
 8004194:	d107      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004196:	4b3f      	ldr	r3, [pc, #252]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d109      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e06f      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a6:	4b3b      	ldr	r3, [pc, #236]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e067      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041b6:	4b37      	ldr	r3, [pc, #220]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f023 0203 	bic.w	r2, r3, #3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	4934      	ldr	r1, [pc, #208]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041c8:	f7fd fd0c 	bl	8001be4 <HAL_GetTick>
 80041cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ce:	e00a      	b.n	80041e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d0:	f7fd fd08 	bl	8001be4 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	f241 3288 	movw	r2, #5000	; 0x1388
 80041de:	4293      	cmp	r3, r2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e04f      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e6:	4b2b      	ldr	r3, [pc, #172]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 020c 	and.w	r2, r3, #12
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d1eb      	bne.n	80041d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041f8:	4b25      	ldr	r3, [pc, #148]	; (8004290 <HAL_RCC_ClockConfig+0x1b8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d20c      	bcs.n	8004220 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004206:	4b22      	ldr	r3, [pc, #136]	; (8004290 <HAL_RCC_ClockConfig+0x1b8>)
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800420e:	4b20      	ldr	r3, [pc, #128]	; (8004290 <HAL_RCC_ClockConfig+0x1b8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	429a      	cmp	r2, r3
 800421a:	d001      	beq.n	8004220 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e032      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800422c:	4b19      	ldr	r3, [pc, #100]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	4916      	ldr	r1, [pc, #88]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	4313      	orrs	r3, r2
 800423c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b00      	cmp	r3, #0
 8004248:	d009      	beq.n	800425e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800424a:	4b12      	ldr	r3, [pc, #72]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	490e      	ldr	r1, [pc, #56]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 800425a:	4313      	orrs	r3, r2
 800425c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800425e:	f000 f821 	bl	80042a4 <HAL_RCC_GetSysClockFreq>
 8004262:	4602      	mov	r2, r0
 8004264:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	091b      	lsrs	r3, r3, #4
 800426a:	f003 030f 	and.w	r3, r3, #15
 800426e:	490a      	ldr	r1, [pc, #40]	; (8004298 <HAL_RCC_ClockConfig+0x1c0>)
 8004270:	5ccb      	ldrb	r3, [r1, r3]
 8004272:	fa22 f303 	lsr.w	r3, r2, r3
 8004276:	4a09      	ldr	r2, [pc, #36]	; (800429c <HAL_RCC_ClockConfig+0x1c4>)
 8004278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800427a:	4b09      	ldr	r3, [pc, #36]	; (80042a0 <HAL_RCC_ClockConfig+0x1c8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f7fd fada 	bl	8001838 <HAL_InitTick>

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40023c00 	.word	0x40023c00
 8004294:	40023800 	.word	0x40023800
 8004298:	08025924 	.word	0x08025924
 800429c:	10000000 	.word	0x10000000
 80042a0:	10000004 	.word	0x10000004

080042a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80042a8:	b084      	sub	sp, #16
 80042aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	607b      	str	r3, [r7, #4]
 80042b0:	2300      	movs	r3, #0
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	2300      	movs	r3, #0
 80042b6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042bc:	4b67      	ldr	r3, [pc, #412]	; (800445c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 030c 	and.w	r3, r3, #12
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d00d      	beq.n	80042e4 <HAL_RCC_GetSysClockFreq+0x40>
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	f200 80bd 	bhi.w	8004448 <HAL_RCC_GetSysClockFreq+0x1a4>
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <HAL_RCC_GetSysClockFreq+0x34>
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	d003      	beq.n	80042de <HAL_RCC_GetSysClockFreq+0x3a>
 80042d6:	e0b7      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042d8:	4b61      	ldr	r3, [pc, #388]	; (8004460 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042da:	60bb      	str	r3, [r7, #8]
       break;
 80042dc:	e0b7      	b.n	800444e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042de:	4b61      	ldr	r3, [pc, #388]	; (8004464 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80042e0:	60bb      	str	r3, [r7, #8]
      break;
 80042e2:	e0b4      	b.n	800444e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042e4:	4b5d      	ldr	r3, [pc, #372]	; (800445c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042ee:	4b5b      	ldr	r3, [pc, #364]	; (800445c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d04d      	beq.n	8004396 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042fa:	4b58      	ldr	r3, [pc, #352]	; (800445c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	099b      	lsrs	r3, r3, #6
 8004300:	461a      	mov	r2, r3
 8004302:	f04f 0300 	mov.w	r3, #0
 8004306:	f240 10ff 	movw	r0, #511	; 0x1ff
 800430a:	f04f 0100 	mov.w	r1, #0
 800430e:	ea02 0800 	and.w	r8, r2, r0
 8004312:	ea03 0901 	and.w	r9, r3, r1
 8004316:	4640      	mov	r0, r8
 8004318:	4649      	mov	r1, r9
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	f04f 0300 	mov.w	r3, #0
 8004322:	014b      	lsls	r3, r1, #5
 8004324:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004328:	0142      	lsls	r2, r0, #5
 800432a:	4610      	mov	r0, r2
 800432c:	4619      	mov	r1, r3
 800432e:	ebb0 0008 	subs.w	r0, r0, r8
 8004332:	eb61 0109 	sbc.w	r1, r1, r9
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	018b      	lsls	r3, r1, #6
 8004340:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004344:	0182      	lsls	r2, r0, #6
 8004346:	1a12      	subs	r2, r2, r0
 8004348:	eb63 0301 	sbc.w	r3, r3, r1
 800434c:	f04f 0000 	mov.w	r0, #0
 8004350:	f04f 0100 	mov.w	r1, #0
 8004354:	00d9      	lsls	r1, r3, #3
 8004356:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800435a:	00d0      	lsls	r0, r2, #3
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	eb12 0208 	adds.w	r2, r2, r8
 8004364:	eb43 0309 	adc.w	r3, r3, r9
 8004368:	f04f 0000 	mov.w	r0, #0
 800436c:	f04f 0100 	mov.w	r1, #0
 8004370:	0259      	lsls	r1, r3, #9
 8004372:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004376:	0250      	lsls	r0, r2, #9
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4610      	mov	r0, r2
 800437e:	4619      	mov	r1, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	461a      	mov	r2, r3
 8004384:	f04f 0300 	mov.w	r3, #0
 8004388:	f7fc fc5e 	bl	8000c48 <__aeabi_uldivmod>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	4613      	mov	r3, r2
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	e04a      	b.n	800442c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004396:	4b31      	ldr	r3, [pc, #196]	; (800445c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	099b      	lsrs	r3, r3, #6
 800439c:	461a      	mov	r2, r3
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043a6:	f04f 0100 	mov.w	r1, #0
 80043aa:	ea02 0400 	and.w	r4, r2, r0
 80043ae:	ea03 0501 	and.w	r5, r3, r1
 80043b2:	4620      	mov	r0, r4
 80043b4:	4629      	mov	r1, r5
 80043b6:	f04f 0200 	mov.w	r2, #0
 80043ba:	f04f 0300 	mov.w	r3, #0
 80043be:	014b      	lsls	r3, r1, #5
 80043c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043c4:	0142      	lsls	r2, r0, #5
 80043c6:	4610      	mov	r0, r2
 80043c8:	4619      	mov	r1, r3
 80043ca:	1b00      	subs	r0, r0, r4
 80043cc:	eb61 0105 	sbc.w	r1, r1, r5
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	018b      	lsls	r3, r1, #6
 80043da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043de:	0182      	lsls	r2, r0, #6
 80043e0:	1a12      	subs	r2, r2, r0
 80043e2:	eb63 0301 	sbc.w	r3, r3, r1
 80043e6:	f04f 0000 	mov.w	r0, #0
 80043ea:	f04f 0100 	mov.w	r1, #0
 80043ee:	00d9      	lsls	r1, r3, #3
 80043f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043f4:	00d0      	lsls	r0, r2, #3
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	1912      	adds	r2, r2, r4
 80043fc:	eb45 0303 	adc.w	r3, r5, r3
 8004400:	f04f 0000 	mov.w	r0, #0
 8004404:	f04f 0100 	mov.w	r1, #0
 8004408:	0299      	lsls	r1, r3, #10
 800440a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800440e:	0290      	lsls	r0, r2, #10
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	4610      	mov	r0, r2
 8004416:	4619      	mov	r1, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	461a      	mov	r2, r3
 800441c:	f04f 0300 	mov.w	r3, #0
 8004420:	f7fc fc12 	bl	8000c48 <__aeabi_uldivmod>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	4613      	mov	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800442c:	4b0b      	ldr	r3, [pc, #44]	; (800445c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	0c1b      	lsrs	r3, r3, #16
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	3301      	adds	r3, #1
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	fbb2 f3f3 	udiv	r3, r2, r3
 8004444:	60bb      	str	r3, [r7, #8]
      break;
 8004446:	e002      	b.n	800444e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004448:	4b05      	ldr	r3, [pc, #20]	; (8004460 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800444a:	60bb      	str	r3, [r7, #8]
      break;
 800444c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800444e:	68bb      	ldr	r3, [r7, #8]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800445a:	bf00      	nop
 800445c:	40023800 	.word	0x40023800
 8004460:	00f42400 	.word	0x00f42400
 8004464:	007a1200 	.word	0x007a1200

08004468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800446c:	4b03      	ldr	r3, [pc, #12]	; (800447c <HAL_RCC_GetHCLKFreq+0x14>)
 800446e:	681b      	ldr	r3, [r3, #0]
}
 8004470:	4618      	mov	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	10000000 	.word	0x10000000

08004480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004484:	f7ff fff0 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 8004488:	4602      	mov	r2, r0
 800448a:	4b05      	ldr	r3, [pc, #20]	; (80044a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	0a9b      	lsrs	r3, r3, #10
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	4903      	ldr	r1, [pc, #12]	; (80044a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004496:	5ccb      	ldrb	r3, [r1, r3]
 8004498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800449c:	4618      	mov	r0, r3
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40023800 	.word	0x40023800
 80044a4:	08025934 	.word	0x08025934

080044a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044ac:	f7ff ffdc 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 80044b0:	4602      	mov	r2, r0
 80044b2:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	0b5b      	lsrs	r3, r3, #13
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	4903      	ldr	r1, [pc, #12]	; (80044cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044be:	5ccb      	ldrb	r3, [r1, r3]
 80044c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	40023800 	.word	0x40023800
 80044cc:	08025934 	.word	0x08025934

080044d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	220f      	movs	r2, #15
 80044de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80044e0:	4b12      	ldr	r3, [pc, #72]	; (800452c <HAL_RCC_GetClockConfig+0x5c>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 0203 	and.w	r2, r3, #3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80044ec:	4b0f      	ldr	r3, [pc, #60]	; (800452c <HAL_RCC_GetClockConfig+0x5c>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80044f8:	4b0c      	ldr	r3, [pc, #48]	; (800452c <HAL_RCC_GetClockConfig+0x5c>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004504:	4b09      	ldr	r3, [pc, #36]	; (800452c <HAL_RCC_GetClockConfig+0x5c>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	08db      	lsrs	r3, r3, #3
 800450a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004512:	4b07      	ldr	r3, [pc, #28]	; (8004530 <HAL_RCC_GetClockConfig+0x60>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0207 	and.w	r2, r3, #7
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	601a      	str	r2, [r3, #0]
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40023800 	.word	0x40023800
 8004530:	40023c00 	.word	0x40023c00

08004534 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e07b      	b.n	800463e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	2b00      	cmp	r3, #0
 800454c:	d108      	bne.n	8004560 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004556:	d009      	beq.n	800456c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	61da      	str	r2, [r3, #28]
 800455e:	e005      	b.n	800456c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d106      	bne.n	800458c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7fc fffc 	bl	8001584 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f0:	ea42 0103 	orr.w	r1, r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	0c1b      	lsrs	r3, r3, #16
 800460a:	f003 0104 	and.w	r1, r3, #4
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	f003 0210 	and.w	r2, r3, #16
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	69da      	ldr	r2, [r3, #28]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800462c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b08c      	sub	sp, #48	; 0x30
 800464a:	af00      	add	r7, sp, #0
 800464c:	60f8      	str	r0, [r7, #12]
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	607a      	str	r2, [r7, #4]
 8004652:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004654:	2301      	movs	r3, #1
 8004656:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004664:	2b01      	cmp	r3, #1
 8004666:	d101      	bne.n	800466c <HAL_SPI_TransmitReceive+0x26>
 8004668:	2302      	movs	r3, #2
 800466a:	e18a      	b.n	8004982 <HAL_SPI_TransmitReceive+0x33c>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004674:	f7fd fab6 	bl	8001be4 <HAL_GetTick>
 8004678:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004680:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800468a:	887b      	ldrh	r3, [r7, #2]
 800468c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800468e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004692:	2b01      	cmp	r3, #1
 8004694:	d00f      	beq.n	80046b6 <HAL_SPI_TransmitReceive+0x70>
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800469c:	d107      	bne.n	80046ae <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d103      	bne.n	80046ae <HAL_SPI_TransmitReceive+0x68>
 80046a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d003      	beq.n	80046b6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80046ae:	2302      	movs	r3, #2
 80046b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80046b4:	e15b      	b.n	800496e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d005      	beq.n	80046c8 <HAL_SPI_TransmitReceive+0x82>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <HAL_SPI_TransmitReceive+0x82>
 80046c2:	887b      	ldrh	r3, [r7, #2]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d103      	bne.n	80046d0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80046ce:	e14e      	b.n	800496e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d003      	beq.n	80046e4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2205      	movs	r2, #5
 80046e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	887a      	ldrh	r2, [r7, #2]
 80046f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	887a      	ldrh	r2, [r7, #2]
 80046fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	887a      	ldrh	r2, [r7, #2]
 8004706:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	887a      	ldrh	r2, [r7, #2]
 800470c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004724:	2b40      	cmp	r3, #64	; 0x40
 8004726:	d007      	beq.n	8004738 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004736:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004740:	d178      	bne.n	8004834 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <HAL_SPI_TransmitReceive+0x10a>
 800474a:	8b7b      	ldrh	r3, [r7, #26]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d166      	bne.n	800481e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	881a      	ldrh	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004760:	1c9a      	adds	r2, r3, #2
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800476a:	b29b      	uxth	r3, r3
 800476c:	3b01      	subs	r3, #1
 800476e:	b29a      	uxth	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004774:	e053      	b.n	800481e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b02      	cmp	r3, #2
 8004782:	d11b      	bne.n	80047bc <HAL_SPI_TransmitReceive+0x176>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004788:	b29b      	uxth	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d016      	beq.n	80047bc <HAL_SPI_TransmitReceive+0x176>
 800478e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004790:	2b01      	cmp	r3, #1
 8004792:	d113      	bne.n	80047bc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004798:	881a      	ldrh	r2, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a4:	1c9a      	adds	r2, r3, #2
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	3b01      	subs	r3, #1
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d119      	bne.n	80047fe <HAL_SPI_TransmitReceive+0x1b8>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d014      	beq.n	80047fe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	b292      	uxth	r2, r2
 80047e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e6:	1c9a      	adds	r2, r3, #2
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	3b01      	subs	r3, #1
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047fa:	2301      	movs	r3, #1
 80047fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047fe:	f7fd f9f1 	bl	8001be4 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800480a:	429a      	cmp	r2, r3
 800480c:	d807      	bhi.n	800481e <HAL_SPI_TransmitReceive+0x1d8>
 800480e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004814:	d003      	beq.n	800481e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800481c:	e0a7      	b.n	800496e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004822:	b29b      	uxth	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1a6      	bne.n	8004776 <HAL_SPI_TransmitReceive+0x130>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800482c:	b29b      	uxth	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1a1      	bne.n	8004776 <HAL_SPI_TransmitReceive+0x130>
 8004832:	e07c      	b.n	800492e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <HAL_SPI_TransmitReceive+0x1fc>
 800483c:	8b7b      	ldrh	r3, [r7, #26]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d16b      	bne.n	800491a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	330c      	adds	r3, #12
 800484c:	7812      	ldrb	r2, [r2, #0]
 800484e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800485e:	b29b      	uxth	r3, r3
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004868:	e057      	b.n	800491a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b02      	cmp	r3, #2
 8004876:	d11c      	bne.n	80048b2 <HAL_SPI_TransmitReceive+0x26c>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800487c:	b29b      	uxth	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d017      	beq.n	80048b2 <HAL_SPI_TransmitReceive+0x26c>
 8004882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004884:	2b01      	cmp	r3, #1
 8004886:	d114      	bne.n	80048b2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	330c      	adds	r3, #12
 8004892:	7812      	ldrb	r2, [r2, #0]
 8004894:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	1c5a      	adds	r2, r3, #1
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	3b01      	subs	r3, #1
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d119      	bne.n	80048f4 <HAL_SPI_TransmitReceive+0x2ae>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d014      	beq.n	80048f4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68da      	ldr	r2, [r3, #12]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d4:	b2d2      	uxtb	r2, r2
 80048d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048f0:	2301      	movs	r3, #1
 80048f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80048f4:	f7fd f976 	bl	8001be4 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004900:	429a      	cmp	r2, r3
 8004902:	d803      	bhi.n	800490c <HAL_SPI_TransmitReceive+0x2c6>
 8004904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490a:	d102      	bne.n	8004912 <HAL_SPI_TransmitReceive+0x2cc>
 800490c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490e:	2b00      	cmp	r3, #0
 8004910:	d103      	bne.n	800491a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004918:	e029      	b.n	800496e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800491e:	b29b      	uxth	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1a2      	bne.n	800486a <HAL_SPI_TransmitReceive+0x224>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004928:	b29b      	uxth	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d19d      	bne.n	800486a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800492e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004930:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 f8b2 	bl	8004a9c <SPI_EndRxTxTransaction>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d006      	beq.n	800494c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2220      	movs	r2, #32
 8004948:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800494a:	e010      	b.n	800496e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10b      	bne.n	800496c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004954:	2300      	movs	r3, #0
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	e000      	b.n	800496e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800496c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800497e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004982:	4618      	mov	r0, r3
 8004984:	3730      	adds	r7, #48	; 0x30
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
	...

0800498c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b088      	sub	sp, #32
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	603b      	str	r3, [r7, #0]
 8004998:	4613      	mov	r3, r2
 800499a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800499c:	f7fd f922 	bl	8001be4 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a4:	1a9b      	subs	r3, r3, r2
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	4413      	add	r3, r2
 80049aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049ac:	f7fd f91a 	bl	8001be4 <HAL_GetTick>
 80049b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049b2:	4b39      	ldr	r3, [pc, #228]	; (8004a98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	015b      	lsls	r3, r3, #5
 80049b8:	0d1b      	lsrs	r3, r3, #20
 80049ba:	69fa      	ldr	r2, [r7, #28]
 80049bc:	fb02 f303 	mul.w	r3, r2, r3
 80049c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049c2:	e054      	b.n	8004a6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ca:	d050      	beq.n	8004a6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049cc:	f7fd f90a 	bl	8001be4 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	69fa      	ldr	r2, [r7, #28]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d902      	bls.n	80049e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d13d      	bne.n	8004a5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049fa:	d111      	bne.n	8004a20 <SPI_WaitFlagStateUntilTimeout+0x94>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a04:	d004      	beq.n	8004a10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a0e:	d107      	bne.n	8004a20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a28:	d10f      	bne.n	8004a4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e017      	b.n	8004a8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	4013      	ands	r3, r2
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	bf0c      	ite	eq
 8004a7e:	2301      	moveq	r3, #1
 8004a80:	2300      	movne	r3, #0
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	461a      	mov	r2, r3
 8004a86:	79fb      	ldrb	r3, [r7, #7]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d19b      	bne.n	80049c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3720      	adds	r7, #32
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	10000000 	.word	0x10000000

08004a9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b088      	sub	sp, #32
 8004aa0:	af02      	add	r7, sp, #8
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004aa8:	4b1b      	ldr	r3, [pc, #108]	; (8004b18 <SPI_EndRxTxTransaction+0x7c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a1b      	ldr	r2, [pc, #108]	; (8004b1c <SPI_EndRxTxTransaction+0x80>)
 8004aae:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab2:	0d5b      	lsrs	r3, r3, #21
 8004ab4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ab8:	fb02 f303 	mul.w	r3, r2, r3
 8004abc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ac6:	d112      	bne.n	8004aee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	2180      	movs	r1, #128	; 0x80
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f7ff ff5a 	bl	800498c <SPI_WaitFlagStateUntilTimeout>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d016      	beq.n	8004b0c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae2:	f043 0220 	orr.w	r2, r3, #32
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e00f      	b.n	8004b0e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00a      	beq.n	8004b0a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b04:	2b80      	cmp	r3, #128	; 0x80
 8004b06:	d0f2      	beq.n	8004aee <SPI_EndRxTxTransaction+0x52>
 8004b08:	e000      	b.n	8004b0c <SPI_EndRxTxTransaction+0x70>
        break;
 8004b0a:	bf00      	nop
  }

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	10000000 	.word	0x10000000
 8004b1c:	165e9f81 	.word	0x165e9f81

08004b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e041      	b.n	8004bb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d106      	bne.n	8004b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fc fdca 	bl	80016e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	4610      	mov	r0, r2
 8004b60:	f000 fafe 	bl	8005160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
	...

08004bc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d001      	beq.n	8004bd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e046      	b.n	8004c66 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a23      	ldr	r2, [pc, #140]	; (8004c74 <HAL_TIM_Base_Start+0xb4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d022      	beq.n	8004c30 <HAL_TIM_Base_Start+0x70>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf2:	d01d      	beq.n	8004c30 <HAL_TIM_Base_Start+0x70>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a1f      	ldr	r2, [pc, #124]	; (8004c78 <HAL_TIM_Base_Start+0xb8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d018      	beq.n	8004c30 <HAL_TIM_Base_Start+0x70>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a1e      	ldr	r2, [pc, #120]	; (8004c7c <HAL_TIM_Base_Start+0xbc>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d013      	beq.n	8004c30 <HAL_TIM_Base_Start+0x70>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a1c      	ldr	r2, [pc, #112]	; (8004c80 <HAL_TIM_Base_Start+0xc0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d00e      	beq.n	8004c30 <HAL_TIM_Base_Start+0x70>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a1b      	ldr	r2, [pc, #108]	; (8004c84 <HAL_TIM_Base_Start+0xc4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d009      	beq.n	8004c30 <HAL_TIM_Base_Start+0x70>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a19      	ldr	r2, [pc, #100]	; (8004c88 <HAL_TIM_Base_Start+0xc8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d004      	beq.n	8004c30 <HAL_TIM_Base_Start+0x70>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a18      	ldr	r2, [pc, #96]	; (8004c8c <HAL_TIM_Base_Start+0xcc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d111      	bne.n	8004c54 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b06      	cmp	r3, #6
 8004c40:	d010      	beq.n	8004c64 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 0201 	orr.w	r2, r2, #1
 8004c50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c52:	e007      	b.n	8004c64 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0201 	orr.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	40010000 	.word	0x40010000
 8004c78:	40000400 	.word	0x40000400
 8004c7c:	40000800 	.word	0x40000800
 8004c80:	40000c00 	.word	0x40000c00
 8004c84:	40010400 	.word	0x40010400
 8004c88:	40014000 	.word	0x40014000
 8004c8c:	40001800 	.word	0x40001800

08004c90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d001      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e04e      	b.n	8004d46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0201 	orr.w	r2, r2, #1
 8004cbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a23      	ldr	r2, [pc, #140]	; (8004d54 <HAL_TIM_Base_Start_IT+0xc4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d022      	beq.n	8004d10 <HAL_TIM_Base_Start_IT+0x80>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd2:	d01d      	beq.n	8004d10 <HAL_TIM_Base_Start_IT+0x80>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a1f      	ldr	r2, [pc, #124]	; (8004d58 <HAL_TIM_Base_Start_IT+0xc8>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d018      	beq.n	8004d10 <HAL_TIM_Base_Start_IT+0x80>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1e      	ldr	r2, [pc, #120]	; (8004d5c <HAL_TIM_Base_Start_IT+0xcc>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d013      	beq.n	8004d10 <HAL_TIM_Base_Start_IT+0x80>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a1c      	ldr	r2, [pc, #112]	; (8004d60 <HAL_TIM_Base_Start_IT+0xd0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00e      	beq.n	8004d10 <HAL_TIM_Base_Start_IT+0x80>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a1b      	ldr	r2, [pc, #108]	; (8004d64 <HAL_TIM_Base_Start_IT+0xd4>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d009      	beq.n	8004d10 <HAL_TIM_Base_Start_IT+0x80>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a19      	ldr	r2, [pc, #100]	; (8004d68 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d004      	beq.n	8004d10 <HAL_TIM_Base_Start_IT+0x80>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a18      	ldr	r2, [pc, #96]	; (8004d6c <HAL_TIM_Base_Start_IT+0xdc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d111      	bne.n	8004d34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2b06      	cmp	r3, #6
 8004d20:	d010      	beq.n	8004d44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f042 0201 	orr.w	r2, r2, #1
 8004d30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d32:	e007      	b.n	8004d44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0201 	orr.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40010000 	.word	0x40010000
 8004d58:	40000400 	.word	0x40000400
 8004d5c:	40000800 	.word	0x40000800
 8004d60:	40000c00 	.word	0x40000c00
 8004d64:	40010400 	.word	0x40010400
 8004d68:	40014000 	.word	0x40014000
 8004d6c:	40001800 	.word	0x40001800

08004d70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d122      	bne.n	8004dcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d11b      	bne.n	8004dcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f06f 0202 	mvn.w	r2, #2
 8004d9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f9b5 	bl	8005122 <HAL_TIM_IC_CaptureCallback>
 8004db8:	e005      	b.n	8004dc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f9a7 	bl	800510e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f9b8 	bl	8005136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	f003 0304 	and.w	r3, r3, #4
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d122      	bne.n	8004e20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d11b      	bne.n	8004e20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f06f 0204 	mvn.w	r2, #4
 8004df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2202      	movs	r2, #2
 8004df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f98b 	bl	8005122 <HAL_TIM_IC_CaptureCallback>
 8004e0c:	e005      	b.n	8004e1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f97d 	bl	800510e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f98e 	bl	8005136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b08      	cmp	r3, #8
 8004e2c:	d122      	bne.n	8004e74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f003 0308 	and.w	r3, r3, #8
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d11b      	bne.n	8004e74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f06f 0208 	mvn.w	r2, #8
 8004e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2204      	movs	r2, #4
 8004e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	f003 0303 	and.w	r3, r3, #3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f961 	bl	8005122 <HAL_TIM_IC_CaptureCallback>
 8004e60:	e005      	b.n	8004e6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f953 	bl	800510e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f964 	bl	8005136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f003 0310 	and.w	r3, r3, #16
 8004e7e:	2b10      	cmp	r3, #16
 8004e80:	d122      	bne.n	8004ec8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f003 0310 	and.w	r3, r3, #16
 8004e8c:	2b10      	cmp	r3, #16
 8004e8e:	d11b      	bne.n	8004ec8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f06f 0210 	mvn.w	r2, #16
 8004e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2208      	movs	r2, #8
 8004e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f937 	bl	8005122 <HAL_TIM_IC_CaptureCallback>
 8004eb4:	e005      	b.n	8004ec2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f929 	bl	800510e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f93a 	bl	8005136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d10e      	bne.n	8004ef4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d107      	bne.n	8004ef4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f06f 0201 	mvn.w	r2, #1
 8004eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7fc fafa 	bl	80014e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efe:	2b80      	cmp	r3, #128	; 0x80
 8004f00:	d10e      	bne.n	8004f20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0c:	2b80      	cmp	r3, #128	; 0x80
 8004f0e:	d107      	bne.n	8004f20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fae0 	bl	80054e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2a:	2b40      	cmp	r3, #64	; 0x40
 8004f2c:	d10e      	bne.n	8004f4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f38:	2b40      	cmp	r3, #64	; 0x40
 8004f3a:	d107      	bne.n	8004f4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f8ff 	bl	800514a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	f003 0320 	and.w	r3, r3, #32
 8004f56:	2b20      	cmp	r3, #32
 8004f58:	d10e      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f003 0320 	and.w	r3, r3, #32
 8004f64:	2b20      	cmp	r3, #32
 8004f66:	d107      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f06f 0220 	mvn.w	r2, #32
 8004f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 faaa 	bl	80054cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f78:	bf00      	nop
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d101      	bne.n	8004f9c <HAL_TIM_ConfigClockSource+0x1c>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e0b4      	b.n	8005106 <HAL_TIM_ConfigClockSource+0x186>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fd4:	d03e      	beq.n	8005054 <HAL_TIM_ConfigClockSource+0xd4>
 8004fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fda:	f200 8087 	bhi.w	80050ec <HAL_TIM_ConfigClockSource+0x16c>
 8004fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fe2:	f000 8086 	beq.w	80050f2 <HAL_TIM_ConfigClockSource+0x172>
 8004fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fea:	d87f      	bhi.n	80050ec <HAL_TIM_ConfigClockSource+0x16c>
 8004fec:	2b70      	cmp	r3, #112	; 0x70
 8004fee:	d01a      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0xa6>
 8004ff0:	2b70      	cmp	r3, #112	; 0x70
 8004ff2:	d87b      	bhi.n	80050ec <HAL_TIM_ConfigClockSource+0x16c>
 8004ff4:	2b60      	cmp	r3, #96	; 0x60
 8004ff6:	d050      	beq.n	800509a <HAL_TIM_ConfigClockSource+0x11a>
 8004ff8:	2b60      	cmp	r3, #96	; 0x60
 8004ffa:	d877      	bhi.n	80050ec <HAL_TIM_ConfigClockSource+0x16c>
 8004ffc:	2b50      	cmp	r3, #80	; 0x50
 8004ffe:	d03c      	beq.n	800507a <HAL_TIM_ConfigClockSource+0xfa>
 8005000:	2b50      	cmp	r3, #80	; 0x50
 8005002:	d873      	bhi.n	80050ec <HAL_TIM_ConfigClockSource+0x16c>
 8005004:	2b40      	cmp	r3, #64	; 0x40
 8005006:	d058      	beq.n	80050ba <HAL_TIM_ConfigClockSource+0x13a>
 8005008:	2b40      	cmp	r3, #64	; 0x40
 800500a:	d86f      	bhi.n	80050ec <HAL_TIM_ConfigClockSource+0x16c>
 800500c:	2b30      	cmp	r3, #48	; 0x30
 800500e:	d064      	beq.n	80050da <HAL_TIM_ConfigClockSource+0x15a>
 8005010:	2b30      	cmp	r3, #48	; 0x30
 8005012:	d86b      	bhi.n	80050ec <HAL_TIM_ConfigClockSource+0x16c>
 8005014:	2b20      	cmp	r3, #32
 8005016:	d060      	beq.n	80050da <HAL_TIM_ConfigClockSource+0x15a>
 8005018:	2b20      	cmp	r3, #32
 800501a:	d867      	bhi.n	80050ec <HAL_TIM_ConfigClockSource+0x16c>
 800501c:	2b00      	cmp	r3, #0
 800501e:	d05c      	beq.n	80050da <HAL_TIM_ConfigClockSource+0x15a>
 8005020:	2b10      	cmp	r3, #16
 8005022:	d05a      	beq.n	80050da <HAL_TIM_ConfigClockSource+0x15a>
 8005024:	e062      	b.n	80050ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6818      	ldr	r0, [r3, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6899      	ldr	r1, [r3, #8]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f000 f9ad 	bl	8005394 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005048:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	609a      	str	r2, [r3, #8]
      break;
 8005052:	e04f      	b.n	80050f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6818      	ldr	r0, [r3, #0]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	6899      	ldr	r1, [r3, #8]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f000 f996 	bl	8005394 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005076:	609a      	str	r2, [r3, #8]
      break;
 8005078:	e03c      	b.n	80050f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6818      	ldr	r0, [r3, #0]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	6859      	ldr	r1, [r3, #4]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	461a      	mov	r2, r3
 8005088:	f000 f90a 	bl	80052a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2150      	movs	r1, #80	; 0x50
 8005092:	4618      	mov	r0, r3
 8005094:	f000 f963 	bl	800535e <TIM_ITRx_SetConfig>
      break;
 8005098:	e02c      	b.n	80050f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	6859      	ldr	r1, [r3, #4]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	461a      	mov	r2, r3
 80050a8:	f000 f929 	bl	80052fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2160      	movs	r1, #96	; 0x60
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 f953 	bl	800535e <TIM_ITRx_SetConfig>
      break;
 80050b8:	e01c      	b.n	80050f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6818      	ldr	r0, [r3, #0]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6859      	ldr	r1, [r3, #4]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	461a      	mov	r2, r3
 80050c8:	f000 f8ea 	bl	80052a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2140      	movs	r1, #64	; 0x40
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 f943 	bl	800535e <TIM_ITRx_SetConfig>
      break;
 80050d8:	e00c      	b.n	80050f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4619      	mov	r1, r3
 80050e4:	4610      	mov	r0, r2
 80050e6:	f000 f93a 	bl	800535e <TIM_ITRx_SetConfig>
      break;
 80050ea:	e003      	b.n	80050f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	73fb      	strb	r3, [r7, #15]
      break;
 80050f0:	e000      	b.n	80050f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005104:	7bfb      	ldrb	r3, [r7, #15]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800510e:	b480      	push	{r7}
 8005110:	b083      	sub	sp, #12
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005116:	bf00      	nop
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
	...

08005160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a40      	ldr	r2, [pc, #256]	; (8005274 <TIM_Base_SetConfig+0x114>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d013      	beq.n	80051a0 <TIM_Base_SetConfig+0x40>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517e:	d00f      	beq.n	80051a0 <TIM_Base_SetConfig+0x40>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a3d      	ldr	r2, [pc, #244]	; (8005278 <TIM_Base_SetConfig+0x118>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d00b      	beq.n	80051a0 <TIM_Base_SetConfig+0x40>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a3c      	ldr	r2, [pc, #240]	; (800527c <TIM_Base_SetConfig+0x11c>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d007      	beq.n	80051a0 <TIM_Base_SetConfig+0x40>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a3b      	ldr	r2, [pc, #236]	; (8005280 <TIM_Base_SetConfig+0x120>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d003      	beq.n	80051a0 <TIM_Base_SetConfig+0x40>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a3a      	ldr	r2, [pc, #232]	; (8005284 <TIM_Base_SetConfig+0x124>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d108      	bne.n	80051b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a2f      	ldr	r2, [pc, #188]	; (8005274 <TIM_Base_SetConfig+0x114>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d02b      	beq.n	8005212 <TIM_Base_SetConfig+0xb2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c0:	d027      	beq.n	8005212 <TIM_Base_SetConfig+0xb2>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a2c      	ldr	r2, [pc, #176]	; (8005278 <TIM_Base_SetConfig+0x118>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d023      	beq.n	8005212 <TIM_Base_SetConfig+0xb2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a2b      	ldr	r2, [pc, #172]	; (800527c <TIM_Base_SetConfig+0x11c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d01f      	beq.n	8005212 <TIM_Base_SetConfig+0xb2>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a2a      	ldr	r2, [pc, #168]	; (8005280 <TIM_Base_SetConfig+0x120>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d01b      	beq.n	8005212 <TIM_Base_SetConfig+0xb2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a29      	ldr	r2, [pc, #164]	; (8005284 <TIM_Base_SetConfig+0x124>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d017      	beq.n	8005212 <TIM_Base_SetConfig+0xb2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a28      	ldr	r2, [pc, #160]	; (8005288 <TIM_Base_SetConfig+0x128>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d013      	beq.n	8005212 <TIM_Base_SetConfig+0xb2>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a27      	ldr	r2, [pc, #156]	; (800528c <TIM_Base_SetConfig+0x12c>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d00f      	beq.n	8005212 <TIM_Base_SetConfig+0xb2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a26      	ldr	r2, [pc, #152]	; (8005290 <TIM_Base_SetConfig+0x130>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d00b      	beq.n	8005212 <TIM_Base_SetConfig+0xb2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a25      	ldr	r2, [pc, #148]	; (8005294 <TIM_Base_SetConfig+0x134>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d007      	beq.n	8005212 <TIM_Base_SetConfig+0xb2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a24      	ldr	r2, [pc, #144]	; (8005298 <TIM_Base_SetConfig+0x138>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d003      	beq.n	8005212 <TIM_Base_SetConfig+0xb2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a23      	ldr	r2, [pc, #140]	; (800529c <TIM_Base_SetConfig+0x13c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d108      	bne.n	8005224 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005218:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	4313      	orrs	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a0a      	ldr	r2, [pc, #40]	; (8005274 <TIM_Base_SetConfig+0x114>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d003      	beq.n	8005258 <TIM_Base_SetConfig+0xf8>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a0c      	ldr	r2, [pc, #48]	; (8005284 <TIM_Base_SetConfig+0x124>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d103      	bne.n	8005260 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	691a      	ldr	r2, [r3, #16]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	615a      	str	r2, [r3, #20]
}
 8005266:	bf00      	nop
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	40010000 	.word	0x40010000
 8005278:	40000400 	.word	0x40000400
 800527c:	40000800 	.word	0x40000800
 8005280:	40000c00 	.word	0x40000c00
 8005284:	40010400 	.word	0x40010400
 8005288:	40014000 	.word	0x40014000
 800528c:	40014400 	.word	0x40014400
 8005290:	40014800 	.word	0x40014800
 8005294:	40001800 	.word	0x40001800
 8005298:	40001c00 	.word	0x40001c00
 800529c:	40002000 	.word	0x40002000

080052a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	f023 0201 	bic.w	r2, r3, #1
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f023 030a 	bic.w	r3, r3, #10
 80052dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	621a      	str	r2, [r3, #32]
}
 80052f2:	bf00      	nop
 80052f4:	371c      	adds	r7, #28
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052fe:	b480      	push	{r7}
 8005300:	b087      	sub	sp, #28
 8005302:	af00      	add	r7, sp, #0
 8005304:	60f8      	str	r0, [r7, #12]
 8005306:	60b9      	str	r1, [r7, #8]
 8005308:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	f023 0210 	bic.w	r2, r3, #16
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005328:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	031b      	lsls	r3, r3, #12
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	4313      	orrs	r3, r2
 8005332:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800533a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	4313      	orrs	r3, r2
 8005344:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	621a      	str	r2, [r3, #32]
}
 8005352:	bf00      	nop
 8005354:	371c      	adds	r7, #28
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800535e:	b480      	push	{r7}
 8005360:	b085      	sub	sp, #20
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005374:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	f043 0307 	orr.w	r3, r3, #7
 8005380:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	609a      	str	r2, [r3, #8]
}
 8005388:	bf00      	nop
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	021a      	lsls	r2, r3, #8
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	431a      	orrs	r2, r3
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	4313      	orrs	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	609a      	str	r2, [r3, #8]
}
 80053c8:	bf00      	nop
 80053ca:	371c      	adds	r7, #28
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d101      	bne.n	80053ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053e8:	2302      	movs	r3, #2
 80053ea:	e05a      	b.n	80054a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a21      	ldr	r2, [pc, #132]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d022      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005438:	d01d      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a1d      	ldr	r2, [pc, #116]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d018      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a1b      	ldr	r2, [pc, #108]	; (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d013      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a1a      	ldr	r2, [pc, #104]	; (80054bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00e      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a18      	ldr	r2, [pc, #96]	; (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d009      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a17      	ldr	r2, [pc, #92]	; (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d004      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a15      	ldr	r2, [pc, #84]	; (80054c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d10c      	bne.n	8005490 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800547c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	4313      	orrs	r3, r2
 8005486:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	40010000 	.word	0x40010000
 80054b4:	40000400 	.word	0x40000400
 80054b8:	40000800 	.word	0x40000800
 80054bc:	40000c00 	.word	0x40000c00
 80054c0:	40010400 	.word	0x40010400
 80054c4:	40014000 	.word	0x40014000
 80054c8:	40001800 	.word	0x40001800

080054cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e03f      	b.n	8005586 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d106      	bne.n	8005520 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7fc f93c 	bl	8001798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2224      	movs	r2, #36	; 0x24
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68da      	ldr	r2, [r3, #12]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005536:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 fc7b 	bl	8005e34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	691a      	ldr	r2, [r3, #16]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800554c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	695a      	ldr	r2, [r3, #20]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800555c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68da      	ldr	r2, [r3, #12]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800556c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2220      	movs	r2, #32
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2220      	movs	r2, #32
 8005580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
	...

08005590 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b0ba      	sub	sp, #232	; 0xe8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80055b6:	2300      	movs	r3, #0
 80055b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80055bc:	2300      	movs	r3, #0
 80055be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c6:	f003 030f 	and.w	r3, r3, #15
 80055ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80055ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10f      	bne.n	80055f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055da:	f003 0320 	and.w	r3, r3, #32
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d009      	beq.n	80055f6 <HAL_UART_IRQHandler+0x66>
 80055e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fb65 	bl	8005cbe <UART_Receive_IT>
      return;
 80055f4:	e256      	b.n	8005aa4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80055f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 80de 	beq.w	80057bc <HAL_UART_IRQHandler+0x22c>
 8005600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b00      	cmp	r3, #0
 800560a:	d106      	bne.n	800561a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800560c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005610:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 80d1 	beq.w	80057bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800561a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00b      	beq.n	800563e <HAL_UART_IRQHandler+0xae>
 8005626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800562a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800562e:	2b00      	cmp	r3, #0
 8005630:	d005      	beq.n	800563e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	f043 0201 	orr.w	r2, r3, #1
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800563e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005642:	f003 0304 	and.w	r3, r3, #4
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00b      	beq.n	8005662 <HAL_UART_IRQHandler+0xd2>
 800564a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d005      	beq.n	8005662 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	f043 0202 	orr.w	r2, r3, #2
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00b      	beq.n	8005686 <HAL_UART_IRQHandler+0xf6>
 800566e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d005      	beq.n	8005686 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	f043 0204 	orr.w	r2, r3, #4
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568a:	f003 0308 	and.w	r3, r3, #8
 800568e:	2b00      	cmp	r3, #0
 8005690:	d011      	beq.n	80056b6 <HAL_UART_IRQHandler+0x126>
 8005692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005696:	f003 0320 	and.w	r3, r3, #32
 800569a:	2b00      	cmp	r3, #0
 800569c:	d105      	bne.n	80056aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800569e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d005      	beq.n	80056b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	f043 0208 	orr.w	r2, r3, #8
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 81ed 	beq.w	8005a9a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056c4:	f003 0320 	and.w	r3, r3, #32
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d008      	beq.n	80056de <HAL_UART_IRQHandler+0x14e>
 80056cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056d0:	f003 0320 	and.w	r3, r3, #32
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 faf0 	bl	8005cbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e8:	2b40      	cmp	r3, #64	; 0x40
 80056ea:	bf0c      	ite	eq
 80056ec:	2301      	moveq	r3, #1
 80056ee:	2300      	movne	r3, #0
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	f003 0308 	and.w	r3, r3, #8
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d103      	bne.n	800570a <HAL_UART_IRQHandler+0x17a>
 8005702:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005706:	2b00      	cmp	r3, #0
 8005708:	d04f      	beq.n	80057aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f9f8 	bl	8005b00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571a:	2b40      	cmp	r3, #64	; 0x40
 800571c:	d141      	bne.n	80057a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3314      	adds	r3, #20
 8005724:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005728:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800572c:	e853 3f00 	ldrex	r3, [r3]
 8005730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005734:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800573c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3314      	adds	r3, #20
 8005746:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800574a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800574e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005752:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005756:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800575a:	e841 2300 	strex	r3, r2, [r1]
 800575e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005762:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1d9      	bne.n	800571e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576e:	2b00      	cmp	r3, #0
 8005770:	d013      	beq.n	800579a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005776:	4a7d      	ldr	r2, [pc, #500]	; (800596c <HAL_UART_IRQHandler+0x3dc>)
 8005778:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577e:	4618      	mov	r0, r3
 8005780:	f7fc fc60 	bl	8002044 <HAL_DMA_Abort_IT>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d016      	beq.n	80057b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005794:	4610      	mov	r0, r2
 8005796:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005798:	e00e      	b.n	80057b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f99a 	bl	8005ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a0:	e00a      	b.n	80057b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f996 	bl	8005ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a8:	e006      	b.n	80057b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f992 	bl	8005ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80057b6:	e170      	b.n	8005a9a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b8:	bf00      	nop
    return;
 80057ba:	e16e      	b.n	8005a9a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	f040 814a 	bne.w	8005a5a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80057c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ca:	f003 0310 	and.w	r3, r3, #16
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 8143 	beq.w	8005a5a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80057d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057d8:	f003 0310 	and.w	r3, r3, #16
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 813c 	beq.w	8005a5a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057e2:	2300      	movs	r3, #0
 80057e4:	60bb      	str	r3, [r7, #8]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	60bb      	str	r3, [r7, #8]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	60bb      	str	r3, [r7, #8]
 80057f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005802:	2b40      	cmp	r3, #64	; 0x40
 8005804:	f040 80b4 	bne.w	8005970 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005814:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 8140 	beq.w	8005a9e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005822:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005826:	429a      	cmp	r2, r3
 8005828:	f080 8139 	bcs.w	8005a9e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005832:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800583e:	f000 8088 	beq.w	8005952 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	330c      	adds	r3, #12
 8005848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005858:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800585c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005860:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	330c      	adds	r3, #12
 800586a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800586e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005872:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005876:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800587a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800587e:	e841 2300 	strex	r3, r2, [r1]
 8005882:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005886:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1d9      	bne.n	8005842 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3314      	adds	r3, #20
 8005894:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800589e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058a0:	f023 0301 	bic.w	r3, r3, #1
 80058a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3314      	adds	r3, #20
 80058ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80058b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80058ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80058be:	e841 2300 	strex	r3, r2, [r1]
 80058c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80058c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1e1      	bne.n	800588e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3314      	adds	r3, #20
 80058d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058d4:	e853 3f00 	ldrex	r3, [r3]
 80058d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80058da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3314      	adds	r3, #20
 80058ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80058ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80058f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058f6:	e841 2300 	strex	r3, r2, [r1]
 80058fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80058fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1e3      	bne.n	80058ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2220      	movs	r2, #32
 8005906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	330c      	adds	r3, #12
 8005916:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800591a:	e853 3f00 	ldrex	r3, [r3]
 800591e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005922:	f023 0310 	bic.w	r3, r3, #16
 8005926:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	330c      	adds	r3, #12
 8005930:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005934:	65ba      	str	r2, [r7, #88]	; 0x58
 8005936:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005938:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800593a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800593c:	e841 2300 	strex	r3, r2, [r1]
 8005940:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1e3      	bne.n	8005910 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594c:	4618      	mov	r0, r3
 800594e:	f7fc fb09 	bl	8001f64 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800595a:	b29b      	uxth	r3, r3
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	b29b      	uxth	r3, r3
 8005960:	4619      	mov	r1, r3
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f8c0 	bl	8005ae8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005968:	e099      	b.n	8005a9e <HAL_UART_IRQHandler+0x50e>
 800596a:	bf00      	nop
 800596c:	08005bc7 	.word	0x08005bc7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005978:	b29b      	uxth	r3, r3
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005984:	b29b      	uxth	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	f000 808b 	beq.w	8005aa2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800598c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 8086 	beq.w	8005aa2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	330c      	adds	r3, #12
 800599c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	330c      	adds	r3, #12
 80059b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80059ba:	647a      	str	r2, [r7, #68]	; 0x44
 80059bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059c2:	e841 2300 	strex	r3, r2, [r1]
 80059c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e3      	bne.n	8005996 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	3314      	adds	r3, #20
 80059d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	e853 3f00 	ldrex	r3, [r3]
 80059dc:	623b      	str	r3, [r7, #32]
   return(result);
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	f023 0301 	bic.w	r3, r3, #1
 80059e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3314      	adds	r3, #20
 80059ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80059f2:	633a      	str	r2, [r7, #48]	; 0x30
 80059f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1e3      	bne.n	80059ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	330c      	adds	r3, #12
 8005a1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	e853 3f00 	ldrex	r3, [r3]
 8005a22:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0310 	bic.w	r3, r3, #16
 8005a2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	330c      	adds	r3, #12
 8005a34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005a38:	61fa      	str	r2, [r7, #28]
 8005a3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3c:	69b9      	ldr	r1, [r7, #24]
 8005a3e:	69fa      	ldr	r2, [r7, #28]
 8005a40:	e841 2300 	strex	r3, r2, [r1]
 8005a44:	617b      	str	r3, [r7, #20]
   return(result);
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1e3      	bne.n	8005a14 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a50:	4619      	mov	r1, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f848 	bl	8005ae8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a58:	e023      	b.n	8005aa2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d009      	beq.n	8005a7a <HAL_UART_IRQHandler+0x4ea>
 8005a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f8bb 	bl	8005bee <UART_Transmit_IT>
    return;
 8005a78:	e014      	b.n	8005aa4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00e      	beq.n	8005aa4 <HAL_UART_IRQHandler+0x514>
 8005a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d008      	beq.n	8005aa4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f8fb 	bl	8005c8e <UART_EndTransmit_IT>
    return;
 8005a98:	e004      	b.n	8005aa4 <HAL_UART_IRQHandler+0x514>
    return;
 8005a9a:	bf00      	nop
 8005a9c:	e002      	b.n	8005aa4 <HAL_UART_IRQHandler+0x514>
      return;
 8005a9e:	bf00      	nop
 8005aa0:	e000      	b.n	8005aa4 <HAL_UART_IRQHandler+0x514>
      return;
 8005aa2:	bf00      	nop
  }
}
 8005aa4:	37e8      	adds	r7, #232	; 0xe8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop

08005aac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	460b      	mov	r3, r1
 8005af2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b095      	sub	sp, #84	; 0x54
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	330c      	adds	r3, #12
 8005b0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b12:	e853 3f00 	ldrex	r3, [r3]
 8005b16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	330c      	adds	r3, #12
 8005b26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b28:	643a      	str	r2, [r7, #64]	; 0x40
 8005b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b30:	e841 2300 	strex	r3, r2, [r1]
 8005b34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e5      	bne.n	8005b08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3314      	adds	r3, #20
 8005b42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	f023 0301 	bic.w	r3, r3, #1
 8005b52:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	3314      	adds	r3, #20
 8005b5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b64:	e841 2300 	strex	r3, r2, [r1]
 8005b68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e5      	bne.n	8005b3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d119      	bne.n	8005bac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	330c      	adds	r3, #12
 8005b7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	e853 3f00 	ldrex	r3, [r3]
 8005b86:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f023 0310 	bic.w	r3, r3, #16
 8005b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	330c      	adds	r3, #12
 8005b96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b98:	61ba      	str	r2, [r7, #24]
 8005b9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9c:	6979      	ldr	r1, [r7, #20]
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	e841 2300 	strex	r3, r2, [r1]
 8005ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1e5      	bne.n	8005b78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005bba:	bf00      	nop
 8005bbc:	3754      	adds	r7, #84	; 0x54
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b084      	sub	sp, #16
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f7ff ff77 	bl	8005ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005be6:	bf00      	nop
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b085      	sub	sp, #20
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b21      	cmp	r3, #33	; 0x21
 8005c00:	d13e      	bne.n	8005c80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c0a:	d114      	bne.n	8005c36 <UART_Transmit_IT+0x48>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d110      	bne.n	8005c36 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	881b      	ldrh	r3, [r3, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	1c9a      	adds	r2, r3, #2
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	621a      	str	r2, [r3, #32]
 8005c34:	e008      	b.n	8005c48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	1c59      	adds	r1, r3, #1
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	6211      	str	r1, [r2, #32]
 8005c40:	781a      	ldrb	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	4619      	mov	r1, r3
 8005c56:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10f      	bne.n	8005c7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68da      	ldr	r2, [r3, #12]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	e000      	b.n	8005c82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c80:	2302      	movs	r3, #2
  }
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b082      	sub	sp, #8
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68da      	ldr	r2, [r3, #12]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ca4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7ff fefc 	bl	8005aac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b08c      	sub	sp, #48	; 0x30
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b22      	cmp	r3, #34	; 0x22
 8005cd0:	f040 80ab 	bne.w	8005e2a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cdc:	d117      	bne.n	8005d0e <UART_Receive_IT+0x50>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d113      	bne.n	8005d0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d06:	1c9a      	adds	r2, r3, #2
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	629a      	str	r2, [r3, #40]	; 0x28
 8005d0c:	e026      	b.n	8005d5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005d14:	2300      	movs	r3, #0
 8005d16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d20:	d007      	beq.n	8005d32 <UART_Receive_IT+0x74>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10a      	bne.n	8005d40 <UART_Receive_IT+0x82>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d106      	bne.n	8005d40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3c:	701a      	strb	r2, [r3, #0]
 8005d3e:	e008      	b.n	8005d52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d56:	1c5a      	adds	r2, r3, #1
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	3b01      	subs	r3, #1
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	4619      	mov	r1, r3
 8005d6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d15a      	bne.n	8005e26 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 0220 	bic.w	r2, r2, #32
 8005d7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68da      	ldr	r2, [r3, #12]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	695a      	ldr	r2, [r3, #20]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0201 	bic.w	r2, r2, #1
 8005d9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2220      	movs	r2, #32
 8005da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d135      	bne.n	8005e1c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	330c      	adds	r3, #12
 8005dbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	e853 3f00 	ldrex	r3, [r3]
 8005dc4:	613b      	str	r3, [r7, #16]
   return(result);
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f023 0310 	bic.w	r3, r3, #16
 8005dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	330c      	adds	r3, #12
 8005dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dd6:	623a      	str	r2, [r7, #32]
 8005dd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dda:	69f9      	ldr	r1, [r7, #28]
 8005ddc:	6a3a      	ldr	r2, [r7, #32]
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1e5      	bne.n	8005db6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0310 	and.w	r3, r3, #16
 8005df4:	2b10      	cmp	r3, #16
 8005df6:	d10a      	bne.n	8005e0e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e12:	4619      	mov	r1, r3
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7ff fe67 	bl	8005ae8 <HAL_UARTEx_RxEventCallback>
 8005e1a:	e002      	b.n	8005e22 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7ff fe4f 	bl	8005ac0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	e002      	b.n	8005e2c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	e000      	b.n	8005e2c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e2a:	2302      	movs	r3, #2
  }
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3730      	adds	r7, #48	; 0x30
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e38:	b09f      	sub	sp, #124	; 0x7c
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e4a:	68d9      	ldr	r1, [r3, #12]
 8005e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	ea40 0301 	orr.w	r3, r0, r1
 8005e54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e58:	689a      	ldr	r2, [r3, #8]
 8005e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e62:	695b      	ldr	r3, [r3, #20]
 8005e64:	431a      	orrs	r2, r3
 8005e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e78:	f021 010c 	bic.w	r1, r1, #12
 8005e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e82:	430b      	orrs	r3, r1
 8005e84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e92:	6999      	ldr	r1, [r3, #24]
 8005e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	ea40 0301 	orr.w	r3, r0, r1
 8005e9c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	4bc5      	ldr	r3, [pc, #788]	; (80061b8 <UART_SetConfig+0x384>)
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d004      	beq.n	8005eb2 <UART_SetConfig+0x7e>
 8005ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	4bc3      	ldr	r3, [pc, #780]	; (80061bc <UART_SetConfig+0x388>)
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d103      	bne.n	8005eba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005eb2:	f7fe faf9 	bl	80044a8 <HAL_RCC_GetPCLK2Freq>
 8005eb6:	6778      	str	r0, [r7, #116]	; 0x74
 8005eb8:	e002      	b.n	8005ec0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005eba:	f7fe fae1 	bl	8004480 <HAL_RCC_GetPCLK1Freq>
 8005ebe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ec8:	f040 80b6 	bne.w	8006038 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ece:	461c      	mov	r4, r3
 8005ed0:	f04f 0500 	mov.w	r5, #0
 8005ed4:	4622      	mov	r2, r4
 8005ed6:	462b      	mov	r3, r5
 8005ed8:	1891      	adds	r1, r2, r2
 8005eda:	6439      	str	r1, [r7, #64]	; 0x40
 8005edc:	415b      	adcs	r3, r3
 8005ede:	647b      	str	r3, [r7, #68]	; 0x44
 8005ee0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ee4:	1912      	adds	r2, r2, r4
 8005ee6:	eb45 0303 	adc.w	r3, r5, r3
 8005eea:	f04f 0000 	mov.w	r0, #0
 8005eee:	f04f 0100 	mov.w	r1, #0
 8005ef2:	00d9      	lsls	r1, r3, #3
 8005ef4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ef8:	00d0      	lsls	r0, r2, #3
 8005efa:	4602      	mov	r2, r0
 8005efc:	460b      	mov	r3, r1
 8005efe:	1911      	adds	r1, r2, r4
 8005f00:	6639      	str	r1, [r7, #96]	; 0x60
 8005f02:	416b      	adcs	r3, r5
 8005f04:	667b      	str	r3, [r7, #100]	; 0x64
 8005f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f04f 0300 	mov.w	r3, #0
 8005f10:	1891      	adds	r1, r2, r2
 8005f12:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f14:	415b      	adcs	r3, r3
 8005f16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f1c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005f20:	f7fa fe92 	bl	8000c48 <__aeabi_uldivmod>
 8005f24:	4602      	mov	r2, r0
 8005f26:	460b      	mov	r3, r1
 8005f28:	4ba5      	ldr	r3, [pc, #660]	; (80061c0 <UART_SetConfig+0x38c>)
 8005f2a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f2e:	095b      	lsrs	r3, r3, #5
 8005f30:	011e      	lsls	r6, r3, #4
 8005f32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f34:	461c      	mov	r4, r3
 8005f36:	f04f 0500 	mov.w	r5, #0
 8005f3a:	4622      	mov	r2, r4
 8005f3c:	462b      	mov	r3, r5
 8005f3e:	1891      	adds	r1, r2, r2
 8005f40:	6339      	str	r1, [r7, #48]	; 0x30
 8005f42:	415b      	adcs	r3, r3
 8005f44:	637b      	str	r3, [r7, #52]	; 0x34
 8005f46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005f4a:	1912      	adds	r2, r2, r4
 8005f4c:	eb45 0303 	adc.w	r3, r5, r3
 8005f50:	f04f 0000 	mov.w	r0, #0
 8005f54:	f04f 0100 	mov.w	r1, #0
 8005f58:	00d9      	lsls	r1, r3, #3
 8005f5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f5e:	00d0      	lsls	r0, r2, #3
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	1911      	adds	r1, r2, r4
 8005f66:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f68:	416b      	adcs	r3, r5
 8005f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	461a      	mov	r2, r3
 8005f72:	f04f 0300 	mov.w	r3, #0
 8005f76:	1891      	adds	r1, r2, r2
 8005f78:	62b9      	str	r1, [r7, #40]	; 0x28
 8005f7a:	415b      	adcs	r3, r3
 8005f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f82:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005f86:	f7fa fe5f 	bl	8000c48 <__aeabi_uldivmod>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4b8c      	ldr	r3, [pc, #560]	; (80061c0 <UART_SetConfig+0x38c>)
 8005f90:	fba3 1302 	umull	r1, r3, r3, r2
 8005f94:	095b      	lsrs	r3, r3, #5
 8005f96:	2164      	movs	r1, #100	; 0x64
 8005f98:	fb01 f303 	mul.w	r3, r1, r3
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	3332      	adds	r3, #50	; 0x32
 8005fa2:	4a87      	ldr	r2, [pc, #540]	; (80061c0 <UART_SetConfig+0x38c>)
 8005fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa8:	095b      	lsrs	r3, r3, #5
 8005faa:	005b      	lsls	r3, r3, #1
 8005fac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fb0:	441e      	add	r6, r3
 8005fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f04f 0100 	mov.w	r1, #0
 8005fba:	4602      	mov	r2, r0
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	1894      	adds	r4, r2, r2
 8005fc0:	623c      	str	r4, [r7, #32]
 8005fc2:	415b      	adcs	r3, r3
 8005fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8005fc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005fca:	1812      	adds	r2, r2, r0
 8005fcc:	eb41 0303 	adc.w	r3, r1, r3
 8005fd0:	f04f 0400 	mov.w	r4, #0
 8005fd4:	f04f 0500 	mov.w	r5, #0
 8005fd8:	00dd      	lsls	r5, r3, #3
 8005fda:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005fde:	00d4      	lsls	r4, r2, #3
 8005fe0:	4622      	mov	r2, r4
 8005fe2:	462b      	mov	r3, r5
 8005fe4:	1814      	adds	r4, r2, r0
 8005fe6:	653c      	str	r4, [r7, #80]	; 0x50
 8005fe8:	414b      	adcs	r3, r1
 8005fea:	657b      	str	r3, [r7, #84]	; 0x54
 8005fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	f04f 0300 	mov.w	r3, #0
 8005ff6:	1891      	adds	r1, r2, r2
 8005ff8:	61b9      	str	r1, [r7, #24]
 8005ffa:	415b      	adcs	r3, r3
 8005ffc:	61fb      	str	r3, [r7, #28]
 8005ffe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006002:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006006:	f7fa fe1f 	bl	8000c48 <__aeabi_uldivmod>
 800600a:	4602      	mov	r2, r0
 800600c:	460b      	mov	r3, r1
 800600e:	4b6c      	ldr	r3, [pc, #432]	; (80061c0 <UART_SetConfig+0x38c>)
 8006010:	fba3 1302 	umull	r1, r3, r3, r2
 8006014:	095b      	lsrs	r3, r3, #5
 8006016:	2164      	movs	r1, #100	; 0x64
 8006018:	fb01 f303 	mul.w	r3, r1, r3
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	3332      	adds	r3, #50	; 0x32
 8006022:	4a67      	ldr	r2, [pc, #412]	; (80061c0 <UART_SetConfig+0x38c>)
 8006024:	fba2 2303 	umull	r2, r3, r2, r3
 8006028:	095b      	lsrs	r3, r3, #5
 800602a:	f003 0207 	and.w	r2, r3, #7
 800602e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4432      	add	r2, r6
 8006034:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006036:	e0b9      	b.n	80061ac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800603a:	461c      	mov	r4, r3
 800603c:	f04f 0500 	mov.w	r5, #0
 8006040:	4622      	mov	r2, r4
 8006042:	462b      	mov	r3, r5
 8006044:	1891      	adds	r1, r2, r2
 8006046:	6139      	str	r1, [r7, #16]
 8006048:	415b      	adcs	r3, r3
 800604a:	617b      	str	r3, [r7, #20]
 800604c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006050:	1912      	adds	r2, r2, r4
 8006052:	eb45 0303 	adc.w	r3, r5, r3
 8006056:	f04f 0000 	mov.w	r0, #0
 800605a:	f04f 0100 	mov.w	r1, #0
 800605e:	00d9      	lsls	r1, r3, #3
 8006060:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006064:	00d0      	lsls	r0, r2, #3
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	eb12 0804 	adds.w	r8, r2, r4
 800606e:	eb43 0905 	adc.w	r9, r3, r5
 8006072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	4618      	mov	r0, r3
 8006078:	f04f 0100 	mov.w	r1, #0
 800607c:	f04f 0200 	mov.w	r2, #0
 8006080:	f04f 0300 	mov.w	r3, #0
 8006084:	008b      	lsls	r3, r1, #2
 8006086:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800608a:	0082      	lsls	r2, r0, #2
 800608c:	4640      	mov	r0, r8
 800608e:	4649      	mov	r1, r9
 8006090:	f7fa fdda 	bl	8000c48 <__aeabi_uldivmod>
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	4b49      	ldr	r3, [pc, #292]	; (80061c0 <UART_SetConfig+0x38c>)
 800609a:	fba3 2302 	umull	r2, r3, r3, r2
 800609e:	095b      	lsrs	r3, r3, #5
 80060a0:	011e      	lsls	r6, r3, #4
 80060a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060a4:	4618      	mov	r0, r3
 80060a6:	f04f 0100 	mov.w	r1, #0
 80060aa:	4602      	mov	r2, r0
 80060ac:	460b      	mov	r3, r1
 80060ae:	1894      	adds	r4, r2, r2
 80060b0:	60bc      	str	r4, [r7, #8]
 80060b2:	415b      	adcs	r3, r3
 80060b4:	60fb      	str	r3, [r7, #12]
 80060b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060ba:	1812      	adds	r2, r2, r0
 80060bc:	eb41 0303 	adc.w	r3, r1, r3
 80060c0:	f04f 0400 	mov.w	r4, #0
 80060c4:	f04f 0500 	mov.w	r5, #0
 80060c8:	00dd      	lsls	r5, r3, #3
 80060ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060ce:	00d4      	lsls	r4, r2, #3
 80060d0:	4622      	mov	r2, r4
 80060d2:	462b      	mov	r3, r5
 80060d4:	1814      	adds	r4, r2, r0
 80060d6:	64bc      	str	r4, [r7, #72]	; 0x48
 80060d8:	414b      	adcs	r3, r1
 80060da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	4618      	mov	r0, r3
 80060e2:	f04f 0100 	mov.w	r1, #0
 80060e6:	f04f 0200 	mov.w	r2, #0
 80060ea:	f04f 0300 	mov.w	r3, #0
 80060ee:	008b      	lsls	r3, r1, #2
 80060f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060f4:	0082      	lsls	r2, r0, #2
 80060f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80060fa:	f7fa fda5 	bl	8000c48 <__aeabi_uldivmod>
 80060fe:	4602      	mov	r2, r0
 8006100:	460b      	mov	r3, r1
 8006102:	4b2f      	ldr	r3, [pc, #188]	; (80061c0 <UART_SetConfig+0x38c>)
 8006104:	fba3 1302 	umull	r1, r3, r3, r2
 8006108:	095b      	lsrs	r3, r3, #5
 800610a:	2164      	movs	r1, #100	; 0x64
 800610c:	fb01 f303 	mul.w	r3, r1, r3
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	3332      	adds	r3, #50	; 0x32
 8006116:	4a2a      	ldr	r2, [pc, #168]	; (80061c0 <UART_SetConfig+0x38c>)
 8006118:	fba2 2303 	umull	r2, r3, r2, r3
 800611c:	095b      	lsrs	r3, r3, #5
 800611e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006122:	441e      	add	r6, r3
 8006124:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006126:	4618      	mov	r0, r3
 8006128:	f04f 0100 	mov.w	r1, #0
 800612c:	4602      	mov	r2, r0
 800612e:	460b      	mov	r3, r1
 8006130:	1894      	adds	r4, r2, r2
 8006132:	603c      	str	r4, [r7, #0]
 8006134:	415b      	adcs	r3, r3
 8006136:	607b      	str	r3, [r7, #4]
 8006138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800613c:	1812      	adds	r2, r2, r0
 800613e:	eb41 0303 	adc.w	r3, r1, r3
 8006142:	f04f 0400 	mov.w	r4, #0
 8006146:	f04f 0500 	mov.w	r5, #0
 800614a:	00dd      	lsls	r5, r3, #3
 800614c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006150:	00d4      	lsls	r4, r2, #3
 8006152:	4622      	mov	r2, r4
 8006154:	462b      	mov	r3, r5
 8006156:	eb12 0a00 	adds.w	sl, r2, r0
 800615a:	eb43 0b01 	adc.w	fp, r3, r1
 800615e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	4618      	mov	r0, r3
 8006164:	f04f 0100 	mov.w	r1, #0
 8006168:	f04f 0200 	mov.w	r2, #0
 800616c:	f04f 0300 	mov.w	r3, #0
 8006170:	008b      	lsls	r3, r1, #2
 8006172:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006176:	0082      	lsls	r2, r0, #2
 8006178:	4650      	mov	r0, sl
 800617a:	4659      	mov	r1, fp
 800617c:	f7fa fd64 	bl	8000c48 <__aeabi_uldivmod>
 8006180:	4602      	mov	r2, r0
 8006182:	460b      	mov	r3, r1
 8006184:	4b0e      	ldr	r3, [pc, #56]	; (80061c0 <UART_SetConfig+0x38c>)
 8006186:	fba3 1302 	umull	r1, r3, r3, r2
 800618a:	095b      	lsrs	r3, r3, #5
 800618c:	2164      	movs	r1, #100	; 0x64
 800618e:	fb01 f303 	mul.w	r3, r1, r3
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	011b      	lsls	r3, r3, #4
 8006196:	3332      	adds	r3, #50	; 0x32
 8006198:	4a09      	ldr	r2, [pc, #36]	; (80061c0 <UART_SetConfig+0x38c>)
 800619a:	fba2 2303 	umull	r2, r3, r2, r3
 800619e:	095b      	lsrs	r3, r3, #5
 80061a0:	f003 020f 	and.w	r2, r3, #15
 80061a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4432      	add	r2, r6
 80061aa:	609a      	str	r2, [r3, #8]
}
 80061ac:	bf00      	nop
 80061ae:	377c      	adds	r7, #124	; 0x7c
 80061b0:	46bd      	mov	sp, r7
 80061b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b6:	bf00      	nop
 80061b8:	40011000 	.word	0x40011000
 80061bc:	40011400 	.word	0x40011400
 80061c0:	51eb851f 	.word	0x51eb851f

080061c4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80061ca:	4ba0      	ldr	r3, [pc, #640]	; (800644c <MX_LWIP_Init+0x288>)
 80061cc:	22c0      	movs	r2, #192	; 0xc0
 80061ce:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80061d0:	4b9e      	ldr	r3, [pc, #632]	; (800644c <MX_LWIP_Init+0x288>)
 80061d2:	22a8      	movs	r2, #168	; 0xa8
 80061d4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80061d6:	4b9d      	ldr	r3, [pc, #628]	; (800644c <MX_LWIP_Init+0x288>)
 80061d8:	2201      	movs	r2, #1
 80061da:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 80061dc:	4b9b      	ldr	r3, [pc, #620]	; (800644c <MX_LWIP_Init+0x288>)
 80061de:	2202      	movs	r2, #2
 80061e0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80061e2:	4b9b      	ldr	r3, [pc, #620]	; (8006450 <MX_LWIP_Init+0x28c>)
 80061e4:	22ff      	movs	r2, #255	; 0xff
 80061e6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80061e8:	4b99      	ldr	r3, [pc, #612]	; (8006450 <MX_LWIP_Init+0x28c>)
 80061ea:	22ff      	movs	r2, #255	; 0xff
 80061ec:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80061ee:	4b98      	ldr	r3, [pc, #608]	; (8006450 <MX_LWIP_Init+0x28c>)
 80061f0:	22ff      	movs	r2, #255	; 0xff
 80061f2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80061f4:	4b96      	ldr	r3, [pc, #600]	; (8006450 <MX_LWIP_Init+0x28c>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80061fa:	4b96      	ldr	r3, [pc, #600]	; (8006454 <MX_LWIP_Init+0x290>)
 80061fc:	22c0      	movs	r2, #192	; 0xc0
 80061fe:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8006200:	4b94      	ldr	r3, [pc, #592]	; (8006454 <MX_LWIP_Init+0x290>)
 8006202:	22a8      	movs	r2, #168	; 0xa8
 8006204:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8006206:	4b93      	ldr	r3, [pc, #588]	; (8006454 <MX_LWIP_Init+0x290>)
 8006208:	2201      	movs	r2, #1
 800620a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800620c:	4b91      	ldr	r3, [pc, #580]	; (8006454 <MX_LWIP_Init+0x290>)
 800620e:	2201      	movs	r2, #1
 8006210:	70da      	strb	r2, [r3, #3]
/* USER CODE BEGIN IP_ADDRESSES */

/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8006212:	2100      	movs	r1, #0
 8006214:	2000      	movs	r0, #0
 8006216:	f008 fc51 	bl	800eabc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800621a:	4b8c      	ldr	r3, [pc, #560]	; (800644c <MX_LWIP_Init+0x288>)
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	061a      	lsls	r2, r3, #24
 8006220:	4b8a      	ldr	r3, [pc, #552]	; (800644c <MX_LWIP_Init+0x288>)
 8006222:	785b      	ldrb	r3, [r3, #1]
 8006224:	041b      	lsls	r3, r3, #16
 8006226:	431a      	orrs	r2, r3
 8006228:	4b88      	ldr	r3, [pc, #544]	; (800644c <MX_LWIP_Init+0x288>)
 800622a:	789b      	ldrb	r3, [r3, #2]
 800622c:	021b      	lsls	r3, r3, #8
 800622e:	4313      	orrs	r3, r2
 8006230:	4a86      	ldr	r2, [pc, #536]	; (800644c <MX_LWIP_Init+0x288>)
 8006232:	78d2      	ldrb	r2, [r2, #3]
 8006234:	4313      	orrs	r3, r2
 8006236:	061a      	lsls	r2, r3, #24
 8006238:	4b84      	ldr	r3, [pc, #528]	; (800644c <MX_LWIP_Init+0x288>)
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	0619      	lsls	r1, r3, #24
 800623e:	4b83      	ldr	r3, [pc, #524]	; (800644c <MX_LWIP_Init+0x288>)
 8006240:	785b      	ldrb	r3, [r3, #1]
 8006242:	041b      	lsls	r3, r3, #16
 8006244:	4319      	orrs	r1, r3
 8006246:	4b81      	ldr	r3, [pc, #516]	; (800644c <MX_LWIP_Init+0x288>)
 8006248:	789b      	ldrb	r3, [r3, #2]
 800624a:	021b      	lsls	r3, r3, #8
 800624c:	430b      	orrs	r3, r1
 800624e:	497f      	ldr	r1, [pc, #508]	; (800644c <MX_LWIP_Init+0x288>)
 8006250:	78c9      	ldrb	r1, [r1, #3]
 8006252:	430b      	orrs	r3, r1
 8006254:	021b      	lsls	r3, r3, #8
 8006256:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800625a:	431a      	orrs	r2, r3
 800625c:	4b7b      	ldr	r3, [pc, #492]	; (800644c <MX_LWIP_Init+0x288>)
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	0619      	lsls	r1, r3, #24
 8006262:	4b7a      	ldr	r3, [pc, #488]	; (800644c <MX_LWIP_Init+0x288>)
 8006264:	785b      	ldrb	r3, [r3, #1]
 8006266:	041b      	lsls	r3, r3, #16
 8006268:	4319      	orrs	r1, r3
 800626a:	4b78      	ldr	r3, [pc, #480]	; (800644c <MX_LWIP_Init+0x288>)
 800626c:	789b      	ldrb	r3, [r3, #2]
 800626e:	021b      	lsls	r3, r3, #8
 8006270:	430b      	orrs	r3, r1
 8006272:	4976      	ldr	r1, [pc, #472]	; (800644c <MX_LWIP_Init+0x288>)
 8006274:	78c9      	ldrb	r1, [r1, #3]
 8006276:	430b      	orrs	r3, r1
 8006278:	0a1b      	lsrs	r3, r3, #8
 800627a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800627e:	431a      	orrs	r2, r3
 8006280:	4b72      	ldr	r3, [pc, #456]	; (800644c <MX_LWIP_Init+0x288>)
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	0619      	lsls	r1, r3, #24
 8006286:	4b71      	ldr	r3, [pc, #452]	; (800644c <MX_LWIP_Init+0x288>)
 8006288:	785b      	ldrb	r3, [r3, #1]
 800628a:	041b      	lsls	r3, r3, #16
 800628c:	4319      	orrs	r1, r3
 800628e:	4b6f      	ldr	r3, [pc, #444]	; (800644c <MX_LWIP_Init+0x288>)
 8006290:	789b      	ldrb	r3, [r3, #2]
 8006292:	021b      	lsls	r3, r3, #8
 8006294:	430b      	orrs	r3, r1
 8006296:	496d      	ldr	r1, [pc, #436]	; (800644c <MX_LWIP_Init+0x288>)
 8006298:	78c9      	ldrb	r1, [r1, #3]
 800629a:	430b      	orrs	r3, r1
 800629c:	0e1b      	lsrs	r3, r3, #24
 800629e:	4313      	orrs	r3, r2
 80062a0:	4a6d      	ldr	r2, [pc, #436]	; (8006458 <MX_LWIP_Init+0x294>)
 80062a2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80062a4:	4b6a      	ldr	r3, [pc, #424]	; (8006450 <MX_LWIP_Init+0x28c>)
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	061a      	lsls	r2, r3, #24
 80062aa:	4b69      	ldr	r3, [pc, #420]	; (8006450 <MX_LWIP_Init+0x28c>)
 80062ac:	785b      	ldrb	r3, [r3, #1]
 80062ae:	041b      	lsls	r3, r3, #16
 80062b0:	431a      	orrs	r2, r3
 80062b2:	4b67      	ldr	r3, [pc, #412]	; (8006450 <MX_LWIP_Init+0x28c>)
 80062b4:	789b      	ldrb	r3, [r3, #2]
 80062b6:	021b      	lsls	r3, r3, #8
 80062b8:	4313      	orrs	r3, r2
 80062ba:	4a65      	ldr	r2, [pc, #404]	; (8006450 <MX_LWIP_Init+0x28c>)
 80062bc:	78d2      	ldrb	r2, [r2, #3]
 80062be:	4313      	orrs	r3, r2
 80062c0:	061a      	lsls	r2, r3, #24
 80062c2:	4b63      	ldr	r3, [pc, #396]	; (8006450 <MX_LWIP_Init+0x28c>)
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	0619      	lsls	r1, r3, #24
 80062c8:	4b61      	ldr	r3, [pc, #388]	; (8006450 <MX_LWIP_Init+0x28c>)
 80062ca:	785b      	ldrb	r3, [r3, #1]
 80062cc:	041b      	lsls	r3, r3, #16
 80062ce:	4319      	orrs	r1, r3
 80062d0:	4b5f      	ldr	r3, [pc, #380]	; (8006450 <MX_LWIP_Init+0x28c>)
 80062d2:	789b      	ldrb	r3, [r3, #2]
 80062d4:	021b      	lsls	r3, r3, #8
 80062d6:	430b      	orrs	r3, r1
 80062d8:	495d      	ldr	r1, [pc, #372]	; (8006450 <MX_LWIP_Init+0x28c>)
 80062da:	78c9      	ldrb	r1, [r1, #3]
 80062dc:	430b      	orrs	r3, r1
 80062de:	021b      	lsls	r3, r3, #8
 80062e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80062e4:	431a      	orrs	r2, r3
 80062e6:	4b5a      	ldr	r3, [pc, #360]	; (8006450 <MX_LWIP_Init+0x28c>)
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	0619      	lsls	r1, r3, #24
 80062ec:	4b58      	ldr	r3, [pc, #352]	; (8006450 <MX_LWIP_Init+0x28c>)
 80062ee:	785b      	ldrb	r3, [r3, #1]
 80062f0:	041b      	lsls	r3, r3, #16
 80062f2:	4319      	orrs	r1, r3
 80062f4:	4b56      	ldr	r3, [pc, #344]	; (8006450 <MX_LWIP_Init+0x28c>)
 80062f6:	789b      	ldrb	r3, [r3, #2]
 80062f8:	021b      	lsls	r3, r3, #8
 80062fa:	430b      	orrs	r3, r1
 80062fc:	4954      	ldr	r1, [pc, #336]	; (8006450 <MX_LWIP_Init+0x28c>)
 80062fe:	78c9      	ldrb	r1, [r1, #3]
 8006300:	430b      	orrs	r3, r1
 8006302:	0a1b      	lsrs	r3, r3, #8
 8006304:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006308:	431a      	orrs	r2, r3
 800630a:	4b51      	ldr	r3, [pc, #324]	; (8006450 <MX_LWIP_Init+0x28c>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	0619      	lsls	r1, r3, #24
 8006310:	4b4f      	ldr	r3, [pc, #316]	; (8006450 <MX_LWIP_Init+0x28c>)
 8006312:	785b      	ldrb	r3, [r3, #1]
 8006314:	041b      	lsls	r3, r3, #16
 8006316:	4319      	orrs	r1, r3
 8006318:	4b4d      	ldr	r3, [pc, #308]	; (8006450 <MX_LWIP_Init+0x28c>)
 800631a:	789b      	ldrb	r3, [r3, #2]
 800631c:	021b      	lsls	r3, r3, #8
 800631e:	430b      	orrs	r3, r1
 8006320:	494b      	ldr	r1, [pc, #300]	; (8006450 <MX_LWIP_Init+0x28c>)
 8006322:	78c9      	ldrb	r1, [r1, #3]
 8006324:	430b      	orrs	r3, r1
 8006326:	0e1b      	lsrs	r3, r3, #24
 8006328:	4313      	orrs	r3, r2
 800632a:	4a4c      	ldr	r2, [pc, #304]	; (800645c <MX_LWIP_Init+0x298>)
 800632c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800632e:	4b49      	ldr	r3, [pc, #292]	; (8006454 <MX_LWIP_Init+0x290>)
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	061a      	lsls	r2, r3, #24
 8006334:	4b47      	ldr	r3, [pc, #284]	; (8006454 <MX_LWIP_Init+0x290>)
 8006336:	785b      	ldrb	r3, [r3, #1]
 8006338:	041b      	lsls	r3, r3, #16
 800633a:	431a      	orrs	r2, r3
 800633c:	4b45      	ldr	r3, [pc, #276]	; (8006454 <MX_LWIP_Init+0x290>)
 800633e:	789b      	ldrb	r3, [r3, #2]
 8006340:	021b      	lsls	r3, r3, #8
 8006342:	4313      	orrs	r3, r2
 8006344:	4a43      	ldr	r2, [pc, #268]	; (8006454 <MX_LWIP_Init+0x290>)
 8006346:	78d2      	ldrb	r2, [r2, #3]
 8006348:	4313      	orrs	r3, r2
 800634a:	061a      	lsls	r2, r3, #24
 800634c:	4b41      	ldr	r3, [pc, #260]	; (8006454 <MX_LWIP_Init+0x290>)
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	0619      	lsls	r1, r3, #24
 8006352:	4b40      	ldr	r3, [pc, #256]	; (8006454 <MX_LWIP_Init+0x290>)
 8006354:	785b      	ldrb	r3, [r3, #1]
 8006356:	041b      	lsls	r3, r3, #16
 8006358:	4319      	orrs	r1, r3
 800635a:	4b3e      	ldr	r3, [pc, #248]	; (8006454 <MX_LWIP_Init+0x290>)
 800635c:	789b      	ldrb	r3, [r3, #2]
 800635e:	021b      	lsls	r3, r3, #8
 8006360:	430b      	orrs	r3, r1
 8006362:	493c      	ldr	r1, [pc, #240]	; (8006454 <MX_LWIP_Init+0x290>)
 8006364:	78c9      	ldrb	r1, [r1, #3]
 8006366:	430b      	orrs	r3, r1
 8006368:	021b      	lsls	r3, r3, #8
 800636a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800636e:	431a      	orrs	r2, r3
 8006370:	4b38      	ldr	r3, [pc, #224]	; (8006454 <MX_LWIP_Init+0x290>)
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	0619      	lsls	r1, r3, #24
 8006376:	4b37      	ldr	r3, [pc, #220]	; (8006454 <MX_LWIP_Init+0x290>)
 8006378:	785b      	ldrb	r3, [r3, #1]
 800637a:	041b      	lsls	r3, r3, #16
 800637c:	4319      	orrs	r1, r3
 800637e:	4b35      	ldr	r3, [pc, #212]	; (8006454 <MX_LWIP_Init+0x290>)
 8006380:	789b      	ldrb	r3, [r3, #2]
 8006382:	021b      	lsls	r3, r3, #8
 8006384:	430b      	orrs	r3, r1
 8006386:	4933      	ldr	r1, [pc, #204]	; (8006454 <MX_LWIP_Init+0x290>)
 8006388:	78c9      	ldrb	r1, [r1, #3]
 800638a:	430b      	orrs	r3, r1
 800638c:	0a1b      	lsrs	r3, r3, #8
 800638e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006392:	431a      	orrs	r2, r3
 8006394:	4b2f      	ldr	r3, [pc, #188]	; (8006454 <MX_LWIP_Init+0x290>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	0619      	lsls	r1, r3, #24
 800639a:	4b2e      	ldr	r3, [pc, #184]	; (8006454 <MX_LWIP_Init+0x290>)
 800639c:	785b      	ldrb	r3, [r3, #1]
 800639e:	041b      	lsls	r3, r3, #16
 80063a0:	4319      	orrs	r1, r3
 80063a2:	4b2c      	ldr	r3, [pc, #176]	; (8006454 <MX_LWIP_Init+0x290>)
 80063a4:	789b      	ldrb	r3, [r3, #2]
 80063a6:	021b      	lsls	r3, r3, #8
 80063a8:	430b      	orrs	r3, r1
 80063aa:	492a      	ldr	r1, [pc, #168]	; (8006454 <MX_LWIP_Init+0x290>)
 80063ac:	78c9      	ldrb	r1, [r1, #3]
 80063ae:	430b      	orrs	r3, r1
 80063b0:	0e1b      	lsrs	r3, r3, #24
 80063b2:	4313      	orrs	r3, r2
 80063b4:	4a2a      	ldr	r2, [pc, #168]	; (8006460 <MX_LWIP_Init+0x29c>)
 80063b6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80063b8:	4b2a      	ldr	r3, [pc, #168]	; (8006464 <MX_LWIP_Init+0x2a0>)
 80063ba:	9302      	str	r3, [sp, #8]
 80063bc:	4b2a      	ldr	r3, [pc, #168]	; (8006468 <MX_LWIP_Init+0x2a4>)
 80063be:	9301      	str	r3, [sp, #4]
 80063c0:	2300      	movs	r3, #0
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	4b26      	ldr	r3, [pc, #152]	; (8006460 <MX_LWIP_Init+0x29c>)
 80063c6:	4a25      	ldr	r2, [pc, #148]	; (800645c <MX_LWIP_Init+0x298>)
 80063c8:	4923      	ldr	r1, [pc, #140]	; (8006458 <MX_LWIP_Init+0x294>)
 80063ca:	4828      	ldr	r0, [pc, #160]	; (800646c <MX_LWIP_Init+0x2a8>)
 80063cc:	f009 fbe8 	bl	800fba0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80063d0:	4826      	ldr	r0, [pc, #152]	; (800646c <MX_LWIP_Init+0x2a8>)
 80063d2:	f009 fd9f 	bl	800ff14 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80063d6:	4b25      	ldr	r3, [pc, #148]	; (800646c <MX_LWIP_Init+0x2a8>)
 80063d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80063dc:	089b      	lsrs	r3, r3, #2
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d003      	beq.n	80063f0 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80063e8:	4820      	ldr	r0, [pc, #128]	; (800646c <MX_LWIP_Init+0x2a8>)
 80063ea:	f009 fda3 	bl	800ff34 <netif_set_up>
 80063ee:	e002      	b.n	80063f6 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80063f0:	481e      	ldr	r0, [pc, #120]	; (800646c <MX_LWIP_Init+0x2a8>)
 80063f2:	f009 fe0b 	bl	801000c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80063f6:	491e      	ldr	r1, [pc, #120]	; (8006470 <MX_LWIP_Init+0x2ac>)
 80063f8:	481c      	ldr	r0, [pc, #112]	; (800646c <MX_LWIP_Init+0x2a8>)
 80063fa:	f009 fea1 	bl	8010140 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 80063fe:	2200      	movs	r2, #0
 8006400:	2101      	movs	r1, #1
 8006402:	2001      	movs	r0, #1
 8006404:	f000 feb1 	bl	800716a <osSemaphoreNew>
 8006408:	4603      	mov	r3, r0
 800640a:	4a1a      	ldr	r2, [pc, #104]	; (8006474 <MX_LWIP_Init+0x2b0>)
 800640c:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800640e:	4b1a      	ldr	r3, [pc, #104]	; (8006478 <MX_LWIP_Init+0x2b4>)
 8006410:	4a16      	ldr	r2, [pc, #88]	; (800646c <MX_LWIP_Init+0x2a8>)
 8006412:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8006414:	4b17      	ldr	r3, [pc, #92]	; (8006474 <MX_LWIP_Init+0x2b0>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a17      	ldr	r2, [pc, #92]	; (8006478 <MX_LWIP_Init+0x2b4>)
 800641a:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800641c:	2224      	movs	r2, #36	; 0x24
 800641e:	2100      	movs	r1, #0
 8006420:	4816      	ldr	r0, [pc, #88]	; (800647c <MX_LWIP_Init+0x2b8>)
 8006422:	f018 fbab 	bl	801eb7c <memset>
  attributes.name = "LinkThr";
 8006426:	4b15      	ldr	r3, [pc, #84]	; (800647c <MX_LWIP_Init+0x2b8>)
 8006428:	4a15      	ldr	r2, [pc, #84]	; (8006480 <MX_LWIP_Init+0x2bc>)
 800642a:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800642c:	4b13      	ldr	r3, [pc, #76]	; (800647c <MX_LWIP_Init+0x2b8>)
 800642e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006432:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8006434:	4b11      	ldr	r3, [pc, #68]	; (800647c <MX_LWIP_Init+0x2b8>)
 8006436:	2210      	movs	r2, #16
 8006438:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 800643a:	4a10      	ldr	r2, [pc, #64]	; (800647c <MX_LWIP_Init+0x2b8>)
 800643c:	490e      	ldr	r1, [pc, #56]	; (8006478 <MX_LWIP_Init+0x2b4>)
 800643e:	4811      	ldr	r0, [pc, #68]	; (8006484 <MX_LWIP_Init+0x2c0>)
 8006440:	f000 fcd1 	bl	8006de6 <osThreadNew>
/* USER CODE BEGIN 3 */
#if DHCP
  dhcp_start(&gnetif);
#endif
/* USER CODE END 3 */
}
 8006444:	bf00      	nop
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	20001f88 	.word	0x20001f88
 8006450:	20001f84 	.word	0x20001f84
 8006454:	20001f20 	.word	0x20001f20
 8006458:	20001f80 	.word	0x20001f80
 800645c:	20001f8c 	.word	0x20001f8c
 8006460:	20001f90 	.word	0x20001f90
 8006464:	0800e9cd 	.word	0x0800e9cd
 8006468:	08006ab1 	.word	0x08006ab1
 800646c:	20001f48 	.word	0x20001f48
 8006470:	08006b95 	.word	0x08006b95
 8006474:	20000020 	.word	0x20000020
 8006478:	20001f18 	.word	0x20001f18
 800647c:	20001f24 	.word	0x20001f24
 8006480:	08021940 	.word	0x08021940
 8006484:	08006b1d 	.word	0x08006b1d

08006488 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08e      	sub	sp, #56	; 0x38
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006494:	2200      	movs	r2, #0
 8006496:	601a      	str	r2, [r3, #0]
 8006498:	605a      	str	r2, [r3, #4]
 800649a:	609a      	str	r2, [r3, #8]
 800649c:	60da      	str	r2, [r3, #12]
 800649e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a4a      	ldr	r2, [pc, #296]	; (80065d0 <HAL_ETH_MspInit+0x148>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	f040 808d 	bne.w	80065c6 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80064ac:	2300      	movs	r3, #0
 80064ae:	623b      	str	r3, [r7, #32]
 80064b0:	4b48      	ldr	r3, [pc, #288]	; (80065d4 <HAL_ETH_MspInit+0x14c>)
 80064b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b4:	4a47      	ldr	r2, [pc, #284]	; (80065d4 <HAL_ETH_MspInit+0x14c>)
 80064b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80064ba:	6313      	str	r3, [r2, #48]	; 0x30
 80064bc:	4b45      	ldr	r3, [pc, #276]	; (80065d4 <HAL_ETH_MspInit+0x14c>)
 80064be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064c4:	623b      	str	r3, [r7, #32]
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	2300      	movs	r3, #0
 80064ca:	61fb      	str	r3, [r7, #28]
 80064cc:	4b41      	ldr	r3, [pc, #260]	; (80065d4 <HAL_ETH_MspInit+0x14c>)
 80064ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d0:	4a40      	ldr	r2, [pc, #256]	; (80065d4 <HAL_ETH_MspInit+0x14c>)
 80064d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064d6:	6313      	str	r3, [r2, #48]	; 0x30
 80064d8:	4b3e      	ldr	r3, [pc, #248]	; (80065d4 <HAL_ETH_MspInit+0x14c>)
 80064da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80064e0:	61fb      	str	r3, [r7, #28]
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	2300      	movs	r3, #0
 80064e6:	61bb      	str	r3, [r7, #24]
 80064e8:	4b3a      	ldr	r3, [pc, #232]	; (80065d4 <HAL_ETH_MspInit+0x14c>)
 80064ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ec:	4a39      	ldr	r2, [pc, #228]	; (80065d4 <HAL_ETH_MspInit+0x14c>)
 80064ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80064f2:	6313      	str	r3, [r2, #48]	; 0x30
 80064f4:	4b37      	ldr	r3, [pc, #220]	; (80065d4 <HAL_ETH_MspInit+0x14c>)
 80064f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064fc:	61bb      	str	r3, [r7, #24]
 80064fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006500:	2300      	movs	r3, #0
 8006502:	617b      	str	r3, [r7, #20]
 8006504:	4b33      	ldr	r3, [pc, #204]	; (80065d4 <HAL_ETH_MspInit+0x14c>)
 8006506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006508:	4a32      	ldr	r2, [pc, #200]	; (80065d4 <HAL_ETH_MspInit+0x14c>)
 800650a:	f043 0304 	orr.w	r3, r3, #4
 800650e:	6313      	str	r3, [r2, #48]	; 0x30
 8006510:	4b30      	ldr	r3, [pc, #192]	; (80065d4 <HAL_ETH_MspInit+0x14c>)
 8006512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	617b      	str	r3, [r7, #20]
 800651a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800651c:	2300      	movs	r3, #0
 800651e:	613b      	str	r3, [r7, #16]
 8006520:	4b2c      	ldr	r3, [pc, #176]	; (80065d4 <HAL_ETH_MspInit+0x14c>)
 8006522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006524:	4a2b      	ldr	r2, [pc, #172]	; (80065d4 <HAL_ETH_MspInit+0x14c>)
 8006526:	f043 0301 	orr.w	r3, r3, #1
 800652a:	6313      	str	r3, [r2, #48]	; 0x30
 800652c:	4b29      	ldr	r3, [pc, #164]	; (80065d4 <HAL_ETH_MspInit+0x14c>)
 800652e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	613b      	str	r3, [r7, #16]
 8006536:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006538:	2300      	movs	r3, #0
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	4b25      	ldr	r3, [pc, #148]	; (80065d4 <HAL_ETH_MspInit+0x14c>)
 800653e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006540:	4a24      	ldr	r2, [pc, #144]	; (80065d4 <HAL_ETH_MspInit+0x14c>)
 8006542:	f043 0302 	orr.w	r3, r3, #2
 8006546:	6313      	str	r3, [r2, #48]	; 0x30
 8006548:	4b22      	ldr	r3, [pc, #136]	; (80065d4 <HAL_ETH_MspInit+0x14c>)
 800654a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	60fb      	str	r3, [r7, #12]
 8006552:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8006554:	2332      	movs	r3, #50	; 0x32
 8006556:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006558:	2302      	movs	r3, #2
 800655a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800655c:	2300      	movs	r3, #0
 800655e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006560:	2303      	movs	r3, #3
 8006562:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006564:	230b      	movs	r3, #11
 8006566:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800656c:	4619      	mov	r1, r3
 800656e:	481a      	ldr	r0, [pc, #104]	; (80065d8 <HAL_ETH_MspInit+0x150>)
 8006570:	f7fd f96c 	bl	800384c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8006574:	2386      	movs	r3, #134	; 0x86
 8006576:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006578:	2302      	movs	r3, #2
 800657a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800657c:	2300      	movs	r3, #0
 800657e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006580:	2303      	movs	r3, #3
 8006582:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006584:	230b      	movs	r3, #11
 8006586:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800658c:	4619      	mov	r1, r3
 800658e:	4813      	ldr	r0, [pc, #76]	; (80065dc <HAL_ETH_MspInit+0x154>)
 8006590:	f7fd f95c 	bl	800384c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8006594:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006598:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800659a:	2302      	movs	r3, #2
 800659c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065a2:	2303      	movs	r3, #3
 80065a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80065a6:	230b      	movs	r3, #11
 80065a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065ae:	4619      	mov	r1, r3
 80065b0:	480b      	ldr	r0, [pc, #44]	; (80065e0 <HAL_ETH_MspInit+0x158>)
 80065b2:	f7fd f94b 	bl	800384c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80065b6:	2200      	movs	r2, #0
 80065b8:	2105      	movs	r1, #5
 80065ba:	203d      	movs	r0, #61	; 0x3d
 80065bc:	f7fb fbfa 	bl	8001db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80065c0:	203d      	movs	r0, #61	; 0x3d
 80065c2:	f7fb fc13 	bl	8001dec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80065c6:	bf00      	nop
 80065c8:	3738      	adds	r7, #56	; 0x38
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	40028000 	.word	0x40028000
 80065d4:	40023800 	.word	0x40023800
 80065d8:	40020800 	.word	0x40020800
 80065dc:	40020000 	.word	0x40020000
 80065e0:	40020400 	.word	0x40020400

080065e4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80065ec:	4b04      	ldr	r3, [pc, #16]	; (8006600 <HAL_ETH_RxCpltCallback+0x1c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f000 fe95 	bl	8007320 <osSemaphoreRelease>
}
 80065f6:	bf00      	nop
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	20000024 	.word	0x20000024

08006604 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b090      	sub	sp, #64	; 0x40
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800660c:	2300      	movs	r3, #0
 800660e:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006610:	4b5d      	ldr	r3, [pc, #372]	; (8006788 <low_level_init+0x184>)
 8006612:	4a5e      	ldr	r2, [pc, #376]	; (800678c <low_level_init+0x188>)
 8006614:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8006616:	4b5c      	ldr	r3, [pc, #368]	; (8006788 <low_level_init+0x184>)
 8006618:	2201      	movs	r2, #1
 800661a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800661c:	4b5a      	ldr	r3, [pc, #360]	; (8006788 <low_level_init+0x184>)
 800661e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006622:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006624:	4b58      	ldr	r3, [pc, #352]	; (8006788 <low_level_init+0x184>)
 8006626:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800662a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800662c:	4b56      	ldr	r3, [pc, #344]	; (8006788 <low_level_init+0x184>)
 800662e:	2201      	movs	r2, #1
 8006630:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8006632:	2300      	movs	r3, #0
 8006634:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8006636:	2380      	movs	r3, #128	; 0x80
 8006638:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800663a:	23e1      	movs	r3, #225	; 0xe1
 800663c:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800663e:	2300      	movs	r3, #0
 8006640:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8006642:	2300      	movs	r3, #0
 8006644:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8006646:	2300      	movs	r3, #0
 8006648:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800664a:	4a4f      	ldr	r2, [pc, #316]	; (8006788 <low_level_init+0x184>)
 800664c:	f107 030c 	add.w	r3, r7, #12
 8006650:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8006652:	4b4d      	ldr	r3, [pc, #308]	; (8006788 <low_level_init+0x184>)
 8006654:	2201      	movs	r2, #1
 8006656:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8006658:	4b4b      	ldr	r3, [pc, #300]	; (8006788 <low_level_init+0x184>)
 800665a:	2200      	movs	r2, #0
 800665c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800665e:	4b4a      	ldr	r3, [pc, #296]	; (8006788 <low_level_init+0x184>)
 8006660:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006664:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006666:	4848      	ldr	r0, [pc, #288]	; (8006788 <low_level_init+0x184>)
 8006668:	f7fb ff4a 	bl	8002500 <HAL_ETH_Init>
 800666c:	4603      	mov	r3, r0
 800666e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8006672:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006676:	2b00      	cmp	r3, #0
 8006678:	d108      	bne.n	800668c <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006680:	f043 0304 	orr.w	r3, r3, #4
 8006684:	b2da      	uxtb	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800668c:	2304      	movs	r3, #4
 800668e:	4a40      	ldr	r2, [pc, #256]	; (8006790 <low_level_init+0x18c>)
 8006690:	4940      	ldr	r1, [pc, #256]	; (8006794 <low_level_init+0x190>)
 8006692:	483d      	ldr	r0, [pc, #244]	; (8006788 <low_level_init+0x184>)
 8006694:	f7fc f8d0 	bl	8002838 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8006698:	2304      	movs	r3, #4
 800669a:	4a3f      	ldr	r2, [pc, #252]	; (8006798 <low_level_init+0x194>)
 800669c:	493f      	ldr	r1, [pc, #252]	; (800679c <low_level_init+0x198>)
 800669e:	483a      	ldr	r0, [pc, #232]	; (8006788 <low_level_init+0x184>)
 80066a0:	f7fc f933 	bl	800290a <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2206      	movs	r2, #6
 80066a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80066ac:	4b36      	ldr	r3, [pc, #216]	; (8006788 <low_level_init+0x184>)
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	781a      	ldrb	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80066b8:	4b33      	ldr	r3, [pc, #204]	; (8006788 <low_level_init+0x184>)
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	785a      	ldrb	r2, [r3, #1]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80066c4:	4b30      	ldr	r3, [pc, #192]	; (8006788 <low_level_init+0x184>)
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	789a      	ldrb	r2, [r3, #2]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80066d0:	4b2d      	ldr	r3, [pc, #180]	; (8006788 <low_level_init+0x184>)
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	78da      	ldrb	r2, [r3, #3]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80066dc:	4b2a      	ldr	r3, [pc, #168]	; (8006788 <low_level_init+0x184>)
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	791a      	ldrb	r2, [r3, #4]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80066e8:	4b27      	ldr	r3, [pc, #156]	; (8006788 <low_level_init+0x184>)
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	795a      	ldrb	r2, [r3, #5]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80066fa:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006702:	f043 030a 	orr.w	r3, r3, #10
 8006706:	b2da      	uxtb	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 800670e:	2200      	movs	r2, #0
 8006710:	2101      	movs	r1, #1
 8006712:	2001      	movs	r0, #1
 8006714:	f000 fd29 	bl	800716a <osSemaphoreNew>
 8006718:	4603      	mov	r3, r0
 800671a:	4a21      	ldr	r2, [pc, #132]	; (80067a0 <low_level_init+0x19c>)
 800671c:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800671e:	f107 0314 	add.w	r3, r7, #20
 8006722:	2224      	movs	r2, #36	; 0x24
 8006724:	2100      	movs	r1, #0
 8006726:	4618      	mov	r0, r3
 8006728:	f018 fa28 	bl	801eb7c <memset>
  attributes.name = "EthIf";
 800672c:	4b1d      	ldr	r3, [pc, #116]	; (80067a4 <low_level_init+0x1a0>)
 800672e:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8006730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006734:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8006736:	2330      	movs	r3, #48	; 0x30
 8006738:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 800673a:	f107 0314 	add.w	r3, r7, #20
 800673e:	461a      	mov	r2, r3
 8006740:	6879      	ldr	r1, [r7, #4]
 8006742:	4819      	ldr	r0, [pc, #100]	; (80067a8 <low_level_init+0x1a4>)
 8006744:	f000 fb4f 	bl	8006de6 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8006748:	480f      	ldr	r0, [pc, #60]	; (8006788 <low_level_init+0x184>)
 800674a:	f7fc fc06 	bl	8002f5a <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800674e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006752:	461a      	mov	r2, r3
 8006754:	211d      	movs	r1, #29
 8006756:	480c      	ldr	r0, [pc, #48]	; (8006788 <low_level_init+0x184>)
 8006758:	f7fc fb31 	bl	8002dbe <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800675c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675e:	f043 030b 	orr.w	r3, r3, #11
 8006762:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8006764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006766:	461a      	mov	r2, r3
 8006768:	211d      	movs	r1, #29
 800676a:	4807      	ldr	r0, [pc, #28]	; (8006788 <low_level_init+0x184>)
 800676c:	f7fc fb8f 	bl	8002e8e <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8006770:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006774:	461a      	mov	r2, r3
 8006776:	211d      	movs	r1, #29
 8006778:	4803      	ldr	r0, [pc, #12]	; (8006788 <low_level_init+0x184>)
 800677a:	f7fc fb20 	bl	8002dbe <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800677e:	bf00      	nop
 8006780:	3740      	adds	r7, #64	; 0x40
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	20003864 	.word	0x20003864
 800678c:	40028000 	.word	0x40028000
 8006790:	200038ac 	.word	0x200038ac
 8006794:	20001f94 	.word	0x20001f94
 8006798:	20002014 	.word	0x20002014
 800679c:	200037e4 	.word	0x200037e4
 80067a0:	20000024 	.word	0x20000024
 80067a4:	08021948 	.word	0x08021948
 80067a8:	08006a51 	.word	0x08006a51

080067ac <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b08a      	sub	sp, #40	; 0x28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80067b6:	4b4b      	ldr	r3, [pc, #300]	; (80068e4 <low_level_output+0x138>)
 80067b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80067be:	2300      	movs	r3, #0
 80067c0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80067c2:	2300      	movs	r3, #0
 80067c4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80067ce:	4b45      	ldr	r3, [pc, #276]	; (80068e4 <low_level_output+0x138>)
 80067d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80067d4:	2300      	movs	r3, #0
 80067d6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	623b      	str	r3, [r7, #32]
 80067dc:	e05a      	b.n	8006894 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	da03      	bge.n	80067ee <low_level_output+0x42>
      {
        errval = ERR_USE;
 80067e6:	23f8      	movs	r3, #248	; 0xf8
 80067e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80067ec:	e05c      	b.n	80068a8 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80067ee:	6a3b      	ldr	r3, [r7, #32]
 80067f0:	895b      	ldrh	r3, [r3, #10]
 80067f2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80067f8:	e02f      	b.n	800685a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80067fa:	69fa      	ldr	r2, [r7, #28]
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	18d0      	adds	r0, r2, r3
 8006800:	6a3b      	ldr	r3, [r7, #32]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	18d1      	adds	r1, r2, r3
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800680e:	3304      	adds	r3, #4
 8006810:	461a      	mov	r2, r3
 8006812:	f018 f98b 	bl	801eb2c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	da03      	bge.n	800682c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8006824:	23f8      	movs	r3, #248	; 0xf8
 8006826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800682a:	e03d      	b.n	80068a8 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4413      	add	r3, r2
 8006838:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800683c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006848:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006854:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8006856:	2300      	movs	r3, #0
 8006858:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	4413      	add	r3, r2
 8006860:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006864:	4293      	cmp	r3, r2
 8006866:	d8c8      	bhi.n	80067fa <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8006868:	69fa      	ldr	r2, [r7, #28]
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	18d0      	adds	r0, r2, r3
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	4413      	add	r3, r2
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	4619      	mov	r1, r3
 800687a:	f018 f957 	bl	801eb2c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4413      	add	r3, r2
 8006884:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4413      	add	r3, r2
 800688c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	623b      	str	r3, [r7, #32]
 8006894:	6a3b      	ldr	r3, [r7, #32]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1a1      	bne.n	80067de <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800689a:	6979      	ldr	r1, [r7, #20]
 800689c:	4811      	ldr	r0, [pc, #68]	; (80068e4 <low_level_output+0x138>)
 800689e:	f7fc f8a1 	bl	80029e4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80068a2:	2300      	movs	r3, #0
 80068a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80068a8:	4b0e      	ldr	r3, [pc, #56]	; (80068e4 <low_level_output+0x138>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068b0:	3314      	adds	r3, #20
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0320 	and.w	r3, r3, #32
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00d      	beq.n	80068d8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80068bc:	4b09      	ldr	r3, [pc, #36]	; (80068e4 <low_level_output+0x138>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068c4:	3314      	adds	r3, #20
 80068c6:	2220      	movs	r2, #32
 80068c8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80068ca:	4b06      	ldr	r3, [pc, #24]	; (80068e4 <low_level_output+0x138>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068d2:	3304      	adds	r3, #4
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80068d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3728      	adds	r7, #40	; 0x28
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	20003864 	.word	0x20003864

080068e8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08c      	sub	sp, #48	; 0x30
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80068f0:	2300      	movs	r3, #0
 80068f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80068f4:	2300      	movs	r3, #0
 80068f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80068f8:	2300      	movs	r3, #0
 80068fa:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80068fc:	2300      	movs	r3, #0
 80068fe:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8006900:	2300      	movs	r3, #0
 8006902:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8006904:	2300      	movs	r3, #0
 8006906:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8006908:	2300      	movs	r3, #0
 800690a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800690c:	484f      	ldr	r0, [pc, #316]	; (8006a4c <low_level_input+0x164>)
 800690e:	f7fc f953 	bl	8002bb8 <HAL_ETH_GetReceivedFrame_IT>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d001      	beq.n	800691c <low_level_input+0x34>

    return NULL;
 8006918:	2300      	movs	r3, #0
 800691a:	e092      	b.n	8006a42 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800691c:	4b4b      	ldr	r3, [pc, #300]	; (8006a4c <low_level_input+0x164>)
 800691e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006920:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8006922:	4b4a      	ldr	r3, [pc, #296]	; (8006a4c <low_level_input+0x164>)
 8006924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006926:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8006928:	89fb      	ldrh	r3, [r7, #14]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d007      	beq.n	800693e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800692e:	89fb      	ldrh	r3, [r7, #14]
 8006930:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8006934:	4619      	mov	r1, r3
 8006936:	2000      	movs	r0, #0
 8006938:	f009 fd04 	bl	8010344 <pbuf_alloc>
 800693c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800693e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006940:	2b00      	cmp	r3, #0
 8006942:	d04b      	beq.n	80069dc <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006944:	4b41      	ldr	r3, [pc, #260]	; (8006a4c <low_level_input+0x164>)
 8006946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006948:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800694a:	2300      	movs	r3, #0
 800694c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800694e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006950:	62bb      	str	r3, [r7, #40]	; 0x28
 8006952:	e040      	b.n	80069d6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8006954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006956:	895b      	ldrh	r3, [r3, #10]
 8006958:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800695a:	2300      	movs	r3, #0
 800695c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800695e:	e021      	b.n	80069a4 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8006960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	18d0      	adds	r0, r2, r3
 8006968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	18d1      	adds	r1, r2, r3
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8006974:	3304      	adds	r3, #4
 8006976:	461a      	mov	r2, r3
 8006978:	f018 f8d8 	bl	801eb2c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8006988:	69fa      	ldr	r2, [r7, #28]
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	4413      	add	r3, r2
 800698e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006992:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8006994:	69ba      	ldr	r2, [r7, #24]
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800699e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80069a0:	2300      	movs	r3, #0
 80069a2:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	4413      	add	r3, r2
 80069aa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d8d6      	bhi.n	8006960 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80069b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	18d0      	adds	r0, r2, r3
 80069ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	4413      	add	r3, r2
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	4619      	mov	r1, r3
 80069c4:	f018 f8b2 	bl	801eb2c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80069c8:	69fa      	ldr	r2, [r7, #28]
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	4413      	add	r3, r2
 80069ce:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80069d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80069d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1bb      	bne.n	8006954 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80069dc:	4b1b      	ldr	r3, [pc, #108]	; (8006a4c <low_level_input+0x164>)
 80069de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80069e2:	2300      	movs	r3, #0
 80069e4:	613b      	str	r3, [r7, #16]
 80069e6:	e00b      	b.n	8006a00 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80069e8:	6a3b      	ldr	r3, [r7, #32]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80069f0:	6a3b      	ldr	r3, [r7, #32]
 80069f2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80069f4:	6a3b      	ldr	r3, [r7, #32]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	3301      	adds	r3, #1
 80069fe:	613b      	str	r3, [r7, #16]
 8006a00:	4b12      	ldr	r3, [pc, #72]	; (8006a4c <low_level_input+0x164>)
 8006a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d3ee      	bcc.n	80069e8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8006a0a:	4b10      	ldr	r3, [pc, #64]	; (8006a4c <low_level_input+0x164>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8006a10:	4b0e      	ldr	r3, [pc, #56]	; (8006a4c <low_level_input+0x164>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a18:	3314      	adds	r3, #20
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00d      	beq.n	8006a40 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8006a24:	4b09      	ldr	r3, [pc, #36]	; (8006a4c <low_level_input+0x164>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a2c:	3314      	adds	r3, #20
 8006a2e:	2280      	movs	r2, #128	; 0x80
 8006a30:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8006a32:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <low_level_input+0x164>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a3a:	3308      	adds	r3, #8
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8006a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3730      	adds	r7, #48	; 0x30
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	20003864 	.word	0x20003864

08006a50 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006a5c:	4b12      	ldr	r3, [pc, #72]	; (8006aa8 <ethernetif_input+0x58>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f04f 31ff 	mov.w	r1, #4294967295
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 fc09 	bl	800727c <osSemaphoreAcquire>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1f5      	bne.n	8006a5c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8006a70:	480e      	ldr	r0, [pc, #56]	; (8006aac <ethernetif_input+0x5c>)
 8006a72:	f015 feab 	bl	801c7cc <sys_mutex_lock>
        p = low_level_input( netif );
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f7ff ff36 	bl	80068e8 <low_level_input>
 8006a7c:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00a      	beq.n	8006a9a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	68f9      	ldr	r1, [r7, #12]
 8006a8a:	68b8      	ldr	r0, [r7, #8]
 8006a8c:	4798      	blx	r3
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8006a94:	68b8      	ldr	r0, [r7, #8]
 8006a96:	f009 ff6b 	bl	8010970 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8006a9a:	4804      	ldr	r0, [pc, #16]	; (8006aac <ethernetif_input+0x5c>)
 8006a9c:	f015 fea5 	bl	801c7ea <sys_mutex_unlock>
      } while(p!=NULL);
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1e4      	bne.n	8006a70 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006aa6:	e7d9      	b.n	8006a5c <ethernetif_input+0xc>
 8006aa8:	20000024 	.word	0x20000024
 8006aac:	200050bc 	.word	0x200050bc

08006ab0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d106      	bne.n	8006acc <ethernetif_init+0x1c>
 8006abe:	4b0e      	ldr	r3, [pc, #56]	; (8006af8 <ethernetif_init+0x48>)
 8006ac0:	f44f 720c 	mov.w	r2, #560	; 0x230
 8006ac4:	490d      	ldr	r1, [pc, #52]	; (8006afc <ethernetif_init+0x4c>)
 8006ac6:	480e      	ldr	r0, [pc, #56]	; (8006b00 <ethernetif_init+0x50>)
 8006ac8:	f018 fece 	bl	801f868 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2273      	movs	r2, #115	; 0x73
 8006ad0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2274      	movs	r2, #116	; 0x74
 8006ad8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a09      	ldr	r2, [pc, #36]	; (8006b04 <ethernetif_init+0x54>)
 8006ae0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a08      	ldr	r2, [pc, #32]	; (8006b08 <ethernetif_init+0x58>)
 8006ae6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f7ff fd8b 	bl	8006604 <low_level_init>

  return ERR_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	08021950 	.word	0x08021950
 8006afc:	0802196c 	.word	0x0802196c
 8006b00:	0802197c 	.word	0x0802197c
 8006b04:	0801a6ed 	.word	0x0801a6ed
 8006b08:	080067ad 	.word	0x080067ad

08006b0c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006b10:	f7fb f868 	bl	8001be4 <HAL_GetTick>
 8006b14:	4603      	mov	r3, r0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	bd80      	pop	{r7, pc}
	...

08006b1c <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006b24:	2300      	movs	r3, #0
 8006b26:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006b2c:	f107 0308 	add.w	r3, r7, #8
 8006b30:	461a      	mov	r2, r3
 8006b32:	2101      	movs	r1, #1
 8006b34:	4816      	ldr	r0, [pc, #88]	; (8006b90 <ethernetif_set_link+0x74>)
 8006b36:	f7fc f942 	bl	8002dbe <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	f003 0304 	and.w	r3, r3, #4
 8006b40:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006b4a:	f003 0304 	and.w	r3, r3, #4
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d108      	bne.n	8006b64 <ethernetif_set_link+0x48>
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d005      	beq.n	8006b64 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f009 fa87 	bl	8010070 <netif_set_link_up>
 8006b62:	e011      	b.n	8006b88 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006b6c:	089b      	lsrs	r3, r3, #2
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d007      	beq.n	8006b88 <ethernetif_set_link+0x6c>
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d104      	bne.n	8006b88 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f009 faac 	bl	80100e0 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8006b88:	20c8      	movs	r0, #200	; 0xc8
 8006b8a:	f000 f9c5 	bl	8006f18 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006b8e:	e7cd      	b.n	8006b2c <ethernetif_set_link+0x10>
 8006b90:	20003864 	.word	0x20003864

08006b94 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006baa:	089b      	lsrs	r3, r3, #2
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d05d      	beq.n	8006c72 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8006bb6:	4b34      	ldr	r3, [pc, #208]	; (8006c88 <ethernetif_update_config+0xf4>)
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d03f      	beq.n	8006c3e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8006bbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	4830      	ldr	r0, [pc, #192]	; (8006c88 <ethernetif_update_config+0xf4>)
 8006bc6:	f7fc f962 	bl	8002e8e <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8006bca:	f7fb f80b 	bl	8001be4 <HAL_GetTick>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006bd2:	f107 0308 	add.w	r3, r7, #8
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	2101      	movs	r1, #1
 8006bda:	482b      	ldr	r0, [pc, #172]	; (8006c88 <ethernetif_update_config+0xf4>)
 8006bdc:	f7fc f8ef 	bl	8002dbe <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8006be0:	f7fb f800 	bl	8001be4 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bee:	d828      	bhi.n	8006c42 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	f003 0320 	and.w	r3, r3, #32
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d0eb      	beq.n	8006bd2 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8006bfa:	f107 0308 	add.w	r3, r7, #8
 8006bfe:	461a      	mov	r2, r3
 8006c00:	2110      	movs	r1, #16
 8006c02:	4821      	ldr	r0, [pc, #132]	; (8006c88 <ethernetif_update_config+0xf4>)
 8006c04:	f7fc f8db 	bl	8002dbe <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f003 0304 	and.w	r3, r3, #4
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d004      	beq.n	8006c1c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006c12:	4b1d      	ldr	r3, [pc, #116]	; (8006c88 <ethernetif_update_config+0xf4>)
 8006c14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c18:	60da      	str	r2, [r3, #12]
 8006c1a:	e002      	b.n	8006c22 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006c1c:	4b1a      	ldr	r3, [pc, #104]	; (8006c88 <ethernetif_update_config+0xf4>)
 8006c1e:	2200      	movs	r2, #0
 8006c20:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d003      	beq.n	8006c34 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8006c2c:	4b16      	ldr	r3, [pc, #88]	; (8006c88 <ethernetif_update_config+0xf4>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	609a      	str	r2, [r3, #8]
 8006c32:	e016      	b.n	8006c62 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8006c34:	4b14      	ldr	r3, [pc, #80]	; (8006c88 <ethernetif_update_config+0xf4>)
 8006c36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006c3a:	609a      	str	r2, [r3, #8]
 8006c3c:	e011      	b.n	8006c62 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8006c3e:	bf00      	nop
 8006c40:	e000      	b.n	8006c44 <ethernetif_update_config+0xb0>
          goto error;
 8006c42:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006c44:	4b10      	ldr	r3, [pc, #64]	; (8006c88 <ethernetif_update_config+0xf4>)
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	08db      	lsrs	r3, r3, #3
 8006c4a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8006c4c:	4b0e      	ldr	r3, [pc, #56]	; (8006c88 <ethernetif_update_config+0xf4>)
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	085b      	lsrs	r3, r3, #1
 8006c52:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006c54:	4313      	orrs	r3, r2
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	461a      	mov	r2, r3
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	480a      	ldr	r0, [pc, #40]	; (8006c88 <ethernetif_update_config+0xf4>)
 8006c5e:	f7fc f916 	bl	8002e8e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8006c62:	2100      	movs	r1, #0
 8006c64:	4808      	ldr	r0, [pc, #32]	; (8006c88 <ethernetif_update_config+0xf4>)
 8006c66:	f7fc f9d7 	bl	8003018 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8006c6a:	4807      	ldr	r0, [pc, #28]	; (8006c88 <ethernetif_update_config+0xf4>)
 8006c6c:	f7fc f975 	bl	8002f5a <HAL_ETH_Start>
 8006c70:	e002      	b.n	8006c78 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8006c72:	4805      	ldr	r0, [pc, #20]	; (8006c88 <ethernetif_update_config+0xf4>)
 8006c74:	f7fc f9a0 	bl	8002fb8 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f807 	bl	8006c8c <ethernetif_notify_conn_changed>
}
 8006c7e:	bf00      	nop
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	20003864 	.word	0x20003864

08006c8c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <__NVIC_SetPriority>:
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	6039      	str	r1, [r7, #0]
 8006caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	db0a      	blt.n	8006cca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	490c      	ldr	r1, [pc, #48]	; (8006cec <__NVIC_SetPriority+0x4c>)
 8006cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cbe:	0112      	lsls	r2, r2, #4
 8006cc0:	b2d2      	uxtb	r2, r2
 8006cc2:	440b      	add	r3, r1
 8006cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006cc8:	e00a      	b.n	8006ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	4908      	ldr	r1, [pc, #32]	; (8006cf0 <__NVIC_SetPriority+0x50>)
 8006cd0:	79fb      	ldrb	r3, [r7, #7]
 8006cd2:	f003 030f 	and.w	r3, r3, #15
 8006cd6:	3b04      	subs	r3, #4
 8006cd8:	0112      	lsls	r2, r2, #4
 8006cda:	b2d2      	uxtb	r2, r2
 8006cdc:	440b      	add	r3, r1
 8006cde:	761a      	strb	r2, [r3, #24]
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	e000e100 	.word	0xe000e100
 8006cf0:	e000ed00 	.word	0xe000ed00

08006cf4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006cf8:	4b05      	ldr	r3, [pc, #20]	; (8006d10 <SysTick_Handler+0x1c>)
 8006cfa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006cfc:	f002 fdc2 	bl	8009884 <xTaskGetSchedulerState>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d001      	beq.n	8006d0a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006d06:	f003 fca7 	bl	800a658 <xPortSysTickHandler>
  }
}
 8006d0a:	bf00      	nop
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	e000e010 	.word	0xe000e010

08006d14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006d14:	b580      	push	{r7, lr}
 8006d16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006d18:	2100      	movs	r1, #0
 8006d1a:	f06f 0004 	mvn.w	r0, #4
 8006d1e:	f7ff ffbf 	bl	8006ca0 <__NVIC_SetPriority>
#endif
}
 8006d22:	bf00      	nop
 8006d24:	bd80      	pop	{r7, pc}
	...

08006d28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d2e:	f3ef 8305 	mrs	r3, IPSR
 8006d32:	603b      	str	r3, [r7, #0]
  return(result);
 8006d34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006d3a:	f06f 0305 	mvn.w	r3, #5
 8006d3e:	607b      	str	r3, [r7, #4]
 8006d40:	e00c      	b.n	8006d5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006d42:	4b0a      	ldr	r3, [pc, #40]	; (8006d6c <osKernelInitialize+0x44>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d105      	bne.n	8006d56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006d4a:	4b08      	ldr	r3, [pc, #32]	; (8006d6c <osKernelInitialize+0x44>)
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006d50:	2300      	movs	r3, #0
 8006d52:	607b      	str	r3, [r7, #4]
 8006d54:	e002      	b.n	8006d5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006d56:	f04f 33ff 	mov.w	r3, #4294967295
 8006d5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d5c:	687b      	ldr	r3, [r7, #4]
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	20000028 	.word	0x20000028

08006d70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d76:	f3ef 8305 	mrs	r3, IPSR
 8006d7a:	603b      	str	r3, [r7, #0]
  return(result);
 8006d7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d003      	beq.n	8006d8a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006d82:	f06f 0305 	mvn.w	r3, #5
 8006d86:	607b      	str	r3, [r7, #4]
 8006d88:	e010      	b.n	8006dac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006d8a:	4b0b      	ldr	r3, [pc, #44]	; (8006db8 <osKernelStart+0x48>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d109      	bne.n	8006da6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006d92:	f7ff ffbf 	bl	8006d14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006d96:	4b08      	ldr	r3, [pc, #32]	; (8006db8 <osKernelStart+0x48>)
 8006d98:	2202      	movs	r2, #2
 8006d9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006d9c:	f002 f8e4 	bl	8008f68 <vTaskStartScheduler>
      stat = osOK;
 8006da0:	2300      	movs	r3, #0
 8006da2:	607b      	str	r3, [r7, #4]
 8006da4:	e002      	b.n	8006dac <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006da6:	f04f 33ff 	mov.w	r3, #4294967295
 8006daa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006dac:	687b      	ldr	r3, [r7, #4]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	20000028 	.word	0x20000028

08006dbc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dc2:	f3ef 8305 	mrs	r3, IPSR
 8006dc6:	603b      	str	r3, [r7, #0]
  return(result);
 8006dc8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8006dce:	f002 f9f7 	bl	80091c0 <xTaskGetTickCountFromISR>
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	e002      	b.n	8006ddc <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8006dd6:	f002 f9e3 	bl	80091a0 <xTaskGetTickCount>
 8006dda:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8006ddc:	687b      	ldr	r3, [r7, #4]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b08e      	sub	sp, #56	; 0x38
 8006dea:	af04      	add	r7, sp, #16
 8006dec:	60f8      	str	r0, [r7, #12]
 8006dee:	60b9      	str	r1, [r7, #8]
 8006df0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006df2:	2300      	movs	r3, #0
 8006df4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006df6:	f3ef 8305 	mrs	r3, IPSR
 8006dfa:	617b      	str	r3, [r7, #20]
  return(result);
 8006dfc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d17f      	bne.n	8006f02 <osThreadNew+0x11c>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d07c      	beq.n	8006f02 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8006e08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006e0e:	2318      	movs	r3, #24
 8006e10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006e12:	2300      	movs	r3, #0
 8006e14:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006e16:	f04f 33ff 	mov.w	r3, #4294967295
 8006e1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d045      	beq.n	8006eae <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d002      	beq.n	8006e30 <osThreadNew+0x4a>
        name = attr->name;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d008      	beq.n	8006e56 <osThreadNew+0x70>
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	2b38      	cmp	r3, #56	; 0x38
 8006e48:	d805      	bhi.n	8006e56 <osThreadNew+0x70>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d001      	beq.n	8006e5a <osThreadNew+0x74>
        return (NULL);
 8006e56:	2300      	movs	r3, #0
 8006e58:	e054      	b.n	8006f04 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	089b      	lsrs	r3, r3, #2
 8006e68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00e      	beq.n	8006e90 <osThreadNew+0xaa>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	2bbb      	cmp	r3, #187	; 0xbb
 8006e78:	d90a      	bls.n	8006e90 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d006      	beq.n	8006e90 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d002      	beq.n	8006e90 <osThreadNew+0xaa>
        mem = 1;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	61bb      	str	r3, [r7, #24]
 8006e8e:	e010      	b.n	8006eb2 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10c      	bne.n	8006eb2 <osThreadNew+0xcc>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d108      	bne.n	8006eb2 <osThreadNew+0xcc>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d104      	bne.n	8006eb2 <osThreadNew+0xcc>
          mem = 0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	61bb      	str	r3, [r7, #24]
 8006eac:	e001      	b.n	8006eb2 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d110      	bne.n	8006eda <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ec0:	9202      	str	r2, [sp, #8]
 8006ec2:	9301      	str	r3, [sp, #4]
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	6a3a      	ldr	r2, [r7, #32]
 8006ecc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f001 fdec 	bl	8008aac <xTaskCreateStatic>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	613b      	str	r3, [r7, #16]
 8006ed8:	e013      	b.n	8006f02 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d110      	bne.n	8006f02 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	f107 0310 	add.w	r3, r7, #16
 8006ee8:	9301      	str	r3, [sp, #4]
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f001 fe37 	bl	8008b66 <xTaskCreate>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d001      	beq.n	8006f02 <osThreadNew+0x11c>
            hTask = NULL;
 8006efe:	2300      	movs	r3, #0
 8006f00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006f02:	693b      	ldr	r3, [r7, #16]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3728      	adds	r7, #40	; 0x28
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8006f10:	2000      	movs	r0, #0
 8006f12:	f001 ff83 	bl	8008e1c <vTaskDelete>
#endif
  for (;;);
 8006f16:	e7fe      	b.n	8006f16 <osThreadExit+0xa>

08006f18 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f20:	f3ef 8305 	mrs	r3, IPSR
 8006f24:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f26:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d003      	beq.n	8006f34 <osDelay+0x1c>
    stat = osErrorISR;
 8006f2c:	f06f 0305 	mvn.w	r3, #5
 8006f30:	60fb      	str	r3, [r7, #12]
 8006f32:	e007      	b.n	8006f44 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006f34:	2300      	movs	r3, #0
 8006f36:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d002      	beq.n	8006f44 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f001 ffde 	bl	8008f00 <vTaskDelay>
    }
  }

  return (stat);
 8006f44:	68fb      	ldr	r3, [r7, #12]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b088      	sub	sp, #32
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006f56:	2300      	movs	r3, #0
 8006f58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f5a:	f3ef 8305 	mrs	r3, IPSR
 8006f5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f60:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d174      	bne.n	8007050 <osMutexNew+0x102>
    if (attr != NULL) {
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <osMutexNew+0x26>
      type = attr->attr_bits;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	61bb      	str	r3, [r7, #24]
 8006f72:	e001      	b.n	8006f78 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006f74:	2300      	movs	r3, #0
 8006f76:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d002      	beq.n	8006f88 <osMutexNew+0x3a>
      rmtx = 1U;
 8006f82:	2301      	movs	r3, #1
 8006f84:	617b      	str	r3, [r7, #20]
 8006f86:	e001      	b.n	8006f8c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	f003 0308 	and.w	r3, r3, #8
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d15c      	bne.n	8007050 <osMutexNew+0x102>
      mem = -1;
 8006f96:	f04f 33ff 	mov.w	r3, #4294967295
 8006f9a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d015      	beq.n	8006fce <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d006      	beq.n	8006fb8 <osMutexNew+0x6a>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	2b4f      	cmp	r3, #79	; 0x4f
 8006fb0:	d902      	bls.n	8006fb8 <osMutexNew+0x6a>
          mem = 1;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	613b      	str	r3, [r7, #16]
 8006fb6:	e00c      	b.n	8006fd2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d108      	bne.n	8006fd2 <osMutexNew+0x84>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d104      	bne.n	8006fd2 <osMutexNew+0x84>
            mem = 0;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	613b      	str	r3, [r7, #16]
 8006fcc:	e001      	b.n	8006fd2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d112      	bne.n	8006ffe <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d007      	beq.n	8006fee <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	2004      	movs	r0, #4
 8006fe6:	f000 fdd0 	bl	8007b8a <xQueueCreateMutexStatic>
 8006fea:	61f8      	str	r0, [r7, #28]
 8006fec:	e016      	b.n	800701c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	2001      	movs	r0, #1
 8006ff6:	f000 fdc8 	bl	8007b8a <xQueueCreateMutexStatic>
 8006ffa:	61f8      	str	r0, [r7, #28]
 8006ffc:	e00e      	b.n	800701c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10b      	bne.n	800701c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d004      	beq.n	8007014 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800700a:	2004      	movs	r0, #4
 800700c:	f000 fda5 	bl	8007b5a <xQueueCreateMutex>
 8007010:	61f8      	str	r0, [r7, #28]
 8007012:	e003      	b.n	800701c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007014:	2001      	movs	r0, #1
 8007016:	f000 fda0 	bl	8007b5a <xQueueCreateMutex>
 800701a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00c      	beq.n	800703c <osMutexNew+0xee>
        if (attr != NULL) {
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d003      	beq.n	8007030 <osMutexNew+0xe2>
          name = attr->name;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	e001      	b.n	8007034 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007030:	2300      	movs	r3, #0
 8007032:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007034:	68f9      	ldr	r1, [r7, #12]
 8007036:	69f8      	ldr	r0, [r7, #28]
 8007038:	f001 fcb0 	bl	800899c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d006      	beq.n	8007050 <osMutexNew+0x102>
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d003      	beq.n	8007050 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	f043 0301 	orr.w	r3, r3, #1
 800704e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007050:	69fb      	ldr	r3, [r7, #28]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3720      	adds	r7, #32
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800705a:	b580      	push	{r7, lr}
 800705c:	b086      	sub	sp, #24
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f023 0301 	bic.w	r3, r3, #1
 800706a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007074:	2300      	movs	r3, #0
 8007076:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007078:	f3ef 8305 	mrs	r3, IPSR
 800707c:	60bb      	str	r3, [r7, #8]
  return(result);
 800707e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007080:	2b00      	cmp	r3, #0
 8007082:	d003      	beq.n	800708c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007084:	f06f 0305 	mvn.w	r3, #5
 8007088:	617b      	str	r3, [r7, #20]
 800708a:	e02c      	b.n	80070e6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d103      	bne.n	800709a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007092:	f06f 0303 	mvn.w	r3, #3
 8007096:	617b      	str	r3, [r7, #20]
 8007098:	e025      	b.n	80070e6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d011      	beq.n	80070c4 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80070a0:	6839      	ldr	r1, [r7, #0]
 80070a2:	6938      	ldr	r0, [r7, #16]
 80070a4:	f000 fdc0 	bl	8007c28 <xQueueTakeMutexRecursive>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d01b      	beq.n	80070e6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d003      	beq.n	80070bc <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80070b4:	f06f 0301 	mvn.w	r3, #1
 80070b8:	617b      	str	r3, [r7, #20]
 80070ba:	e014      	b.n	80070e6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80070bc:	f06f 0302 	mvn.w	r3, #2
 80070c0:	617b      	str	r3, [r7, #20]
 80070c2:	e010      	b.n	80070e6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80070c4:	6839      	ldr	r1, [r7, #0]
 80070c6:	6938      	ldr	r0, [r7, #16]
 80070c8:	f001 f954 	bl	8008374 <xQueueSemaphoreTake>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d009      	beq.n	80070e6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80070d8:	f06f 0301 	mvn.w	r3, #1
 80070dc:	617b      	str	r3, [r7, #20]
 80070de:	e002      	b.n	80070e6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80070e0:	f06f 0302 	mvn.w	r3, #2
 80070e4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80070e6:	697b      	ldr	r3, [r7, #20]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3718      	adds	r7, #24
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f023 0301 	bic.w	r3, r3, #1
 80070fe:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007108:	2300      	movs	r3, #0
 800710a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800710c:	f3ef 8305 	mrs	r3, IPSR
 8007110:	60bb      	str	r3, [r7, #8]
  return(result);
 8007112:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007114:	2b00      	cmp	r3, #0
 8007116:	d003      	beq.n	8007120 <osMutexRelease+0x30>
    stat = osErrorISR;
 8007118:	f06f 0305 	mvn.w	r3, #5
 800711c:	617b      	str	r3, [r7, #20]
 800711e:	e01f      	b.n	8007160 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d103      	bne.n	800712e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007126:	f06f 0303 	mvn.w	r3, #3
 800712a:	617b      	str	r3, [r7, #20]
 800712c:	e018      	b.n	8007160 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d009      	beq.n	8007148 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007134:	6938      	ldr	r0, [r7, #16]
 8007136:	f000 fd43 	bl	8007bc0 <xQueueGiveMutexRecursive>
 800713a:	4603      	mov	r3, r0
 800713c:	2b01      	cmp	r3, #1
 800713e:	d00f      	beq.n	8007160 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007140:	f06f 0302 	mvn.w	r3, #2
 8007144:	617b      	str	r3, [r7, #20]
 8007146:	e00b      	b.n	8007160 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007148:	2300      	movs	r3, #0
 800714a:	2200      	movs	r2, #0
 800714c:	2100      	movs	r1, #0
 800714e:	6938      	ldr	r0, [r7, #16]
 8007150:	f000 fe0a 	bl	8007d68 <xQueueGenericSend>
 8007154:	4603      	mov	r3, r0
 8007156:	2b01      	cmp	r3, #1
 8007158:	d002      	beq.n	8007160 <osMutexRelease+0x70>
        stat = osErrorResource;
 800715a:	f06f 0302 	mvn.w	r3, #2
 800715e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007160:	697b      	ldr	r3, [r7, #20]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800716a:	b580      	push	{r7, lr}
 800716c:	b08a      	sub	sp, #40	; 0x28
 800716e:	af02      	add	r7, sp, #8
 8007170:	60f8      	str	r0, [r7, #12]
 8007172:	60b9      	str	r1, [r7, #8]
 8007174:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007176:	2300      	movs	r3, #0
 8007178:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800717a:	f3ef 8305 	mrs	r3, IPSR
 800717e:	613b      	str	r3, [r7, #16]
  return(result);
 8007180:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007182:	2b00      	cmp	r3, #0
 8007184:	d175      	bne.n	8007272 <osSemaphoreNew+0x108>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d072      	beq.n	8007272 <osSemaphoreNew+0x108>
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	429a      	cmp	r2, r3
 8007192:	d86e      	bhi.n	8007272 <osSemaphoreNew+0x108>
    mem = -1;
 8007194:	f04f 33ff 	mov.w	r3, #4294967295
 8007198:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d015      	beq.n	80071cc <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d006      	beq.n	80071b6 <osSemaphoreNew+0x4c>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	2b4f      	cmp	r3, #79	; 0x4f
 80071ae:	d902      	bls.n	80071b6 <osSemaphoreNew+0x4c>
        mem = 1;
 80071b0:	2301      	movs	r3, #1
 80071b2:	61bb      	str	r3, [r7, #24]
 80071b4:	e00c      	b.n	80071d0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d108      	bne.n	80071d0 <osSemaphoreNew+0x66>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d104      	bne.n	80071d0 <osSemaphoreNew+0x66>
          mem = 0;
 80071c6:	2300      	movs	r3, #0
 80071c8:	61bb      	str	r3, [r7, #24]
 80071ca:	e001      	b.n	80071d0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80071cc:	2300      	movs	r3, #0
 80071ce:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d6:	d04c      	beq.n	8007272 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d128      	bne.n	8007230 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d10a      	bne.n	80071fa <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	2203      	movs	r2, #3
 80071ea:	9200      	str	r2, [sp, #0]
 80071ec:	2200      	movs	r2, #0
 80071ee:	2100      	movs	r1, #0
 80071f0:	2001      	movs	r0, #1
 80071f2:	f000 fbc3 	bl	800797c <xQueueGenericCreateStatic>
 80071f6:	61f8      	str	r0, [r7, #28]
 80071f8:	e005      	b.n	8007206 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80071fa:	2203      	movs	r2, #3
 80071fc:	2100      	movs	r1, #0
 80071fe:	2001      	movs	r0, #1
 8007200:	f000 fc34 	bl	8007a6c <xQueueGenericCreate>
 8007204:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d022      	beq.n	8007252 <osSemaphoreNew+0xe8>
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d01f      	beq.n	8007252 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007212:	2300      	movs	r3, #0
 8007214:	2200      	movs	r2, #0
 8007216:	2100      	movs	r1, #0
 8007218:	69f8      	ldr	r0, [r7, #28]
 800721a:	f000 fda5 	bl	8007d68 <xQueueGenericSend>
 800721e:	4603      	mov	r3, r0
 8007220:	2b01      	cmp	r3, #1
 8007222:	d016      	beq.n	8007252 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007224:	69f8      	ldr	r0, [r7, #28]
 8007226:	f001 fa6d 	bl	8008704 <vQueueDelete>
            hSemaphore = NULL;
 800722a:	2300      	movs	r3, #0
 800722c:	61fb      	str	r3, [r7, #28]
 800722e:	e010      	b.n	8007252 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d108      	bne.n	8007248 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	461a      	mov	r2, r3
 800723c:	68b9      	ldr	r1, [r7, #8]
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f000 fd28 	bl	8007c94 <xQueueCreateCountingSemaphoreStatic>
 8007244:	61f8      	str	r0, [r7, #28]
 8007246:	e004      	b.n	8007252 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007248:	68b9      	ldr	r1, [r7, #8]
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f000 fd59 	bl	8007d02 <xQueueCreateCountingSemaphore>
 8007250:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00c      	beq.n	8007272 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <osSemaphoreNew+0xfc>
          name = attr->name;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	617b      	str	r3, [r7, #20]
 8007264:	e001      	b.n	800726a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007266:	2300      	movs	r3, #0
 8007268:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800726a:	6979      	ldr	r1, [r7, #20]
 800726c:	69f8      	ldr	r0, [r7, #28]
 800726e:	f001 fb95 	bl	800899c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007272:	69fb      	ldr	r3, [r7, #28]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3720      	adds	r7, #32
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800728a:	2300      	movs	r3, #0
 800728c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d103      	bne.n	800729c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007294:	f06f 0303 	mvn.w	r3, #3
 8007298:	617b      	str	r3, [r7, #20]
 800729a:	e039      	b.n	8007310 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800729c:	f3ef 8305 	mrs	r3, IPSR
 80072a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80072a2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d022      	beq.n	80072ee <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80072ae:	f06f 0303 	mvn.w	r3, #3
 80072b2:	617b      	str	r3, [r7, #20]
 80072b4:	e02c      	b.n	8007310 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80072b6:	2300      	movs	r3, #0
 80072b8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80072ba:	f107 0308 	add.w	r3, r7, #8
 80072be:	461a      	mov	r2, r3
 80072c0:	2100      	movs	r1, #0
 80072c2:	6938      	ldr	r0, [r7, #16]
 80072c4:	f001 f962 	bl	800858c <xQueueReceiveFromISR>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d003      	beq.n	80072d6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80072ce:	f06f 0302 	mvn.w	r3, #2
 80072d2:	617b      	str	r3, [r7, #20]
 80072d4:	e01c      	b.n	8007310 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d019      	beq.n	8007310 <osSemaphoreAcquire+0x94>
 80072dc:	4b0f      	ldr	r3, [pc, #60]	; (800731c <osSemaphoreAcquire+0xa0>)
 80072de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072e2:	601a      	str	r2, [r3, #0]
 80072e4:	f3bf 8f4f 	dsb	sy
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	e010      	b.n	8007310 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	6938      	ldr	r0, [r7, #16]
 80072f2:	f001 f83f 	bl	8008374 <xQueueSemaphoreTake>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d009      	beq.n	8007310 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8007302:	f06f 0301 	mvn.w	r3, #1
 8007306:	617b      	str	r3, [r7, #20]
 8007308:	e002      	b.n	8007310 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800730a:	f06f 0302 	mvn.w	r3, #2
 800730e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007310:	697b      	ldr	r3, [r7, #20]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3718      	adds	r7, #24
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	e000ed04 	.word	0xe000ed04

08007320 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800732c:	2300      	movs	r3, #0
 800732e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d103      	bne.n	800733e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007336:	f06f 0303 	mvn.w	r3, #3
 800733a:	617b      	str	r3, [r7, #20]
 800733c:	e02c      	b.n	8007398 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800733e:	f3ef 8305 	mrs	r3, IPSR
 8007342:	60fb      	str	r3, [r7, #12]
  return(result);
 8007344:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007346:	2b00      	cmp	r3, #0
 8007348:	d01a      	beq.n	8007380 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800734a:	2300      	movs	r3, #0
 800734c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800734e:	f107 0308 	add.w	r3, r7, #8
 8007352:	4619      	mov	r1, r3
 8007354:	6938      	ldr	r0, [r7, #16]
 8007356:	f000 fea0 	bl	800809a <xQueueGiveFromISR>
 800735a:	4603      	mov	r3, r0
 800735c:	2b01      	cmp	r3, #1
 800735e:	d003      	beq.n	8007368 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8007360:	f06f 0302 	mvn.w	r3, #2
 8007364:	617b      	str	r3, [r7, #20]
 8007366:	e017      	b.n	8007398 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d014      	beq.n	8007398 <osSemaphoreRelease+0x78>
 800736e:	4b0d      	ldr	r3, [pc, #52]	; (80073a4 <osSemaphoreRelease+0x84>)
 8007370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007374:	601a      	str	r2, [r3, #0]
 8007376:	f3bf 8f4f 	dsb	sy
 800737a:	f3bf 8f6f 	isb	sy
 800737e:	e00b      	b.n	8007398 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007380:	2300      	movs	r3, #0
 8007382:	2200      	movs	r2, #0
 8007384:	2100      	movs	r1, #0
 8007386:	6938      	ldr	r0, [r7, #16]
 8007388:	f000 fcee 	bl	8007d68 <xQueueGenericSend>
 800738c:	4603      	mov	r3, r0
 800738e:	2b01      	cmp	r3, #1
 8007390:	d002      	beq.n	8007398 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8007392:	f06f 0302 	mvn.w	r3, #2
 8007396:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007398:	697b      	ldr	r3, [r7, #20]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3718      	adds	r7, #24
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	e000ed04 	.word	0xe000ed04

080073a8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073b4:	f3ef 8305 	mrs	r3, IPSR
 80073b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80073ba:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d003      	beq.n	80073c8 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 80073c0:	f06f 0305 	mvn.w	r3, #5
 80073c4:	617b      	str	r3, [r7, #20]
 80073c6:	e00e      	b.n	80073e6 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d103      	bne.n	80073d6 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 80073ce:	f06f 0303 	mvn.w	r3, #3
 80073d2:	617b      	str	r3, [r7, #20]
 80073d4:	e007      	b.n	80073e6 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80073d6:	6938      	ldr	r0, [r7, #16]
 80073d8:	f001 fb0a 	bl	80089f0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80073dc:	2300      	movs	r3, #0
 80073de:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 80073e0:	6938      	ldr	r0, [r7, #16]
 80073e2:	f001 f98f 	bl	8008704 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80073e6:	697b      	ldr	r3, [r7, #20]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3718      	adds	r7, #24
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b08a      	sub	sp, #40	; 0x28
 80073f4:	af02      	add	r7, sp, #8
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80073fc:	2300      	movs	r3, #0
 80073fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007400:	f3ef 8305 	mrs	r3, IPSR
 8007404:	613b      	str	r3, [r7, #16]
  return(result);
 8007406:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007408:	2b00      	cmp	r3, #0
 800740a:	d15f      	bne.n	80074cc <osMessageQueueNew+0xdc>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d05c      	beq.n	80074cc <osMessageQueueNew+0xdc>
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d059      	beq.n	80074cc <osMessageQueueNew+0xdc>
    mem = -1;
 8007418:	f04f 33ff 	mov.w	r3, #4294967295
 800741c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d029      	beq.n	8007478 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d012      	beq.n	8007452 <osMessageQueueNew+0x62>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	2b4f      	cmp	r3, #79	; 0x4f
 8007432:	d90e      	bls.n	8007452 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00a      	beq.n	8007452 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	695a      	ldr	r2, [r3, #20]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	68b9      	ldr	r1, [r7, #8]
 8007444:	fb01 f303 	mul.w	r3, r1, r3
 8007448:	429a      	cmp	r2, r3
 800744a:	d302      	bcc.n	8007452 <osMessageQueueNew+0x62>
        mem = 1;
 800744c:	2301      	movs	r3, #1
 800744e:	61bb      	str	r3, [r7, #24]
 8007450:	e014      	b.n	800747c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d110      	bne.n	800747c <osMessageQueueNew+0x8c>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10c      	bne.n	800747c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007466:	2b00      	cmp	r3, #0
 8007468:	d108      	bne.n	800747c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d104      	bne.n	800747c <osMessageQueueNew+0x8c>
          mem = 0;
 8007472:	2300      	movs	r3, #0
 8007474:	61bb      	str	r3, [r7, #24]
 8007476:	e001      	b.n	800747c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007478:	2300      	movs	r3, #0
 800747a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d10b      	bne.n	800749a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	691a      	ldr	r2, [r3, #16]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	2100      	movs	r1, #0
 800748c:	9100      	str	r1, [sp, #0]
 800748e:	68b9      	ldr	r1, [r7, #8]
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f000 fa73 	bl	800797c <xQueueGenericCreateStatic>
 8007496:	61f8      	str	r0, [r7, #28]
 8007498:	e008      	b.n	80074ac <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d105      	bne.n	80074ac <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80074a0:	2200      	movs	r2, #0
 80074a2:	68b9      	ldr	r1, [r7, #8]
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f000 fae1 	bl	8007a6c <xQueueGenericCreate>
 80074aa:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00c      	beq.n	80074cc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d003      	beq.n	80074c0 <osMessageQueueNew+0xd0>
        name = attr->name;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	617b      	str	r3, [r7, #20]
 80074be:	e001      	b.n	80074c4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80074c0:	2300      	movs	r3, #0
 80074c2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80074c4:	6979      	ldr	r1, [r7, #20]
 80074c6:	69f8      	ldr	r0, [r7, #28]
 80074c8:	f001 fa68 	bl	800899c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80074cc:	69fb      	ldr	r3, [r7, #28]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3720      	adds	r7, #32
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80074d8:	b580      	push	{r7, lr}
 80074da:	b088      	sub	sp, #32
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	603b      	str	r3, [r7, #0]
 80074e4:	4613      	mov	r3, r2
 80074e6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80074ec:	2300      	movs	r3, #0
 80074ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074f0:	f3ef 8305 	mrs	r3, IPSR
 80074f4:	617b      	str	r3, [r7, #20]
  return(result);
 80074f6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d028      	beq.n	800754e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d005      	beq.n	800750e <osMessageQueuePut+0x36>
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d002      	beq.n	800750e <osMessageQueuePut+0x36>
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d003      	beq.n	8007516 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800750e:	f06f 0303 	mvn.w	r3, #3
 8007512:	61fb      	str	r3, [r7, #28]
 8007514:	e038      	b.n	8007588 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007516:	2300      	movs	r3, #0
 8007518:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800751a:	f107 0210 	add.w	r2, r7, #16
 800751e:	2300      	movs	r3, #0
 8007520:	68b9      	ldr	r1, [r7, #8]
 8007522:	69b8      	ldr	r0, [r7, #24]
 8007524:	f000 fd1e 	bl	8007f64 <xQueueGenericSendFromISR>
 8007528:	4603      	mov	r3, r0
 800752a:	2b01      	cmp	r3, #1
 800752c:	d003      	beq.n	8007536 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800752e:	f06f 0302 	mvn.w	r3, #2
 8007532:	61fb      	str	r3, [r7, #28]
 8007534:	e028      	b.n	8007588 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d025      	beq.n	8007588 <osMessageQueuePut+0xb0>
 800753c:	4b15      	ldr	r3, [pc, #84]	; (8007594 <osMessageQueuePut+0xbc>)
 800753e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007542:	601a      	str	r2, [r3, #0]
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	f3bf 8f6f 	isb	sy
 800754c:	e01c      	b.n	8007588 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d002      	beq.n	800755a <osMessageQueuePut+0x82>
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d103      	bne.n	8007562 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800755a:	f06f 0303 	mvn.w	r3, #3
 800755e:	61fb      	str	r3, [r7, #28]
 8007560:	e012      	b.n	8007588 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007562:	2300      	movs	r3, #0
 8007564:	683a      	ldr	r2, [r7, #0]
 8007566:	68b9      	ldr	r1, [r7, #8]
 8007568:	69b8      	ldr	r0, [r7, #24]
 800756a:	f000 fbfd 	bl	8007d68 <xQueueGenericSend>
 800756e:	4603      	mov	r3, r0
 8007570:	2b01      	cmp	r3, #1
 8007572:	d009      	beq.n	8007588 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800757a:	f06f 0301 	mvn.w	r3, #1
 800757e:	61fb      	str	r3, [r7, #28]
 8007580:	e002      	b.n	8007588 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007582:	f06f 0302 	mvn.w	r3, #2
 8007586:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007588:	69fb      	ldr	r3, [r7, #28]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3720      	adds	r7, #32
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	e000ed04 	.word	0xe000ed04

08007598 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007598:	b580      	push	{r7, lr}
 800759a:	b088      	sub	sp, #32
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
 80075a4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80075aa:	2300      	movs	r3, #0
 80075ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075ae:	f3ef 8305 	mrs	r3, IPSR
 80075b2:	617b      	str	r3, [r7, #20]
  return(result);
 80075b4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d028      	beq.n	800760c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d005      	beq.n	80075cc <osMessageQueueGet+0x34>
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d002      	beq.n	80075cc <osMessageQueueGet+0x34>
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80075cc:	f06f 0303 	mvn.w	r3, #3
 80075d0:	61fb      	str	r3, [r7, #28]
 80075d2:	e037      	b.n	8007644 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80075d4:	2300      	movs	r3, #0
 80075d6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80075d8:	f107 0310 	add.w	r3, r7, #16
 80075dc:	461a      	mov	r2, r3
 80075de:	68b9      	ldr	r1, [r7, #8]
 80075e0:	69b8      	ldr	r0, [r7, #24]
 80075e2:	f000 ffd3 	bl	800858c <xQueueReceiveFromISR>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d003      	beq.n	80075f4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80075ec:	f06f 0302 	mvn.w	r3, #2
 80075f0:	61fb      	str	r3, [r7, #28]
 80075f2:	e027      	b.n	8007644 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d024      	beq.n	8007644 <osMessageQueueGet+0xac>
 80075fa:	4b15      	ldr	r3, [pc, #84]	; (8007650 <osMessageQueueGet+0xb8>)
 80075fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	f3bf 8f4f 	dsb	sy
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	e01b      	b.n	8007644 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d002      	beq.n	8007618 <osMessageQueueGet+0x80>
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d103      	bne.n	8007620 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007618:	f06f 0303 	mvn.w	r3, #3
 800761c:	61fb      	str	r3, [r7, #28]
 800761e:	e011      	b.n	8007644 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007620:	683a      	ldr	r2, [r7, #0]
 8007622:	68b9      	ldr	r1, [r7, #8]
 8007624:	69b8      	ldr	r0, [r7, #24]
 8007626:	f000 fdc5 	bl	80081b4 <xQueueReceive>
 800762a:	4603      	mov	r3, r0
 800762c:	2b01      	cmp	r3, #1
 800762e:	d009      	beq.n	8007644 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d003      	beq.n	800763e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007636:	f06f 0301 	mvn.w	r3, #1
 800763a:	61fb      	str	r3, [r7, #28]
 800763c:	e002      	b.n	8007644 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800763e:	f06f 0302 	mvn.w	r3, #2
 8007642:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007644:	69fb      	ldr	r3, [r7, #28]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3720      	adds	r7, #32
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	e000ed04 	.word	0xe000ed04

08007654 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d102      	bne.n	800766c <osMessageQueueGetCount+0x18>
    count = 0U;
 8007666:	2300      	movs	r3, #0
 8007668:	617b      	str	r3, [r7, #20]
 800766a:	e00e      	b.n	800768a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800766c:	f3ef 8305 	mrs	r3, IPSR
 8007670:	60fb      	str	r3, [r7, #12]
  return(result);
 8007672:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007674:	2b00      	cmp	r3, #0
 8007676:	d004      	beq.n	8007682 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8007678:	6938      	ldr	r0, [r7, #16]
 800767a:	f001 f825 	bl	80086c8 <uxQueueMessagesWaitingFromISR>
 800767e:	6178      	str	r0, [r7, #20]
 8007680:	e003      	b.n	800768a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8007682:	6938      	ldr	r0, [r7, #16]
 8007684:	f001 f802 	bl	800868c <uxQueueMessagesWaiting>
 8007688:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800768a:	697b      	ldr	r3, [r7, #20]
}
 800768c:	4618      	mov	r0, r3
 800768e:	3718      	adds	r7, #24
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076a0:	f3ef 8305 	mrs	r3, IPSR
 80076a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80076a6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d003      	beq.n	80076b4 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 80076ac:	f06f 0305 	mvn.w	r3, #5
 80076b0:	617b      	str	r3, [r7, #20]
 80076b2:	e00e      	b.n	80076d2 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d103      	bne.n	80076c2 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 80076ba:	f06f 0303 	mvn.w	r3, #3
 80076be:	617b      	str	r3, [r7, #20]
 80076c0:	e007      	b.n	80076d2 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 80076c2:	6938      	ldr	r0, [r7, #16]
 80076c4:	f001 f994 	bl	80089f0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80076c8:	2300      	movs	r3, #0
 80076ca:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 80076cc:	6938      	ldr	r0, [r7, #16]
 80076ce:	f001 f819 	bl	8008704 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80076d2:	697b      	ldr	r3, [r7, #20]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3718      	adds	r7, #24
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	4a07      	ldr	r2, [pc, #28]	; (8007708 <vApplicationGetIdleTaskMemory+0x2c>)
 80076ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	4a06      	ldr	r2, [pc, #24]	; (800770c <vApplicationGetIdleTaskMemory+0x30>)
 80076f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076fa:	601a      	str	r2, [r3, #0]
}
 80076fc:	bf00      	nop
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	2000002c 	.word	0x2000002c
 800770c:	200000e8 	.word	0x200000e8

08007710 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4a07      	ldr	r2, [pc, #28]	; (800773c <vApplicationGetTimerTaskMemory+0x2c>)
 8007720:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	4a06      	ldr	r2, [pc, #24]	; (8007740 <vApplicationGetTimerTaskMemory+0x30>)
 8007726:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800772e:	601a      	str	r2, [r3, #0]
}
 8007730:	bf00      	nop
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	200004e8 	.word	0x200004e8
 8007740:	200005a4 	.word	0x200005a4

08007744 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f103 0208 	add.w	r2, r3, #8
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f04f 32ff 	mov.w	r2, #4294967295
 800775c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f103 0208 	add.w	r2, r3, #8
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f103 0208 	add.w	r2, r3, #8
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007792:	bf00      	nop
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800779e:	b480      	push	{r7}
 80077a0:	b085      	sub	sp, #20
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
 80077a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	689a      	ldr	r2, [r3, #8]
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	683a      	ldr	r2, [r7, #0]
 80077c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	683a      	ldr	r2, [r7, #0]
 80077c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	1c5a      	adds	r2, r3, #1
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	601a      	str	r2, [r3, #0]
}
 80077da:	bf00      	nop
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077e6:	b480      	push	{r7}
 80077e8:	b085      	sub	sp, #20
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077fc:	d103      	bne.n	8007806 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	e00c      	b.n	8007820 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	3308      	adds	r3, #8
 800780a:	60fb      	str	r3, [r7, #12]
 800780c:	e002      	b.n	8007814 <vListInsert+0x2e>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	60fb      	str	r3, [r7, #12]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	429a      	cmp	r2, r3
 800781e:	d2f6      	bcs.n	800780e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	685a      	ldr	r2, [r3, #4]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	1c5a      	adds	r2, r3, #1
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	601a      	str	r2, [r3, #0]
}
 800784c:	bf00      	nop
 800784e:	3714      	adds	r7, #20
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	6892      	ldr	r2, [r2, #8]
 800786e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	6852      	ldr	r2, [r2, #4]
 8007878:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	429a      	cmp	r2, r3
 8007882:	d103      	bne.n	800788c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	689a      	ldr	r2, [r3, #8]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	1e5a      	subs	r2, r3, #1
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10a      	bne.n	80078d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80078d2:	bf00      	nop
 80078d4:	e7fe      	b.n	80078d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80078d6:	f002 fe2d 	bl	800a534 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078e2:	68f9      	ldr	r1, [r7, #12]
 80078e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80078e6:	fb01 f303 	mul.w	r3, r1, r3
 80078ea:	441a      	add	r2, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007906:	3b01      	subs	r3, #1
 8007908:	68f9      	ldr	r1, [r7, #12]
 800790a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800790c:	fb01 f303 	mul.w	r3, r1, r3
 8007910:	441a      	add	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	22ff      	movs	r2, #255	; 0xff
 800791a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	22ff      	movs	r2, #255	; 0xff
 8007922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d114      	bne.n	8007956 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d01a      	beq.n	800796a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	3310      	adds	r3, #16
 8007938:	4618      	mov	r0, r3
 800793a:	f001 fdd1 	bl	80094e0 <xTaskRemoveFromEventList>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d012      	beq.n	800796a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007944:	4b0c      	ldr	r3, [pc, #48]	; (8007978 <xQueueGenericReset+0xcc>)
 8007946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800794a:	601a      	str	r2, [r3, #0]
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	f3bf 8f6f 	isb	sy
 8007954:	e009      	b.n	800796a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	3310      	adds	r3, #16
 800795a:	4618      	mov	r0, r3
 800795c:	f7ff fef2 	bl	8007744 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	3324      	adds	r3, #36	; 0x24
 8007964:	4618      	mov	r0, r3
 8007966:	f7ff feed 	bl	8007744 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800796a:	f002 fe13 	bl	800a594 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800796e:	2301      	movs	r3, #1
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	e000ed04 	.word	0xe000ed04

0800797c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800797c:	b580      	push	{r7, lr}
 800797e:	b08e      	sub	sp, #56	; 0x38
 8007980:	af02      	add	r7, sp, #8
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	607a      	str	r2, [r7, #4]
 8007988:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d10a      	bne.n	80079a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80079a2:	bf00      	nop
 80079a4:	e7fe      	b.n	80079a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10a      	bne.n	80079c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80079ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b0:	f383 8811 	msr	BASEPRI, r3
 80079b4:	f3bf 8f6f 	isb	sy
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80079be:	bf00      	nop
 80079c0:	e7fe      	b.n	80079c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d002      	beq.n	80079ce <xQueueGenericCreateStatic+0x52>
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <xQueueGenericCreateStatic+0x56>
 80079ce:	2301      	movs	r3, #1
 80079d0:	e000      	b.n	80079d4 <xQueueGenericCreateStatic+0x58>
 80079d2:	2300      	movs	r3, #0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d10a      	bne.n	80079ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80079d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079dc:	f383 8811 	msr	BASEPRI, r3
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	623b      	str	r3, [r7, #32]
}
 80079ea:	bf00      	nop
 80079ec:	e7fe      	b.n	80079ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d102      	bne.n	80079fa <xQueueGenericCreateStatic+0x7e>
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <xQueueGenericCreateStatic+0x82>
 80079fa:	2301      	movs	r3, #1
 80079fc:	e000      	b.n	8007a00 <xQueueGenericCreateStatic+0x84>
 80079fe:	2300      	movs	r3, #0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10a      	bne.n	8007a1a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a08:	f383 8811 	msr	BASEPRI, r3
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	61fb      	str	r3, [r7, #28]
}
 8007a16:	bf00      	nop
 8007a18:	e7fe      	b.n	8007a18 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a1a:	2350      	movs	r3, #80	; 0x50
 8007a1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	2b50      	cmp	r3, #80	; 0x50
 8007a22:	d00a      	beq.n	8007a3a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a28:	f383 8811 	msr	BASEPRI, r3
 8007a2c:	f3bf 8f6f 	isb	sy
 8007a30:	f3bf 8f4f 	dsb	sy
 8007a34:	61bb      	str	r3, [r7, #24]
}
 8007a36:	bf00      	nop
 8007a38:	e7fe      	b.n	8007a38 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007a3a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00d      	beq.n	8007a62 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a4e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	4613      	mov	r3, r2
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	68b9      	ldr	r1, [r7, #8]
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f000 f83f 	bl	8007ae0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3730      	adds	r7, #48	; 0x30
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b08a      	sub	sp, #40	; 0x28
 8007a70:	af02      	add	r7, sp, #8
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	4613      	mov	r3, r2
 8007a78:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10a      	bne.n	8007a96 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	613b      	str	r3, [r7, #16]
}
 8007a92:	bf00      	nop
 8007a94:	e7fe      	b.n	8007a94 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	fb02 f303 	mul.w	r3, r2, r3
 8007a9e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	3350      	adds	r3, #80	; 0x50
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f002 fe67 	bl	800a778 <pvPortMalloc>
 8007aaa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d011      	beq.n	8007ad6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	3350      	adds	r3, #80	; 0x50
 8007aba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ac4:	79fa      	ldrb	r2, [r7, #7]
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	4613      	mov	r3, r2
 8007acc:	697a      	ldr	r2, [r7, #20]
 8007ace:	68b9      	ldr	r1, [r7, #8]
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f000 f805 	bl	8007ae0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ad6:	69bb      	ldr	r3, [r7, #24]
	}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3720      	adds	r7, #32
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
 8007aec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d103      	bne.n	8007afc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	69ba      	ldr	r2, [r7, #24]
 8007af8:	601a      	str	r2, [r3, #0]
 8007afa:	e002      	b.n	8007b02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b0e:	2101      	movs	r1, #1
 8007b10:	69b8      	ldr	r0, [r7, #24]
 8007b12:	f7ff fecb 	bl	80078ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	78fa      	ldrb	r2, [r7, #3]
 8007b1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007b1e:	bf00      	nop
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b082      	sub	sp, #8
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00e      	beq.n	8007b52 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007b46:	2300      	movs	r3, #0
 8007b48:	2200      	movs	r2, #0
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f90b 	bl	8007d68 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007b52:	bf00      	nop
 8007b54:	3708      	adds	r7, #8
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b086      	sub	sp, #24
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	4603      	mov	r3, r0
 8007b62:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007b64:	2301      	movs	r3, #1
 8007b66:	617b      	str	r3, [r7, #20]
 8007b68:	2300      	movs	r3, #0
 8007b6a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007b6c:	79fb      	ldrb	r3, [r7, #7]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	6939      	ldr	r1, [r7, #16]
 8007b72:	6978      	ldr	r0, [r7, #20]
 8007b74:	f7ff ff7a 	bl	8007a6c <xQueueGenericCreate>
 8007b78:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f7ff ffd3 	bl	8007b26 <prvInitialiseMutex>

		return xNewQueue;
 8007b80:	68fb      	ldr	r3, [r7, #12]
	}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3718      	adds	r7, #24
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b088      	sub	sp, #32
 8007b8e:	af02      	add	r7, sp, #8
 8007b90:	4603      	mov	r3, r0
 8007b92:	6039      	str	r1, [r7, #0]
 8007b94:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007b96:	2301      	movs	r3, #1
 8007b98:	617b      	str	r3, [r7, #20]
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007b9e:	79fb      	ldrb	r3, [r7, #7]
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	6939      	ldr	r1, [r7, #16]
 8007ba8:	6978      	ldr	r0, [r7, #20]
 8007baa:	f7ff fee7 	bl	800797c <xQueueGenericCreateStatic>
 8007bae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f7ff ffb8 	bl	8007b26 <prvInitialiseMutex>

		return xNewQueue;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
	}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3718      	adds	r7, #24
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007bc0:	b590      	push	{r4, r7, lr}
 8007bc2:	b087      	sub	sp, #28
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10a      	bne.n	8007be8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8007bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd6:	f383 8811 	msr	BASEPRI, r3
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	60fb      	str	r3, [r7, #12]
}
 8007be4:	bf00      	nop
 8007be6:	e7fe      	b.n	8007be6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	689c      	ldr	r4, [r3, #8]
 8007bec:	f001 fe3a 	bl	8009864 <xTaskGetCurrentTaskHandle>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	429c      	cmp	r4, r3
 8007bf4:	d111      	bne.n	8007c1a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	1e5a      	subs	r2, r3, #1
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d105      	bne.n	8007c14 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007c08:	2300      	movs	r3, #0
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	6938      	ldr	r0, [r7, #16]
 8007c10:	f000 f8aa 	bl	8007d68 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007c14:	2301      	movs	r3, #1
 8007c16:	617b      	str	r3, [r7, #20]
 8007c18:	e001      	b.n	8007c1e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007c1e:	697b      	ldr	r3, [r7, #20]
	}
 8007c20:	4618      	mov	r0, r3
 8007c22:	371c      	adds	r7, #28
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd90      	pop	{r4, r7, pc}

08007c28 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007c28:	b590      	push	{r4, r7, lr}
 8007c2a:	b087      	sub	sp, #28
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d10a      	bne.n	8007c52 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8007c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c40:	f383 8811 	msr	BASEPRI, r3
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	60fb      	str	r3, [r7, #12]
}
 8007c4e:	bf00      	nop
 8007c50:	e7fe      	b.n	8007c50 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	689c      	ldr	r4, [r3, #8]
 8007c56:	f001 fe05 	bl	8009864 <xTaskGetCurrentTaskHandle>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	429c      	cmp	r4, r3
 8007c5e:	d107      	bne.n	8007c70 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	1c5a      	adds	r2, r3, #1
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	617b      	str	r3, [r7, #20]
 8007c6e:	e00c      	b.n	8007c8a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	6938      	ldr	r0, [r7, #16]
 8007c74:	f000 fb7e 	bl	8008374 <xQueueSemaphoreTake>
 8007c78:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d004      	beq.n	8007c8a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	1c5a      	adds	r2, r3, #1
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007c8a:	697b      	ldr	r3, [r7, #20]
	}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	371c      	adds	r7, #28
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd90      	pop	{r4, r7, pc}

08007c94 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08a      	sub	sp, #40	; 0x28
 8007c98:	af02      	add	r7, sp, #8
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10a      	bne.n	8007cbc <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	61bb      	str	r3, [r7, #24]
}
 8007cb8:	bf00      	nop
 8007cba:	e7fe      	b.n	8007cba <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d90a      	bls.n	8007cda <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc8:	f383 8811 	msr	BASEPRI, r3
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	617b      	str	r3, [r7, #20]
}
 8007cd6:	bf00      	nop
 8007cd8:	e7fe      	b.n	8007cd8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007cda:	2302      	movs	r3, #2
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f7ff fe49 	bl	800797c <xQueueGenericCreateStatic>
 8007cea:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d002      	beq.n	8007cf8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007cf8:	69fb      	ldr	r3, [r7, #28]
	}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3720      	adds	r7, #32
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b086      	sub	sp, #24
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10a      	bne.n	8007d28 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	613b      	str	r3, [r7, #16]
}
 8007d24:	bf00      	nop
 8007d26:	e7fe      	b.n	8007d26 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007d28:	683a      	ldr	r2, [r7, #0]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d90a      	bls.n	8007d46 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d34:	f383 8811 	msr	BASEPRI, r3
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	60fb      	str	r3, [r7, #12]
}
 8007d42:	bf00      	nop
 8007d44:	e7fe      	b.n	8007d44 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007d46:	2202      	movs	r2, #2
 8007d48:	2100      	movs	r1, #0
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7ff fe8e 	bl	8007a6c <xQueueGenericCreate>
 8007d50:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007d5e:	697b      	ldr	r3, [r7, #20]
	}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3718      	adds	r7, #24
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b08e      	sub	sp, #56	; 0x38
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
 8007d74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007d76:	2300      	movs	r3, #0
 8007d78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10a      	bne.n	8007d9a <xQueueGenericSend+0x32>
	__asm volatile
 8007d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d88:	f383 8811 	msr	BASEPRI, r3
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d96:	bf00      	nop
 8007d98:	e7fe      	b.n	8007d98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d103      	bne.n	8007da8 <xQueueGenericSend+0x40>
 8007da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d101      	bne.n	8007dac <xQueueGenericSend+0x44>
 8007da8:	2301      	movs	r3, #1
 8007daa:	e000      	b.n	8007dae <xQueueGenericSend+0x46>
 8007dac:	2300      	movs	r3, #0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10a      	bne.n	8007dc8 <xQueueGenericSend+0x60>
	__asm volatile
 8007db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db6:	f383 8811 	msr	BASEPRI, r3
 8007dba:	f3bf 8f6f 	isb	sy
 8007dbe:	f3bf 8f4f 	dsb	sy
 8007dc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007dc4:	bf00      	nop
 8007dc6:	e7fe      	b.n	8007dc6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d103      	bne.n	8007dd6 <xQueueGenericSend+0x6e>
 8007dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d101      	bne.n	8007dda <xQueueGenericSend+0x72>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e000      	b.n	8007ddc <xQueueGenericSend+0x74>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d10a      	bne.n	8007df6 <xQueueGenericSend+0x8e>
	__asm volatile
 8007de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	623b      	str	r3, [r7, #32]
}
 8007df2:	bf00      	nop
 8007df4:	e7fe      	b.n	8007df4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007df6:	f001 fd45 	bl	8009884 <xTaskGetSchedulerState>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d102      	bne.n	8007e06 <xQueueGenericSend+0x9e>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <xQueueGenericSend+0xa2>
 8007e06:	2301      	movs	r3, #1
 8007e08:	e000      	b.n	8007e0c <xQueueGenericSend+0xa4>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10a      	bne.n	8007e26 <xQueueGenericSend+0xbe>
	__asm volatile
 8007e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	61fb      	str	r3, [r7, #28]
}
 8007e22:	bf00      	nop
 8007e24:	e7fe      	b.n	8007e24 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e26:	f002 fb85 	bl	800a534 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d302      	bcc.n	8007e3c <xQueueGenericSend+0xd4>
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d129      	bne.n	8007e90 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	68b9      	ldr	r1, [r7, #8]
 8007e40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e42:	f000 fc9a 	bl	800877a <prvCopyDataToQueue>
 8007e46:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d010      	beq.n	8007e72 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e52:	3324      	adds	r3, #36	; 0x24
 8007e54:	4618      	mov	r0, r3
 8007e56:	f001 fb43 	bl	80094e0 <xTaskRemoveFromEventList>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d013      	beq.n	8007e88 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e60:	4b3f      	ldr	r3, [pc, #252]	; (8007f60 <xQueueGenericSend+0x1f8>)
 8007e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e66:	601a      	str	r2, [r3, #0]
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	f3bf 8f6f 	isb	sy
 8007e70:	e00a      	b.n	8007e88 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d007      	beq.n	8007e88 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007e78:	4b39      	ldr	r3, [pc, #228]	; (8007f60 <xQueueGenericSend+0x1f8>)
 8007e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e7e:	601a      	str	r2, [r3, #0]
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e88:	f002 fb84 	bl	800a594 <vPortExitCritical>
				return pdPASS;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e063      	b.n	8007f58 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d103      	bne.n	8007e9e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e96:	f002 fb7d 	bl	800a594 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	e05c      	b.n	8007f58 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d106      	bne.n	8007eb2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ea4:	f107 0314 	add.w	r3, r7, #20
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f001 fb7d 	bl	80095a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007eb2:	f002 fb6f 	bl	800a594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007eb6:	f001 f8c7 	bl	8009048 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007eba:	f002 fb3b 	bl	800a534 <vPortEnterCritical>
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ec4:	b25b      	sxtb	r3, r3
 8007ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eca:	d103      	bne.n	8007ed4 <xQueueGenericSend+0x16c>
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007eda:	b25b      	sxtb	r3, r3
 8007edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee0:	d103      	bne.n	8007eea <xQueueGenericSend+0x182>
 8007ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007eea:	f002 fb53 	bl	800a594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007eee:	1d3a      	adds	r2, r7, #4
 8007ef0:	f107 0314 	add.w	r3, r7, #20
 8007ef4:	4611      	mov	r1, r2
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f001 fb6c 	bl	80095d4 <xTaskCheckForTimeOut>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d124      	bne.n	8007f4c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f04:	f000 fd31 	bl	800896a <prvIsQueueFull>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d018      	beq.n	8007f40 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f10:	3310      	adds	r3, #16
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	4611      	mov	r1, r2
 8007f16:	4618      	mov	r0, r3
 8007f18:	f001 fa92 	bl	8009440 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f1e:	f000 fcbc 	bl	800889a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f22:	f001 f89f 	bl	8009064 <xTaskResumeAll>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f47f af7c 	bne.w	8007e26 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007f2e:	4b0c      	ldr	r3, [pc, #48]	; (8007f60 <xQueueGenericSend+0x1f8>)
 8007f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f34:	601a      	str	r2, [r3, #0]
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	e772      	b.n	8007e26 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f42:	f000 fcaa 	bl	800889a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f46:	f001 f88d 	bl	8009064 <xTaskResumeAll>
 8007f4a:	e76c      	b.n	8007e26 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f4e:	f000 fca4 	bl	800889a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f52:	f001 f887 	bl	8009064 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3738      	adds	r7, #56	; 0x38
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	e000ed04 	.word	0xe000ed04

08007f64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b090      	sub	sp, #64	; 0x40
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
 8007f70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10a      	bne.n	8007f92 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f80:	f383 8811 	msr	BASEPRI, r3
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	f3bf 8f4f 	dsb	sy
 8007f8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f8e:	bf00      	nop
 8007f90:	e7fe      	b.n	8007f90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d103      	bne.n	8007fa0 <xQueueGenericSendFromISR+0x3c>
 8007f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d101      	bne.n	8007fa4 <xQueueGenericSendFromISR+0x40>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e000      	b.n	8007fa6 <xQueueGenericSendFromISR+0x42>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10a      	bne.n	8007fc0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007fbc:	bf00      	nop
 8007fbe:	e7fe      	b.n	8007fbe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d103      	bne.n	8007fce <xQueueGenericSendFromISR+0x6a>
 8007fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d101      	bne.n	8007fd2 <xQueueGenericSendFromISR+0x6e>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e000      	b.n	8007fd4 <xQueueGenericSendFromISR+0x70>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d10a      	bne.n	8007fee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fdc:	f383 8811 	msr	BASEPRI, r3
 8007fe0:	f3bf 8f6f 	isb	sy
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	623b      	str	r3, [r7, #32]
}
 8007fea:	bf00      	nop
 8007fec:	e7fe      	b.n	8007fec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fee:	f002 fb83 	bl	800a6f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ff2:	f3ef 8211 	mrs	r2, BASEPRI
 8007ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffa:	f383 8811 	msr	BASEPRI, r3
 8007ffe:	f3bf 8f6f 	isb	sy
 8008002:	f3bf 8f4f 	dsb	sy
 8008006:	61fa      	str	r2, [r7, #28]
 8008008:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800800a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800800c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800800e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008016:	429a      	cmp	r2, r3
 8008018:	d302      	bcc.n	8008020 <xQueueGenericSendFromISR+0xbc>
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b02      	cmp	r3, #2
 800801e:	d12f      	bne.n	8008080 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008022:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800802a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008030:	683a      	ldr	r2, [r7, #0]
 8008032:	68b9      	ldr	r1, [r7, #8]
 8008034:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008036:	f000 fba0 	bl	800877a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800803a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800803e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008042:	d112      	bne.n	800806a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008048:	2b00      	cmp	r3, #0
 800804a:	d016      	beq.n	800807a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800804c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804e:	3324      	adds	r3, #36	; 0x24
 8008050:	4618      	mov	r0, r3
 8008052:	f001 fa45 	bl	80094e0 <xTaskRemoveFromEventList>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00e      	beq.n	800807a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00b      	beq.n	800807a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	601a      	str	r2, [r3, #0]
 8008068:	e007      	b.n	800807a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800806a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800806e:	3301      	adds	r3, #1
 8008070:	b2db      	uxtb	r3, r3
 8008072:	b25a      	sxtb	r2, r3
 8008074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800807a:	2301      	movs	r3, #1
 800807c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800807e:	e001      	b.n	8008084 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008080:	2300      	movs	r3, #0
 8008082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008086:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800808e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008092:	4618      	mov	r0, r3
 8008094:	3740      	adds	r7, #64	; 0x40
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b08e      	sub	sp, #56	; 0x38
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80080a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10a      	bne.n	80080c4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	623b      	str	r3, [r7, #32]
}
 80080c0:	bf00      	nop
 80080c2:	e7fe      	b.n	80080c2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80080c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00a      	beq.n	80080e2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80080cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	61fb      	str	r3, [r7, #28]
}
 80080de:	bf00      	nop
 80080e0:	e7fe      	b.n	80080e0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80080e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d103      	bne.n	80080f2 <xQueueGiveFromISR+0x58>
 80080ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d101      	bne.n	80080f6 <xQueueGiveFromISR+0x5c>
 80080f2:	2301      	movs	r3, #1
 80080f4:	e000      	b.n	80080f8 <xQueueGiveFromISR+0x5e>
 80080f6:	2300      	movs	r3, #0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10a      	bne.n	8008112 <xQueueGiveFromISR+0x78>
	__asm volatile
 80080fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008100:	f383 8811 	msr	BASEPRI, r3
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	61bb      	str	r3, [r7, #24]
}
 800810e:	bf00      	nop
 8008110:	e7fe      	b.n	8008110 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008112:	f002 faf1 	bl	800a6f8 <vPortValidateInterruptPriority>
	__asm volatile
 8008116:	f3ef 8211 	mrs	r2, BASEPRI
 800811a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	617a      	str	r2, [r7, #20]
 800812c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800812e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008130:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008136:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800813c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800813e:	429a      	cmp	r2, r3
 8008140:	d22b      	bcs.n	800819a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008144:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800814c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814e:	1c5a      	adds	r2, r3, #1
 8008150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008152:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008154:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800815c:	d112      	bne.n	8008184 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800815e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008162:	2b00      	cmp	r3, #0
 8008164:	d016      	beq.n	8008194 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008168:	3324      	adds	r3, #36	; 0x24
 800816a:	4618      	mov	r0, r3
 800816c:	f001 f9b8 	bl	80094e0 <xTaskRemoveFromEventList>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00e      	beq.n	8008194 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00b      	beq.n	8008194 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	2201      	movs	r2, #1
 8008180:	601a      	str	r2, [r3, #0]
 8008182:	e007      	b.n	8008194 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008188:	3301      	adds	r3, #1
 800818a:	b2db      	uxtb	r3, r3
 800818c:	b25a      	sxtb	r2, r3
 800818e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008194:	2301      	movs	r3, #1
 8008196:	637b      	str	r3, [r7, #52]	; 0x34
 8008198:	e001      	b.n	800819e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800819a:	2300      	movs	r3, #0
 800819c:	637b      	str	r3, [r7, #52]	; 0x34
 800819e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f383 8811 	msr	BASEPRI, r3
}
 80081a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3738      	adds	r7, #56	; 0x38
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b08c      	sub	sp, #48	; 0x30
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80081c0:	2300      	movs	r3, #0
 80081c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80081c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10a      	bne.n	80081e4 <xQueueReceive+0x30>
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	623b      	str	r3, [r7, #32]
}
 80081e0:	bf00      	nop
 80081e2:	e7fe      	b.n	80081e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d103      	bne.n	80081f2 <xQueueReceive+0x3e>
 80081ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <xQueueReceive+0x42>
 80081f2:	2301      	movs	r3, #1
 80081f4:	e000      	b.n	80081f8 <xQueueReceive+0x44>
 80081f6:	2300      	movs	r3, #0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10a      	bne.n	8008212 <xQueueReceive+0x5e>
	__asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	61fb      	str	r3, [r7, #28]
}
 800820e:	bf00      	nop
 8008210:	e7fe      	b.n	8008210 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008212:	f001 fb37 	bl	8009884 <xTaskGetSchedulerState>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d102      	bne.n	8008222 <xQueueReceive+0x6e>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <xQueueReceive+0x72>
 8008222:	2301      	movs	r3, #1
 8008224:	e000      	b.n	8008228 <xQueueReceive+0x74>
 8008226:	2300      	movs	r3, #0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10a      	bne.n	8008242 <xQueueReceive+0x8e>
	__asm volatile
 800822c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	61bb      	str	r3, [r7, #24]
}
 800823e:	bf00      	nop
 8008240:	e7fe      	b.n	8008240 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008242:	f002 f977 	bl	800a534 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800824c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824e:	2b00      	cmp	r3, #0
 8008250:	d01f      	beq.n	8008292 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008252:	68b9      	ldr	r1, [r7, #8]
 8008254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008256:	f000 fafa 	bl	800884e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825c:	1e5a      	subs	r2, r3, #1
 800825e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008260:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00f      	beq.n	800828a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800826a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826c:	3310      	adds	r3, #16
 800826e:	4618      	mov	r0, r3
 8008270:	f001 f936 	bl	80094e0 <xTaskRemoveFromEventList>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d007      	beq.n	800828a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800827a:	4b3d      	ldr	r3, [pc, #244]	; (8008370 <xQueueReceive+0x1bc>)
 800827c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008280:	601a      	str	r2, [r3, #0]
 8008282:	f3bf 8f4f 	dsb	sy
 8008286:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800828a:	f002 f983 	bl	800a594 <vPortExitCritical>
				return pdPASS;
 800828e:	2301      	movs	r3, #1
 8008290:	e069      	b.n	8008366 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d103      	bne.n	80082a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008298:	f002 f97c 	bl	800a594 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800829c:	2300      	movs	r3, #0
 800829e:	e062      	b.n	8008366 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d106      	bne.n	80082b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082a6:	f107 0310 	add.w	r3, r7, #16
 80082aa:	4618      	mov	r0, r3
 80082ac:	f001 f97c 	bl	80095a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082b0:	2301      	movs	r3, #1
 80082b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082b4:	f002 f96e 	bl	800a594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082b8:	f000 fec6 	bl	8009048 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082bc:	f002 f93a 	bl	800a534 <vPortEnterCritical>
 80082c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082c6:	b25b      	sxtb	r3, r3
 80082c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082cc:	d103      	bne.n	80082d6 <xQueueReceive+0x122>
 80082ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082dc:	b25b      	sxtb	r3, r3
 80082de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e2:	d103      	bne.n	80082ec <xQueueReceive+0x138>
 80082e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082ec:	f002 f952 	bl	800a594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082f0:	1d3a      	adds	r2, r7, #4
 80082f2:	f107 0310 	add.w	r3, r7, #16
 80082f6:	4611      	mov	r1, r2
 80082f8:	4618      	mov	r0, r3
 80082fa:	f001 f96b 	bl	80095d4 <xTaskCheckForTimeOut>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d123      	bne.n	800834c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008306:	f000 fb1a 	bl	800893e <prvIsQueueEmpty>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d017      	beq.n	8008340 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008312:	3324      	adds	r3, #36	; 0x24
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	4611      	mov	r1, r2
 8008318:	4618      	mov	r0, r3
 800831a:	f001 f891 	bl	8009440 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800831e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008320:	f000 fabb 	bl	800889a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008324:	f000 fe9e 	bl	8009064 <xTaskResumeAll>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d189      	bne.n	8008242 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800832e:	4b10      	ldr	r3, [pc, #64]	; (8008370 <xQueueReceive+0x1bc>)
 8008330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	f3bf 8f6f 	isb	sy
 800833e:	e780      	b.n	8008242 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008342:	f000 faaa 	bl	800889a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008346:	f000 fe8d 	bl	8009064 <xTaskResumeAll>
 800834a:	e77a      	b.n	8008242 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800834c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800834e:	f000 faa4 	bl	800889a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008352:	f000 fe87 	bl	8009064 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008358:	f000 faf1 	bl	800893e <prvIsQueueEmpty>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	f43f af6f 	beq.w	8008242 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008364:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008366:	4618      	mov	r0, r3
 8008368:	3730      	adds	r7, #48	; 0x30
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	e000ed04 	.word	0xe000ed04

08008374 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b08e      	sub	sp, #56	; 0x38
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800837e:	2300      	movs	r3, #0
 8008380:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008386:	2300      	movs	r3, #0
 8008388:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800838a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838c:	2b00      	cmp	r3, #0
 800838e:	d10a      	bne.n	80083a6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008394:	f383 8811 	msr	BASEPRI, r3
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	623b      	str	r3, [r7, #32]
}
 80083a2:	bf00      	nop
 80083a4:	e7fe      	b.n	80083a4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80083a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00a      	beq.n	80083c4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80083ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b2:	f383 8811 	msr	BASEPRI, r3
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	f3bf 8f4f 	dsb	sy
 80083be:	61fb      	str	r3, [r7, #28]
}
 80083c0:	bf00      	nop
 80083c2:	e7fe      	b.n	80083c2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083c4:	f001 fa5e 	bl	8009884 <xTaskGetSchedulerState>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d102      	bne.n	80083d4 <xQueueSemaphoreTake+0x60>
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d101      	bne.n	80083d8 <xQueueSemaphoreTake+0x64>
 80083d4:	2301      	movs	r3, #1
 80083d6:	e000      	b.n	80083da <xQueueSemaphoreTake+0x66>
 80083d8:	2300      	movs	r3, #0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d10a      	bne.n	80083f4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80083de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	61bb      	str	r3, [r7, #24]
}
 80083f0:	bf00      	nop
 80083f2:	e7fe      	b.n	80083f2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083f4:	f002 f89e 	bl	800a534 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80083f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80083fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008400:	2b00      	cmp	r3, #0
 8008402:	d024      	beq.n	800844e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008406:	1e5a      	subs	r2, r3, #1
 8008408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800840c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d104      	bne.n	800841e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008414:	f001 fbac 	bl	8009b70 <pvTaskIncrementMutexHeldCount>
 8008418:	4602      	mov	r2, r0
 800841a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800841e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00f      	beq.n	8008446 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008428:	3310      	adds	r3, #16
 800842a:	4618      	mov	r0, r3
 800842c:	f001 f858 	bl	80094e0 <xTaskRemoveFromEventList>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d007      	beq.n	8008446 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008436:	4b54      	ldr	r3, [pc, #336]	; (8008588 <xQueueSemaphoreTake+0x214>)
 8008438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800843c:	601a      	str	r2, [r3, #0]
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008446:	f002 f8a5 	bl	800a594 <vPortExitCritical>
				return pdPASS;
 800844a:	2301      	movs	r3, #1
 800844c:	e097      	b.n	800857e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d111      	bne.n	8008478 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00a      	beq.n	8008470 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800845a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	617b      	str	r3, [r7, #20]
}
 800846c:	bf00      	nop
 800846e:	e7fe      	b.n	800846e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008470:	f002 f890 	bl	800a594 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008474:	2300      	movs	r3, #0
 8008476:	e082      	b.n	800857e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800847a:	2b00      	cmp	r3, #0
 800847c:	d106      	bne.n	800848c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800847e:	f107 030c 	add.w	r3, r7, #12
 8008482:	4618      	mov	r0, r3
 8008484:	f001 f890 	bl	80095a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008488:	2301      	movs	r3, #1
 800848a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800848c:	f002 f882 	bl	800a594 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008490:	f000 fdda 	bl	8009048 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008494:	f002 f84e 	bl	800a534 <vPortEnterCritical>
 8008498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800849e:	b25b      	sxtb	r3, r3
 80084a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a4:	d103      	bne.n	80084ae <xQueueSemaphoreTake+0x13a>
 80084a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a8:	2200      	movs	r2, #0
 80084aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084b4:	b25b      	sxtb	r3, r3
 80084b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ba:	d103      	bne.n	80084c4 <xQueueSemaphoreTake+0x150>
 80084bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084c4:	f002 f866 	bl	800a594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084c8:	463a      	mov	r2, r7
 80084ca:	f107 030c 	add.w	r3, r7, #12
 80084ce:	4611      	mov	r1, r2
 80084d0:	4618      	mov	r0, r3
 80084d2:	f001 f87f 	bl	80095d4 <xTaskCheckForTimeOut>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d132      	bne.n	8008542 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084de:	f000 fa2e 	bl	800893e <prvIsQueueEmpty>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d026      	beq.n	8008536 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d109      	bne.n	8008504 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80084f0:	f002 f820 	bl	800a534 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80084f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	4618      	mov	r0, r3
 80084fa:	f001 f9e1 	bl	80098c0 <xTaskPriorityInherit>
 80084fe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008500:	f002 f848 	bl	800a594 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008506:	3324      	adds	r3, #36	; 0x24
 8008508:	683a      	ldr	r2, [r7, #0]
 800850a:	4611      	mov	r1, r2
 800850c:	4618      	mov	r0, r3
 800850e:	f000 ff97 	bl	8009440 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008512:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008514:	f000 f9c1 	bl	800889a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008518:	f000 fda4 	bl	8009064 <xTaskResumeAll>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	f47f af68 	bne.w	80083f4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008524:	4b18      	ldr	r3, [pc, #96]	; (8008588 <xQueueSemaphoreTake+0x214>)
 8008526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800852a:	601a      	str	r2, [r3, #0]
 800852c:	f3bf 8f4f 	dsb	sy
 8008530:	f3bf 8f6f 	isb	sy
 8008534:	e75e      	b.n	80083f4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008536:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008538:	f000 f9af 	bl	800889a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800853c:	f000 fd92 	bl	8009064 <xTaskResumeAll>
 8008540:	e758      	b.n	80083f4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008542:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008544:	f000 f9a9 	bl	800889a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008548:	f000 fd8c 	bl	8009064 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800854c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800854e:	f000 f9f6 	bl	800893e <prvIsQueueEmpty>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	f43f af4d 	beq.w	80083f4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800855a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00d      	beq.n	800857c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008560:	f001 ffe8 	bl	800a534 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008564:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008566:	f000 f8f0 	bl	800874a <prvGetDisinheritPriorityAfterTimeout>
 800856a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800856c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008572:	4618      	mov	r0, r3
 8008574:	f001 fa7a 	bl	8009a6c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008578:	f002 f80c 	bl	800a594 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800857c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800857e:	4618      	mov	r0, r3
 8008580:	3738      	adds	r7, #56	; 0x38
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	e000ed04 	.word	0xe000ed04

0800858c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b08e      	sub	sp, #56	; 0x38
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800859c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10a      	bne.n	80085b8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80085a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a6:	f383 8811 	msr	BASEPRI, r3
 80085aa:	f3bf 8f6f 	isb	sy
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	623b      	str	r3, [r7, #32]
}
 80085b4:	bf00      	nop
 80085b6:	e7fe      	b.n	80085b6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d103      	bne.n	80085c6 <xQueueReceiveFromISR+0x3a>
 80085be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d101      	bne.n	80085ca <xQueueReceiveFromISR+0x3e>
 80085c6:	2301      	movs	r3, #1
 80085c8:	e000      	b.n	80085cc <xQueueReceiveFromISR+0x40>
 80085ca:	2300      	movs	r3, #0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10a      	bne.n	80085e6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80085d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	61fb      	str	r3, [r7, #28]
}
 80085e2:	bf00      	nop
 80085e4:	e7fe      	b.n	80085e4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085e6:	f002 f887 	bl	800a6f8 <vPortValidateInterruptPriority>
	__asm volatile
 80085ea:	f3ef 8211 	mrs	r2, BASEPRI
 80085ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	61ba      	str	r2, [r7, #24]
 8008600:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008602:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008604:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800860c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860e:	2b00      	cmp	r3, #0
 8008610:	d02f      	beq.n	8008672 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008614:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800861c:	68b9      	ldr	r1, [r7, #8]
 800861e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008620:	f000 f915 	bl	800884e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008626:	1e5a      	subs	r2, r3, #1
 8008628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800862c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008634:	d112      	bne.n	800865c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d016      	beq.n	800866c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800863e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008640:	3310      	adds	r3, #16
 8008642:	4618      	mov	r0, r3
 8008644:	f000 ff4c 	bl	80094e0 <xTaskRemoveFromEventList>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00e      	beq.n	800866c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00b      	beq.n	800866c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	601a      	str	r2, [r3, #0]
 800865a:	e007      	b.n	800866c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800865c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008660:	3301      	adds	r3, #1
 8008662:	b2db      	uxtb	r3, r3
 8008664:	b25a      	sxtb	r2, r3
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800866c:	2301      	movs	r3, #1
 800866e:	637b      	str	r3, [r7, #52]	; 0x34
 8008670:	e001      	b.n	8008676 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008672:	2300      	movs	r3, #0
 8008674:	637b      	str	r3, [r7, #52]	; 0x34
 8008676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008678:	613b      	str	r3, [r7, #16]
	__asm volatile
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	f383 8811 	msr	BASEPRI, r3
}
 8008680:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008684:	4618      	mov	r0, r3
 8008686:	3738      	adds	r7, #56	; 0x38
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10a      	bne.n	80086b0 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800869a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	60bb      	str	r3, [r7, #8]
}
 80086ac:	bf00      	nop
 80086ae:	e7fe      	b.n	80086ae <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80086b0:	f001 ff40 	bl	800a534 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80086ba:	f001 ff6b 	bl	800a594 <vPortExitCritical>

	return uxReturn;
 80086be:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80086c0:	4618      	mov	r0, r3
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80086c8:	b480      	push	{r7}
 80086ca:	b087      	sub	sp, #28
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10a      	bne.n	80086f0 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	60fb      	str	r3, [r7, #12]
}
 80086ec:	bf00      	nop
 80086ee:	e7fe      	b.n	80086ee <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80086f6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80086f8:	4618      	mov	r0, r3
 80086fa:	371c      	adds	r7, #28
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d10a      	bne.n	800872c <vQueueDelete+0x28>
	__asm volatile
 8008716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871a:	f383 8811 	msr	BASEPRI, r3
 800871e:	f3bf 8f6f 	isb	sy
 8008722:	f3bf 8f4f 	dsb	sy
 8008726:	60bb      	str	r3, [r7, #8]
}
 8008728:	bf00      	nop
 800872a:	e7fe      	b.n	800872a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f000 f95f 	bl	80089f0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008738:	2b00      	cmp	r3, #0
 800873a:	d102      	bne.n	8008742 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f002 f8e7 	bl	800a910 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008742:	bf00      	nop
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800874a:	b480      	push	{r7}
 800874c:	b085      	sub	sp, #20
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008756:	2b00      	cmp	r3, #0
 8008758:	d006      	beq.n	8008768 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008764:	60fb      	str	r3, [r7, #12]
 8008766:	e001      	b.n	800876c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008768:	2300      	movs	r3, #0
 800876a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800876c:	68fb      	ldr	r3, [r7, #12]
	}
 800876e:	4618      	mov	r0, r3
 8008770:	3714      	adds	r7, #20
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b086      	sub	sp, #24
 800877e:	af00      	add	r7, sp, #0
 8008780:	60f8      	str	r0, [r7, #12]
 8008782:	60b9      	str	r1, [r7, #8]
 8008784:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008786:	2300      	movs	r3, #0
 8008788:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008794:	2b00      	cmp	r3, #0
 8008796:	d10d      	bne.n	80087b4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d14d      	bne.n	800883c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f001 f8f3 	bl	8009990 <xTaskPriorityDisinherit>
 80087aa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	609a      	str	r2, [r3, #8]
 80087b2:	e043      	b.n	800883c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d119      	bne.n	80087ee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6858      	ldr	r0, [r3, #4]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c2:	461a      	mov	r2, r3
 80087c4:	68b9      	ldr	r1, [r7, #8]
 80087c6:	f016 f9b1 	bl	801eb2c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	685a      	ldr	r2, [r3, #4]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d2:	441a      	add	r2, r3
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	685a      	ldr	r2, [r3, #4]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d32b      	bcc.n	800883c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	605a      	str	r2, [r3, #4]
 80087ec:	e026      	b.n	800883c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	68d8      	ldr	r0, [r3, #12]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f6:	461a      	mov	r2, r3
 80087f8:	68b9      	ldr	r1, [r7, #8]
 80087fa:	f016 f997 	bl	801eb2c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	68da      	ldr	r2, [r3, #12]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008806:	425b      	negs	r3, r3
 8008808:	441a      	add	r2, r3
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	68da      	ldr	r2, [r3, #12]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	429a      	cmp	r2, r3
 8008818:	d207      	bcs.n	800882a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	689a      	ldr	r2, [r3, #8]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008822:	425b      	negs	r3, r3
 8008824:	441a      	add	r2, r3
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2b02      	cmp	r3, #2
 800882e:	d105      	bne.n	800883c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d002      	beq.n	800883c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	3b01      	subs	r3, #1
 800883a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	1c5a      	adds	r2, r3, #1
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008844:	697b      	ldr	r3, [r7, #20]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3718      	adds	r7, #24
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b082      	sub	sp, #8
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885c:	2b00      	cmp	r3, #0
 800885e:	d018      	beq.n	8008892 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	68da      	ldr	r2, [r3, #12]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008868:	441a      	add	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68da      	ldr	r2, [r3, #12]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	429a      	cmp	r2, r3
 8008878:	d303      	bcc.n	8008882 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	68d9      	ldr	r1, [r3, #12]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888a:	461a      	mov	r2, r3
 800888c:	6838      	ldr	r0, [r7, #0]
 800888e:	f016 f94d 	bl	801eb2c <memcpy>
	}
}
 8008892:	bf00      	nop
 8008894:	3708      	adds	r7, #8
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b084      	sub	sp, #16
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80088a2:	f001 fe47 	bl	800a534 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088ac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088ae:	e011      	b.n	80088d4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d012      	beq.n	80088de <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	3324      	adds	r3, #36	; 0x24
 80088bc:	4618      	mov	r0, r3
 80088be:	f000 fe0f 	bl	80094e0 <xTaskRemoveFromEventList>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d001      	beq.n	80088cc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80088c8:	f000 fee6 	bl	8009698 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80088cc:	7bfb      	ldrb	r3, [r7, #15]
 80088ce:	3b01      	subs	r3, #1
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	dce9      	bgt.n	80088b0 <prvUnlockQueue+0x16>
 80088dc:	e000      	b.n	80088e0 <prvUnlockQueue+0x46>
					break;
 80088de:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	22ff      	movs	r2, #255	; 0xff
 80088e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80088e8:	f001 fe54 	bl	800a594 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80088ec:	f001 fe22 	bl	800a534 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088f6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088f8:	e011      	b.n	800891e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d012      	beq.n	8008928 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	3310      	adds	r3, #16
 8008906:	4618      	mov	r0, r3
 8008908:	f000 fdea 	bl	80094e0 <xTaskRemoveFromEventList>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d001      	beq.n	8008916 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008912:	f000 fec1 	bl	8009698 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008916:	7bbb      	ldrb	r3, [r7, #14]
 8008918:	3b01      	subs	r3, #1
 800891a:	b2db      	uxtb	r3, r3
 800891c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800891e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008922:	2b00      	cmp	r3, #0
 8008924:	dce9      	bgt.n	80088fa <prvUnlockQueue+0x60>
 8008926:	e000      	b.n	800892a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008928:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	22ff      	movs	r2, #255	; 0xff
 800892e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008932:	f001 fe2f 	bl	800a594 <vPortExitCritical>
}
 8008936:	bf00      	nop
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b084      	sub	sp, #16
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008946:	f001 fdf5 	bl	800a534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894e:	2b00      	cmp	r3, #0
 8008950:	d102      	bne.n	8008958 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008952:	2301      	movs	r3, #1
 8008954:	60fb      	str	r3, [r7, #12]
 8008956:	e001      	b.n	800895c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008958:	2300      	movs	r3, #0
 800895a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800895c:	f001 fe1a 	bl	800a594 <vPortExitCritical>

	return xReturn;
 8008960:	68fb      	ldr	r3, [r7, #12]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b084      	sub	sp, #16
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008972:	f001 fddf 	bl	800a534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800897e:	429a      	cmp	r2, r3
 8008980:	d102      	bne.n	8008988 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008982:	2301      	movs	r3, #1
 8008984:	60fb      	str	r3, [r7, #12]
 8008986:	e001      	b.n	800898c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008988:	2300      	movs	r3, #0
 800898a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800898c:	f001 fe02 	bl	800a594 <vPortExitCritical>

	return xReturn;
 8008990:	68fb      	ldr	r3, [r7, #12]
}
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
	...

0800899c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089a6:	2300      	movs	r3, #0
 80089a8:	60fb      	str	r3, [r7, #12]
 80089aa:	e014      	b.n	80089d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80089ac:	4a0f      	ldr	r2, [pc, #60]	; (80089ec <vQueueAddToRegistry+0x50>)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10b      	bne.n	80089d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80089b8:	490c      	ldr	r1, [pc, #48]	; (80089ec <vQueueAddToRegistry+0x50>)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	683a      	ldr	r2, [r7, #0]
 80089be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80089c2:	4a0a      	ldr	r2, [pc, #40]	; (80089ec <vQueueAddToRegistry+0x50>)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	00db      	lsls	r3, r3, #3
 80089c8:	4413      	add	r3, r2
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80089ce:	e006      	b.n	80089de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	3301      	adds	r3, #1
 80089d4:	60fb      	str	r3, [r7, #12]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2b07      	cmp	r3, #7
 80089da:	d9e7      	bls.n	80089ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80089dc:	bf00      	nop
 80089de:	bf00      	nop
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	2000507c 	.word	0x2000507c

080089f0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089f8:	2300      	movs	r3, #0
 80089fa:	60fb      	str	r3, [r7, #12]
 80089fc:	e016      	b.n	8008a2c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80089fe:	4a10      	ldr	r2, [pc, #64]	; (8008a40 <vQueueUnregisterQueue+0x50>)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	00db      	lsls	r3, r3, #3
 8008a04:	4413      	add	r3, r2
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d10b      	bne.n	8008a26 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008a0e:	4a0c      	ldr	r2, [pc, #48]	; (8008a40 <vQueueUnregisterQueue+0x50>)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2100      	movs	r1, #0
 8008a14:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008a18:	4a09      	ldr	r2, [pc, #36]	; (8008a40 <vQueueUnregisterQueue+0x50>)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	00db      	lsls	r3, r3, #3
 8008a1e:	4413      	add	r3, r2
 8008a20:	2200      	movs	r2, #0
 8008a22:	605a      	str	r2, [r3, #4]
				break;
 8008a24:	e006      	b.n	8008a34 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	60fb      	str	r3, [r7, #12]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2b07      	cmp	r3, #7
 8008a30:	d9e5      	bls.n	80089fe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008a32:	bf00      	nop
 8008a34:	bf00      	nop
 8008a36:	3714      	adds	r7, #20
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr
 8008a40:	2000507c 	.word	0x2000507c

08008a44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008a54:	f001 fd6e 	bl	800a534 <vPortEnterCritical>
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a5e:	b25b      	sxtb	r3, r3
 8008a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a64:	d103      	bne.n	8008a6e <vQueueWaitForMessageRestricted+0x2a>
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a74:	b25b      	sxtb	r3, r3
 8008a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a7a:	d103      	bne.n	8008a84 <vQueueWaitForMessageRestricted+0x40>
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a84:	f001 fd86 	bl	800a594 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d106      	bne.n	8008a9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	3324      	adds	r3, #36	; 0x24
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	68b9      	ldr	r1, [r7, #8]
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f000 fcf5 	bl	8009488 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a9e:	6978      	ldr	r0, [r7, #20]
 8008aa0:	f7ff fefb 	bl	800889a <prvUnlockQueue>
	}
 8008aa4:	bf00      	nop
 8008aa6:	3718      	adds	r7, #24
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b08e      	sub	sp, #56	; 0x38
 8008ab0:	af04      	add	r7, sp, #16
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
 8008ab8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d10a      	bne.n	8008ad6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac4:	f383 8811 	msr	BASEPRI, r3
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	623b      	str	r3, [r7, #32]
}
 8008ad2:	bf00      	nop
 8008ad4:	e7fe      	b.n	8008ad4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d10a      	bne.n	8008af2 <xTaskCreateStatic+0x46>
	__asm volatile
 8008adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae0:	f383 8811 	msr	BASEPRI, r3
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	61fb      	str	r3, [r7, #28]
}
 8008aee:	bf00      	nop
 8008af0:	e7fe      	b.n	8008af0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008af2:	23bc      	movs	r3, #188	; 0xbc
 8008af4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	2bbc      	cmp	r3, #188	; 0xbc
 8008afa:	d00a      	beq.n	8008b12 <xTaskCreateStatic+0x66>
	__asm volatile
 8008afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b00:	f383 8811 	msr	BASEPRI, r3
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	61bb      	str	r3, [r7, #24]
}
 8008b0e:	bf00      	nop
 8008b10:	e7fe      	b.n	8008b10 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008b12:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d01e      	beq.n	8008b58 <xTaskCreateStatic+0xac>
 8008b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d01b      	beq.n	8008b58 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b22:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b28:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	2202      	movs	r2, #2
 8008b2e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008b32:	2300      	movs	r3, #0
 8008b34:	9303      	str	r3, [sp, #12]
 8008b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b38:	9302      	str	r3, [sp, #8]
 8008b3a:	f107 0314 	add.w	r3, r7, #20
 8008b3e:	9301      	str	r3, [sp, #4]
 8008b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	68b9      	ldr	r1, [r7, #8]
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f000 f850 	bl	8008bf0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b52:	f000 f8f3 	bl	8008d3c <prvAddNewTaskToReadyList>
 8008b56:	e001      	b.n	8008b5c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b5c:	697b      	ldr	r3, [r7, #20]
	}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3728      	adds	r7, #40	; 0x28
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b08c      	sub	sp, #48	; 0x30
 8008b6a:	af04      	add	r7, sp, #16
 8008b6c:	60f8      	str	r0, [r7, #12]
 8008b6e:	60b9      	str	r1, [r7, #8]
 8008b70:	603b      	str	r3, [r7, #0]
 8008b72:	4613      	mov	r3, r2
 8008b74:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008b76:	88fb      	ldrh	r3, [r7, #6]
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f001 fdfc 	bl	800a778 <pvPortMalloc>
 8008b80:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00e      	beq.n	8008ba6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b88:	20bc      	movs	r0, #188	; 0xbc
 8008b8a:	f001 fdf5 	bl	800a778 <pvPortMalloc>
 8008b8e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d003      	beq.n	8008b9e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	631a      	str	r2, [r3, #48]	; 0x30
 8008b9c:	e005      	b.n	8008baa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b9e:	6978      	ldr	r0, [r7, #20]
 8008ba0:	f001 feb6 	bl	800a910 <vPortFree>
 8008ba4:	e001      	b.n	8008baa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d017      	beq.n	8008be0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008bb8:	88fa      	ldrh	r2, [r7, #6]
 8008bba:	2300      	movs	r3, #0
 8008bbc:	9303      	str	r3, [sp, #12]
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	9302      	str	r3, [sp, #8]
 8008bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc4:	9301      	str	r3, [sp, #4]
 8008bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	68b9      	ldr	r1, [r7, #8]
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f000 f80e 	bl	8008bf0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008bd4:	69f8      	ldr	r0, [r7, #28]
 8008bd6:	f000 f8b1 	bl	8008d3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	61bb      	str	r3, [r7, #24]
 8008bde:	e002      	b.n	8008be6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008be0:	f04f 33ff 	mov.w	r3, #4294967295
 8008be4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008be6:	69bb      	ldr	r3, [r7, #24]
	}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3720      	adds	r7, #32
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b088      	sub	sp, #32
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	607a      	str	r2, [r7, #4]
 8008bfc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c00:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	461a      	mov	r2, r3
 8008c08:	21a5      	movs	r1, #165	; 0xa5
 8008c0a:	f015 ffb7 	bl	801eb7c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4413      	add	r3, r2
 8008c1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	f023 0307 	bic.w	r3, r3, #7
 8008c26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	f003 0307 	and.w	r3, r3, #7
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00a      	beq.n	8008c48 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	617b      	str	r3, [r7, #20]
}
 8008c44:	bf00      	nop
 8008c46:	e7fe      	b.n	8008c46 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d01f      	beq.n	8008c8e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c4e:	2300      	movs	r3, #0
 8008c50:	61fb      	str	r3, [r7, #28]
 8008c52:	e012      	b.n	8008c7a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	4413      	add	r3, r2
 8008c5a:	7819      	ldrb	r1, [r3, #0]
 8008c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	4413      	add	r3, r2
 8008c62:	3334      	adds	r3, #52	; 0x34
 8008c64:	460a      	mov	r2, r1
 8008c66:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c68:	68ba      	ldr	r2, [r7, #8]
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d006      	beq.n	8008c82 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	3301      	adds	r3, #1
 8008c78:	61fb      	str	r3, [r7, #28]
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	2b0f      	cmp	r3, #15
 8008c7e:	d9e9      	bls.n	8008c54 <prvInitialiseNewTask+0x64>
 8008c80:	e000      	b.n	8008c84 <prvInitialiseNewTask+0x94>
			{
				break;
 8008c82:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c8c:	e003      	b.n	8008c96 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c98:	2b37      	cmp	r3, #55	; 0x37
 8008c9a:	d901      	bls.n	8008ca0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c9c:	2337      	movs	r3, #55	; 0x37
 8008c9e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ca4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008caa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cae:	2200      	movs	r2, #0
 8008cb0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb4:	3304      	adds	r3, #4
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7fe fd64 	bl	8007784 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbe:	3318      	adds	r3, #24
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fe fd5f 	bl	8007784 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cda:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cee:	3354      	adds	r3, #84	; 0x54
 8008cf0:	2260      	movs	r2, #96	; 0x60
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f015 ff41 	bl	801eb7c <memset>
 8008cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfc:	4a0c      	ldr	r2, [pc, #48]	; (8008d30 <prvInitialiseNewTask+0x140>)
 8008cfe:	659a      	str	r2, [r3, #88]	; 0x58
 8008d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d02:	4a0c      	ldr	r2, [pc, #48]	; (8008d34 <prvInitialiseNewTask+0x144>)
 8008d04:	65da      	str	r2, [r3, #92]	; 0x5c
 8008d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d08:	4a0b      	ldr	r2, [pc, #44]	; (8008d38 <prvInitialiseNewTask+0x148>)
 8008d0a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008d0c:	683a      	ldr	r2, [r7, #0]
 8008d0e:	68f9      	ldr	r1, [r7, #12]
 8008d10:	69b8      	ldr	r0, [r7, #24]
 8008d12:	f001 fae3 	bl	800a2dc <pxPortInitialiseStack>
 8008d16:	4602      	mov	r2, r0
 8008d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d002      	beq.n	8008d28 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d26:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d28:	bf00      	nop
 8008d2a:	3720      	adds	r7, #32
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	08025c64 	.word	0x08025c64
 8008d34:	08025c84 	.word	0x08025c84
 8008d38:	08025c44 	.word	0x08025c44

08008d3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008d44:	f001 fbf6 	bl	800a534 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d48:	4b2d      	ldr	r3, [pc, #180]	; (8008e00 <prvAddNewTaskToReadyList+0xc4>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	4a2c      	ldr	r2, [pc, #176]	; (8008e00 <prvAddNewTaskToReadyList+0xc4>)
 8008d50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d52:	4b2c      	ldr	r3, [pc, #176]	; (8008e04 <prvAddNewTaskToReadyList+0xc8>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d109      	bne.n	8008d6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d5a:	4a2a      	ldr	r2, [pc, #168]	; (8008e04 <prvAddNewTaskToReadyList+0xc8>)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d60:	4b27      	ldr	r3, [pc, #156]	; (8008e00 <prvAddNewTaskToReadyList+0xc4>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d110      	bne.n	8008d8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d68:	f000 fcba 	bl	80096e0 <prvInitialiseTaskLists>
 8008d6c:	e00d      	b.n	8008d8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008d6e:	4b26      	ldr	r3, [pc, #152]	; (8008e08 <prvAddNewTaskToReadyList+0xcc>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d109      	bne.n	8008d8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d76:	4b23      	ldr	r3, [pc, #140]	; (8008e04 <prvAddNewTaskToReadyList+0xc8>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d802      	bhi.n	8008d8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d84:	4a1f      	ldr	r2, [pc, #124]	; (8008e04 <prvAddNewTaskToReadyList+0xc8>)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d8a:	4b20      	ldr	r3, [pc, #128]	; (8008e0c <prvAddNewTaskToReadyList+0xd0>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	4a1e      	ldr	r2, [pc, #120]	; (8008e0c <prvAddNewTaskToReadyList+0xd0>)
 8008d92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008d94:	4b1d      	ldr	r3, [pc, #116]	; (8008e0c <prvAddNewTaskToReadyList+0xd0>)
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008da0:	4b1b      	ldr	r3, [pc, #108]	; (8008e10 <prvAddNewTaskToReadyList+0xd4>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d903      	bls.n	8008db0 <prvAddNewTaskToReadyList+0x74>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dac:	4a18      	ldr	r2, [pc, #96]	; (8008e10 <prvAddNewTaskToReadyList+0xd4>)
 8008dae:	6013      	str	r3, [r2, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db4:	4613      	mov	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4413      	add	r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4a15      	ldr	r2, [pc, #84]	; (8008e14 <prvAddNewTaskToReadyList+0xd8>)
 8008dbe:	441a      	add	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	3304      	adds	r3, #4
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4610      	mov	r0, r2
 8008dc8:	f7fe fce9 	bl	800779e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008dcc:	f001 fbe2 	bl	800a594 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008dd0:	4b0d      	ldr	r3, [pc, #52]	; (8008e08 <prvAddNewTaskToReadyList+0xcc>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d00e      	beq.n	8008df6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008dd8:	4b0a      	ldr	r3, [pc, #40]	; (8008e04 <prvAddNewTaskToReadyList+0xc8>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d207      	bcs.n	8008df6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008de6:	4b0c      	ldr	r3, [pc, #48]	; (8008e18 <prvAddNewTaskToReadyList+0xdc>)
 8008de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dec:	601a      	str	r2, [r3, #0]
 8008dee:	f3bf 8f4f 	dsb	sy
 8008df2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008df6:	bf00      	nop
 8008df8:	3708      	adds	r7, #8
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	20001278 	.word	0x20001278
 8008e04:	20000da4 	.word	0x20000da4
 8008e08:	20001284 	.word	0x20001284
 8008e0c:	20001294 	.word	0x20001294
 8008e10:	20001280 	.word	0x20001280
 8008e14:	20000da8 	.word	0x20000da8
 8008e18:	e000ed04 	.word	0xe000ed04

08008e1c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008e24:	f001 fb86 	bl	800a534 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d102      	bne.n	8008e34 <vTaskDelete+0x18>
 8008e2e:	4b2c      	ldr	r3, [pc, #176]	; (8008ee0 <vTaskDelete+0xc4>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	e000      	b.n	8008e36 <vTaskDelete+0x1a>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7fe fd0b 	bl	8007858 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d004      	beq.n	8008e54 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	3318      	adds	r3, #24
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7fe fd02 	bl	8007858 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008e54:	4b23      	ldr	r3, [pc, #140]	; (8008ee4 <vTaskDelete+0xc8>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	4a22      	ldr	r2, [pc, #136]	; (8008ee4 <vTaskDelete+0xc8>)
 8008e5c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008e5e:	4b20      	ldr	r3, [pc, #128]	; (8008ee0 <vTaskDelete+0xc4>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d10b      	bne.n	8008e80 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	3304      	adds	r3, #4
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	481e      	ldr	r0, [pc, #120]	; (8008ee8 <vTaskDelete+0xcc>)
 8008e70:	f7fe fc95 	bl	800779e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008e74:	4b1d      	ldr	r3, [pc, #116]	; (8008eec <vTaskDelete+0xd0>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	4a1c      	ldr	r2, [pc, #112]	; (8008eec <vTaskDelete+0xd0>)
 8008e7c:	6013      	str	r3, [r2, #0]
 8008e7e:	e009      	b.n	8008e94 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008e80:	4b1b      	ldr	r3, [pc, #108]	; (8008ef0 <vTaskDelete+0xd4>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	3b01      	subs	r3, #1
 8008e86:	4a1a      	ldr	r2, [pc, #104]	; (8008ef0 <vTaskDelete+0xd4>)
 8008e88:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8008e8a:	68f8      	ldr	r0, [r7, #12]
 8008e8c:	f000 fc96 	bl	80097bc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008e90:	f000 fcc8 	bl	8009824 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8008e94:	f001 fb7e 	bl	800a594 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008e98:	4b16      	ldr	r3, [pc, #88]	; (8008ef4 <vTaskDelete+0xd8>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d01b      	beq.n	8008ed8 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8008ea0:	4b0f      	ldr	r3, [pc, #60]	; (8008ee0 <vTaskDelete+0xc4>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d116      	bne.n	8008ed8 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008eaa:	4b13      	ldr	r3, [pc, #76]	; (8008ef8 <vTaskDelete+0xdc>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00a      	beq.n	8008ec8 <vTaskDelete+0xac>
	__asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	60bb      	str	r3, [r7, #8]
}
 8008ec4:	bf00      	nop
 8008ec6:	e7fe      	b.n	8008ec6 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8008ec8:	4b0c      	ldr	r3, [pc, #48]	; (8008efc <vTaskDelete+0xe0>)
 8008eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ece:	601a      	str	r2, [r3, #0]
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ed8:	bf00      	nop
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	20000da4 	.word	0x20000da4
 8008ee4:	20001294 	.word	0x20001294
 8008ee8:	2000124c 	.word	0x2000124c
 8008eec:	20001260 	.word	0x20001260
 8008ef0:	20001278 	.word	0x20001278
 8008ef4:	20001284 	.word	0x20001284
 8008ef8:	200012a0 	.word	0x200012a0
 8008efc:	e000ed04 	.word	0xe000ed04

08008f00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d017      	beq.n	8008f42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008f12:	4b13      	ldr	r3, [pc, #76]	; (8008f60 <vTaskDelay+0x60>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00a      	beq.n	8008f30 <vTaskDelay+0x30>
	__asm volatile
 8008f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1e:	f383 8811 	msr	BASEPRI, r3
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	60bb      	str	r3, [r7, #8]
}
 8008f2c:	bf00      	nop
 8008f2e:	e7fe      	b.n	8008f2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008f30:	f000 f88a 	bl	8009048 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f34:	2100      	movs	r1, #0
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fe2e 	bl	8009b98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f3c:	f000 f892 	bl	8009064 <xTaskResumeAll>
 8008f40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d107      	bne.n	8008f58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008f48:	4b06      	ldr	r3, [pc, #24]	; (8008f64 <vTaskDelay+0x64>)
 8008f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f4e:	601a      	str	r2, [r3, #0]
 8008f50:	f3bf 8f4f 	dsb	sy
 8008f54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f58:	bf00      	nop
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	200012a0 	.word	0x200012a0
 8008f64:	e000ed04 	.word	0xe000ed04

08008f68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b08a      	sub	sp, #40	; 0x28
 8008f6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008f72:	2300      	movs	r3, #0
 8008f74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008f76:	463a      	mov	r2, r7
 8008f78:	1d39      	adds	r1, r7, #4
 8008f7a:	f107 0308 	add.w	r3, r7, #8
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fe fbac 	bl	80076dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	9202      	str	r2, [sp, #8]
 8008f8c:	9301      	str	r3, [sp, #4]
 8008f8e:	2300      	movs	r3, #0
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	2300      	movs	r3, #0
 8008f94:	460a      	mov	r2, r1
 8008f96:	4924      	ldr	r1, [pc, #144]	; (8009028 <vTaskStartScheduler+0xc0>)
 8008f98:	4824      	ldr	r0, [pc, #144]	; (800902c <vTaskStartScheduler+0xc4>)
 8008f9a:	f7ff fd87 	bl	8008aac <xTaskCreateStatic>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	4a23      	ldr	r2, [pc, #140]	; (8009030 <vTaskStartScheduler+0xc8>)
 8008fa2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008fa4:	4b22      	ldr	r3, [pc, #136]	; (8009030 <vTaskStartScheduler+0xc8>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d002      	beq.n	8008fb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008fac:	2301      	movs	r3, #1
 8008fae:	617b      	str	r3, [r7, #20]
 8008fb0:	e001      	b.n	8008fb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d102      	bne.n	8008fc2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008fbc:	f000 fe40 	bl	8009c40 <xTimerCreateTimerTask>
 8008fc0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d11b      	bne.n	8009000 <vTaskStartScheduler+0x98>
	__asm volatile
 8008fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fcc:	f383 8811 	msr	BASEPRI, r3
 8008fd0:	f3bf 8f6f 	isb	sy
 8008fd4:	f3bf 8f4f 	dsb	sy
 8008fd8:	613b      	str	r3, [r7, #16]
}
 8008fda:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008fdc:	4b15      	ldr	r3, [pc, #84]	; (8009034 <vTaskStartScheduler+0xcc>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	3354      	adds	r3, #84	; 0x54
 8008fe2:	4a15      	ldr	r2, [pc, #84]	; (8009038 <vTaskStartScheduler+0xd0>)
 8008fe4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008fe6:	4b15      	ldr	r3, [pc, #84]	; (800903c <vTaskStartScheduler+0xd4>)
 8008fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008fee:	4b14      	ldr	r3, [pc, #80]	; (8009040 <vTaskStartScheduler+0xd8>)
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ff4:	4b13      	ldr	r3, [pc, #76]	; (8009044 <vTaskStartScheduler+0xdc>)
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ffa:	f001 f9f9 	bl	800a3f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008ffe:	e00e      	b.n	800901e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009006:	d10a      	bne.n	800901e <vTaskStartScheduler+0xb6>
	__asm volatile
 8009008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900c:	f383 8811 	msr	BASEPRI, r3
 8009010:	f3bf 8f6f 	isb	sy
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	60fb      	str	r3, [r7, #12]
}
 800901a:	bf00      	nop
 800901c:	e7fe      	b.n	800901c <vTaskStartScheduler+0xb4>
}
 800901e:	bf00      	nop
 8009020:	3718      	adds	r7, #24
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	080219a4 	.word	0x080219a4
 800902c:	080096b1 	.word	0x080096b1
 8009030:	2000129c 	.word	0x2000129c
 8009034:	20000da4 	.word	0x20000da4
 8009038:	10000138 	.word	0x10000138
 800903c:	20001298 	.word	0x20001298
 8009040:	20001284 	.word	0x20001284
 8009044:	2000127c 	.word	0x2000127c

08009048 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009048:	b480      	push	{r7}
 800904a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800904c:	4b04      	ldr	r3, [pc, #16]	; (8009060 <vTaskSuspendAll+0x18>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	3301      	adds	r3, #1
 8009052:	4a03      	ldr	r2, [pc, #12]	; (8009060 <vTaskSuspendAll+0x18>)
 8009054:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009056:	bf00      	nop
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr
 8009060:	200012a0 	.word	0x200012a0

08009064 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800906a:	2300      	movs	r3, #0
 800906c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800906e:	2300      	movs	r3, #0
 8009070:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009072:	4b42      	ldr	r3, [pc, #264]	; (800917c <xTaskResumeAll+0x118>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d10a      	bne.n	8009090 <xTaskResumeAll+0x2c>
	__asm volatile
 800907a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	603b      	str	r3, [r7, #0]
}
 800908c:	bf00      	nop
 800908e:	e7fe      	b.n	800908e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009090:	f001 fa50 	bl	800a534 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009094:	4b39      	ldr	r3, [pc, #228]	; (800917c <xTaskResumeAll+0x118>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	3b01      	subs	r3, #1
 800909a:	4a38      	ldr	r2, [pc, #224]	; (800917c <xTaskResumeAll+0x118>)
 800909c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800909e:	4b37      	ldr	r3, [pc, #220]	; (800917c <xTaskResumeAll+0x118>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d162      	bne.n	800916c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80090a6:	4b36      	ldr	r3, [pc, #216]	; (8009180 <xTaskResumeAll+0x11c>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d05e      	beq.n	800916c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090ae:	e02f      	b.n	8009110 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090b0:	4b34      	ldr	r3, [pc, #208]	; (8009184 <xTaskResumeAll+0x120>)
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	3318      	adds	r3, #24
 80090bc:	4618      	mov	r0, r3
 80090be:	f7fe fbcb 	bl	8007858 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	3304      	adds	r3, #4
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7fe fbc6 	bl	8007858 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090d0:	4b2d      	ldr	r3, [pc, #180]	; (8009188 <xTaskResumeAll+0x124>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d903      	bls.n	80090e0 <xTaskResumeAll+0x7c>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090dc:	4a2a      	ldr	r2, [pc, #168]	; (8009188 <xTaskResumeAll+0x124>)
 80090de:	6013      	str	r3, [r2, #0]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e4:	4613      	mov	r3, r2
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	4413      	add	r3, r2
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	4a27      	ldr	r2, [pc, #156]	; (800918c <xTaskResumeAll+0x128>)
 80090ee:	441a      	add	r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	3304      	adds	r3, #4
 80090f4:	4619      	mov	r1, r3
 80090f6:	4610      	mov	r0, r2
 80090f8:	f7fe fb51 	bl	800779e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009100:	4b23      	ldr	r3, [pc, #140]	; (8009190 <xTaskResumeAll+0x12c>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009106:	429a      	cmp	r2, r3
 8009108:	d302      	bcc.n	8009110 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800910a:	4b22      	ldr	r3, [pc, #136]	; (8009194 <xTaskResumeAll+0x130>)
 800910c:	2201      	movs	r2, #1
 800910e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009110:	4b1c      	ldr	r3, [pc, #112]	; (8009184 <xTaskResumeAll+0x120>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d1cb      	bne.n	80090b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d001      	beq.n	8009122 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800911e:	f000 fb81 	bl	8009824 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009122:	4b1d      	ldr	r3, [pc, #116]	; (8009198 <xTaskResumeAll+0x134>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d010      	beq.n	8009150 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800912e:	f000 f859 	bl	80091e4 <xTaskIncrementTick>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d002      	beq.n	800913e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009138:	4b16      	ldr	r3, [pc, #88]	; (8009194 <xTaskResumeAll+0x130>)
 800913a:	2201      	movs	r2, #1
 800913c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	3b01      	subs	r3, #1
 8009142:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d1f1      	bne.n	800912e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800914a:	4b13      	ldr	r3, [pc, #76]	; (8009198 <xTaskResumeAll+0x134>)
 800914c:	2200      	movs	r2, #0
 800914e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009150:	4b10      	ldr	r3, [pc, #64]	; (8009194 <xTaskResumeAll+0x130>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d009      	beq.n	800916c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009158:	2301      	movs	r3, #1
 800915a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800915c:	4b0f      	ldr	r3, [pc, #60]	; (800919c <xTaskResumeAll+0x138>)
 800915e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009162:	601a      	str	r2, [r3, #0]
 8009164:	f3bf 8f4f 	dsb	sy
 8009168:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800916c:	f001 fa12 	bl	800a594 <vPortExitCritical>

	return xAlreadyYielded;
 8009170:	68bb      	ldr	r3, [r7, #8]
}
 8009172:	4618      	mov	r0, r3
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	200012a0 	.word	0x200012a0
 8009180:	20001278 	.word	0x20001278
 8009184:	20001238 	.word	0x20001238
 8009188:	20001280 	.word	0x20001280
 800918c:	20000da8 	.word	0x20000da8
 8009190:	20000da4 	.word	0x20000da4
 8009194:	2000128c 	.word	0x2000128c
 8009198:	20001288 	.word	0x20001288
 800919c:	e000ed04 	.word	0xe000ed04

080091a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80091a6:	4b05      	ldr	r3, [pc, #20]	; (80091bc <xTaskGetTickCount+0x1c>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80091ac:	687b      	ldr	r3, [r7, #4]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	370c      	adds	r7, #12
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	2000127c 	.word	0x2000127c

080091c0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80091c6:	f001 fa97 	bl	800a6f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80091ca:	2300      	movs	r3, #0
 80091cc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80091ce:	4b04      	ldr	r3, [pc, #16]	; (80091e0 <xTaskGetTickCountFromISR+0x20>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80091d4:	683b      	ldr	r3, [r7, #0]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3708      	adds	r7, #8
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	2000127c 	.word	0x2000127c

080091e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b086      	sub	sp, #24
 80091e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80091ea:	2300      	movs	r3, #0
 80091ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091ee:	4b4f      	ldr	r3, [pc, #316]	; (800932c <xTaskIncrementTick+0x148>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f040 808f 	bne.w	8009316 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80091f8:	4b4d      	ldr	r3, [pc, #308]	; (8009330 <xTaskIncrementTick+0x14c>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	3301      	adds	r3, #1
 80091fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009200:	4a4b      	ldr	r2, [pc, #300]	; (8009330 <xTaskIncrementTick+0x14c>)
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d120      	bne.n	800924e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800920c:	4b49      	ldr	r3, [pc, #292]	; (8009334 <xTaskIncrementTick+0x150>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00a      	beq.n	800922c <xTaskIncrementTick+0x48>
	__asm volatile
 8009216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921a:	f383 8811 	msr	BASEPRI, r3
 800921e:	f3bf 8f6f 	isb	sy
 8009222:	f3bf 8f4f 	dsb	sy
 8009226:	603b      	str	r3, [r7, #0]
}
 8009228:	bf00      	nop
 800922a:	e7fe      	b.n	800922a <xTaskIncrementTick+0x46>
 800922c:	4b41      	ldr	r3, [pc, #260]	; (8009334 <xTaskIncrementTick+0x150>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	60fb      	str	r3, [r7, #12]
 8009232:	4b41      	ldr	r3, [pc, #260]	; (8009338 <xTaskIncrementTick+0x154>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a3f      	ldr	r2, [pc, #252]	; (8009334 <xTaskIncrementTick+0x150>)
 8009238:	6013      	str	r3, [r2, #0]
 800923a:	4a3f      	ldr	r2, [pc, #252]	; (8009338 <xTaskIncrementTick+0x154>)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6013      	str	r3, [r2, #0]
 8009240:	4b3e      	ldr	r3, [pc, #248]	; (800933c <xTaskIncrementTick+0x158>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	3301      	adds	r3, #1
 8009246:	4a3d      	ldr	r2, [pc, #244]	; (800933c <xTaskIncrementTick+0x158>)
 8009248:	6013      	str	r3, [r2, #0]
 800924a:	f000 faeb 	bl	8009824 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800924e:	4b3c      	ldr	r3, [pc, #240]	; (8009340 <xTaskIncrementTick+0x15c>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	693a      	ldr	r2, [r7, #16]
 8009254:	429a      	cmp	r2, r3
 8009256:	d349      	bcc.n	80092ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009258:	4b36      	ldr	r3, [pc, #216]	; (8009334 <xTaskIncrementTick+0x150>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d104      	bne.n	800926c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009262:	4b37      	ldr	r3, [pc, #220]	; (8009340 <xTaskIncrementTick+0x15c>)
 8009264:	f04f 32ff 	mov.w	r2, #4294967295
 8009268:	601a      	str	r2, [r3, #0]
					break;
 800926a:	e03f      	b.n	80092ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800926c:	4b31      	ldr	r3, [pc, #196]	; (8009334 <xTaskIncrementTick+0x150>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800927c:	693a      	ldr	r2, [r7, #16]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	429a      	cmp	r2, r3
 8009282:	d203      	bcs.n	800928c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009284:	4a2e      	ldr	r2, [pc, #184]	; (8009340 <xTaskIncrementTick+0x15c>)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800928a:	e02f      	b.n	80092ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	3304      	adds	r3, #4
 8009290:	4618      	mov	r0, r3
 8009292:	f7fe fae1 	bl	8007858 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800929a:	2b00      	cmp	r3, #0
 800929c:	d004      	beq.n	80092a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	3318      	adds	r3, #24
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7fe fad8 	bl	8007858 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ac:	4b25      	ldr	r3, [pc, #148]	; (8009344 <xTaskIncrementTick+0x160>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d903      	bls.n	80092bc <xTaskIncrementTick+0xd8>
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b8:	4a22      	ldr	r2, [pc, #136]	; (8009344 <xTaskIncrementTick+0x160>)
 80092ba:	6013      	str	r3, [r2, #0]
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c0:	4613      	mov	r3, r2
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	4413      	add	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4a1f      	ldr	r2, [pc, #124]	; (8009348 <xTaskIncrementTick+0x164>)
 80092ca:	441a      	add	r2, r3
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	3304      	adds	r3, #4
 80092d0:	4619      	mov	r1, r3
 80092d2:	4610      	mov	r0, r2
 80092d4:	f7fe fa63 	bl	800779e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092dc:	4b1b      	ldr	r3, [pc, #108]	; (800934c <xTaskIncrementTick+0x168>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d3b8      	bcc.n	8009258 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80092e6:	2301      	movs	r3, #1
 80092e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092ea:	e7b5      	b.n	8009258 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80092ec:	4b17      	ldr	r3, [pc, #92]	; (800934c <xTaskIncrementTick+0x168>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f2:	4915      	ldr	r1, [pc, #84]	; (8009348 <xTaskIncrementTick+0x164>)
 80092f4:	4613      	mov	r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	4413      	add	r3, r2
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	440b      	add	r3, r1
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2b01      	cmp	r3, #1
 8009302:	d901      	bls.n	8009308 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009304:	2301      	movs	r3, #1
 8009306:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009308:	4b11      	ldr	r3, [pc, #68]	; (8009350 <xTaskIncrementTick+0x16c>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d007      	beq.n	8009320 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009310:	2301      	movs	r3, #1
 8009312:	617b      	str	r3, [r7, #20]
 8009314:	e004      	b.n	8009320 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009316:	4b0f      	ldr	r3, [pc, #60]	; (8009354 <xTaskIncrementTick+0x170>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	3301      	adds	r3, #1
 800931c:	4a0d      	ldr	r2, [pc, #52]	; (8009354 <xTaskIncrementTick+0x170>)
 800931e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009320:	697b      	ldr	r3, [r7, #20]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3718      	adds	r7, #24
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	200012a0 	.word	0x200012a0
 8009330:	2000127c 	.word	0x2000127c
 8009334:	20001230 	.word	0x20001230
 8009338:	20001234 	.word	0x20001234
 800933c:	20001290 	.word	0x20001290
 8009340:	20001298 	.word	0x20001298
 8009344:	20001280 	.word	0x20001280
 8009348:	20000da8 	.word	0x20000da8
 800934c:	20000da4 	.word	0x20000da4
 8009350:	2000128c 	.word	0x2000128c
 8009354:	20001288 	.word	0x20001288

08009358 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800935e:	4b32      	ldr	r3, [pc, #200]	; (8009428 <vTaskSwitchContext+0xd0>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d003      	beq.n	800936e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009366:	4b31      	ldr	r3, [pc, #196]	; (800942c <vTaskSwitchContext+0xd4>)
 8009368:	2201      	movs	r2, #1
 800936a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800936c:	e057      	b.n	800941e <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 800936e:	4b2f      	ldr	r3, [pc, #188]	; (800942c <vTaskSwitchContext+0xd4>)
 8009370:	2200      	movs	r2, #0
 8009372:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009374:	4b2e      	ldr	r3, [pc, #184]	; (8009430 <vTaskSwitchContext+0xd8>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	4b2d      	ldr	r3, [pc, #180]	; (8009430 <vTaskSwitchContext+0xd8>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009380:	429a      	cmp	r2, r3
 8009382:	d808      	bhi.n	8009396 <vTaskSwitchContext+0x3e>
 8009384:	4b2a      	ldr	r3, [pc, #168]	; (8009430 <vTaskSwitchContext+0xd8>)
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	4b29      	ldr	r3, [pc, #164]	; (8009430 <vTaskSwitchContext+0xd8>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	3334      	adds	r3, #52	; 0x34
 800938e:	4619      	mov	r1, r3
 8009390:	4610      	mov	r0, r2
 8009392:	f7f7 fdd5 	bl	8000f40 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009396:	4b27      	ldr	r3, [pc, #156]	; (8009434 <vTaskSwitchContext+0xdc>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	60fb      	str	r3, [r7, #12]
 800939c:	e010      	b.n	80093c0 <vTaskSwitchContext+0x68>
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10a      	bne.n	80093ba <vTaskSwitchContext+0x62>
	__asm volatile
 80093a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	607b      	str	r3, [r7, #4]
}
 80093b6:	bf00      	nop
 80093b8:	e7fe      	b.n	80093b8 <vTaskSwitchContext+0x60>
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	3b01      	subs	r3, #1
 80093be:	60fb      	str	r3, [r7, #12]
 80093c0:	491d      	ldr	r1, [pc, #116]	; (8009438 <vTaskSwitchContext+0xe0>)
 80093c2:	68fa      	ldr	r2, [r7, #12]
 80093c4:	4613      	mov	r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	4413      	add	r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	440b      	add	r3, r1
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d0e4      	beq.n	800939e <vTaskSwitchContext+0x46>
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	4613      	mov	r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	4413      	add	r3, r2
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	4a16      	ldr	r2, [pc, #88]	; (8009438 <vTaskSwitchContext+0xe0>)
 80093e0:	4413      	add	r3, r2
 80093e2:	60bb      	str	r3, [r7, #8]
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	685a      	ldr	r2, [r3, #4]
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	605a      	str	r2, [r3, #4]
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	685a      	ldr	r2, [r3, #4]
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	3308      	adds	r3, #8
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d104      	bne.n	8009404 <vTaskSwitchContext+0xac>
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	685a      	ldr	r2, [r3, #4]
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	605a      	str	r2, [r3, #4]
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	4a09      	ldr	r2, [pc, #36]	; (8009430 <vTaskSwitchContext+0xd8>)
 800940c:	6013      	str	r3, [r2, #0]
 800940e:	4a09      	ldr	r2, [pc, #36]	; (8009434 <vTaskSwitchContext+0xdc>)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009414:	4b06      	ldr	r3, [pc, #24]	; (8009430 <vTaskSwitchContext+0xd8>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	3354      	adds	r3, #84	; 0x54
 800941a:	4a08      	ldr	r2, [pc, #32]	; (800943c <vTaskSwitchContext+0xe4>)
 800941c:	6013      	str	r3, [r2, #0]
}
 800941e:	bf00      	nop
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	200012a0 	.word	0x200012a0
 800942c:	2000128c 	.word	0x2000128c
 8009430:	20000da4 	.word	0x20000da4
 8009434:	20001280 	.word	0x20001280
 8009438:	20000da8 	.word	0x20000da8
 800943c:	10000138 	.word	0x10000138

08009440 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d10a      	bne.n	8009466 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009454:	f383 8811 	msr	BASEPRI, r3
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	60fb      	str	r3, [r7, #12]
}
 8009462:	bf00      	nop
 8009464:	e7fe      	b.n	8009464 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009466:	4b07      	ldr	r3, [pc, #28]	; (8009484 <vTaskPlaceOnEventList+0x44>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	3318      	adds	r3, #24
 800946c:	4619      	mov	r1, r3
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f7fe f9b9 	bl	80077e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009474:	2101      	movs	r1, #1
 8009476:	6838      	ldr	r0, [r7, #0]
 8009478:	f000 fb8e 	bl	8009b98 <prvAddCurrentTaskToDelayedList>
}
 800947c:	bf00      	nop
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}
 8009484:	20000da4 	.word	0x20000da4

08009488 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10a      	bne.n	80094b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800949a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	617b      	str	r3, [r7, #20]
}
 80094ac:	bf00      	nop
 80094ae:	e7fe      	b.n	80094ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094b0:	4b0a      	ldr	r3, [pc, #40]	; (80094dc <vTaskPlaceOnEventListRestricted+0x54>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	3318      	adds	r3, #24
 80094b6:	4619      	mov	r1, r3
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f7fe f970 	bl	800779e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d002      	beq.n	80094ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80094c4:	f04f 33ff 	mov.w	r3, #4294967295
 80094c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80094ca:	6879      	ldr	r1, [r7, #4]
 80094cc:	68b8      	ldr	r0, [r7, #8]
 80094ce:	f000 fb63 	bl	8009b98 <prvAddCurrentTaskToDelayedList>
	}
 80094d2:	bf00      	nop
 80094d4:	3718      	adds	r7, #24
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	20000da4 	.word	0x20000da4

080094e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b086      	sub	sp, #24
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d10a      	bne.n	800950c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80094f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fa:	f383 8811 	msr	BASEPRI, r3
 80094fe:	f3bf 8f6f 	isb	sy
 8009502:	f3bf 8f4f 	dsb	sy
 8009506:	60fb      	str	r3, [r7, #12]
}
 8009508:	bf00      	nop
 800950a:	e7fe      	b.n	800950a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	3318      	adds	r3, #24
 8009510:	4618      	mov	r0, r3
 8009512:	f7fe f9a1 	bl	8007858 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009516:	4b1e      	ldr	r3, [pc, #120]	; (8009590 <xTaskRemoveFromEventList+0xb0>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d11d      	bne.n	800955a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	3304      	adds	r3, #4
 8009522:	4618      	mov	r0, r3
 8009524:	f7fe f998 	bl	8007858 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800952c:	4b19      	ldr	r3, [pc, #100]	; (8009594 <xTaskRemoveFromEventList+0xb4>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	429a      	cmp	r2, r3
 8009532:	d903      	bls.n	800953c <xTaskRemoveFromEventList+0x5c>
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009538:	4a16      	ldr	r2, [pc, #88]	; (8009594 <xTaskRemoveFromEventList+0xb4>)
 800953a:	6013      	str	r3, [r2, #0]
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009540:	4613      	mov	r3, r2
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	4413      	add	r3, r2
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	4a13      	ldr	r2, [pc, #76]	; (8009598 <xTaskRemoveFromEventList+0xb8>)
 800954a:	441a      	add	r2, r3
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	3304      	adds	r3, #4
 8009550:	4619      	mov	r1, r3
 8009552:	4610      	mov	r0, r2
 8009554:	f7fe f923 	bl	800779e <vListInsertEnd>
 8009558:	e005      	b.n	8009566 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	3318      	adds	r3, #24
 800955e:	4619      	mov	r1, r3
 8009560:	480e      	ldr	r0, [pc, #56]	; (800959c <xTaskRemoveFromEventList+0xbc>)
 8009562:	f7fe f91c 	bl	800779e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800956a:	4b0d      	ldr	r3, [pc, #52]	; (80095a0 <xTaskRemoveFromEventList+0xc0>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009570:	429a      	cmp	r2, r3
 8009572:	d905      	bls.n	8009580 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009574:	2301      	movs	r3, #1
 8009576:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009578:	4b0a      	ldr	r3, [pc, #40]	; (80095a4 <xTaskRemoveFromEventList+0xc4>)
 800957a:	2201      	movs	r2, #1
 800957c:	601a      	str	r2, [r3, #0]
 800957e:	e001      	b.n	8009584 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009580:	2300      	movs	r3, #0
 8009582:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009584:	697b      	ldr	r3, [r7, #20]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3718      	adds	r7, #24
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	200012a0 	.word	0x200012a0
 8009594:	20001280 	.word	0x20001280
 8009598:	20000da8 	.word	0x20000da8
 800959c:	20001238 	.word	0x20001238
 80095a0:	20000da4 	.word	0x20000da4
 80095a4:	2000128c 	.word	0x2000128c

080095a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80095b0:	4b06      	ldr	r3, [pc, #24]	; (80095cc <vTaskInternalSetTimeOutState+0x24>)
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80095b8:	4b05      	ldr	r3, [pc, #20]	; (80095d0 <vTaskInternalSetTimeOutState+0x28>)
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	605a      	str	r2, [r3, #4]
}
 80095c0:	bf00      	nop
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr
 80095cc:	20001290 	.word	0x20001290
 80095d0:	2000127c 	.word	0x2000127c

080095d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b088      	sub	sp, #32
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d10a      	bne.n	80095fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80095e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e8:	f383 8811 	msr	BASEPRI, r3
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	613b      	str	r3, [r7, #16]
}
 80095f6:	bf00      	nop
 80095f8:	e7fe      	b.n	80095f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d10a      	bne.n	8009616 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009604:	f383 8811 	msr	BASEPRI, r3
 8009608:	f3bf 8f6f 	isb	sy
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	60fb      	str	r3, [r7, #12]
}
 8009612:	bf00      	nop
 8009614:	e7fe      	b.n	8009614 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009616:	f000 ff8d 	bl	800a534 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800961a:	4b1d      	ldr	r3, [pc, #116]	; (8009690 <xTaskCheckForTimeOut+0xbc>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	69ba      	ldr	r2, [r7, #24]
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009632:	d102      	bne.n	800963a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009634:	2300      	movs	r3, #0
 8009636:	61fb      	str	r3, [r7, #28]
 8009638:	e023      	b.n	8009682 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	4b15      	ldr	r3, [pc, #84]	; (8009694 <xTaskCheckForTimeOut+0xc0>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	429a      	cmp	r2, r3
 8009644:	d007      	beq.n	8009656 <xTaskCheckForTimeOut+0x82>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	69ba      	ldr	r2, [r7, #24]
 800964c:	429a      	cmp	r2, r3
 800964e:	d302      	bcc.n	8009656 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009650:	2301      	movs	r3, #1
 8009652:	61fb      	str	r3, [r7, #28]
 8009654:	e015      	b.n	8009682 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	697a      	ldr	r2, [r7, #20]
 800965c:	429a      	cmp	r2, r3
 800965e:	d20b      	bcs.n	8009678 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	1ad2      	subs	r2, r2, r3
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7ff ff9b 	bl	80095a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009672:	2300      	movs	r3, #0
 8009674:	61fb      	str	r3, [r7, #28]
 8009676:	e004      	b.n	8009682 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	2200      	movs	r2, #0
 800967c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800967e:	2301      	movs	r3, #1
 8009680:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009682:	f000 ff87 	bl	800a594 <vPortExitCritical>

	return xReturn;
 8009686:	69fb      	ldr	r3, [r7, #28]
}
 8009688:	4618      	mov	r0, r3
 800968a:	3720      	adds	r7, #32
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	2000127c 	.word	0x2000127c
 8009694:	20001290 	.word	0x20001290

08009698 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009698:	b480      	push	{r7}
 800969a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800969c:	4b03      	ldr	r3, [pc, #12]	; (80096ac <vTaskMissedYield+0x14>)
 800969e:	2201      	movs	r2, #1
 80096a0:	601a      	str	r2, [r3, #0]
}
 80096a2:	bf00      	nop
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr
 80096ac:	2000128c 	.word	0x2000128c

080096b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80096b8:	f000 f852 	bl	8009760 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80096bc:	4b06      	ldr	r3, [pc, #24]	; (80096d8 <prvIdleTask+0x28>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d9f9      	bls.n	80096b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80096c4:	4b05      	ldr	r3, [pc, #20]	; (80096dc <prvIdleTask+0x2c>)
 80096c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096ca:	601a      	str	r2, [r3, #0]
 80096cc:	f3bf 8f4f 	dsb	sy
 80096d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80096d4:	e7f0      	b.n	80096b8 <prvIdleTask+0x8>
 80096d6:	bf00      	nop
 80096d8:	20000da8 	.word	0x20000da8
 80096dc:	e000ed04 	.word	0xe000ed04

080096e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096e6:	2300      	movs	r3, #0
 80096e8:	607b      	str	r3, [r7, #4]
 80096ea:	e00c      	b.n	8009706 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	4613      	mov	r3, r2
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	4413      	add	r3, r2
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4a12      	ldr	r2, [pc, #72]	; (8009740 <prvInitialiseTaskLists+0x60>)
 80096f8:	4413      	add	r3, r2
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fe f822 	bl	8007744 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	3301      	adds	r3, #1
 8009704:	607b      	str	r3, [r7, #4]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2b37      	cmp	r3, #55	; 0x37
 800970a:	d9ef      	bls.n	80096ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800970c:	480d      	ldr	r0, [pc, #52]	; (8009744 <prvInitialiseTaskLists+0x64>)
 800970e:	f7fe f819 	bl	8007744 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009712:	480d      	ldr	r0, [pc, #52]	; (8009748 <prvInitialiseTaskLists+0x68>)
 8009714:	f7fe f816 	bl	8007744 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009718:	480c      	ldr	r0, [pc, #48]	; (800974c <prvInitialiseTaskLists+0x6c>)
 800971a:	f7fe f813 	bl	8007744 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800971e:	480c      	ldr	r0, [pc, #48]	; (8009750 <prvInitialiseTaskLists+0x70>)
 8009720:	f7fe f810 	bl	8007744 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009724:	480b      	ldr	r0, [pc, #44]	; (8009754 <prvInitialiseTaskLists+0x74>)
 8009726:	f7fe f80d 	bl	8007744 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800972a:	4b0b      	ldr	r3, [pc, #44]	; (8009758 <prvInitialiseTaskLists+0x78>)
 800972c:	4a05      	ldr	r2, [pc, #20]	; (8009744 <prvInitialiseTaskLists+0x64>)
 800972e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009730:	4b0a      	ldr	r3, [pc, #40]	; (800975c <prvInitialiseTaskLists+0x7c>)
 8009732:	4a05      	ldr	r2, [pc, #20]	; (8009748 <prvInitialiseTaskLists+0x68>)
 8009734:	601a      	str	r2, [r3, #0]
}
 8009736:	bf00      	nop
 8009738:	3708      	adds	r7, #8
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	20000da8 	.word	0x20000da8
 8009744:	20001208 	.word	0x20001208
 8009748:	2000121c 	.word	0x2000121c
 800974c:	20001238 	.word	0x20001238
 8009750:	2000124c 	.word	0x2000124c
 8009754:	20001264 	.word	0x20001264
 8009758:	20001230 	.word	0x20001230
 800975c:	20001234 	.word	0x20001234

08009760 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009766:	e019      	b.n	800979c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009768:	f000 fee4 	bl	800a534 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800976c:	4b10      	ldr	r3, [pc, #64]	; (80097b0 <prvCheckTasksWaitingTermination+0x50>)
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	3304      	adds	r3, #4
 8009778:	4618      	mov	r0, r3
 800977a:	f7fe f86d 	bl	8007858 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800977e:	4b0d      	ldr	r3, [pc, #52]	; (80097b4 <prvCheckTasksWaitingTermination+0x54>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	3b01      	subs	r3, #1
 8009784:	4a0b      	ldr	r2, [pc, #44]	; (80097b4 <prvCheckTasksWaitingTermination+0x54>)
 8009786:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009788:	4b0b      	ldr	r3, [pc, #44]	; (80097b8 <prvCheckTasksWaitingTermination+0x58>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	3b01      	subs	r3, #1
 800978e:	4a0a      	ldr	r2, [pc, #40]	; (80097b8 <prvCheckTasksWaitingTermination+0x58>)
 8009790:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009792:	f000 feff 	bl	800a594 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f810 	bl	80097bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800979c:	4b06      	ldr	r3, [pc, #24]	; (80097b8 <prvCheckTasksWaitingTermination+0x58>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1e1      	bne.n	8009768 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80097a4:	bf00      	nop
 80097a6:	bf00      	nop
 80097a8:	3708      	adds	r7, #8
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	2000124c 	.word	0x2000124c
 80097b4:	20001278 	.word	0x20001278
 80097b8:	20001260 	.word	0x20001260

080097bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	3354      	adds	r3, #84	; 0x54
 80097c8:	4618      	mov	r0, r3
 80097ca:	f016 f8bb 	bl	801f944 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d108      	bne.n	80097ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097dc:	4618      	mov	r0, r3
 80097de:	f001 f897 	bl	800a910 <vPortFree>
				vPortFree( pxTCB );
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f001 f894 	bl	800a910 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80097e8:	e018      	b.n	800981c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d103      	bne.n	80097fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f001 f88b 	bl	800a910 <vPortFree>
	}
 80097fa:	e00f      	b.n	800981c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009802:	2b02      	cmp	r3, #2
 8009804:	d00a      	beq.n	800981c <prvDeleteTCB+0x60>
	__asm volatile
 8009806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980a:	f383 8811 	msr	BASEPRI, r3
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	60fb      	str	r3, [r7, #12]
}
 8009818:	bf00      	nop
 800981a:	e7fe      	b.n	800981a <prvDeleteTCB+0x5e>
	}
 800981c:	bf00      	nop
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800982a:	4b0c      	ldr	r3, [pc, #48]	; (800985c <prvResetNextTaskUnblockTime+0x38>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d104      	bne.n	800983e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009834:	4b0a      	ldr	r3, [pc, #40]	; (8009860 <prvResetNextTaskUnblockTime+0x3c>)
 8009836:	f04f 32ff 	mov.w	r2, #4294967295
 800983a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800983c:	e008      	b.n	8009850 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800983e:	4b07      	ldr	r3, [pc, #28]	; (800985c <prvResetNextTaskUnblockTime+0x38>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	4a04      	ldr	r2, [pc, #16]	; (8009860 <prvResetNextTaskUnblockTime+0x3c>)
 800984e:	6013      	str	r3, [r2, #0]
}
 8009850:	bf00      	nop
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr
 800985c:	20001230 	.word	0x20001230
 8009860:	20001298 	.word	0x20001298

08009864 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800986a:	4b05      	ldr	r3, [pc, #20]	; (8009880 <xTaskGetCurrentTaskHandle+0x1c>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009870:	687b      	ldr	r3, [r7, #4]
	}
 8009872:	4618      	mov	r0, r3
 8009874:	370c      	adds	r7, #12
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop
 8009880:	20000da4 	.word	0x20000da4

08009884 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800988a:	4b0b      	ldr	r3, [pc, #44]	; (80098b8 <xTaskGetSchedulerState+0x34>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d102      	bne.n	8009898 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009892:	2301      	movs	r3, #1
 8009894:	607b      	str	r3, [r7, #4]
 8009896:	e008      	b.n	80098aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009898:	4b08      	ldr	r3, [pc, #32]	; (80098bc <xTaskGetSchedulerState+0x38>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d102      	bne.n	80098a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80098a0:	2302      	movs	r3, #2
 80098a2:	607b      	str	r3, [r7, #4]
 80098a4:	e001      	b.n	80098aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80098a6:	2300      	movs	r3, #0
 80098a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80098aa:	687b      	ldr	r3, [r7, #4]
	}
 80098ac:	4618      	mov	r0, r3
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	20001284 	.word	0x20001284
 80098bc:	200012a0 	.word	0x200012a0

080098c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80098cc:	2300      	movs	r3, #0
 80098ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d051      	beq.n	800997a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098da:	4b2a      	ldr	r3, [pc, #168]	; (8009984 <xTaskPriorityInherit+0xc4>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d241      	bcs.n	8009968 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	db06      	blt.n	80098fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098ec:	4b25      	ldr	r3, [pc, #148]	; (8009984 <xTaskPriorityInherit+0xc4>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	6959      	ldr	r1, [r3, #20]
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009902:	4613      	mov	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4413      	add	r3, r2
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	4a1f      	ldr	r2, [pc, #124]	; (8009988 <xTaskPriorityInherit+0xc8>)
 800990c:	4413      	add	r3, r2
 800990e:	4299      	cmp	r1, r3
 8009910:	d122      	bne.n	8009958 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	3304      	adds	r3, #4
 8009916:	4618      	mov	r0, r3
 8009918:	f7fd ff9e 	bl	8007858 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800991c:	4b19      	ldr	r3, [pc, #100]	; (8009984 <xTaskPriorityInherit+0xc4>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800992a:	4b18      	ldr	r3, [pc, #96]	; (800998c <xTaskPriorityInherit+0xcc>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	429a      	cmp	r2, r3
 8009930:	d903      	bls.n	800993a <xTaskPriorityInherit+0x7a>
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009936:	4a15      	ldr	r2, [pc, #84]	; (800998c <xTaskPriorityInherit+0xcc>)
 8009938:	6013      	str	r3, [r2, #0]
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800993e:	4613      	mov	r3, r2
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	4413      	add	r3, r2
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	4a10      	ldr	r2, [pc, #64]	; (8009988 <xTaskPriorityInherit+0xc8>)
 8009948:	441a      	add	r2, r3
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	3304      	adds	r3, #4
 800994e:	4619      	mov	r1, r3
 8009950:	4610      	mov	r0, r2
 8009952:	f7fd ff24 	bl	800779e <vListInsertEnd>
 8009956:	e004      	b.n	8009962 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009958:	4b0a      	ldr	r3, [pc, #40]	; (8009984 <xTaskPriorityInherit+0xc4>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009962:	2301      	movs	r3, #1
 8009964:	60fb      	str	r3, [r7, #12]
 8009966:	e008      	b.n	800997a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800996c:	4b05      	ldr	r3, [pc, #20]	; (8009984 <xTaskPriorityInherit+0xc4>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009972:	429a      	cmp	r2, r3
 8009974:	d201      	bcs.n	800997a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009976:	2301      	movs	r3, #1
 8009978:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800997a:	68fb      	ldr	r3, [r7, #12]
	}
 800997c:	4618      	mov	r0, r3
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	20000da4 	.word	0x20000da4
 8009988:	20000da8 	.word	0x20000da8
 800998c:	20001280 	.word	0x20001280

08009990 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800999c:	2300      	movs	r3, #0
 800999e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d056      	beq.n	8009a54 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80099a6:	4b2e      	ldr	r3, [pc, #184]	; (8009a60 <xTaskPriorityDisinherit+0xd0>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	693a      	ldr	r2, [r7, #16]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d00a      	beq.n	80099c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80099b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b4:	f383 8811 	msr	BASEPRI, r3
 80099b8:	f3bf 8f6f 	isb	sy
 80099bc:	f3bf 8f4f 	dsb	sy
 80099c0:	60fb      	str	r3, [r7, #12]
}
 80099c2:	bf00      	nop
 80099c4:	e7fe      	b.n	80099c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d10a      	bne.n	80099e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80099ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d2:	f383 8811 	msr	BASEPRI, r3
 80099d6:	f3bf 8f6f 	isb	sy
 80099da:	f3bf 8f4f 	dsb	sy
 80099de:	60bb      	str	r3, [r7, #8]
}
 80099e0:	bf00      	nop
 80099e2:	e7fe      	b.n	80099e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099e8:	1e5a      	subs	r2, r3, #1
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d02c      	beq.n	8009a54 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d128      	bne.n	8009a54 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	3304      	adds	r3, #4
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fd ff26 	bl	8007858 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a18:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a24:	4b0f      	ldr	r3, [pc, #60]	; (8009a64 <xTaskPriorityDisinherit+0xd4>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d903      	bls.n	8009a34 <xTaskPriorityDisinherit+0xa4>
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a30:	4a0c      	ldr	r2, [pc, #48]	; (8009a64 <xTaskPriorityDisinherit+0xd4>)
 8009a32:	6013      	str	r3, [r2, #0]
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a38:	4613      	mov	r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	4413      	add	r3, r2
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	4a09      	ldr	r2, [pc, #36]	; (8009a68 <xTaskPriorityDisinherit+0xd8>)
 8009a42:	441a      	add	r2, r3
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	3304      	adds	r3, #4
 8009a48:	4619      	mov	r1, r3
 8009a4a:	4610      	mov	r0, r2
 8009a4c:	f7fd fea7 	bl	800779e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a50:	2301      	movs	r3, #1
 8009a52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a54:	697b      	ldr	r3, [r7, #20]
	}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3718      	adds	r7, #24
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	20000da4 	.word	0x20000da4
 8009a64:	20001280 	.word	0x20001280
 8009a68:	20000da8 	.word	0x20000da8

08009a6c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b088      	sub	sp, #32
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d06a      	beq.n	8009b5a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009a84:	69bb      	ldr	r3, [r7, #24]
 8009a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d10a      	bne.n	8009aa2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a90:	f383 8811 	msr	BASEPRI, r3
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	60fb      	str	r3, [r7, #12]
}
 8009a9e:	bf00      	nop
 8009aa0:	e7fe      	b.n	8009aa0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aa6:	683a      	ldr	r2, [r7, #0]
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d902      	bls.n	8009ab2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	61fb      	str	r3, [r7, #28]
 8009ab0:	e002      	b.n	8009ab8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ab6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009abc:	69fa      	ldr	r2, [r7, #28]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d04b      	beq.n	8009b5a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009ac2:	69bb      	ldr	r3, [r7, #24]
 8009ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ac6:	697a      	ldr	r2, [r7, #20]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d146      	bne.n	8009b5a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009acc:	4b25      	ldr	r3, [pc, #148]	; (8009b64 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	69ba      	ldr	r2, [r7, #24]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d10a      	bne.n	8009aec <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ada:	f383 8811 	msr	BASEPRI, r3
 8009ade:	f3bf 8f6f 	isb	sy
 8009ae2:	f3bf 8f4f 	dsb	sy
 8009ae6:	60bb      	str	r3, [r7, #8]
}
 8009ae8:	bf00      	nop
 8009aea:	e7fe      	b.n	8009aea <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	69fa      	ldr	r2, [r7, #28]
 8009af6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	db04      	blt.n	8009b0a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009b0a:	69bb      	ldr	r3, [r7, #24]
 8009b0c:	6959      	ldr	r1, [r3, #20]
 8009b0e:	693a      	ldr	r2, [r7, #16]
 8009b10:	4613      	mov	r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	4413      	add	r3, r2
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	4a13      	ldr	r2, [pc, #76]	; (8009b68 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009b1a:	4413      	add	r3, r2
 8009b1c:	4299      	cmp	r1, r3
 8009b1e:	d11c      	bne.n	8009b5a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	3304      	adds	r3, #4
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7fd fe97 	bl	8007858 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b2e:	4b0f      	ldr	r3, [pc, #60]	; (8009b6c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d903      	bls.n	8009b3e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3a:	4a0c      	ldr	r2, [pc, #48]	; (8009b6c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009b3c:	6013      	str	r3, [r2, #0]
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b42:	4613      	mov	r3, r2
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	4413      	add	r3, r2
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	4a07      	ldr	r2, [pc, #28]	; (8009b68 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009b4c:	441a      	add	r2, r3
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	3304      	adds	r3, #4
 8009b52:	4619      	mov	r1, r3
 8009b54:	4610      	mov	r0, r2
 8009b56:	f7fd fe22 	bl	800779e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b5a:	bf00      	nop
 8009b5c:	3720      	adds	r7, #32
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	20000da4 	.word	0x20000da4
 8009b68:	20000da8 	.word	0x20000da8
 8009b6c:	20001280 	.word	0x20001280

08009b70 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009b70:	b480      	push	{r7}
 8009b72:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009b74:	4b07      	ldr	r3, [pc, #28]	; (8009b94 <pvTaskIncrementMutexHeldCount+0x24>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d004      	beq.n	8009b86 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009b7c:	4b05      	ldr	r3, [pc, #20]	; (8009b94 <pvTaskIncrementMutexHeldCount+0x24>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b82:	3201      	adds	r2, #1
 8009b84:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009b86:	4b03      	ldr	r3, [pc, #12]	; (8009b94 <pvTaskIncrementMutexHeldCount+0x24>)
 8009b88:	681b      	ldr	r3, [r3, #0]
	}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr
 8009b94:	20000da4 	.word	0x20000da4

08009b98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ba2:	4b21      	ldr	r3, [pc, #132]	; (8009c28 <prvAddCurrentTaskToDelayedList+0x90>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ba8:	4b20      	ldr	r3, [pc, #128]	; (8009c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	3304      	adds	r3, #4
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7fd fe52 	bl	8007858 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bba:	d10a      	bne.n	8009bd2 <prvAddCurrentTaskToDelayedList+0x3a>
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d007      	beq.n	8009bd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bc2:	4b1a      	ldr	r3, [pc, #104]	; (8009c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	3304      	adds	r3, #4
 8009bc8:	4619      	mov	r1, r3
 8009bca:	4819      	ldr	r0, [pc, #100]	; (8009c30 <prvAddCurrentTaskToDelayedList+0x98>)
 8009bcc:	f7fd fde7 	bl	800779e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009bd0:	e026      	b.n	8009c20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009bd2:	68fa      	ldr	r2, [r7, #12]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009bda:	4b14      	ldr	r3, [pc, #80]	; (8009c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68ba      	ldr	r2, [r7, #8]
 8009be0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009be2:	68ba      	ldr	r2, [r7, #8]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d209      	bcs.n	8009bfe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bea:	4b12      	ldr	r3, [pc, #72]	; (8009c34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	4b0f      	ldr	r3, [pc, #60]	; (8009c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	3304      	adds	r3, #4
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	4610      	mov	r0, r2
 8009bf8:	f7fd fdf5 	bl	80077e6 <vListInsert>
}
 8009bfc:	e010      	b.n	8009c20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bfe:	4b0e      	ldr	r3, [pc, #56]	; (8009c38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	4b0a      	ldr	r3, [pc, #40]	; (8009c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	3304      	adds	r3, #4
 8009c08:	4619      	mov	r1, r3
 8009c0a:	4610      	mov	r0, r2
 8009c0c:	f7fd fdeb 	bl	80077e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c10:	4b0a      	ldr	r3, [pc, #40]	; (8009c3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	68ba      	ldr	r2, [r7, #8]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d202      	bcs.n	8009c20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009c1a:	4a08      	ldr	r2, [pc, #32]	; (8009c3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	6013      	str	r3, [r2, #0]
}
 8009c20:	bf00      	nop
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	2000127c 	.word	0x2000127c
 8009c2c:	20000da4 	.word	0x20000da4
 8009c30:	20001264 	.word	0x20001264
 8009c34:	20001234 	.word	0x20001234
 8009c38:	20001230 	.word	0x20001230
 8009c3c:	20001298 	.word	0x20001298

08009c40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b08a      	sub	sp, #40	; 0x28
 8009c44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009c46:	2300      	movs	r3, #0
 8009c48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009c4a:	f000 fb07 	bl	800a25c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009c4e:	4b1c      	ldr	r3, [pc, #112]	; (8009cc0 <xTimerCreateTimerTask+0x80>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d021      	beq.n	8009c9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009c56:	2300      	movs	r3, #0
 8009c58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009c5e:	1d3a      	adds	r2, r7, #4
 8009c60:	f107 0108 	add.w	r1, r7, #8
 8009c64:	f107 030c 	add.w	r3, r7, #12
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7fd fd51 	bl	8007710 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009c6e:	6879      	ldr	r1, [r7, #4]
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	9202      	str	r2, [sp, #8]
 8009c76:	9301      	str	r3, [sp, #4]
 8009c78:	2302      	movs	r3, #2
 8009c7a:	9300      	str	r3, [sp, #0]
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	460a      	mov	r2, r1
 8009c80:	4910      	ldr	r1, [pc, #64]	; (8009cc4 <xTimerCreateTimerTask+0x84>)
 8009c82:	4811      	ldr	r0, [pc, #68]	; (8009cc8 <xTimerCreateTimerTask+0x88>)
 8009c84:	f7fe ff12 	bl	8008aac <xTaskCreateStatic>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	4a10      	ldr	r2, [pc, #64]	; (8009ccc <xTimerCreateTimerTask+0x8c>)
 8009c8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009c8e:	4b0f      	ldr	r3, [pc, #60]	; (8009ccc <xTimerCreateTimerTask+0x8c>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d001      	beq.n	8009c9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009c96:	2301      	movs	r3, #1
 8009c98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d10a      	bne.n	8009cb6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca4:	f383 8811 	msr	BASEPRI, r3
 8009ca8:	f3bf 8f6f 	isb	sy
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	613b      	str	r3, [r7, #16]
}
 8009cb2:	bf00      	nop
 8009cb4:	e7fe      	b.n	8009cb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009cb6:	697b      	ldr	r3, [r7, #20]
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3718      	adds	r7, #24
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	200012d4 	.word	0x200012d4
 8009cc4:	080219ac 	.word	0x080219ac
 8009cc8:	08009e05 	.word	0x08009e05
 8009ccc:	200012d8 	.word	0x200012d8

08009cd0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b08a      	sub	sp, #40	; 0x28
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
 8009cdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d10a      	bne.n	8009cfe <xTimerGenericCommand+0x2e>
	__asm volatile
 8009ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cec:	f383 8811 	msr	BASEPRI, r3
 8009cf0:	f3bf 8f6f 	isb	sy
 8009cf4:	f3bf 8f4f 	dsb	sy
 8009cf8:	623b      	str	r3, [r7, #32]
}
 8009cfa:	bf00      	nop
 8009cfc:	e7fe      	b.n	8009cfc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009cfe:	4b1a      	ldr	r3, [pc, #104]	; (8009d68 <xTimerGenericCommand+0x98>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d02a      	beq.n	8009d5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	2b05      	cmp	r3, #5
 8009d16:	dc18      	bgt.n	8009d4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009d18:	f7ff fdb4 	bl	8009884 <xTaskGetSchedulerState>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	d109      	bne.n	8009d36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009d22:	4b11      	ldr	r3, [pc, #68]	; (8009d68 <xTimerGenericCommand+0x98>)
 8009d24:	6818      	ldr	r0, [r3, #0]
 8009d26:	f107 0110 	add.w	r1, r7, #16
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d2e:	f7fe f81b 	bl	8007d68 <xQueueGenericSend>
 8009d32:	6278      	str	r0, [r7, #36]	; 0x24
 8009d34:	e012      	b.n	8009d5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009d36:	4b0c      	ldr	r3, [pc, #48]	; (8009d68 <xTimerGenericCommand+0x98>)
 8009d38:	6818      	ldr	r0, [r3, #0]
 8009d3a:	f107 0110 	add.w	r1, r7, #16
 8009d3e:	2300      	movs	r3, #0
 8009d40:	2200      	movs	r2, #0
 8009d42:	f7fe f811 	bl	8007d68 <xQueueGenericSend>
 8009d46:	6278      	str	r0, [r7, #36]	; 0x24
 8009d48:	e008      	b.n	8009d5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009d4a:	4b07      	ldr	r3, [pc, #28]	; (8009d68 <xTimerGenericCommand+0x98>)
 8009d4c:	6818      	ldr	r0, [r3, #0]
 8009d4e:	f107 0110 	add.w	r1, r7, #16
 8009d52:	2300      	movs	r3, #0
 8009d54:	683a      	ldr	r2, [r7, #0]
 8009d56:	f7fe f905 	bl	8007f64 <xQueueGenericSendFromISR>
 8009d5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3728      	adds	r7, #40	; 0x28
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	200012d4 	.word	0x200012d4

08009d6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b088      	sub	sp, #32
 8009d70:	af02      	add	r7, sp, #8
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d76:	4b22      	ldr	r3, [pc, #136]	; (8009e00 <prvProcessExpiredTimer+0x94>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	68db      	ldr	r3, [r3, #12]
 8009d7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	3304      	adds	r3, #4
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7fd fd67 	bl	8007858 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d90:	f003 0304 	and.w	r3, r3, #4
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d022      	beq.n	8009dde <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	699a      	ldr	r2, [r3, #24]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	18d1      	adds	r1, r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	683a      	ldr	r2, [r7, #0]
 8009da4:	6978      	ldr	r0, [r7, #20]
 8009da6:	f000 f8d1 	bl	8009f4c <prvInsertTimerInActiveList>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d01f      	beq.n	8009df0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009db0:	2300      	movs	r3, #0
 8009db2:	9300      	str	r3, [sp, #0]
 8009db4:	2300      	movs	r3, #0
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	2100      	movs	r1, #0
 8009dba:	6978      	ldr	r0, [r7, #20]
 8009dbc:	f7ff ff88 	bl	8009cd0 <xTimerGenericCommand>
 8009dc0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d113      	bne.n	8009df0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dcc:	f383 8811 	msr	BASEPRI, r3
 8009dd0:	f3bf 8f6f 	isb	sy
 8009dd4:	f3bf 8f4f 	dsb	sy
 8009dd8:	60fb      	str	r3, [r7, #12]
}
 8009dda:	bf00      	nop
 8009ddc:	e7fe      	b.n	8009ddc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009de4:	f023 0301 	bic.w	r3, r3, #1
 8009de8:	b2da      	uxtb	r2, r3
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	6a1b      	ldr	r3, [r3, #32]
 8009df4:	6978      	ldr	r0, [r7, #20]
 8009df6:	4798      	blx	r3
}
 8009df8:	bf00      	nop
 8009dfa:	3718      	adds	r7, #24
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	200012cc 	.word	0x200012cc

08009e04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e0c:	f107 0308 	add.w	r3, r7, #8
 8009e10:	4618      	mov	r0, r3
 8009e12:	f000 f857 	bl	8009ec4 <prvGetNextExpireTime>
 8009e16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f000 f803 	bl	8009e28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009e22:	f000 f8d5 	bl	8009fd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e26:	e7f1      	b.n	8009e0c <prvTimerTask+0x8>

08009e28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009e32:	f7ff f909 	bl	8009048 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e36:	f107 0308 	add.w	r3, r7, #8
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f000 f866 	bl	8009f0c <prvSampleTimeNow>
 8009e40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d130      	bne.n	8009eaa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d10a      	bne.n	8009e64 <prvProcessTimerOrBlockTask+0x3c>
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d806      	bhi.n	8009e64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009e56:	f7ff f905 	bl	8009064 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009e5a:	68f9      	ldr	r1, [r7, #12]
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f7ff ff85 	bl	8009d6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009e62:	e024      	b.n	8009eae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d008      	beq.n	8009e7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009e6a:	4b13      	ldr	r3, [pc, #76]	; (8009eb8 <prvProcessTimerOrBlockTask+0x90>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d101      	bne.n	8009e78 <prvProcessTimerOrBlockTask+0x50>
 8009e74:	2301      	movs	r3, #1
 8009e76:	e000      	b.n	8009e7a <prvProcessTimerOrBlockTask+0x52>
 8009e78:	2300      	movs	r3, #0
 8009e7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009e7c:	4b0f      	ldr	r3, [pc, #60]	; (8009ebc <prvProcessTimerOrBlockTask+0x94>)
 8009e7e:	6818      	ldr	r0, [r3, #0]
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	1ad3      	subs	r3, r2, r3
 8009e86:	683a      	ldr	r2, [r7, #0]
 8009e88:	4619      	mov	r1, r3
 8009e8a:	f7fe fddb 	bl	8008a44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009e8e:	f7ff f8e9 	bl	8009064 <xTaskResumeAll>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d10a      	bne.n	8009eae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009e98:	4b09      	ldr	r3, [pc, #36]	; (8009ec0 <prvProcessTimerOrBlockTask+0x98>)
 8009e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e9e:	601a      	str	r2, [r3, #0]
 8009ea0:	f3bf 8f4f 	dsb	sy
 8009ea4:	f3bf 8f6f 	isb	sy
}
 8009ea8:	e001      	b.n	8009eae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009eaa:	f7ff f8db 	bl	8009064 <xTaskResumeAll>
}
 8009eae:	bf00      	nop
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	200012d0 	.word	0x200012d0
 8009ebc:	200012d4 	.word	0x200012d4
 8009ec0:	e000ed04 	.word	0xe000ed04

08009ec4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ecc:	4b0e      	ldr	r3, [pc, #56]	; (8009f08 <prvGetNextExpireTime+0x44>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d101      	bne.n	8009eda <prvGetNextExpireTime+0x16>
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	e000      	b.n	8009edc <prvGetNextExpireTime+0x18>
 8009eda:	2200      	movs	r2, #0
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d105      	bne.n	8009ef4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ee8:	4b07      	ldr	r3, [pc, #28]	; (8009f08 <prvGetNextExpireTime+0x44>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	60fb      	str	r3, [r7, #12]
 8009ef2:	e001      	b.n	8009ef8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3714      	adds	r7, #20
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	200012cc 	.word	0x200012cc

08009f0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009f14:	f7ff f944 	bl	80091a0 <xTaskGetTickCount>
 8009f18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009f1a:	4b0b      	ldr	r3, [pc, #44]	; (8009f48 <prvSampleTimeNow+0x3c>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d205      	bcs.n	8009f30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009f24:	f000 f936 	bl	800a194 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	601a      	str	r2, [r3, #0]
 8009f2e:	e002      	b.n	8009f36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009f36:	4a04      	ldr	r2, [pc, #16]	; (8009f48 <prvSampleTimeNow+0x3c>)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	200012dc 	.word	0x200012dc

08009f4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b086      	sub	sp, #24
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	607a      	str	r2, [r7, #4]
 8009f58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d812      	bhi.n	8009f98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	1ad2      	subs	r2, r2, r3
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	699b      	ldr	r3, [r3, #24]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d302      	bcc.n	8009f86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009f80:	2301      	movs	r3, #1
 8009f82:	617b      	str	r3, [r7, #20]
 8009f84:	e01b      	b.n	8009fbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009f86:	4b10      	ldr	r3, [pc, #64]	; (8009fc8 <prvInsertTimerInActiveList+0x7c>)
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	3304      	adds	r3, #4
 8009f8e:	4619      	mov	r1, r3
 8009f90:	4610      	mov	r0, r2
 8009f92:	f7fd fc28 	bl	80077e6 <vListInsert>
 8009f96:	e012      	b.n	8009fbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d206      	bcs.n	8009fae <prvInsertTimerInActiveList+0x62>
 8009fa0:	68ba      	ldr	r2, [r7, #8]
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d302      	bcc.n	8009fae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	617b      	str	r3, [r7, #20]
 8009fac:	e007      	b.n	8009fbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009fae:	4b07      	ldr	r3, [pc, #28]	; (8009fcc <prvInsertTimerInActiveList+0x80>)
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	3304      	adds	r3, #4
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	4610      	mov	r0, r2
 8009fba:	f7fd fc14 	bl	80077e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009fbe:	697b      	ldr	r3, [r7, #20]
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3718      	adds	r7, #24
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	200012d0 	.word	0x200012d0
 8009fcc:	200012cc 	.word	0x200012cc

08009fd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b08e      	sub	sp, #56	; 0x38
 8009fd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009fd6:	e0ca      	b.n	800a16e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	da18      	bge.n	800a010 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009fde:	1d3b      	adds	r3, r7, #4
 8009fe0:	3304      	adds	r3, #4
 8009fe2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d10a      	bne.n	800a000 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fee:	f383 8811 	msr	BASEPRI, r3
 8009ff2:	f3bf 8f6f 	isb	sy
 8009ff6:	f3bf 8f4f 	dsb	sy
 8009ffa:	61fb      	str	r3, [r7, #28]
}
 8009ffc:	bf00      	nop
 8009ffe:	e7fe      	b.n	8009ffe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a006:	6850      	ldr	r0, [r2, #4]
 800a008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a00a:	6892      	ldr	r2, [r2, #8]
 800a00c:	4611      	mov	r1, r2
 800a00e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	f2c0 80aa 	blt.w	800a16c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01e:	695b      	ldr	r3, [r3, #20]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d004      	beq.n	800a02e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a026:	3304      	adds	r3, #4
 800a028:	4618      	mov	r0, r3
 800a02a:	f7fd fc15 	bl	8007858 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a02e:	463b      	mov	r3, r7
 800a030:	4618      	mov	r0, r3
 800a032:	f7ff ff6b 	bl	8009f0c <prvSampleTimeNow>
 800a036:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2b09      	cmp	r3, #9
 800a03c:	f200 8097 	bhi.w	800a16e <prvProcessReceivedCommands+0x19e>
 800a040:	a201      	add	r2, pc, #4	; (adr r2, 800a048 <prvProcessReceivedCommands+0x78>)
 800a042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a046:	bf00      	nop
 800a048:	0800a071 	.word	0x0800a071
 800a04c:	0800a071 	.word	0x0800a071
 800a050:	0800a071 	.word	0x0800a071
 800a054:	0800a0e5 	.word	0x0800a0e5
 800a058:	0800a0f9 	.word	0x0800a0f9
 800a05c:	0800a143 	.word	0x0800a143
 800a060:	0800a071 	.word	0x0800a071
 800a064:	0800a071 	.word	0x0800a071
 800a068:	0800a0e5 	.word	0x0800a0e5
 800a06c:	0800a0f9 	.word	0x0800a0f9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a072:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a076:	f043 0301 	orr.w	r3, r3, #1
 800a07a:	b2da      	uxtb	r2, r3
 800a07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a082:	68ba      	ldr	r2, [r7, #8]
 800a084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a086:	699b      	ldr	r3, [r3, #24]
 800a088:	18d1      	adds	r1, r2, r3
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a08e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a090:	f7ff ff5c 	bl	8009f4c <prvInsertTimerInActiveList>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d069      	beq.n	800a16e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09c:	6a1b      	ldr	r3, [r3, #32]
 800a09e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0a8:	f003 0304 	and.w	r3, r3, #4
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d05e      	beq.n	800a16e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a0b0:	68ba      	ldr	r2, [r7, #8]
 800a0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b4:	699b      	ldr	r3, [r3, #24]
 800a0b6:	441a      	add	r2, r3
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	9300      	str	r3, [sp, #0]
 800a0bc:	2300      	movs	r3, #0
 800a0be:	2100      	movs	r1, #0
 800a0c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0c2:	f7ff fe05 	bl	8009cd0 <xTimerGenericCommand>
 800a0c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a0c8:	6a3b      	ldr	r3, [r7, #32]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d14f      	bne.n	800a16e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d2:	f383 8811 	msr	BASEPRI, r3
 800a0d6:	f3bf 8f6f 	isb	sy
 800a0da:	f3bf 8f4f 	dsb	sy
 800a0de:	61bb      	str	r3, [r7, #24]
}
 800a0e0:	bf00      	nop
 800a0e2:	e7fe      	b.n	800a0e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0ea:	f023 0301 	bic.w	r3, r3, #1
 800a0ee:	b2da      	uxtb	r2, r3
 800a0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a0f6:	e03a      	b.n	800a16e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0fe:	f043 0301 	orr.w	r3, r3, #1
 800a102:	b2da      	uxtb	r2, r3
 800a104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a106:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a112:	699b      	ldr	r3, [r3, #24]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d10a      	bne.n	800a12e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11c:	f383 8811 	msr	BASEPRI, r3
 800a120:	f3bf 8f6f 	isb	sy
 800a124:	f3bf 8f4f 	dsb	sy
 800a128:	617b      	str	r3, [r7, #20]
}
 800a12a:	bf00      	nop
 800a12c:	e7fe      	b.n	800a12c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a130:	699a      	ldr	r2, [r3, #24]
 800a132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a134:	18d1      	adds	r1, r2, r3
 800a136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a13a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a13c:	f7ff ff06 	bl	8009f4c <prvInsertTimerInActiveList>
					break;
 800a140:	e015      	b.n	800a16e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a144:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a148:	f003 0302 	and.w	r3, r3, #2
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d103      	bne.n	800a158 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a152:	f000 fbdd 	bl	800a910 <vPortFree>
 800a156:	e00a      	b.n	800a16e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a15e:	f023 0301 	bic.w	r3, r3, #1
 800a162:	b2da      	uxtb	r2, r3
 800a164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a166:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a16a:	e000      	b.n	800a16e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a16c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a16e:	4b08      	ldr	r3, [pc, #32]	; (800a190 <prvProcessReceivedCommands+0x1c0>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	1d39      	adds	r1, r7, #4
 800a174:	2200      	movs	r2, #0
 800a176:	4618      	mov	r0, r3
 800a178:	f7fe f81c 	bl	80081b4 <xQueueReceive>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	f47f af2a 	bne.w	8009fd8 <prvProcessReceivedCommands+0x8>
	}
}
 800a184:	bf00      	nop
 800a186:	bf00      	nop
 800a188:	3730      	adds	r7, #48	; 0x30
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	200012d4 	.word	0x200012d4

0800a194 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b088      	sub	sp, #32
 800a198:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a19a:	e048      	b.n	800a22e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a19c:	4b2d      	ldr	r3, [pc, #180]	; (800a254 <prvSwitchTimerLists+0xc0>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1a6:	4b2b      	ldr	r3, [pc, #172]	; (800a254 <prvSwitchTimerLists+0xc0>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	68db      	ldr	r3, [r3, #12]
 800a1ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	3304      	adds	r3, #4
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7fd fb4f 	bl	8007858 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	6a1b      	ldr	r3, [r3, #32]
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1c8:	f003 0304 	and.w	r3, r3, #4
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d02e      	beq.n	800a22e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	699b      	ldr	r3, [r3, #24]
 800a1d4:	693a      	ldr	r2, [r7, #16]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a1da:	68ba      	ldr	r2, [r7, #8]
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d90e      	bls.n	800a200 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	68ba      	ldr	r2, [r7, #8]
 800a1e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a1ee:	4b19      	ldr	r3, [pc, #100]	; (800a254 <prvSwitchTimerLists+0xc0>)
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	3304      	adds	r3, #4
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	4610      	mov	r0, r2
 800a1fa:	f7fd faf4 	bl	80077e6 <vListInsert>
 800a1fe:	e016      	b.n	800a22e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a200:	2300      	movs	r3, #0
 800a202:	9300      	str	r3, [sp, #0]
 800a204:	2300      	movs	r3, #0
 800a206:	693a      	ldr	r2, [r7, #16]
 800a208:	2100      	movs	r1, #0
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f7ff fd60 	bl	8009cd0 <xTimerGenericCommand>
 800a210:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d10a      	bne.n	800a22e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21c:	f383 8811 	msr	BASEPRI, r3
 800a220:	f3bf 8f6f 	isb	sy
 800a224:	f3bf 8f4f 	dsb	sy
 800a228:	603b      	str	r3, [r7, #0]
}
 800a22a:	bf00      	nop
 800a22c:	e7fe      	b.n	800a22c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a22e:	4b09      	ldr	r3, [pc, #36]	; (800a254 <prvSwitchTimerLists+0xc0>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d1b1      	bne.n	800a19c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a238:	4b06      	ldr	r3, [pc, #24]	; (800a254 <prvSwitchTimerLists+0xc0>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a23e:	4b06      	ldr	r3, [pc, #24]	; (800a258 <prvSwitchTimerLists+0xc4>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a04      	ldr	r2, [pc, #16]	; (800a254 <prvSwitchTimerLists+0xc0>)
 800a244:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a246:	4a04      	ldr	r2, [pc, #16]	; (800a258 <prvSwitchTimerLists+0xc4>)
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	6013      	str	r3, [r2, #0]
}
 800a24c:	bf00      	nop
 800a24e:	3718      	adds	r7, #24
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	200012cc 	.word	0x200012cc
 800a258:	200012d0 	.word	0x200012d0

0800a25c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a262:	f000 f967 	bl	800a534 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a266:	4b15      	ldr	r3, [pc, #84]	; (800a2bc <prvCheckForValidListAndQueue+0x60>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d120      	bne.n	800a2b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a26e:	4814      	ldr	r0, [pc, #80]	; (800a2c0 <prvCheckForValidListAndQueue+0x64>)
 800a270:	f7fd fa68 	bl	8007744 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a274:	4813      	ldr	r0, [pc, #76]	; (800a2c4 <prvCheckForValidListAndQueue+0x68>)
 800a276:	f7fd fa65 	bl	8007744 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a27a:	4b13      	ldr	r3, [pc, #76]	; (800a2c8 <prvCheckForValidListAndQueue+0x6c>)
 800a27c:	4a10      	ldr	r2, [pc, #64]	; (800a2c0 <prvCheckForValidListAndQueue+0x64>)
 800a27e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a280:	4b12      	ldr	r3, [pc, #72]	; (800a2cc <prvCheckForValidListAndQueue+0x70>)
 800a282:	4a10      	ldr	r2, [pc, #64]	; (800a2c4 <prvCheckForValidListAndQueue+0x68>)
 800a284:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a286:	2300      	movs	r3, #0
 800a288:	9300      	str	r3, [sp, #0]
 800a28a:	4b11      	ldr	r3, [pc, #68]	; (800a2d0 <prvCheckForValidListAndQueue+0x74>)
 800a28c:	4a11      	ldr	r2, [pc, #68]	; (800a2d4 <prvCheckForValidListAndQueue+0x78>)
 800a28e:	2110      	movs	r1, #16
 800a290:	200a      	movs	r0, #10
 800a292:	f7fd fb73 	bl	800797c <xQueueGenericCreateStatic>
 800a296:	4603      	mov	r3, r0
 800a298:	4a08      	ldr	r2, [pc, #32]	; (800a2bc <prvCheckForValidListAndQueue+0x60>)
 800a29a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a29c:	4b07      	ldr	r3, [pc, #28]	; (800a2bc <prvCheckForValidListAndQueue+0x60>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d005      	beq.n	800a2b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a2a4:	4b05      	ldr	r3, [pc, #20]	; (800a2bc <prvCheckForValidListAndQueue+0x60>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	490b      	ldr	r1, [pc, #44]	; (800a2d8 <prvCheckForValidListAndQueue+0x7c>)
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7fe fb76 	bl	800899c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a2b0:	f000 f970 	bl	800a594 <vPortExitCritical>
}
 800a2b4:	bf00      	nop
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	200012d4 	.word	0x200012d4
 800a2c0:	200012a4 	.word	0x200012a4
 800a2c4:	200012b8 	.word	0x200012b8
 800a2c8:	200012cc 	.word	0x200012cc
 800a2cc:	200012d0 	.word	0x200012d0
 800a2d0:	20001380 	.word	0x20001380
 800a2d4:	200012e0 	.word	0x200012e0
 800a2d8:	080219b4 	.word	0x080219b4

0800a2dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b085      	sub	sp, #20
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	3b04      	subs	r3, #4
 800a2ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a2f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	3b04      	subs	r3, #4
 800a2fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	f023 0201 	bic.w	r2, r3, #1
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	3b04      	subs	r3, #4
 800a30a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a30c:	4a0c      	ldr	r2, [pc, #48]	; (800a340 <pxPortInitialiseStack+0x64>)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	3b14      	subs	r3, #20
 800a316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	3b04      	subs	r3, #4
 800a322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f06f 0202 	mvn.w	r2, #2
 800a32a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	3b20      	subs	r3, #32
 800a330:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a332:	68fb      	ldr	r3, [r7, #12]
}
 800a334:	4618      	mov	r0, r3
 800a336:	3714      	adds	r7, #20
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr
 800a340:	0800a345 	.word	0x0800a345

0800a344 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a34a:	2300      	movs	r3, #0
 800a34c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a34e:	4b12      	ldr	r3, [pc, #72]	; (800a398 <prvTaskExitError+0x54>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a356:	d00a      	beq.n	800a36e <prvTaskExitError+0x2a>
	__asm volatile
 800a358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35c:	f383 8811 	msr	BASEPRI, r3
 800a360:	f3bf 8f6f 	isb	sy
 800a364:	f3bf 8f4f 	dsb	sy
 800a368:	60fb      	str	r3, [r7, #12]
}
 800a36a:	bf00      	nop
 800a36c:	e7fe      	b.n	800a36c <prvTaskExitError+0x28>
	__asm volatile
 800a36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	60bb      	str	r3, [r7, #8]
}
 800a380:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a382:	bf00      	nop
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d0fc      	beq.n	800a384 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a38a:	bf00      	nop
 800a38c:	bf00      	nop
 800a38e:	3714      	adds	r7, #20
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr
 800a398:	1000000c 	.word	0x1000000c
 800a39c:	00000000 	.word	0x00000000

0800a3a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a3a0:	4b07      	ldr	r3, [pc, #28]	; (800a3c0 <pxCurrentTCBConst2>)
 800a3a2:	6819      	ldr	r1, [r3, #0]
 800a3a4:	6808      	ldr	r0, [r1, #0]
 800a3a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3aa:	f380 8809 	msr	PSP, r0
 800a3ae:	f3bf 8f6f 	isb	sy
 800a3b2:	f04f 0000 	mov.w	r0, #0
 800a3b6:	f380 8811 	msr	BASEPRI, r0
 800a3ba:	4770      	bx	lr
 800a3bc:	f3af 8000 	nop.w

0800a3c0 <pxCurrentTCBConst2>:
 800a3c0:	20000da4 	.word	0x20000da4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a3c4:	bf00      	nop
 800a3c6:	bf00      	nop

0800a3c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a3c8:	4808      	ldr	r0, [pc, #32]	; (800a3ec <prvPortStartFirstTask+0x24>)
 800a3ca:	6800      	ldr	r0, [r0, #0]
 800a3cc:	6800      	ldr	r0, [r0, #0]
 800a3ce:	f380 8808 	msr	MSP, r0
 800a3d2:	f04f 0000 	mov.w	r0, #0
 800a3d6:	f380 8814 	msr	CONTROL, r0
 800a3da:	b662      	cpsie	i
 800a3dc:	b661      	cpsie	f
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	f3bf 8f6f 	isb	sy
 800a3e6:	df00      	svc	0
 800a3e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a3ea:	bf00      	nop
 800a3ec:	e000ed08 	.word	0xe000ed08

0800a3f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b086      	sub	sp, #24
 800a3f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a3f6:	4b46      	ldr	r3, [pc, #280]	; (800a510 <xPortStartScheduler+0x120>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a46      	ldr	r2, [pc, #280]	; (800a514 <xPortStartScheduler+0x124>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d10a      	bne.n	800a416 <xPortStartScheduler+0x26>
	__asm volatile
 800a400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a404:	f383 8811 	msr	BASEPRI, r3
 800a408:	f3bf 8f6f 	isb	sy
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	613b      	str	r3, [r7, #16]
}
 800a412:	bf00      	nop
 800a414:	e7fe      	b.n	800a414 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a416:	4b3e      	ldr	r3, [pc, #248]	; (800a510 <xPortStartScheduler+0x120>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a3f      	ldr	r2, [pc, #252]	; (800a518 <xPortStartScheduler+0x128>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d10a      	bne.n	800a436 <xPortStartScheduler+0x46>
	__asm volatile
 800a420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a424:	f383 8811 	msr	BASEPRI, r3
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	f3bf 8f4f 	dsb	sy
 800a430:	60fb      	str	r3, [r7, #12]
}
 800a432:	bf00      	nop
 800a434:	e7fe      	b.n	800a434 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a436:	4b39      	ldr	r3, [pc, #228]	; (800a51c <xPortStartScheduler+0x12c>)
 800a438:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	22ff      	movs	r2, #255	; 0xff
 800a446:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a450:	78fb      	ldrb	r3, [r7, #3]
 800a452:	b2db      	uxtb	r3, r3
 800a454:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a458:	b2da      	uxtb	r2, r3
 800a45a:	4b31      	ldr	r3, [pc, #196]	; (800a520 <xPortStartScheduler+0x130>)
 800a45c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a45e:	4b31      	ldr	r3, [pc, #196]	; (800a524 <xPortStartScheduler+0x134>)
 800a460:	2207      	movs	r2, #7
 800a462:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a464:	e009      	b.n	800a47a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a466:	4b2f      	ldr	r3, [pc, #188]	; (800a524 <xPortStartScheduler+0x134>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	3b01      	subs	r3, #1
 800a46c:	4a2d      	ldr	r2, [pc, #180]	; (800a524 <xPortStartScheduler+0x134>)
 800a46e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a470:	78fb      	ldrb	r3, [r7, #3]
 800a472:	b2db      	uxtb	r3, r3
 800a474:	005b      	lsls	r3, r3, #1
 800a476:	b2db      	uxtb	r3, r3
 800a478:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a47a:	78fb      	ldrb	r3, [r7, #3]
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a482:	2b80      	cmp	r3, #128	; 0x80
 800a484:	d0ef      	beq.n	800a466 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a486:	4b27      	ldr	r3, [pc, #156]	; (800a524 <xPortStartScheduler+0x134>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f1c3 0307 	rsb	r3, r3, #7
 800a48e:	2b04      	cmp	r3, #4
 800a490:	d00a      	beq.n	800a4a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a496:	f383 8811 	msr	BASEPRI, r3
 800a49a:	f3bf 8f6f 	isb	sy
 800a49e:	f3bf 8f4f 	dsb	sy
 800a4a2:	60bb      	str	r3, [r7, #8]
}
 800a4a4:	bf00      	nop
 800a4a6:	e7fe      	b.n	800a4a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a4a8:	4b1e      	ldr	r3, [pc, #120]	; (800a524 <xPortStartScheduler+0x134>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	021b      	lsls	r3, r3, #8
 800a4ae:	4a1d      	ldr	r2, [pc, #116]	; (800a524 <xPortStartScheduler+0x134>)
 800a4b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a4b2:	4b1c      	ldr	r3, [pc, #112]	; (800a524 <xPortStartScheduler+0x134>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a4ba:	4a1a      	ldr	r2, [pc, #104]	; (800a524 <xPortStartScheduler+0x134>)
 800a4bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	b2da      	uxtb	r2, r3
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a4c6:	4b18      	ldr	r3, [pc, #96]	; (800a528 <xPortStartScheduler+0x138>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a17      	ldr	r2, [pc, #92]	; (800a528 <xPortStartScheduler+0x138>)
 800a4cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a4d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a4d2:	4b15      	ldr	r3, [pc, #84]	; (800a528 <xPortStartScheduler+0x138>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a14      	ldr	r2, [pc, #80]	; (800a528 <xPortStartScheduler+0x138>)
 800a4d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a4dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a4de:	f000 f8dd 	bl	800a69c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a4e2:	4b12      	ldr	r3, [pc, #72]	; (800a52c <xPortStartScheduler+0x13c>)
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a4e8:	f000 f8fc 	bl	800a6e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a4ec:	4b10      	ldr	r3, [pc, #64]	; (800a530 <xPortStartScheduler+0x140>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a0f      	ldr	r2, [pc, #60]	; (800a530 <xPortStartScheduler+0x140>)
 800a4f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a4f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a4f8:	f7ff ff66 	bl	800a3c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a4fc:	f7fe ff2c 	bl	8009358 <vTaskSwitchContext>
	prvTaskExitError();
 800a500:	f7ff ff20 	bl	800a344 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3718      	adds	r7, #24
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	e000ed00 	.word	0xe000ed00
 800a514:	410fc271 	.word	0x410fc271
 800a518:	410fc270 	.word	0x410fc270
 800a51c:	e000e400 	.word	0xe000e400
 800a520:	200013d0 	.word	0x200013d0
 800a524:	200013d4 	.word	0x200013d4
 800a528:	e000ed20 	.word	0xe000ed20
 800a52c:	1000000c 	.word	0x1000000c
 800a530:	e000ef34 	.word	0xe000ef34

0800a534 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
	__asm volatile
 800a53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53e:	f383 8811 	msr	BASEPRI, r3
 800a542:	f3bf 8f6f 	isb	sy
 800a546:	f3bf 8f4f 	dsb	sy
 800a54a:	607b      	str	r3, [r7, #4]
}
 800a54c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a54e:	4b0f      	ldr	r3, [pc, #60]	; (800a58c <vPortEnterCritical+0x58>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	3301      	adds	r3, #1
 800a554:	4a0d      	ldr	r2, [pc, #52]	; (800a58c <vPortEnterCritical+0x58>)
 800a556:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a558:	4b0c      	ldr	r3, [pc, #48]	; (800a58c <vPortEnterCritical+0x58>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d10f      	bne.n	800a580 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a560:	4b0b      	ldr	r3, [pc, #44]	; (800a590 <vPortEnterCritical+0x5c>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	b2db      	uxtb	r3, r3
 800a566:	2b00      	cmp	r3, #0
 800a568:	d00a      	beq.n	800a580 <vPortEnterCritical+0x4c>
	__asm volatile
 800a56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56e:	f383 8811 	msr	BASEPRI, r3
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	f3bf 8f4f 	dsb	sy
 800a57a:	603b      	str	r3, [r7, #0]
}
 800a57c:	bf00      	nop
 800a57e:	e7fe      	b.n	800a57e <vPortEnterCritical+0x4a>
	}
}
 800a580:	bf00      	nop
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr
 800a58c:	1000000c 	.word	0x1000000c
 800a590:	e000ed04 	.word	0xe000ed04

0800a594 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a59a:	4b12      	ldr	r3, [pc, #72]	; (800a5e4 <vPortExitCritical+0x50>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d10a      	bne.n	800a5b8 <vPortExitCritical+0x24>
	__asm volatile
 800a5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a6:	f383 8811 	msr	BASEPRI, r3
 800a5aa:	f3bf 8f6f 	isb	sy
 800a5ae:	f3bf 8f4f 	dsb	sy
 800a5b2:	607b      	str	r3, [r7, #4]
}
 800a5b4:	bf00      	nop
 800a5b6:	e7fe      	b.n	800a5b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a5b8:	4b0a      	ldr	r3, [pc, #40]	; (800a5e4 <vPortExitCritical+0x50>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	3b01      	subs	r3, #1
 800a5be:	4a09      	ldr	r2, [pc, #36]	; (800a5e4 <vPortExitCritical+0x50>)
 800a5c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a5c2:	4b08      	ldr	r3, [pc, #32]	; (800a5e4 <vPortExitCritical+0x50>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d105      	bne.n	800a5d6 <vPortExitCritical+0x42>
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	f383 8811 	msr	BASEPRI, r3
}
 800a5d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a5d6:	bf00      	nop
 800a5d8:	370c      	adds	r7, #12
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr
 800a5e2:	bf00      	nop
 800a5e4:	1000000c 	.word	0x1000000c
	...

0800a5f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a5f0:	f3ef 8009 	mrs	r0, PSP
 800a5f4:	f3bf 8f6f 	isb	sy
 800a5f8:	4b15      	ldr	r3, [pc, #84]	; (800a650 <pxCurrentTCBConst>)
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	f01e 0f10 	tst.w	lr, #16
 800a600:	bf08      	it	eq
 800a602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a60a:	6010      	str	r0, [r2, #0]
 800a60c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a610:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a614:	f380 8811 	msr	BASEPRI, r0
 800a618:	f3bf 8f4f 	dsb	sy
 800a61c:	f3bf 8f6f 	isb	sy
 800a620:	f7fe fe9a 	bl	8009358 <vTaskSwitchContext>
 800a624:	f04f 0000 	mov.w	r0, #0
 800a628:	f380 8811 	msr	BASEPRI, r0
 800a62c:	bc09      	pop	{r0, r3}
 800a62e:	6819      	ldr	r1, [r3, #0]
 800a630:	6808      	ldr	r0, [r1, #0]
 800a632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a636:	f01e 0f10 	tst.w	lr, #16
 800a63a:	bf08      	it	eq
 800a63c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a640:	f380 8809 	msr	PSP, r0
 800a644:	f3bf 8f6f 	isb	sy
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	f3af 8000 	nop.w

0800a650 <pxCurrentTCBConst>:
 800a650:	20000da4 	.word	0x20000da4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a654:	bf00      	nop
 800a656:	bf00      	nop

0800a658 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
	__asm volatile
 800a65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a662:	f383 8811 	msr	BASEPRI, r3
 800a666:	f3bf 8f6f 	isb	sy
 800a66a:	f3bf 8f4f 	dsb	sy
 800a66e:	607b      	str	r3, [r7, #4]
}
 800a670:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a672:	f7fe fdb7 	bl	80091e4 <xTaskIncrementTick>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d003      	beq.n	800a684 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a67c:	4b06      	ldr	r3, [pc, #24]	; (800a698 <xPortSysTickHandler+0x40>)
 800a67e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a682:	601a      	str	r2, [r3, #0]
 800a684:	2300      	movs	r3, #0
 800a686:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	f383 8811 	msr	BASEPRI, r3
}
 800a68e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a690:	bf00      	nop
 800a692:	3708      	adds	r7, #8
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}
 800a698:	e000ed04 	.word	0xe000ed04

0800a69c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a69c:	b480      	push	{r7}
 800a69e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a6a0:	4b0b      	ldr	r3, [pc, #44]	; (800a6d0 <vPortSetupTimerInterrupt+0x34>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a6a6:	4b0b      	ldr	r3, [pc, #44]	; (800a6d4 <vPortSetupTimerInterrupt+0x38>)
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a6ac:	4b0a      	ldr	r3, [pc, #40]	; (800a6d8 <vPortSetupTimerInterrupt+0x3c>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a0a      	ldr	r2, [pc, #40]	; (800a6dc <vPortSetupTimerInterrupt+0x40>)
 800a6b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a6b6:	099b      	lsrs	r3, r3, #6
 800a6b8:	4a09      	ldr	r2, [pc, #36]	; (800a6e0 <vPortSetupTimerInterrupt+0x44>)
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a6be:	4b04      	ldr	r3, [pc, #16]	; (800a6d0 <vPortSetupTimerInterrupt+0x34>)
 800a6c0:	2207      	movs	r2, #7
 800a6c2:	601a      	str	r2, [r3, #0]
}
 800a6c4:	bf00      	nop
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr
 800a6ce:	bf00      	nop
 800a6d0:	e000e010 	.word	0xe000e010
 800a6d4:	e000e018 	.word	0xe000e018
 800a6d8:	10000000 	.word	0x10000000
 800a6dc:	10624dd3 	.word	0x10624dd3
 800a6e0:	e000e014 	.word	0xe000e014

0800a6e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a6e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a6f4 <vPortEnableVFP+0x10>
 800a6e8:	6801      	ldr	r1, [r0, #0]
 800a6ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a6ee:	6001      	str	r1, [r0, #0]
 800a6f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a6f2:	bf00      	nop
 800a6f4:	e000ed88 	.word	0xe000ed88

0800a6f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b085      	sub	sp, #20
 800a6fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a6fe:	f3ef 8305 	mrs	r3, IPSR
 800a702:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2b0f      	cmp	r3, #15
 800a708:	d914      	bls.n	800a734 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a70a:	4a17      	ldr	r2, [pc, #92]	; (800a768 <vPortValidateInterruptPriority+0x70>)
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	4413      	add	r3, r2
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a714:	4b15      	ldr	r3, [pc, #84]	; (800a76c <vPortValidateInterruptPriority+0x74>)
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	7afa      	ldrb	r2, [r7, #11]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d20a      	bcs.n	800a734 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a722:	f383 8811 	msr	BASEPRI, r3
 800a726:	f3bf 8f6f 	isb	sy
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	607b      	str	r3, [r7, #4]
}
 800a730:	bf00      	nop
 800a732:	e7fe      	b.n	800a732 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a734:	4b0e      	ldr	r3, [pc, #56]	; (800a770 <vPortValidateInterruptPriority+0x78>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a73c:	4b0d      	ldr	r3, [pc, #52]	; (800a774 <vPortValidateInterruptPriority+0x7c>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	429a      	cmp	r2, r3
 800a742:	d90a      	bls.n	800a75a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a748:	f383 8811 	msr	BASEPRI, r3
 800a74c:	f3bf 8f6f 	isb	sy
 800a750:	f3bf 8f4f 	dsb	sy
 800a754:	603b      	str	r3, [r7, #0]
}
 800a756:	bf00      	nop
 800a758:	e7fe      	b.n	800a758 <vPortValidateInterruptPriority+0x60>
	}
 800a75a:	bf00      	nop
 800a75c:	3714      	adds	r7, #20
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr
 800a766:	bf00      	nop
 800a768:	e000e3f0 	.word	0xe000e3f0
 800a76c:	200013d0 	.word	0x200013d0
 800a770:	e000ed0c 	.word	0xe000ed0c
 800a774:	200013d4 	.word	0x200013d4

0800a778 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b08a      	sub	sp, #40	; 0x28
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a780:	2300      	movs	r3, #0
 800a782:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a784:	f7fe fc60 	bl	8009048 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a788:	4b5b      	ldr	r3, [pc, #364]	; (800a8f8 <pvPortMalloc+0x180>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d101      	bne.n	800a794 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a790:	f000 f920 	bl	800a9d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a794:	4b59      	ldr	r3, [pc, #356]	; (800a8fc <pvPortMalloc+0x184>)
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	4013      	ands	r3, r2
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f040 8093 	bne.w	800a8c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d01d      	beq.n	800a7e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a7a8:	2208      	movs	r2, #8
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f003 0307 	and.w	r3, r3, #7
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d014      	beq.n	800a7e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f023 0307 	bic.w	r3, r3, #7
 800a7c0:	3308      	adds	r3, #8
 800a7c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f003 0307 	and.w	r3, r3, #7
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00a      	beq.n	800a7e4 <pvPortMalloc+0x6c>
	__asm volatile
 800a7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
 800a7de:	617b      	str	r3, [r7, #20]
}
 800a7e0:	bf00      	nop
 800a7e2:	e7fe      	b.n	800a7e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d06e      	beq.n	800a8c8 <pvPortMalloc+0x150>
 800a7ea:	4b45      	ldr	r3, [pc, #276]	; (800a900 <pvPortMalloc+0x188>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d869      	bhi.n	800a8c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a7f4:	4b43      	ldr	r3, [pc, #268]	; (800a904 <pvPortMalloc+0x18c>)
 800a7f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a7f8:	4b42      	ldr	r3, [pc, #264]	; (800a904 <pvPortMalloc+0x18c>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a7fe:	e004      	b.n	800a80a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a802:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	429a      	cmp	r2, r3
 800a812:	d903      	bls.n	800a81c <pvPortMalloc+0xa4>
 800a814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d1f1      	bne.n	800a800 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a81c:	4b36      	ldr	r3, [pc, #216]	; (800a8f8 <pvPortMalloc+0x180>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a822:	429a      	cmp	r2, r3
 800a824:	d050      	beq.n	800a8c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a826:	6a3b      	ldr	r3, [r7, #32]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	2208      	movs	r2, #8
 800a82c:	4413      	add	r3, r2
 800a82e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	6a3b      	ldr	r3, [r7, #32]
 800a836:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83a:	685a      	ldr	r2, [r3, #4]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	1ad2      	subs	r2, r2, r3
 800a840:	2308      	movs	r3, #8
 800a842:	005b      	lsls	r3, r3, #1
 800a844:	429a      	cmp	r2, r3
 800a846:	d91f      	bls.n	800a888 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4413      	add	r3, r2
 800a84e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	f003 0307 	and.w	r3, r3, #7
 800a856:	2b00      	cmp	r3, #0
 800a858:	d00a      	beq.n	800a870 <pvPortMalloc+0xf8>
	__asm volatile
 800a85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85e:	f383 8811 	msr	BASEPRI, r3
 800a862:	f3bf 8f6f 	isb	sy
 800a866:	f3bf 8f4f 	dsb	sy
 800a86a:	613b      	str	r3, [r7, #16]
}
 800a86c:	bf00      	nop
 800a86e:	e7fe      	b.n	800a86e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a872:	685a      	ldr	r2, [r3, #4]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	1ad2      	subs	r2, r2, r3
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a882:	69b8      	ldr	r0, [r7, #24]
 800a884:	f000 f908 	bl	800aa98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a888:	4b1d      	ldr	r3, [pc, #116]	; (800a900 <pvPortMalloc+0x188>)
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	1ad3      	subs	r3, r2, r3
 800a892:	4a1b      	ldr	r2, [pc, #108]	; (800a900 <pvPortMalloc+0x188>)
 800a894:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a896:	4b1a      	ldr	r3, [pc, #104]	; (800a900 <pvPortMalloc+0x188>)
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	4b1b      	ldr	r3, [pc, #108]	; (800a908 <pvPortMalloc+0x190>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d203      	bcs.n	800a8aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a8a2:	4b17      	ldr	r3, [pc, #92]	; (800a900 <pvPortMalloc+0x188>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a18      	ldr	r2, [pc, #96]	; (800a908 <pvPortMalloc+0x190>)
 800a8a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ac:	685a      	ldr	r2, [r3, #4]
 800a8ae:	4b13      	ldr	r3, [pc, #76]	; (800a8fc <pvPortMalloc+0x184>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	431a      	orrs	r2, r3
 800a8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a8be:	4b13      	ldr	r3, [pc, #76]	; (800a90c <pvPortMalloc+0x194>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	4a11      	ldr	r2, [pc, #68]	; (800a90c <pvPortMalloc+0x194>)
 800a8c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a8c8:	f7fe fbcc 	bl	8009064 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	f003 0307 	and.w	r3, r3, #7
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00a      	beq.n	800a8ec <pvPortMalloc+0x174>
	__asm volatile
 800a8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8da:	f383 8811 	msr	BASEPRI, r3
 800a8de:	f3bf 8f6f 	isb	sy
 800a8e2:	f3bf 8f4f 	dsb	sy
 800a8e6:	60fb      	str	r3, [r7, #12]
}
 800a8e8:	bf00      	nop
 800a8ea:	e7fe      	b.n	800a8ea <pvPortMalloc+0x172>
	return pvReturn;
 800a8ec:	69fb      	ldr	r3, [r7, #28]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3728      	adds	r7, #40	; 0x28
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	200013e0 	.word	0x200013e0
 800a8fc:	200013f4 	.word	0x200013f4
 800a900:	200013e4 	.word	0x200013e4
 800a904:	200013d8 	.word	0x200013d8
 800a908:	200013e8 	.word	0x200013e8
 800a90c:	200013ec 	.word	0x200013ec

0800a910 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d04d      	beq.n	800a9be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a922:	2308      	movs	r3, #8
 800a924:	425b      	negs	r3, r3
 800a926:	697a      	ldr	r2, [r7, #20]
 800a928:	4413      	add	r3, r2
 800a92a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	685a      	ldr	r2, [r3, #4]
 800a934:	4b24      	ldr	r3, [pc, #144]	; (800a9c8 <vPortFree+0xb8>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4013      	ands	r3, r2
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d10a      	bne.n	800a954 <vPortFree+0x44>
	__asm volatile
 800a93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a942:	f383 8811 	msr	BASEPRI, r3
 800a946:	f3bf 8f6f 	isb	sy
 800a94a:	f3bf 8f4f 	dsb	sy
 800a94e:	60fb      	str	r3, [r7, #12]
}
 800a950:	bf00      	nop
 800a952:	e7fe      	b.n	800a952 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d00a      	beq.n	800a972 <vPortFree+0x62>
	__asm volatile
 800a95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a960:	f383 8811 	msr	BASEPRI, r3
 800a964:	f3bf 8f6f 	isb	sy
 800a968:	f3bf 8f4f 	dsb	sy
 800a96c:	60bb      	str	r3, [r7, #8]
}
 800a96e:	bf00      	nop
 800a970:	e7fe      	b.n	800a970 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	685a      	ldr	r2, [r3, #4]
 800a976:	4b14      	ldr	r3, [pc, #80]	; (800a9c8 <vPortFree+0xb8>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4013      	ands	r3, r2
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d01e      	beq.n	800a9be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d11a      	bne.n	800a9be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	685a      	ldr	r2, [r3, #4]
 800a98c:	4b0e      	ldr	r3, [pc, #56]	; (800a9c8 <vPortFree+0xb8>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	43db      	mvns	r3, r3
 800a992:	401a      	ands	r2, r3
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a998:	f7fe fb56 	bl	8009048 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	685a      	ldr	r2, [r3, #4]
 800a9a0:	4b0a      	ldr	r3, [pc, #40]	; (800a9cc <vPortFree+0xbc>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	4a09      	ldr	r2, [pc, #36]	; (800a9cc <vPortFree+0xbc>)
 800a9a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a9aa:	6938      	ldr	r0, [r7, #16]
 800a9ac:	f000 f874 	bl	800aa98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a9b0:	4b07      	ldr	r3, [pc, #28]	; (800a9d0 <vPortFree+0xc0>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	4a06      	ldr	r2, [pc, #24]	; (800a9d0 <vPortFree+0xc0>)
 800a9b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a9ba:	f7fe fb53 	bl	8009064 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a9be:	bf00      	nop
 800a9c0:	3718      	adds	r7, #24
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	200013f4 	.word	0x200013f4
 800a9cc:	200013e4 	.word	0x200013e4
 800a9d0:	200013f0 	.word	0x200013f0

0800a9d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a9da:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a9de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a9e0:	4b27      	ldr	r3, [pc, #156]	; (800aa80 <prvHeapInit+0xac>)
 800a9e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f003 0307 	and.w	r3, r3, #7
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00c      	beq.n	800aa08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	3307      	adds	r3, #7
 800a9f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f023 0307 	bic.w	r3, r3, #7
 800a9fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a9fc:	68ba      	ldr	r2, [r7, #8]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	1ad3      	subs	r3, r2, r3
 800aa02:	4a1f      	ldr	r2, [pc, #124]	; (800aa80 <prvHeapInit+0xac>)
 800aa04:	4413      	add	r3, r2
 800aa06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aa0c:	4a1d      	ldr	r2, [pc, #116]	; (800aa84 <prvHeapInit+0xb0>)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aa12:	4b1c      	ldr	r3, [pc, #112]	; (800aa84 <prvHeapInit+0xb0>)
 800aa14:	2200      	movs	r2, #0
 800aa16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	68ba      	ldr	r2, [r7, #8]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aa20:	2208      	movs	r2, #8
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	1a9b      	subs	r3, r3, r2
 800aa26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f023 0307 	bic.w	r3, r3, #7
 800aa2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	4a15      	ldr	r2, [pc, #84]	; (800aa88 <prvHeapInit+0xb4>)
 800aa34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aa36:	4b14      	ldr	r3, [pc, #80]	; (800aa88 <prvHeapInit+0xb4>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aa3e:	4b12      	ldr	r3, [pc, #72]	; (800aa88 <prvHeapInit+0xb4>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2200      	movs	r2, #0
 800aa44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	68fa      	ldr	r2, [r7, #12]
 800aa4e:	1ad2      	subs	r2, r2, r3
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aa54:	4b0c      	ldr	r3, [pc, #48]	; (800aa88 <prvHeapInit+0xb4>)
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	4a0a      	ldr	r2, [pc, #40]	; (800aa8c <prvHeapInit+0xb8>)
 800aa62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	4a09      	ldr	r2, [pc, #36]	; (800aa90 <prvHeapInit+0xbc>)
 800aa6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa6c:	4b09      	ldr	r3, [pc, #36]	; (800aa94 <prvHeapInit+0xc0>)
 800aa6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aa72:	601a      	str	r2, [r3, #0]
}
 800aa74:	bf00      	nop
 800aa76:	3714      	adds	r7, #20
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr
 800aa80:	10000308 	.word	0x10000308
 800aa84:	200013d8 	.word	0x200013d8
 800aa88:	200013e0 	.word	0x200013e0
 800aa8c:	200013e8 	.word	0x200013e8
 800aa90:	200013e4 	.word	0x200013e4
 800aa94:	200013f4 	.word	0x200013f4

0800aa98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b085      	sub	sp, #20
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aaa0:	4b28      	ldr	r3, [pc, #160]	; (800ab44 <prvInsertBlockIntoFreeList+0xac>)
 800aaa2:	60fb      	str	r3, [r7, #12]
 800aaa4:	e002      	b.n	800aaac <prvInsertBlockIntoFreeList+0x14>
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	60fb      	str	r3, [r7, #12]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d8f7      	bhi.n	800aaa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	68ba      	ldr	r2, [r7, #8]
 800aac0:	4413      	add	r3, r2
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d108      	bne.n	800aada <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	685a      	ldr	r2, [r3, #4]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	441a      	add	r2, r3
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	68ba      	ldr	r2, [r7, #8]
 800aae4:	441a      	add	r2, r3
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d118      	bne.n	800ab20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	4b15      	ldr	r3, [pc, #84]	; (800ab48 <prvInsertBlockIntoFreeList+0xb0>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d00d      	beq.n	800ab16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	685a      	ldr	r2, [r3, #4]
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	441a      	add	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	601a      	str	r2, [r3, #0]
 800ab14:	e008      	b.n	800ab28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ab16:	4b0c      	ldr	r3, [pc, #48]	; (800ab48 <prvInsertBlockIntoFreeList+0xb0>)
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	601a      	str	r2, [r3, #0]
 800ab1e:	e003      	b.n	800ab28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d002      	beq.n	800ab36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab36:	bf00      	nop
 800ab38:	3714      	adds	r7, #20
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr
 800ab42:	bf00      	nop
 800ab44:	200013d8 	.word	0x200013d8
 800ab48:	200013e0 	.word	0x200013e0

0800ab4c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	330c      	adds	r3, #12
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	6839      	ldr	r1, [r7, #0]
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f003 ff95 	bl	800ea90 <tcpip_send_msg_wait_sem>
 800ab66:	4603      	mov	r3, r0
 800ab68:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800ab6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d103      	bne.n	800ab7a <netconn_apimsg+0x2e>
    return apimsg->err;
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ab78:	e001      	b.n	800ab7e <netconn_apimsg+0x32>
  }
  return err;
 800ab7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3710      	adds	r7, #16
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
	...

0800ab88 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b08c      	sub	sp, #48	; 0x30
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	4603      	mov	r3, r0
 800ab90:	603a      	str	r2, [r7, #0]
 800ab92:	71fb      	strb	r3, [r7, #7]
 800ab94:	460b      	mov	r3, r1
 800ab96:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800ab98:	79fb      	ldrb	r3, [r7, #7]
 800ab9a:	6839      	ldr	r1, [r7, #0]
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f001 f9a3 	bl	800bee8 <netconn_alloc>
 800aba2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800aba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d054      	beq.n	800ac54 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800abaa:	79bb      	ldrb	r3, [r7, #6]
 800abac:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800abae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800abb2:	f107 0308 	add.w	r3, r7, #8
 800abb6:	4619      	mov	r1, r3
 800abb8:	4829      	ldr	r0, [pc, #164]	; (800ac60 <netconn_new_with_proto_and_callback+0xd8>)
 800abba:	f7ff ffc7 	bl	800ab4c <netconn_apimsg>
 800abbe:	4603      	mov	r3, r0
 800abc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800abc4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d043      	beq.n	800ac54 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800abcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d005      	beq.n	800abe0 <netconn_new_with_proto_and_callback+0x58>
 800abd4:	4b23      	ldr	r3, [pc, #140]	; (800ac64 <netconn_new_with_proto_and_callback+0xdc>)
 800abd6:	22a3      	movs	r2, #163	; 0xa3
 800abd8:	4923      	ldr	r1, [pc, #140]	; (800ac68 <netconn_new_with_proto_and_callback+0xe0>)
 800abda:	4824      	ldr	r0, [pc, #144]	; (800ac6c <netconn_new_with_proto_and_callback+0xe4>)
 800abdc:	f014 fe44 	bl	801f868 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800abe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe2:	3310      	adds	r3, #16
 800abe4:	4618      	mov	r0, r3
 800abe6:	f011 fd23 	bl	801c630 <sys_mbox_valid>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d105      	bne.n	800abfc <netconn_new_with_proto_and_callback+0x74>
 800abf0:	4b1c      	ldr	r3, [pc, #112]	; (800ac64 <netconn_new_with_proto_and_callback+0xdc>)
 800abf2:	22a4      	movs	r2, #164	; 0xa4
 800abf4:	491e      	ldr	r1, [pc, #120]	; (800ac70 <netconn_new_with_proto_and_callback+0xe8>)
 800abf6:	481d      	ldr	r0, [pc, #116]	; (800ac6c <netconn_new_with_proto_and_callback+0xe4>)
 800abf8:	f014 fe36 	bl	801f868 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800abfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfe:	3314      	adds	r3, #20
 800ac00:	4618      	mov	r0, r3
 800ac02:	f011 fd15 	bl	801c630 <sys_mbox_valid>
 800ac06:	4603      	mov	r3, r0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d005      	beq.n	800ac18 <netconn_new_with_proto_and_callback+0x90>
 800ac0c:	4b15      	ldr	r3, [pc, #84]	; (800ac64 <netconn_new_with_proto_and_callback+0xdc>)
 800ac0e:	22a6      	movs	r2, #166	; 0xa6
 800ac10:	4918      	ldr	r1, [pc, #96]	; (800ac74 <netconn_new_with_proto_and_callback+0xec>)
 800ac12:	4816      	ldr	r0, [pc, #88]	; (800ac6c <netconn_new_with_proto_and_callback+0xe4>)
 800ac14:	f014 fe28 	bl	801f868 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800ac18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1a:	330c      	adds	r3, #12
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f011 fd95 	bl	801c74c <sys_sem_valid>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d105      	bne.n	800ac34 <netconn_new_with_proto_and_callback+0xac>
 800ac28:	4b0e      	ldr	r3, [pc, #56]	; (800ac64 <netconn_new_with_proto_and_callback+0xdc>)
 800ac2a:	22a9      	movs	r2, #169	; 0xa9
 800ac2c:	4912      	ldr	r1, [pc, #72]	; (800ac78 <netconn_new_with_proto_and_callback+0xf0>)
 800ac2e:	480f      	ldr	r0, [pc, #60]	; (800ac6c <netconn_new_with_proto_and_callback+0xe4>)
 800ac30:	f014 fe1a 	bl	801f868 <iprintf>
      sys_sem_free(&conn->op_completed);
 800ac34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac36:	330c      	adds	r3, #12
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f011 fd7a 	bl	801c732 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800ac3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac40:	3310      	adds	r3, #16
 800ac42:	4618      	mov	r0, r3
 800ac44:	f011 fc80 	bl	801c548 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800ac48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac4a:	2007      	movs	r0, #7
 800ac4c:	f004 ff76 	bl	800fb3c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800ac50:	2300      	movs	r3, #0
 800ac52:	e000      	b.n	800ac56 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800ac54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3730      	adds	r7, #48	; 0x30
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	0800bebd 	.word	0x0800bebd
 800ac64:	080219bc 	.word	0x080219bc
 800ac68:	080219f0 	.word	0x080219f0
 800ac6c:	08021a14 	.word	0x08021a14
 800ac70:	08021a3c 	.word	0x08021a3c
 800ac74:	08021a54 	.word	0x08021a54
 800ac78:	08021a78 	.word	0x08021a78

0800ac7c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b08c      	sub	sp, #48	; 0x30
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d101      	bne.n	800ac8e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	e014      	b.n	800acb8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800ac92:	2329      	movs	r3, #41	; 0x29
 800ac94:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800ac96:	f107 030c 	add.w	r3, r7, #12
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	4808      	ldr	r0, [pc, #32]	; (800acc0 <netconn_prepare_delete+0x44>)
 800ac9e:	f7ff ff55 	bl	800ab4c <netconn_apimsg>
 800aca2:	4603      	mov	r3, r0
 800aca4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800aca8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800acac:	2b00      	cmp	r3, #0
 800acae:	d002      	beq.n	800acb6 <netconn_prepare_delete+0x3a>
    return err;
 800acb0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800acb4:	e000      	b.n	800acb8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800acb6:	2300      	movs	r3, #0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3730      	adds	r7, #48	; 0x30
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}
 800acc0:	0800c421 	.word	0x0800c421

0800acc4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d101      	bne.n	800acd6 <netconn_delete+0x12>
    return ERR_OK;
 800acd2:	2300      	movs	r3, #0
 800acd4:	e00d      	b.n	800acf2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f7ff ffd0 	bl	800ac7c <netconn_prepare_delete>
 800acdc:	4603      	mov	r3, r0
 800acde:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800ace0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d102      	bne.n	800acee <netconn_delete+0x2a>
    netconn_free(conn);
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f001 f96b 	bl	800bfc4 <netconn_free>
  }
  return err;
 800acee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3710      	adds	r7, #16
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
	...

0800acfc <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b08e      	sub	sp, #56	; 0x38
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	60b9      	str	r1, [r7, #8]
 800ad06:	607a      	str	r2, [r7, #4]
 800ad08:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d109      	bne.n	800ad24 <netconn_getaddr+0x28>
 800ad10:	4b1d      	ldr	r3, [pc, #116]	; (800ad88 <netconn_getaddr+0x8c>)
 800ad12:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ad16:	491d      	ldr	r1, [pc, #116]	; (800ad8c <netconn_getaddr+0x90>)
 800ad18:	481d      	ldr	r0, [pc, #116]	; (800ad90 <netconn_getaddr+0x94>)
 800ad1a:	f014 fda5 	bl	801f868 <iprintf>
 800ad1e:	f06f 030f 	mvn.w	r3, #15
 800ad22:	e02d      	b.n	800ad80 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d109      	bne.n	800ad3e <netconn_getaddr+0x42>
 800ad2a:	4b17      	ldr	r3, [pc, #92]	; (800ad88 <netconn_getaddr+0x8c>)
 800ad2c:	f240 1213 	movw	r2, #275	; 0x113
 800ad30:	4918      	ldr	r1, [pc, #96]	; (800ad94 <netconn_getaddr+0x98>)
 800ad32:	4817      	ldr	r0, [pc, #92]	; (800ad90 <netconn_getaddr+0x94>)
 800ad34:	f014 fd98 	bl	801f868 <iprintf>
 800ad38:	f06f 030f 	mvn.w	r3, #15
 800ad3c:	e020      	b.n	800ad80 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d109      	bne.n	800ad58 <netconn_getaddr+0x5c>
 800ad44:	4b10      	ldr	r3, [pc, #64]	; (800ad88 <netconn_getaddr+0x8c>)
 800ad46:	f44f 728a 	mov.w	r2, #276	; 0x114
 800ad4a:	4913      	ldr	r1, [pc, #76]	; (800ad98 <netconn_getaddr+0x9c>)
 800ad4c:	4810      	ldr	r0, [pc, #64]	; (800ad90 <netconn_getaddr+0x94>)
 800ad4e:	f014 fd8b 	bl	801f868 <iprintf>
 800ad52:	f06f 030f 	mvn.w	r3, #15
 800ad56:	e013      	b.n	800ad80 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800ad5c:	78fb      	ldrb	r3, [r7, #3]
 800ad5e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800ad6a:	f107 0314 	add.w	r3, r7, #20
 800ad6e:	4619      	mov	r1, r3
 800ad70:	480a      	ldr	r0, [pc, #40]	; (800ad9c <netconn_getaddr+0xa0>)
 800ad72:	f7ff feeb 	bl	800ab4c <netconn_apimsg>
 800ad76:	4603      	mov	r3, r0
 800ad78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800ad7c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3738      	adds	r7, #56	; 0x38
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	080219bc 	.word	0x080219bc
 800ad8c:	08021a94 	.word	0x08021a94
 800ad90:	08021a14 	.word	0x08021a14
 800ad94:	08021ab4 	.word	0x08021ab4
 800ad98:	08021ad4 	.word	0x08021ad4
 800ad9c:	0800cd41 	.word	0x0800cd41

0800ada0 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b08e      	sub	sp, #56	; 0x38
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	4613      	mov	r3, r2
 800adac:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d109      	bne.n	800adc8 <netconn_bind+0x28>
 800adb4:	4b11      	ldr	r3, [pc, #68]	; (800adfc <netconn_bind+0x5c>)
 800adb6:	f44f 729c 	mov.w	r2, #312	; 0x138
 800adba:	4911      	ldr	r1, [pc, #68]	; (800ae00 <netconn_bind+0x60>)
 800adbc:	4811      	ldr	r0, [pc, #68]	; (800ae04 <netconn_bind+0x64>)
 800adbe:	f014 fd53 	bl	801f868 <iprintf>
 800adc2:	f06f 030f 	mvn.w	r3, #15
 800adc6:	e015      	b.n	800adf4 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d101      	bne.n	800add2 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800adce:	4b0e      	ldr	r3, [pc, #56]	; (800ae08 <netconn_bind+0x68>)
 800add0:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800adda:	88fb      	ldrh	r3, [r7, #6]
 800addc:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800adde:	f107 0314 	add.w	r3, r7, #20
 800ade2:	4619      	mov	r1, r3
 800ade4:	4809      	ldr	r0, [pc, #36]	; (800ae0c <netconn_bind+0x6c>)
 800ade6:	f7ff feb1 	bl	800ab4c <netconn_apimsg>
 800adea:	4603      	mov	r3, r0
 800adec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800adf0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3738      	adds	r7, #56	; 0x38
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}
 800adfc:	080219bc 	.word	0x080219bc
 800ae00:	08021af4 	.word	0x08021af4
 800ae04:	08021a14 	.word	0x08021a14
 800ae08:	08025ac4 	.word	0x08025ac4
 800ae0c:	0800c5e9 	.word	0x0800c5e9

0800ae10 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b08c      	sub	sp, #48	; 0x30
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	460b      	mov	r3, r1
 800ae1a:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d109      	bne.n	800ae36 <netconn_listen_with_backlog+0x26>
 800ae22:	4b0d      	ldr	r3, [pc, #52]	; (800ae58 <netconn_listen_with_backlog+0x48>)
 800ae24:	f240 12bb 	movw	r2, #443	; 0x1bb
 800ae28:	490c      	ldr	r1, [pc, #48]	; (800ae5c <netconn_listen_with_backlog+0x4c>)
 800ae2a:	480d      	ldr	r0, [pc, #52]	; (800ae60 <netconn_listen_with_backlog+0x50>)
 800ae2c:	f014 fd1c 	bl	801f868 <iprintf>
 800ae30:	f06f 030f 	mvn.w	r3, #15
 800ae34:	e00c      	b.n	800ae50 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800ae3a:	f107 030c 	add.w	r3, r7, #12
 800ae3e:	4619      	mov	r1, r3
 800ae40:	4808      	ldr	r0, [pc, #32]	; (800ae64 <netconn_listen_with_backlog+0x54>)
 800ae42:	f7ff fe83 	bl	800ab4c <netconn_apimsg>
 800ae46:	4603      	mov	r3, r0
 800ae48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ae4c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3730      	adds	r7, #48	; 0x30
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	080219bc 	.word	0x080219bc
 800ae5c:	08021b74 	.word	0x08021b74
 800ae60:	08021a14 	.word	0x08021a14
 800ae64:	0800c65d 	.word	0x0800c65d

0800ae68 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b086      	sub	sp, #24
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d109      	bne.n	800ae8c <netconn_accept+0x24>
 800ae78:	4b3d      	ldr	r3, [pc, #244]	; (800af70 <netconn_accept+0x108>)
 800ae7a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ae7e:	493d      	ldr	r1, [pc, #244]	; (800af74 <netconn_accept+0x10c>)
 800ae80:	483d      	ldr	r0, [pc, #244]	; (800af78 <netconn_accept+0x110>)
 800ae82:	f014 fcf1 	bl	801f868 <iprintf>
 800ae86:	f06f 030f 	mvn.w	r3, #15
 800ae8a:	e06c      	b.n	800af66 <netconn_accept+0xfe>
  *new_conn = NULL;
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d109      	bne.n	800aeac <netconn_accept+0x44>
 800ae98:	4b35      	ldr	r3, [pc, #212]	; (800af70 <netconn_accept+0x108>)
 800ae9a:	f240 12e3 	movw	r2, #483	; 0x1e3
 800ae9e:	4937      	ldr	r1, [pc, #220]	; (800af7c <netconn_accept+0x114>)
 800aea0:	4835      	ldr	r0, [pc, #212]	; (800af78 <netconn_accept+0x110>)
 800aea2:	f014 fce1 	bl	801f868 <iprintf>
 800aea6:	f06f 030f 	mvn.w	r3, #15
 800aeaa:	e05c      	b.n	800af66 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 fb99 	bl	800b5e4 <netconn_err>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800aeb6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d002      	beq.n	800aec4 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800aebe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aec2:	e050      	b.n	800af66 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	3314      	adds	r3, #20
 800aec8:	4618      	mov	r0, r3
 800aeca:	f011 fbb1 	bl	801c630 <sys_mbox_valid>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d005      	beq.n	800aee0 <netconn_accept+0x78>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	7f1b      	ldrb	r3, [r3, #28]
 800aed8:	f003 0301 	and.w	r3, r3, #1
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d002      	beq.n	800aee6 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800aee0:	f06f 030e 	mvn.w	r3, #14
 800aee4:	e03f      	b.n	800af66 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	7f1b      	ldrb	r3, [r3, #28]
 800aeea:	f003 0302 	and.w	r3, r3, #2
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d00e      	beq.n	800af10 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	3314      	adds	r3, #20
 800aef6:	f107 020c 	add.w	r2, r7, #12
 800aefa:	4611      	mov	r1, r2
 800aefc:	4618      	mov	r0, r3
 800aefe:	f011 fb80 	bl	801c602 <sys_arch_mbox_tryfetch>
 800af02:	4603      	mov	r3, r0
 800af04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af08:	d10a      	bne.n	800af20 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800af0a:	f06f 0306 	mvn.w	r3, #6
 800af0e:	e02a      	b.n	800af66 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	3314      	adds	r3, #20
 800af14:	f107 010c 	add.w	r1, r7, #12
 800af18:	2200      	movs	r2, #0
 800af1a:	4618      	mov	r0, r3
 800af1c:	f011 fb40 	bl	801c5a0 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af24:	2b00      	cmp	r3, #0
 800af26:	d005      	beq.n	800af34 <netconn_accept+0xcc>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2c:	2200      	movs	r2, #0
 800af2e:	2101      	movs	r1, #1
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f107 0213 	add.w	r2, r7, #19
 800af3a:	4611      	mov	r1, r2
 800af3c:	4618      	mov	r0, r3
 800af3e:	f000 fba3 	bl	800b688 <lwip_netconn_is_err_msg>
 800af42:	4603      	mov	r3, r0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d002      	beq.n	800af4e <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800af48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800af4c:	e00b      	b.n	800af66 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d102      	bne.n	800af5a <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800af54:	f06f 030e 	mvn.w	r3, #14
 800af58:	e005      	b.n	800af66 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	697a      	ldr	r2, [r7, #20]
 800af62:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800af64:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800af66:	4618      	mov	r0, r3
 800af68:	3718      	adds	r7, #24
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	080219bc 	.word	0x080219bc
 800af74:	08021b94 	.word	0x08021b94
 800af78:	08021a14 	.word	0x08021a14
 800af7c:	08021bb4 	.word	0x08021bb4

0800af80 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b088      	sub	sp, #32
 800af84:	af00      	add	r7, sp, #0
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	60b9      	str	r1, [r7, #8]
 800af8a:	4613      	mov	r3, r2
 800af8c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800af8e:	2300      	movs	r3, #0
 800af90:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d109      	bne.n	800afac <netconn_recv_data+0x2c>
 800af98:	4b58      	ldr	r3, [pc, #352]	; (800b0fc <netconn_recv_data+0x17c>)
 800af9a:	f44f 7212 	mov.w	r2, #584	; 0x248
 800af9e:	4958      	ldr	r1, [pc, #352]	; (800b100 <netconn_recv_data+0x180>)
 800afa0:	4858      	ldr	r0, [pc, #352]	; (800b104 <netconn_recv_data+0x184>)
 800afa2:	f014 fc61 	bl	801f868 <iprintf>
 800afa6:	f06f 030f 	mvn.w	r3, #15
 800afaa:	e0a2      	b.n	800b0f2 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	2200      	movs	r2, #0
 800afb0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d109      	bne.n	800afcc <netconn_recv_data+0x4c>
 800afb8:	4b50      	ldr	r3, [pc, #320]	; (800b0fc <netconn_recv_data+0x17c>)
 800afba:	f240 224a 	movw	r2, #586	; 0x24a
 800afbe:	4952      	ldr	r1, [pc, #328]	; (800b108 <netconn_recv_data+0x188>)
 800afc0:	4850      	ldr	r0, [pc, #320]	; (800b104 <netconn_recv_data+0x184>)
 800afc2:	f014 fc51 	bl	801f868 <iprintf>
 800afc6:	f06f 030f 	mvn.w	r3, #15
 800afca:	e092      	b.n	800b0f2 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	3310      	adds	r3, #16
 800afd0:	4618      	mov	r0, r3
 800afd2:	f011 fb2d 	bl	801c630 <sys_mbox_valid>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d10e      	bne.n	800affa <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800afdc:	68f8      	ldr	r0, [r7, #12]
 800afde:	f000 fb01 	bl	800b5e4 <netconn_err>
 800afe2:	4603      	mov	r3, r0
 800afe4:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800afe6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d002      	beq.n	800aff4 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800afee:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800aff2:	e07e      	b.n	800b0f2 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800aff4:	f06f 030a 	mvn.w	r3, #10
 800aff8:	e07b      	b.n	800b0f2 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	7f1b      	ldrb	r3, [r3, #28]
 800affe:	f003 0302 	and.w	r3, r3, #2
 800b002:	2b00      	cmp	r3, #0
 800b004:	d10f      	bne.n	800b026 <netconn_recv_data+0xa6>
 800b006:	79fb      	ldrb	r3, [r7, #7]
 800b008:	f003 0304 	and.w	r3, r3, #4
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d10a      	bne.n	800b026 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	7f1b      	ldrb	r3, [r3, #28]
 800b014:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d104      	bne.n	800b026 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d023      	beq.n	800b06e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	3310      	adds	r3, #16
 800b02a:	f107 0218 	add.w	r2, r7, #24
 800b02e:	4611      	mov	r1, r2
 800b030:	4618      	mov	r0, r3
 800b032:	f011 fae6 	bl	801c602 <sys_arch_mbox_tryfetch>
 800b036:	4603      	mov	r3, r0
 800b038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b03c:	d11f      	bne.n	800b07e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f000 fad0 	bl	800b5e4 <netconn_err>
 800b044:	4603      	mov	r3, r0
 800b046:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800b048:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d002      	beq.n	800b056 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800b050:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b054:	e04d      	b.n	800b0f2 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	7f1b      	ldrb	r3, [r3, #28]
 800b05a:	f003 0301 	and.w	r3, r3, #1
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d002      	beq.n	800b068 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800b062:	f06f 030a 	mvn.w	r3, #10
 800b066:	e044      	b.n	800b0f2 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800b068:	f06f 0306 	mvn.w	r3, #6
 800b06c:	e041      	b.n	800b0f2 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	3310      	adds	r3, #16
 800b072:	f107 0118 	add.w	r1, r7, #24
 800b076:	2200      	movs	r2, #0
 800b078:	4618      	mov	r0, r3
 800b07a:	f011 fa91 	bl	801c5a0 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b086:	2b10      	cmp	r3, #16
 800b088:	d117      	bne.n	800b0ba <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	f107 0217 	add.w	r2, r7, #23
 800b090:	4611      	mov	r1, r2
 800b092:	4618      	mov	r0, r3
 800b094:	f000 faf8 	bl	800b688 <lwip_netconn_is_err_msg>
 800b098:	4603      	mov	r3, r0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d009      	beq.n	800b0b2 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800b09e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b0a2:	f113 0f0f 	cmn.w	r3, #15
 800b0a6:	d101      	bne.n	800b0ac <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	e022      	b.n	800b0f2 <netconn_recv_data+0x172>
      }
      return err;
 800b0ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b0b0:	e01f      	b.n	800b0f2 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	891b      	ldrh	r3, [r3, #8]
 800b0b6:	83fb      	strh	r3, [r7, #30]
 800b0b8:	e00d      	b.n	800b0d6 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d106      	bne.n	800b0ce <netconn_recv_data+0x14e>
 800b0c0:	4b0e      	ldr	r3, [pc, #56]	; (800b0fc <netconn_recv_data+0x17c>)
 800b0c2:	f240 2291 	movw	r2, #657	; 0x291
 800b0c6:	4911      	ldr	r1, [pc, #68]	; (800b10c <netconn_recv_data+0x18c>)
 800b0c8:	480e      	ldr	r0, [pc, #56]	; (800b104 <netconn_recv_data+0x184>)
 800b0ca:	f014 fbcd 	bl	801f868 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800b0ce:	69bb      	ldr	r3, [r7, #24]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	891b      	ldrh	r3, [r3, #8]
 800b0d4:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d005      	beq.n	800b0ea <netconn_recv_data+0x16a>
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e2:	8bfa      	ldrh	r2, [r7, #30]
 800b0e4:	2101      	movs	r1, #1
 800b0e6:	68f8      	ldr	r0, [r7, #12]
 800b0e8:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800b0ea:	69ba      	ldr	r2, [r7, #24]
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800b0f0:	2300      	movs	r3, #0
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3720      	adds	r7, #32
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	080219bc 	.word	0x080219bc
 800b100:	08021bd4 	.word	0x08021bd4
 800b104:	08021a14 	.word	0x08021a14
 800b108:	08021bf4 	.word	0x08021bf4
 800b10c:	08021c10 	.word	0x08021c10

0800b110 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d005      	beq.n	800b12e <netconn_tcp_recvd_msg+0x1e>
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b12a:	2b10      	cmp	r3, #16
 800b12c:	d009      	beq.n	800b142 <netconn_tcp_recvd_msg+0x32>
 800b12e:	4b0c      	ldr	r3, [pc, #48]	; (800b160 <netconn_tcp_recvd_msg+0x50>)
 800b130:	f240 22a7 	movw	r2, #679	; 0x2a7
 800b134:	490b      	ldr	r1, [pc, #44]	; (800b164 <netconn_tcp_recvd_msg+0x54>)
 800b136:	480c      	ldr	r0, [pc, #48]	; (800b168 <netconn_tcp_recvd_msg+0x58>)
 800b138:	f014 fb96 	bl	801f868 <iprintf>
 800b13c:	f06f 030f 	mvn.w	r3, #15
 800b140:	e00a      	b.n	800b158 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	68fa      	ldr	r2, [r7, #12]
 800b146:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	68ba      	ldr	r2, [r7, #8]
 800b14c:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800b14e:	6879      	ldr	r1, [r7, #4]
 800b150:	4806      	ldr	r0, [pc, #24]	; (800b16c <netconn_tcp_recvd_msg+0x5c>)
 800b152:	f7ff fcfb 	bl	800ab4c <netconn_apimsg>
 800b156:	4603      	mov	r3, r0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3710      	adds	r7, #16
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	080219bc 	.word	0x080219bc
 800b164:	08021c1c 	.word	0x08021c1c
 800b168:	08021a14 	.word	0x08021a14
 800b16c:	0800c827 	.word	0x0800c827

0800b170 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b08c      	sub	sp, #48	; 0x30
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d005      	beq.n	800b18c <netconn_tcp_recvd+0x1c>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b188:	2b10      	cmp	r3, #16
 800b18a:	d009      	beq.n	800b1a0 <netconn_tcp_recvd+0x30>
 800b18c:	4b0c      	ldr	r3, [pc, #48]	; (800b1c0 <netconn_tcp_recvd+0x50>)
 800b18e:	f240 22b5 	movw	r2, #693	; 0x2b5
 800b192:	490c      	ldr	r1, [pc, #48]	; (800b1c4 <netconn_tcp_recvd+0x54>)
 800b194:	480c      	ldr	r0, [pc, #48]	; (800b1c8 <netconn_tcp_recvd+0x58>)
 800b196:	f014 fb67 	bl	801f868 <iprintf>
 800b19a:	f06f 030f 	mvn.w	r3, #15
 800b19e:	e00b      	b.n	800b1b8 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800b1a0:	f107 030c 	add.w	r3, r7, #12
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	6839      	ldr	r1, [r7, #0]
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f7ff ffb1 	bl	800b110 <netconn_tcp_recvd_msg>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800b1b4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3730      	adds	r7, #48	; 0x30
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}
 800b1c0:	080219bc 	.word	0x080219bc
 800b1c4:	08021c1c 	.word	0x08021c1c
 800b1c8:	08021a14 	.word	0x08021a14

0800b1cc <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b090      	sub	sp, #64	; 0x40
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	4613      	mov	r3, r2
 800b1d8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	3310      	adds	r3, #16
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f011 fa26 	bl	801c630 <sys_mbox_valid>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d102      	bne.n	800b1f0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800b1ea:	f06f 030a 	mvn.w	r3, #10
 800b1ee:	e06d      	b.n	800b2cc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	7f1b      	ldrb	r3, [r3, #28]
 800b1f4:	b25b      	sxtb	r3, r3
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	da07      	bge.n	800b20a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	7f1b      	ldrb	r3, [r3, #28]
 800b1fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b202:	b2da      	uxtb	r2, r3
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800b208:	e039      	b.n	800b27e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800b20a:	79fb      	ldrb	r3, [r7, #7]
 800b20c:	461a      	mov	r2, r3
 800b20e:	68b9      	ldr	r1, [r7, #8]
 800b210:	68f8      	ldr	r0, [r7, #12]
 800b212:	f7ff feb5 	bl	800af80 <netconn_recv_data>
 800b216:	4603      	mov	r3, r0
 800b218:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800b21c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b220:	2b00      	cmp	r3, #0
 800b222:	d002      	beq.n	800b22a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800b224:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b228:	e050      	b.n	800b2cc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800b230:	79fb      	ldrb	r3, [r7, #7]
 800b232:	f003 0308 	and.w	r3, r3, #8
 800b236:	2b00      	cmp	r3, #0
 800b238:	d10e      	bne.n	800b258 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800b23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d002      	beq.n	800b246 <netconn_recv_data_tcp+0x7a>
 800b240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b242:	891b      	ldrh	r3, [r3, #8]
 800b244:	e000      	b.n	800b248 <netconn_recv_data_tcp+0x7c>
 800b246:	2301      	movs	r3, #1
 800b248:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800b24a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b24c:	f107 0214 	add.w	r2, r7, #20
 800b250:	4619      	mov	r1, r3
 800b252:	68f8      	ldr	r0, [r7, #12]
 800b254:	f7ff ff5c 	bl	800b110 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800b258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d134      	bne.n	800b2c8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800b25e:	79fb      	ldrb	r3, [r7, #7]
 800b260:	f003 0310 	and.w	r3, r3, #16
 800b264:	2b00      	cmp	r3, #0
 800b266:	d009      	beq.n	800b27c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	7f1b      	ldrb	r3, [r3, #28]
 800b26c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b270:	b2da      	uxtb	r2, r3
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800b276:	f06f 0306 	mvn.w	r3, #6
 800b27a:	e027      	b.n	800b2cc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800b27c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b282:	2b00      	cmp	r3, #0
 800b284:	d005      	beq.n	800b292 <netconn_recv_data_tcp+0xc6>
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28a:	2200      	movs	r2, #0
 800b28c:	2101      	movs	r1, #1
 800b28e:	68f8      	ldr	r0, [r7, #12]
 800b290:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d10f      	bne.n	800b2ba <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800b29a:	68f8      	ldr	r0, [r7, #12]
 800b29c:	f000 f9a2 	bl	800b5e4 <netconn_err>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800b2a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d002      	beq.n	800b2b4 <netconn_recv_data_tcp+0xe8>
          return err;
 800b2ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b2b2:	e00b      	b.n	800b2cc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800b2b4:	f06f 030d 	mvn.w	r3, #13
 800b2b8:	e008      	b.n	800b2cc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800b2ba:	2101      	movs	r1, #1
 800b2bc:	68f8      	ldr	r0, [r7, #12]
 800b2be:	f000 f961 	bl	800b584 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800b2c2:	f06f 030e 	mvn.w	r3, #14
 800b2c6:	e001      	b.n	800b2cc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800b2c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3740      	adds	r7, #64	; 0x40
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	4613      	mov	r3, r2
 800b2e0:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d005      	beq.n	800b2f4 <netconn_recv_tcp_pbuf_flags+0x20>
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b2f0:	2b10      	cmp	r3, #16
 800b2f2:	d009      	beq.n	800b308 <netconn_recv_tcp_pbuf_flags+0x34>
 800b2f4:	4b0a      	ldr	r3, [pc, #40]	; (800b320 <netconn_recv_tcp_pbuf_flags+0x4c>)
 800b2f6:	f240 3225 	movw	r2, #805	; 0x325
 800b2fa:	490a      	ldr	r1, [pc, #40]	; (800b324 <netconn_recv_tcp_pbuf_flags+0x50>)
 800b2fc:	480a      	ldr	r0, [pc, #40]	; (800b328 <netconn_recv_tcp_pbuf_flags+0x54>)
 800b2fe:	f014 fab3 	bl	801f868 <iprintf>
 800b302:	f06f 030f 	mvn.w	r3, #15
 800b306:	e006      	b.n	800b316 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800b308:	79fb      	ldrb	r3, [r7, #7]
 800b30a:	461a      	mov	r2, r3
 800b30c:	68b9      	ldr	r1, [r7, #8]
 800b30e:	68f8      	ldr	r0, [r7, #12]
 800b310:	f7ff ff5c 	bl	800b1cc <netconn_recv_data_tcp>
 800b314:	4603      	mov	r3, r0
}
 800b316:	4618      	mov	r0, r3
 800b318:	3710      	adds	r7, #16
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	080219bc 	.word	0x080219bc
 800b324:	08021c1c 	.word	0x08021c1c
 800b328:	08021a14 	.word	0x08021a14

0800b32c <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	60b9      	str	r1, [r7, #8]
 800b336:	4613      	mov	r3, r2
 800b338:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d005      	beq.n	800b34c <netconn_recv_udp_raw_netbuf_flags+0x20>
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b348:	2b10      	cmp	r3, #16
 800b34a:	d109      	bne.n	800b360 <netconn_recv_udp_raw_netbuf_flags+0x34>
 800b34c:	4b0a      	ldr	r3, [pc, #40]	; (800b378 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800b34e:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800b352:	490a      	ldr	r1, [pc, #40]	; (800b37c <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800b354:	480a      	ldr	r0, [pc, #40]	; (800b380 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800b356:	f014 fa87 	bl	801f868 <iprintf>
 800b35a:	f06f 030f 	mvn.w	r3, #15
 800b35e:	e006      	b.n	800b36e <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800b360:	79fb      	ldrb	r3, [r7, #7]
 800b362:	461a      	mov	r2, r3
 800b364:	68b9      	ldr	r1, [r7, #8]
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	f7ff fe0a 	bl	800af80 <netconn_recv_data>
 800b36c:	4603      	mov	r3, r0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3710      	adds	r7, #16
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	080219bc 	.word	0x080219bc
 800b37c:	08021c40 	.word	0x08021c40
 800b380:	08021a14 	.word	0x08021a14

0800b384 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b08c      	sub	sp, #48	; 0x30
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d109      	bne.n	800b3a8 <netconn_send+0x24>
 800b394:	4b0e      	ldr	r3, [pc, #56]	; (800b3d0 <netconn_send+0x4c>)
 800b396:	f240 32b2 	movw	r2, #946	; 0x3b2
 800b39a:	490e      	ldr	r1, [pc, #56]	; (800b3d4 <netconn_send+0x50>)
 800b39c:	480e      	ldr	r0, [pc, #56]	; (800b3d8 <netconn_send+0x54>)
 800b39e:	f014 fa63 	bl	801f868 <iprintf>
 800b3a2:	f06f 030f 	mvn.w	r3, #15
 800b3a6:	e00e      	b.n	800b3c6 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800b3b0:	f107 030c 	add.w	r3, r7, #12
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	4809      	ldr	r0, [pc, #36]	; (800b3dc <netconn_send+0x58>)
 800b3b8:	f7ff fbc8 	bl	800ab4c <netconn_apimsg>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800b3c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3730      	adds	r7, #48	; 0x30
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	080219bc 	.word	0x080219bc
 800b3d4:	08021c78 	.word	0x08021c78
 800b3d8:	08021a14 	.word	0x08021a14
 800b3dc:	0800c78d 	.word	0x0800c78d

0800b3e0 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b088      	sub	sp, #32
 800b3e4:	af02      	add	r7, sp, #8
 800b3e6:	60f8      	str	r0, [r7, #12]
 800b3e8:	60b9      	str	r1, [r7, #8]
 800b3ea:	607a      	str	r2, [r7, #4]
 800b3ec:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800b3f6:	78fa      	ldrb	r2, [r7, #3]
 800b3f8:	f107 0110 	add.w	r1, r7, #16
 800b3fc:	6a3b      	ldr	r3, [r7, #32]
 800b3fe:	9300      	str	r3, [sp, #0]
 800b400:	4613      	mov	r3, r2
 800b402:	2201      	movs	r2, #1
 800b404:	68f8      	ldr	r0, [r7, #12]
 800b406:	f000 f805 	bl	800b414 <netconn_write_vectors_partly>
 800b40a:	4603      	mov	r3, r0
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3718      	adds	r7, #24
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b092      	sub	sp, #72	; 0x48
 800b418:	af00      	add	r7, sp, #0
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	60b9      	str	r1, [r7, #8]
 800b41e:	4611      	mov	r1, r2
 800b420:	461a      	mov	r2, r3
 800b422:	460b      	mov	r3, r1
 800b424:	80fb      	strh	r3, [r7, #6]
 800b426:	4613      	mov	r3, r2
 800b428:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d109      	bne.n	800b444 <netconn_write_vectors_partly+0x30>
 800b430:	4b4e      	ldr	r3, [pc, #312]	; (800b56c <netconn_write_vectors_partly+0x158>)
 800b432:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b436:	494e      	ldr	r1, [pc, #312]	; (800b570 <netconn_write_vectors_partly+0x15c>)
 800b438:	484e      	ldr	r0, [pc, #312]	; (800b574 <netconn_write_vectors_partly+0x160>)
 800b43a:	f014 fa15 	bl	801f868 <iprintf>
 800b43e:	f06f 030f 	mvn.w	r3, #15
 800b442:	e08e      	b.n	800b562 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b44c:	2b10      	cmp	r3, #16
 800b44e:	d009      	beq.n	800b464 <netconn_write_vectors_partly+0x50>
 800b450:	4b46      	ldr	r3, [pc, #280]	; (800b56c <netconn_write_vectors_partly+0x158>)
 800b452:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800b456:	4948      	ldr	r1, [pc, #288]	; (800b578 <netconn_write_vectors_partly+0x164>)
 800b458:	4846      	ldr	r0, [pc, #280]	; (800b574 <netconn_write_vectors_partly+0x160>)
 800b45a:	f014 fa05 	bl	801f868 <iprintf>
 800b45e:	f06f 0305 	mvn.w	r3, #5
 800b462:	e07e      	b.n	800b562 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	7f1b      	ldrb	r3, [r3, #28]
 800b468:	f003 0302 	and.w	r3, r3, #2
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d104      	bne.n	800b47a <netconn_write_vectors_partly+0x66>
 800b470:	797b      	ldrb	r3, [r7, #5]
 800b472:	f003 0304 	and.w	r3, r3, #4
 800b476:	2b00      	cmp	r3, #0
 800b478:	d001      	beq.n	800b47e <netconn_write_vectors_partly+0x6a>
 800b47a:	2301      	movs	r3, #1
 800b47c:	e000      	b.n	800b480 <netconn_write_vectors_partly+0x6c>
 800b47e:	2300      	movs	r3, #0
 800b480:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800b484:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d005      	beq.n	800b498 <netconn_write_vectors_partly+0x84>
 800b48c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d102      	bne.n	800b498 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800b492:	f06f 0305 	mvn.w	r3, #5
 800b496:	e064      	b.n	800b562 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800b498:	2300      	movs	r3, #0
 800b49a:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800b49c:	2300      	movs	r3, #0
 800b49e:	643b      	str	r3, [r7, #64]	; 0x40
 800b4a0:	e015      	b.n	800b4ce <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800b4a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4a4:	00db      	lsls	r3, r3, #3
 800b4a6:	68ba      	ldr	r2, [r7, #8]
 800b4a8:	4413      	add	r3, r2
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4ae:	4413      	add	r3, r2
 800b4b0:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800b4b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4b4:	00db      	lsls	r3, r3, #3
 800b4b6:	68ba      	ldr	r2, [r7, #8]
 800b4b8:	4413      	add	r3, r2
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d202      	bcs.n	800b4c8 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800b4c2:	f06f 0305 	mvn.w	r3, #5
 800b4c6:	e04c      	b.n	800b562 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800b4c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	643b      	str	r3, [r7, #64]	; 0x40
 800b4ce:	88fb      	ldrh	r3, [r7, #6]
 800b4d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	dbe5      	blt.n	800b4a2 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800b4d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d101      	bne.n	800b4e0 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	e040      	b.n	800b562 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800b4e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	da0a      	bge.n	800b4fc <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800b4e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d102      	bne.n	800b4f2 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800b4ec:	f06f 0305 	mvn.w	r3, #5
 800b4f0:	e037      	b.n	800b562 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800b4f2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b4f6:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800b4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4fa:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800b504:	88fb      	ldrh	r3, [r7, #6]
 800b506:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800b508:	2300      	movs	r3, #0
 800b50a:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800b50c:	797b      	ldrb	r3, [r7, #5]
 800b50e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800b512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b514:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800b516:	2300      	movs	r3, #0
 800b518:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800b51a:	f107 0314 	add.w	r3, r7, #20
 800b51e:	4619      	mov	r1, r3
 800b520:	4816      	ldr	r0, [pc, #88]	; (800b57c <netconn_write_vectors_partly+0x168>)
 800b522:	f7ff fb13 	bl	800ab4c <netconn_apimsg>
 800b526:	4603      	mov	r3, r0
 800b528:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800b52c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b530:	2b00      	cmp	r3, #0
 800b532:	d114      	bne.n	800b55e <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800b534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b536:	2b00      	cmp	r3, #0
 800b538:	d002      	beq.n	800b540 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800b53a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b53c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b53e:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800b540:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b544:	2b00      	cmp	r3, #0
 800b546:	d10a      	bne.n	800b55e <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800b548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b54a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d006      	beq.n	800b55e <netconn_write_vectors_partly+0x14a>
 800b550:	4b06      	ldr	r3, [pc, #24]	; (800b56c <netconn_write_vectors_partly+0x158>)
 800b552:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b556:	490a      	ldr	r1, [pc, #40]	; (800b580 <netconn_write_vectors_partly+0x16c>)
 800b558:	4806      	ldr	r0, [pc, #24]	; (800b574 <netconn_write_vectors_partly+0x160>)
 800b55a:	f014 f985 	bl	801f868 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800b55e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800b562:	4618      	mov	r0, r3
 800b564:	3748      	adds	r7, #72	; 0x48
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	080219bc 	.word	0x080219bc
 800b570:	08021c94 	.word	0x08021c94
 800b574:	08021a14 	.word	0x08021a14
 800b578:	08021cb0 	.word	0x08021cb0
 800b57c:	0800cc29 	.word	0x0800cc29
 800b580:	08021cd4 	.word	0x08021cd4

0800b584 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b08c      	sub	sp, #48	; 0x30
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	460b      	mov	r3, r1
 800b58e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d109      	bne.n	800b5aa <netconn_close_shutdown+0x26>
 800b596:	4b0f      	ldr	r3, [pc, #60]	; (800b5d4 <netconn_close_shutdown+0x50>)
 800b598:	f240 4247 	movw	r2, #1095	; 0x447
 800b59c:	490e      	ldr	r1, [pc, #56]	; (800b5d8 <netconn_close_shutdown+0x54>)
 800b59e:	480f      	ldr	r0, [pc, #60]	; (800b5dc <netconn_close_shutdown+0x58>)
 800b5a0:	f014 f962 	bl	801f868 <iprintf>
 800b5a4:	f06f 030f 	mvn.w	r3, #15
 800b5a8:	e010      	b.n	800b5cc <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800b5ae:	78fb      	ldrb	r3, [r7, #3]
 800b5b0:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b5b2:	2329      	movs	r3, #41	; 0x29
 800b5b4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800b5b6:	f107 030c 	add.w	r3, r7, #12
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	4808      	ldr	r0, [pc, #32]	; (800b5e0 <netconn_close_shutdown+0x5c>)
 800b5be:	f7ff fac5 	bl	800ab4c <netconn_apimsg>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800b5c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3730      	adds	r7, #48	; 0x30
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}
 800b5d4:	080219bc 	.word	0x080219bc
 800b5d8:	08021cf8 	.word	0x08021cf8
 800b5dc:	08021a14 	.word	0x08021a14
 800b5e0:	0800ce4d 	.word	0x0800ce4d

0800b5e4 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b084      	sub	sp, #16
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d101      	bne.n	800b5f6 <netconn_err+0x12>
    return ERR_OK;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	e00d      	b.n	800b612 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800b5f6:	f011 f925 	bl	801c844 <sys_arch_protect>
 800b5fa:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	7a1b      	ldrb	r3, [r3, #8]
 800b600:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2200      	movs	r2, #0
 800b606:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800b608:	68f8      	ldr	r0, [r7, #12]
 800b60a:	f011 f929 	bl	801c860 <sys_arch_unprotect>
  return err;
 800b60e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b612:	4618      	mov	r0, r3
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
	...

0800b61c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
 800b622:	4603      	mov	r3, r0
 800b624:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800b626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b62a:	f113 0f0d 	cmn.w	r3, #13
 800b62e:	d009      	beq.n	800b644 <lwip_netconn_err_to_msg+0x28>
 800b630:	f113 0f0d 	cmn.w	r3, #13
 800b634:	dc0c      	bgt.n	800b650 <lwip_netconn_err_to_msg+0x34>
 800b636:	f113 0f0f 	cmn.w	r3, #15
 800b63a:	d007      	beq.n	800b64c <lwip_netconn_err_to_msg+0x30>
 800b63c:	f113 0f0e 	cmn.w	r3, #14
 800b640:	d002      	beq.n	800b648 <lwip_netconn_err_to_msg+0x2c>
 800b642:	e005      	b.n	800b650 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800b644:	4b0a      	ldr	r3, [pc, #40]	; (800b670 <lwip_netconn_err_to_msg+0x54>)
 800b646:	e00e      	b.n	800b666 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800b648:	4b0a      	ldr	r3, [pc, #40]	; (800b674 <lwip_netconn_err_to_msg+0x58>)
 800b64a:	e00c      	b.n	800b666 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800b64c:	4b0a      	ldr	r3, [pc, #40]	; (800b678 <lwip_netconn_err_to_msg+0x5c>)
 800b64e:	e00a      	b.n	800b666 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800b650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d005      	beq.n	800b664 <lwip_netconn_err_to_msg+0x48>
 800b658:	4b08      	ldr	r3, [pc, #32]	; (800b67c <lwip_netconn_err_to_msg+0x60>)
 800b65a:	227d      	movs	r2, #125	; 0x7d
 800b65c:	4908      	ldr	r1, [pc, #32]	; (800b680 <lwip_netconn_err_to_msg+0x64>)
 800b65e:	4809      	ldr	r0, [pc, #36]	; (800b684 <lwip_netconn_err_to_msg+0x68>)
 800b660:	f014 f902 	bl	801f868 <iprintf>
      return NULL;
 800b664:	2300      	movs	r3, #0
  }
}
 800b666:	4618      	mov	r0, r3
 800b668:	3708      	adds	r7, #8
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop
 800b670:	08025944 	.word	0x08025944
 800b674:	08025945 	.word	0x08025945
 800b678:	08025946 	.word	0x08025946
 800b67c:	08021d5c 	.word	0x08021d5c
 800b680:	08021d90 	.word	0x08021d90
 800b684:	08021da0 	.word	0x08021da0

0800b688 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d105      	bne.n	800b6a4 <lwip_netconn_is_err_msg+0x1c>
 800b698:	4b12      	ldr	r3, [pc, #72]	; (800b6e4 <lwip_netconn_is_err_msg+0x5c>)
 800b69a:	2285      	movs	r2, #133	; 0x85
 800b69c:	4912      	ldr	r1, [pc, #72]	; (800b6e8 <lwip_netconn_is_err_msg+0x60>)
 800b69e:	4813      	ldr	r0, [pc, #76]	; (800b6ec <lwip_netconn_is_err_msg+0x64>)
 800b6a0:	f014 f8e2 	bl	801f868 <iprintf>

  if (msg == &netconn_aborted) {
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	4a12      	ldr	r2, [pc, #72]	; (800b6f0 <lwip_netconn_is_err_msg+0x68>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d104      	bne.n	800b6b6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	22f3      	movs	r2, #243	; 0xf3
 800b6b0:	701a      	strb	r2, [r3, #0]
    return 1;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	e012      	b.n	800b6dc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	4a0e      	ldr	r2, [pc, #56]	; (800b6f4 <lwip_netconn_is_err_msg+0x6c>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d104      	bne.n	800b6c8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	22f2      	movs	r2, #242	; 0xf2
 800b6c2:	701a      	strb	r2, [r3, #0]
    return 1;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	e009      	b.n	800b6dc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	4a0b      	ldr	r2, [pc, #44]	; (800b6f8 <lwip_netconn_is_err_msg+0x70>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d104      	bne.n	800b6da <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	22f1      	movs	r2, #241	; 0xf1
 800b6d4:	701a      	strb	r2, [r3, #0]
    return 1;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	e000      	b.n	800b6dc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800b6da:	2300      	movs	r3, #0
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3708      	adds	r7, #8
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}
 800b6e4:	08021d5c 	.word	0x08021d5c
 800b6e8:	08021dc8 	.word	0x08021dc8
 800b6ec:	08021da0 	.word	0x08021da0
 800b6f0:	08025944 	.word	0x08025944
 800b6f4:	08025945 	.word	0x08025945
 800b6f8:	08025946 	.word	0x08025946

0800b6fc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b088      	sub	sp, #32
 800b700:	af00      	add	r7, sp, #0
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	607a      	str	r2, [r7, #4]
 800b708:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d105      	bne.n	800b71c <recv_udp+0x20>
 800b710:	4b34      	ldr	r3, [pc, #208]	; (800b7e4 <recv_udp+0xe8>)
 800b712:	22e5      	movs	r2, #229	; 0xe5
 800b714:	4934      	ldr	r1, [pc, #208]	; (800b7e8 <recv_udp+0xec>)
 800b716:	4835      	ldr	r0, [pc, #212]	; (800b7ec <recv_udp+0xf0>)
 800b718:	f014 f8a6 	bl	801f868 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d105      	bne.n	800b72e <recv_udp+0x32>
 800b722:	4b30      	ldr	r3, [pc, #192]	; (800b7e4 <recv_udp+0xe8>)
 800b724:	22e6      	movs	r2, #230	; 0xe6
 800b726:	4932      	ldr	r1, [pc, #200]	; (800b7f0 <recv_udp+0xf4>)
 800b728:	4830      	ldr	r0, [pc, #192]	; (800b7ec <recv_udp+0xf0>)
 800b72a:	f014 f89d 	bl	801f868 <iprintf>
  conn = (struct netconn *)arg;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800b732:	69fb      	ldr	r3, [r7, #28]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d103      	bne.n	800b740 <recv_udp+0x44>
    pbuf_free(p);
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f005 f919 	bl	8010970 <pbuf_free>
    return;
 800b73e:	e04d      	b.n	800b7dc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	68ba      	ldr	r2, [r7, #8]
 800b746:	429a      	cmp	r2, r3
 800b748:	d005      	beq.n	800b756 <recv_udp+0x5a>
 800b74a:	4b26      	ldr	r3, [pc, #152]	; (800b7e4 <recv_udp+0xe8>)
 800b74c:	22ee      	movs	r2, #238	; 0xee
 800b74e:	4929      	ldr	r1, [pc, #164]	; (800b7f4 <recv_udp+0xf8>)
 800b750:	4826      	ldr	r0, [pc, #152]	; (800b7ec <recv_udp+0xf0>)
 800b752:	f014 f889 	bl	801f868 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b756:	69fb      	ldr	r3, [r7, #28]
 800b758:	3310      	adds	r3, #16
 800b75a:	4618      	mov	r0, r3
 800b75c:	f010 ff68 	bl	801c630 <sys_mbox_valid>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d103      	bne.n	800b76e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f005 f902 	bl	8010970 <pbuf_free>
    return;
 800b76c:	e036      	b.n	800b7dc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b76e:	2006      	movs	r0, #6
 800b770:	f004 f992 	bl	800fa98 <memp_malloc>
 800b774:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800b776:	69bb      	ldr	r3, [r7, #24]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d103      	bne.n	800b784 <recv_udp+0x88>
    pbuf_free(p);
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f005 f8f7 	bl	8010970 <pbuf_free>
    return;
 800b782:	e02b      	b.n	800b7dc <recv_udp+0xe0>
  } else {
    buf->p = p;
 800b784:	69bb      	ldr	r3, [r7, #24]
 800b786:	687a      	ldr	r2, [r7, #4]
 800b788:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d002      	beq.n	800b79c <recv_udp+0xa0>
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	e000      	b.n	800b79e <recv_udp+0xa2>
 800b79c:	2300      	movs	r3, #0
 800b79e:	69ba      	ldr	r2, [r7, #24]
 800b7a0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800b7a2:	69bb      	ldr	r3, [r7, #24]
 800b7a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b7a6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	891b      	ldrh	r3, [r3, #8]
 800b7ac:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800b7ae:	69fb      	ldr	r3, [r7, #28]
 800b7b0:	3310      	adds	r3, #16
 800b7b2:	69b9      	ldr	r1, [r7, #24]
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f010 fed9 	bl	801c56c <sys_mbox_trypost>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d003      	beq.n	800b7c8 <recv_udp+0xcc>
    netbuf_delete(buf);
 800b7c0:	69b8      	ldr	r0, [r7, #24]
 800b7c2:	f001 fbed 	bl	800cfa0 <netbuf_delete>
    return;
 800b7c6:	e009      	b.n	800b7dc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d005      	beq.n	800b7dc <recv_udp+0xe0>
 800b7d0:	69fb      	ldr	r3, [r7, #28]
 800b7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d4:	8afa      	ldrh	r2, [r7, #22]
 800b7d6:	2100      	movs	r1, #0
 800b7d8:	69f8      	ldr	r0, [r7, #28]
 800b7da:	4798      	blx	r3
  }
}
 800b7dc:	3720      	adds	r7, #32
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	08021d5c 	.word	0x08021d5c
 800b7e8:	08021dd4 	.word	0x08021dd4
 800b7ec:	08021da0 	.word	0x08021da0
 800b7f0:	08021df8 	.word	0x08021df8
 800b7f4:	08021e18 	.word	0x08021e18

0800b7f8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b088      	sub	sp, #32
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	607a      	str	r2, [r7, #4]
 800b804:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d106      	bne.n	800b81a <recv_tcp+0x22>
 800b80c:	4b36      	ldr	r3, [pc, #216]	; (800b8e8 <recv_tcp+0xf0>)
 800b80e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b812:	4936      	ldr	r1, [pc, #216]	; (800b8ec <recv_tcp+0xf4>)
 800b814:	4836      	ldr	r0, [pc, #216]	; (800b8f0 <recv_tcp+0xf8>)
 800b816:	f014 f827 	bl	801f868 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d106      	bne.n	800b82e <recv_tcp+0x36>
 800b820:	4b31      	ldr	r3, [pc, #196]	; (800b8e8 <recv_tcp+0xf0>)
 800b822:	f240 122d 	movw	r2, #301	; 0x12d
 800b826:	4933      	ldr	r1, [pc, #204]	; (800b8f4 <recv_tcp+0xfc>)
 800b828:	4831      	ldr	r0, [pc, #196]	; (800b8f0 <recv_tcp+0xf8>)
 800b82a:	f014 f81d 	bl	801f868 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800b82e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d006      	beq.n	800b844 <recv_tcp+0x4c>
 800b836:	4b2c      	ldr	r3, [pc, #176]	; (800b8e8 <recv_tcp+0xf0>)
 800b838:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800b83c:	492e      	ldr	r1, [pc, #184]	; (800b8f8 <recv_tcp+0x100>)
 800b83e:	482c      	ldr	r0, [pc, #176]	; (800b8f0 <recv_tcp+0xf8>)
 800b840:	f014 f812 	bl	801f868 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d102      	bne.n	800b854 <recv_tcp+0x5c>
    return ERR_VAL;
 800b84e:	f06f 0305 	mvn.w	r3, #5
 800b852:	e045      	b.n	800b8e0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	68ba      	ldr	r2, [r7, #8]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d006      	beq.n	800b86c <recv_tcp+0x74>
 800b85e:	4b22      	ldr	r3, [pc, #136]	; (800b8e8 <recv_tcp+0xf0>)
 800b860:	f240 1235 	movw	r2, #309	; 0x135
 800b864:	4925      	ldr	r1, [pc, #148]	; (800b8fc <recv_tcp+0x104>)
 800b866:	4822      	ldr	r0, [pc, #136]	; (800b8f0 <recv_tcp+0xf8>)
 800b868:	f013 fffe 	bl	801f868 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	3310      	adds	r3, #16
 800b870:	4618      	mov	r0, r3
 800b872:	f010 fedd 	bl	801c630 <sys_mbox_valid>
 800b876:	4603      	mov	r3, r0
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d10d      	bne.n	800b898 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d008      	beq.n	800b894 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	891b      	ldrh	r3, [r3, #8]
 800b886:	4619      	mov	r1, r3
 800b888:	68b8      	ldr	r0, [r7, #8]
 800b88a:	f006 f9ad 	bl	8011be8 <tcp_recved>
      pbuf_free(p);
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f005 f86e 	bl	8010970 <pbuf_free>
    }
    return ERR_OK;
 800b894:	2300      	movs	r3, #0
 800b896:	e023      	b.n	800b8e0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d005      	beq.n	800b8aa <recv_tcp+0xb2>
    msg = p;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	891b      	ldrh	r3, [r3, #8]
 800b8a6:	83fb      	strh	r3, [r7, #30]
 800b8a8:	e003      	b.n	800b8b2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800b8aa:	4b15      	ldr	r3, [pc, #84]	; (800b900 <recv_tcp+0x108>)
 800b8ac:	61bb      	str	r3, [r7, #24]
    len = 0;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	3310      	adds	r3, #16
 800b8b6:	69b9      	ldr	r1, [r7, #24]
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f010 fe57 	bl	801c56c <sys_mbox_trypost>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d002      	beq.n	800b8ca <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800b8c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b8c8:	e00a      	b.n	800b8e0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d005      	beq.n	800b8de <recv_tcp+0xe6>
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d6:	8bfa      	ldrh	r2, [r7, #30]
 800b8d8:	2100      	movs	r1, #0
 800b8da:	6978      	ldr	r0, [r7, #20]
 800b8dc:	4798      	blx	r3
  }

  return ERR_OK;
 800b8de:	2300      	movs	r3, #0
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3720      	adds	r7, #32
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	08021d5c 	.word	0x08021d5c
 800b8ec:	08021e38 	.word	0x08021e38
 800b8f0:	08021da0 	.word	0x08021da0
 800b8f4:	08021e5c 	.word	0x08021e5c
 800b8f8:	08021e7c 	.word	0x08021e7c
 800b8fc:	08021e94 	.word	0x08021e94
 800b900:	08025946 	.word	0x08025946

0800b904 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d106      	bne.n	800b926 <poll_tcp+0x22>
 800b918:	4b29      	ldr	r3, [pc, #164]	; (800b9c0 <poll_tcp+0xbc>)
 800b91a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800b91e:	4929      	ldr	r1, [pc, #164]	; (800b9c4 <poll_tcp+0xc0>)
 800b920:	4829      	ldr	r0, [pc, #164]	; (800b9c8 <poll_tcp+0xc4>)
 800b922:	f013 ffa1 	bl	801f868 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	785b      	ldrb	r3, [r3, #1]
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d104      	bne.n	800b938 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b92e:	2101      	movs	r1, #1
 800b930:	68f8      	ldr	r0, [r7, #12]
 800b932:	f000 ffad 	bl	800c890 <lwip_netconn_do_writemore>
 800b936:	e016      	b.n	800b966 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	785b      	ldrb	r3, [r3, #1]
 800b93c:	2b04      	cmp	r3, #4
 800b93e:	d112      	bne.n	800b966 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6a1b      	ldr	r3, [r3, #32]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d00a      	beq.n	800b95e <poll_tcp+0x5a>
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	6a1b      	ldr	r3, [r3, #32]
 800b94c:	7a5b      	ldrb	r3, [r3, #9]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d005      	beq.n	800b95e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	6a1b      	ldr	r3, [r3, #32]
 800b956:	7a5a      	ldrb	r2, [r3, #9]
 800b958:	3a01      	subs	r2, #1
 800b95a:	b2d2      	uxtb	r2, r2
 800b95c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b95e:	2101      	movs	r1, #1
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f000 fbf7 	bl	800c154 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	7f1b      	ldrb	r3, [r3, #28]
 800b96a:	f003 0310 	and.w	r3, r3, #16
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d021      	beq.n	800b9b6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d01d      	beq.n	800b9b6 <poll_tcp+0xb2>
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b982:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b986:	d316      	bcc.n	800b9b6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b990:	2b04      	cmp	r3, #4
 800b992:	d810      	bhi.n	800b9b6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	7f1b      	ldrb	r3, [r3, #28]
 800b998:	f023 0310 	bic.w	r3, r3, #16
 800b99c:	b2da      	uxtb	r2, r3
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d005      	beq.n	800b9b6 <poll_tcp+0xb2>
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	2102      	movs	r1, #2
 800b9b2:	68f8      	ldr	r0, [r7, #12]
 800b9b4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b9b6:	2300      	movs	r3, #0
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3710      	adds	r7, #16
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	08021d5c 	.word	0x08021d5c
 800b9c4:	08021eb4 	.word	0x08021eb4
 800b9c8:	08021da0 	.word	0x08021da0

0800b9cc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b086      	sub	sp, #24
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	4613      	mov	r3, r2
 800b9d8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d106      	bne.n	800b9f2 <sent_tcp+0x26>
 800b9e4:	4b20      	ldr	r3, [pc, #128]	; (800ba68 <sent_tcp+0x9c>)
 800b9e6:	f240 1293 	movw	r2, #403	; 0x193
 800b9ea:	4920      	ldr	r1, [pc, #128]	; (800ba6c <sent_tcp+0xa0>)
 800b9ec:	4820      	ldr	r0, [pc, #128]	; (800ba70 <sent_tcp+0xa4>)
 800b9ee:	f013 ff3b 	bl	801f868 <iprintf>

  if (conn) {
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d032      	beq.n	800ba5e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	785b      	ldrb	r3, [r3, #1]
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d104      	bne.n	800ba0a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ba00:	2101      	movs	r1, #1
 800ba02:	6978      	ldr	r0, [r7, #20]
 800ba04:	f000 ff44 	bl	800c890 <lwip_netconn_do_writemore>
 800ba08:	e007      	b.n	800ba1a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	785b      	ldrb	r3, [r3, #1]
 800ba0e:	2b04      	cmp	r3, #4
 800ba10:	d103      	bne.n	800ba1a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ba12:	2101      	movs	r1, #1
 800ba14:	6978      	ldr	r0, [r7, #20]
 800ba16:	f000 fb9d 	bl	800c154 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d01d      	beq.n	800ba5e <sent_tcp+0x92>
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ba2a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ba2e:	d316      	bcc.n	800ba5e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ba38:	2b04      	cmp	r3, #4
 800ba3a:	d810      	bhi.n	800ba5e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	7f1b      	ldrb	r3, [r3, #28]
 800ba40:	f023 0310 	bic.w	r3, r3, #16
 800ba44:	b2da      	uxtb	r2, r3
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d005      	beq.n	800ba5e <sent_tcp+0x92>
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba56:	88fa      	ldrh	r2, [r7, #6]
 800ba58:	2102      	movs	r1, #2
 800ba5a:	6978      	ldr	r0, [r7, #20]
 800ba5c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3718      	adds	r7, #24
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	08021d5c 	.word	0x08021d5c
 800ba6c:	08021eb4 	.word	0x08021eb4
 800ba70:	08021da0 	.word	0x08021da0

0800ba74 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b088      	sub	sp, #32
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ba84:	69fb      	ldr	r3, [r7, #28]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d106      	bne.n	800ba98 <err_tcp+0x24>
 800ba8a:	4b5f      	ldr	r3, [pc, #380]	; (800bc08 <err_tcp+0x194>)
 800ba8c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800ba90:	495e      	ldr	r1, [pc, #376]	; (800bc0c <err_tcp+0x198>)
 800ba92:	485f      	ldr	r0, [pc, #380]	; (800bc10 <err_tcp+0x19c>)
 800ba94:	f013 fee8 	bl	801f868 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800ba98:	f010 fed4 	bl	801c844 <sys_arch_protect>
 800ba9c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800ba9e:	69fb      	ldr	r3, [r7, #28]
 800baa0:	2200      	movs	r2, #0
 800baa2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800baa4:	69fb      	ldr	r3, [r7, #28]
 800baa6:	78fa      	ldrb	r2, [r7, #3]
 800baa8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800baaa:	69fb      	ldr	r3, [r7, #28]
 800baac:	7f1b      	ldrb	r3, [r3, #28]
 800baae:	f043 0301 	orr.w	r3, r3, #1
 800bab2:	b2da      	uxtb	r2, r3
 800bab4:	69fb      	ldr	r3, [r7, #28]
 800bab6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	785b      	ldrb	r3, [r3, #1]
 800babc:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800babe:	69fb      	ldr	r3, [r7, #28]
 800bac0:	2200      	movs	r2, #0
 800bac2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800bac4:	69b8      	ldr	r0, [r7, #24]
 800bac6:	f010 fecb 	bl	801c860 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800baca:	69fb      	ldr	r3, [r7, #28]
 800bacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d005      	beq.n	800bade <err_tcp+0x6a>
 800bad2:	69fb      	ldr	r3, [r7, #28]
 800bad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad6:	2200      	movs	r2, #0
 800bad8:	2104      	movs	r1, #4
 800bada:	69f8      	ldr	r0, [r7, #28]
 800badc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bade:	69fb      	ldr	r3, [r7, #28]
 800bae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d005      	beq.n	800baf2 <err_tcp+0x7e>
 800bae6:	69fb      	ldr	r3, [r7, #28]
 800bae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baea:	2200      	movs	r2, #0
 800baec:	2100      	movs	r1, #0
 800baee:	69f8      	ldr	r0, [r7, #28]
 800baf0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800baf2:	69fb      	ldr	r3, [r7, #28]
 800baf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d005      	beq.n	800bb06 <err_tcp+0x92>
 800bafa:	69fb      	ldr	r3, [r7, #28]
 800bafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bafe:	2200      	movs	r2, #0
 800bb00:	2102      	movs	r1, #2
 800bb02:	69f8      	ldr	r0, [r7, #28]
 800bb04:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800bb06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7ff fd86 	bl	800b61c <lwip_netconn_err_to_msg>
 800bb10:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800bb12:	69fb      	ldr	r3, [r7, #28]
 800bb14:	3310      	adds	r3, #16
 800bb16:	4618      	mov	r0, r3
 800bb18:	f010 fd8a 	bl	801c630 <sys_mbox_valid>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d005      	beq.n	800bb2e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800bb22:	69fb      	ldr	r3, [r7, #28]
 800bb24:	3310      	adds	r3, #16
 800bb26:	6939      	ldr	r1, [r7, #16]
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f010 fd1f 	bl	801c56c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	3314      	adds	r3, #20
 800bb32:	4618      	mov	r0, r3
 800bb34:	f010 fd7c 	bl	801c630 <sys_mbox_valid>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d005      	beq.n	800bb4a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	3314      	adds	r3, #20
 800bb42:	6939      	ldr	r1, [r7, #16]
 800bb44:	4618      	mov	r0, r3
 800bb46:	f010 fd11 	bl	801c56c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800bb4a:	7dfb      	ldrb	r3, [r7, #23]
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d005      	beq.n	800bb5c <err_tcp+0xe8>
 800bb50:	7dfb      	ldrb	r3, [r7, #23]
 800bb52:	2b04      	cmp	r3, #4
 800bb54:	d002      	beq.n	800bb5c <err_tcp+0xe8>
 800bb56:	7dfb      	ldrb	r3, [r7, #23]
 800bb58:	2b03      	cmp	r3, #3
 800bb5a:	d143      	bne.n	800bbe4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800bb5c:	69fb      	ldr	r3, [r7, #28]
 800bb5e:	7f1b      	ldrb	r3, [r3, #28]
 800bb60:	f003 0304 	and.w	r3, r3, #4
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	bf14      	ite	ne
 800bb68:	2301      	movne	r3, #1
 800bb6a:	2300      	moveq	r3, #0
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	7f1b      	ldrb	r3, [r3, #28]
 800bb74:	f023 0304 	bic.w	r3, r3, #4
 800bb78:	b2da      	uxtb	r2, r3
 800bb7a:	69fb      	ldr	r3, [r7, #28]
 800bb7c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d13b      	bne.n	800bbfc <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800bb84:	69fb      	ldr	r3, [r7, #28]
 800bb86:	6a1b      	ldr	r3, [r3, #32]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d106      	bne.n	800bb9a <err_tcp+0x126>
 800bb8c:	4b1e      	ldr	r3, [pc, #120]	; (800bc08 <err_tcp+0x194>)
 800bb8e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bb92:	4920      	ldr	r1, [pc, #128]	; (800bc14 <err_tcp+0x1a0>)
 800bb94:	481e      	ldr	r0, [pc, #120]	; (800bc10 <err_tcp+0x19c>)
 800bb96:	f013 fe67 	bl	801f868 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800bb9a:	7dfb      	ldrb	r3, [r7, #23]
 800bb9c:	2b04      	cmp	r3, #4
 800bb9e:	d104      	bne.n	800bbaa <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800bba0:	69fb      	ldr	r3, [r7, #28]
 800bba2:	6a1b      	ldr	r3, [r3, #32]
 800bba4:	2200      	movs	r2, #0
 800bba6:	711a      	strb	r2, [r3, #4]
 800bba8:	e003      	b.n	800bbb2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	6a1b      	ldr	r3, [r3, #32]
 800bbae:	78fa      	ldrb	r2, [r7, #3]
 800bbb0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bbb2:	69fb      	ldr	r3, [r7, #28]
 800bbb4:	6a1b      	ldr	r3, [r3, #32]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	330c      	adds	r3, #12
 800bbba:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800bbbc:	68b8      	ldr	r0, [r7, #8]
 800bbbe:	f010 fdc5 	bl	801c74c <sys_sem_valid>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d106      	bne.n	800bbd6 <err_tcp+0x162>
 800bbc8:	4b0f      	ldr	r3, [pc, #60]	; (800bc08 <err_tcp+0x194>)
 800bbca:	f240 12ef 	movw	r2, #495	; 0x1ef
 800bbce:	4912      	ldr	r1, [pc, #72]	; (800bc18 <err_tcp+0x1a4>)
 800bbd0:	480f      	ldr	r0, [pc, #60]	; (800bc10 <err_tcp+0x19c>)
 800bbd2:	f013 fe49 	bl	801f868 <iprintf>
      conn->current_msg = NULL;
 800bbd6:	69fb      	ldr	r3, [r7, #28]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800bbdc:	68b8      	ldr	r0, [r7, #8]
 800bbde:	f010 fd9b 	bl	801c718 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800bbe2:	e00b      	b.n	800bbfc <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800bbe4:	69fb      	ldr	r3, [r7, #28]
 800bbe6:	6a1b      	ldr	r3, [r3, #32]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d008      	beq.n	800bbfe <err_tcp+0x18a>
 800bbec:	4b06      	ldr	r3, [pc, #24]	; (800bc08 <err_tcp+0x194>)
 800bbee:	f240 12f7 	movw	r2, #503	; 0x1f7
 800bbf2:	490a      	ldr	r1, [pc, #40]	; (800bc1c <err_tcp+0x1a8>)
 800bbf4:	4806      	ldr	r0, [pc, #24]	; (800bc10 <err_tcp+0x19c>)
 800bbf6:	f013 fe37 	bl	801f868 <iprintf>
  }
}
 800bbfa:	e000      	b.n	800bbfe <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800bbfc:	bf00      	nop
}
 800bbfe:	bf00      	nop
 800bc00:	3720      	adds	r7, #32
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	08021d5c 	.word	0x08021d5c
 800bc0c:	08021eb4 	.word	0x08021eb4
 800bc10:	08021da0 	.word	0x08021da0
 800bc14:	08021ec4 	.word	0x08021ec4
 800bc18:	08021ee0 	.word	0x08021ee0
 800bc1c:	08021efc 	.word	0x08021efc

0800bc20 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800bc2e:	6879      	ldr	r1, [r7, #4]
 800bc30:	68f8      	ldr	r0, [r7, #12]
 800bc32:	f006 fe9f 	bl	8012974 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800bc36:	490a      	ldr	r1, [pc, #40]	; (800bc60 <setup_tcp+0x40>)
 800bc38:	68f8      	ldr	r0, [r7, #12]
 800bc3a:	f006 fead 	bl	8012998 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800bc3e:	4909      	ldr	r1, [pc, #36]	; (800bc64 <setup_tcp+0x44>)
 800bc40:	68f8      	ldr	r0, [r7, #12]
 800bc42:	f006 fecb 	bl	80129dc <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800bc46:	2202      	movs	r2, #2
 800bc48:	4907      	ldr	r1, [pc, #28]	; (800bc68 <setup_tcp+0x48>)
 800bc4a:	68f8      	ldr	r0, [r7, #12]
 800bc4c:	f006 ff22 	bl	8012a94 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800bc50:	4906      	ldr	r1, [pc, #24]	; (800bc6c <setup_tcp+0x4c>)
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	f006 fee4 	bl	8012a20 <tcp_err>
}
 800bc58:	bf00      	nop
 800bc5a:	3710      	adds	r7, #16
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	0800b7f9 	.word	0x0800b7f9
 800bc64:	0800b9cd 	.word	0x0800b9cd
 800bc68:	0800b905 	.word	0x0800b905
 800bc6c:	0800ba75 	.word	0x0800ba75

0800bc70 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800bc70:	b590      	push	{r4, r7, lr}
 800bc72:	b089      	sub	sp, #36	; 0x24
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	4613      	mov	r3, r2
 800bc7c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800bc82:	69fb      	ldr	r3, [r7, #28]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d102      	bne.n	800bc8e <accept_function+0x1e>
    return ERR_VAL;
 800bc88:	f06f 0305 	mvn.w	r3, #5
 800bc8c:	e0a1      	b.n	800bdd2 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800bc8e:	69fb      	ldr	r3, [r7, #28]
 800bc90:	3314      	adds	r3, #20
 800bc92:	4618      	mov	r0, r3
 800bc94:	f010 fccc 	bl	801c630 <sys_mbox_valid>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d102      	bne.n	800bca4 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800bc9e:	f06f 0305 	mvn.w	r3, #5
 800bca2:	e096      	b.n	800bdd2 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d11b      	bne.n	800bce2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800bcaa:	69fb      	ldr	r3, [r7, #28]
 800bcac:	f103 0414 	add.w	r4, r3, #20
 800bcb0:	f06f 000c 	mvn.w	r0, #12
 800bcb4:	f7ff fcb2 	bl	800b61c <lwip_netconn_err_to_msg>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	4619      	mov	r1, r3
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	f010 fc55 	bl	801c56c <sys_mbox_trypost>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d109      	bne.n	800bcdc <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bcc8:	69fb      	ldr	r3, [r7, #28]
 800bcca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d005      	beq.n	800bcdc <accept_function+0x6c>
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	2100      	movs	r1, #0
 800bcd8:	69f8      	ldr	r0, [r7, #28]
 800bcda:	4798      	blx	r3
    }
    return ERR_VAL;
 800bcdc:	f06f 0305 	mvn.w	r3, #5
 800bce0:	e077      	b.n	800bdd2 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800bce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d006      	beq.n	800bcf8 <accept_function+0x88>
 800bcea:	4b3c      	ldr	r3, [pc, #240]	; (800bddc <accept_function+0x16c>)
 800bcec:	f240 222a 	movw	r2, #554	; 0x22a
 800bcf0:	493b      	ldr	r1, [pc, #236]	; (800bde0 <accept_function+0x170>)
 800bcf2:	483c      	ldr	r0, [pc, #240]	; (800bde4 <accept_function+0x174>)
 800bcf4:	f013 fdb8 	bl	801f868 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800bcf8:	69fb      	ldr	r3, [r7, #28]
 800bcfa:	781a      	ldrb	r2, [r3, #0]
 800bcfc:	69fb      	ldr	r3, [r7, #28]
 800bcfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd00:	4619      	mov	r1, r3
 800bd02:	4610      	mov	r0, r2
 800bd04:	f000 f8f0 	bl	800bee8 <netconn_alloc>
 800bd08:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d11b      	bne.n	800bd48 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800bd10:	69fb      	ldr	r3, [r7, #28]
 800bd12:	f103 0414 	add.w	r4, r3, #20
 800bd16:	f06f 000c 	mvn.w	r0, #12
 800bd1a:	f7ff fc7f 	bl	800b61c <lwip_netconn_err_to_msg>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	4619      	mov	r1, r3
 800bd22:	4620      	mov	r0, r4
 800bd24:	f010 fc22 	bl	801c56c <sys_mbox_trypost>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d109      	bne.n	800bd42 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bd2e:	69fb      	ldr	r3, [r7, #28]
 800bd30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d005      	beq.n	800bd42 <accept_function+0xd2>
 800bd36:	69fb      	ldr	r3, [r7, #28]
 800bd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	69f8      	ldr	r0, [r7, #28]
 800bd40:	4798      	blx	r3
    }
    return ERR_MEM;
 800bd42:	f04f 33ff 	mov.w	r3, #4294967295
 800bd46:	e044      	b.n	800bdd2 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800bd48:	69bb      	ldr	r3, [r7, #24]
 800bd4a:	68ba      	ldr	r2, [r7, #8]
 800bd4c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800bd4e:	69b8      	ldr	r0, [r7, #24]
 800bd50:	f7ff ff66 	bl	800bc20 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800bd54:	69fb      	ldr	r3, [r7, #28]
 800bd56:	3314      	adds	r3, #20
 800bd58:	69b9      	ldr	r1, [r7, #24]
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f010 fc06 	bl	801c56c <sys_mbox_trypost>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d02a      	beq.n	800bdbc <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800bd66:	69bb      	ldr	r3, [r7, #24]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800bd6c:	2100      	movs	r1, #0
 800bd6e:	6978      	ldr	r0, [r7, #20]
 800bd70:	f006 fe00 	bl	8012974 <tcp_arg>
    tcp_recv(pcb, NULL);
 800bd74:	2100      	movs	r1, #0
 800bd76:	6978      	ldr	r0, [r7, #20]
 800bd78:	f006 fe0e 	bl	8012998 <tcp_recv>
    tcp_sent(pcb, NULL);
 800bd7c:	2100      	movs	r1, #0
 800bd7e:	6978      	ldr	r0, [r7, #20]
 800bd80:	f006 fe2c 	bl	80129dc <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800bd84:	2200      	movs	r2, #0
 800bd86:	2100      	movs	r1, #0
 800bd88:	6978      	ldr	r0, [r7, #20]
 800bd8a:	f006 fe83 	bl	8012a94 <tcp_poll>
    tcp_err(pcb, NULL);
 800bd8e:	2100      	movs	r1, #0
 800bd90:	6978      	ldr	r0, [r7, #20]
 800bd92:	f006 fe45 	bl	8012a20 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800bd96:	69bb      	ldr	r3, [r7, #24]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800bd9c:	69bb      	ldr	r3, [r7, #24]
 800bd9e:	3310      	adds	r3, #16
 800bda0:	4618      	mov	r0, r3
 800bda2:	f010 fbd1 	bl	801c548 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800bda6:	69bb      	ldr	r3, [r7, #24]
 800bda8:	3310      	adds	r3, #16
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f010 fc51 	bl	801c652 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800bdb0:	69b8      	ldr	r0, [r7, #24]
 800bdb2:	f000 f907 	bl	800bfc4 <netconn_free>
    return ERR_MEM;
 800bdb6:	f04f 33ff 	mov.w	r3, #4294967295
 800bdba:	e00a      	b.n	800bdd2 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bdbc:	69fb      	ldr	r3, [r7, #28]
 800bdbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d005      	beq.n	800bdd0 <accept_function+0x160>
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc8:	2200      	movs	r2, #0
 800bdca:	2100      	movs	r1, #0
 800bdcc:	69f8      	ldr	r0, [r7, #28]
 800bdce:	4798      	blx	r3
  }

  return ERR_OK;
 800bdd0:	2300      	movs	r3, #0
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3724      	adds	r7, #36	; 0x24
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd90      	pop	{r4, r7, pc}
 800bdda:	bf00      	nop
 800bddc:	08021d5c 	.word	0x08021d5c
 800bde0:	08021f18 	.word	0x08021f18
 800bde4:	08021da0 	.word	0x08021da0

0800bde8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800bde8:	b590      	push	{r4, r7, lr}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	685b      	ldr	r3, [r3, #4]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d006      	beq.n	800be0c <pcb_new+0x24>
 800bdfe:	4b2b      	ldr	r3, [pc, #172]	; (800beac <pcb_new+0xc4>)
 800be00:	f240 2265 	movw	r2, #613	; 0x265
 800be04:	492a      	ldr	r1, [pc, #168]	; (800beb0 <pcb_new+0xc8>)
 800be06:	482b      	ldr	r0, [pc, #172]	; (800beb4 <pcb_new+0xcc>)
 800be08:	f013 fd2e 	bl	801f868 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be16:	2b10      	cmp	r3, #16
 800be18:	d022      	beq.n	800be60 <pcb_new+0x78>
 800be1a:	2b20      	cmp	r3, #32
 800be1c:	d133      	bne.n	800be86 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681c      	ldr	r4, [r3, #0]
 800be22:	7bfb      	ldrb	r3, [r7, #15]
 800be24:	4618      	mov	r0, r3
 800be26:	f00c f8f2 	bl	801800e <udp_new_ip_type>
 800be2a:	4603      	mov	r3, r0
 800be2c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d02a      	beq.n	800be8e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	2b22      	cmp	r3, #34	; 0x22
 800be40:	d104      	bne.n	800be4c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	2201      	movs	r2, #1
 800be4a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	6858      	ldr	r0, [r3, #4]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	461a      	mov	r2, r3
 800be58:	4917      	ldr	r1, [pc, #92]	; (800beb8 <pcb_new+0xd0>)
 800be5a:	f00c f85f 	bl	8017f1c <udp_recv>
      }
      break;
 800be5e:	e016      	b.n	800be8e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681c      	ldr	r4, [r3, #0]
 800be64:	7bfb      	ldrb	r3, [r7, #15]
 800be66:	4618      	mov	r0, r3
 800be68:	f006 fd76 	bl	8012958 <tcp_new_ip_type>
 800be6c:	4603      	mov	r3, r0
 800be6e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d00b      	beq.n	800be92 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	4618      	mov	r0, r3
 800be80:	f7ff fece 	bl	800bc20 <setup_tcp>
      }
      break;
 800be84:	e005      	b.n	800be92 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	22fa      	movs	r2, #250	; 0xfa
 800be8a:	711a      	strb	r2, [r3, #4]
      return;
 800be8c:	e00a      	b.n	800bea4 <pcb_new+0xbc>
      break;
 800be8e:	bf00      	nop
 800be90:	e000      	b.n	800be94 <pcb_new+0xac>
      break;
 800be92:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d102      	bne.n	800bea4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	22ff      	movs	r2, #255	; 0xff
 800bea2:	711a      	strb	r2, [r3, #4]
  }
}
 800bea4:	3714      	adds	r7, #20
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd90      	pop	{r4, r7, pc}
 800beaa:	bf00      	nop
 800beac:	08021d5c 	.word	0x08021d5c
 800beb0:	08021f40 	.word	0x08021f40
 800beb4:	08021da0 	.word	0x08021da0
 800beb8:	0800b6fd 	.word	0x0800b6fd

0800bebc <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b084      	sub	sp, #16
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2200      	movs	r2, #0
 800becc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d102      	bne.n	800bede <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800bed8:	68f8      	ldr	r0, [r7, #12]
 800beda:	f7ff ff85 	bl	800bde8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800bede:	bf00      	nop
 800bee0:	3710      	adds	r7, #16
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
	...

0800bee8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b086      	sub	sp, #24
 800beec:	af00      	add	r7, sp, #0
 800beee:	4603      	mov	r3, r0
 800bef0:	6039      	str	r1, [r7, #0]
 800bef2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800bef4:	2300      	movs	r3, #0
 800bef6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800bef8:	2007      	movs	r0, #7
 800befa:	f003 fdcd 	bl	800fa98 <memp_malloc>
 800befe:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d101      	bne.n	800bf0a <netconn_alloc+0x22>
    return NULL;
 800bf06:	2300      	movs	r3, #0
 800bf08:	e052      	b.n	800bfb0 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	79fa      	ldrb	r2, [r7, #7]
 800bf14:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800bf1c:	79fb      	ldrb	r3, [r7, #7]
 800bf1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf22:	2b10      	cmp	r3, #16
 800bf24:	d004      	beq.n	800bf30 <netconn_alloc+0x48>
 800bf26:	2b20      	cmp	r3, #32
 800bf28:	d105      	bne.n	800bf36 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800bf2a:	2306      	movs	r3, #6
 800bf2c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800bf2e:	e00a      	b.n	800bf46 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800bf30:	2306      	movs	r3, #6
 800bf32:	617b      	str	r3, [r7, #20]
      break;
 800bf34:	e007      	b.n	800bf46 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800bf36:	4b20      	ldr	r3, [pc, #128]	; (800bfb8 <netconn_alloc+0xd0>)
 800bf38:	f240 22e5 	movw	r2, #741	; 0x2e5
 800bf3c:	491f      	ldr	r1, [pc, #124]	; (800bfbc <netconn_alloc+0xd4>)
 800bf3e:	4820      	ldr	r0, [pc, #128]	; (800bfc0 <netconn_alloc+0xd8>)
 800bf40:	f013 fc92 	bl	801f868 <iprintf>
      goto free_and_return;
 800bf44:	e02f      	b.n	800bfa6 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	3310      	adds	r3, #16
 800bf4a:	6979      	ldr	r1, [r7, #20]
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f010 fae1 	bl	801c514 <sys_mbox_new>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d125      	bne.n	800bfa4 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	330c      	adds	r3, #12
 800bf5c:	2100      	movs	r1, #0
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f010 fb84 	bl	801c66c <sys_sem_new>
 800bf64:	4603      	mov	r3, r0
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d005      	beq.n	800bf76 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	3310      	adds	r3, #16
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f010 faea 	bl	801c548 <sys_mbox_free>
    goto free_and_return;
 800bf74:	e017      	b.n	800bfa6 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	3314      	adds	r3, #20
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f010 fb69 	bl	801c652 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	2200      	movs	r2, #0
 800bf84:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	f04f 32ff 	mov.w	r2, #4294967295
 800bf8c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	683a      	ldr	r2, [r7, #0]
 800bf92:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2200      	movs	r2, #0
 800bf98:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	7cfa      	ldrb	r2, [r7, #19]
 800bf9e:	771a      	strb	r2, [r3, #28]
  return conn;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	e005      	b.n	800bfb0 <netconn_alloc+0xc8>
    goto free_and_return;
 800bfa4:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800bfa6:	68f9      	ldr	r1, [r7, #12]
 800bfa8:	2007      	movs	r0, #7
 800bfaa:	f003 fdc7 	bl	800fb3c <memp_free>
  return NULL;
 800bfae:	2300      	movs	r3, #0
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3718      	adds	r7, #24
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	08021d5c 	.word	0x08021d5c
 800bfbc:	08021f60 	.word	0x08021f60
 800bfc0:	08021da0 	.word	0x08021da0

0800bfc4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d006      	beq.n	800bfe2 <netconn_free+0x1e>
 800bfd4:	4b1b      	ldr	r3, [pc, #108]	; (800c044 <netconn_free+0x80>)
 800bfd6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800bfda:	491b      	ldr	r1, [pc, #108]	; (800c048 <netconn_free+0x84>)
 800bfdc:	481b      	ldr	r0, [pc, #108]	; (800c04c <netconn_free+0x88>)
 800bfde:	f013 fc43 	bl	801f868 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	3310      	adds	r3, #16
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f010 fb22 	bl	801c630 <sys_mbox_valid>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d006      	beq.n	800c000 <netconn_free+0x3c>
 800bff2:	4b14      	ldr	r3, [pc, #80]	; (800c044 <netconn_free+0x80>)
 800bff4:	f240 3223 	movw	r2, #803	; 0x323
 800bff8:	4915      	ldr	r1, [pc, #84]	; (800c050 <netconn_free+0x8c>)
 800bffa:	4814      	ldr	r0, [pc, #80]	; (800c04c <netconn_free+0x88>)
 800bffc:	f013 fc34 	bl	801f868 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	3314      	adds	r3, #20
 800c004:	4618      	mov	r0, r3
 800c006:	f010 fb13 	bl	801c630 <sys_mbox_valid>
 800c00a:	4603      	mov	r3, r0
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d006      	beq.n	800c01e <netconn_free+0x5a>
 800c010:	4b0c      	ldr	r3, [pc, #48]	; (800c044 <netconn_free+0x80>)
 800c012:	f240 3226 	movw	r2, #806	; 0x326
 800c016:	490f      	ldr	r1, [pc, #60]	; (800c054 <netconn_free+0x90>)
 800c018:	480c      	ldr	r0, [pc, #48]	; (800c04c <netconn_free+0x88>)
 800c01a:	f013 fc25 	bl	801f868 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	330c      	adds	r3, #12
 800c022:	4618      	mov	r0, r3
 800c024:	f010 fb85 	bl	801c732 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	330c      	adds	r3, #12
 800c02c:	4618      	mov	r0, r3
 800c02e:	f010 fb9e 	bl	801c76e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800c032:	6879      	ldr	r1, [r7, #4]
 800c034:	2007      	movs	r0, #7
 800c036:	f003 fd81 	bl	800fb3c <memp_free>
}
 800c03a:	bf00      	nop
 800c03c:	3708      	adds	r7, #8
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	08021d5c 	.word	0x08021d5c
 800c048:	08021f88 	.word	0x08021f88
 800c04c:	08021da0 	.word	0x08021da0
 800c050:	08021fb8 	.word	0x08021fb8
 800c054:	08021ff4 	.word	0x08021ff4

0800c058 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b086      	sub	sp, #24
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	3310      	adds	r3, #16
 800c064:	4618      	mov	r0, r3
 800c066:	f010 fae3 	bl	801c630 <sys_mbox_valid>
 800c06a:	4603      	mov	r3, r0
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d02f      	beq.n	800c0d0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800c070:	e018      	b.n	800c0a4 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c07a:	2b10      	cmp	r3, #16
 800c07c:	d10e      	bne.n	800c09c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	f107 020f 	add.w	r2, r7, #15
 800c084:	4611      	mov	r1, r2
 800c086:	4618      	mov	r0, r3
 800c088:	f7ff fafe 	bl	800b688 <lwip_netconn_is_err_msg>
 800c08c:	4603      	mov	r3, r0
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d108      	bne.n	800c0a4 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	4618      	mov	r0, r3
 800c096:	f004 fc6b 	bl	8010970 <pbuf_free>
 800c09a:	e003      	b.n	800c0a4 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f000 ff7e 	bl	800cfa0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	3310      	adds	r3, #16
 800c0a8:	f107 0210 	add.w	r2, r7, #16
 800c0ac:	4611      	mov	r1, r2
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f010 faa7 	bl	801c602 <sys_arch_mbox_tryfetch>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ba:	d1da      	bne.n	800c072 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	3310      	adds	r3, #16
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f010 fa41 	bl	801c548 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	3310      	adds	r3, #16
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f010 fac1 	bl	801c652 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	3314      	adds	r3, #20
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f010 faab 	bl	801c630 <sys_mbox_valid>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d034      	beq.n	800c14a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800c0e0:	e01d      	b.n	800c11e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	f107 020e 	add.w	r2, r7, #14
 800c0e8:	4611      	mov	r1, r2
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7ff facc 	bl	800b688 <lwip_netconn_is_err_msg>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d113      	bne.n	800c11e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800c0fa:	6978      	ldr	r0, [r7, #20]
 800c0fc:	f7ff ffac 	bl	800c058 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d007      	beq.n	800c118 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	4618      	mov	r0, r3
 800c10e:	f005 fb89 	bl	8011824 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	2200      	movs	r2, #0
 800c116:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800c118:	6978      	ldr	r0, [r7, #20]
 800c11a:	f7ff ff53 	bl	800bfc4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	3314      	adds	r3, #20
 800c122:	f107 0210 	add.w	r2, r7, #16
 800c126:	4611      	mov	r1, r2
 800c128:	4618      	mov	r0, r3
 800c12a:	f010 fa6a 	bl	801c602 <sys_arch_mbox_tryfetch>
 800c12e:	4603      	mov	r3, r0
 800c130:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c134:	d1d5      	bne.n	800c0e2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	3314      	adds	r3, #20
 800c13a:	4618      	mov	r0, r3
 800c13c:	f010 fa04 	bl	801c548 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	3314      	adds	r3, #20
 800c144:	4618      	mov	r0, r3
 800c146:	f010 fa84 	bl	801c652 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800c14a:	bf00      	nop
 800c14c:	3718      	adds	r7, #24
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
	...

0800c154 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b086      	sub	sp, #24
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	460b      	mov	r3, r1
 800c15e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800c160:	2300      	movs	r3, #0
 800c162:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d106      	bne.n	800c178 <lwip_netconn_do_close_internal+0x24>
 800c16a:	4ba1      	ldr	r3, [pc, #644]	; (800c3f0 <lwip_netconn_do_close_internal+0x29c>)
 800c16c:	f240 32a2 	movw	r2, #930	; 0x3a2
 800c170:	49a0      	ldr	r1, [pc, #640]	; (800c3f4 <lwip_netconn_do_close_internal+0x2a0>)
 800c172:	48a1      	ldr	r0, [pc, #644]	; (800c3f8 <lwip_netconn_do_close_internal+0x2a4>)
 800c174:	f013 fb78 	bl	801f868 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c180:	2b10      	cmp	r3, #16
 800c182:	d006      	beq.n	800c192 <lwip_netconn_do_close_internal+0x3e>
 800c184:	4b9a      	ldr	r3, [pc, #616]	; (800c3f0 <lwip_netconn_do_close_internal+0x29c>)
 800c186:	f240 32a3 	movw	r2, #931	; 0x3a3
 800c18a:	499c      	ldr	r1, [pc, #624]	; (800c3fc <lwip_netconn_do_close_internal+0x2a8>)
 800c18c:	489a      	ldr	r0, [pc, #616]	; (800c3f8 <lwip_netconn_do_close_internal+0x2a4>)
 800c18e:	f013 fb6b 	bl	801f868 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	785b      	ldrb	r3, [r3, #1]
 800c196:	2b04      	cmp	r3, #4
 800c198:	d006      	beq.n	800c1a8 <lwip_netconn_do_close_internal+0x54>
 800c19a:	4b95      	ldr	r3, [pc, #596]	; (800c3f0 <lwip_netconn_do_close_internal+0x29c>)
 800c19c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800c1a0:	4997      	ldr	r1, [pc, #604]	; (800c400 <lwip_netconn_do_close_internal+0x2ac>)
 800c1a2:	4895      	ldr	r0, [pc, #596]	; (800c3f8 <lwip_netconn_do_close_internal+0x2a4>)
 800c1a4:	f013 fb60 	bl	801f868 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d106      	bne.n	800c1be <lwip_netconn_do_close_internal+0x6a>
 800c1b0:	4b8f      	ldr	r3, [pc, #572]	; (800c3f0 <lwip_netconn_do_close_internal+0x29c>)
 800c1b2:	f240 32a5 	movw	r2, #933	; 0x3a5
 800c1b6:	4993      	ldr	r1, [pc, #588]	; (800c404 <lwip_netconn_do_close_internal+0x2b0>)
 800c1b8:	488f      	ldr	r0, [pc, #572]	; (800c3f8 <lwip_netconn_do_close_internal+0x2a4>)
 800c1ba:	f013 fb55 	bl	801f868 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6a1b      	ldr	r3, [r3, #32]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d106      	bne.n	800c1d4 <lwip_netconn_do_close_internal+0x80>
 800c1c6:	4b8a      	ldr	r3, [pc, #552]	; (800c3f0 <lwip_netconn_do_close_internal+0x29c>)
 800c1c8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c1cc:	498e      	ldr	r1, [pc, #568]	; (800c408 <lwip_netconn_do_close_internal+0x2b4>)
 800c1ce:	488a      	ldr	r0, [pc, #552]	; (800c3f8 <lwip_netconn_do_close_internal+0x2a4>)
 800c1d0:	f013 fb4a 	bl	801f868 <iprintf>

  tpcb = conn->pcb.tcp;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	685b      	ldr	r3, [r3, #4]
 800c1d8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6a1b      	ldr	r3, [r3, #32]
 800c1de:	7a1b      	ldrb	r3, [r3, #8]
 800c1e0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800c1e2:	7bfb      	ldrb	r3, [r7, #15]
 800c1e4:	f003 0301 	and.w	r3, r3, #1
 800c1e8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800c1ea:	7bfb      	ldrb	r3, [r7, #15]
 800c1ec:	f003 0302 	and.w	r3, r3, #2
 800c1f0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800c1f2:	7bfb      	ldrb	r3, [r7, #15]
 800c1f4:	2b03      	cmp	r3, #3
 800c1f6:	d102      	bne.n	800c1fe <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	75bb      	strb	r3, [r7, #22]
 800c1fc:	e01f      	b.n	800c23e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800c1fe:	7bbb      	ldrb	r3, [r7, #14]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d00e      	beq.n	800c222 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800c208:	2b05      	cmp	r3, #5
 800c20a:	d007      	beq.n	800c21c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800c210:	2b06      	cmp	r3, #6
 800c212:	d003      	beq.n	800c21c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800c218:	2b08      	cmp	r3, #8
 800c21a:	d102      	bne.n	800c222 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800c21c:	2301      	movs	r3, #1
 800c21e:	75bb      	strb	r3, [r7, #22]
 800c220:	e00d      	b.n	800c23e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800c222:	7b7b      	ldrb	r3, [r7, #13]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d008      	beq.n	800c23a <lwip_netconn_do_close_internal+0xe6>
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	8b5b      	ldrh	r3, [r3, #26]
 800c22c:	f003 0310 	and.w	r3, r3, #16
 800c230:	2b00      	cmp	r3, #0
 800c232:	d002      	beq.n	800c23a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800c234:	2301      	movs	r3, #1
 800c236:	75bb      	strb	r3, [r7, #22]
 800c238:	e001      	b.n	800c23e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800c23a:	2300      	movs	r3, #0
 800c23c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800c23e:	7dbb      	ldrb	r3, [r7, #22]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d003      	beq.n	800c24c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800c244:	2100      	movs	r1, #0
 800c246:	6938      	ldr	r0, [r7, #16]
 800c248:	f006 fb94 	bl	8012974 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	7d1b      	ldrb	r3, [r3, #20]
 800c250:	2b01      	cmp	r3, #1
 800c252:	d104      	bne.n	800c25e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800c254:	2100      	movs	r1, #0
 800c256:	6938      	ldr	r0, [r7, #16]
 800c258:	f006 fc04 	bl	8012a64 <tcp_accept>
 800c25c:	e01d      	b.n	800c29a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800c25e:	7bbb      	ldrb	r3, [r7, #14]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d007      	beq.n	800c274 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800c264:	2100      	movs	r1, #0
 800c266:	6938      	ldr	r0, [r7, #16]
 800c268:	f006 fb96 	bl	8012998 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800c26c:	2100      	movs	r1, #0
 800c26e:	6938      	ldr	r0, [r7, #16]
 800c270:	f006 fbf8 	bl	8012a64 <tcp_accept>
    }
    if (shut_tx) {
 800c274:	7b7b      	ldrb	r3, [r7, #13]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d003      	beq.n	800c282 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800c27a:	2100      	movs	r1, #0
 800c27c:	6938      	ldr	r0, [r7, #16]
 800c27e:	f006 fbad 	bl	80129dc <tcp_sent>
    }
    if (shut_close) {
 800c282:	7dbb      	ldrb	r3, [r7, #22]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d008      	beq.n	800c29a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800c288:	2200      	movs	r2, #0
 800c28a:	2100      	movs	r1, #0
 800c28c:	6938      	ldr	r0, [r7, #16]
 800c28e:	f006 fc01 	bl	8012a94 <tcp_poll>
      tcp_err(tpcb, NULL);
 800c292:	2100      	movs	r1, #0
 800c294:	6938      	ldr	r0, [r7, #16]
 800c296:	f006 fbc3 	bl	8012a20 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800c29a:	7dbb      	ldrb	r3, [r7, #22]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d005      	beq.n	800c2ac <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800c2a0:	6938      	ldr	r0, [r7, #16]
 800c2a2:	f005 f979 	bl	8011598 <tcp_close>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	75fb      	strb	r3, [r7, #23]
 800c2aa:	e007      	b.n	800c2bc <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800c2ac:	7bbb      	ldrb	r3, [r7, #14]
 800c2ae:	7b7a      	ldrb	r2, [r7, #13]
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	6938      	ldr	r0, [r7, #16]
 800c2b4:	f005 f99c 	bl	80115f0 <tcp_shutdown>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800c2bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d102      	bne.n	800c2ca <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	757b      	strb	r3, [r7, #21]
 800c2c8:	e016      	b.n	800c2f8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800c2ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2d2:	d10f      	bne.n	800c2f4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6a1b      	ldr	r3, [r3, #32]
 800c2d8:	7a5b      	ldrb	r3, [r3, #9]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d10c      	bne.n	800c2f8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800c2e2:	7dbb      	ldrb	r3, [r7, #22]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d007      	beq.n	800c2f8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800c2e8:	6938      	ldr	r0, [r7, #16]
 800c2ea:	f005 fa9b 	bl	8011824 <tcp_abort>
          err = ERR_OK;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	75fb      	strb	r3, [r7, #23]
 800c2f2:	e001      	b.n	800c2f8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800c2f8:	7d7b      	ldrb	r3, [r7, #21]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d044      	beq.n	800c388 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6a1b      	ldr	r3, [r3, #32]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	330c      	adds	r3, #12
 800c306:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6a1b      	ldr	r3, [r3, #32]
 800c30c:	7dfa      	ldrb	r2, [r7, #23]
 800c30e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2200      	movs	r2, #0
 800c314:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2200      	movs	r2, #0
 800c31a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800c31c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d129      	bne.n	800c378 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800c324:	7dbb      	ldrb	r3, [r7, #22]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d00c      	beq.n	800c344 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2200      	movs	r2, #0
 800c32e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c334:	2b00      	cmp	r3, #0
 800c336:	d005      	beq.n	800c344 <lwip_netconn_do_close_internal+0x1f0>
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c33c:	2200      	movs	r2, #0
 800c33e:	2104      	movs	r1, #4
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	4798      	blx	r3
      }
      if (shut_rx) {
 800c344:	7bbb      	ldrb	r3, [r7, #14]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d009      	beq.n	800c35e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d005      	beq.n	800c35e <lwip_netconn_do_close_internal+0x20a>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c356:	2200      	movs	r2, #0
 800c358:	2100      	movs	r1, #0
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	4798      	blx	r3
      }
      if (shut_tx) {
 800c35e:	7b7b      	ldrb	r3, [r7, #13]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d009      	beq.n	800c378 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d005      	beq.n	800c378 <lwip_netconn_do_close_internal+0x224>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c370:	2200      	movs	r2, #0
 800c372:	2102      	movs	r1, #2
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800c378:	78fb      	ldrb	r3, [r7, #3]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d002      	beq.n	800c384 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800c37e:	68b8      	ldr	r0, [r7, #8]
 800c380:	f010 f9ca 	bl	801c718 <sys_sem_signal>
    }
    return ERR_OK;
 800c384:	2300      	movs	r3, #0
 800c386:	e02e      	b.n	800c3e6 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800c388:	7d7b      	ldrb	r3, [r7, #21]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d11e      	bne.n	800c3cc <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	7d1b      	ldrb	r3, [r3, #20]
 800c392:	2b01      	cmp	r3, #1
 800c394:	d106      	bne.n	800c3a4 <lwip_netconn_do_close_internal+0x250>
 800c396:	4b16      	ldr	r3, [pc, #88]	; (800c3f0 <lwip_netconn_do_close_internal+0x29c>)
 800c398:	f240 4241 	movw	r2, #1089	; 0x441
 800c39c:	491b      	ldr	r1, [pc, #108]	; (800c40c <lwip_netconn_do_close_internal+0x2b8>)
 800c39e:	4816      	ldr	r0, [pc, #88]	; (800c3f8 <lwip_netconn_do_close_internal+0x2a4>)
 800c3a0:	f013 fa62 	bl	801f868 <iprintf>
    if (shut_tx) {
 800c3a4:	7b7b      	ldrb	r3, [r7, #13]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d003      	beq.n	800c3b2 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800c3aa:	4919      	ldr	r1, [pc, #100]	; (800c410 <lwip_netconn_do_close_internal+0x2bc>)
 800c3ac:	6938      	ldr	r0, [r7, #16]
 800c3ae:	f006 fb15 	bl	80129dc <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	4917      	ldr	r1, [pc, #92]	; (800c414 <lwip_netconn_do_close_internal+0x2c0>)
 800c3b6:	6938      	ldr	r0, [r7, #16]
 800c3b8:	f006 fb6c 	bl	8012a94 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800c3bc:	4916      	ldr	r1, [pc, #88]	; (800c418 <lwip_netconn_do_close_internal+0x2c4>)
 800c3be:	6938      	ldr	r0, [r7, #16]
 800c3c0:	f006 fb2e 	bl	8012a20 <tcp_err>
    tcp_arg(tpcb, conn);
 800c3c4:	6879      	ldr	r1, [r7, #4]
 800c3c6:	6938      	ldr	r0, [r7, #16]
 800c3c8:	f006 fad4 	bl	8012974 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800c3cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d106      	bne.n	800c3e2 <lwip_netconn_do_close_internal+0x28e>
 800c3d4:	4b06      	ldr	r3, [pc, #24]	; (800c3f0 <lwip_netconn_do_close_internal+0x29c>)
 800c3d6:	f240 424d 	movw	r2, #1101	; 0x44d
 800c3da:	4910      	ldr	r1, [pc, #64]	; (800c41c <lwip_netconn_do_close_internal+0x2c8>)
 800c3dc:	4806      	ldr	r0, [pc, #24]	; (800c3f8 <lwip_netconn_do_close_internal+0x2a4>)
 800c3de:	f013 fa43 	bl	801f868 <iprintf>
  return err;
 800c3e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3718      	adds	r7, #24
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}
 800c3ee:	bf00      	nop
 800c3f0:	08021d5c 	.word	0x08021d5c
 800c3f4:	08022030 	.word	0x08022030
 800c3f8:	08021da0 	.word	0x08021da0
 800c3fc:	08022040 	.word	0x08022040
 800c400:	08022060 	.word	0x08022060
 800c404:	08022084 	.word	0x08022084
 800c408:	08021ec4 	.word	0x08021ec4
 800c40c:	08022098 	.word	0x08022098
 800c410:	0800b9cd 	.word	0x0800b9cd
 800c414:	0800b905 	.word	0x0800b905
 800c418:	0800ba75 	.word	0x0800ba75
 800c41c:	080220bc 	.word	0x080220bc

0800c420 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	785b      	ldrb	r3, [r3, #1]
 800c432:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800c434:	7afb      	ldrb	r3, [r7, #11]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d00d      	beq.n	800c456 <lwip_netconn_do_delconn+0x36>
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c444:	2b10      	cmp	r3, #16
 800c446:	d006      	beq.n	800c456 <lwip_netconn_do_delconn+0x36>
 800c448:	4b60      	ldr	r3, [pc, #384]	; (800c5cc <lwip_netconn_do_delconn+0x1ac>)
 800c44a:	f240 425e 	movw	r2, #1118	; 0x45e
 800c44e:	4960      	ldr	r1, [pc, #384]	; (800c5d0 <lwip_netconn_do_delconn+0x1b0>)
 800c450:	4860      	ldr	r0, [pc, #384]	; (800c5d4 <lwip_netconn_do_delconn+0x1b4>)
 800c452:	f013 fa09 	bl	801f868 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800c456:	7afb      	ldrb	r3, [r7, #11]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d005      	beq.n	800c468 <lwip_netconn_do_delconn+0x48>
 800c45c:	7afb      	ldrb	r3, [r7, #11]
 800c45e:	2b02      	cmp	r3, #2
 800c460:	d002      	beq.n	800c468 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800c462:	7afb      	ldrb	r3, [r7, #11]
 800c464:	2b03      	cmp	r3, #3
 800c466:	d109      	bne.n	800c47c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800c468:	7afb      	ldrb	r3, [r7, #11]
 800c46a:	2b03      	cmp	r3, #3
 800c46c:	d10a      	bne.n	800c484 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	7f1b      	ldrb	r3, [r3, #28]
 800c474:	f003 0304 	and.w	r3, r3, #4
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d103      	bne.n	800c484 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	22fb      	movs	r2, #251	; 0xfb
 800c480:	711a      	strb	r2, [r3, #4]
 800c482:	e097      	b.n	800c5b4 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800c484:	7afb      	ldrb	r3, [r7, #11]
 800c486:	2b03      	cmp	r3, #3
 800c488:	d10d      	bne.n	800c4a6 <lwip_netconn_do_delconn+0x86>
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	7f1b      	ldrb	r3, [r3, #28]
 800c490:	f003 0304 	and.w	r3, r3, #4
 800c494:	2b00      	cmp	r3, #0
 800c496:	d106      	bne.n	800c4a6 <lwip_netconn_do_delconn+0x86>
 800c498:	4b4c      	ldr	r3, [pc, #304]	; (800c5cc <lwip_netconn_do_delconn+0x1ac>)
 800c49a:	f240 427a 	movw	r2, #1146	; 0x47a
 800c49e:	494e      	ldr	r1, [pc, #312]	; (800c5d8 <lwip_netconn_do_delconn+0x1b8>)
 800c4a0:	484c      	ldr	r0, [pc, #304]	; (800c5d4 <lwip_netconn_do_delconn+0x1b4>)
 800c4a2:	f013 f9e1 	bl	801f868 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7ff fdd1 	bl	800c058 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d05f      	beq.n	800c580 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c4ca:	2b10      	cmp	r3, #16
 800c4cc:	d00d      	beq.n	800c4ea <lwip_netconn_do_delconn+0xca>
 800c4ce:	2b20      	cmp	r3, #32
 800c4d0:	d151      	bne.n	800c576 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f00b fd3a 	bl	8017f5c <udp_remove>
          break;
 800c4e8:	e046      	b.n	800c578 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	6a1b      	ldr	r3, [r3, #32]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d006      	beq.n	800c502 <lwip_netconn_do_delconn+0xe2>
 800c4f4:	4b35      	ldr	r3, [pc, #212]	; (800c5cc <lwip_netconn_do_delconn+0x1ac>)
 800c4f6:	f240 4294 	movw	r2, #1172	; 0x494
 800c4fa:	4938      	ldr	r1, [pc, #224]	; (800c5dc <lwip_netconn_do_delconn+0x1bc>)
 800c4fc:	4835      	ldr	r0, [pc, #212]	; (800c5d4 <lwip_netconn_do_delconn+0x1b4>)
 800c4fe:	f013 f9b3 	bl	801f868 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	2204      	movs	r2, #4
 800c508:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	2203      	movs	r2, #3
 800c50e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	68fa      	ldr	r2, [r7, #12]
 800c516:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	2100      	movs	r1, #0
 800c51e:	4618      	mov	r0, r3
 800c520:	f7ff fe18 	bl	800c154 <lwip_netconn_do_close_internal>
 800c524:	4603      	mov	r3, r0
 800c526:	2b00      	cmp	r3, #0
 800c528:	d04b      	beq.n	800c5c2 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	785b      	ldrb	r3, [r3, #1]
 800c530:	2b04      	cmp	r3, #4
 800c532:	d006      	beq.n	800c542 <lwip_netconn_do_delconn+0x122>
 800c534:	4b25      	ldr	r3, [pc, #148]	; (800c5cc <lwip_netconn_do_delconn+0x1ac>)
 800c536:	f240 429a 	movw	r2, #1178	; 0x49a
 800c53a:	4929      	ldr	r1, [pc, #164]	; (800c5e0 <lwip_netconn_do_delconn+0x1c0>)
 800c53c:	4825      	ldr	r0, [pc, #148]	; (800c5d4 <lwip_netconn_do_delconn+0x1b4>)
 800c53e:	f013 f993 	bl	801f868 <iprintf>
            UNLOCK_TCPIP_CORE();
 800c542:	4828      	ldr	r0, [pc, #160]	; (800c5e4 <lwip_netconn_do_delconn+0x1c4>)
 800c544:	f010 f951 	bl	801c7ea <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	330c      	adds	r3, #12
 800c54e:	2100      	movs	r1, #0
 800c550:	4618      	mov	r0, r3
 800c552:	f010 f8b0 	bl	801c6b6 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800c556:	4823      	ldr	r0, [pc, #140]	; (800c5e4 <lwip_netconn_do_delconn+0x1c4>)
 800c558:	f010 f938 	bl	801c7cc <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	785b      	ldrb	r3, [r3, #1]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d02d      	beq.n	800c5c2 <lwip_netconn_do_delconn+0x1a2>
 800c566:	4b19      	ldr	r3, [pc, #100]	; (800c5cc <lwip_netconn_do_delconn+0x1ac>)
 800c568:	f240 429e 	movw	r2, #1182	; 0x49e
 800c56c:	491c      	ldr	r1, [pc, #112]	; (800c5e0 <lwip_netconn_do_delconn+0x1c0>)
 800c56e:	4819      	ldr	r0, [pc, #100]	; (800c5d4 <lwip_netconn_do_delconn+0x1b4>)
 800c570:	f013 f97a 	bl	801f868 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800c574:	e025      	b.n	800c5c2 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800c576:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2200      	movs	r2, #0
 800c57e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c586:	2b00      	cmp	r3, #0
 800c588:	d007      	beq.n	800c59a <lwip_netconn_do_delconn+0x17a>
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c590:	68fa      	ldr	r2, [r7, #12]
 800c592:	6810      	ldr	r0, [r2, #0]
 800c594:	2200      	movs	r2, #0
 800c596:	2100      	movs	r1, #0
 800c598:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d007      	beq.n	800c5b4 <lwip_netconn_do_delconn+0x194>
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5aa:	68fa      	ldr	r2, [r7, #12]
 800c5ac:	6810      	ldr	r0, [r2, #0]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	2102      	movs	r1, #2
 800c5b2:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	330c      	adds	r3, #12
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f010 f8c6 	bl	801c74c <sys_sem_valid>
 800c5c0:	e000      	b.n	800c5c4 <lwip_netconn_do_delconn+0x1a4>
          return;
 800c5c2:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800c5c4:	3710      	adds	r7, #16
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	08021d5c 	.word	0x08021d5c
 800c5d0:	080220cc 	.word	0x080220cc
 800c5d4:	08021da0 	.word	0x08021da0
 800c5d8:	080220e0 	.word	0x080220e0
 800c5dc:	08022100 	.word	0x08022100
 800c5e0:	0802211c 	.word	0x0802211c
 800c5e4:	200050bc 	.word	0x200050bc

0800c5e8 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d025      	beq.n	800c64a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c608:	2b10      	cmp	r3, #16
 800c60a:	d00e      	beq.n	800c62a <lwip_netconn_do_bind+0x42>
 800c60c:	2b20      	cmp	r3, #32
 800c60e:	d119      	bne.n	800c644 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	6858      	ldr	r0, [r3, #4]
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	6899      	ldr	r1, [r3, #8]
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	899b      	ldrh	r3, [r3, #12]
 800c61e:	461a      	mov	r2, r3
 800c620:	f00b fb6c 	bl	8017cfc <udp_bind>
 800c624:	4603      	mov	r3, r0
 800c626:	73fb      	strb	r3, [r7, #15]
        break;
 800c628:	e011      	b.n	800c64e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	6858      	ldr	r0, [r3, #4]
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	6899      	ldr	r1, [r3, #8]
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	899b      	ldrh	r3, [r3, #12]
 800c638:	461a      	mov	r2, r3
 800c63a:	f005 f8ff 	bl	801183c <tcp_bind>
 800c63e:	4603      	mov	r3, r0
 800c640:	73fb      	strb	r3, [r7, #15]
        break;
 800c642:	e004      	b.n	800c64e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800c644:	23fa      	movs	r3, #250	; 0xfa
 800c646:	73fb      	strb	r3, [r7, #15]
        break;
 800c648:	e001      	b.n	800c64e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800c64a:	23fa      	movs	r3, #250	; 0xfa
 800c64c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	7bfa      	ldrb	r2, [r7, #15]
 800c652:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800c654:	bf00      	nop
 800c656:	3710      	adds	r7, #16
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b086      	sub	sp, #24
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d07f      	beq.n	800c772 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c67c:	2b10      	cmp	r3, #16
 800c67e:	d175      	bne.n	800c76c <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	785b      	ldrb	r3, [r3, #1]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d165      	bne.n	800c756 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	7d1b      	ldrb	r3, [r3, #20]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d002      	beq.n	800c69c <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800c696:	23fa      	movs	r3, #250	; 0xfa
 800c698:	72fb      	strb	r3, [r7, #11]
 800c69a:	e06c      	b.n	800c776 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800c69c:	23ff      	movs	r3, #255	; 0xff
 800c69e:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	685b      	ldr	r3, [r3, #4]
 800c6a6:	f107 020b 	add.w	r2, r7, #11
 800c6aa:	7cf9      	ldrb	r1, [r7, #19]
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f005 f997 	bl	80119e0 <tcp_listen_with_backlog_and_err>
 800c6b2:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d05d      	beq.n	800c776 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	3310      	adds	r3, #16
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f00f ffb5 	bl	801c630 <sys_mbox_valid>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d00b      	beq.n	800c6e4 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	3310      	adds	r3, #16
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f00f ff38 	bl	801c548 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	3310      	adds	r3, #16
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f00f ffb7 	bl	801c652 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	3314      	adds	r3, #20
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f00f ff9e 	bl	801c630 <sys_mbox_valid>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d108      	bne.n	800c70c <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	3314      	adds	r3, #20
 800c700:	2106      	movs	r1, #6
 800c702:	4618      	mov	r0, r3
 800c704:	f00f ff06 	bl	801c514 <sys_mbox_new>
 800c708:	4603      	mov	r3, r0
 800c70a:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800c70c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d118      	bne.n	800c746 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	2202      	movs	r2, #2
 800c71a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	68fa      	ldr	r2, [r7, #12]
 800c722:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	685a      	ldr	r2, [r3, #4]
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4619      	mov	r1, r3
 800c730:	4610      	mov	r0, r2
 800c732:	f006 f91f 	bl	8012974 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	4912      	ldr	r1, [pc, #72]	; (800c788 <lwip_netconn_do_listen+0x12c>)
 800c73e:	4618      	mov	r0, r3
 800c740:	f006 f990 	bl	8012a64 <tcp_accept>
 800c744:	e017      	b.n	800c776 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800c746:	68f8      	ldr	r0, [r7, #12]
 800c748:	f004 ff26 	bl	8011598 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	2200      	movs	r2, #0
 800c752:	605a      	str	r2, [r3, #4]
 800c754:	e00f      	b.n	800c776 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	785b      	ldrb	r3, [r3, #1]
 800c75c:	2b02      	cmp	r3, #2
 800c75e:	d102      	bne.n	800c766 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800c760:	2300      	movs	r3, #0
 800c762:	72fb      	strb	r3, [r7, #11]
 800c764:	e007      	b.n	800c776 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800c766:	23f5      	movs	r3, #245	; 0xf5
 800c768:	72fb      	strb	r3, [r7, #11]
 800c76a:	e004      	b.n	800c776 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800c76c:	23f0      	movs	r3, #240	; 0xf0
 800c76e:	72fb      	strb	r3, [r7, #11]
 800c770:	e001      	b.n	800c776 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800c772:	23f5      	movs	r3, #245	; 0xf5
 800c774:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800c776:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800c77e:	bf00      	nop
 800c780:	3718      	adds	r7, #24
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	0800bc71 	.word	0x0800bc71

0800c78c <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4618      	mov	r0, r3
 800c79e:	f7fe ff21 	bl	800b5e4 <netconn_err>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c7a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d134      	bne.n	800c818 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d02d      	beq.n	800c814 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c7c2:	2b20      	cmp	r3, #32
 800c7c4:	d123      	bne.n	800c80e <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	689b      	ldr	r3, [r3, #8]
 800c7ca:	689b      	ldr	r3, [r3, #8]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d10c      	bne.n	800c7ea <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	685a      	ldr	r2, [r3, #4]
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	689b      	ldr	r3, [r3, #8]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4619      	mov	r1, r3
 800c7de:	4610      	mov	r0, r2
 800c7e0:	f00b f8a2 	bl	8017928 <udp_send>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800c7e8:	e016      	b.n	800c818 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	6858      	ldr	r0, [r3, #4]
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	689b      	ldr	r3, [r3, #8]
 800c7f4:	6819      	ldr	r1, [r3, #0]
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	689b      	ldr	r3, [r3, #8]
 800c7fa:	f103 0208 	add.w	r2, r3, #8
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	689b      	ldr	r3, [r3, #8]
 800c802:	899b      	ldrh	r3, [r3, #12]
 800c804:	f00b f8c4 	bl	8017990 <udp_sendto>
 800c808:	4603      	mov	r3, r0
 800c80a:	73fb      	strb	r3, [r7, #15]
          break;
 800c80c:	e004      	b.n	800c818 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800c80e:	23f5      	movs	r3, #245	; 0xf5
 800c810:	73fb      	strb	r3, [r7, #15]
          break;
 800c812:	e001      	b.n	800c818 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800c814:	23f5      	movs	r3, #245	; 0xf5
 800c816:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	7bfa      	ldrb	r2, [r7, #15]
 800c81c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800c81e:	bf00      	nop
 800c820:	3710      	adds	r7, #16
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}

0800c826 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800c826:	b580      	push	{r7, lr}
 800c828:	b086      	sub	sp, #24
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	2200      	movs	r2, #0
 800c836:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	685b      	ldr	r3, [r3, #4]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d022      	beq.n	800c888 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c84c:	2b10      	cmp	r3, #16
 800c84e:	d11b      	bne.n	800c888 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	689b      	ldr	r3, [r3, #8]
 800c854:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c85c:	d202      	bcs.n	800c864 <lwip_netconn_do_recv+0x3e>
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	b29b      	uxth	r3, r3
 800c862:	e001      	b.n	800c868 <lwip_netconn_do_recv+0x42>
 800c864:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c868:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	685b      	ldr	r3, [r3, #4]
 800c870:	89fa      	ldrh	r2, [r7, #14]
 800c872:	4611      	mov	r1, r2
 800c874:	4618      	mov	r0, r3
 800c876:	f005 f9b7 	bl	8011be8 <tcp_recved>
        remaining -= recved;
 800c87a:	89fb      	ldrh	r3, [r7, #14]
 800c87c:	697a      	ldr	r2, [r7, #20]
 800c87e:	1ad3      	subs	r3, r2, r3
 800c880:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d1e6      	bne.n	800c856 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c888:	bf00      	nop
 800c88a:	3718      	adds	r7, #24
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b088      	sub	sp, #32
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	460b      	mov	r3, r1
 800c89a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800c89c:	2300      	movs	r3, #0
 800c89e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d106      	bne.n	800c8b4 <lwip_netconn_do_writemore+0x24>
 800c8a6:	4b96      	ldr	r3, [pc, #600]	; (800cb00 <lwip_netconn_do_writemore+0x270>)
 800c8a8:	f240 6273 	movw	r2, #1651	; 0x673
 800c8ac:	4995      	ldr	r1, [pc, #596]	; (800cb04 <lwip_netconn_do_writemore+0x274>)
 800c8ae:	4896      	ldr	r0, [pc, #600]	; (800cb08 <lwip_netconn_do_writemore+0x278>)
 800c8b0:	f012 ffda 	bl	801f868 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	785b      	ldrb	r3, [r3, #1]
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	d006      	beq.n	800c8ca <lwip_netconn_do_writemore+0x3a>
 800c8bc:	4b90      	ldr	r3, [pc, #576]	; (800cb00 <lwip_netconn_do_writemore+0x270>)
 800c8be:	f240 6274 	movw	r2, #1652	; 0x674
 800c8c2:	4992      	ldr	r1, [pc, #584]	; (800cb0c <lwip_netconn_do_writemore+0x27c>)
 800c8c4:	4890      	ldr	r0, [pc, #576]	; (800cb08 <lwip_netconn_do_writemore+0x278>)
 800c8c6:	f012 ffcf 	bl	801f868 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6a1b      	ldr	r3, [r3, #32]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d106      	bne.n	800c8e0 <lwip_netconn_do_writemore+0x50>
 800c8d2:	4b8b      	ldr	r3, [pc, #556]	; (800cb00 <lwip_netconn_do_writemore+0x270>)
 800c8d4:	f240 6275 	movw	r2, #1653	; 0x675
 800c8d8:	498d      	ldr	r1, [pc, #564]	; (800cb10 <lwip_netconn_do_writemore+0x280>)
 800c8da:	488b      	ldr	r0, [pc, #556]	; (800cb08 <lwip_netconn_do_writemore+0x278>)
 800c8dc:	f012 ffc4 	bl	801f868 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d106      	bne.n	800c8f6 <lwip_netconn_do_writemore+0x66>
 800c8e8:	4b85      	ldr	r3, [pc, #532]	; (800cb00 <lwip_netconn_do_writemore+0x270>)
 800c8ea:	f240 6276 	movw	r2, #1654	; 0x676
 800c8ee:	4989      	ldr	r1, [pc, #548]	; (800cb14 <lwip_netconn_do_writemore+0x284>)
 800c8f0:	4885      	ldr	r0, [pc, #532]	; (800cb08 <lwip_netconn_do_writemore+0x278>)
 800c8f2:	f012 ffb9 	bl	801f868 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6a1b      	ldr	r3, [r3, #32]
 800c8fa:	699a      	ldr	r2, [r3, #24]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6a1b      	ldr	r3, [r3, #32]
 800c900:	695b      	ldr	r3, [r3, #20]
 800c902:	429a      	cmp	r2, r3
 800c904:	d306      	bcc.n	800c914 <lwip_netconn_do_writemore+0x84>
 800c906:	4b7e      	ldr	r3, [pc, #504]	; (800cb00 <lwip_netconn_do_writemore+0x270>)
 800c908:	f240 6277 	movw	r2, #1655	; 0x677
 800c90c:	4982      	ldr	r1, [pc, #520]	; (800cb18 <lwip_netconn_do_writemore+0x288>)
 800c90e:	487e      	ldr	r0, [pc, #504]	; (800cb08 <lwip_netconn_do_writemore+0x278>)
 800c910:	f012 ffaa 	bl	801f868 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6a1b      	ldr	r3, [r3, #32]
 800c918:	899b      	ldrh	r3, [r3, #12]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d106      	bne.n	800c92c <lwip_netconn_do_writemore+0x9c>
 800c91e:	4b78      	ldr	r3, [pc, #480]	; (800cb00 <lwip_netconn_do_writemore+0x270>)
 800c920:	f240 6279 	movw	r2, #1657	; 0x679
 800c924:	497d      	ldr	r1, [pc, #500]	; (800cb1c <lwip_netconn_do_writemore+0x28c>)
 800c926:	4878      	ldr	r0, [pc, #480]	; (800cb08 <lwip_netconn_do_writemore+0x278>)
 800c928:	f012 ff9e 	bl	801f868 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6a1b      	ldr	r3, [r3, #32]
 800c930:	7f1b      	ldrb	r3, [r3, #28]
 800c932:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	7f1b      	ldrb	r3, [r3, #28]
 800c938:	f003 0302 	and.w	r3, r3, #2
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d104      	bne.n	800c94a <lwip_netconn_do_writemore+0xba>
 800c940:	7ebb      	ldrb	r3, [r7, #26]
 800c942:	f003 0304 	and.w	r3, r3, #4
 800c946:	2b00      	cmp	r3, #0
 800c948:	d001      	beq.n	800c94e <lwip_netconn_do_writemore+0xbe>
 800c94a:	2301      	movs	r3, #1
 800c94c:	e000      	b.n	800c950 <lwip_netconn_do_writemore+0xc0>
 800c94e:	2300      	movs	r3, #0
 800c950:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6a1b      	ldr	r3, [r3, #32]
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	681a      	ldr	r2, [r3, #0]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6a1b      	ldr	r3, [r3, #32]
 800c95e:	691b      	ldr	r3, [r3, #16]
 800c960:	4413      	add	r3, r2
 800c962:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6a1b      	ldr	r3, [r3, #32]
 800c968:	689b      	ldr	r3, [r3, #8]
 800c96a:	685a      	ldr	r2, [r3, #4]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6a1b      	ldr	r3, [r3, #32]
 800c970:	691b      	ldr	r3, [r3, #16]
 800c972:	1ad3      	subs	r3, r2, r3
 800c974:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c97c:	d307      	bcc.n	800c98e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800c97e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c982:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c984:	7ebb      	ldrb	r3, [r7, #26]
 800c986:	f043 0302 	orr.w	r3, r3, #2
 800c98a:	76bb      	strb	r3, [r7, #26]
 800c98c:	e001      	b.n	800c992 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	685b      	ldr	r3, [r3, #4]
 800c996:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c99a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800c99c:	89fa      	ldrh	r2, [r7, #14]
 800c99e:	8bbb      	ldrh	r3, [r7, #28]
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d216      	bcs.n	800c9d2 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800c9a4:	89fb      	ldrh	r3, [r7, #14]
 800c9a6:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800c9a8:	7e3b      	ldrb	r3, [r7, #24]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d00d      	beq.n	800c9ca <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800c9ae:	8bbb      	ldrh	r3, [r7, #28]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d10e      	bne.n	800c9d2 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6a1b      	ldr	r3, [r3, #32]
 800c9b8:	699b      	ldr	r3, [r3, #24]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d102      	bne.n	800c9c4 <lwip_netconn_do_writemore+0x134>
 800c9be:	f06f 0306 	mvn.w	r3, #6
 800c9c2:	e000      	b.n	800c9c6 <lwip_netconn_do_writemore+0x136>
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800c9c8:	e07d      	b.n	800cac6 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800c9ca:	7ebb      	ldrb	r3, [r7, #26]
 800c9cc:	f043 0302 	orr.w	r3, r3, #2
 800c9d0:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6a1b      	ldr	r3, [r3, #32]
 800c9d6:	691a      	ldr	r2, [r3, #16]
 800c9d8:	8bbb      	ldrh	r3, [r7, #28]
 800c9da:	441a      	add	r2, r3
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6a1b      	ldr	r3, [r3, #32]
 800c9e0:	689b      	ldr	r3, [r3, #8]
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d906      	bls.n	800c9f6 <lwip_netconn_do_writemore+0x166>
 800c9e8:	4b45      	ldr	r3, [pc, #276]	; (800cb00 <lwip_netconn_do_writemore+0x270>)
 800c9ea:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800c9ee:	494c      	ldr	r1, [pc, #304]	; (800cb20 <lwip_netconn_do_writemore+0x290>)
 800c9f0:	4845      	ldr	r0, [pc, #276]	; (800cb08 <lwip_netconn_do_writemore+0x278>)
 800c9f2:	f012 ff39 	bl	801f868 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c9f6:	8bbb      	ldrh	r3, [r7, #28]
 800c9f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d103      	bne.n	800ca08 <lwip_netconn_do_writemore+0x178>
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca06:	d209      	bcs.n	800ca1c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ca0c:	8bba      	ldrh	r2, [r7, #28]
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d10b      	bne.n	800ca2a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6a1b      	ldr	r3, [r3, #32]
 800ca16:	899b      	ldrh	r3, [r3, #12]
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d906      	bls.n	800ca2a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ca20:	7ebb      	ldrb	r3, [r7, #26]
 800ca22:	f043 0302 	orr.w	r3, r3, #2
 800ca26:	76bb      	strb	r3, [r7, #26]
 800ca28:	e001      	b.n	800ca2e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6858      	ldr	r0, [r3, #4]
 800ca32:	7ebb      	ldrb	r3, [r7, #26]
 800ca34:	8bba      	ldrh	r2, [r7, #28]
 800ca36:	6979      	ldr	r1, [r7, #20]
 800ca38:	f008 feda 	bl	80157f0 <tcp_write>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800ca40:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d12c      	bne.n	800caa2 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6a1b      	ldr	r3, [r3, #32]
 800ca4c:	6999      	ldr	r1, [r3, #24]
 800ca4e:	8bba      	ldrh	r2, [r7, #28]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6a1b      	ldr	r3, [r3, #32]
 800ca54:	440a      	add	r2, r1
 800ca56:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6a1b      	ldr	r3, [r3, #32]
 800ca5c:	6919      	ldr	r1, [r3, #16]
 800ca5e:	8bba      	ldrh	r2, [r7, #28]
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6a1b      	ldr	r3, [r3, #32]
 800ca64:	440a      	add	r2, r1
 800ca66:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6a1b      	ldr	r3, [r3, #32]
 800ca6c:	691a      	ldr	r2, [r3, #16]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6a1b      	ldr	r3, [r3, #32]
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	685b      	ldr	r3, [r3, #4]
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d113      	bne.n	800caa2 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6a1b      	ldr	r3, [r3, #32]
 800ca7e:	899a      	ldrh	r2, [r3, #12]
 800ca80:	3a01      	subs	r2, #1
 800ca82:	b292      	uxth	r2, r2
 800ca84:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6a1b      	ldr	r3, [r3, #32]
 800ca8a:	899b      	ldrh	r3, [r3, #12]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d008      	beq.n	800caa2 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6a1b      	ldr	r3, [r3, #32]
 800ca94:	689a      	ldr	r2, [r3, #8]
 800ca96:	3208      	adds	r2, #8
 800ca98:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6a1b      	ldr	r3, [r3, #32]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800caa2:	7e7b      	ldrb	r3, [r7, #25]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d004      	beq.n	800cab2 <lwip_netconn_do_writemore+0x222>
 800caa8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800caac:	2b00      	cmp	r3, #0
 800caae:	f43f af50 	beq.w	800c952 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800cab2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d004      	beq.n	800cac4 <lwip_netconn_do_writemore+0x234>
 800caba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cabe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cac2:	d146      	bne.n	800cb52 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800cac4:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800cac6:	7e3b      	ldrb	r3, [r7, #24]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d02b      	beq.n	800cb24 <lwip_netconn_do_writemore+0x294>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6a1b      	ldr	r3, [r3, #32]
 800cad0:	699a      	ldr	r2, [r3, #24]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6a1b      	ldr	r3, [r3, #32]
 800cad6:	695b      	ldr	r3, [r3, #20]
 800cad8:	429a      	cmp	r2, r3
 800cada:	d223      	bcs.n	800cb24 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d005      	beq.n	800caf0 <lwip_netconn_do_writemore+0x260>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cae8:	2200      	movs	r2, #0
 800caea:	2103      	movs	r1, #3
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	7f1b      	ldrb	r3, [r3, #28]
 800caf4:	f043 0310 	orr.w	r3, r3, #16
 800caf8:	b2da      	uxtb	r2, r3
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	771a      	strb	r2, [r3, #28]
 800cafe:	e028      	b.n	800cb52 <lwip_netconn_do_writemore+0x2c2>
 800cb00:	08021d5c 	.word	0x08021d5c
 800cb04:	08021eb4 	.word	0x08021eb4
 800cb08:	08021da0 	.word	0x08021da0
 800cb0c:	080221bc 	.word	0x080221bc
 800cb10:	08021ec4 	.word	0x08021ec4
 800cb14:	080221dc 	.word	0x080221dc
 800cb18:	080221f4 	.word	0x080221f4
 800cb1c:	08022234 	.word	0x08022234
 800cb20:	0802225c 	.word	0x0802225c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cb2c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800cb30:	d305      	bcc.n	800cb3e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	685b      	ldr	r3, [r3, #4]
 800cb36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800cb3a:	2b04      	cmp	r3, #4
 800cb3c:	d909      	bls.n	800cb52 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d005      	beq.n	800cb52 <lwip_netconn_do_writemore+0x2c2>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	2103      	movs	r1, #3
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800cb52:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d11d      	bne.n	800cb96 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6a1b      	ldr	r3, [r3, #32]
 800cb5e:	699a      	ldr	r2, [r3, #24]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6a1b      	ldr	r3, [r3, #32]
 800cb64:	695b      	ldr	r3, [r3, #20]
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d002      	beq.n	800cb70 <lwip_netconn_do_writemore+0x2e0>
 800cb6a:	7e3b      	ldrb	r3, [r7, #24]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d001      	beq.n	800cb74 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800cb70:	2301      	movs	r3, #1
 800cb72:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f009 fc23 	bl	80163c4 <tcp_output>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800cb82:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800cb86:	f113 0f04 	cmn.w	r3, #4
 800cb8a:	d12c      	bne.n	800cbe6 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800cb8c:	7b3b      	ldrb	r3, [r7, #12]
 800cb8e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800cb90:	2301      	movs	r3, #1
 800cb92:	76fb      	strb	r3, [r7, #27]
 800cb94:	e027      	b.n	800cbe6 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800cb96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cb9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb9e:	d120      	bne.n	800cbe2 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	4618      	mov	r0, r3
 800cba6:	f009 fc0d 	bl	80163c4 <tcp_output>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800cbae:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800cbb2:	f113 0f04 	cmn.w	r3, #4
 800cbb6:	d104      	bne.n	800cbc2 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800cbb8:	7b7b      	ldrb	r3, [r7, #13]
 800cbba:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	76fb      	strb	r3, [r7, #27]
 800cbc0:	e011      	b.n	800cbe6 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800cbc2:	7e3b      	ldrb	r3, [r7, #24]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d00e      	beq.n	800cbe6 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6a1b      	ldr	r3, [r3, #32]
 800cbcc:	699b      	ldr	r3, [r3, #24]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d102      	bne.n	800cbd8 <lwip_netconn_do_writemore+0x348>
 800cbd2:	f06f 0306 	mvn.w	r3, #6
 800cbd6:	e000      	b.n	800cbda <lwip_netconn_do_writemore+0x34a>
 800cbd8:	2300      	movs	r3, #0
 800cbda:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800cbdc:	2301      	movs	r3, #1
 800cbde:	76fb      	strb	r3, [r7, #27]
 800cbe0:	e001      	b.n	800cbe6 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800cbe6:	7efb      	ldrb	r3, [r7, #27]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d015      	beq.n	800cc18 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6a1b      	ldr	r3, [r3, #32]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	330c      	adds	r3, #12
 800cbf4:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6a1b      	ldr	r3, [r3, #32]
 800cbfa:	7ffa      	ldrb	r2, [r7, #31]
 800cbfc:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2200      	movs	r2, #0
 800cc02:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2200      	movs	r2, #0
 800cc08:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800cc0a:	78fb      	ldrb	r3, [r7, #3]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d006      	beq.n	800cc1e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800cc10:	68b8      	ldr	r0, [r7, #8]
 800cc12:	f00f fd81 	bl	801c718 <sys_sem_signal>
 800cc16:	e002      	b.n	800cc1e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800cc18:	f04f 33ff 	mov.w	r3, #4294967295
 800cc1c:	e000      	b.n	800cc20 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800cc1e:	2300      	movs	r3, #0
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3720      	adds	r7, #32
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f7fe fcd3 	bl	800b5e4 <netconn_err>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800cc42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d166      	bne.n	800cd18 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc54:	2b10      	cmp	r3, #16
 800cc56:	d15d      	bne.n	800cd14 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	785b      	ldrb	r3, [r3, #1]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d002      	beq.n	800cc68 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800cc62:	23fb      	movs	r3, #251	; 0xfb
 800cc64:	73fb      	strb	r3, [r7, #15]
 800cc66:	e057      	b.n	800cd18 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d04d      	beq.n	800cd0e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2201      	movs	r2, #1
 800cc78:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	6a1b      	ldr	r3, [r3, #32]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d006      	beq.n	800cc92 <lwip_netconn_do_write+0x6a>
 800cc84:	4b28      	ldr	r3, [pc, #160]	; (800cd28 <lwip_netconn_do_write+0x100>)
 800cc86:	f240 7223 	movw	r2, #1827	; 0x723
 800cc8a:	4928      	ldr	r1, [pc, #160]	; (800cd2c <lwip_netconn_do_write+0x104>)
 800cc8c:	4828      	ldr	r0, [pc, #160]	; (800cd30 <lwip_netconn_do_write+0x108>)
 800cc8e:	f012 fdeb 	bl	801f868 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	695b      	ldr	r3, [r3, #20]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d106      	bne.n	800cca8 <lwip_netconn_do_write+0x80>
 800cc9a:	4b23      	ldr	r3, [pc, #140]	; (800cd28 <lwip_netconn_do_write+0x100>)
 800cc9c:	f240 7224 	movw	r2, #1828	; 0x724
 800cca0:	4924      	ldr	r1, [pc, #144]	; (800cd34 <lwip_netconn_do_write+0x10c>)
 800cca2:	4823      	ldr	r0, [pc, #140]	; (800cd30 <lwip_netconn_do_write+0x108>)
 800cca4:	f012 fde0 	bl	801f868 <iprintf>
        msg->conn->current_msg = msg;
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	68ba      	ldr	r2, [r7, #8]
 800ccae:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	2100      	movs	r1, #0
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7ff fdea 	bl	800c890 <lwip_netconn_do_writemore>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d02e      	beq.n	800cd20 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	785b      	ldrb	r3, [r3, #1]
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	d006      	beq.n	800ccda <lwip_netconn_do_write+0xb2>
 800cccc:	4b16      	ldr	r3, [pc, #88]	; (800cd28 <lwip_netconn_do_write+0x100>)
 800ccce:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800ccd2:	4919      	ldr	r1, [pc, #100]	; (800cd38 <lwip_netconn_do_write+0x110>)
 800ccd4:	4816      	ldr	r0, [pc, #88]	; (800cd30 <lwip_netconn_do_write+0x108>)
 800ccd6:	f012 fdc7 	bl	801f868 <iprintf>
          UNLOCK_TCPIP_CORE();
 800ccda:	4818      	ldr	r0, [pc, #96]	; (800cd3c <lwip_netconn_do_write+0x114>)
 800ccdc:	f00f fd85 	bl	801c7ea <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	330c      	adds	r3, #12
 800cce6:	2100      	movs	r1, #0
 800cce8:	4618      	mov	r0, r3
 800ccea:	f00f fce4 	bl	801c6b6 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800ccee:	4813      	ldr	r0, [pc, #76]	; (800cd3c <lwip_netconn_do_write+0x114>)
 800ccf0:	f00f fd6c 	bl	801c7cc <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	785b      	ldrb	r3, [r3, #1]
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d110      	bne.n	800cd20 <lwip_netconn_do_write+0xf8>
 800ccfe:	4b0a      	ldr	r3, [pc, #40]	; (800cd28 <lwip_netconn_do_write+0x100>)
 800cd00:	f240 722c 	movw	r2, #1836	; 0x72c
 800cd04:	490c      	ldr	r1, [pc, #48]	; (800cd38 <lwip_netconn_do_write+0x110>)
 800cd06:	480a      	ldr	r0, [pc, #40]	; (800cd30 <lwip_netconn_do_write+0x108>)
 800cd08:	f012 fdae 	bl	801f868 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800cd0c:	e008      	b.n	800cd20 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800cd0e:	23f5      	movs	r3, #245	; 0xf5
 800cd10:	73fb      	strb	r3, [r7, #15]
 800cd12:	e001      	b.n	800cd18 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800cd14:	23fa      	movs	r3, #250	; 0xfa
 800cd16:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	7bfa      	ldrb	r2, [r7, #15]
 800cd1c:	711a      	strb	r2, [r3, #4]
 800cd1e:	e000      	b.n	800cd22 <lwip_netconn_do_write+0xfa>
        return;
 800cd20:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800cd22:	3710      	adds	r7, #16
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	08021d5c 	.word	0x08021d5c
 800cd2c:	08022100 	.word	0x08022100
 800cd30:	08021da0 	.word	0x08021da0
 800cd34:	08022288 	.word	0x08022288
 800cd38:	0802211c 	.word	0x0802211c
 800cd3c:	200050bc 	.word	0x200050bc

0800cd40 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d06b      	beq.n	800ce2e <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	7c1b      	ldrb	r3, [r3, #16]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d007      	beq.n	800cd6e <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	685a      	ldr	r2, [r3, #4]
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	689b      	ldr	r3, [r3, #8]
 800cd68:	6812      	ldr	r2, [r2, #0]
 800cd6a:	601a      	str	r2, [r3, #0]
 800cd6c:	e006      	b.n	800cd7c <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	685a      	ldr	r2, [r3, #4]
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	689b      	ldr	r3, [r3, #8]
 800cd78:	6852      	ldr	r2, [r2, #4]
 800cd7a:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd8c:	2b10      	cmp	r3, #16
 800cd8e:	d021      	beq.n	800cdd4 <lwip_netconn_do_getaddr+0x94>
 800cd90:	2b20      	cmp	r3, #32
 800cd92:	d144      	bne.n	800ce1e <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	7c1b      	ldrb	r3, [r3, #16]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d007      	beq.n	800cdac <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	685a      	ldr	r2, [r3, #4]
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	68db      	ldr	r3, [r3, #12]
 800cda6:	8a52      	ldrh	r2, [r2, #18]
 800cda8:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800cdaa:	e044      	b.n	800ce36 <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	7c1b      	ldrb	r3, [r3, #16]
 800cdb4:	f003 0304 	and.w	r3, r3, #4
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d103      	bne.n	800cdc4 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	22f5      	movs	r2, #245	; 0xf5
 800cdc0:	711a      	strb	r2, [r3, #4]
        break;
 800cdc2:	e038      	b.n	800ce36 <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	685a      	ldr	r2, [r3, #4]
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	68db      	ldr	r3, [r3, #12]
 800cdce:	8a92      	ldrh	r2, [r2, #20]
 800cdd0:	801a      	strh	r2, [r3, #0]
        break;
 800cdd2:	e030      	b.n	800ce36 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	7c1b      	ldrb	r3, [r3, #16]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d10f      	bne.n	800cdfc <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d005      	beq.n	800cdf4 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	7d1b      	ldrb	r3, [r3, #20]
 800cdf0:	2b01      	cmp	r3, #1
 800cdf2:	d103      	bne.n	800cdfc <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	22f5      	movs	r2, #245	; 0xf5
 800cdf8:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800cdfa:	e01c      	b.n	800ce36 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	7c1b      	ldrb	r3, [r3, #16]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d004      	beq.n	800ce0e <lwip_netconn_do_getaddr+0xce>
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	8adb      	ldrh	r3, [r3, #22]
 800ce0c:	e003      	b.n	800ce16 <lwip_netconn_do_getaddr+0xd6>
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	8b1b      	ldrh	r3, [r3, #24]
 800ce16:	68fa      	ldr	r2, [r7, #12]
 800ce18:	68d2      	ldr	r2, [r2, #12]
 800ce1a:	8013      	strh	r3, [r2, #0]
        break;
 800ce1c:	e00b      	b.n	800ce36 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800ce1e:	4b08      	ldr	r3, [pc, #32]	; (800ce40 <lwip_netconn_do_getaddr+0x100>)
 800ce20:	f240 727d 	movw	r2, #1917	; 0x77d
 800ce24:	4907      	ldr	r1, [pc, #28]	; (800ce44 <lwip_netconn_do_getaddr+0x104>)
 800ce26:	4808      	ldr	r0, [pc, #32]	; (800ce48 <lwip_netconn_do_getaddr+0x108>)
 800ce28:	f012 fd1e 	bl	801f868 <iprintf>
        break;
 800ce2c:	e003      	b.n	800ce36 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	22f5      	movs	r2, #245	; 0xf5
 800ce32:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ce34:	bf00      	nop
 800ce36:	bf00      	nop
 800ce38:	3710      	adds	r7, #16
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
 800ce3e:	bf00      	nop
 800ce40:	08021d5c 	.word	0x08021d5c
 800ce44:	0802229c 	.word	0x0802229c
 800ce48:	08021da0 	.word	0x08021da0

0800ce4c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b084      	sub	sp, #16
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	785b      	ldrb	r3, [r3, #1]
 800ce5e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d069      	beq.n	800cf3e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800ce74:	2b10      	cmp	r3, #16
 800ce76:	d162      	bne.n	800cf3e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800ce7c:	2b03      	cmp	r3, #3
 800ce7e:	d002      	beq.n	800ce86 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ce80:	7afb      	ldrb	r3, [r7, #11]
 800ce82:	2b02      	cmp	r3, #2
 800ce84:	d05b      	beq.n	800cf3e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800ce86:	7afb      	ldrb	r3, [r7, #11]
 800ce88:	2b03      	cmp	r3, #3
 800ce8a:	d103      	bne.n	800ce94 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	22f5      	movs	r2, #245	; 0xf5
 800ce90:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ce92:	e059      	b.n	800cf48 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800ce94:	7afb      	ldrb	r3, [r7, #11]
 800ce96:	2b01      	cmp	r3, #1
 800ce98:	d103      	bne.n	800cea2 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	22fb      	movs	r2, #251	; 0xfb
 800ce9e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800cea0:	e052      	b.n	800cf48 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	7a1b      	ldrb	r3, [r3, #8]
 800cea6:	f003 0301 	and.w	r3, r3, #1
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d004      	beq.n	800ceb8 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7ff f8d0 	bl	800c058 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	6a1b      	ldr	r3, [r3, #32]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d006      	beq.n	800ced0 <lwip_netconn_do_close+0x84>
 800cec2:	4b23      	ldr	r3, [pc, #140]	; (800cf50 <lwip_netconn_do_close+0x104>)
 800cec4:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800cec8:	4922      	ldr	r1, [pc, #136]	; (800cf54 <lwip_netconn_do_close+0x108>)
 800ceca:	4823      	ldr	r0, [pc, #140]	; (800cf58 <lwip_netconn_do_close+0x10c>)
 800cecc:	f012 fccc 	bl	801f868 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	2204      	movs	r2, #4
 800ced6:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	68fa      	ldr	r2, [r7, #12]
 800cede:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	2100      	movs	r1, #0
 800cee6:	4618      	mov	r0, r3
 800cee8:	f7ff f934 	bl	800c154 <lwip_netconn_do_close_internal>
 800ceec:	4603      	mov	r3, r0
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d029      	beq.n	800cf46 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	785b      	ldrb	r3, [r3, #1]
 800cef8:	2b04      	cmp	r3, #4
 800cefa:	d006      	beq.n	800cf0a <lwip_netconn_do_close+0xbe>
 800cefc:	4b14      	ldr	r3, [pc, #80]	; (800cf50 <lwip_netconn_do_close+0x104>)
 800cefe:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800cf02:	4916      	ldr	r1, [pc, #88]	; (800cf5c <lwip_netconn_do_close+0x110>)
 800cf04:	4814      	ldr	r0, [pc, #80]	; (800cf58 <lwip_netconn_do_close+0x10c>)
 800cf06:	f012 fcaf 	bl	801f868 <iprintf>
        UNLOCK_TCPIP_CORE();
 800cf0a:	4815      	ldr	r0, [pc, #84]	; (800cf60 <lwip_netconn_do_close+0x114>)
 800cf0c:	f00f fc6d 	bl	801c7ea <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	330c      	adds	r3, #12
 800cf16:	2100      	movs	r1, #0
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f00f fbcc 	bl	801c6b6 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800cf1e:	4810      	ldr	r0, [pc, #64]	; (800cf60 <lwip_netconn_do_close+0x114>)
 800cf20:	f00f fc54 	bl	801c7cc <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	785b      	ldrb	r3, [r3, #1]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d00b      	beq.n	800cf46 <lwip_netconn_do_close+0xfa>
 800cf2e:	4b08      	ldr	r3, [pc, #32]	; (800cf50 <lwip_netconn_do_close+0x104>)
 800cf30:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800cf34:	4909      	ldr	r1, [pc, #36]	; (800cf5c <lwip_netconn_do_close+0x110>)
 800cf36:	4808      	ldr	r0, [pc, #32]	; (800cf58 <lwip_netconn_do_close+0x10c>)
 800cf38:	f012 fc96 	bl	801f868 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800cf3c:	e003      	b.n	800cf46 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	22f5      	movs	r2, #245	; 0xf5
 800cf42:	711a      	strb	r2, [r3, #4]
 800cf44:	e000      	b.n	800cf48 <lwip_netconn_do_close+0xfc>
      return;
 800cf46:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800cf48:	3710      	adds	r7, #16
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	08021d5c 	.word	0x08021d5c
 800cf54:	08022100 	.word	0x08022100
 800cf58:	08021da0 	.word	0x08021da0
 800cf5c:	0802211c 	.word	0x0802211c
 800cf60:	200050bc 	.word	0x200050bc

0800cf64 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800cf64:	b480      	push	{r7}
 800cf66:	b083      	sub	sp, #12
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800cf6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	dc04      	bgt.n	800cf80 <err_to_errno+0x1c>
 800cf76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cf7a:	f113 0f10 	cmn.w	r3, #16
 800cf7e:	da01      	bge.n	800cf84 <err_to_errno+0x20>
    return EIO;
 800cf80:	2305      	movs	r3, #5
 800cf82:	e005      	b.n	800cf90 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800cf84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cf88:	425b      	negs	r3, r3
 800cf8a:	4a04      	ldr	r2, [pc, #16]	; (800cf9c <err_to_errno+0x38>)
 800cf8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	370c      	adds	r7, #12
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr
 800cf9c:	08025948 	.word	0x08025948

0800cfa0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b082      	sub	sp, #8
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d013      	beq.n	800cfd6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d00b      	beq.n	800cfce <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f003 fcd8 	bl	8010970 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	605a      	str	r2, [r3, #4]
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	685a      	ldr	r2, [r3, #4]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800cfce:	6879      	ldr	r1, [r7, #4]
 800cfd0:	2006      	movs	r0, #6
 800cfd2:	f002 fdb3 	bl	800fb3c <memp_free>
  }
}
 800cfd6:	bf00      	nop
 800cfd8:	3708      	adds	r7, #8
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
	...

0800cfe0 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b082      	sub	sp, #8
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d106      	bne.n	800cffc <netbuf_free+0x1c>
 800cfee:	4b0d      	ldr	r3, [pc, #52]	; (800d024 <netbuf_free+0x44>)
 800cff0:	2281      	movs	r2, #129	; 0x81
 800cff2:	490d      	ldr	r1, [pc, #52]	; (800d028 <netbuf_free+0x48>)
 800cff4:	480d      	ldr	r0, [pc, #52]	; (800d02c <netbuf_free+0x4c>)
 800cff6:	f012 fc37 	bl	801f868 <iprintf>
 800cffa:	e00f      	b.n	800d01c <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d004      	beq.n	800d00e <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4618      	mov	r0, r3
 800d00a:	f003 fcb1 	bl	8010970 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2200      	movs	r2, #0
 800d012:	605a      	str	r2, [r3, #4]
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	685a      	ldr	r2, [r3, #4]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800d01c:	3708      	adds	r7, #8
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	080222dc 	.word	0x080222dc
 800d028:	08022378 	.word	0x08022378
 800d02c:	0802232c 	.word	0x0802232c

0800d030 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b084      	sub	sp, #16
 800d034:	af00      	add	r7, sp, #0
 800d036:	60f8      	str	r0, [r7, #12]
 800d038:	60b9      	str	r1, [r7, #8]
 800d03a:	4613      	mov	r3, r2
 800d03c:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d108      	bne.n	800d056 <netbuf_ref+0x26>
 800d044:	4b1c      	ldr	r3, [pc, #112]	; (800d0b8 <netbuf_ref+0x88>)
 800d046:	2299      	movs	r2, #153	; 0x99
 800d048:	491c      	ldr	r1, [pc, #112]	; (800d0bc <netbuf_ref+0x8c>)
 800d04a:	481d      	ldr	r0, [pc, #116]	; (800d0c0 <netbuf_ref+0x90>)
 800d04c:	f012 fc0c 	bl	801f868 <iprintf>
 800d050:	f06f 030f 	mvn.w	r3, #15
 800d054:	e02b      	b.n	800d0ae <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d004      	beq.n	800d068 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	4618      	mov	r0, r3
 800d064:	f003 fc84 	bl	8010970 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800d068:	2241      	movs	r2, #65	; 0x41
 800d06a:	2100      	movs	r1, #0
 800d06c:	2036      	movs	r0, #54	; 0x36
 800d06e:	f003 f969 	bl	8010344 <pbuf_alloc>
 800d072:	4602      	mov	r2, r0
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d105      	bne.n	800d08c <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	2200      	movs	r2, #0
 800d084:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800d086:	f04f 33ff 	mov.w	r3, #4294967295
 800d08a:	e010      	b.n	800d0ae <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	68ba      	ldr	r2, [r7, #8]
 800d092:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	88fa      	ldrh	r2, [r7, #6]
 800d09a:	811a      	strh	r2, [r3, #8]
 800d09c:	68fa      	ldr	r2, [r7, #12]
 800d09e:	6812      	ldr	r2, [r2, #0]
 800d0a0:	891b      	ldrh	r3, [r3, #8]
 800d0a2:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681a      	ldr	r2, [r3, #0]
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800d0ac:	2300      	movs	r3, #0
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3710      	adds	r7, #16
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}
 800d0b6:	bf00      	nop
 800d0b8:	080222dc 	.word	0x080222dc
 800d0bc:	08022394 	.word	0x08022394
 800d0c0:	0802232c 	.word	0x0802232c

0800d0c4 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b085      	sub	sp, #20
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	db02      	blt.n	800d0dc <tryget_socket_unconn_nouse+0x18>
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2b03      	cmp	r3, #3
 800d0da:	dd01      	ble.n	800d0e0 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	e003      	b.n	800d0e8 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	011b      	lsls	r3, r3, #4
 800d0e4:	4a03      	ldr	r2, [pc, #12]	; (800d0f4 <tryget_socket_unconn_nouse+0x30>)
 800d0e6:	4413      	add	r3, r2
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3714      	adds	r7, #20
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr
 800d0f4:	200013f8 	.word	0x200013f8

0800d0f8 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b084      	sub	sp, #16
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f7ff ffdf 	bl	800d0c4 <tryget_socket_unconn_nouse>
 800d106:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800d108:	68fb      	ldr	r3, [r7, #12]
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3710      	adds	r7, #16
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b084      	sub	sp, #16
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f7ff ffec 	bl	800d0f8 <tryget_socket_unconn>
 800d120:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d005      	beq.n	800d134 <tryget_socket+0x22>
    if (sock->conn) {
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d001      	beq.n	800d134 <tryget_socket+0x22>
      return sock;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	e000      	b.n	800d136 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800d134:	2300      	movs	r3, #0
}
 800d136:	4618      	mov	r0, r3
 800d138:	3710      	adds	r7, #16
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
	...

0800d140 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b084      	sub	sp, #16
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f7ff ffe2 	bl	800d112 <tryget_socket>
 800d14e:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d104      	bne.n	800d160 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800d156:	4b05      	ldr	r3, [pc, #20]	; (800d16c <get_socket+0x2c>)
 800d158:	2209      	movs	r2, #9
 800d15a:	601a      	str	r2, [r3, #0]
    return NULL;
 800d15c:	2300      	movs	r3, #0
 800d15e:	e000      	b.n	800d162 <get_socket+0x22>
  }
  return sock;
 800d160:	68fb      	ldr	r3, [r7, #12]
}
 800d162:	4618      	mov	r0, r3
 800d164:	3710      	adds	r7, #16
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	2000898c 	.word	0x2000898c

0800d170 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b084      	sub	sp, #16
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800d17a:	2300      	movs	r3, #0
 800d17c:	60fb      	str	r3, [r7, #12]
 800d17e:	e052      	b.n	800d226 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800d180:	f00f fb60 	bl	801c844 <sys_arch_protect>
 800d184:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800d186:	4a2c      	ldr	r2, [pc, #176]	; (800d238 <alloc_socket+0xc8>)
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	011b      	lsls	r3, r3, #4
 800d18c:	4413      	add	r3, r2
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d142      	bne.n	800d21a <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800d194:	4a28      	ldr	r2, [pc, #160]	; (800d238 <alloc_socket+0xc8>)
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	011b      	lsls	r3, r3, #4
 800d19a:	4413      	add	r3, r2
 800d19c:	687a      	ldr	r2, [r7, #4]
 800d19e:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800d1a0:	68b8      	ldr	r0, [r7, #8]
 800d1a2:	f00f fb5d 	bl	801c860 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800d1a6:	4a24      	ldr	r2, [pc, #144]	; (800d238 <alloc_socket+0xc8>)
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	011b      	lsls	r3, r3, #4
 800d1ac:	4413      	add	r3, r2
 800d1ae:	3304      	adds	r3, #4
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800d1b4:	4a20      	ldr	r2, [pc, #128]	; (800d238 <alloc_socket+0xc8>)
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	011b      	lsls	r3, r3, #4
 800d1ba:	4413      	add	r3, r2
 800d1bc:	330e      	adds	r3, #14
 800d1be:	781b      	ldrb	r3, [r3, #0]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d006      	beq.n	800d1d2 <alloc_socket+0x62>
 800d1c4:	4b1d      	ldr	r3, [pc, #116]	; (800d23c <alloc_socket+0xcc>)
 800d1c6:	f240 220e 	movw	r2, #526	; 0x20e
 800d1ca:	491d      	ldr	r1, [pc, #116]	; (800d240 <alloc_socket+0xd0>)
 800d1cc:	481d      	ldr	r0, [pc, #116]	; (800d244 <alloc_socket+0xd4>)
 800d1ce:	f012 fb4b 	bl	801f868 <iprintf>
      sockets[i].rcvevent   = 0;
 800d1d2:	4a19      	ldr	r2, [pc, #100]	; (800d238 <alloc_socket+0xc8>)
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	011b      	lsls	r3, r3, #4
 800d1d8:	4413      	add	r3, r2
 800d1da:	3308      	adds	r3, #8
 800d1dc:	2200      	movs	r2, #0
 800d1de:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d1e8:	2b10      	cmp	r3, #16
 800d1ea:	d102      	bne.n	800d1f2 <alloc_socket+0x82>
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d001      	beq.n	800d1f6 <alloc_socket+0x86>
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	e000      	b.n	800d1f8 <alloc_socket+0x88>
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	b299      	uxth	r1, r3
 800d1fa:	4a0f      	ldr	r2, [pc, #60]	; (800d238 <alloc_socket+0xc8>)
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	011b      	lsls	r3, r3, #4
 800d200:	4413      	add	r3, r2
 800d202:	330a      	adds	r3, #10
 800d204:	460a      	mov	r2, r1
 800d206:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800d208:	4a0b      	ldr	r2, [pc, #44]	; (800d238 <alloc_socket+0xc8>)
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	011b      	lsls	r3, r3, #4
 800d20e:	4413      	add	r3, r2
 800d210:	330c      	adds	r3, #12
 800d212:	2200      	movs	r2, #0
 800d214:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	e00a      	b.n	800d230 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800d21a:	68b8      	ldr	r0, [r7, #8]
 800d21c:	f00f fb20 	bl	801c860 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	3301      	adds	r3, #1
 800d224:	60fb      	str	r3, [r7, #12]
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2b03      	cmp	r3, #3
 800d22a:	dda9      	ble.n	800d180 <alloc_socket+0x10>
  }
  return -1;
 800d22c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d230:	4618      	mov	r0, r3
 800d232:	3710      	adds	r7, #16
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}
 800d238:	200013f8 	.word	0x200013f8
 800d23c:	08022474 	.word	0x08022474
 800d240:	080224a8 	.word	0x080224a8
 800d244:	080224c8 	.word	0x080224c8

0800d248 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800d248:	b480      	push	{r7}
 800d24a:	b085      	sub	sp, #20
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	60f8      	str	r0, [r7, #12]
 800d250:	60b9      	str	r1, [r7, #8]
 800d252:	607a      	str	r2, [r7, #4]
 800d254:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	68fa      	ldr	r2, [r7, #12]
 800d25a:	6852      	ldr	r2, [r2, #4]
 800d25c:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	2200      	movs	r2, #0
 800d262:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681a      	ldr	r2, [r3, #0]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	2200      	movs	r2, #0
 800d270:	601a      	str	r2, [r3, #0]
  return 1;
 800d272:	2301      	movs	r3, #1
}
 800d274:	4618      	mov	r0, r3
 800d276:	3714      	adds	r7, #20
 800d278:	46bd      	mov	sp, r7
 800d27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27e:	4770      	bx	lr

0800d280 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b084      	sub	sp, #16
 800d284:	af00      	add	r7, sp, #0
 800d286:	60f8      	str	r0, [r7, #12]
 800d288:	60b9      	str	r1, [r7, #8]
 800d28a:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d00d      	beq.n	800d2b0 <free_socket_free_elements+0x30>
    if (is_tcp) {
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d005      	beq.n	800d2a6 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f003 fb66 	bl	8010970 <pbuf_free>
 800d2a4:	e004      	b.n	800d2b0 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7ff fe78 	bl	800cfa0 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d002      	beq.n	800d2bc <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800d2b6:	68b8      	ldr	r0, [r7, #8]
 800d2b8:	f7fd fd04 	bl	800acc4 <netconn_delete>
  }
}
 800d2bc:	bf00      	nop
 800d2be:	3710      	adds	r7, #16
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b086      	sub	sp, #24
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800d2ce:	f00f fab9 	bl	801c844 <sys_arch_protect>
 800d2d2:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800d2d4:	f107 0308 	add.w	r3, r7, #8
 800d2d8:	f107 020c 	add.w	r2, r7, #12
 800d2dc:	6839      	ldr	r1, [r7, #0]
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f7ff ffb2 	bl	800d248 <free_socket_locked>
 800d2e4:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800d2e6:	6978      	ldr	r0, [r7, #20]
 800d2e8:	f00f faba 	bl	801c860 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d006      	beq.n	800d300 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	f107 0208 	add.w	r2, r7, #8
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	6838      	ldr	r0, [r7, #0]
 800d2fc:	f7ff ffc0 	bl	800d280 <free_socket_free_elements>
  }
}
 800d300:	bf00      	nop
 800d302:	3718      	adds	r7, #24
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 800d308:	b590      	push	{r4, r7, lr}
 800d30a:	b099      	sub	sp, #100	; 0x64
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	60f8      	str	r0, [r7, #12]
 800d310:	60b9      	str	r1, [r7, #8]
 800d312:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 800d314:	2300      	movs	r3, #0
 800d316:	84fb      	strh	r3, [r7, #38]	; 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 800d318:	68f8      	ldr	r0, [r7, #12]
 800d31a:	f7ff ff11 	bl	800d140 <get_socket>
 800d31e:	65b8      	str	r0, [r7, #88]	; 0x58
  if (!sock) {
 800d320:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d322:	2b00      	cmp	r3, #0
 800d324:	d102      	bne.n	800d32c <lwip_accept+0x24>
    return -1;
 800d326:	f04f 33ff 	mov.w	r3, #4294967295
 800d32a:	e0f8      	b.n	800d51e <lwip_accept+0x216>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 800d32c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800d334:	4611      	mov	r1, r2
 800d336:	4618      	mov	r0, r3
 800d338:	f7fd fd96 	bl	800ae68 <netconn_accept>
 800d33c:	4603      	mov	r3, r0
 800d33e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (err != ERR_OK) {
 800d342:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d346:	2b00      	cmp	r3, #0
 800d348:	d02c      	beq.n	800d3a4 <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800d34a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d354:	2b10      	cmp	r3, #16
 800d356:	d008      	beq.n	800d36a <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 800d358:	235f      	movs	r3, #95	; 0x5f
 800d35a:	633b      	str	r3, [r7, #48]	; 0x30
 800d35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d01d      	beq.n	800d39e <lwip_accept+0x96>
 800d362:	4a71      	ldr	r2, [pc, #452]	; (800d528 <lwip_accept+0x220>)
 800d364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d366:	6013      	str	r3, [r2, #0]
 800d368:	e019      	b.n	800d39e <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 800d36a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d36e:	f113 0f0f 	cmn.w	r3, #15
 800d372:	d108      	bne.n	800d386 <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 800d374:	2316      	movs	r3, #22
 800d376:	637b      	str	r3, [r7, #52]	; 0x34
 800d378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d00f      	beq.n	800d39e <lwip_accept+0x96>
 800d37e:	4a6a      	ldr	r2, [pc, #424]	; (800d528 <lwip_accept+0x220>)
 800d380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d382:	6013      	str	r3, [r2, #0]
 800d384:	e00b      	b.n	800d39e <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800d386:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7ff fdea 	bl	800cf64 <err_to_errno>
 800d390:	63b8      	str	r0, [r7, #56]	; 0x38
 800d392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d394:	2b00      	cmp	r3, #0
 800d396:	d002      	beq.n	800d39e <lwip_accept+0x96>
 800d398:	4a63      	ldr	r2, [pc, #396]	; (800d528 <lwip_accept+0x220>)
 800d39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d39c:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800d39e:	f04f 33ff 	mov.w	r3, #4294967295
 800d3a2:	e0bc      	b.n	800d51e <lwip_accept+0x216>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 800d3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d106      	bne.n	800d3b8 <lwip_accept+0xb0>
 800d3aa:	4b60      	ldr	r3, [pc, #384]	; (800d52c <lwip_accept+0x224>)
 800d3ac:	f240 228b 	movw	r2, #651	; 0x28b
 800d3b0:	495f      	ldr	r1, [pc, #380]	; (800d530 <lwip_accept+0x228>)
 800d3b2:	4860      	ldr	r0, [pc, #384]	; (800d534 <lwip_accept+0x22c>)
 800d3b4:	f012 fa58 	bl	801f868 <iprintf>

  newsock = alloc_socket(newconn, 1);
 800d3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ba:	2101      	movs	r1, #1
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7ff fed7 	bl	800d170 <alloc_socket>
 800d3c2:	6538      	str	r0, [r7, #80]	; 0x50
  if (newsock == -1) {
 800d3c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ca:	d10e      	bne.n	800d3ea <lwip_accept+0xe2>
    netconn_delete(newconn);
 800d3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f7fd fc78 	bl	800acc4 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 800d3d4:	2317      	movs	r3, #23
 800d3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d3d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d002      	beq.n	800d3e4 <lwip_accept+0xdc>
 800d3de:	4a52      	ldr	r2, [pc, #328]	; (800d528 <lwip_accept+0x220>)
 800d3e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3e2:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800d3e4:	f04f 33ff 	mov.w	r3, #4294967295
 800d3e8:	e099      	b.n	800d51e <lwip_accept+0x216>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 800d3ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	db02      	blt.n	800d3f6 <lwip_accept+0xee>
 800d3f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3f2:	2b03      	cmp	r3, #3
 800d3f4:	dd06      	ble.n	800d404 <lwip_accept+0xfc>
 800d3f6:	4b4d      	ldr	r3, [pc, #308]	; (800d52c <lwip_accept+0x224>)
 800d3f8:	f44f 7225 	mov.w	r2, #660	; 0x294
 800d3fc:	494e      	ldr	r1, [pc, #312]	; (800d538 <lwip_accept+0x230>)
 800d3fe:	484d      	ldr	r0, [pc, #308]	; (800d534 <lwip_accept+0x22c>)
 800d400:	f012 fa32 	bl	801f868 <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 800d404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d406:	011b      	lsls	r3, r3, #4
 800d408:	4a4c      	ldr	r2, [pc, #304]	; (800d53c <lwip_accept+0x234>)
 800d40a:	4413      	add	r3, r2
 800d40c:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 800d40e:	f00f fa19 	bl	801c844 <sys_arch_protect>
 800d412:	64b8      	str	r0, [r7, #72]	; 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 800d414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d416:	699b      	ldr	r3, [r3, #24]
 800d418:	b21b      	sxth	r3, r3
 800d41a:	43db      	mvns	r3, r3
 800d41c:	b21b      	sxth	r3, r3
 800d41e:	65fb      	str	r3, [r7, #92]	; 0x5c
  newconn->socket = newsock;
 800d420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d422:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d424:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 800d426:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d428:	f00f fa1a 	bl	801c860 <sys_arch_unprotect>

  if (newconn->callback) {
 800d42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d430:	2b00      	cmp	r3, #0
 800d432:	d012      	beq.n	800d45a <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 800d434:	4842      	ldr	r0, [pc, #264]	; (800d540 <lwip_accept+0x238>)
 800d436:	f00f f9c9 	bl	801c7cc <sys_mutex_lock>
    while (recvevent > 0) {
 800d43a:	e008      	b.n	800d44e <lwip_accept+0x146>
      recvevent--;
 800d43c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d43e:	3b01      	subs	r3, #1
 800d440:	65fb      	str	r3, [r7, #92]	; 0x5c
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 800d442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d446:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d448:	2200      	movs	r2, #0
 800d44a:	2100      	movs	r1, #0
 800d44c:	4798      	blx	r3
    while (recvevent > 0) {
 800d44e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d450:	2b00      	cmp	r3, #0
 800d452:	dcf3      	bgt.n	800d43c <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 800d454:	483a      	ldr	r0, [pc, #232]	; (800d540 <lwip_accept+0x238>)
 800d456:	f00f f9c8 	bl	801c7ea <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d055      	beq.n	800d50c <lwip_accept+0x204>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d052      	beq.n	800d50c <lwip_accept+0x204>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 800d466:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d468:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800d46c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d470:	2300      	movs	r3, #0
 800d472:	f7fd fc43 	bl	800acfc <netconn_getaddr>
 800d476:	4603      	mov	r3, r0
 800d478:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (err != ERR_OK) {
 800d47c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d480:	2b00      	cmp	r3, #0
 800d482:	d016      	beq.n	800d4b2 <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 800d484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d486:	4618      	mov	r0, r3
 800d488:	f7fd fc1c 	bl	800acc4 <netconn_delete>
      free_socket(nsock, 1);
 800d48c:	2101      	movs	r1, #1
 800d48e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d490:	f7ff ff18 	bl	800d2c4 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 800d494:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d498:	4618      	mov	r0, r3
 800d49a:	f7ff fd63 	bl	800cf64 <err_to_errno>
 800d49e:	6478      	str	r0, [r7, #68]	; 0x44
 800d4a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d002      	beq.n	800d4ac <lwip_accept+0x1a4>
 800d4a6:	4a20      	ldr	r2, [pc, #128]	; (800d528 <lwip_accept+0x220>)
 800d4a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4aa:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800d4ac:	f04f 33ff 	mov.w	r3, #4294967295
 800d4b0:	e035      	b.n	800d51e <lwip_accept+0x216>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 800d4b2:	f107 0314 	add.w	r3, r7, #20
 800d4b6:	2210      	movs	r2, #16
 800d4b8:	701a      	strb	r2, [r3, #0]
 800d4ba:	f107 0314 	add.w	r3, r7, #20
 800d4be:	2202      	movs	r2, #2
 800d4c0:	705a      	strb	r2, [r3, #1]
 800d4c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d4c4:	f107 0414 	add.w	r4, r7, #20
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f001 fb41 	bl	800eb50 <lwip_htons>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	8063      	strh	r3, [r4, #2]
 800d4d2:	f107 0314 	add.w	r3, r7, #20
 800d4d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4d8:	605a      	str	r2, [r3, #4]
 800d4da:	f107 0314 	add.w	r3, r7, #20
 800d4de:	3308      	adds	r3, #8
 800d4e0:	2208      	movs	r2, #8
 800d4e2:	2100      	movs	r1, #0
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f011 fb49 	bl	801eb7c <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	7d3a      	ldrb	r2, [r7, #20]
 800d4f0:	4293      	cmp	r3, r2
 800d4f2:	d903      	bls.n	800d4fc <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 800d4f4:	7d3b      	ldrb	r3, [r7, #20]
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681a      	ldr	r2, [r3, #0]
 800d500:	f107 0314 	add.w	r3, r7, #20
 800d504:	4619      	mov	r1, r3
 800d506:	68b8      	ldr	r0, [r7, #8]
 800d508:	f011 fb10 	bl	801eb2c <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 800d50c:	2300      	movs	r3, #0
 800d50e:	643b      	str	r3, [r7, #64]	; 0x40
 800d510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d512:	2b00      	cmp	r3, #0
 800d514:	d002      	beq.n	800d51c <lwip_accept+0x214>
 800d516:	4a04      	ldr	r2, [pc, #16]	; (800d528 <lwip_accept+0x220>)
 800d518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d51a:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 800d51c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3764      	adds	r7, #100	; 0x64
 800d522:	46bd      	mov	sp, r7
 800d524:	bd90      	pop	{r4, r7, pc}
 800d526:	bf00      	nop
 800d528:	2000898c 	.word	0x2000898c
 800d52c:	08022474 	.word	0x08022474
 800d530:	080224f0 	.word	0x080224f0
 800d534:	080224c8 	.word	0x080224c8
 800d538:	08022500 	.word	0x08022500
 800d53c:	200013f8 	.word	0x200013f8
 800d540:	200050bc 	.word	0x200050bc

0800d544 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b08a      	sub	sp, #40	; 0x28
 800d548:	af00      	add	r7, sp, #0
 800d54a:	60f8      	str	r0, [r7, #12]
 800d54c:	60b9      	str	r1, [r7, #8]
 800d54e:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800d550:	68f8      	ldr	r0, [r7, #12]
 800d552:	f7ff fdf5 	bl	800d140 <get_socket>
 800d556:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800d558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d102      	bne.n	800d564 <lwip_bind+0x20>
    return -1;
 800d55e:	f04f 33ff 	mov.w	r3, #4294967295
 800d562:	e051      	b.n	800d608 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2b10      	cmp	r3, #16
 800d568:	d108      	bne.n	800d57c <lwip_bind+0x38>
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	785b      	ldrb	r3, [r3, #1]
 800d56e:	2b02      	cmp	r3, #2
 800d570:	d104      	bne.n	800d57c <lwip_bind+0x38>
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	f003 0303 	and.w	r3, r3, #3
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d014      	beq.n	800d5a6 <lwip_bind+0x62>
 800d57c:	4b24      	ldr	r3, [pc, #144]	; (800d610 <lwip_bind+0xcc>)
 800d57e:	f240 22e2 	movw	r2, #738	; 0x2e2
 800d582:	4924      	ldr	r1, [pc, #144]	; (800d614 <lwip_bind+0xd0>)
 800d584:	4824      	ldr	r0, [pc, #144]	; (800d618 <lwip_bind+0xd4>)
 800d586:	f012 f96f 	bl	801f868 <iprintf>
 800d58a:	f06f 000f 	mvn.w	r0, #15
 800d58e:	f7ff fce9 	bl	800cf64 <err_to_errno>
 800d592:	6178      	str	r0, [r7, #20]
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d002      	beq.n	800d5a0 <lwip_bind+0x5c>
 800d59a:	4a20      	ldr	r2, [pc, #128]	; (800d61c <lwip_bind+0xd8>)
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	6013      	str	r3, [r2, #0]
 800d5a0:	f04f 33ff 	mov.w	r3, #4294967295
 800d5a4:	e030      	b.n	800d608 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	685b      	ldr	r3, [r3, #4]
 800d5aa:	613b      	str	r3, [r7, #16]
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	885b      	ldrh	r3, [r3, #2]
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f001 facd 	bl	800eb50 <lwip_htons>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800d5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d5c0:	f107 0110 	add.w	r1, r7, #16
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f7fd fbeb 	bl	800ada0 <netconn_bind>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 800d5d0:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d00e      	beq.n	800d5f6 <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800d5d8:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f7ff fcc1 	bl	800cf64 <err_to_errno>
 800d5e2:	61b8      	str	r0, [r7, #24]
 800d5e4:	69bb      	ldr	r3, [r7, #24]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d002      	beq.n	800d5f0 <lwip_bind+0xac>
 800d5ea:	4a0c      	ldr	r2, [pc, #48]	; (800d61c <lwip_bind+0xd8>)
 800d5ec:	69bb      	ldr	r3, [r7, #24]
 800d5ee:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800d5f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d5f4:	e008      	b.n	800d608 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	61fb      	str	r3, [r7, #28]
 800d5fa:	69fb      	ldr	r3, [r7, #28]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d002      	beq.n	800d606 <lwip_bind+0xc2>
 800d600:	4a06      	ldr	r2, [pc, #24]	; (800d61c <lwip_bind+0xd8>)
 800d602:	69fb      	ldr	r3, [r7, #28]
 800d604:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800d606:	2300      	movs	r3, #0
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3728      	adds	r7, #40	; 0x28
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	08022474 	.word	0x08022474
 800d614:	08022518 	.word	0x08022518
 800d618:	080224c8 	.word	0x080224c8
 800d61c:	2000898c 	.word	0x2000898c

0800d620 <lwip_close>:

int
lwip_close(int s)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b086      	sub	sp, #24
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800d628:	2300      	movs	r3, #0
 800d62a:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f7ff fd87 	bl	800d140 <get_socket>
 800d632:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d102      	bne.n	800d640 <lwip_close+0x20>
    return -1;
 800d63a:	f04f 33ff 	mov.w	r3, #4294967295
 800d63e:	e039      	b.n	800d6b4 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d00b      	beq.n	800d660 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800d648:	693b      	ldr	r3, [r7, #16]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	781b      	ldrb	r3, [r3, #0]
 800d64e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d652:	2b10      	cmp	r3, #16
 800d654:	bf0c      	ite	eq
 800d656:	2301      	moveq	r3, #1
 800d658:	2300      	movne	r3, #0
 800d65a:	b2db      	uxtb	r3, r3
 800d65c:	617b      	str	r3, [r7, #20]
 800d65e:	e00a      	b.n	800d676 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	685b      	ldr	r3, [r3, #4]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d006      	beq.n	800d676 <lwip_close+0x56>
 800d668:	4b14      	ldr	r3, [pc, #80]	; (800d6bc <lwip_close+0x9c>)
 800d66a:	f44f 7245 	mov.w	r2, #788	; 0x314
 800d66e:	4914      	ldr	r1, [pc, #80]	; (800d6c0 <lwip_close+0xa0>)
 800d670:	4814      	ldr	r0, [pc, #80]	; (800d6c4 <lwip_close+0xa4>)
 800d672:	f012 f8f9 	bl	801f868 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 800d676:	693b      	ldr	r3, [r7, #16]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7fd fafe 	bl	800ac7c <netconn_prepare_delete>
 800d680:	4603      	mov	r3, r0
 800d682:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d00e      	beq.n	800d6aa <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 800d68c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d690:	4618      	mov	r0, r3
 800d692:	f7ff fc67 	bl	800cf64 <err_to_errno>
 800d696:	60b8      	str	r0, [r7, #8]
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d002      	beq.n	800d6a4 <lwip_close+0x84>
 800d69e:	4a0a      	ldr	r2, [pc, #40]	; (800d6c8 <lwip_close+0xa8>)
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800d6a4:	f04f 33ff 	mov.w	r3, #4294967295
 800d6a8:	e004      	b.n	800d6b4 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 800d6aa:	6979      	ldr	r1, [r7, #20]
 800d6ac:	6938      	ldr	r0, [r7, #16]
 800d6ae:	f7ff fe09 	bl	800d2c4 <free_socket>
  set_errno(0);
  return 0;
 800d6b2:	2300      	movs	r3, #0
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3718      	adds	r7, #24
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}
 800d6bc:	08022474 	.word	0x08022474
 800d6c0:	08022534 	.word	0x08022534
 800d6c4:	080224c8 	.word	0x080224c8
 800d6c8:	2000898c 	.word	0x2000898c

0800d6cc <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b088      	sub	sp, #32
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f7ff fd32 	bl	800d140 <get_socket>
 800d6dc:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800d6de:	69fb      	ldr	r3, [r7, #28]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d102      	bne.n	800d6ea <lwip_listen+0x1e>
    return -1;
 800d6e4:	f04f 33ff 	mov.w	r3, #4294967295
 800d6e8:	e03e      	b.n	800d768 <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	2bfe      	cmp	r3, #254	; 0xfe
 800d6ee:	dc03      	bgt.n	800d6f8 <lwip_listen+0x2c>
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d6f6:	e000      	b.n	800d6fa <lwip_listen+0x2e>
 800d6f8:	23ff      	movs	r3, #255	; 0xff
 800d6fa:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 800d6fc:	69fb      	ldr	r3, [r7, #28]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	683a      	ldr	r2, [r7, #0]
 800d702:	b2d2      	uxtb	r2, r2
 800d704:	4611      	mov	r1, r2
 800d706:	4618      	mov	r0, r3
 800d708:	f7fd fb82 	bl	800ae10 <netconn_listen_with_backlog>
 800d70c:	4603      	mov	r3, r0
 800d70e:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 800d710:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d01e      	beq.n	800d756 <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800d718:	69fb      	ldr	r3, [r7, #28]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d722:	2b10      	cmp	r3, #16
 800d724:	d008      	beq.n	800d738 <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 800d726:	235f      	movs	r3, #95	; 0x5f
 800d728:	60fb      	str	r3, [r7, #12]
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d00f      	beq.n	800d750 <lwip_listen+0x84>
 800d730:	4a0f      	ldr	r2, [pc, #60]	; (800d770 <lwip_listen+0xa4>)
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	6013      	str	r3, [r2, #0]
 800d736:	e00b      	b.n	800d750 <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800d738:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d73c:	4618      	mov	r0, r3
 800d73e:	f7ff fc11 	bl	800cf64 <err_to_errno>
 800d742:	6138      	str	r0, [r7, #16]
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d002      	beq.n	800d750 <lwip_listen+0x84>
 800d74a:	4a09      	ldr	r2, [pc, #36]	; (800d770 <lwip_listen+0xa4>)
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800d750:	f04f 33ff 	mov.w	r3, #4294967295
 800d754:	e008      	b.n	800d768 <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 800d756:	2300      	movs	r3, #0
 800d758:	617b      	str	r3, [r7, #20]
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d002      	beq.n	800d766 <lwip_listen+0x9a>
 800d760:	4a03      	ldr	r2, [pc, #12]	; (800d770 <lwip_listen+0xa4>)
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800d766:	2300      	movs	r3, #0
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3720      	adds	r7, #32
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	2000898c 	.word	0x2000898c

0800d774 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b08c      	sub	sp, #48	; 0x30
 800d778:	af00      	add	r7, sp, #0
 800d77a:	60f8      	str	r0, [r7, #12]
 800d77c:	60b9      	str	r1, [r7, #8]
 800d77e:	607a      	str	r2, [r7, #4]
 800d780:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800d782:	2308      	movs	r3, #8
 800d784:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 800d788:	2300      	movs	r3, #0
 800d78a:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	db01      	blt.n	800d796 <lwip_recv_tcp+0x22>
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	e001      	b.n	800d79a <lwip_recv_tcp+0x26>
 800d796:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d79a:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d106      	bne.n	800d7b0 <lwip_recv_tcp+0x3c>
 800d7a2:	4b74      	ldr	r3, [pc, #464]	; (800d974 <lwip_recv_tcp+0x200>)
 800d7a4:	f240 329e 	movw	r2, #926	; 0x39e
 800d7a8:	4973      	ldr	r1, [pc, #460]	; (800d978 <lwip_recv_tcp+0x204>)
 800d7aa:	4874      	ldr	r0, [pc, #464]	; (800d97c <lwip_recv_tcp+0x208>)
 800d7ac:	f012 f85c 	bl	801f868 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	781b      	ldrb	r3, [r3, #0]
 800d7b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d7ba:	2b10      	cmp	r3, #16
 800d7bc:	d006      	beq.n	800d7cc <lwip_recv_tcp+0x58>
 800d7be:	4b6d      	ldr	r3, [pc, #436]	; (800d974 <lwip_recv_tcp+0x200>)
 800d7c0:	f240 329f 	movw	r2, #927	; 0x39f
 800d7c4:	496e      	ldr	r1, [pc, #440]	; (800d980 <lwip_recv_tcp+0x20c>)
 800d7c6:	486d      	ldr	r0, [pc, #436]	; (800d97c <lwip_recv_tcp+0x208>)
 800d7c8:	f012 f84e 	bl	801f868 <iprintf>

  if (flags & MSG_DONTWAIT) {
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	f003 0308 	and.w	r3, r3, #8
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d005      	beq.n	800d7e2 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800d7d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7da:	f043 0304 	orr.w	r3, r3, #4
 800d7de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	685b      	ldr	r3, [r3, #4]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d003      	beq.n	800d7f2 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	685b      	ldr	r3, [r3, #4]
 800d7ee:	617b      	str	r3, [r7, #20]
 800d7f0:	e036      	b.n	800d860 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d7fa:	f107 0114 	add.w	r1, r7, #20
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7fd fd68 	bl	800b2d4 <netconn_recv_tcp_pbuf_flags>
 800d804:	4603      	mov	r3, r0
 800d806:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800d80a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d019      	beq.n	800d846 <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800d812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d814:	2b00      	cmp	r3, #0
 800d816:	f300 808d 	bgt.w	800d934 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800d81a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800d81e:	4618      	mov	r0, r3
 800d820:	f7ff fba0 	bl	800cf64 <err_to_errno>
 800d824:	61f8      	str	r0, [r7, #28]
 800d826:	69fb      	ldr	r3, [r7, #28]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d002      	beq.n	800d832 <lwip_recv_tcp+0xbe>
 800d82c:	4a55      	ldr	r2, [pc, #340]	; (800d984 <lwip_recv_tcp+0x210>)
 800d82e:	69fb      	ldr	r3, [r7, #28]
 800d830:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800d832:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800d836:	f113 0f0f 	cmn.w	r3, #15
 800d83a:	d101      	bne.n	800d840 <lwip_recv_tcp+0xcc>
          return 0;
 800d83c:	2300      	movs	r3, #0
 800d83e:	e094      	b.n	800d96a <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800d840:	f04f 33ff 	mov.w	r3, #4294967295
 800d844:	e091      	b.n	800d96a <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d106      	bne.n	800d85a <lwip_recv_tcp+0xe6>
 800d84c:	4b49      	ldr	r3, [pc, #292]	; (800d974 <lwip_recv_tcp+0x200>)
 800d84e:	f240 32c5 	movw	r2, #965	; 0x3c5
 800d852:	494d      	ldr	r1, [pc, #308]	; (800d988 <lwip_recv_tcp+0x214>)
 800d854:	4849      	ldr	r0, [pc, #292]	; (800d97c <lwip_recv_tcp+0x208>)
 800d856:	f012 f807 	bl	801f868 <iprintf>
      sock->lastdata.pbuf = p;
 800d85a:	697a      	ldr	r2, [r7, #20]
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	891b      	ldrh	r3, [r3, #8]
 800d864:	461a      	mov	r2, r3
 800d866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d868:	4293      	cmp	r3, r2
 800d86a:	dd03      	ble.n	800d874 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	891b      	ldrh	r3, [r3, #8]
 800d870:	847b      	strh	r3, [r7, #34]	; 0x22
 800d872:	e001      	b.n	800d878 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800d874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d876:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 800d878:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d87c:	4413      	add	r3, r2
 800d87e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d880:	429a      	cmp	r2, r3
 800d882:	dd03      	ble.n	800d88c <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800d884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d886:	b29b      	uxth	r3, r3
 800d888:	43db      	mvns	r3, r3
 800d88a:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800d88c:	6978      	ldr	r0, [r7, #20]
 800d88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d890:	68ba      	ldr	r2, [r7, #8]
 800d892:	18d1      	adds	r1, r2, r3
 800d894:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d896:	2300      	movs	r3, #0
 800d898:	f003 fa70 	bl	8010d7c <pbuf_copy_partial>

    recvd += copylen;
 800d89c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d89e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8a0:	4413      	add	r3, r2
 800d8a2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800d8a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	da06      	bge.n	800d8ba <lwip_recv_tcp+0x146>
 800d8ac:	4b31      	ldr	r3, [pc, #196]	; (800d974 <lwip_recv_tcp+0x200>)
 800d8ae:	f240 32dd 	movw	r2, #989	; 0x3dd
 800d8b2:	4936      	ldr	r1, [pc, #216]	; (800d98c <lwip_recv_tcp+0x218>)
 800d8b4:	4831      	ldr	r0, [pc, #196]	; (800d97c <lwip_recv_tcp+0x208>)
 800d8b6:	f011 ffd7 	bl	801f868 <iprintf>
    recv_left -= copylen;
 800d8ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8be:	1ad3      	subs	r3, r2, r3
 800d8c0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	f003 0301 	and.w	r3, r3, #1
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d123      	bne.n	800d914 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	891b      	ldrh	r3, [r3, #8]
 800d8d0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d906      	bls.n	800d8e4 <lwip_recv_tcp+0x170>
 800d8d6:	4b27      	ldr	r3, [pc, #156]	; (800d974 <lwip_recv_tcp+0x200>)
 800d8d8:	f240 32e3 	movw	r2, #995	; 0x3e3
 800d8dc:	492c      	ldr	r1, [pc, #176]	; (800d990 <lwip_recv_tcp+0x21c>)
 800d8de:	4827      	ldr	r0, [pc, #156]	; (800d97c <lwip_recv_tcp+0x208>)
 800d8e0:	f011 ffc2 	bl	801f868 <iprintf>
      if (p->tot_len - copylen > 0) {
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	891b      	ldrh	r3, [r3, #8]
 800d8e8:	461a      	mov	r2, r3
 800d8ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8ec:	1ad3      	subs	r3, r2, r3
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	dd09      	ble.n	800d906 <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d8f6:	4611      	mov	r1, r2
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f003 f806 	bl	801090a <pbuf_free_header>
 800d8fe:	4602      	mov	r2, r0
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	605a      	str	r2, [r3, #4]
 800d904:	e006      	b.n	800d914 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2200      	movs	r2, #0
 800d90a:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	4618      	mov	r0, r3
 800d910:	f003 f82e 	bl	8010970 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800d914:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d918:	f043 0314 	orr.w	r3, r3, #20
 800d91c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800d920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d922:	2b00      	cmp	r3, #0
 800d924:	dd08      	ble.n	800d938 <lwip_recv_tcp+0x1c4>
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	f003 0301 	and.w	r3, r3, #1
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	f43f af58 	beq.w	800d7e2 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800d932:	e001      	b.n	800d938 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800d934:	bf00      	nop
 800d936:	e000      	b.n	800d93a <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800d938:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800d93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	dd0b      	ble.n	800d958 <lwip_recv_tcp+0x1e4>
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	f003 0301 	and.w	r3, r3, #1
 800d946:	2b00      	cmp	r3, #0
 800d948:	d106      	bne.n	800d958 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d950:	4611      	mov	r1, r2
 800d952:	4618      	mov	r0, r3
 800d954:	f7fd fc0c 	bl	800b170 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800d958:	2300      	movs	r3, #0
 800d95a:	61bb      	str	r3, [r7, #24]
 800d95c:	69bb      	ldr	r3, [r7, #24]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d002      	beq.n	800d968 <lwip_recv_tcp+0x1f4>
 800d962:	4a08      	ldr	r2, [pc, #32]	; (800d984 <lwip_recv_tcp+0x210>)
 800d964:	69bb      	ldr	r3, [r7, #24]
 800d966:	6013      	str	r3, [r2, #0]
  return recvd;
 800d968:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3730      	adds	r7, #48	; 0x30
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}
 800d972:	bf00      	nop
 800d974:	08022474 	.word	0x08022474
 800d978:	0802256c 	.word	0x0802256c
 800d97c:	080224c8 	.word	0x080224c8
 800d980:	0802257c 	.word	0x0802257c
 800d984:	2000898c 	.word	0x2000898c
 800d988:	080225a0 	.word	0x080225a0
 800d98c:	080225ac 	.word	0x080225ac
 800d990:	080225d4 	.word	0x080225d4

0800d994 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800d994:	b590      	push	{r4, r7, lr}
 800d996:	b08b      	sub	sp, #44	; 0x2c
 800d998:	af00      	add	r7, sp, #0
 800d99a:	60f8      	str	r0, [r7, #12]
 800d99c:	60b9      	str	r1, [r7, #8]
 800d99e:	603b      	str	r3, [r7, #0]
 800d9a0:	4613      	mov	r3, r2
 800d9a2:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d106      	bne.n	800d9bc <lwip_sock_make_addr+0x28>
 800d9ae:	4b2b      	ldr	r3, [pc, #172]	; (800da5c <lwip_sock_make_addr+0xc8>)
 800d9b0:	f240 4207 	movw	r2, #1031	; 0x407
 800d9b4:	492a      	ldr	r1, [pc, #168]	; (800da60 <lwip_sock_make_addr+0xcc>)
 800d9b6:	482b      	ldr	r0, [pc, #172]	; (800da64 <lwip_sock_make_addr+0xd0>)
 800d9b8:	f011 ff56 	bl	801f868 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d106      	bne.n	800d9d0 <lwip_sock_make_addr+0x3c>
 800d9c2:	4b26      	ldr	r3, [pc, #152]	; (800da5c <lwip_sock_make_addr+0xc8>)
 800d9c4:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800d9c8:	4927      	ldr	r1, [pc, #156]	; (800da68 <lwip_sock_make_addr+0xd4>)
 800d9ca:	4826      	ldr	r0, [pc, #152]	; (800da64 <lwip_sock_make_addr+0xd0>)
 800d9cc:	f011 ff4c 	bl	801f868 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800d9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d106      	bne.n	800d9e4 <lwip_sock_make_addr+0x50>
 800d9d6:	4b21      	ldr	r3, [pc, #132]	; (800da5c <lwip_sock_make_addr+0xc8>)
 800d9d8:	f240 4209 	movw	r2, #1033	; 0x409
 800d9dc:	4923      	ldr	r1, [pc, #140]	; (800da6c <lwip_sock_make_addr+0xd8>)
 800d9de:	4821      	ldr	r0, [pc, #132]	; (800da64 <lwip_sock_make_addr+0xd0>)
 800d9e0:	f011 ff42 	bl	801f868 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800d9e4:	f107 0314 	add.w	r3, r7, #20
 800d9e8:	2210      	movs	r2, #16
 800d9ea:	701a      	strb	r2, [r3, #0]
 800d9ec:	f107 0314 	add.w	r3, r7, #20
 800d9f0:	2202      	movs	r2, #2
 800d9f2:	705a      	strb	r2, [r3, #1]
 800d9f4:	f107 0414 	add.w	r4, r7, #20
 800d9f8:	88fb      	ldrh	r3, [r7, #6]
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f001 f8a8 	bl	800eb50 <lwip_htons>
 800da00:	4603      	mov	r3, r0
 800da02:	8063      	strh	r3, [r4, #2]
 800da04:	f107 0314 	add.w	r3, r7, #20
 800da08:	68ba      	ldr	r2, [r7, #8]
 800da0a:	6812      	ldr	r2, [r2, #0]
 800da0c:	605a      	str	r2, [r3, #4]
 800da0e:	f107 0314 	add.w	r3, r7, #20
 800da12:	3308      	adds	r3, #8
 800da14:	2208      	movs	r2, #8
 800da16:	2100      	movs	r1, #0
 800da18:	4618      	mov	r0, r3
 800da1a:	f011 f8af 	bl	801eb7c <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800da1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	7d3a      	ldrb	r2, [r7, #20]
 800da24:	4293      	cmp	r3, r2
 800da26:	d202      	bcs.n	800da2e <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800da28:	2301      	movs	r3, #1
 800da2a:	627b      	str	r3, [r7, #36]	; 0x24
 800da2c:	e008      	b.n	800da40 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800da2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	7d3a      	ldrb	r2, [r7, #20]
 800da34:	4293      	cmp	r3, r2
 800da36:	d903      	bls.n	800da40 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800da38:	7d3b      	ldrb	r3, [r7, #20]
 800da3a:	461a      	mov	r2, r3
 800da3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da3e:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800da40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da42:	681a      	ldr	r2, [r3, #0]
 800da44:	f107 0314 	add.w	r3, r7, #20
 800da48:	4619      	mov	r1, r3
 800da4a:	6838      	ldr	r0, [r7, #0]
 800da4c:	f011 f86e 	bl	801eb2c <memcpy>
  return truncated;
 800da50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800da52:	4618      	mov	r0, r3
 800da54:	372c      	adds	r7, #44	; 0x2c
 800da56:	46bd      	mov	sp, r7
 800da58:	bd90      	pop	{r4, r7, pc}
 800da5a:	bf00      	nop
 800da5c:	08022474 	.word	0x08022474
 800da60:	080225e4 	.word	0x080225e4
 800da64:	080224c8 	.word	0x080224c8
 800da68:	080225f8 	.word	0x080225f8
 800da6c:	08022608 	.word	0x08022608

0800da70 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b088      	sub	sp, #32
 800da74:	af02      	add	r7, sp, #8
 800da76:	60f8      	str	r0, [r7, #12]
 800da78:	60b9      	str	r1, [r7, #8]
 800da7a:	607a      	str	r2, [r7, #4]
 800da7c:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d101      	bne.n	800da88 <lwip_recv_tcp_from+0x18>
    return 0;
 800da84:	2300      	movs	r3, #0
 800da86:	e021      	b.n	800dacc <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d01d      	beq.n	800daca <lwip_recv_tcp_from+0x5a>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d01a      	beq.n	800daca <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	6818      	ldr	r0, [r3, #0]
 800da98:	f107 0216 	add.w	r2, r7, #22
 800da9c:	f107 0110 	add.w	r1, r7, #16
 800daa0:	2300      	movs	r3, #0
 800daa2:	f7fd f92b 	bl	800acfc <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d00e      	beq.n	800daca <lwip_recv_tcp_from+0x5a>
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d00b      	beq.n	800daca <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	6818      	ldr	r0, [r3, #0]
 800dab6:	8afa      	ldrh	r2, [r7, #22]
 800dab8:	f107 0110 	add.w	r1, r7, #16
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	9300      	str	r3, [sp, #0]
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	f7ff ff67 	bl	800d994 <lwip_sock_make_addr>
 800dac6:	4603      	mov	r3, r0
 800dac8:	e000      	b.n	800dacc <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800daca:	2300      	movs	r3, #0
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3718      	adds	r7, #24
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800dad4:	b590      	push	{r4, r7, lr}
 800dad6:	b08d      	sub	sp, #52	; 0x34
 800dad8:	af02      	add	r7, sp, #8
 800dada:	60f8      	str	r0, [r7, #12]
 800dadc:	60b9      	str	r1, [r7, #8]
 800dade:	607a      	str	r2, [r7, #4]
 800dae0:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	689b      	ldr	r3, [r3, #8]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d10d      	bne.n	800db06 <lwip_recvfrom_udp_raw+0x32>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	68db      	ldr	r3, [r3, #12]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	dd09      	ble.n	800db06 <lwip_recvfrom_udp_raw+0x32>
 800daf2:	4b5e      	ldr	r3, [pc, #376]	; (800dc6c <lwip_recvfrom_udp_raw+0x198>)
 800daf4:	f240 4249 	movw	r2, #1097	; 0x449
 800daf8:	495d      	ldr	r1, [pc, #372]	; (800dc70 <lwip_recvfrom_udp_raw+0x19c>)
 800dafa:	485e      	ldr	r0, [pc, #376]	; (800dc74 <lwip_recvfrom_udp_raw+0x1a0>)
 800dafc:	f011 feb4 	bl	801f868 <iprintf>
 800db00:	f06f 030f 	mvn.w	r3, #15
 800db04:	e0ad      	b.n	800dc62 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	f003 0308 	and.w	r3, r3, #8
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d003      	beq.n	800db18 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800db10:	2304      	movs	r3, #4
 800db12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800db16:	e002      	b.n	800db1e <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800db18:	2300      	movs	r3, #0
 800db1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	685b      	ldr	r3, [r3, #4]
 800db22:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d11e      	bne.n	800db68 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800db32:	f107 0110 	add.w	r1, r7, #16
 800db36:	4618      	mov	r0, r3
 800db38:	f7fd fbf8 	bl	800b32c <netconn_recv_udp_raw_netbuf_flags>
 800db3c:	4603      	mov	r3, r0
 800db3e:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800db40:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d002      	beq.n	800db4e <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800db48:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800db4c:	e089      	b.n	800dc62 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d106      	bne.n	800db62 <lwip_recvfrom_udp_raw+0x8e>
 800db54:	4b45      	ldr	r3, [pc, #276]	; (800dc6c <lwip_recvfrom_udp_raw+0x198>)
 800db56:	f240 425e 	movw	r2, #1118	; 0x45e
 800db5a:	4947      	ldr	r1, [pc, #284]	; (800dc78 <lwip_recvfrom_udp_raw+0x1a4>)
 800db5c:	4845      	ldr	r0, [pc, #276]	; (800dc74 <lwip_recvfrom_udp_raw+0x1a0>)
 800db5e:	f011 fe83 	bl	801f868 <iprintf>
    sock->lastdata.netbuf = buf;
 800db62:	693a      	ldr	r2, [r7, #16]
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800db68:	693b      	ldr	r3, [r7, #16]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	891b      	ldrh	r3, [r3, #8]
 800db6e:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800db70:	2300      	movs	r3, #0
 800db72:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800db74:	2300      	movs	r3, #0
 800db76:	61fb      	str	r3, [r7, #28]
 800db78:	e029      	b.n	800dbce <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800db7a:	8b3a      	ldrh	r2, [r7, #24]
 800db7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db7e:	1ad3      	subs	r3, r2, r3
 800db80:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	689a      	ldr	r2, [r3, #8]
 800db86:	69fb      	ldr	r3, [r7, #28]
 800db88:	00db      	lsls	r3, r3, #3
 800db8a:	4413      	add	r3, r2
 800db8c:	685a      	ldr	r2, [r3, #4]
 800db8e:	8afb      	ldrh	r3, [r7, #22]
 800db90:	429a      	cmp	r2, r3
 800db92:	d902      	bls.n	800db9a <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800db94:	8afb      	ldrh	r3, [r7, #22]
 800db96:	84bb      	strh	r3, [r7, #36]	; 0x24
 800db98:	e006      	b.n	800dba8 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	689a      	ldr	r2, [r3, #8]
 800db9e:	69fb      	ldr	r3, [r7, #28]
 800dba0:	00db      	lsls	r3, r3, #3
 800dba2:	4413      	add	r3, r2
 800dba4:	685b      	ldr	r3, [r3, #4]
 800dba6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	6818      	ldr	r0, [r3, #0]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	689a      	ldr	r2, [r3, #8]
 800dbb0:	69fb      	ldr	r3, [r7, #28]
 800dbb2:	00db      	lsls	r3, r3, #3
 800dbb4:	4413      	add	r3, r2
 800dbb6:	6819      	ldr	r1, [r3, #0]
 800dbb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dbba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dbbc:	f003 f8de 	bl	8010d7c <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800dbc0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dbc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbc4:	4413      	add	r3, r2
 800dbc6:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800dbc8:	69fb      	ldr	r3, [r7, #28]
 800dbca:	3301      	adds	r3, #1
 800dbcc:	61fb      	str	r3, [r7, #28]
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	68db      	ldr	r3, [r3, #12]
 800dbd2:	69fa      	ldr	r2, [r7, #28]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	da03      	bge.n	800dbe0 <lwip_recvfrom_udp_raw+0x10c>
 800dbd8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dbda:	8b3b      	ldrh	r3, [r7, #24]
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d3cc      	bcc.n	800db7a <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d01a      	beq.n	800dc1e <lwip_recvfrom_udp_raw+0x14a>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	685b      	ldr	r3, [r3, #4]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d016      	beq.n	800dc1e <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d012      	beq.n	800dc1e <lwip_recvfrom_udp_raw+0x14a>
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	685b      	ldr	r3, [r3, #4]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d00e      	beq.n	800dc1e <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	6818      	ldr	r0, [r3, #0]
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	f103 0108 	add.w	r1, r3, #8
 800dc0a:	693b      	ldr	r3, [r7, #16]
 800dc0c:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	3304      	adds	r3, #4
 800dc16:	9300      	str	r3, [sp, #0]
 800dc18:	4623      	mov	r3, r4
 800dc1a:	f7ff febb 	bl	800d994 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2200      	movs	r2, #0
 800dc22:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	691b      	ldr	r3, [r3, #16]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d007      	beq.n	800dc3c <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800dc30:	7d7b      	ldrb	r3, [r7, #21]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d102      	bne.n	800dc3c <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2200      	movs	r2, #0
 800dc3a:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	f003 0301 	and.w	r3, r3, #1
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d106      	bne.n	800dc54 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7ff f9a6 	bl	800cfa0 <netbuf_delete>
  }
  if (datagram_len) {
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d002      	beq.n	800dc60 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	8b3a      	ldrh	r2, [r7, #24]
 800dc5e:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800dc60:	2300      	movs	r3, #0
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	372c      	adds	r7, #44	; 0x2c
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd90      	pop	{r4, r7, pc}
 800dc6a:	bf00      	nop
 800dc6c:	08022474 	.word	0x08022474
 800dc70:	08022618 	.word	0x08022618
 800dc74:	080224c8 	.word	0x080224c8
 800dc78:	08022644 	.word	0x08022644

0800dc7c <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b096      	sub	sp, #88	; 0x58
 800dc80:	af02      	add	r7, sp, #8
 800dc82:	60f8      	str	r0, [r7, #12]
 800dc84:	60b9      	str	r1, [r7, #8]
 800dc86:	607a      	str	r2, [r7, #4]
 800dc88:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800dc8a:	68f8      	ldr	r0, [r7, #12]
 800dc8c:	f7ff fa58 	bl	800d140 <get_socket>
 800dc90:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800dc92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d102      	bne.n	800dc9e <lwip_recvfrom+0x22>
    return -1;
 800dc98:	f04f 33ff 	mov.w	r3, #4294967295
 800dc9c:	e078      	b.n	800dd90 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800dc9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dca8:	2b10      	cmp	r3, #16
 800dcaa:	d112      	bne.n	800dcd2 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	68b9      	ldr	r1, [r7, #8]
 800dcb2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dcb4:	f7ff fd5e 	bl	800d774 <lwip_recv_tcp>
 800dcb8:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800dcba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcbc:	9301      	str	r3, [sp, #4]
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	9300      	str	r3, [sp, #0]
 800dcc2:	4b35      	ldr	r3, [pc, #212]	; (800dd98 <lwip_recvfrom+0x11c>)
 800dcc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dcc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dcc8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dcca:	f7ff fed1 	bl	800da70 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800dcce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcd0:	e05e      	b.n	800dd90 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800dcde:	2300      	movs	r3, #0
 800dce0:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800dce2:	2300      	movs	r3, #0
 800dce4:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800dce6:	2300      	movs	r3, #0
 800dce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800dcea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dcee:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800dcf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dcf6:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800dcf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d002      	beq.n	800dd04 <lwip_recvfrom+0x88>
 800dcfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	e000      	b.n	800dd06 <lwip_recvfrom+0x8a>
 800dd04:	2300      	movs	r3, #0
 800dd06:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800dd08:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800dd0c:	f107 0214 	add.w	r2, r7, #20
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	9300      	str	r3, [sp, #0]
 800dd14:	460b      	mov	r3, r1
 800dd16:	6839      	ldr	r1, [r7, #0]
 800dd18:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dd1a:	f7ff fedb 	bl	800dad4 <lwip_recvfrom_udp_raw>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800dd24:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d00e      	beq.n	800dd4a <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800dd2c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7ff f917 	bl	800cf64 <err_to_errno>
 800dd36:	63f8      	str	r0, [r7, #60]	; 0x3c
 800dd38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d002      	beq.n	800dd44 <lwip_recvfrom+0xc8>
 800dd3e:	4a17      	ldr	r2, [pc, #92]	; (800dd9c <lwip_recvfrom+0x120>)
 800dd40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd42:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800dd44:	f04f 33ff 	mov.w	r3, #4294967295
 800dd48:	e022      	b.n	800dd90 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800dd4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dd4c:	461a      	mov	r2, r3
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	4293      	cmp	r3, r2
 800dd52:	bf28      	it	cs
 800dd54:	4613      	movcs	r3, r2
 800dd56:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d206      	bcs.n	800dd6c <lwip_recvfrom+0xf0>
 800dd5e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dd60:	461a      	mov	r2, r3
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	4293      	cmp	r3, r2
 800dd66:	bf28      	it	cs
 800dd68:	4613      	movcs	r3, r2
 800dd6a:	e001      	b.n	800dd70 <lwip_recvfrom+0xf4>
 800dd6c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800dd70:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800dd72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d002      	beq.n	800dd7e <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800dd78:	69ba      	ldr	r2, [r7, #24]
 800dd7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd7c:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800dd7e:	2300      	movs	r3, #0
 800dd80:	643b      	str	r3, [r7, #64]	; 0x40
 800dd82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d002      	beq.n	800dd8e <lwip_recvfrom+0x112>
 800dd88:	4a04      	ldr	r2, [pc, #16]	; (800dd9c <lwip_recvfrom+0x120>)
 800dd8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd8c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800dd8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3750      	adds	r7, #80	; 0x50
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}
 800dd98:	08022650 	.word	0x08022650
 800dd9c:	2000898c 	.word	0x2000898c

0800dda0 <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b086      	sub	sp, #24
 800dda4:	af02      	add	r7, sp, #8
 800dda6:	60f8      	str	r0, [r7, #12]
 800dda8:	60b9      	str	r1, [r7, #8]
 800ddaa:	607a      	str	r2, [r7, #4]
 800ddac:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 800ddae:	2300      	movs	r3, #0
 800ddb0:	9301      	str	r3, [sp, #4]
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	9300      	str	r3, [sp, #0]
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	687a      	ldr	r2, [r7, #4]
 800ddba:	68b9      	ldr	r1, [r7, #8]
 800ddbc:	68f8      	ldr	r0, [r7, #12]
 800ddbe:	f7ff ff5d 	bl	800dc7c <lwip_recvfrom>
 800ddc2:	4603      	mov	r3, r0
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3710      	adds	r7, #16
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}

0800ddcc <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b08a      	sub	sp, #40	; 0x28
 800ddd0:	af02      	add	r7, sp, #8
 800ddd2:	60f8      	str	r0, [r7, #12]
 800ddd4:	60b9      	str	r1, [r7, #8]
 800ddd6:	607a      	str	r2, [r7, #4]
 800ddd8:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800ddda:	68f8      	ldr	r0, [r7, #12]
 800dddc:	f7ff f9b0 	bl	800d140 <get_socket>
 800dde0:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800dde2:	69fb      	ldr	r3, [r7, #28]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d102      	bne.n	800ddee <lwip_send+0x22>
    return -1;
 800dde8:	f04f 33ff 	mov.w	r3, #4294967295
 800ddec:	e046      	b.n	800de7c <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800ddee:	69fb      	ldr	r3, [r7, #28]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	781b      	ldrb	r3, [r3, #0]
 800ddf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ddf8:	2b10      	cmp	r3, #16
 800ddfa:	d00b      	beq.n	800de14 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	9301      	str	r3, [sp, #4]
 800de00:	2300      	movs	r3, #0
 800de02:	9300      	str	r3, [sp, #0]
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	687a      	ldr	r2, [r7, #4]
 800de08:	68b9      	ldr	r1, [r7, #8]
 800de0a:	68f8      	ldr	r0, [r7, #12]
 800de0c:	f000 f83c 	bl	800de88 <lwip_sendto>
 800de10:	4603      	mov	r3, r0
 800de12:	e033      	b.n	800de7c <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d001      	beq.n	800de22 <lwip_send+0x56>
 800de1e:	2203      	movs	r2, #3
 800de20:	e000      	b.n	800de24 <lwip_send+0x58>
 800de22:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	105b      	asrs	r3, r3, #1
 800de28:	b25b      	sxtb	r3, r3
 800de2a:	f003 0304 	and.w	r3, r3, #4
 800de2e:	b25b      	sxtb	r3, r3
 800de30:	4313      	orrs	r3, r2
 800de32:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800de34:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800de36:	2300      	movs	r3, #0
 800de38:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800de3a:	69fb      	ldr	r3, [r7, #28]
 800de3c:	6818      	ldr	r0, [r3, #0]
 800de3e:	7efa      	ldrb	r2, [r7, #27]
 800de40:	f107 0310 	add.w	r3, r7, #16
 800de44:	9300      	str	r3, [sp, #0]
 800de46:	4613      	mov	r3, r2
 800de48:	687a      	ldr	r2, [r7, #4]
 800de4a:	68b9      	ldr	r1, [r7, #8]
 800de4c:	f7fd fac8 	bl	800b3e0 <netconn_write_partly>
 800de50:	4603      	mov	r3, r0
 800de52:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800de54:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800de58:	4618      	mov	r0, r3
 800de5a:	f7ff f883 	bl	800cf64 <err_to_errno>
 800de5e:	6178      	str	r0, [r7, #20]
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d002      	beq.n	800de6c <lwip_send+0xa0>
 800de66:	4a07      	ldr	r2, [pc, #28]	; (800de84 <lwip_send+0xb8>)
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800de6c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d101      	bne.n	800de78 <lwip_send+0xac>
 800de74:	693b      	ldr	r3, [r7, #16]
 800de76:	e001      	b.n	800de7c <lwip_send+0xb0>
 800de78:	f04f 33ff 	mov.w	r3, #4294967295
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3720      	adds	r7, #32
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}
 800de84:	2000898c 	.word	0x2000898c

0800de88 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b08e      	sub	sp, #56	; 0x38
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	607a      	str	r2, [r7, #4]
 800de94:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800de96:	68f8      	ldr	r0, [r7, #12]
 800de98:	f7ff f952 	bl	800d140 <get_socket>
 800de9c:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800de9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d102      	bne.n	800deaa <lwip_sendto+0x22>
    return -1;
 800dea4:	f04f 33ff 	mov.w	r3, #4294967295
 800dea8:	e093      	b.n	800dfd2 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800deaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800deb4:	2b10      	cmp	r3, #16
 800deb6:	d107      	bne.n	800dec8 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	687a      	ldr	r2, [r7, #4]
 800debc:	68b9      	ldr	r1, [r7, #8]
 800debe:	68f8      	ldr	r0, [r7, #12]
 800dec0:	f7ff ff84 	bl	800ddcc <lwip_send>
 800dec4:	4603      	mov	r3, r0
 800dec6:	e084      	b.n	800dfd2 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dece:	d30a      	bcc.n	800dee6 <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800ded0:	235a      	movs	r3, #90	; 0x5a
 800ded2:	623b      	str	r3, [r7, #32]
 800ded4:	6a3b      	ldr	r3, [r7, #32]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d002      	beq.n	800dee0 <lwip_sendto+0x58>
 800deda:	4a40      	ldr	r2, [pc, #256]	; (800dfdc <lwip_sendto+0x154>)
 800dedc:	6a3b      	ldr	r3, [r7, #32]
 800dede:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800dee0:	f04f 33ff 	mov.w	r3, #4294967295
 800dee4:	e075      	b.n	800dfd2 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800deea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800deec:	2b00      	cmp	r3, #0
 800deee:	d102      	bne.n	800def6 <lwip_sendto+0x6e>
 800def0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800def2:	2b00      	cmp	r3, #0
 800def4:	d023      	beq.n	800df3e <lwip_sendto+0xb6>
 800def6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800def8:	2b10      	cmp	r3, #16
 800defa:	d10b      	bne.n	800df14 <lwip_sendto+0x8c>
 800defc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800defe:	2b00      	cmp	r3, #0
 800df00:	d008      	beq.n	800df14 <lwip_sendto+0x8c>
 800df02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df04:	785b      	ldrb	r3, [r3, #1]
 800df06:	2b02      	cmp	r3, #2
 800df08:	d104      	bne.n	800df14 <lwip_sendto+0x8c>
 800df0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df0c:	f003 0303 	and.w	r3, r3, #3
 800df10:	2b00      	cmp	r3, #0
 800df12:	d014      	beq.n	800df3e <lwip_sendto+0xb6>
 800df14:	4b32      	ldr	r3, [pc, #200]	; (800dfe0 <lwip_sendto+0x158>)
 800df16:	f240 6252 	movw	r2, #1618	; 0x652
 800df1a:	4932      	ldr	r1, [pc, #200]	; (800dfe4 <lwip_sendto+0x15c>)
 800df1c:	4832      	ldr	r0, [pc, #200]	; (800dfe8 <lwip_sendto+0x160>)
 800df1e:	f011 fca3 	bl	801f868 <iprintf>
 800df22:	f06f 000f 	mvn.w	r0, #15
 800df26:	f7ff f81d 	bl	800cf64 <err_to_errno>
 800df2a:	62b8      	str	r0, [r7, #40]	; 0x28
 800df2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d002      	beq.n	800df38 <lwip_sendto+0xb0>
 800df32:	4a2a      	ldr	r2, [pc, #168]	; (800dfdc <lwip_sendto+0x154>)
 800df34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df36:	6013      	str	r3, [r2, #0]
 800df38:	f04f 33ff 	mov.w	r3, #4294967295
 800df3c:	e049      	b.n	800dfd2 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800df3e:	2300      	movs	r3, #0
 800df40:	617b      	str	r3, [r7, #20]
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800df46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d00a      	beq.n	800df62 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800df4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df4e:	685b      	ldr	r3, [r3, #4]
 800df50:	61bb      	str	r3, [r7, #24]
 800df52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df54:	885b      	ldrh	r3, [r3, #2]
 800df56:	4618      	mov	r0, r3
 800df58:	f000 fdfa 	bl	800eb50 <lwip_htons>
 800df5c:	4603      	mov	r3, r0
 800df5e:	86bb      	strh	r3, [r7, #52]	; 0x34
 800df60:	e003      	b.n	800df6a <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800df62:	2300      	movs	r3, #0
 800df64:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800df66:	2300      	movs	r3, #0
 800df68:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800df6a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800df6c:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800df6e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800df70:	f107 0310 	add.w	r3, r7, #16
 800df74:	68b9      	ldr	r1, [r7, #8]
 800df76:	4618      	mov	r0, r3
 800df78:	f7ff f85a 	bl	800d030 <netbuf_ref>
 800df7c:	4603      	mov	r3, r0
 800df7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800df82:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800df86:	2b00      	cmp	r3, #0
 800df88:	d10a      	bne.n	800dfa0 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800df8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f107 0210 	add.w	r2, r7, #16
 800df92:	4611      	mov	r1, r2
 800df94:	4618      	mov	r0, r3
 800df96:	f7fd f9f5 	bl	800b384 <netconn_send>
 800df9a:	4603      	mov	r3, r0
 800df9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800dfa0:	f107 0310 	add.w	r3, r7, #16
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f7ff f81b 	bl	800cfe0 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800dfaa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f7fe ffd8 	bl	800cf64 <err_to_errno>
 800dfb4:	6278      	str	r0, [r7, #36]	; 0x24
 800dfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d002      	beq.n	800dfc2 <lwip_sendto+0x13a>
 800dfbc:	4a07      	ldr	r2, [pc, #28]	; (800dfdc <lwip_sendto+0x154>)
 800dfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc0:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800dfc2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d101      	bne.n	800dfce <lwip_sendto+0x146>
 800dfca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dfcc:	e001      	b.n	800dfd2 <lwip_sendto+0x14a>
 800dfce:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3738      	adds	r7, #56	; 0x38
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
 800dfda:	bf00      	nop
 800dfdc:	2000898c 	.word	0x2000898c
 800dfe0:	08022474 	.word	0x08022474
 800dfe4:	08022754 	.word	0x08022754
 800dfe8:	080224c8 	.word	0x080224c8

0800dfec <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b086      	sub	sp, #24
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	60f8      	str	r0, [r7, #12]
 800dff4:	60b9      	str	r1, [r7, #8]
 800dff6:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	2b03      	cmp	r3, #3
 800dffc:	d009      	beq.n	800e012 <lwip_socket+0x26>
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	2b03      	cmp	r3, #3
 800e002:	dc23      	bgt.n	800e04c <lwip_socket+0x60>
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	2b01      	cmp	r3, #1
 800e008:	d019      	beq.n	800e03e <lwip_socket+0x52>
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	2b02      	cmp	r3, #2
 800e00e:	d009      	beq.n	800e024 <lwip_socket+0x38>
 800e010:	e01c      	b.n	800e04c <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	b2db      	uxtb	r3, r3
 800e016:	4a22      	ldr	r2, [pc, #136]	; (800e0a0 <lwip_socket+0xb4>)
 800e018:	4619      	mov	r1, r3
 800e01a:	2040      	movs	r0, #64	; 0x40
 800e01c:	f7fc fdb4 	bl	800ab88 <netconn_new_with_proto_and_callback>
 800e020:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800e022:	e019      	b.n	800e058 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2b88      	cmp	r3, #136	; 0x88
 800e028:	d101      	bne.n	800e02e <lwip_socket+0x42>
 800e02a:	2321      	movs	r3, #33	; 0x21
 800e02c:	e000      	b.n	800e030 <lwip_socket+0x44>
 800e02e:	2320      	movs	r3, #32
 800e030:	4a1b      	ldr	r2, [pc, #108]	; (800e0a0 <lwip_socket+0xb4>)
 800e032:	2100      	movs	r1, #0
 800e034:	4618      	mov	r0, r3
 800e036:	f7fc fda7 	bl	800ab88 <netconn_new_with_proto_and_callback>
 800e03a:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800e03c:	e00c      	b.n	800e058 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800e03e:	4a18      	ldr	r2, [pc, #96]	; (800e0a0 <lwip_socket+0xb4>)
 800e040:	2100      	movs	r1, #0
 800e042:	2010      	movs	r0, #16
 800e044:	f7fc fda0 	bl	800ab88 <netconn_new_with_proto_and_callback>
 800e048:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800e04a:	e005      	b.n	800e058 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800e04c:	4b15      	ldr	r3, [pc, #84]	; (800e0a4 <lwip_socket+0xb8>)
 800e04e:	2216      	movs	r2, #22
 800e050:	601a      	str	r2, [r3, #0]
      return -1;
 800e052:	f04f 33ff 	mov.w	r3, #4294967295
 800e056:	e01e      	b.n	800e096 <lwip_socket+0xaa>
  }

  if (!conn) {
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d105      	bne.n	800e06a <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800e05e:	4b11      	ldr	r3, [pc, #68]	; (800e0a4 <lwip_socket+0xb8>)
 800e060:	2269      	movs	r2, #105	; 0x69
 800e062:	601a      	str	r2, [r3, #0]
    return -1;
 800e064:	f04f 33ff 	mov.w	r3, #4294967295
 800e068:	e015      	b.n	800e096 <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800e06a:	2100      	movs	r1, #0
 800e06c:	6978      	ldr	r0, [r7, #20]
 800e06e:	f7ff f87f 	bl	800d170 <alloc_socket>
 800e072:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800e074:	693b      	ldr	r3, [r7, #16]
 800e076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e07a:	d108      	bne.n	800e08e <lwip_socket+0xa2>
    netconn_delete(conn);
 800e07c:	6978      	ldr	r0, [r7, #20]
 800e07e:	f7fc fe21 	bl	800acc4 <netconn_delete>
    set_errno(ENFILE);
 800e082:	4b08      	ldr	r3, [pc, #32]	; (800e0a4 <lwip_socket+0xb8>)
 800e084:	2217      	movs	r2, #23
 800e086:	601a      	str	r2, [r3, #0]
    return -1;
 800e088:	f04f 33ff 	mov.w	r3, #4294967295
 800e08c:	e003      	b.n	800e096 <lwip_socket+0xaa>
  }
  conn->socket = i;
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	693a      	ldr	r2, [r7, #16]
 800e092:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800e094:	693b      	ldr	r3, [r7, #16]
}
 800e096:	4618      	mov	r0, r3
 800e098:	3718      	adds	r7, #24
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
 800e09e:	bf00      	nop
 800e0a0:	0800e131 	.word	0x0800e131
 800e0a4:	2000898c 	.word	0x2000898c

0800e0a8 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b087      	sub	sp, #28
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	60f8      	str	r0, [r7, #12]
 800e0b0:	60b9      	str	r1, [r7, #8]
 800e0b2:	607a      	str	r2, [r7, #4]
 800e0b4:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	617b      	str	r3, [r7, #20]
 800e0ba:	e02c      	b.n	800e116 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	695a      	ldr	r2, [r3, #20]
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	00db      	lsls	r3, r3, #3
 800e0c4:	4413      	add	r3, r2
 800e0c6:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	68ba      	ldr	r2, [r7, #8]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d11e      	bne.n	800e110 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d009      	beq.n	800e0ec <lwip_poll_should_wake+0x44>
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e0de:	b29b      	uxth	r3, r3
 800e0e0:	f003 0301 	and.w	r3, r3, #1
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d001      	beq.n	800e0ec <lwip_poll_should_wake+0x44>
        return 1;
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	e01a      	b.n	800e122 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d009      	beq.n	800e106 <lwip_poll_should_wake+0x5e>
 800e0f2:	693b      	ldr	r3, [r7, #16]
 800e0f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e0f8:	b29b      	uxth	r3, r3
 800e0fa:	f003 0302 	and.w	r3, r3, #2
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d001      	beq.n	800e106 <lwip_poll_should_wake+0x5e>
        return 1;
 800e102:	2301      	movs	r3, #1
 800e104:	e00d      	b.n	800e122 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800e106:	6a3b      	ldr	r3, [r7, #32]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d001      	beq.n	800e110 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800e10c:	2301      	movs	r3, #1
 800e10e:	e008      	b.n	800e122 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	3301      	adds	r3, #1
 800e114:	617b      	str	r3, [r7, #20]
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	699b      	ldr	r3, [r3, #24]
 800e11a:	697a      	ldr	r2, [r7, #20]
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d3cd      	bcc.n	800e0bc <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800e120:	2300      	movs	r3, #0
}
 800e122:	4618      	mov	r0, r3
 800e124:	371c      	adds	r7, #28
 800e126:	46bd      	mov	sp, r7
 800e128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12c:	4770      	bx	lr
	...

0800e130 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b08a      	sub	sp, #40	; 0x28
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
 800e138:	460b      	mov	r3, r1
 800e13a:	70fb      	strb	r3, [r7, #3]
 800e13c:	4613      	mov	r3, r2
 800e13e:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2b00      	cmp	r3, #0
 800e144:	f000 80a4 	beq.w	800e290 <event_callback+0x160>
    s = conn->socket;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	699b      	ldr	r3, [r3, #24]
 800e14c:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800e14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e150:	2b00      	cmp	r3, #0
 800e152:	da18      	bge.n	800e186 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800e154:	f00e fb76 	bl	801c844 <sys_arch_protect>
 800e158:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	699b      	ldr	r3, [r3, #24]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	da0b      	bge.n	800e17a <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800e162:	78fb      	ldrb	r3, [r7, #3]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d104      	bne.n	800e172 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	699b      	ldr	r3, [r3, #24]
 800e16c:	1e5a      	subs	r2, r3, #1
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800e172:	69f8      	ldr	r0, [r7, #28]
 800e174:	f00e fb74 	bl	801c860 <sys_arch_unprotect>
        return;
 800e178:	e08d      	b.n	800e296 <event_callback+0x166>
      }
      s = conn->socket;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	699b      	ldr	r3, [r3, #24]
 800e17e:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800e180:	69f8      	ldr	r0, [r7, #28]
 800e182:	f00e fb6d 	bl	801c860 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800e186:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e188:	f7fe ffda 	bl	800d140 <get_socket>
 800e18c:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800e18e:	69bb      	ldr	r3, [r7, #24]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d07f      	beq.n	800e294 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800e194:	2301      	movs	r3, #1
 800e196:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800e198:	f00e fb54 	bl	801c844 <sys_arch_protect>
 800e19c:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800e19e:	78fb      	ldrb	r3, [r7, #3]
 800e1a0:	2b04      	cmp	r3, #4
 800e1a2:	d83e      	bhi.n	800e222 <event_callback+0xf2>
 800e1a4:	a201      	add	r2, pc, #4	; (adr r2, 800e1ac <event_callback+0x7c>)
 800e1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1aa:	bf00      	nop
 800e1ac:	0800e1c1 	.word	0x0800e1c1
 800e1b0:	0800e1e3 	.word	0x0800e1e3
 800e1b4:	0800e1fb 	.word	0x0800e1fb
 800e1b8:	0800e20f 	.word	0x0800e20f
 800e1bc:	0800e21b 	.word	0x0800e21b
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800e1c0:	69bb      	ldr	r3, [r7, #24]
 800e1c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e1c6:	b29b      	uxth	r3, r3
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	b29b      	uxth	r3, r3
 800e1cc:	b21a      	sxth	r2, r3
 800e1ce:	69bb      	ldr	r3, [r7, #24]
 800e1d0:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800e1d2:	69bb      	ldr	r3, [r7, #24]
 800e1d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e1d8:	2b01      	cmp	r3, #1
 800e1da:	dd2a      	ble.n	800e232 <event_callback+0x102>
        check_waiters = 0;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	623b      	str	r3, [r7, #32]
      }
      break;
 800e1e0:	e027      	b.n	800e232 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800e1e2:	69bb      	ldr	r3, [r7, #24]
 800e1e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e1e8:	b29b      	uxth	r3, r3
 800e1ea:	3b01      	subs	r3, #1
 800e1ec:	b29b      	uxth	r3, r3
 800e1ee:	b21a      	sxth	r2, r3
 800e1f0:	69bb      	ldr	r3, [r7, #24]
 800e1f2:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	623b      	str	r3, [r7, #32]
      break;
 800e1f8:	e01c      	b.n	800e234 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800e1fa:	69bb      	ldr	r3, [r7, #24]
 800e1fc:	895b      	ldrh	r3, [r3, #10]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d001      	beq.n	800e206 <event_callback+0xd6>
        check_waiters = 0;
 800e202:	2300      	movs	r3, #0
 800e204:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800e206:	69bb      	ldr	r3, [r7, #24]
 800e208:	2201      	movs	r2, #1
 800e20a:	815a      	strh	r2, [r3, #10]
      break;
 800e20c:	e012      	b.n	800e234 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800e20e:	69bb      	ldr	r3, [r7, #24]
 800e210:	2200      	movs	r2, #0
 800e212:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800e214:	2300      	movs	r3, #0
 800e216:	623b      	str	r3, [r7, #32]
      break;
 800e218:	e00c      	b.n	800e234 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800e21a:	69bb      	ldr	r3, [r7, #24]
 800e21c:	2201      	movs	r2, #1
 800e21e:	819a      	strh	r2, [r3, #12]
      break;
 800e220:	e008      	b.n	800e234 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800e222:	4b1e      	ldr	r3, [pc, #120]	; (800e29c <event_callback+0x16c>)
 800e224:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800e228:	491d      	ldr	r1, [pc, #116]	; (800e2a0 <event_callback+0x170>)
 800e22a:	481e      	ldr	r0, [pc, #120]	; (800e2a4 <event_callback+0x174>)
 800e22c:	f011 fb1c 	bl	801f868 <iprintf>
      break;
 800e230:	e000      	b.n	800e234 <event_callback+0x104>
      break;
 800e232:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800e234:	69bb      	ldr	r3, [r7, #24]
 800e236:	7b9b      	ldrb	r3, [r3, #14]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d025      	beq.n	800e288 <event_callback+0x158>
 800e23c:	6a3b      	ldr	r3, [r7, #32]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d022      	beq.n	800e288 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800e242:	69bb      	ldr	r3, [r7, #24]
 800e244:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	bfcc      	ite	gt
 800e24c:	2301      	movgt	r3, #1
 800e24e:	2300      	movle	r3, #0
 800e250:	b2db      	uxtb	r3, r3
 800e252:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800e254:	69bb      	ldr	r3, [r7, #24]
 800e256:	895b      	ldrh	r3, [r3, #10]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	bf14      	ite	ne
 800e25c:	2301      	movne	r3, #1
 800e25e:	2300      	moveq	r3, #0
 800e260:	b2db      	uxtb	r3, r3
 800e262:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800e264:	69bb      	ldr	r3, [r7, #24]
 800e266:	899b      	ldrh	r3, [r3, #12]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	bf14      	ite	ne
 800e26c:	2301      	movne	r3, #1
 800e26e:	2300      	moveq	r3, #0
 800e270:	b2db      	uxtb	r3, r3
 800e272:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800e274:	69f8      	ldr	r0, [r7, #28]
 800e276:	f00e faf3 	bl	801c860 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	693a      	ldr	r2, [r7, #16]
 800e27e:	6979      	ldr	r1, [r7, #20]
 800e280:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e282:	f000 f811 	bl	800e2a8 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800e286:	e006      	b.n	800e296 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800e288:	69f8      	ldr	r0, [r7, #28]
 800e28a:	f00e fae9 	bl	801c860 <sys_arch_unprotect>
 800e28e:	e002      	b.n	800e296 <event_callback+0x166>
    return;
 800e290:	bf00      	nop
 800e292:	e000      	b.n	800e296 <event_callback+0x166>
      return;
 800e294:	bf00      	nop
  }
  done_socket(sock);
}
 800e296:	3728      	adds	r7, #40	; 0x28
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}
 800e29c:	08022474 	.word	0x08022474
 800e2a0:	080227f0 	.word	0x080227f0
 800e2a4:	080224c8 	.word	0x080224c8

0800e2a8 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b088      	sub	sp, #32
 800e2ac:	af02      	add	r7, sp, #8
 800e2ae:	60f8      	str	r0, [r7, #12]
 800e2b0:	60b9      	str	r1, [r7, #8]
 800e2b2:	607a      	str	r2, [r7, #4]
 800e2b4:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800e2b6:	4b3e      	ldr	r3, [pc, #248]	; (800e3b0 <select_check_waiters+0x108>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	617b      	str	r3, [r7, #20]
 800e2bc:	e06f      	b.n	800e39e <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	69db      	ldr	r3, [r3, #28]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d168      	bne.n	800e398 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	695b      	ldr	r3, [r3, #20]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d009      	beq.n	800e2e6 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	9300      	str	r3, [sp, #0]
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	68ba      	ldr	r2, [r7, #8]
 800e2da:	68f9      	ldr	r1, [r7, #12]
 800e2dc:	6978      	ldr	r0, [r7, #20]
 800e2de:	f7ff fee3 	bl	800e0a8 <lwip_poll_should_wake>
 800e2e2:	6138      	str	r0, [r7, #16]
 800e2e4:	e04d      	b.n	800e382 <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d014      	beq.n	800e316 <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	689b      	ldr	r3, [r3, #8]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d010      	beq.n	800e316 <select_check_waiters+0x6e>
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	689b      	ldr	r3, [r3, #8]
 800e2f8:	68fa      	ldr	r2, [r7, #12]
 800e2fa:	0952      	lsrs	r2, r2, #5
 800e2fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e300:	68fa      	ldr	r2, [r7, #12]
 800e302:	f002 021f 	and.w	r2, r2, #31
 800e306:	2101      	movs	r1, #1
 800e308:	fa01 f202 	lsl.w	r2, r1, r2
 800e30c:	4013      	ands	r3, r2
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d001      	beq.n	800e316 <select_check_waiters+0x6e>
            do_signal = 1;
 800e312:	2301      	movs	r3, #1
 800e314:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d017      	beq.n	800e34c <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d114      	bne.n	800e34c <select_check_waiters+0xa4>
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	68db      	ldr	r3, [r3, #12]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d010      	beq.n	800e34c <select_check_waiters+0xa4>
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	68db      	ldr	r3, [r3, #12]
 800e32e:	68fa      	ldr	r2, [r7, #12]
 800e330:	0952      	lsrs	r2, r2, #5
 800e332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e336:	68fa      	ldr	r2, [r7, #12]
 800e338:	f002 021f 	and.w	r2, r2, #31
 800e33c:	2101      	movs	r1, #1
 800e33e:	fa01 f202 	lsl.w	r2, r1, r2
 800e342:	4013      	ands	r3, r2
 800e344:	2b00      	cmp	r3, #0
 800e346:	d001      	beq.n	800e34c <select_check_waiters+0xa4>
            do_signal = 1;
 800e348:	2301      	movs	r3, #1
 800e34a:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d017      	beq.n	800e382 <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d114      	bne.n	800e382 <select_check_waiters+0xda>
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	691b      	ldr	r3, [r3, #16]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d010      	beq.n	800e382 <select_check_waiters+0xda>
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	691b      	ldr	r3, [r3, #16]
 800e364:	68fa      	ldr	r2, [r7, #12]
 800e366:	0952      	lsrs	r2, r2, #5
 800e368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e36c:	68fa      	ldr	r2, [r7, #12]
 800e36e:	f002 021f 	and.w	r2, r2, #31
 800e372:	2101      	movs	r1, #1
 800e374:	fa01 f202 	lsl.w	r2, r1, r2
 800e378:	4013      	ands	r3, r2
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d001      	beq.n	800e382 <select_check_waiters+0xda>
            do_signal = 1;
 800e37e:	2301      	movs	r3, #1
 800e380:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d007      	beq.n	800e398 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	2201      	movs	r2, #1
 800e38c:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800e38e:	697b      	ldr	r3, [r7, #20]
 800e390:	3320      	adds	r3, #32
 800e392:	4618      	mov	r0, r3
 800e394:	f00e f9c0 	bl	801c718 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	617b      	str	r3, [r7, #20]
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d18c      	bne.n	800e2be <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800e3a4:	bf00      	nop
 800e3a6:	bf00      	nop
 800e3a8:	3718      	adds	r7, #24
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	bf00      	nop
 800e3b0:	20001438 	.word	0x20001438

0800e3b4 <lwip_sockopt_to_ipopt>:
}
#endif  /* LWIP_TCPIP_CORE_LOCKING */

static int
lwip_sockopt_to_ipopt(int optname)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b082      	sub	sp, #8
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
  /* Map SO_* values to our internal SOF_* values
   * We should not rely on #defines in socket.h
   * being in sync with ip.h.
   */
  switch (optname) {
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2b20      	cmp	r3, #32
 800e3c0:	d009      	beq.n	800e3d6 <lwip_sockopt_to_ipopt+0x22>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2b20      	cmp	r3, #32
 800e3c6:	dc0c      	bgt.n	800e3e2 <lwip_sockopt_to_ipopt+0x2e>
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2b04      	cmp	r3, #4
 800e3cc:	d007      	beq.n	800e3de <lwip_sockopt_to_ipopt+0x2a>
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2b08      	cmp	r3, #8
 800e3d2:	d002      	beq.n	800e3da <lwip_sockopt_to_ipopt+0x26>
 800e3d4:	e005      	b.n	800e3e2 <lwip_sockopt_to_ipopt+0x2e>
  case SO_BROADCAST:
    return SOF_BROADCAST;
 800e3d6:	2320      	movs	r3, #32
 800e3d8:	e00b      	b.n	800e3f2 <lwip_sockopt_to_ipopt+0x3e>
  case SO_KEEPALIVE:
    return SOF_KEEPALIVE;
 800e3da:	2308      	movs	r3, #8
 800e3dc:	e009      	b.n	800e3f2 <lwip_sockopt_to_ipopt+0x3e>
  case SO_REUSEADDR:
    return SOF_REUSEADDR;
 800e3de:	2304      	movs	r3, #4
 800e3e0:	e007      	b.n	800e3f2 <lwip_sockopt_to_ipopt+0x3e>
  default:
    LWIP_ASSERT("Unknown socket option", 0);
 800e3e2:	4b06      	ldr	r3, [pc, #24]	; (800e3fc <lwip_sockopt_to_ipopt+0x48>)
 800e3e4:	f640 3239 	movw	r2, #2873	; 0xb39
 800e3e8:	4905      	ldr	r1, [pc, #20]	; (800e400 <lwip_sockopt_to_ipopt+0x4c>)
 800e3ea:	4806      	ldr	r0, [pc, #24]	; (800e404 <lwip_sockopt_to_ipopt+0x50>)
 800e3ec:	f011 fa3c 	bl	801f868 <iprintf>
    return 0;
 800e3f0:	2300      	movs	r3, #0
  }
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3708      	adds	r7, #8
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}
 800e3fa:	bf00      	nop
 800e3fc:	08022474 	.word	0x08022474
 800e400:	08022800 	.word	0x08022800
 800e404:	080224c8 	.word	0x080224c8

0800e408 <lwip_setsockopt>:
  return err;
}

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b08a      	sub	sp, #40	; 0x28
 800e40c:	af02      	add	r7, sp, #8
 800e40e:	60f8      	str	r0, [r7, #12]
 800e410:	60b9      	str	r1, [r7, #8]
 800e412:	607a      	str	r2, [r7, #4]
 800e414:	603b      	str	r3, [r7, #0]
  int err = 0;
 800e416:	2300      	movs	r3, #0
 800e418:	61fb      	str	r3, [r7, #28]
  struct lwip_sock *sock = get_socket(s);
 800e41a:	68f8      	ldr	r0, [r7, #12]
 800e41c:	f7fe fe90 	bl	800d140 <get_socket>
 800e420:	61b8      	str	r0, [r7, #24]
#if !LWIP_TCPIP_CORE_LOCKING
  err_t cberr;
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
 800e422:	69bb      	ldr	r3, [r7, #24]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d102      	bne.n	800e42e <lwip_setsockopt+0x26>
    return -1;
 800e428:	f04f 33ff 	mov.w	r3, #4294967295
 800e42c:	e02b      	b.n	800e486 <lwip_setsockopt+0x7e>
  }

  if (NULL == optval) {
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d10a      	bne.n	800e44a <lwip_setsockopt+0x42>
    sock_set_errno(sock, EFAULT);
 800e434:	230e      	movs	r3, #14
 800e436:	613b      	str	r3, [r7, #16]
 800e438:	693b      	ldr	r3, [r7, #16]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d002      	beq.n	800e444 <lwip_setsockopt+0x3c>
 800e43e:	4a14      	ldr	r2, [pc, #80]	; (800e490 <lwip_setsockopt+0x88>)
 800e440:	693b      	ldr	r3, [r7, #16]
 800e442:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800e444:	f04f 33ff 	mov.w	r3, #4294967295
 800e448:	e01d      	b.n	800e486 <lwip_setsockopt+0x7e>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
 800e44a:	4812      	ldr	r0, [pc, #72]	; (800e494 <lwip_setsockopt+0x8c>)
 800e44c:	f00e f9be 	bl	801c7cc <sys_mutex_lock>
  err = lwip_setsockopt_impl(s, level, optname, optval, optlen);
 800e450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e452:	9300      	str	r3, [sp, #0]
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	687a      	ldr	r2, [r7, #4]
 800e458:	68b9      	ldr	r1, [r7, #8]
 800e45a:	68f8      	ldr	r0, [r7, #12]
 800e45c:	f000 f81c 	bl	800e498 <lwip_setsockopt_impl>
 800e460:	61f8      	str	r0, [r7, #28]
  UNLOCK_TCPIP_CORE();
 800e462:	480c      	ldr	r0, [pc, #48]	; (800e494 <lwip_setsockopt+0x8c>)
 800e464:	f00e f9c1 	bl	801c7ea <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif  /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
 800e468:	69fb      	ldr	r3, [r7, #28]
 800e46a:	617b      	str	r3, [r7, #20]
 800e46c:	697b      	ldr	r3, [r7, #20]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d002      	beq.n	800e478 <lwip_setsockopt+0x70>
 800e472:	4a07      	ldr	r2, [pc, #28]	; (800e490 <lwip_setsockopt+0x88>)
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return err ? -1 : 0;
 800e478:	69fb      	ldr	r3, [r7, #28]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d002      	beq.n	800e484 <lwip_setsockopt+0x7c>
 800e47e:	f04f 33ff 	mov.w	r3, #4294967295
 800e482:	e000      	b.n	800e486 <lwip_setsockopt+0x7e>
 800e484:	2300      	movs	r3, #0
}
 800e486:	4618      	mov	r0, r3
 800e488:	3720      	adds	r7, #32
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	bf00      	nop
 800e490:	2000898c 	.word	0x2000898c
 800e494:	200050bc 	.word	0x200050bc

0800e498 <lwip_setsockopt_impl>:
/** lwip_setsockopt_impl: the actual implementation of setsockopt:
 * same argument as lwip_setsockopt, either called directly or through callback
 */
static int
lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b088      	sub	sp, #32
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	60f8      	str	r0, [r7, #12]
 800e4a0:	60b9      	str	r1, [r7, #8]
 800e4a2:	607a      	str	r2, [r7, #4]
 800e4a4:	603b      	str	r3, [r7, #0]
  int err = 0;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	61fb      	str	r3, [r7, #28]
  struct lwip_sock *sock = tryget_socket(s);
 800e4aa:	68f8      	ldr	r0, [r7, #12]
 800e4ac:	f7fe fe31 	bl	800d112 <tryget_socket>
 800e4b0:	6178      	str	r0, [r7, #20]
  if (!sock) {
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d101      	bne.n	800e4bc <lwip_setsockopt_impl+0x24>
    return EBADF;
 800e4b8:	2309      	movs	r3, #9
 800e4ba:	e187      	b.n	800e7cc <lwip_setsockopt_impl+0x334>
  if (LWIP_HOOK_SOCKETS_SETSOCKOPT(s, sock, level, optname, optval, optlen, &err)) {
    return err;
  }
#endif

  switch (level) {
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	f640 72ff 	movw	r2, #4095	; 0xfff
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	d015      	beq.n	800e4f2 <lwip_setsockopt_impl+0x5a>
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e4cc:	f280 817a 	bge.w	800e7c4 <lwip_setsockopt_impl+0x32c>
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	2bff      	cmp	r3, #255	; 0xff
 800e4d4:	f000 8172 	beq.w	800e7bc <lwip_setsockopt_impl+0x324>
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	2bff      	cmp	r3, #255	; 0xff
 800e4dc:	f300 8172 	bgt.w	800e7c4 <lwip_setsockopt_impl+0x32c>
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	f000 80e0 	beq.w	800e6a8 <lwip_setsockopt_impl+0x210>
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	2b06      	cmp	r3, #6
 800e4ec:	f000 8116 	beq.w	800e71c <lwip_setsockopt_impl+0x284>
 800e4f0:	e168      	b.n	800e7c4 <lwip_setsockopt_impl+0x32c>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f241 020b 	movw	r2, #4107	; 0x100b
 800e4f8:	4293      	cmp	r3, r2
 800e4fa:	f000 8091 	beq.w	800e620 <lwip_setsockopt_impl+0x188>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f241 020b 	movw	r2, #4107	; 0x100b
 800e504:	4293      	cmp	r3, r2
 800e506:	f300 80cb 	bgt.w	800e6a0 <lwip_setsockopt_impl+0x208>
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f241 020a 	movw	r2, #4106	; 0x100a
 800e510:	4293      	cmp	r3, r2
 800e512:	d050      	beq.n	800e5b6 <lwip_setsockopt_impl+0x11e>
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f241 020a 	movw	r2, #4106	; 0x100a
 800e51a:	4293      	cmp	r3, r2
 800e51c:	f300 80c0 	bgt.w	800e6a0 <lwip_setsockopt_impl+0x208>
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2b08      	cmp	r3, #8
 800e524:	d003      	beq.n	800e52e <lwip_setsockopt_impl+0x96>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2b20      	cmp	r3, #32
 800e52a:	f040 80b9 	bne.w	800e6a0 <lwip_setsockopt_impl+0x208>
        case SO_BROADCAST:
        case SO_KEEPALIVE:
#if SO_REUSE
        case SO_REUSEADDR:
#endif /* SO_REUSE */
          if ((optname == SO_BROADCAST) &&
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2b20      	cmp	r3, #32
 800e532:	d108      	bne.n	800e546 <lwip_setsockopt_impl+0xae>
              (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_UDP)) {
 800e534:	697b      	ldr	r3, [r7, #20]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	781b      	ldrb	r3, [r3, #0]
 800e53a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if ((optname == SO_BROADCAST) &&
 800e53e:	2b20      	cmp	r3, #32
 800e540:	d001      	beq.n	800e546 <lwip_setsockopt_impl+0xae>
            done_socket(sock);
            return ENOPROTOOPT;
 800e542:	235c      	movs	r3, #92	; 0x5c
 800e544:	e142      	b.n	800e7cc <lwip_setsockopt_impl+0x334>
          }

          optname = lwip_sockopt_to_ipopt(optname);
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f7ff ff34 	bl	800e3b4 <lwip_sockopt_to_ipopt>
 800e54c:	6078      	str	r0, [r7, #4]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800e54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e550:	2b03      	cmp	r3, #3
 800e552:	d801      	bhi.n	800e558 <lwip_setsockopt_impl+0xc0>
 800e554:	2316      	movs	r3, #22
 800e556:	e139      	b.n	800e7cc <lwip_setsockopt_impl+0x334>
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d004      	beq.n	800e56a <lwip_setsockopt_impl+0xd2>
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	685b      	ldr	r3, [r3, #4]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d101      	bne.n	800e56e <lwip_setsockopt_impl+0xd6>
 800e56a:	2316      	movs	r3, #22
 800e56c:	e12e      	b.n	800e7cc <lwip_setsockopt_impl+0x334>
          if (*(const int *)optval) {
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d00e      	beq.n	800e594 <lwip_setsockopt_impl+0xfc>
            ip_set_option(sock->conn->pcb.ip, optname);
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	685b      	ldr	r3, [r3, #4]
 800e57c:	7a5b      	ldrb	r3, [r3, #9]
 800e57e:	b25a      	sxtb	r2, r3
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	b25b      	sxtb	r3, r3
 800e584:	4313      	orrs	r3, r2
 800e586:	b25a      	sxtb	r2, r3
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	685b      	ldr	r3, [r3, #4]
 800e58e:	b2d2      	uxtb	r2, r2
 800e590:	725a      	strb	r2, [r3, #9]
          } else {
            ip_reset_option(sock->conn->pcb.ip, optname);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                                      s, optname, (*(const int *)optval ? "on" : "off")));
          break;
 800e592:	e088      	b.n	800e6a6 <lwip_setsockopt_impl+0x20e>
            ip_reset_option(sock->conn->pcb.ip, optname);
 800e594:	697b      	ldr	r3, [r7, #20]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	685b      	ldr	r3, [r3, #4]
 800e59a:	7a5b      	ldrb	r3, [r3, #9]
 800e59c:	b25a      	sxtb	r2, r3
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	b25b      	sxtb	r3, r3
 800e5a2:	43db      	mvns	r3, r3
 800e5a4:	b25b      	sxtb	r3, r3
 800e5a6:	4013      	ands	r3, r2
 800e5a8:	b25a      	sxtb	r2, r3
 800e5aa:	697b      	ldr	r3, [r7, #20]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	685b      	ldr	r3, [r3, #4]
 800e5b0:	b2d2      	uxtb	r2, r2
 800e5b2:	725a      	strb	r2, [r3, #9]
          break;
 800e5b4:	e077      	b.n	800e6a6 <lwip_setsockopt_impl+0x20e>
        }
        break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
        case SO_NO_CHECK:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
 800e5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5b8:	2b03      	cmp	r3, #3
 800e5ba:	d801      	bhi.n	800e5c0 <lwip_setsockopt_impl+0x128>
 800e5bc:	2316      	movs	r3, #22
 800e5be:	e105      	b.n	800e7cc <lwip_setsockopt_impl+0x334>
 800e5c0:	697b      	ldr	r3, [r7, #20]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d004      	beq.n	800e5d2 <lwip_setsockopt_impl+0x13a>
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d101      	bne.n	800e5d6 <lwip_setsockopt_impl+0x13e>
 800e5d2:	2316      	movs	r3, #22
 800e5d4:	e0fa      	b.n	800e7cc <lwip_setsockopt_impl+0x334>
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e5e0:	2b20      	cmp	r3, #32
 800e5e2:	d001      	beq.n	800e5e8 <lwip_setsockopt_impl+0x150>
 800e5e4:	235c      	movs	r3, #92	; 0x5c
 800e5e6:	e0f1      	b.n	800e7cc <lwip_setsockopt_impl+0x334>
            /* this flag is only available for UDP, not for UDP lite */
            done_socket(sock);
            return EAFNOSUPPORT;
          }
#endif /* LWIP_UDPLITE */
          if (*(const int *)optval) {
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d00b      	beq.n	800e608 <lwip_setsockopt_impl+0x170>
            udp_set_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	685b      	ldr	r3, [r3, #4]
 800e5f6:	7c1a      	ldrb	r2, [r3, #16]
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	685b      	ldr	r3, [r3, #4]
 800e5fe:	f042 0201 	orr.w	r2, r2, #1
 800e602:	b2d2      	uxtb	r2, r2
 800e604:	741a      	strb	r2, [r3, #16]
          } else {
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
          }
          break;
 800e606:	e04e      	b.n	800e6a6 <lwip_setsockopt_impl+0x20e>
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	7c1a      	ldrb	r2, [r3, #16]
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	685b      	ldr	r3, [r3, #4]
 800e616:	f022 0201 	bic.w	r2, r2, #1
 800e61a:	b2d2      	uxtb	r2, r2
 800e61c:	741a      	strb	r2, [r3, #16]
          break;
 800e61e:	e042      	b.n	800e6a6 <lwip_setsockopt_impl+0x20e>
#endif /* LWIP_UDP */
        case SO_BINDTODEVICE: {
          const struct ifreq *iface;
          struct netif *n = NULL;
 800e620:	2300      	movs	r3, #0
 800e622:	61bb      	str	r3, [r7, #24]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, struct ifreq);
 800e624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e626:	2b05      	cmp	r3, #5
 800e628:	d801      	bhi.n	800e62e <lwip_setsockopt_impl+0x196>
 800e62a:	2316      	movs	r3, #22
 800e62c:	e0ce      	b.n	800e7cc <lwip_setsockopt_impl+0x334>
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d101      	bne.n	800e63a <lwip_setsockopt_impl+0x1a2>
 800e636:	2316      	movs	r3, #22
 800e638:	e0c8      	b.n	800e7cc <lwip_setsockopt_impl+0x334>

          iface = (const struct ifreq *)optval;
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	613b      	str	r3, [r7, #16]
          if (iface->ifr_name[0] != 0) {
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	781b      	ldrb	r3, [r3, #0]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d009      	beq.n	800e65a <lwip_setsockopt_impl+0x1c2>
            n = netif_find(iface->ifr_name);
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	4618      	mov	r0, r3
 800e64a:	f001 fdbf 	bl	80101cc <netif_find>
 800e64e:	61b8      	str	r0, [r7, #24]
            if (n == NULL) {
 800e650:	69bb      	ldr	r3, [r7, #24]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d101      	bne.n	800e65a <lwip_setsockopt_impl+0x1c2>
              done_socket(sock);
              return ENODEV;
 800e656:	2313      	movs	r3, #19
 800e658:	e0b8      	b.n	800e7cc <lwip_setsockopt_impl+0x334>
            }
          }

          switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	781b      	ldrb	r3, [r3, #0]
 800e660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e664:	2b10      	cmp	r3, #16
 800e666:	d002      	beq.n	800e66e <lwip_setsockopt_impl+0x1d6>
 800e668:	2b20      	cmp	r3, #32
 800e66a:	d008      	beq.n	800e67e <lwip_setsockopt_impl+0x1e6>
 800e66c:	e00f      	b.n	800e68e <lwip_setsockopt_impl+0x1f6>
#if LWIP_TCP
            case NETCONN_TCP:
              tcp_bind_netif(sock->conn->pcb.tcp, n);
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	685b      	ldr	r3, [r3, #4]
 800e674:	69b9      	ldr	r1, [r7, #24]
 800e676:	4618      	mov	r0, r3
 800e678:	f003 f978 	bl	801196c <tcp_bind_netif>
              break;
 800e67c:	e00f      	b.n	800e69e <lwip_setsockopt_impl+0x206>
#endif
#if LWIP_UDP
            case NETCONN_UDP:
              udp_bind_netif(sock->conn->pcb.udp, n);
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	685b      	ldr	r3, [r3, #4]
 800e684:	69b9      	ldr	r1, [r7, #24]
 800e686:	4618      	mov	r0, r3
 800e688:	f009 fbc0 	bl	8017e0c <udp_bind_netif>
              break;
 800e68c:	e007      	b.n	800e69e <lwip_setsockopt_impl+0x206>
            case NETCONN_RAW:
              raw_bind_netif(sock->conn->pcb.raw, n);
              break;
#endif
            default:
              LWIP_ASSERT("Unhandled netconn type in SO_BINDTODEVICE", 0);
 800e68e:	4b51      	ldr	r3, [pc, #324]	; (800e7d4 <lwip_setsockopt_impl+0x33c>)
 800e690:	f640 527d 	movw	r2, #3453	; 0xd7d
 800e694:	4950      	ldr	r1, [pc, #320]	; (800e7d8 <lwip_setsockopt_impl+0x340>)
 800e696:	4851      	ldr	r0, [pc, #324]	; (800e7dc <lwip_setsockopt_impl+0x344>)
 800e698:	f011 f8e6 	bl	801f868 <iprintf>
              break;
 800e69c:	bf00      	nop
          }
        }
        break;
 800e69e:	e002      	b.n	800e6a6 <lwip_setsockopt_impl+0x20e>
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800e6a0:	235c      	movs	r3, #92	; 0x5c
 800e6a2:	61fb      	str	r3, [r7, #28]
          break;
 800e6a4:	bf00      	nop
      }  /* switch (optname) */
      break;
 800e6a6:	e090      	b.n	800e7ca <lwip_setsockopt_impl+0x332>
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2b01      	cmp	r3, #1
 800e6ac:	d01a      	beq.n	800e6e4 <lwip_setsockopt_impl+0x24c>
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2b02      	cmp	r3, #2
 800e6b2:	d12f      	bne.n	800e714 <lwip_setsockopt_impl+0x27c>

    /* Level: IPPROTO_IP */
    case IPPROTO_IP:
      switch (optname) {
        case IP_TTL:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800e6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b6:	2b03      	cmp	r3, #3
 800e6b8:	d801      	bhi.n	800e6be <lwip_setsockopt_impl+0x226>
 800e6ba:	2316      	movs	r3, #22
 800e6bc:	e086      	b.n	800e7cc <lwip_setsockopt_impl+0x334>
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d004      	beq.n	800e6d0 <lwip_setsockopt_impl+0x238>
 800e6c6:	697b      	ldr	r3, [r7, #20]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	685b      	ldr	r3, [r3, #4]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d101      	bne.n	800e6d4 <lwip_setsockopt_impl+0x23c>
 800e6d0:	2316      	movs	r3, #22
 800e6d2:	e07b      	b.n	800e7cc <lwip_setsockopt_impl+0x334>
          sock->conn->pcb.ip->ttl = (u8_t)(*(const int *)optval);
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	681a      	ldr	r2, [r3, #0]
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	685b      	ldr	r3, [r3, #4]
 800e6de:	b2d2      	uxtb	r2, r2
 800e6e0:	72da      	strb	r2, [r3, #11]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                                      s, sock->conn->pcb.ip->ttl));
          break;
 800e6e2:	e01a      	b.n	800e71a <lwip_setsockopt_impl+0x282>
        case IP_TOS:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800e6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e6:	2b03      	cmp	r3, #3
 800e6e8:	d801      	bhi.n	800e6ee <lwip_setsockopt_impl+0x256>
 800e6ea:	2316      	movs	r3, #22
 800e6ec:	e06e      	b.n	800e7cc <lwip_setsockopt_impl+0x334>
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d004      	beq.n	800e700 <lwip_setsockopt_impl+0x268>
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	685b      	ldr	r3, [r3, #4]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d101      	bne.n	800e704 <lwip_setsockopt_impl+0x26c>
 800e700:	2316      	movs	r3, #22
 800e702:	e063      	b.n	800e7cc <lwip_setsockopt_impl+0x334>
          sock->conn->pcb.ip->tos = (u8_t)(*(const int *)optval);
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	681a      	ldr	r2, [r3, #0]
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	685b      	ldr	r3, [r3, #4]
 800e70e:	b2d2      	uxtb	r2, r2
 800e710:	729a      	strb	r2, [r3, #10]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                                      s, sock->conn->pcb.ip->tos));
          break;
 800e712:	e002      	b.n	800e71a <lwip_setsockopt_impl+0x282>
        break;
#endif /* LWIP_IGMP */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800e714:	235c      	movs	r3, #92	; 0x5c
 800e716:	61fb      	str	r3, [r7, #28]
          break;
 800e718:	bf00      	nop
      }  /* switch (optname) */
      break;
 800e71a:	e056      	b.n	800e7ca <lwip_setsockopt_impl+0x332>

#if LWIP_TCP
    /* Level: IPPROTO_TCP */
    case IPPROTO_TCP:
      /* Special case: all IPPROTO_TCP option take an int */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
 800e71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e71e:	2b03      	cmp	r3, #3
 800e720:	d801      	bhi.n	800e726 <lwip_setsockopt_impl+0x28e>
 800e722:	2316      	movs	r3, #22
 800e724:	e052      	b.n	800e7cc <lwip_setsockopt_impl+0x334>
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d004      	beq.n	800e738 <lwip_setsockopt_impl+0x2a0>
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d101      	bne.n	800e73c <lwip_setsockopt_impl+0x2a4>
 800e738:	2316      	movs	r3, #22
 800e73a:	e047      	b.n	800e7cc <lwip_setsockopt_impl+0x334>
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	781b      	ldrb	r3, [r3, #0]
 800e742:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e746:	2b10      	cmp	r3, #16
 800e748:	d001      	beq.n	800e74e <lwip_setsockopt_impl+0x2b6>
 800e74a:	235c      	movs	r3, #92	; 0x5c
 800e74c:	e03e      	b.n	800e7cc <lwip_setsockopt_impl+0x334>
      if (sock->conn->pcb.tcp->state == LISTEN) {
 800e74e:	697b      	ldr	r3, [r7, #20]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	7d1b      	ldrb	r3, [r3, #20]
 800e756:	2b01      	cmp	r3, #1
 800e758:	d101      	bne.n	800e75e <lwip_setsockopt_impl+0x2c6>
        done_socket(sock);
        return EINVAL;
 800e75a:	2316      	movs	r3, #22
 800e75c:	e036      	b.n	800e7cc <lwip_setsockopt_impl+0x334>
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2b01      	cmp	r3, #1
 800e762:	d003      	beq.n	800e76c <lwip_setsockopt_impl+0x2d4>
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2b02      	cmp	r3, #2
 800e768:	d01c      	beq.n	800e7a4 <lwip_setsockopt_impl+0x30c>
 800e76a:	e023      	b.n	800e7b4 <lwip_setsockopt_impl+0x31c>
      }
      switch (optname) {
        case TCP_NODELAY:
          if (*(const int *)optval) {
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d00b      	beq.n	800e78c <lwip_setsockopt_impl+0x2f4>
            tcp_nagle_disable(sock->conn->pcb.tcp);
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	685b      	ldr	r3, [r3, #4]
 800e77a:	8b5a      	ldrh	r2, [r3, #26]
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	685b      	ldr	r3, [r3, #4]
 800e782:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e786:	b292      	uxth	r2, r2
 800e788:	835a      	strh	r2, [r3, #26]
          } else {
            tcp_nagle_enable(sock->conn->pcb.tcp);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                                      s, (*(const int *)optval) ? "on" : "off") );
          break;
 800e78a:	e016      	b.n	800e7ba <lwip_setsockopt_impl+0x322>
            tcp_nagle_enable(sock->conn->pcb.tcp);
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	685b      	ldr	r3, [r3, #4]
 800e792:	8b5a      	ldrh	r2, [r3, #26]
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	685b      	ldr	r3, [r3, #4]
 800e79a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e79e:	b292      	uxth	r2, r2
 800e7a0:	835a      	strh	r2, [r3, #26]
          break;
 800e7a2:	e00a      	b.n	800e7ba <lwip_setsockopt_impl+0x322>
        case TCP_KEEPALIVE:
          sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int *)optval);
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	681a      	ldr	r2, [r3, #0]
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                                      s, sock->conn->pcb.tcp->keep_idle));
          break;
 800e7b2:	e002      	b.n	800e7ba <lwip_setsockopt_impl+0x322>
          break;
#endif /* LWIP_TCP_KEEPALIVE */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800e7b4:	235c      	movs	r3, #92	; 0x5c
 800e7b6:	61fb      	str	r3, [r7, #28]
          break;
 800e7b8:	bf00      	nop
      }  /* switch (optname) */
      break;
 800e7ba:	e006      	b.n	800e7ca <lwip_setsockopt_impl+0x332>
          break;
#endif /* LWIP_IPV6 && LWIP_RAW */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800e7bc:	235c      	movs	r3, #92	; 0x5c
 800e7be:	61fb      	str	r3, [r7, #28]
          break;
 800e7c0:	bf00      	nop
      }  /* switch (optname) */
      break;
 800e7c2:	e002      	b.n	800e7ca <lwip_setsockopt_impl+0x332>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                  s, level, optname));
      err = ENOPROTOOPT;
 800e7c4:	235c      	movs	r3, #92	; 0x5c
 800e7c6:	61fb      	str	r3, [r7, #28]
      break;
 800e7c8:	bf00      	nop
  }  /* switch (level) */

  done_socket(sock);
  return err;
 800e7ca:	69fb      	ldr	r3, [r7, #28]
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3720      	adds	r7, #32
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}
 800e7d4:	08022474 	.word	0x08022474
 800e7d8:	08022818 	.word	0x08022818
 800e7dc:	080224c8 	.word	0x080224c8

0800e7e0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b084      	sub	sp, #16
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800e7ea:	f008 fea3 	bl	8017534 <sys_timeouts_sleeptime>
 800e7ee:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7f6:	d10b      	bne.n	800e810 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800e7f8:	4813      	ldr	r0, [pc, #76]	; (800e848 <tcpip_timeouts_mbox_fetch+0x68>)
 800e7fa:	f00d fff6 	bl	801c7ea <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800e7fe:	2200      	movs	r2, #0
 800e800:	6839      	ldr	r1, [r7, #0]
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f00d fecc 	bl	801c5a0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800e808:	480f      	ldr	r0, [pc, #60]	; (800e848 <tcpip_timeouts_mbox_fetch+0x68>)
 800e80a:	f00d ffdf 	bl	801c7cc <sys_mutex_lock>
    return;
 800e80e:	e018      	b.n	800e842 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d102      	bne.n	800e81c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800e816:	f008 fe53 	bl	80174c0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e81a:	e7e6      	b.n	800e7ea <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800e81c:	480a      	ldr	r0, [pc, #40]	; (800e848 <tcpip_timeouts_mbox_fetch+0x68>)
 800e81e:	f00d ffe4 	bl	801c7ea <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800e822:	68fa      	ldr	r2, [r7, #12]
 800e824:	6839      	ldr	r1, [r7, #0]
 800e826:	6878      	ldr	r0, [r7, #4]
 800e828:	f00d feba 	bl	801c5a0 <sys_arch_mbox_fetch>
 800e82c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800e82e:	4806      	ldr	r0, [pc, #24]	; (800e848 <tcpip_timeouts_mbox_fetch+0x68>)
 800e830:	f00d ffcc 	bl	801c7cc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e83a:	d102      	bne.n	800e842 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800e83c:	f008 fe40 	bl	80174c0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e840:	e7d3      	b.n	800e7ea <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800e842:	3710      	adds	r7, #16
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}
 800e848:	200050bc 	.word	0x200050bc

0800e84c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b084      	sub	sp, #16
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800e854:	4810      	ldr	r0, [pc, #64]	; (800e898 <tcpip_thread+0x4c>)
 800e856:	f00d ffb9 	bl	801c7cc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800e85a:	4b10      	ldr	r3, [pc, #64]	; (800e89c <tcpip_thread+0x50>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d005      	beq.n	800e86e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800e862:	4b0e      	ldr	r3, [pc, #56]	; (800e89c <tcpip_thread+0x50>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	4a0e      	ldr	r2, [pc, #56]	; (800e8a0 <tcpip_thread+0x54>)
 800e868:	6812      	ldr	r2, [r2, #0]
 800e86a:	4610      	mov	r0, r2
 800e86c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e86e:	f107 030c 	add.w	r3, r7, #12
 800e872:	4619      	mov	r1, r3
 800e874:	480b      	ldr	r0, [pc, #44]	; (800e8a4 <tcpip_thread+0x58>)
 800e876:	f7ff ffb3 	bl	800e7e0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d106      	bne.n	800e88e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e880:	4b09      	ldr	r3, [pc, #36]	; (800e8a8 <tcpip_thread+0x5c>)
 800e882:	2291      	movs	r2, #145	; 0x91
 800e884:	4909      	ldr	r1, [pc, #36]	; (800e8ac <tcpip_thread+0x60>)
 800e886:	480a      	ldr	r0, [pc, #40]	; (800e8b0 <tcpip_thread+0x64>)
 800e888:	f010 ffee 	bl	801f868 <iprintf>
      continue;
 800e88c:	e003      	b.n	800e896 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	4618      	mov	r0, r3
 800e892:	f000 f80f 	bl	800e8b4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e896:	e7ea      	b.n	800e86e <tcpip_thread+0x22>
 800e898:	200050bc 	.word	0x200050bc
 800e89c:	2000143c 	.word	0x2000143c
 800e8a0:	20001440 	.word	0x20001440
 800e8a4:	20001444 	.word	0x20001444
 800e8a8:	08022844 	.word	0x08022844
 800e8ac:	08022874 	.word	0x08022874
 800e8b0:	08022894 	.word	0x08022894

0800e8b4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b082      	sub	sp, #8
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	781b      	ldrb	r3, [r3, #0]
 800e8c0:	2b02      	cmp	r3, #2
 800e8c2:	d026      	beq.n	800e912 <tcpip_thread_handle_msg+0x5e>
 800e8c4:	2b02      	cmp	r3, #2
 800e8c6:	dc2b      	bgt.n	800e920 <tcpip_thread_handle_msg+0x6c>
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d002      	beq.n	800e8d2 <tcpip_thread_handle_msg+0x1e>
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	d015      	beq.n	800e8fc <tcpip_thread_handle_msg+0x48>
 800e8d0:	e026      	b.n	800e920 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	68db      	ldr	r3, [r3, #12]
 800e8d6:	687a      	ldr	r2, [r7, #4]
 800e8d8:	6850      	ldr	r0, [r2, #4]
 800e8da:	687a      	ldr	r2, [r7, #4]
 800e8dc:	6892      	ldr	r2, [r2, #8]
 800e8de:	4611      	mov	r1, r2
 800e8e0:	4798      	blx	r3
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d004      	beq.n	800e8f2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	685b      	ldr	r3, [r3, #4]
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f002 f83f 	bl	8010970 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e8f2:	6879      	ldr	r1, [r7, #4]
 800e8f4:	2009      	movs	r0, #9
 800e8f6:	f001 f921 	bl	800fb3c <memp_free>
      break;
 800e8fa:	e018      	b.n	800e92e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	685b      	ldr	r3, [r3, #4]
 800e900:	687a      	ldr	r2, [r7, #4]
 800e902:	6892      	ldr	r2, [r2, #8]
 800e904:	4610      	mov	r0, r2
 800e906:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800e908:	6879      	ldr	r1, [r7, #4]
 800e90a:	2008      	movs	r0, #8
 800e90c:	f001 f916 	bl	800fb3c <memp_free>
      break;
 800e910:	e00d      	b.n	800e92e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	685b      	ldr	r3, [r3, #4]
 800e916:	687a      	ldr	r2, [r7, #4]
 800e918:	6892      	ldr	r2, [r2, #8]
 800e91a:	4610      	mov	r0, r2
 800e91c:	4798      	blx	r3
      break;
 800e91e:	e006      	b.n	800e92e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e920:	4b05      	ldr	r3, [pc, #20]	; (800e938 <tcpip_thread_handle_msg+0x84>)
 800e922:	22cf      	movs	r2, #207	; 0xcf
 800e924:	4905      	ldr	r1, [pc, #20]	; (800e93c <tcpip_thread_handle_msg+0x88>)
 800e926:	4806      	ldr	r0, [pc, #24]	; (800e940 <tcpip_thread_handle_msg+0x8c>)
 800e928:	f010 ff9e 	bl	801f868 <iprintf>
      break;
 800e92c:	bf00      	nop
  }
}
 800e92e:	bf00      	nop
 800e930:	3708      	adds	r7, #8
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}
 800e936:	bf00      	nop
 800e938:	08022844 	.word	0x08022844
 800e93c:	08022874 	.word	0x08022874
 800e940:	08022894 	.word	0x08022894

0800e944 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b086      	sub	sp, #24
 800e948:	af00      	add	r7, sp, #0
 800e94a:	60f8      	str	r0, [r7, #12]
 800e94c:	60b9      	str	r1, [r7, #8]
 800e94e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e950:	481a      	ldr	r0, [pc, #104]	; (800e9bc <tcpip_inpkt+0x78>)
 800e952:	f00d fe6d 	bl	801c630 <sys_mbox_valid>
 800e956:	4603      	mov	r3, r0
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d105      	bne.n	800e968 <tcpip_inpkt+0x24>
 800e95c:	4b18      	ldr	r3, [pc, #96]	; (800e9c0 <tcpip_inpkt+0x7c>)
 800e95e:	22fc      	movs	r2, #252	; 0xfc
 800e960:	4918      	ldr	r1, [pc, #96]	; (800e9c4 <tcpip_inpkt+0x80>)
 800e962:	4819      	ldr	r0, [pc, #100]	; (800e9c8 <tcpip_inpkt+0x84>)
 800e964:	f010 ff80 	bl	801f868 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800e968:	2009      	movs	r0, #9
 800e96a:	f001 f895 	bl	800fa98 <memp_malloc>
 800e96e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d102      	bne.n	800e97c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800e976:	f04f 33ff 	mov.w	r3, #4294967295
 800e97a:	e01a      	b.n	800e9b2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	2200      	movs	r2, #0
 800e980:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	68fa      	ldr	r2, [r7, #12]
 800e986:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	68ba      	ldr	r2, [r7, #8]
 800e98c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	687a      	ldr	r2, [r7, #4]
 800e992:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e994:	6979      	ldr	r1, [r7, #20]
 800e996:	4809      	ldr	r0, [pc, #36]	; (800e9bc <tcpip_inpkt+0x78>)
 800e998:	f00d fde8 	bl	801c56c <sys_mbox_trypost>
 800e99c:	4603      	mov	r3, r0
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d006      	beq.n	800e9b0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e9a2:	6979      	ldr	r1, [r7, #20]
 800e9a4:	2009      	movs	r0, #9
 800e9a6:	f001 f8c9 	bl	800fb3c <memp_free>
    return ERR_MEM;
 800e9aa:	f04f 33ff 	mov.w	r3, #4294967295
 800e9ae:	e000      	b.n	800e9b2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800e9b0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3718      	adds	r7, #24
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
 800e9ba:	bf00      	nop
 800e9bc:	20001444 	.word	0x20001444
 800e9c0:	08022844 	.word	0x08022844
 800e9c4:	080228bc 	.word	0x080228bc
 800e9c8:	08022894 	.word	0x08022894

0800e9cc <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b082      	sub	sp, #8
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e9dc:	f003 0318 	and.w	r3, r3, #24
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d006      	beq.n	800e9f2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800e9e4:	4a08      	ldr	r2, [pc, #32]	; (800ea08 <tcpip_input+0x3c>)
 800e9e6:	6839      	ldr	r1, [r7, #0]
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f7ff ffab 	bl	800e944 <tcpip_inpkt>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	e005      	b.n	800e9fe <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800e9f2:	4a06      	ldr	r2, [pc, #24]	; (800ea0c <tcpip_input+0x40>)
 800e9f4:	6839      	ldr	r1, [r7, #0]
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f7ff ffa4 	bl	800e944 <tcpip_inpkt>
 800e9fc:	4603      	mov	r3, r0
}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3708      	adds	r7, #8
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}
 800ea06:	bf00      	nop
 800ea08:	0801c369 	.word	0x0801c369
 800ea0c:	0801b13d 	.word	0x0801b13d

0800ea10 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b084      	sub	sp, #16
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
 800ea18:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ea1a:	4819      	ldr	r0, [pc, #100]	; (800ea80 <tcpip_try_callback+0x70>)
 800ea1c:	f00d fe08 	bl	801c630 <sys_mbox_valid>
 800ea20:	4603      	mov	r3, r0
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d106      	bne.n	800ea34 <tcpip_try_callback+0x24>
 800ea26:	4b17      	ldr	r3, [pc, #92]	; (800ea84 <tcpip_try_callback+0x74>)
 800ea28:	f240 125d 	movw	r2, #349	; 0x15d
 800ea2c:	4916      	ldr	r1, [pc, #88]	; (800ea88 <tcpip_try_callback+0x78>)
 800ea2e:	4817      	ldr	r0, [pc, #92]	; (800ea8c <tcpip_try_callback+0x7c>)
 800ea30:	f010 ff1a 	bl	801f868 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ea34:	2008      	movs	r0, #8
 800ea36:	f001 f82f 	bl	800fa98 <memp_malloc>
 800ea3a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d102      	bne.n	800ea48 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800ea42:	f04f 33ff 	mov.w	r3, #4294967295
 800ea46:	e017      	b.n	800ea78 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	687a      	ldr	r2, [r7, #4]
 800ea52:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	683a      	ldr	r2, [r7, #0]
 800ea58:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ea5a:	68f9      	ldr	r1, [r7, #12]
 800ea5c:	4808      	ldr	r0, [pc, #32]	; (800ea80 <tcpip_try_callback+0x70>)
 800ea5e:	f00d fd85 	bl	801c56c <sys_mbox_trypost>
 800ea62:	4603      	mov	r3, r0
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d006      	beq.n	800ea76 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800ea68:	68f9      	ldr	r1, [r7, #12]
 800ea6a:	2008      	movs	r0, #8
 800ea6c:	f001 f866 	bl	800fb3c <memp_free>
    return ERR_MEM;
 800ea70:	f04f 33ff 	mov.w	r3, #4294967295
 800ea74:	e000      	b.n	800ea78 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800ea76:	2300      	movs	r3, #0
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3710      	adds	r7, #16
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}
 800ea80:	20001444 	.word	0x20001444
 800ea84:	08022844 	.word	0x08022844
 800ea88:	080228bc 	.word	0x080228bc
 800ea8c:	08022894 	.word	0x08022894

0800ea90 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b084      	sub	sp, #16
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	60f8      	str	r0, [r7, #12]
 800ea98:	60b9      	str	r1, [r7, #8]
 800ea9a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800ea9c:	4806      	ldr	r0, [pc, #24]	; (800eab8 <tcpip_send_msg_wait_sem+0x28>)
 800ea9e:	f00d fe95 	bl	801c7cc <sys_mutex_lock>
  fn(apimsg);
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	68b8      	ldr	r0, [r7, #8]
 800eaa6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800eaa8:	4803      	ldr	r0, [pc, #12]	; (800eab8 <tcpip_send_msg_wait_sem+0x28>)
 800eaaa:	f00d fe9e 	bl	801c7ea <sys_mutex_unlock>
  return ERR_OK;
 800eaae:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	3710      	adds	r7, #16
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}
 800eab8:	200050bc 	.word	0x200050bc

0800eabc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b084      	sub	sp, #16
 800eac0:	af02      	add	r7, sp, #8
 800eac2:	6078      	str	r0, [r7, #4]
 800eac4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800eac6:	f000 fb5e 	bl	800f186 <lwip_init>

  tcpip_init_done = initfunc;
 800eaca:	4a17      	ldr	r2, [pc, #92]	; (800eb28 <tcpip_init+0x6c>)
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ead0:	4a16      	ldr	r2, [pc, #88]	; (800eb2c <tcpip_init+0x70>)
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ead6:	2106      	movs	r1, #6
 800ead8:	4815      	ldr	r0, [pc, #84]	; (800eb30 <tcpip_init+0x74>)
 800eada:	f00d fd1b 	bl	801c514 <sys_mbox_new>
 800eade:	4603      	mov	r3, r0
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d006      	beq.n	800eaf2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800eae4:	4b13      	ldr	r3, [pc, #76]	; (800eb34 <tcpip_init+0x78>)
 800eae6:	f240 2261 	movw	r2, #609	; 0x261
 800eaea:	4913      	ldr	r1, [pc, #76]	; (800eb38 <tcpip_init+0x7c>)
 800eaec:	4813      	ldr	r0, [pc, #76]	; (800eb3c <tcpip_init+0x80>)
 800eaee:	f010 febb 	bl	801f868 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800eaf2:	4813      	ldr	r0, [pc, #76]	; (800eb40 <tcpip_init+0x84>)
 800eaf4:	f00d fe54 	bl	801c7a0 <sys_mutex_new>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d006      	beq.n	800eb0c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800eafe:	4b0d      	ldr	r3, [pc, #52]	; (800eb34 <tcpip_init+0x78>)
 800eb00:	f240 2265 	movw	r2, #613	; 0x265
 800eb04:	490f      	ldr	r1, [pc, #60]	; (800eb44 <tcpip_init+0x88>)
 800eb06:	480d      	ldr	r0, [pc, #52]	; (800eb3c <tcpip_init+0x80>)
 800eb08:	f010 feae 	bl	801f868 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800eb0c:	2318      	movs	r3, #24
 800eb0e:	9300      	str	r3, [sp, #0]
 800eb10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb14:	2200      	movs	r2, #0
 800eb16:	490c      	ldr	r1, [pc, #48]	; (800eb48 <tcpip_init+0x8c>)
 800eb18:	480c      	ldr	r0, [pc, #48]	; (800eb4c <tcpip_init+0x90>)
 800eb1a:	f00d fe73 	bl	801c804 <sys_thread_new>
}
 800eb1e:	bf00      	nop
 800eb20:	3708      	adds	r7, #8
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}
 800eb26:	bf00      	nop
 800eb28:	2000143c 	.word	0x2000143c
 800eb2c:	20001440 	.word	0x20001440
 800eb30:	20001444 	.word	0x20001444
 800eb34:	08022844 	.word	0x08022844
 800eb38:	080228cc 	.word	0x080228cc
 800eb3c:	08022894 	.word	0x08022894
 800eb40:	200050bc 	.word	0x200050bc
 800eb44:	080228f0 	.word	0x080228f0
 800eb48:	0800e84d 	.word	0x0800e84d
 800eb4c:	08022914 	.word	0x08022914

0800eb50 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800eb50:	b480      	push	{r7}
 800eb52:	b083      	sub	sp, #12
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	4603      	mov	r3, r0
 800eb58:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800eb5a:	88fb      	ldrh	r3, [r7, #6]
 800eb5c:	021b      	lsls	r3, r3, #8
 800eb5e:	b21a      	sxth	r2, r3
 800eb60:	88fb      	ldrh	r3, [r7, #6]
 800eb62:	0a1b      	lsrs	r3, r3, #8
 800eb64:	b29b      	uxth	r3, r3
 800eb66:	b21b      	sxth	r3, r3
 800eb68:	4313      	orrs	r3, r2
 800eb6a:	b21b      	sxth	r3, r3
 800eb6c:	b29b      	uxth	r3, r3
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	370c      	adds	r7, #12
 800eb72:	46bd      	mov	sp, r7
 800eb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb78:	4770      	bx	lr

0800eb7a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800eb7a:	b480      	push	{r7}
 800eb7c:	b083      	sub	sp, #12
 800eb7e:	af00      	add	r7, sp, #0
 800eb80:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	061a      	lsls	r2, r3, #24
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	021b      	lsls	r3, r3, #8
 800eb8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eb8e:	431a      	orrs	r2, r3
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	0a1b      	lsrs	r3, r3, #8
 800eb94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eb98:	431a      	orrs	r2, r3
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	0e1b      	lsrs	r3, r3, #24
 800eb9e:	4313      	orrs	r3, r2
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	370c      	adds	r7, #12
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr

0800ebac <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800ebac:	b480      	push	{r7}
 800ebae:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800ebb0:	bf00      	nop
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb8:	4770      	bx	lr
	...

0800ebbc <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b083      	sub	sp, #12
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	6039      	str	r1, [r7, #0]
 800ebc6:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 800ebc8:	79fb      	ldrb	r3, [r7, #7]
 800ebca:	2b01      	cmp	r3, #1
 800ebcc:	d80f      	bhi.n	800ebee <dns_setserver+0x32>
    if (dnsserver != NULL) {
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d006      	beq.n	800ebe2 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 800ebd4:	79fb      	ldrb	r3, [r7, #7]
 800ebd6:	4909      	ldr	r1, [pc, #36]	; (800ebfc <dns_setserver+0x40>)
 800ebd8:	683a      	ldr	r2, [r7, #0]
 800ebda:	6812      	ldr	r2, [r2, #0]
 800ebdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 800ebe0:	e005      	b.n	800ebee <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 800ebe2:	79fb      	ldrb	r3, [r7, #7]
 800ebe4:	4905      	ldr	r1, [pc, #20]	; (800ebfc <dns_setserver+0x40>)
 800ebe6:	4a06      	ldr	r2, [pc, #24]	; (800ec00 <dns_setserver+0x44>)
 800ebe8:	6812      	ldr	r2, [r2, #0]
 800ebea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ebee:	bf00      	nop
 800ebf0:	370c      	adds	r7, #12
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf8:	4770      	bx	lr
 800ebfa:	bf00      	nop
 800ebfc:	200018c8 	.word	0x200018c8
 800ec00:	08025ac4 	.word	0x08025ac4

0800ec04 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 800ec08:	f000 faa8 	bl	800f15c <dns_check_entries>
}
 800ec0c:	bf00      	nop
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b090      	sub	sp, #64	; 0x40
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	4603      	mov	r3, r0
 800ec18:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800ec1a:	79fa      	ldrb	r2, [r7, #7]
 800ec1c:	4613      	mov	r3, r2
 800ec1e:	011b      	lsls	r3, r3, #4
 800ec20:	4413      	add	r3, r2
 800ec22:	011b      	lsls	r3, r3, #4
 800ec24:	4a6c      	ldr	r2, [pc, #432]	; (800edd8 <dns_send+0x1c8>)
 800ec26:	4413      	add	r3, r2
 800ec28:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800ec2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec2c:	7adb      	ldrb	r3, [r3, #11]
 800ec2e:	2b01      	cmp	r3, #1
 800ec30:	d906      	bls.n	800ec40 <dns_send+0x30>
 800ec32:	4b6a      	ldr	r3, [pc, #424]	; (800eddc <dns_send+0x1cc>)
 800ec34:	f240 22fa 	movw	r2, #762	; 0x2fa
 800ec38:	4969      	ldr	r1, [pc, #420]	; (800ede0 <dns_send+0x1d0>)
 800ec3a:	486a      	ldr	r0, [pc, #424]	; (800ede4 <dns_send+0x1d4>)
 800ec3c:	f010 fe14 	bl	801f868 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800ec40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec42:	7adb      	ldrb	r3, [r3, #11]
 800ec44:	461a      	mov	r2, r3
 800ec46:	4b68      	ldr	r3, [pc, #416]	; (800ede8 <dns_send+0x1d8>)
 800ec48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d109      	bne.n	800ec64 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800ec50:	79fb      	ldrb	r3, [r7, #7]
 800ec52:	2100      	movs	r1, #0
 800ec54:	4618      	mov	r0, r3
 800ec56:	f000 f8cb 	bl	800edf0 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800ec5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800ec60:	2300      	movs	r3, #0
 800ec62:	e0b4      	b.n	800edce <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800ec64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec66:	3310      	adds	r3, #16
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f7f1 fab1 	bl	80001d0 <strlen>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	b29b      	uxth	r3, r3
 800ec72:	3312      	adds	r3, #18
 800ec74:	b29b      	uxth	r3, r3
 800ec76:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ec7a:	4619      	mov	r1, r3
 800ec7c:	2036      	movs	r0, #54	; 0x36
 800ec7e:	f001 fb61 	bl	8010344 <pbuf_alloc>
 800ec82:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800ec84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	f000 8095 	beq.w	800edb6 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800ec8c:	f107 0310 	add.w	r3, r7, #16
 800ec90:	220c      	movs	r2, #12
 800ec92:	2100      	movs	r1, #0
 800ec94:	4618      	mov	r0, r3
 800ec96:	f00f ff71 	bl	801eb7c <memset>
    hdr.id = lwip_htons(entry->txid);
 800ec9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec9c:	891b      	ldrh	r3, [r3, #8]
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f7ff ff56 	bl	800eb50 <lwip_htons>
 800eca4:	4603      	mov	r3, r0
 800eca6:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 800eca8:	2301      	movs	r3, #1
 800ecaa:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800ecac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ecb0:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800ecb2:	f107 0310 	add.w	r3, r7, #16
 800ecb6:	220c      	movs	r2, #12
 800ecb8:	4619      	mov	r1, r3
 800ecba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ecbc:	f002 f90c 	bl	8010ed8 <pbuf_take>
    hostname = entry->name;
 800ecc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc2:	3310      	adds	r3, #16
 800ecc4:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 800ecc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecc8:	3b01      	subs	r3, #1
 800ecca:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800eccc:	230c      	movs	r3, #12
 800ecce:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 800ecd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd2:	3301      	adds	r3, #1
 800ecd4:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 800ecd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800ecda:	2300      	movs	r3, #0
 800ecdc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ece0:	e007      	b.n	800ecf2 <dns_send+0xe2>
        ++n;
 800ece2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ece6:	3301      	adds	r3, #1
 800ece8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800ecec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecee:	3301      	adds	r3, #1
 800ecf0:	63bb      	str	r3, [r7, #56]	; 0x38
 800ecf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	2b2e      	cmp	r3, #46	; 0x2e
 800ecf8:	d003      	beq.n	800ed02 <dns_send+0xf2>
 800ecfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecfc:	781b      	ldrb	r3, [r3, #0]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d1ef      	bne.n	800ece2 <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800ed02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed06:	1ad3      	subs	r3, r2, r3
 800ed08:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 800ed0a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800ed0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed10:	4413      	add	r3, r2
 800ed12:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ed16:	4293      	cmp	r3, r2
 800ed18:	dc53      	bgt.n	800edc2 <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 800ed1a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed1e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed20:	4619      	mov	r1, r3
 800ed22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed24:	f002 fa06 	bl	8011134 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800ed28:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	b29b      	uxth	r3, r3
 800ed2e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ed30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ed32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed34:	f002 f962 	bl	8010ffc <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800ed38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed3c:	b29a      	uxth	r2, r3
 800ed3e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed40:	4413      	add	r3, r2
 800ed42:	b29b      	uxth	r3, r3
 800ed44:	3301      	adds	r3, #1
 800ed46:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 800ed48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed4a:	781b      	ldrb	r3, [r3, #0]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d1bf      	bne.n	800ecd0 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 800ed50:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed52:	2200      	movs	r2, #0
 800ed54:	4619      	mov	r1, r3
 800ed56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed58:	f002 f9ec 	bl	8011134 <pbuf_put_at>
    query_idx++;
 800ed5c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed5e:	3301      	adds	r3, #1
 800ed60:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800ed62:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed66:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800ed68:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed6c:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800ed6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed70:	f107 010c 	add.w	r1, r7, #12
 800ed74:	2204      	movs	r2, #4
 800ed76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed78:	f002 f940 	bl	8010ffc <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800ed7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7e:	7bdb      	ldrb	r3, [r3, #15]
 800ed80:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800ed84:	2335      	movs	r3, #53	; 0x35
 800ed86:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 800ed88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed8a:	7adb      	ldrb	r3, [r3, #11]
 800ed8c:	009b      	lsls	r3, r3, #2
 800ed8e:	4a16      	ldr	r2, [pc, #88]	; (800ede8 <dns_send+0x1d8>)
 800ed90:	4413      	add	r3, r2
 800ed92:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800ed94:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ed98:	4a14      	ldr	r2, [pc, #80]	; (800edec <dns_send+0x1dc>)
 800ed9a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ed9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eda0:	69fa      	ldr	r2, [r7, #28]
 800eda2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eda4:	f008 fdf4 	bl	8017990 <udp_sendto>
 800eda8:	4603      	mov	r3, r0
 800edaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 800edae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edb0:	f001 fdde 	bl	8010970 <pbuf_free>
 800edb4:	e002      	b.n	800edbc <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 800edb6:	23ff      	movs	r3, #255	; 0xff
 800edb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 800edbc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800edc0:	e005      	b.n	800edce <dns_send+0x1be>
        goto overflow_return;
 800edc2:	bf00      	nop
overflow_return:
  pbuf_free(p);
 800edc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edc6:	f001 fdd3 	bl	8010970 <pbuf_free>
  return ERR_VAL;
 800edca:	f06f 0305 	mvn.w	r3, #5
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3740      	adds	r7, #64	; 0x40
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
 800edd6:	bf00      	nop
 800edd8:	20001458 	.word	0x20001458
 800eddc:	08022924 	.word	0x08022924
 800ede0:	08022954 	.word	0x08022954
 800ede4:	0802296c 	.word	0x0802296c
 800ede8:	200018c8 	.word	0x200018c8
 800edec:	20001448 	.word	0x20001448

0800edf0 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800edf0:	b590      	push	{r4, r7, lr}
 800edf2:	b085      	sub	sp, #20
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	4603      	mov	r3, r0
 800edf8:	6039      	str	r1, [r7, #0]
 800edfa:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800edfc:	2300      	movs	r3, #0
 800edfe:	73fb      	strb	r3, [r7, #15]
 800ee00:	e03d      	b.n	800ee7e <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800ee02:	7bfa      	ldrb	r2, [r7, #15]
 800ee04:	4957      	ldr	r1, [pc, #348]	; (800ef64 <dns_call_found+0x174>)
 800ee06:	4613      	mov	r3, r2
 800ee08:	005b      	lsls	r3, r3, #1
 800ee0a:	4413      	add	r3, r2
 800ee0c:	009b      	lsls	r3, r3, #2
 800ee0e:	440b      	add	r3, r1
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d030      	beq.n	800ee78 <dns_call_found+0x88>
 800ee16:	7bfa      	ldrb	r2, [r7, #15]
 800ee18:	4952      	ldr	r1, [pc, #328]	; (800ef64 <dns_call_found+0x174>)
 800ee1a:	4613      	mov	r3, r2
 800ee1c:	005b      	lsls	r3, r3, #1
 800ee1e:	4413      	add	r3, r2
 800ee20:	009b      	lsls	r3, r3, #2
 800ee22:	440b      	add	r3, r1
 800ee24:	3308      	adds	r3, #8
 800ee26:	781b      	ldrb	r3, [r3, #0]
 800ee28:	79fa      	ldrb	r2, [r7, #7]
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d124      	bne.n	800ee78 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800ee2e:	7bfa      	ldrb	r2, [r7, #15]
 800ee30:	494c      	ldr	r1, [pc, #304]	; (800ef64 <dns_call_found+0x174>)
 800ee32:	4613      	mov	r3, r2
 800ee34:	005b      	lsls	r3, r3, #1
 800ee36:	4413      	add	r3, r2
 800ee38:	009b      	lsls	r3, r3, #2
 800ee3a:	440b      	add	r3, r1
 800ee3c:	681c      	ldr	r4, [r3, #0]
 800ee3e:	79fa      	ldrb	r2, [r7, #7]
 800ee40:	4613      	mov	r3, r2
 800ee42:	011b      	lsls	r3, r3, #4
 800ee44:	4413      	add	r3, r2
 800ee46:	011b      	lsls	r3, r3, #4
 800ee48:	3310      	adds	r3, #16
 800ee4a:	4a47      	ldr	r2, [pc, #284]	; (800ef68 <dns_call_found+0x178>)
 800ee4c:	1898      	adds	r0, r3, r2
 800ee4e:	7bfa      	ldrb	r2, [r7, #15]
 800ee50:	4944      	ldr	r1, [pc, #272]	; (800ef64 <dns_call_found+0x174>)
 800ee52:	4613      	mov	r3, r2
 800ee54:	005b      	lsls	r3, r3, #1
 800ee56:	4413      	add	r3, r2
 800ee58:	009b      	lsls	r3, r3, #2
 800ee5a:	440b      	add	r3, r1
 800ee5c:	3304      	adds	r3, #4
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	461a      	mov	r2, r3
 800ee62:	6839      	ldr	r1, [r7, #0]
 800ee64:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800ee66:	7bfa      	ldrb	r2, [r7, #15]
 800ee68:	493e      	ldr	r1, [pc, #248]	; (800ef64 <dns_call_found+0x174>)
 800ee6a:	4613      	mov	r3, r2
 800ee6c:	005b      	lsls	r3, r3, #1
 800ee6e:	4413      	add	r3, r2
 800ee70:	009b      	lsls	r3, r3, #2
 800ee72:	440b      	add	r3, r1
 800ee74:	2200      	movs	r2, #0
 800ee76:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800ee78:	7bfb      	ldrb	r3, [r7, #15]
 800ee7a:	3301      	adds	r3, #1
 800ee7c:	73fb      	strb	r3, [r7, #15]
 800ee7e:	7bfb      	ldrb	r3, [r7, #15]
 800ee80:	2b03      	cmp	r3, #3
 800ee82:	d9be      	bls.n	800ee02 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800ee84:	2300      	movs	r3, #0
 800ee86:	73fb      	strb	r3, [r7, #15]
 800ee88:	e031      	b.n	800eeee <dns_call_found+0xfe>
    if (i == idx) {
 800ee8a:	7bfa      	ldrb	r2, [r7, #15]
 800ee8c:	79fb      	ldrb	r3, [r7, #7]
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	d029      	beq.n	800eee6 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800ee92:	7bfa      	ldrb	r2, [r7, #15]
 800ee94:	4934      	ldr	r1, [pc, #208]	; (800ef68 <dns_call_found+0x178>)
 800ee96:	4613      	mov	r3, r2
 800ee98:	011b      	lsls	r3, r3, #4
 800ee9a:	4413      	add	r3, r2
 800ee9c:	011b      	lsls	r3, r3, #4
 800ee9e:	440b      	add	r3, r1
 800eea0:	330a      	adds	r3, #10
 800eea2:	781b      	ldrb	r3, [r3, #0]
 800eea4:	2b02      	cmp	r3, #2
 800eea6:	d11f      	bne.n	800eee8 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800eea8:	7bfa      	ldrb	r2, [r7, #15]
 800eeaa:	492f      	ldr	r1, [pc, #188]	; (800ef68 <dns_call_found+0x178>)
 800eeac:	4613      	mov	r3, r2
 800eeae:	011b      	lsls	r3, r3, #4
 800eeb0:	4413      	add	r3, r2
 800eeb2:	011b      	lsls	r3, r3, #4
 800eeb4:	440b      	add	r3, r1
 800eeb6:	330f      	adds	r3, #15
 800eeb8:	7819      	ldrb	r1, [r3, #0]
 800eeba:	79fa      	ldrb	r2, [r7, #7]
 800eebc:	482a      	ldr	r0, [pc, #168]	; (800ef68 <dns_call_found+0x178>)
 800eebe:	4613      	mov	r3, r2
 800eec0:	011b      	lsls	r3, r3, #4
 800eec2:	4413      	add	r3, r2
 800eec4:	011b      	lsls	r3, r3, #4
 800eec6:	4403      	add	r3, r0
 800eec8:	330f      	adds	r3, #15
 800eeca:	781b      	ldrb	r3, [r3, #0]
 800eecc:	4299      	cmp	r1, r3
 800eece:	d10b      	bne.n	800eee8 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800eed0:	79fa      	ldrb	r2, [r7, #7]
 800eed2:	4925      	ldr	r1, [pc, #148]	; (800ef68 <dns_call_found+0x178>)
 800eed4:	4613      	mov	r3, r2
 800eed6:	011b      	lsls	r3, r3, #4
 800eed8:	4413      	add	r3, r2
 800eeda:	011b      	lsls	r3, r3, #4
 800eedc:	440b      	add	r3, r1
 800eede:	330f      	adds	r3, #15
 800eee0:	2204      	movs	r2, #4
 800eee2:	701a      	strb	r2, [r3, #0]
        break;
 800eee4:	e006      	b.n	800eef4 <dns_call_found+0x104>
      continue; /* only check other requests */
 800eee6:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800eee8:	7bfb      	ldrb	r3, [r7, #15]
 800eeea:	3301      	adds	r3, #1
 800eeec:	73fb      	strb	r3, [r7, #15]
 800eeee:	7bfb      	ldrb	r3, [r7, #15]
 800eef0:	2b03      	cmp	r3, #3
 800eef2:	d9ca      	bls.n	800ee8a <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800eef4:	79fa      	ldrb	r2, [r7, #7]
 800eef6:	491c      	ldr	r1, [pc, #112]	; (800ef68 <dns_call_found+0x178>)
 800eef8:	4613      	mov	r3, r2
 800eefa:	011b      	lsls	r3, r3, #4
 800eefc:	4413      	add	r3, r2
 800eefe:	011b      	lsls	r3, r3, #4
 800ef00:	440b      	add	r3, r1
 800ef02:	330f      	adds	r3, #15
 800ef04:	781b      	ldrb	r3, [r3, #0]
 800ef06:	2b03      	cmp	r3, #3
 800ef08:	d827      	bhi.n	800ef5a <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800ef0a:	79fa      	ldrb	r2, [r7, #7]
 800ef0c:	4916      	ldr	r1, [pc, #88]	; (800ef68 <dns_call_found+0x178>)
 800ef0e:	4613      	mov	r3, r2
 800ef10:	011b      	lsls	r3, r3, #4
 800ef12:	4413      	add	r3, r2
 800ef14:	011b      	lsls	r3, r3, #4
 800ef16:	440b      	add	r3, r1
 800ef18:	330f      	adds	r3, #15
 800ef1a:	781b      	ldrb	r3, [r3, #0]
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	4b13      	ldr	r3, [pc, #76]	; (800ef6c <dns_call_found+0x17c>)
 800ef20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef24:	4618      	mov	r0, r3
 800ef26:	f009 f819 	bl	8017f5c <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800ef2a:	79fa      	ldrb	r2, [r7, #7]
 800ef2c:	490e      	ldr	r1, [pc, #56]	; (800ef68 <dns_call_found+0x178>)
 800ef2e:	4613      	mov	r3, r2
 800ef30:	011b      	lsls	r3, r3, #4
 800ef32:	4413      	add	r3, r2
 800ef34:	011b      	lsls	r3, r3, #4
 800ef36:	440b      	add	r3, r1
 800ef38:	330f      	adds	r3, #15
 800ef3a:	781b      	ldrb	r3, [r3, #0]
 800ef3c:	4619      	mov	r1, r3
 800ef3e:	4b0b      	ldr	r3, [pc, #44]	; (800ef6c <dns_call_found+0x17c>)
 800ef40:	2200      	movs	r2, #0
 800ef42:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800ef46:	79fa      	ldrb	r2, [r7, #7]
 800ef48:	4907      	ldr	r1, [pc, #28]	; (800ef68 <dns_call_found+0x178>)
 800ef4a:	4613      	mov	r3, r2
 800ef4c:	011b      	lsls	r3, r3, #4
 800ef4e:	4413      	add	r3, r2
 800ef50:	011b      	lsls	r3, r3, #4
 800ef52:	440b      	add	r3, r1
 800ef54:	330f      	adds	r3, #15
 800ef56:	2204      	movs	r2, #4
 800ef58:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800ef5a:	bf00      	nop
 800ef5c:	3714      	adds	r7, #20
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd90      	pop	{r4, r7, pc}
 800ef62:	bf00      	nop
 800ef64:	20001898 	.word	0x20001898
 800ef68:	20001458 	.word	0x20001458
 800ef6c:	20001448 	.word	0x20001448

0800ef70 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b082      	sub	sp, #8
 800ef74:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800ef76:	f010 fc8f 	bl	801f898 <rand>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800ef7e:	2300      	movs	r3, #0
 800ef80:	71fb      	strb	r3, [r7, #7]
 800ef82:	e01a      	b.n	800efba <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800ef84:	79fa      	ldrb	r2, [r7, #7]
 800ef86:	4911      	ldr	r1, [pc, #68]	; (800efcc <dns_create_txid+0x5c>)
 800ef88:	4613      	mov	r3, r2
 800ef8a:	011b      	lsls	r3, r3, #4
 800ef8c:	4413      	add	r3, r2
 800ef8e:	011b      	lsls	r3, r3, #4
 800ef90:	440b      	add	r3, r1
 800ef92:	330a      	adds	r3, #10
 800ef94:	781b      	ldrb	r3, [r3, #0]
 800ef96:	2b02      	cmp	r3, #2
 800ef98:	d10c      	bne.n	800efb4 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800ef9a:	79fa      	ldrb	r2, [r7, #7]
 800ef9c:	490b      	ldr	r1, [pc, #44]	; (800efcc <dns_create_txid+0x5c>)
 800ef9e:	4613      	mov	r3, r2
 800efa0:	011b      	lsls	r3, r3, #4
 800efa2:	4413      	add	r3, r2
 800efa4:	011b      	lsls	r3, r3, #4
 800efa6:	440b      	add	r3, r1
 800efa8:	3308      	adds	r3, #8
 800efaa:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800efac:	88ba      	ldrh	r2, [r7, #4]
 800efae:	429a      	cmp	r2, r3
 800efb0:	d100      	bne.n	800efb4 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800efb2:	e7e0      	b.n	800ef76 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800efb4:	79fb      	ldrb	r3, [r7, #7]
 800efb6:	3301      	adds	r3, #1
 800efb8:	71fb      	strb	r3, [r7, #7]
 800efba:	79fb      	ldrb	r3, [r7, #7]
 800efbc:	2b03      	cmp	r3, #3
 800efbe:	d9e1      	bls.n	800ef84 <dns_create_txid+0x14>
    }
  }

  return txid;
 800efc0:	88bb      	ldrh	r3, [r7, #4]
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	3708      	adds	r7, #8
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}
 800efca:	bf00      	nop
 800efcc:	20001458 	.word	0x20001458

0800efd0 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 800efd0:	b480      	push	{r7}
 800efd2:	b085      	sub	sp, #20
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 800efd8:	2300      	movs	r3, #0
 800efda:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d00d      	beq.n	800effe <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	7adb      	ldrb	r3, [r3, #11]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d109      	bne.n	800effe <dns_backupserver_available+0x2e>
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	7adb      	ldrb	r3, [r3, #11]
 800efee:	3301      	adds	r3, #1
 800eff0:	4a06      	ldr	r2, [pc, #24]	; (800f00c <dns_backupserver_available+0x3c>)
 800eff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d001      	beq.n	800effe <dns_backupserver_available+0x2e>
      ret = 1;
 800effa:	2301      	movs	r3, #1
 800effc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800effe:	7bfb      	ldrb	r3, [r7, #15]
}
 800f000:	4618      	mov	r0, r3
 800f002:	3714      	adds	r7, #20
 800f004:	46bd      	mov	sp, r7
 800f006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00a:	4770      	bx	lr
 800f00c:	200018c8 	.word	0x200018c8

0800f010 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b084      	sub	sp, #16
 800f014:	af00      	add	r7, sp, #0
 800f016:	4603      	mov	r3, r0
 800f018:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800f01a:	79fa      	ldrb	r2, [r7, #7]
 800f01c:	4613      	mov	r3, r2
 800f01e:	011b      	lsls	r3, r3, #4
 800f020:	4413      	add	r3, r2
 800f022:	011b      	lsls	r3, r3, #4
 800f024:	4a48      	ldr	r2, [pc, #288]	; (800f148 <dns_check_entry+0x138>)
 800f026:	4413      	add	r3, r2
 800f028:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800f02a:	79fb      	ldrb	r3, [r7, #7]
 800f02c:	2b03      	cmp	r3, #3
 800f02e:	d906      	bls.n	800f03e <dns_check_entry+0x2e>
 800f030:	4b46      	ldr	r3, [pc, #280]	; (800f14c <dns_check_entry+0x13c>)
 800f032:	f240 421c 	movw	r2, #1052	; 0x41c
 800f036:	4946      	ldr	r1, [pc, #280]	; (800f150 <dns_check_entry+0x140>)
 800f038:	4846      	ldr	r0, [pc, #280]	; (800f154 <dns_check_entry+0x144>)
 800f03a:	f010 fc15 	bl	801f868 <iprintf>

  switch (entry->state) {
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	7a9b      	ldrb	r3, [r3, #10]
 800f042:	2b03      	cmp	r3, #3
 800f044:	d86f      	bhi.n	800f126 <dns_check_entry+0x116>
 800f046:	a201      	add	r2, pc, #4	; (adr r2, 800f04c <dns_check_entry+0x3c>)
 800f048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f04c:	0800f137 	.word	0x0800f137
 800f050:	0800f05d 	.word	0x0800f05d
 800f054:	0800f08f 	.word	0x0800f08f
 800f058:	0800f105 	.word	0x0800f105
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800f05c:	f7ff ff88 	bl	800ef70 <dns_create_txid>
 800f060:	4603      	mov	r3, r0
 800f062:	461a      	mov	r2, r3
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	2202      	movs	r2, #2
 800f06c:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	2200      	movs	r2, #0
 800f072:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	2201      	movs	r2, #1
 800f078:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	2200      	movs	r2, #0
 800f07e:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800f080:	79fb      	ldrb	r3, [r7, #7]
 800f082:	4618      	mov	r0, r3
 800f084:	f7ff fdc4 	bl	800ec10 <dns_send>
 800f088:	4603      	mov	r3, r0
 800f08a:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 800f08c:	e058      	b.n	800f140 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	7b1b      	ldrb	r3, [r3, #12]
 800f092:	3b01      	subs	r3, #1
 800f094:	b2da      	uxtb	r2, r3
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	731a      	strb	r2, [r3, #12]
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	7b1b      	ldrb	r3, [r3, #12]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d14b      	bne.n	800f13a <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	7b5b      	ldrb	r3, [r3, #13]
 800f0a6:	3301      	adds	r3, #1
 800f0a8:	b2da      	uxtb	r2, r3
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	735a      	strb	r2, [r3, #13]
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	7b5b      	ldrb	r3, [r3, #13]
 800f0b2:	2b04      	cmp	r3, #4
 800f0b4:	d11b      	bne.n	800f0ee <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800f0b6:	68f8      	ldr	r0, [r7, #12]
 800f0b8:	f7ff ff8a 	bl	800efd0 <dns_backupserver_available>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d00c      	beq.n	800f0dc <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	7adb      	ldrb	r3, [r3, #11]
 800f0c6:	3301      	adds	r3, #1
 800f0c8:	b2da      	uxtb	r2, r3
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	2201      	movs	r2, #1
 800f0d2:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	735a      	strb	r2, [r3, #13]
 800f0da:	e00c      	b.n	800f0f6 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800f0dc:	79fb      	ldrb	r3, [r7, #7]
 800f0de:	2100      	movs	r1, #0
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f7ff fe85 	bl	800edf0 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	729a      	strb	r2, [r3, #10]
            break;
 800f0ec:	e028      	b.n	800f140 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	7b5a      	ldrb	r2, [r3, #13]
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800f0f6:	79fb      	ldrb	r3, [r7, #7]
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f7ff fd89 	bl	800ec10 <dns_send>
 800f0fe:	4603      	mov	r3, r0
 800f100:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800f102:	e01a      	b.n	800f13a <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d008      	beq.n	800f11e <dns_check_entry+0x10e>
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	1e5a      	subs	r2, r3, #1
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	601a      	str	r2, [r3, #0]
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d10f      	bne.n	800f13e <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	2200      	movs	r2, #0
 800f122:	729a      	strb	r2, [r3, #10]
      }
      break;
 800f124:	e00b      	b.n	800f13e <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800f126:	4b09      	ldr	r3, [pc, #36]	; (800f14c <dns_check_entry+0x13c>)
 800f128:	f240 425b 	movw	r2, #1115	; 0x45b
 800f12c:	490a      	ldr	r1, [pc, #40]	; (800f158 <dns_check_entry+0x148>)
 800f12e:	4809      	ldr	r0, [pc, #36]	; (800f154 <dns_check_entry+0x144>)
 800f130:	f010 fb9a 	bl	801f868 <iprintf>
      break;
 800f134:	e004      	b.n	800f140 <dns_check_entry+0x130>
      break;
 800f136:	bf00      	nop
 800f138:	e002      	b.n	800f140 <dns_check_entry+0x130>
      break;
 800f13a:	bf00      	nop
 800f13c:	e000      	b.n	800f140 <dns_check_entry+0x130>
      break;
 800f13e:	bf00      	nop
  }
}
 800f140:	bf00      	nop
 800f142:	3710      	adds	r7, #16
 800f144:	46bd      	mov	sp, r7
 800f146:	bd80      	pop	{r7, pc}
 800f148:	20001458 	.word	0x20001458
 800f14c:	08022924 	.word	0x08022924
 800f150:	08022994 	.word	0x08022994
 800f154:	0802296c 	.word	0x0802296c
 800f158:	080229b0 	.word	0x080229b0

0800f15c <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b082      	sub	sp, #8
 800f160:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800f162:	2300      	movs	r3, #0
 800f164:	71fb      	strb	r3, [r7, #7]
 800f166:	e006      	b.n	800f176 <dns_check_entries+0x1a>
    dns_check_entry(i);
 800f168:	79fb      	ldrb	r3, [r7, #7]
 800f16a:	4618      	mov	r0, r3
 800f16c:	f7ff ff50 	bl	800f010 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800f170:	79fb      	ldrb	r3, [r7, #7]
 800f172:	3301      	adds	r3, #1
 800f174:	71fb      	strb	r3, [r7, #7]
 800f176:	79fb      	ldrb	r3, [r7, #7]
 800f178:	2b03      	cmp	r3, #3
 800f17a:	d9f5      	bls.n	800f168 <dns_check_entries+0xc>
  }
}
 800f17c:	bf00      	nop
 800f17e:	bf00      	nop
 800f180:	3708      	adds	r7, #8
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}

0800f186 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f186:	b580      	push	{r7, lr}
 800f188:	b082      	sub	sp, #8
 800f18a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f18c:	2300      	movs	r3, #0
 800f18e:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800f190:	f00d fafa 	bl	801c788 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800f194:	f000 f8d6 	bl	800f344 <mem_init>
  memp_init();
 800f198:	f000 fc32 	bl	800fa00 <memp_init>
  pbuf_init();
  netif_init();
 800f19c:	f000 fcf8 	bl	800fb90 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f1a0:	f008 fa00 	bl	80175a4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f1a4:	f001 ffe8 	bl	8011178 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800f1a8:	f7ff fd00 	bl	800ebac <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800f1ac:	f008 f940 	bl	8017430 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f1b0:	bf00      	nop
 800f1b2:	3708      	adds	r7, #8
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}

0800f1b8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800f1b8:	b480      	push	{r7}
 800f1ba:	b083      	sub	sp, #12
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	4603      	mov	r3, r0
 800f1c0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800f1c2:	4b05      	ldr	r3, [pc, #20]	; (800f1d8 <ptr_to_mem+0x20>)
 800f1c4:	681a      	ldr	r2, [r3, #0]
 800f1c6:	88fb      	ldrh	r3, [r7, #6]
 800f1c8:	4413      	add	r3, r2
}
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	370c      	adds	r7, #12
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d4:	4770      	bx	lr
 800f1d6:	bf00      	nop
 800f1d8:	200018d0 	.word	0x200018d0

0800f1dc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800f1dc:	b480      	push	{r7}
 800f1de:	b083      	sub	sp, #12
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800f1e4:	4b05      	ldr	r3, [pc, #20]	; (800f1fc <mem_to_ptr+0x20>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	687a      	ldr	r2, [r7, #4]
 800f1ea:	1ad3      	subs	r3, r2, r3
 800f1ec:	b29b      	uxth	r3, r3
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	370c      	adds	r7, #12
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f8:	4770      	bx	lr
 800f1fa:	bf00      	nop
 800f1fc:	200018d0 	.word	0x200018d0

0800f200 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f200:	b590      	push	{r4, r7, lr}
 800f202:	b085      	sub	sp, #20
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f208:	4b45      	ldr	r3, [pc, #276]	; (800f320 <plug_holes+0x120>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	687a      	ldr	r2, [r7, #4]
 800f20e:	429a      	cmp	r2, r3
 800f210:	d206      	bcs.n	800f220 <plug_holes+0x20>
 800f212:	4b44      	ldr	r3, [pc, #272]	; (800f324 <plug_holes+0x124>)
 800f214:	f240 12df 	movw	r2, #479	; 0x1df
 800f218:	4943      	ldr	r1, [pc, #268]	; (800f328 <plug_holes+0x128>)
 800f21a:	4844      	ldr	r0, [pc, #272]	; (800f32c <plug_holes+0x12c>)
 800f21c:	f010 fb24 	bl	801f868 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f220:	4b43      	ldr	r3, [pc, #268]	; (800f330 <plug_holes+0x130>)
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	687a      	ldr	r2, [r7, #4]
 800f226:	429a      	cmp	r2, r3
 800f228:	d306      	bcc.n	800f238 <plug_holes+0x38>
 800f22a:	4b3e      	ldr	r3, [pc, #248]	; (800f324 <plug_holes+0x124>)
 800f22c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f230:	4940      	ldr	r1, [pc, #256]	; (800f334 <plug_holes+0x134>)
 800f232:	483e      	ldr	r0, [pc, #248]	; (800f32c <plug_holes+0x12c>)
 800f234:	f010 fb18 	bl	801f868 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	791b      	ldrb	r3, [r3, #4]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d006      	beq.n	800f24e <plug_holes+0x4e>
 800f240:	4b38      	ldr	r3, [pc, #224]	; (800f324 <plug_holes+0x124>)
 800f242:	f240 12e1 	movw	r2, #481	; 0x1e1
 800f246:	493c      	ldr	r1, [pc, #240]	; (800f338 <plug_holes+0x138>)
 800f248:	4838      	ldr	r0, [pc, #224]	; (800f32c <plug_holes+0x12c>)
 800f24a:	f010 fb0d 	bl	801f868 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	881b      	ldrh	r3, [r3, #0]
 800f252:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f256:	d906      	bls.n	800f266 <plug_holes+0x66>
 800f258:	4b32      	ldr	r3, [pc, #200]	; (800f324 <plug_holes+0x124>)
 800f25a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800f25e:	4937      	ldr	r1, [pc, #220]	; (800f33c <plug_holes+0x13c>)
 800f260:	4832      	ldr	r0, [pc, #200]	; (800f32c <plug_holes+0x12c>)
 800f262:	f010 fb01 	bl	801f868 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	881b      	ldrh	r3, [r3, #0]
 800f26a:	4618      	mov	r0, r3
 800f26c:	f7ff ffa4 	bl	800f1b8 <ptr_to_mem>
 800f270:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f272:	687a      	ldr	r2, [r7, #4]
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	429a      	cmp	r2, r3
 800f278:	d024      	beq.n	800f2c4 <plug_holes+0xc4>
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	791b      	ldrb	r3, [r3, #4]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d120      	bne.n	800f2c4 <plug_holes+0xc4>
 800f282:	4b2b      	ldr	r3, [pc, #172]	; (800f330 <plug_holes+0x130>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	68fa      	ldr	r2, [r7, #12]
 800f288:	429a      	cmp	r2, r3
 800f28a:	d01b      	beq.n	800f2c4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f28c:	4b2c      	ldr	r3, [pc, #176]	; (800f340 <plug_holes+0x140>)
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	68fa      	ldr	r2, [r7, #12]
 800f292:	429a      	cmp	r2, r3
 800f294:	d102      	bne.n	800f29c <plug_holes+0x9c>
      lfree = mem;
 800f296:	4a2a      	ldr	r2, [pc, #168]	; (800f340 <plug_holes+0x140>)
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	881a      	ldrh	r2, [r3, #0]
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	881b      	ldrh	r3, [r3, #0]
 800f2a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f2ac:	d00a      	beq.n	800f2c4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	881b      	ldrh	r3, [r3, #0]
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f7ff ff80 	bl	800f1b8 <ptr_to_mem>
 800f2b8:	4604      	mov	r4, r0
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f7ff ff8e 	bl	800f1dc <mem_to_ptr>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	885b      	ldrh	r3, [r3, #2]
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f7ff ff75 	bl	800f1b8 <ptr_to_mem>
 800f2ce:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f2d0:	68ba      	ldr	r2, [r7, #8]
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	d01f      	beq.n	800f318 <plug_holes+0x118>
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	791b      	ldrb	r3, [r3, #4]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d11b      	bne.n	800f318 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f2e0:	4b17      	ldr	r3, [pc, #92]	; (800f340 <plug_holes+0x140>)
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	687a      	ldr	r2, [r7, #4]
 800f2e6:	429a      	cmp	r2, r3
 800f2e8:	d102      	bne.n	800f2f0 <plug_holes+0xf0>
      lfree = pmem;
 800f2ea:	4a15      	ldr	r2, [pc, #84]	; (800f340 <plug_holes+0x140>)
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	881a      	ldrh	r2, [r3, #0]
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	881b      	ldrh	r3, [r3, #0]
 800f2fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f300:	d00a      	beq.n	800f318 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	881b      	ldrh	r3, [r3, #0]
 800f306:	4618      	mov	r0, r3
 800f308:	f7ff ff56 	bl	800f1b8 <ptr_to_mem>
 800f30c:	4604      	mov	r4, r0
 800f30e:	68b8      	ldr	r0, [r7, #8]
 800f310:	f7ff ff64 	bl	800f1dc <mem_to_ptr>
 800f314:	4603      	mov	r3, r0
 800f316:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800f318:	bf00      	nop
 800f31a:	3714      	adds	r7, #20
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd90      	pop	{r4, r7, pc}
 800f320:	200018d0 	.word	0x200018d0
 800f324:	080229d0 	.word	0x080229d0
 800f328:	08022a00 	.word	0x08022a00
 800f32c:	08022a18 	.word	0x08022a18
 800f330:	200018d4 	.word	0x200018d4
 800f334:	08022a40 	.word	0x08022a40
 800f338:	08022a5c 	.word	0x08022a5c
 800f33c:	08022a78 	.word	0x08022a78
 800f340:	200018dc 	.word	0x200018dc

0800f344 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b082      	sub	sp, #8
 800f348:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f34a:	4b1f      	ldr	r3, [pc, #124]	; (800f3c8 <mem_init+0x84>)
 800f34c:	3303      	adds	r3, #3
 800f34e:	f023 0303 	bic.w	r3, r3, #3
 800f352:	461a      	mov	r2, r3
 800f354:	4b1d      	ldr	r3, [pc, #116]	; (800f3cc <mem_init+0x88>)
 800f356:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f358:	4b1c      	ldr	r3, [pc, #112]	; (800f3cc <mem_init+0x88>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f364:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2200      	movs	r2, #0
 800f36a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2200      	movs	r2, #0
 800f370:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800f372:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800f376:	f7ff ff1f 	bl	800f1b8 <ptr_to_mem>
 800f37a:	4603      	mov	r3, r0
 800f37c:	4a14      	ldr	r2, [pc, #80]	; (800f3d0 <mem_init+0x8c>)
 800f37e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f380:	4b13      	ldr	r3, [pc, #76]	; (800f3d0 <mem_init+0x8c>)
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	2201      	movs	r2, #1
 800f386:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f388:	4b11      	ldr	r3, [pc, #68]	; (800f3d0 <mem_init+0x8c>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f390:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f392:	4b0f      	ldr	r3, [pc, #60]	; (800f3d0 <mem_init+0x8c>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f39a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f39c:	4b0b      	ldr	r3, [pc, #44]	; (800f3cc <mem_init+0x88>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	4a0c      	ldr	r2, [pc, #48]	; (800f3d4 <mem_init+0x90>)
 800f3a2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f3a4:	480c      	ldr	r0, [pc, #48]	; (800f3d8 <mem_init+0x94>)
 800f3a6:	f00d f9fb 	bl	801c7a0 <sys_mutex_new>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d006      	beq.n	800f3be <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800f3b0:	4b0a      	ldr	r3, [pc, #40]	; (800f3dc <mem_init+0x98>)
 800f3b2:	f240 221f 	movw	r2, #543	; 0x21f
 800f3b6:	490a      	ldr	r1, [pc, #40]	; (800f3e0 <mem_init+0x9c>)
 800f3b8:	480a      	ldr	r0, [pc, #40]	; (800f3e4 <mem_init+0xa0>)
 800f3ba:	f010 fa55 	bl	801f868 <iprintf>
  }
}
 800f3be:	bf00      	nop
 800f3c0:	3708      	adds	r7, #8
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}
 800f3c6:	bf00      	nop
 800f3c8:	200050d8 	.word	0x200050d8
 800f3cc:	200018d0 	.word	0x200018d0
 800f3d0:	200018d4 	.word	0x200018d4
 800f3d4:	200018dc 	.word	0x200018dc
 800f3d8:	200018d8 	.word	0x200018d8
 800f3dc:	080229d0 	.word	0x080229d0
 800f3e0:	08022aa4 	.word	0x08022aa4
 800f3e4:	08022a18 	.word	0x08022a18

0800f3e8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b086      	sub	sp, #24
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f7ff fef3 	bl	800f1dc <mem_to_ptr>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	881b      	ldrh	r3, [r3, #0]
 800f3fe:	4618      	mov	r0, r3
 800f400:	f7ff feda 	bl	800f1b8 <ptr_to_mem>
 800f404:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	885b      	ldrh	r3, [r3, #2]
 800f40a:	4618      	mov	r0, r3
 800f40c:	f7ff fed4 	bl	800f1b8 <ptr_to_mem>
 800f410:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	881b      	ldrh	r3, [r3, #0]
 800f416:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f41a:	d818      	bhi.n	800f44e <mem_link_valid+0x66>
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	885b      	ldrh	r3, [r3, #2]
 800f420:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f424:	d813      	bhi.n	800f44e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f42a:	8afa      	ldrh	r2, [r7, #22]
 800f42c:	429a      	cmp	r2, r3
 800f42e:	d004      	beq.n	800f43a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	881b      	ldrh	r3, [r3, #0]
 800f434:	8afa      	ldrh	r2, [r7, #22]
 800f436:	429a      	cmp	r2, r3
 800f438:	d109      	bne.n	800f44e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f43a:	4b08      	ldr	r3, [pc, #32]	; (800f45c <mem_link_valid+0x74>)
 800f43c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f43e:	693a      	ldr	r2, [r7, #16]
 800f440:	429a      	cmp	r2, r3
 800f442:	d006      	beq.n	800f452 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f444:	693b      	ldr	r3, [r7, #16]
 800f446:	885b      	ldrh	r3, [r3, #2]
 800f448:	8afa      	ldrh	r2, [r7, #22]
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d001      	beq.n	800f452 <mem_link_valid+0x6a>
    return 0;
 800f44e:	2300      	movs	r3, #0
 800f450:	e000      	b.n	800f454 <mem_link_valid+0x6c>
  }
  return 1;
 800f452:	2301      	movs	r3, #1
}
 800f454:	4618      	mov	r0, r3
 800f456:	3718      	adds	r7, #24
 800f458:	46bd      	mov	sp, r7
 800f45a:	bd80      	pop	{r7, pc}
 800f45c:	200018d4 	.word	0x200018d4

0800f460 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b088      	sub	sp, #32
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d070      	beq.n	800f550 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f003 0303 	and.w	r3, r3, #3
 800f474:	2b00      	cmp	r3, #0
 800f476:	d00d      	beq.n	800f494 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800f478:	4b37      	ldr	r3, [pc, #220]	; (800f558 <mem_free+0xf8>)
 800f47a:	f240 2273 	movw	r2, #627	; 0x273
 800f47e:	4937      	ldr	r1, [pc, #220]	; (800f55c <mem_free+0xfc>)
 800f480:	4837      	ldr	r0, [pc, #220]	; (800f560 <mem_free+0x100>)
 800f482:	f010 f9f1 	bl	801f868 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f486:	f00d f9dd 	bl	801c844 <sys_arch_protect>
 800f48a:	60f8      	str	r0, [r7, #12]
 800f48c:	68f8      	ldr	r0, [r7, #12]
 800f48e:	f00d f9e7 	bl	801c860 <sys_arch_unprotect>
    return;
 800f492:	e05e      	b.n	800f552 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	3b08      	subs	r3, #8
 800f498:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f49a:	4b32      	ldr	r3, [pc, #200]	; (800f564 <mem_free+0x104>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	69fa      	ldr	r2, [r7, #28]
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	d306      	bcc.n	800f4b2 <mem_free+0x52>
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f103 020c 	add.w	r2, r3, #12
 800f4aa:	4b2f      	ldr	r3, [pc, #188]	; (800f568 <mem_free+0x108>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	429a      	cmp	r2, r3
 800f4b0:	d90d      	bls.n	800f4ce <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f4b2:	4b29      	ldr	r3, [pc, #164]	; (800f558 <mem_free+0xf8>)
 800f4b4:	f240 227f 	movw	r2, #639	; 0x27f
 800f4b8:	492c      	ldr	r1, [pc, #176]	; (800f56c <mem_free+0x10c>)
 800f4ba:	4829      	ldr	r0, [pc, #164]	; (800f560 <mem_free+0x100>)
 800f4bc:	f010 f9d4 	bl	801f868 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f4c0:	f00d f9c0 	bl	801c844 <sys_arch_protect>
 800f4c4:	6138      	str	r0, [r7, #16]
 800f4c6:	6938      	ldr	r0, [r7, #16]
 800f4c8:	f00d f9ca 	bl	801c860 <sys_arch_unprotect>
    return;
 800f4cc:	e041      	b.n	800f552 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f4ce:	4828      	ldr	r0, [pc, #160]	; (800f570 <mem_free+0x110>)
 800f4d0:	f00d f97c 	bl	801c7cc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800f4d4:	69fb      	ldr	r3, [r7, #28]
 800f4d6:	791b      	ldrb	r3, [r3, #4]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d110      	bne.n	800f4fe <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800f4dc:	4b1e      	ldr	r3, [pc, #120]	; (800f558 <mem_free+0xf8>)
 800f4de:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800f4e2:	4924      	ldr	r1, [pc, #144]	; (800f574 <mem_free+0x114>)
 800f4e4:	481e      	ldr	r0, [pc, #120]	; (800f560 <mem_free+0x100>)
 800f4e6:	f010 f9bf 	bl	801f868 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f4ea:	4821      	ldr	r0, [pc, #132]	; (800f570 <mem_free+0x110>)
 800f4ec:	f00d f97d 	bl	801c7ea <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f4f0:	f00d f9a8 	bl	801c844 <sys_arch_protect>
 800f4f4:	6178      	str	r0, [r7, #20]
 800f4f6:	6978      	ldr	r0, [r7, #20]
 800f4f8:	f00d f9b2 	bl	801c860 <sys_arch_unprotect>
    return;
 800f4fc:	e029      	b.n	800f552 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800f4fe:	69f8      	ldr	r0, [r7, #28]
 800f500:	f7ff ff72 	bl	800f3e8 <mem_link_valid>
 800f504:	4603      	mov	r3, r0
 800f506:	2b00      	cmp	r3, #0
 800f508:	d110      	bne.n	800f52c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f50a:	4b13      	ldr	r3, [pc, #76]	; (800f558 <mem_free+0xf8>)
 800f50c:	f240 2295 	movw	r2, #661	; 0x295
 800f510:	4919      	ldr	r1, [pc, #100]	; (800f578 <mem_free+0x118>)
 800f512:	4813      	ldr	r0, [pc, #76]	; (800f560 <mem_free+0x100>)
 800f514:	f010 f9a8 	bl	801f868 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f518:	4815      	ldr	r0, [pc, #84]	; (800f570 <mem_free+0x110>)
 800f51a:	f00d f966 	bl	801c7ea <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f51e:	f00d f991 	bl	801c844 <sys_arch_protect>
 800f522:	61b8      	str	r0, [r7, #24]
 800f524:	69b8      	ldr	r0, [r7, #24]
 800f526:	f00d f99b 	bl	801c860 <sys_arch_unprotect>
    return;
 800f52a:	e012      	b.n	800f552 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f52c:	69fb      	ldr	r3, [r7, #28]
 800f52e:	2200      	movs	r2, #0
 800f530:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f532:	4b12      	ldr	r3, [pc, #72]	; (800f57c <mem_free+0x11c>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	69fa      	ldr	r2, [r7, #28]
 800f538:	429a      	cmp	r2, r3
 800f53a:	d202      	bcs.n	800f542 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f53c:	4a0f      	ldr	r2, [pc, #60]	; (800f57c <mem_free+0x11c>)
 800f53e:	69fb      	ldr	r3, [r7, #28]
 800f540:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f542:	69f8      	ldr	r0, [r7, #28]
 800f544:	f7ff fe5c 	bl	800f200 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f548:	4809      	ldr	r0, [pc, #36]	; (800f570 <mem_free+0x110>)
 800f54a:	f00d f94e 	bl	801c7ea <sys_mutex_unlock>
 800f54e:	e000      	b.n	800f552 <mem_free+0xf2>
    return;
 800f550:	bf00      	nop
}
 800f552:	3720      	adds	r7, #32
 800f554:	46bd      	mov	sp, r7
 800f556:	bd80      	pop	{r7, pc}
 800f558:	080229d0 	.word	0x080229d0
 800f55c:	08022ac0 	.word	0x08022ac0
 800f560:	08022a18 	.word	0x08022a18
 800f564:	200018d0 	.word	0x200018d0
 800f568:	200018d4 	.word	0x200018d4
 800f56c:	08022ae4 	.word	0x08022ae4
 800f570:	200018d8 	.word	0x200018d8
 800f574:	08022b00 	.word	0x08022b00
 800f578:	08022b28 	.word	0x08022b28
 800f57c:	200018dc 	.word	0x200018dc

0800f580 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b088      	sub	sp, #32
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
 800f588:	460b      	mov	r3, r1
 800f58a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f58c:	887b      	ldrh	r3, [r7, #2]
 800f58e:	3303      	adds	r3, #3
 800f590:	b29b      	uxth	r3, r3
 800f592:	f023 0303 	bic.w	r3, r3, #3
 800f596:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800f598:	8bfb      	ldrh	r3, [r7, #30]
 800f59a:	2b0b      	cmp	r3, #11
 800f59c:	d801      	bhi.n	800f5a2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f59e:	230c      	movs	r3, #12
 800f5a0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f5a2:	8bfb      	ldrh	r3, [r7, #30]
 800f5a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f5a8:	d803      	bhi.n	800f5b2 <mem_trim+0x32>
 800f5aa:	8bfa      	ldrh	r2, [r7, #30]
 800f5ac:	887b      	ldrh	r3, [r7, #2]
 800f5ae:	429a      	cmp	r2, r3
 800f5b0:	d201      	bcs.n	800f5b6 <mem_trim+0x36>
    return NULL;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	e0d8      	b.n	800f768 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f5b6:	4b6e      	ldr	r3, [pc, #440]	; (800f770 <mem_trim+0x1f0>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	687a      	ldr	r2, [r7, #4]
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	d304      	bcc.n	800f5ca <mem_trim+0x4a>
 800f5c0:	4b6c      	ldr	r3, [pc, #432]	; (800f774 <mem_trim+0x1f4>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	687a      	ldr	r2, [r7, #4]
 800f5c6:	429a      	cmp	r2, r3
 800f5c8:	d306      	bcc.n	800f5d8 <mem_trim+0x58>
 800f5ca:	4b6b      	ldr	r3, [pc, #428]	; (800f778 <mem_trim+0x1f8>)
 800f5cc:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f5d0:	496a      	ldr	r1, [pc, #424]	; (800f77c <mem_trim+0x1fc>)
 800f5d2:	486b      	ldr	r0, [pc, #428]	; (800f780 <mem_trim+0x200>)
 800f5d4:	f010 f948 	bl	801f868 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f5d8:	4b65      	ldr	r3, [pc, #404]	; (800f770 <mem_trim+0x1f0>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	687a      	ldr	r2, [r7, #4]
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	d304      	bcc.n	800f5ec <mem_trim+0x6c>
 800f5e2:	4b64      	ldr	r3, [pc, #400]	; (800f774 <mem_trim+0x1f4>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	687a      	ldr	r2, [r7, #4]
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	d307      	bcc.n	800f5fc <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f5ec:	f00d f92a 	bl	801c844 <sys_arch_protect>
 800f5f0:	60b8      	str	r0, [r7, #8]
 800f5f2:	68b8      	ldr	r0, [r7, #8]
 800f5f4:	f00d f934 	bl	801c860 <sys_arch_unprotect>
    return rmem;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	e0b5      	b.n	800f768 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	3b08      	subs	r3, #8
 800f600:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f602:	69b8      	ldr	r0, [r7, #24]
 800f604:	f7ff fdea 	bl	800f1dc <mem_to_ptr>
 800f608:	4603      	mov	r3, r0
 800f60a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f60c:	69bb      	ldr	r3, [r7, #24]
 800f60e:	881a      	ldrh	r2, [r3, #0]
 800f610:	8afb      	ldrh	r3, [r7, #22]
 800f612:	1ad3      	subs	r3, r2, r3
 800f614:	b29b      	uxth	r3, r3
 800f616:	3b08      	subs	r3, #8
 800f618:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f61a:	8bfa      	ldrh	r2, [r7, #30]
 800f61c:	8abb      	ldrh	r3, [r7, #20]
 800f61e:	429a      	cmp	r2, r3
 800f620:	d906      	bls.n	800f630 <mem_trim+0xb0>
 800f622:	4b55      	ldr	r3, [pc, #340]	; (800f778 <mem_trim+0x1f8>)
 800f624:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800f628:	4956      	ldr	r1, [pc, #344]	; (800f784 <mem_trim+0x204>)
 800f62a:	4855      	ldr	r0, [pc, #340]	; (800f780 <mem_trim+0x200>)
 800f62c:	f010 f91c 	bl	801f868 <iprintf>
  if (newsize > size) {
 800f630:	8bfa      	ldrh	r2, [r7, #30]
 800f632:	8abb      	ldrh	r3, [r7, #20]
 800f634:	429a      	cmp	r2, r3
 800f636:	d901      	bls.n	800f63c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800f638:	2300      	movs	r3, #0
 800f63a:	e095      	b.n	800f768 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800f63c:	8bfa      	ldrh	r2, [r7, #30]
 800f63e:	8abb      	ldrh	r3, [r7, #20]
 800f640:	429a      	cmp	r2, r3
 800f642:	d101      	bne.n	800f648 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	e08f      	b.n	800f768 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f648:	484f      	ldr	r0, [pc, #316]	; (800f788 <mem_trim+0x208>)
 800f64a:	f00d f8bf 	bl	801c7cc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800f64e:	69bb      	ldr	r3, [r7, #24]
 800f650:	881b      	ldrh	r3, [r3, #0]
 800f652:	4618      	mov	r0, r3
 800f654:	f7ff fdb0 	bl	800f1b8 <ptr_to_mem>
 800f658:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	791b      	ldrb	r3, [r3, #4]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d13f      	bne.n	800f6e2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f662:	69bb      	ldr	r3, [r7, #24]
 800f664:	881b      	ldrh	r3, [r3, #0]
 800f666:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f66a:	d106      	bne.n	800f67a <mem_trim+0xfa>
 800f66c:	4b42      	ldr	r3, [pc, #264]	; (800f778 <mem_trim+0x1f8>)
 800f66e:	f240 22f5 	movw	r2, #757	; 0x2f5
 800f672:	4946      	ldr	r1, [pc, #280]	; (800f78c <mem_trim+0x20c>)
 800f674:	4842      	ldr	r0, [pc, #264]	; (800f780 <mem_trim+0x200>)
 800f676:	f010 f8f7 	bl	801f868 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f67a:	693b      	ldr	r3, [r7, #16]
 800f67c:	881b      	ldrh	r3, [r3, #0]
 800f67e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f680:	8afa      	ldrh	r2, [r7, #22]
 800f682:	8bfb      	ldrh	r3, [r7, #30]
 800f684:	4413      	add	r3, r2
 800f686:	b29b      	uxth	r3, r3
 800f688:	3308      	adds	r3, #8
 800f68a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f68c:	4b40      	ldr	r3, [pc, #256]	; (800f790 <mem_trim+0x210>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	693a      	ldr	r2, [r7, #16]
 800f692:	429a      	cmp	r2, r3
 800f694:	d106      	bne.n	800f6a4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800f696:	89fb      	ldrh	r3, [r7, #14]
 800f698:	4618      	mov	r0, r3
 800f69a:	f7ff fd8d 	bl	800f1b8 <ptr_to_mem>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	4a3b      	ldr	r2, [pc, #236]	; (800f790 <mem_trim+0x210>)
 800f6a2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f6a4:	89fb      	ldrh	r3, [r7, #14]
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7ff fd86 	bl	800f1b8 <ptr_to_mem>
 800f6ac:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f6ae:	693b      	ldr	r3, [r7, #16]
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f6b4:	693b      	ldr	r3, [r7, #16]
 800f6b6:	89ba      	ldrh	r2, [r7, #12]
 800f6b8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	8afa      	ldrh	r2, [r7, #22]
 800f6be:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f6c0:	69bb      	ldr	r3, [r7, #24]
 800f6c2:	89fa      	ldrh	r2, [r7, #14]
 800f6c4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f6c6:	693b      	ldr	r3, [r7, #16]
 800f6c8:	881b      	ldrh	r3, [r3, #0]
 800f6ca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f6ce:	d047      	beq.n	800f760 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f6d0:	693b      	ldr	r3, [r7, #16]
 800f6d2:	881b      	ldrh	r3, [r3, #0]
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f7ff fd6f 	bl	800f1b8 <ptr_to_mem>
 800f6da:	4602      	mov	r2, r0
 800f6dc:	89fb      	ldrh	r3, [r7, #14]
 800f6de:	8053      	strh	r3, [r2, #2]
 800f6e0:	e03e      	b.n	800f760 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f6e2:	8bfb      	ldrh	r3, [r7, #30]
 800f6e4:	f103 0214 	add.w	r2, r3, #20
 800f6e8:	8abb      	ldrh	r3, [r7, #20]
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	d838      	bhi.n	800f760 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f6ee:	8afa      	ldrh	r2, [r7, #22]
 800f6f0:	8bfb      	ldrh	r3, [r7, #30]
 800f6f2:	4413      	add	r3, r2
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	3308      	adds	r3, #8
 800f6f8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f6fa:	69bb      	ldr	r3, [r7, #24]
 800f6fc:	881b      	ldrh	r3, [r3, #0]
 800f6fe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f702:	d106      	bne.n	800f712 <mem_trim+0x192>
 800f704:	4b1c      	ldr	r3, [pc, #112]	; (800f778 <mem_trim+0x1f8>)
 800f706:	f240 3216 	movw	r2, #790	; 0x316
 800f70a:	4920      	ldr	r1, [pc, #128]	; (800f78c <mem_trim+0x20c>)
 800f70c:	481c      	ldr	r0, [pc, #112]	; (800f780 <mem_trim+0x200>)
 800f70e:	f010 f8ab 	bl	801f868 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f712:	89fb      	ldrh	r3, [r7, #14]
 800f714:	4618      	mov	r0, r3
 800f716:	f7ff fd4f 	bl	800f1b8 <ptr_to_mem>
 800f71a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f71c:	4b1c      	ldr	r3, [pc, #112]	; (800f790 <mem_trim+0x210>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	693a      	ldr	r2, [r7, #16]
 800f722:	429a      	cmp	r2, r3
 800f724:	d202      	bcs.n	800f72c <mem_trim+0x1ac>
      lfree = mem2;
 800f726:	4a1a      	ldr	r2, [pc, #104]	; (800f790 <mem_trim+0x210>)
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	2200      	movs	r2, #0
 800f730:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f732:	69bb      	ldr	r3, [r7, #24]
 800f734:	881a      	ldrh	r2, [r3, #0]
 800f736:	693b      	ldr	r3, [r7, #16]
 800f738:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f73a:	693b      	ldr	r3, [r7, #16]
 800f73c:	8afa      	ldrh	r2, [r7, #22]
 800f73e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f740:	69bb      	ldr	r3, [r7, #24]
 800f742:	89fa      	ldrh	r2, [r7, #14]
 800f744:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f746:	693b      	ldr	r3, [r7, #16]
 800f748:	881b      	ldrh	r3, [r3, #0]
 800f74a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f74e:	d007      	beq.n	800f760 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f750:	693b      	ldr	r3, [r7, #16]
 800f752:	881b      	ldrh	r3, [r3, #0]
 800f754:	4618      	mov	r0, r3
 800f756:	f7ff fd2f 	bl	800f1b8 <ptr_to_mem>
 800f75a:	4602      	mov	r2, r0
 800f75c:	89fb      	ldrh	r3, [r7, #14]
 800f75e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f760:	4809      	ldr	r0, [pc, #36]	; (800f788 <mem_trim+0x208>)
 800f762:	f00d f842 	bl	801c7ea <sys_mutex_unlock>
  return rmem;
 800f766:	687b      	ldr	r3, [r7, #4]
}
 800f768:	4618      	mov	r0, r3
 800f76a:	3720      	adds	r7, #32
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}
 800f770:	200018d0 	.word	0x200018d0
 800f774:	200018d4 	.word	0x200018d4
 800f778:	080229d0 	.word	0x080229d0
 800f77c:	08022b5c 	.word	0x08022b5c
 800f780:	08022a18 	.word	0x08022a18
 800f784:	08022b74 	.word	0x08022b74
 800f788:	200018d8 	.word	0x200018d8
 800f78c:	08022b94 	.word	0x08022b94
 800f790:	200018dc 	.word	0x200018dc

0800f794 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b088      	sub	sp, #32
 800f798:	af00      	add	r7, sp, #0
 800f79a:	4603      	mov	r3, r0
 800f79c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f79e:	88fb      	ldrh	r3, [r7, #6]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d101      	bne.n	800f7a8 <mem_malloc+0x14>
    return NULL;
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	e0e2      	b.n	800f96e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f7a8:	88fb      	ldrh	r3, [r7, #6]
 800f7aa:	3303      	adds	r3, #3
 800f7ac:	b29b      	uxth	r3, r3
 800f7ae:	f023 0303 	bic.w	r3, r3, #3
 800f7b2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f7b4:	8bbb      	ldrh	r3, [r7, #28]
 800f7b6:	2b0b      	cmp	r3, #11
 800f7b8:	d801      	bhi.n	800f7be <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f7ba:	230c      	movs	r3, #12
 800f7bc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f7be:	8bbb      	ldrh	r3, [r7, #28]
 800f7c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f7c4:	d803      	bhi.n	800f7ce <mem_malloc+0x3a>
 800f7c6:	8bba      	ldrh	r2, [r7, #28]
 800f7c8:	88fb      	ldrh	r3, [r7, #6]
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d201      	bcs.n	800f7d2 <mem_malloc+0x3e>
    return NULL;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	e0cd      	b.n	800f96e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f7d2:	4869      	ldr	r0, [pc, #420]	; (800f978 <mem_malloc+0x1e4>)
 800f7d4:	f00c fffa 	bl	801c7cc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f7d8:	4b68      	ldr	r3, [pc, #416]	; (800f97c <mem_malloc+0x1e8>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f7ff fcfd 	bl	800f1dc <mem_to_ptr>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	83fb      	strh	r3, [r7, #30]
 800f7e6:	e0b7      	b.n	800f958 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f7e8:	8bfb      	ldrh	r3, [r7, #30]
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f7ff fce4 	bl	800f1b8 <ptr_to_mem>
 800f7f0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f7f2:	697b      	ldr	r3, [r7, #20]
 800f7f4:	791b      	ldrb	r3, [r3, #4]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	f040 80a7 	bne.w	800f94a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	881b      	ldrh	r3, [r3, #0]
 800f800:	461a      	mov	r2, r3
 800f802:	8bfb      	ldrh	r3, [r7, #30]
 800f804:	1ad3      	subs	r3, r2, r3
 800f806:	f1a3 0208 	sub.w	r2, r3, #8
 800f80a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f80c:	429a      	cmp	r2, r3
 800f80e:	f0c0 809c 	bcc.w	800f94a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	881b      	ldrh	r3, [r3, #0]
 800f816:	461a      	mov	r2, r3
 800f818:	8bfb      	ldrh	r3, [r7, #30]
 800f81a:	1ad3      	subs	r3, r2, r3
 800f81c:	f1a3 0208 	sub.w	r2, r3, #8
 800f820:	8bbb      	ldrh	r3, [r7, #28]
 800f822:	3314      	adds	r3, #20
 800f824:	429a      	cmp	r2, r3
 800f826:	d333      	bcc.n	800f890 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f828:	8bfa      	ldrh	r2, [r7, #30]
 800f82a:	8bbb      	ldrh	r3, [r7, #28]
 800f82c:	4413      	add	r3, r2
 800f82e:	b29b      	uxth	r3, r3
 800f830:	3308      	adds	r3, #8
 800f832:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f834:	8a7b      	ldrh	r3, [r7, #18]
 800f836:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f83a:	d106      	bne.n	800f84a <mem_malloc+0xb6>
 800f83c:	4b50      	ldr	r3, [pc, #320]	; (800f980 <mem_malloc+0x1ec>)
 800f83e:	f240 3287 	movw	r2, #903	; 0x387
 800f842:	4950      	ldr	r1, [pc, #320]	; (800f984 <mem_malloc+0x1f0>)
 800f844:	4850      	ldr	r0, [pc, #320]	; (800f988 <mem_malloc+0x1f4>)
 800f846:	f010 f80f 	bl	801f868 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f84a:	8a7b      	ldrh	r3, [r7, #18]
 800f84c:	4618      	mov	r0, r3
 800f84e:	f7ff fcb3 	bl	800f1b8 <ptr_to_mem>
 800f852:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	2200      	movs	r2, #0
 800f858:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	881a      	ldrh	r2, [r3, #0]
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	8bfa      	ldrh	r2, [r7, #30]
 800f866:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	8a7a      	ldrh	r2, [r7, #18]
 800f86c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	2201      	movs	r2, #1
 800f872:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	881b      	ldrh	r3, [r3, #0]
 800f878:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f87c:	d00b      	beq.n	800f896 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	881b      	ldrh	r3, [r3, #0]
 800f882:	4618      	mov	r0, r3
 800f884:	f7ff fc98 	bl	800f1b8 <ptr_to_mem>
 800f888:	4602      	mov	r2, r0
 800f88a:	8a7b      	ldrh	r3, [r7, #18]
 800f88c:	8053      	strh	r3, [r2, #2]
 800f88e:	e002      	b.n	800f896 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f890:	697b      	ldr	r3, [r7, #20]
 800f892:	2201      	movs	r2, #1
 800f894:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f896:	4b39      	ldr	r3, [pc, #228]	; (800f97c <mem_malloc+0x1e8>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	697a      	ldr	r2, [r7, #20]
 800f89c:	429a      	cmp	r2, r3
 800f89e:	d127      	bne.n	800f8f0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800f8a0:	4b36      	ldr	r3, [pc, #216]	; (800f97c <mem_malloc+0x1e8>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f8a6:	e005      	b.n	800f8b4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f8a8:	69bb      	ldr	r3, [r7, #24]
 800f8aa:	881b      	ldrh	r3, [r3, #0]
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f7ff fc83 	bl	800f1b8 <ptr_to_mem>
 800f8b2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f8b4:	69bb      	ldr	r3, [r7, #24]
 800f8b6:	791b      	ldrb	r3, [r3, #4]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d004      	beq.n	800f8c6 <mem_malloc+0x132>
 800f8bc:	4b33      	ldr	r3, [pc, #204]	; (800f98c <mem_malloc+0x1f8>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	69ba      	ldr	r2, [r7, #24]
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d1f0      	bne.n	800f8a8 <mem_malloc+0x114>
          }
          lfree = cur;
 800f8c6:	4a2d      	ldr	r2, [pc, #180]	; (800f97c <mem_malloc+0x1e8>)
 800f8c8:	69bb      	ldr	r3, [r7, #24]
 800f8ca:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f8cc:	4b2b      	ldr	r3, [pc, #172]	; (800f97c <mem_malloc+0x1e8>)
 800f8ce:	681a      	ldr	r2, [r3, #0]
 800f8d0:	4b2e      	ldr	r3, [pc, #184]	; (800f98c <mem_malloc+0x1f8>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	429a      	cmp	r2, r3
 800f8d6:	d00b      	beq.n	800f8f0 <mem_malloc+0x15c>
 800f8d8:	4b28      	ldr	r3, [pc, #160]	; (800f97c <mem_malloc+0x1e8>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	791b      	ldrb	r3, [r3, #4]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d006      	beq.n	800f8f0 <mem_malloc+0x15c>
 800f8e2:	4b27      	ldr	r3, [pc, #156]	; (800f980 <mem_malloc+0x1ec>)
 800f8e4:	f240 32b5 	movw	r2, #949	; 0x3b5
 800f8e8:	4929      	ldr	r1, [pc, #164]	; (800f990 <mem_malloc+0x1fc>)
 800f8ea:	4827      	ldr	r0, [pc, #156]	; (800f988 <mem_malloc+0x1f4>)
 800f8ec:	f00f ffbc 	bl	801f868 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f8f0:	4821      	ldr	r0, [pc, #132]	; (800f978 <mem_malloc+0x1e4>)
 800f8f2:	f00c ff7a 	bl	801c7ea <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f8f6:	8bba      	ldrh	r2, [r7, #28]
 800f8f8:	697b      	ldr	r3, [r7, #20]
 800f8fa:	4413      	add	r3, r2
 800f8fc:	3308      	adds	r3, #8
 800f8fe:	4a23      	ldr	r2, [pc, #140]	; (800f98c <mem_malloc+0x1f8>)
 800f900:	6812      	ldr	r2, [r2, #0]
 800f902:	4293      	cmp	r3, r2
 800f904:	d906      	bls.n	800f914 <mem_malloc+0x180>
 800f906:	4b1e      	ldr	r3, [pc, #120]	; (800f980 <mem_malloc+0x1ec>)
 800f908:	f240 32b9 	movw	r2, #953	; 0x3b9
 800f90c:	4921      	ldr	r1, [pc, #132]	; (800f994 <mem_malloc+0x200>)
 800f90e:	481e      	ldr	r0, [pc, #120]	; (800f988 <mem_malloc+0x1f4>)
 800f910:	f00f ffaa 	bl	801f868 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f914:	697b      	ldr	r3, [r7, #20]
 800f916:	f003 0303 	and.w	r3, r3, #3
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d006      	beq.n	800f92c <mem_malloc+0x198>
 800f91e:	4b18      	ldr	r3, [pc, #96]	; (800f980 <mem_malloc+0x1ec>)
 800f920:	f240 32bb 	movw	r2, #955	; 0x3bb
 800f924:	491c      	ldr	r1, [pc, #112]	; (800f998 <mem_malloc+0x204>)
 800f926:	4818      	ldr	r0, [pc, #96]	; (800f988 <mem_malloc+0x1f4>)
 800f928:	f00f ff9e 	bl	801f868 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f92c:	697b      	ldr	r3, [r7, #20]
 800f92e:	f003 0303 	and.w	r3, r3, #3
 800f932:	2b00      	cmp	r3, #0
 800f934:	d006      	beq.n	800f944 <mem_malloc+0x1b0>
 800f936:	4b12      	ldr	r3, [pc, #72]	; (800f980 <mem_malloc+0x1ec>)
 800f938:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f93c:	4917      	ldr	r1, [pc, #92]	; (800f99c <mem_malloc+0x208>)
 800f93e:	4812      	ldr	r0, [pc, #72]	; (800f988 <mem_malloc+0x1f4>)
 800f940:	f00f ff92 	bl	801f868 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f944:	697b      	ldr	r3, [r7, #20]
 800f946:	3308      	adds	r3, #8
 800f948:	e011      	b.n	800f96e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800f94a:	8bfb      	ldrh	r3, [r7, #30]
 800f94c:	4618      	mov	r0, r3
 800f94e:	f7ff fc33 	bl	800f1b8 <ptr_to_mem>
 800f952:	4603      	mov	r3, r0
 800f954:	881b      	ldrh	r3, [r3, #0]
 800f956:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f958:	8bfa      	ldrh	r2, [r7, #30]
 800f95a:	8bbb      	ldrh	r3, [r7, #28]
 800f95c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800f960:	429a      	cmp	r2, r3
 800f962:	f4ff af41 	bcc.w	800f7e8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f966:	4804      	ldr	r0, [pc, #16]	; (800f978 <mem_malloc+0x1e4>)
 800f968:	f00c ff3f 	bl	801c7ea <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f96c:	2300      	movs	r3, #0
}
 800f96e:	4618      	mov	r0, r3
 800f970:	3720      	adds	r7, #32
 800f972:	46bd      	mov	sp, r7
 800f974:	bd80      	pop	{r7, pc}
 800f976:	bf00      	nop
 800f978:	200018d8 	.word	0x200018d8
 800f97c:	200018dc 	.word	0x200018dc
 800f980:	080229d0 	.word	0x080229d0
 800f984:	08022b94 	.word	0x08022b94
 800f988:	08022a18 	.word	0x08022a18
 800f98c:	200018d4 	.word	0x200018d4
 800f990:	08022ba8 	.word	0x08022ba8
 800f994:	08022bc4 	.word	0x08022bc4
 800f998:	08022bf4 	.word	0x08022bf4
 800f99c:	08022c24 	.word	0x08022c24

0800f9a0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f9a0:	b480      	push	{r7}
 800f9a2:	b085      	sub	sp, #20
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	689b      	ldr	r3, [r3, #8]
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	685b      	ldr	r3, [r3, #4]
 800f9b4:	3303      	adds	r3, #3
 800f9b6:	f023 0303 	bic.w	r3, r3, #3
 800f9ba:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f9bc:	2300      	movs	r3, #0
 800f9be:	60fb      	str	r3, [r7, #12]
 800f9c0:	e011      	b.n	800f9e6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	689b      	ldr	r3, [r3, #8]
 800f9c6:	681a      	ldr	r2, [r3, #0]
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	689b      	ldr	r3, [r3, #8]
 800f9d0:	68ba      	ldr	r2, [r7, #8]
 800f9d2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	881b      	ldrh	r3, [r3, #0]
 800f9d8:	461a      	mov	r2, r3
 800f9da:	68bb      	ldr	r3, [r7, #8]
 800f9dc:	4413      	add	r3, r2
 800f9de:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	3301      	adds	r3, #1
 800f9e4:	60fb      	str	r3, [r7, #12]
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	885b      	ldrh	r3, [r3, #2]
 800f9ea:	461a      	mov	r2, r3
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	4293      	cmp	r3, r2
 800f9f0:	dbe7      	blt.n	800f9c2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f9f2:	bf00      	nop
 800f9f4:	bf00      	nop
 800f9f6:	3714      	adds	r7, #20
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fe:	4770      	bx	lr

0800fa00 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b082      	sub	sp, #8
 800fa04:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fa06:	2300      	movs	r3, #0
 800fa08:	80fb      	strh	r3, [r7, #6]
 800fa0a:	e009      	b.n	800fa20 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800fa0c:	88fb      	ldrh	r3, [r7, #6]
 800fa0e:	4a08      	ldr	r2, [pc, #32]	; (800fa30 <memp_init+0x30>)
 800fa10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7ff ffc3 	bl	800f9a0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fa1a:	88fb      	ldrh	r3, [r7, #6]
 800fa1c:	3301      	adds	r3, #1
 800fa1e:	80fb      	strh	r3, [r7, #6]
 800fa20:	88fb      	ldrh	r3, [r7, #6]
 800fa22:	2b0d      	cmp	r3, #13
 800fa24:	d9f2      	bls.n	800fa0c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800fa26:	bf00      	nop
 800fa28:	bf00      	nop
 800fa2a:	3708      	adds	r7, #8
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}
 800fa30:	08025a34 	.word	0x08025a34

0800fa34 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b084      	sub	sp, #16
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800fa3c:	f00c ff02 	bl	801c844 <sys_arch_protect>
 800fa40:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	689b      	ldr	r3, [r3, #8]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d015      	beq.n	800fa7c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	689b      	ldr	r3, [r3, #8]
 800fa54:	68ba      	ldr	r2, [r7, #8]
 800fa56:	6812      	ldr	r2, [r2, #0]
 800fa58:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800fa5a:	68bb      	ldr	r3, [r7, #8]
 800fa5c:	f003 0303 	and.w	r3, r3, #3
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d006      	beq.n	800fa72 <do_memp_malloc_pool+0x3e>
 800fa64:	4b09      	ldr	r3, [pc, #36]	; (800fa8c <do_memp_malloc_pool+0x58>)
 800fa66:	f44f 728c 	mov.w	r2, #280	; 0x118
 800fa6a:	4909      	ldr	r1, [pc, #36]	; (800fa90 <do_memp_malloc_pool+0x5c>)
 800fa6c:	4809      	ldr	r0, [pc, #36]	; (800fa94 <do_memp_malloc_pool+0x60>)
 800fa6e:	f00f fefb 	bl	801f868 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800fa72:	68f8      	ldr	r0, [r7, #12]
 800fa74:	f00c fef4 	bl	801c860 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	e003      	b.n	800fa84 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800fa7c:	68f8      	ldr	r0, [r7, #12]
 800fa7e:	f00c feef 	bl	801c860 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800fa82:	2300      	movs	r3, #0
}
 800fa84:	4618      	mov	r0, r3
 800fa86:	3710      	adds	r7, #16
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	bd80      	pop	{r7, pc}
 800fa8c:	08022c48 	.word	0x08022c48
 800fa90:	08022c78 	.word	0x08022c78
 800fa94:	08022c9c 	.word	0x08022c9c

0800fa98 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b084      	sub	sp, #16
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	4603      	mov	r3, r0
 800faa0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800faa2:	79fb      	ldrb	r3, [r7, #7]
 800faa4:	2b0d      	cmp	r3, #13
 800faa6:	d908      	bls.n	800faba <memp_malloc+0x22>
 800faa8:	4b0a      	ldr	r3, [pc, #40]	; (800fad4 <memp_malloc+0x3c>)
 800faaa:	f240 1257 	movw	r2, #343	; 0x157
 800faae:	490a      	ldr	r1, [pc, #40]	; (800fad8 <memp_malloc+0x40>)
 800fab0:	480a      	ldr	r0, [pc, #40]	; (800fadc <memp_malloc+0x44>)
 800fab2:	f00f fed9 	bl	801f868 <iprintf>
 800fab6:	2300      	movs	r3, #0
 800fab8:	e008      	b.n	800facc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800faba:	79fb      	ldrb	r3, [r7, #7]
 800fabc:	4a08      	ldr	r2, [pc, #32]	; (800fae0 <memp_malloc+0x48>)
 800fabe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7ff ffb6 	bl	800fa34 <do_memp_malloc_pool>
 800fac8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800faca:	68fb      	ldr	r3, [r7, #12]
}
 800facc:	4618      	mov	r0, r3
 800face:	3710      	adds	r7, #16
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bd80      	pop	{r7, pc}
 800fad4:	08022c48 	.word	0x08022c48
 800fad8:	08022cd8 	.word	0x08022cd8
 800fadc:	08022c9c 	.word	0x08022c9c
 800fae0:	08025a34 	.word	0x08025a34

0800fae4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b084      	sub	sp, #16
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
 800faec:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800faee:	683b      	ldr	r3, [r7, #0]
 800faf0:	f003 0303 	and.w	r3, r3, #3
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d006      	beq.n	800fb06 <do_memp_free_pool+0x22>
 800faf8:	4b0d      	ldr	r3, [pc, #52]	; (800fb30 <do_memp_free_pool+0x4c>)
 800fafa:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800fafe:	490d      	ldr	r1, [pc, #52]	; (800fb34 <do_memp_free_pool+0x50>)
 800fb00:	480d      	ldr	r0, [pc, #52]	; (800fb38 <do_memp_free_pool+0x54>)
 800fb02:	f00f feb1 	bl	801f868 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800fb0a:	f00c fe9b 	bl	801c844 <sys_arch_protect>
 800fb0e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	689b      	ldr	r3, [r3, #8]
 800fb14:	681a      	ldr	r2, [r3, #0]
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	689b      	ldr	r3, [r3, #8]
 800fb1e:	68fa      	ldr	r2, [r7, #12]
 800fb20:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800fb22:	68b8      	ldr	r0, [r7, #8]
 800fb24:	f00c fe9c 	bl	801c860 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800fb28:	bf00      	nop
 800fb2a:	3710      	adds	r7, #16
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}
 800fb30:	08022c48 	.word	0x08022c48
 800fb34:	08022cf8 	.word	0x08022cf8
 800fb38:	08022c9c 	.word	0x08022c9c

0800fb3c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b082      	sub	sp, #8
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	4603      	mov	r3, r0
 800fb44:	6039      	str	r1, [r7, #0]
 800fb46:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800fb48:	79fb      	ldrb	r3, [r7, #7]
 800fb4a:	2b0d      	cmp	r3, #13
 800fb4c:	d907      	bls.n	800fb5e <memp_free+0x22>
 800fb4e:	4b0c      	ldr	r3, [pc, #48]	; (800fb80 <memp_free+0x44>)
 800fb50:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800fb54:	490b      	ldr	r1, [pc, #44]	; (800fb84 <memp_free+0x48>)
 800fb56:	480c      	ldr	r0, [pc, #48]	; (800fb88 <memp_free+0x4c>)
 800fb58:	f00f fe86 	bl	801f868 <iprintf>
 800fb5c:	e00c      	b.n	800fb78 <memp_free+0x3c>

  if (mem == NULL) {
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d008      	beq.n	800fb76 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800fb64:	79fb      	ldrb	r3, [r7, #7]
 800fb66:	4a09      	ldr	r2, [pc, #36]	; (800fb8c <memp_free+0x50>)
 800fb68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb6c:	6839      	ldr	r1, [r7, #0]
 800fb6e:	4618      	mov	r0, r3
 800fb70:	f7ff ffb8 	bl	800fae4 <do_memp_free_pool>
 800fb74:	e000      	b.n	800fb78 <memp_free+0x3c>
    return;
 800fb76:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800fb78:	3708      	adds	r7, #8
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}
 800fb7e:	bf00      	nop
 800fb80:	08022c48 	.word	0x08022c48
 800fb84:	08022d18 	.word	0x08022d18
 800fb88:	08022c9c 	.word	0x08022c9c
 800fb8c:	08025a34 	.word	0x08025a34

0800fb90 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800fb90:	b480      	push	{r7}
 800fb92:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800fb94:	bf00      	nop
 800fb96:	46bd      	mov	sp, r7
 800fb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9c:	4770      	bx	lr
	...

0800fba0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b086      	sub	sp, #24
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	60f8      	str	r0, [r7, #12]
 800fba8:	60b9      	str	r1, [r7, #8]
 800fbaa:	607a      	str	r2, [r7, #4]
 800fbac:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d108      	bne.n	800fbc6 <netif_add+0x26>
 800fbb4:	4b5b      	ldr	r3, [pc, #364]	; (800fd24 <netif_add+0x184>)
 800fbb6:	f240 1227 	movw	r2, #295	; 0x127
 800fbba:	495b      	ldr	r1, [pc, #364]	; (800fd28 <netif_add+0x188>)
 800fbbc:	485b      	ldr	r0, [pc, #364]	; (800fd2c <netif_add+0x18c>)
 800fbbe:	f00f fe53 	bl	801f868 <iprintf>
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	e0a9      	b.n	800fd1a <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800fbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d108      	bne.n	800fbde <netif_add+0x3e>
 800fbcc:	4b55      	ldr	r3, [pc, #340]	; (800fd24 <netif_add+0x184>)
 800fbce:	f44f 7294 	mov.w	r2, #296	; 0x128
 800fbd2:	4957      	ldr	r1, [pc, #348]	; (800fd30 <netif_add+0x190>)
 800fbd4:	4855      	ldr	r0, [pc, #340]	; (800fd2c <netif_add+0x18c>)
 800fbd6:	f00f fe47 	bl	801f868 <iprintf>
 800fbda:	2300      	movs	r3, #0
 800fbdc:	e09d      	b.n	800fd1a <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800fbde:	68bb      	ldr	r3, [r7, #8]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d101      	bne.n	800fbe8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800fbe4:	4b53      	ldr	r3, [pc, #332]	; (800fd34 <netif_add+0x194>)
 800fbe6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d101      	bne.n	800fbf2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800fbee:	4b51      	ldr	r3, [pc, #324]	; (800fd34 <netif_add+0x194>)
 800fbf0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d101      	bne.n	800fbfc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800fbf8:	4b4e      	ldr	r3, [pc, #312]	; (800fd34 <netif_add+0x194>)
 800fbfa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	2200      	movs	r2, #0
 800fc00:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	2200      	movs	r2, #0
 800fc06:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	4a49      	ldr	r2, [pc, #292]	; (800fd38 <netif_add+0x198>)
 800fc12:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	2200      	movs	r2, #0
 800fc18:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	3324      	adds	r3, #36	; 0x24
 800fc26:	2204      	movs	r2, #4
 800fc28:	2100      	movs	r1, #0
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f00e ffa6 	bl	801eb7c <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	2200      	movs	r2, #0
 800fc34:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	6a3a      	ldr	r2, [r7, #32]
 800fc3a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800fc3c:	4b3f      	ldr	r3, [pc, #252]	; (800fd3c <netif_add+0x19c>)
 800fc3e:	781a      	ldrb	r2, [r3, #0]
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc4a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	687a      	ldr	r2, [r7, #4]
 800fc50:	68b9      	ldr	r1, [r7, #8]
 800fc52:	68f8      	ldr	r0, [r7, #12]
 800fc54:	f000 f914 	bl	800fe80 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800fc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc5a:	68f8      	ldr	r0, [r7, #12]
 800fc5c:	4798      	blx	r3
 800fc5e:	4603      	mov	r3, r0
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d001      	beq.n	800fc68 <netif_add+0xc8>
    return NULL;
 800fc64:	2300      	movs	r3, #0
 800fc66:	e058      	b.n	800fd1a <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fc6e:	2bff      	cmp	r3, #255	; 0xff
 800fc70:	d103      	bne.n	800fc7a <netif_add+0xda>
        netif->num = 0;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	2200      	movs	r2, #0
 800fc76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fc7e:	4b30      	ldr	r3, [pc, #192]	; (800fd40 <netif_add+0x1a0>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	617b      	str	r3, [r7, #20]
 800fc84:	e02b      	b.n	800fcde <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800fc86:	697a      	ldr	r2, [r7, #20]
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	429a      	cmp	r2, r3
 800fc8c:	d106      	bne.n	800fc9c <netif_add+0xfc>
 800fc8e:	4b25      	ldr	r3, [pc, #148]	; (800fd24 <netif_add+0x184>)
 800fc90:	f240 128b 	movw	r2, #395	; 0x18b
 800fc94:	492b      	ldr	r1, [pc, #172]	; (800fd44 <netif_add+0x1a4>)
 800fc96:	4825      	ldr	r0, [pc, #148]	; (800fd2c <netif_add+0x18c>)
 800fc98:	f00f fde6 	bl	801f868 <iprintf>
        num_netifs++;
 800fc9c:	693b      	ldr	r3, [r7, #16]
 800fc9e:	3301      	adds	r3, #1
 800fca0:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	2bff      	cmp	r3, #255	; 0xff
 800fca6:	dd06      	ble.n	800fcb6 <netif_add+0x116>
 800fca8:	4b1e      	ldr	r3, [pc, #120]	; (800fd24 <netif_add+0x184>)
 800fcaa:	f240 128d 	movw	r2, #397	; 0x18d
 800fcae:	4926      	ldr	r1, [pc, #152]	; (800fd48 <netif_add+0x1a8>)
 800fcb0:	481e      	ldr	r0, [pc, #120]	; (800fd2c <netif_add+0x18c>)
 800fcb2:	f00f fdd9 	bl	801f868 <iprintf>
        if (netif2->num == netif->num) {
 800fcb6:	697b      	ldr	r3, [r7, #20]
 800fcb8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fcc2:	429a      	cmp	r2, r3
 800fcc4:	d108      	bne.n	800fcd8 <netif_add+0x138>
          netif->num++;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fccc:	3301      	adds	r3, #1
 800fcce:	b2da      	uxtb	r2, r3
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800fcd6:	e005      	b.n	800fce4 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fcd8:	697b      	ldr	r3, [r7, #20]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	617b      	str	r3, [r7, #20]
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d1d0      	bne.n	800fc86 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d1be      	bne.n	800fc68 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fcf0:	2bfe      	cmp	r3, #254	; 0xfe
 800fcf2:	d103      	bne.n	800fcfc <netif_add+0x15c>
    netif_num = 0;
 800fcf4:	4b11      	ldr	r3, [pc, #68]	; (800fd3c <netif_add+0x19c>)
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	701a      	strb	r2, [r3, #0]
 800fcfa:	e006      	b.n	800fd0a <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fd02:	3301      	adds	r3, #1
 800fd04:	b2da      	uxtb	r2, r3
 800fd06:	4b0d      	ldr	r3, [pc, #52]	; (800fd3c <netif_add+0x19c>)
 800fd08:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800fd0a:	4b0d      	ldr	r3, [pc, #52]	; (800fd40 <netif_add+0x1a0>)
 800fd0c:	681a      	ldr	r2, [r3, #0]
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800fd12:	4a0b      	ldr	r2, [pc, #44]	; (800fd40 <netif_add+0x1a0>)
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800fd18:	68fb      	ldr	r3, [r7, #12]
}
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	3718      	adds	r7, #24
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd80      	pop	{r7, pc}
 800fd22:	bf00      	nop
 800fd24:	08022d34 	.word	0x08022d34
 800fd28:	08022dc8 	.word	0x08022dc8
 800fd2c:	08022d84 	.word	0x08022d84
 800fd30:	08022de4 	.word	0x08022de4
 800fd34:	08025ac4 	.word	0x08025ac4
 800fd38:	08010163 	.word	0x08010163
 800fd3c:	20001918 	.word	0x20001918
 800fd40:	2000892c 	.word	0x2000892c
 800fd44:	08022e08 	.word	0x08022e08
 800fd48:	08022e1c 	.word	0x08022e1c

0800fd4c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b082      	sub	sp, #8
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
 800fd54:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800fd56:	6839      	ldr	r1, [r7, #0]
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f003 f841 	bl	8012de0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800fd5e:	6839      	ldr	r1, [r7, #0]
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f008 f961 	bl	8018028 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800fd66:	bf00      	nop
 800fd68:	3708      	adds	r7, #8
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}
	...

0800fd70 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b086      	sub	sp, #24
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	60f8      	str	r0, [r7, #12]
 800fd78:	60b9      	str	r1, [r7, #8]
 800fd7a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d106      	bne.n	800fd90 <netif_do_set_ipaddr+0x20>
 800fd82:	4b1d      	ldr	r3, [pc, #116]	; (800fdf8 <netif_do_set_ipaddr+0x88>)
 800fd84:	f240 12cb 	movw	r2, #459	; 0x1cb
 800fd88:	491c      	ldr	r1, [pc, #112]	; (800fdfc <netif_do_set_ipaddr+0x8c>)
 800fd8a:	481d      	ldr	r0, [pc, #116]	; (800fe00 <netif_do_set_ipaddr+0x90>)
 800fd8c:	f00f fd6c 	bl	801f868 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d106      	bne.n	800fda4 <netif_do_set_ipaddr+0x34>
 800fd96:	4b18      	ldr	r3, [pc, #96]	; (800fdf8 <netif_do_set_ipaddr+0x88>)
 800fd98:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800fd9c:	4917      	ldr	r1, [pc, #92]	; (800fdfc <netif_do_set_ipaddr+0x8c>)
 800fd9e:	4818      	ldr	r0, [pc, #96]	; (800fe00 <netif_do_set_ipaddr+0x90>)
 800fda0:	f00f fd62 	bl	801f868 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800fda4:	68bb      	ldr	r3, [r7, #8]
 800fda6:	681a      	ldr	r2, [r3, #0]
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	3304      	adds	r3, #4
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	d01c      	beq.n	800fdec <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800fdb2:	68bb      	ldr	r3, [r7, #8]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	3304      	adds	r3, #4
 800fdbc:	681a      	ldr	r2, [r3, #0]
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800fdc2:	f107 0314 	add.w	r3, r7, #20
 800fdc6:	4619      	mov	r1, r3
 800fdc8:	6878      	ldr	r0, [r7, #4]
 800fdca:	f7ff ffbf 	bl	800fd4c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d002      	beq.n	800fdda <netif_do_set_ipaddr+0x6a>
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	e000      	b.n	800fddc <netif_do_set_ipaddr+0x6c>
 800fdda:	2300      	movs	r3, #0
 800fddc:	68fa      	ldr	r2, [r7, #12]
 800fdde:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800fde0:	2101      	movs	r1, #1
 800fde2:	68f8      	ldr	r0, [r7, #12]
 800fde4:	f000 f8d2 	bl	800ff8c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800fde8:	2301      	movs	r3, #1
 800fdea:	e000      	b.n	800fdee <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800fdec:	2300      	movs	r3, #0
}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	3718      	adds	r7, #24
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bd80      	pop	{r7, pc}
 800fdf6:	bf00      	nop
 800fdf8:	08022d34 	.word	0x08022d34
 800fdfc:	08022e4c 	.word	0x08022e4c
 800fe00:	08022d84 	.word	0x08022d84

0800fe04 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800fe04:	b480      	push	{r7}
 800fe06:	b085      	sub	sp, #20
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	60f8      	str	r0, [r7, #12]
 800fe0c:	60b9      	str	r1, [r7, #8]
 800fe0e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	681a      	ldr	r2, [r3, #0]
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	3308      	adds	r3, #8
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d00a      	beq.n	800fe34 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d002      	beq.n	800fe2a <netif_do_set_netmask+0x26>
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	e000      	b.n	800fe2c <netif_do_set_netmask+0x28>
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	68fa      	ldr	r2, [r7, #12]
 800fe2e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800fe30:	2301      	movs	r3, #1
 800fe32:	e000      	b.n	800fe36 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800fe34:	2300      	movs	r3, #0
}
 800fe36:	4618      	mov	r0, r3
 800fe38:	3714      	adds	r7, #20
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe40:	4770      	bx	lr

0800fe42 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800fe42:	b480      	push	{r7}
 800fe44:	b085      	sub	sp, #20
 800fe46:	af00      	add	r7, sp, #0
 800fe48:	60f8      	str	r0, [r7, #12]
 800fe4a:	60b9      	str	r1, [r7, #8]
 800fe4c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800fe4e:	68bb      	ldr	r3, [r7, #8]
 800fe50:	681a      	ldr	r2, [r3, #0]
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	330c      	adds	r3, #12
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	429a      	cmp	r2, r3
 800fe5a:	d00a      	beq.n	800fe72 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800fe5c:	68bb      	ldr	r3, [r7, #8]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d002      	beq.n	800fe68 <netif_do_set_gw+0x26>
 800fe62:	68bb      	ldr	r3, [r7, #8]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	e000      	b.n	800fe6a <netif_do_set_gw+0x28>
 800fe68:	2300      	movs	r3, #0
 800fe6a:	68fa      	ldr	r2, [r7, #12]
 800fe6c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800fe6e:	2301      	movs	r3, #1
 800fe70:	e000      	b.n	800fe74 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800fe72:	2300      	movs	r3, #0
}
 800fe74:	4618      	mov	r0, r3
 800fe76:	3714      	adds	r7, #20
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7e:	4770      	bx	lr

0800fe80 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b088      	sub	sp, #32
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	60f8      	str	r0, [r7, #12]
 800fe88:	60b9      	str	r1, [r7, #8]
 800fe8a:	607a      	str	r2, [r7, #4]
 800fe8c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800fe8e:	2300      	movs	r3, #0
 800fe90:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800fe92:	2300      	movs	r3, #0
 800fe94:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fe96:	68bb      	ldr	r3, [r7, #8]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d101      	bne.n	800fea0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800fe9c:	4b1c      	ldr	r3, [pc, #112]	; (800ff10 <netif_set_addr+0x90>)
 800fe9e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d101      	bne.n	800feaa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800fea6:	4b1a      	ldr	r3, [pc, #104]	; (800ff10 <netif_set_addr+0x90>)
 800fea8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800feaa:	683b      	ldr	r3, [r7, #0]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d101      	bne.n	800feb4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800feb0:	4b17      	ldr	r3, [pc, #92]	; (800ff10 <netif_set_addr+0x90>)
 800feb2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800feb4:	68bb      	ldr	r3, [r7, #8]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d003      	beq.n	800fec2 <netif_set_addr+0x42>
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d101      	bne.n	800fec6 <netif_set_addr+0x46>
 800fec2:	2301      	movs	r3, #1
 800fec4:	e000      	b.n	800fec8 <netif_set_addr+0x48>
 800fec6:	2300      	movs	r3, #0
 800fec8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800feca:	697b      	ldr	r3, [r7, #20]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d006      	beq.n	800fede <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fed0:	f107 0310 	add.w	r3, r7, #16
 800fed4:	461a      	mov	r2, r3
 800fed6:	68b9      	ldr	r1, [r7, #8]
 800fed8:	68f8      	ldr	r0, [r7, #12]
 800feda:	f7ff ff49 	bl	800fd70 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800fede:	69fa      	ldr	r2, [r7, #28]
 800fee0:	6879      	ldr	r1, [r7, #4]
 800fee2:	68f8      	ldr	r0, [r7, #12]
 800fee4:	f7ff ff8e 	bl	800fe04 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800fee8:	69ba      	ldr	r2, [r7, #24]
 800feea:	6839      	ldr	r1, [r7, #0]
 800feec:	68f8      	ldr	r0, [r7, #12]
 800feee:	f7ff ffa8 	bl	800fe42 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800fef2:	697b      	ldr	r3, [r7, #20]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d106      	bne.n	800ff06 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fef8:	f107 0310 	add.w	r3, r7, #16
 800fefc:	461a      	mov	r2, r3
 800fefe:	68b9      	ldr	r1, [r7, #8]
 800ff00:	68f8      	ldr	r0, [r7, #12]
 800ff02:	f7ff ff35 	bl	800fd70 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ff06:	bf00      	nop
 800ff08:	3720      	adds	r7, #32
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}
 800ff0e:	bf00      	nop
 800ff10:	08025ac4 	.word	0x08025ac4

0800ff14 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ff14:	b480      	push	{r7}
 800ff16:	b083      	sub	sp, #12
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ff1c:	4a04      	ldr	r2, [pc, #16]	; (800ff30 <netif_set_default+0x1c>)
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ff22:	bf00      	nop
 800ff24:	370c      	adds	r7, #12
 800ff26:	46bd      	mov	sp, r7
 800ff28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2c:	4770      	bx	lr
 800ff2e:	bf00      	nop
 800ff30:	20008930 	.word	0x20008930

0800ff34 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b082      	sub	sp, #8
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d107      	bne.n	800ff52 <netif_set_up+0x1e>
 800ff42:	4b0f      	ldr	r3, [pc, #60]	; (800ff80 <netif_set_up+0x4c>)
 800ff44:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ff48:	490e      	ldr	r1, [pc, #56]	; (800ff84 <netif_set_up+0x50>)
 800ff4a:	480f      	ldr	r0, [pc, #60]	; (800ff88 <netif_set_up+0x54>)
 800ff4c:	f00f fc8c 	bl	801f868 <iprintf>
 800ff50:	e013      	b.n	800ff7a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ff58:	f003 0301 	and.w	r3, r3, #1
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d10c      	bne.n	800ff7a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ff66:	f043 0301 	orr.w	r3, r3, #1
 800ff6a:	b2da      	uxtb	r2, r3
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ff72:	2103      	movs	r1, #3
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	f000 f809 	bl	800ff8c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ff7a:	3708      	adds	r7, #8
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}
 800ff80:	08022d34 	.word	0x08022d34
 800ff84:	08022ebc 	.word	0x08022ebc
 800ff88:	08022d84 	.word	0x08022d84

0800ff8c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b082      	sub	sp, #8
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
 800ff94:	460b      	mov	r3, r1
 800ff96:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d106      	bne.n	800ffac <netif_issue_reports+0x20>
 800ff9e:	4b18      	ldr	r3, [pc, #96]	; (8010000 <netif_issue_reports+0x74>)
 800ffa0:	f240 326d 	movw	r2, #877	; 0x36d
 800ffa4:	4917      	ldr	r1, [pc, #92]	; (8010004 <netif_issue_reports+0x78>)
 800ffa6:	4818      	ldr	r0, [pc, #96]	; (8010008 <netif_issue_reports+0x7c>)
 800ffa8:	f00f fc5e 	bl	801f868 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ffb2:	f003 0304 	and.w	r3, r3, #4
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d01e      	beq.n	800fff8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ffc0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d017      	beq.n	800fff8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ffc8:	78fb      	ldrb	r3, [r7, #3]
 800ffca:	f003 0301 	and.w	r3, r3, #1
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d013      	beq.n	800fffa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	3304      	adds	r3, #4
 800ffd6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d00e      	beq.n	800fffa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ffe2:	f003 0308 	and.w	r3, r3, #8
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d007      	beq.n	800fffa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	3304      	adds	r3, #4
 800ffee:	4619      	mov	r1, r3
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	f00a fe69 	bl	801acc8 <etharp_request>
 800fff6:	e000      	b.n	800fffa <netif_issue_reports+0x6e>
    return;
 800fff8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800fffa:	3708      	adds	r7, #8
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}
 8010000:	08022d34 	.word	0x08022d34
 8010004:	08022ed8 	.word	0x08022ed8
 8010008:	08022d84 	.word	0x08022d84

0801000c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b082      	sub	sp, #8
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d107      	bne.n	801002a <netif_set_down+0x1e>
 801001a:	4b12      	ldr	r3, [pc, #72]	; (8010064 <netif_set_down+0x58>)
 801001c:	f240 329b 	movw	r2, #923	; 0x39b
 8010020:	4911      	ldr	r1, [pc, #68]	; (8010068 <netif_set_down+0x5c>)
 8010022:	4812      	ldr	r0, [pc, #72]	; (801006c <netif_set_down+0x60>)
 8010024:	f00f fc20 	bl	801f868 <iprintf>
 8010028:	e019      	b.n	801005e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010030:	f003 0301 	and.w	r3, r3, #1
 8010034:	2b00      	cmp	r3, #0
 8010036:	d012      	beq.n	801005e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801003e:	f023 0301 	bic.w	r3, r3, #1
 8010042:	b2da      	uxtb	r2, r3
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010050:	f003 0308 	and.w	r3, r3, #8
 8010054:	2b00      	cmp	r3, #0
 8010056:	d002      	beq.n	801005e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f00a f9ef 	bl	801a43c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801005e:	3708      	adds	r7, #8
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}
 8010064:	08022d34 	.word	0x08022d34
 8010068:	08022efc 	.word	0x08022efc
 801006c:	08022d84 	.word	0x08022d84

08010070 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d107      	bne.n	801008e <netif_set_link_up+0x1e>
 801007e:	4b15      	ldr	r3, [pc, #84]	; (80100d4 <netif_set_link_up+0x64>)
 8010080:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8010084:	4914      	ldr	r1, [pc, #80]	; (80100d8 <netif_set_link_up+0x68>)
 8010086:	4815      	ldr	r0, [pc, #84]	; (80100dc <netif_set_link_up+0x6c>)
 8010088:	f00f fbee 	bl	801f868 <iprintf>
 801008c:	e01e      	b.n	80100cc <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010094:	f003 0304 	and.w	r3, r3, #4
 8010098:	2b00      	cmp	r3, #0
 801009a:	d117      	bne.n	80100cc <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80100a2:	f043 0304 	orr.w	r3, r3, #4
 80100a6:	b2da      	uxtb	r2, r3
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f008 fc04 	bl	80188bc <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80100b4:	2103      	movs	r1, #3
 80100b6:	6878      	ldr	r0, [r7, #4]
 80100b8:	f7ff ff68 	bl	800ff8c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	69db      	ldr	r3, [r3, #28]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d003      	beq.n	80100cc <netif_set_link_up+0x5c>
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	69db      	ldr	r3, [r3, #28]
 80100c8:	6878      	ldr	r0, [r7, #4]
 80100ca:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80100cc:	3708      	adds	r7, #8
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}
 80100d2:	bf00      	nop
 80100d4:	08022d34 	.word	0x08022d34
 80100d8:	08022f1c 	.word	0x08022f1c
 80100dc:	08022d84 	.word	0x08022d84

080100e0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b082      	sub	sp, #8
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d107      	bne.n	80100fe <netif_set_link_down+0x1e>
 80100ee:	4b11      	ldr	r3, [pc, #68]	; (8010134 <netif_set_link_down+0x54>)
 80100f0:	f240 4206 	movw	r2, #1030	; 0x406
 80100f4:	4910      	ldr	r1, [pc, #64]	; (8010138 <netif_set_link_down+0x58>)
 80100f6:	4811      	ldr	r0, [pc, #68]	; (801013c <netif_set_link_down+0x5c>)
 80100f8:	f00f fbb6 	bl	801f868 <iprintf>
 80100fc:	e017      	b.n	801012e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010104:	f003 0304 	and.w	r3, r3, #4
 8010108:	2b00      	cmp	r3, #0
 801010a:	d010      	beq.n	801012e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010112:	f023 0304 	bic.w	r3, r3, #4
 8010116:	b2da      	uxtb	r2, r3
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	69db      	ldr	r3, [r3, #28]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d003      	beq.n	801012e <netif_set_link_down+0x4e>
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	69db      	ldr	r3, [r3, #28]
 801012a:	6878      	ldr	r0, [r7, #4]
 801012c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801012e:	3708      	adds	r7, #8
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}
 8010134:	08022d34 	.word	0x08022d34
 8010138:	08022f40 	.word	0x08022f40
 801013c:	08022d84 	.word	0x08022d84

08010140 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010140:	b480      	push	{r7}
 8010142:	b083      	sub	sp, #12
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
 8010148:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d002      	beq.n	8010156 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	683a      	ldr	r2, [r7, #0]
 8010154:	61da      	str	r2, [r3, #28]
  }
}
 8010156:	bf00      	nop
 8010158:	370c      	adds	r7, #12
 801015a:	46bd      	mov	sp, r7
 801015c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010160:	4770      	bx	lr

08010162 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010162:	b480      	push	{r7}
 8010164:	b085      	sub	sp, #20
 8010166:	af00      	add	r7, sp, #0
 8010168:	60f8      	str	r0, [r7, #12]
 801016a:	60b9      	str	r1, [r7, #8]
 801016c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801016e:	f06f 030b 	mvn.w	r3, #11
}
 8010172:	4618      	mov	r0, r3
 8010174:	3714      	adds	r7, #20
 8010176:	46bd      	mov	sp, r7
 8010178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017c:	4770      	bx	lr
	...

08010180 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010180:	b480      	push	{r7}
 8010182:	b085      	sub	sp, #20
 8010184:	af00      	add	r7, sp, #0
 8010186:	4603      	mov	r3, r0
 8010188:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801018a:	79fb      	ldrb	r3, [r7, #7]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d013      	beq.n	80101b8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010190:	4b0d      	ldr	r3, [pc, #52]	; (80101c8 <netif_get_by_index+0x48>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	60fb      	str	r3, [r7, #12]
 8010196:	e00c      	b.n	80101b2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801019e:	3301      	adds	r3, #1
 80101a0:	b2db      	uxtb	r3, r3
 80101a2:	79fa      	ldrb	r2, [r7, #7]
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d101      	bne.n	80101ac <netif_get_by_index+0x2c>
        return netif; /* found! */
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	e006      	b.n	80101ba <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	60fb      	str	r3, [r7, #12]
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d1ef      	bne.n	8010198 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80101b8:	2300      	movs	r3, #0
}
 80101ba:	4618      	mov	r0, r3
 80101bc:	3714      	adds	r7, #20
 80101be:	46bd      	mov	sp, r7
 80101c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c4:	4770      	bx	lr
 80101c6:	bf00      	nop
 80101c8:	2000892c 	.word	0x2000892c

080101cc <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(const char *name)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b084      	sub	sp, #16
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
  struct netif *netif;
  u8_t num;

  LWIP_ASSERT_CORE_LOCKED();

  if (name == NULL) {
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d101      	bne.n	80101de <netif_find+0x12>
    return NULL;
 80101da:	2300      	movs	r3, #0
 80101dc:	e028      	b.n	8010230 <netif_find+0x64>
  }

  num = (u8_t)atoi(&name[2]);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	3302      	adds	r3, #2
 80101e2:	4618      	mov	r0, r3
 80101e4:	f00e fb50 	bl	801e888 <atoi>
 80101e8:	4603      	mov	r3, r0
 80101ea:	72fb      	strb	r3, [r7, #11]

  NETIF_FOREACH(netif) {
 80101ec:	4b12      	ldr	r3, [pc, #72]	; (8010238 <netif_find+0x6c>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	60fb      	str	r3, [r7, #12]
 80101f2:	e019      	b.n	8010228 <netif_find+0x5c>
    if (num == netif->num &&
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80101fa:	7afa      	ldrb	r2, [r7, #11]
 80101fc:	429a      	cmp	r2, r3
 80101fe:	d110      	bne.n	8010222 <netif_find+0x56>
        name[0] == netif->name[0] &&
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	781a      	ldrb	r2, [r3, #0]
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    if (num == netif->num &&
 801020a:	429a      	cmp	r2, r3
 801020c:	d109      	bne.n	8010222 <netif_find+0x56>
        name[1] == netif->name[1]) {
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	3301      	adds	r3, #1
 8010212:	781a      	ldrb	r2, [r3, #0]
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
        name[0] == netif->name[0] &&
 801021a:	429a      	cmp	r2, r3
 801021c:	d101      	bne.n	8010222 <netif_find+0x56>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	e006      	b.n	8010230 <netif_find+0x64>
  NETIF_FOREACH(netif) {
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	60fb      	str	r3, [r7, #12]
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d1e2      	bne.n	80101f4 <netif_find+0x28>
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
 801022e:	2300      	movs	r3, #0
}
 8010230:	4618      	mov	r0, r3
 8010232:	3710      	adds	r7, #16
 8010234:	46bd      	mov	sp, r7
 8010236:	bd80      	pop	{r7, pc}
 8010238:	2000892c 	.word	0x2000892c

0801023c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b082      	sub	sp, #8
 8010240:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8010242:	f00c faff 	bl	801c844 <sys_arch_protect>
 8010246:	6038      	str	r0, [r7, #0]
 8010248:	4b0d      	ldr	r3, [pc, #52]	; (8010280 <pbuf_free_ooseq+0x44>)
 801024a:	2200      	movs	r2, #0
 801024c:	701a      	strb	r2, [r3, #0]
 801024e:	6838      	ldr	r0, [r7, #0]
 8010250:	f00c fb06 	bl	801c860 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010254:	4b0b      	ldr	r3, [pc, #44]	; (8010284 <pbuf_free_ooseq+0x48>)
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	607b      	str	r3, [r7, #4]
 801025a:	e00a      	b.n	8010272 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010260:	2b00      	cmp	r3, #0
 8010262:	d003      	beq.n	801026c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010264:	6878      	ldr	r0, [r7, #4]
 8010266:	f002 fdf9 	bl	8012e5c <tcp_free_ooseq>
      return;
 801026a:	e005      	b.n	8010278 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	68db      	ldr	r3, [r3, #12]
 8010270:	607b      	str	r3, [r7, #4]
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d1f1      	bne.n	801025c <pbuf_free_ooseq+0x20>
    }
  }
}
 8010278:	3708      	adds	r7, #8
 801027a:	46bd      	mov	sp, r7
 801027c:	bd80      	pop	{r7, pc}
 801027e:	bf00      	nop
 8010280:	20008934 	.word	0x20008934
 8010284:	2000893c 	.word	0x2000893c

08010288 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b082      	sub	sp, #8
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010290:	f7ff ffd4 	bl	801023c <pbuf_free_ooseq>
}
 8010294:	bf00      	nop
 8010296:	3708      	adds	r7, #8
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}

0801029c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b082      	sub	sp, #8
 80102a0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80102a2:	f00c facf 	bl	801c844 <sys_arch_protect>
 80102a6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80102a8:	4b0f      	ldr	r3, [pc, #60]	; (80102e8 <pbuf_pool_is_empty+0x4c>)
 80102aa:	781b      	ldrb	r3, [r3, #0]
 80102ac:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80102ae:	4b0e      	ldr	r3, [pc, #56]	; (80102e8 <pbuf_pool_is_empty+0x4c>)
 80102b0:	2201      	movs	r2, #1
 80102b2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80102b4:	6878      	ldr	r0, [r7, #4]
 80102b6:	f00c fad3 	bl	801c860 <sys_arch_unprotect>

  if (!queued) {
 80102ba:	78fb      	ldrb	r3, [r7, #3]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d10f      	bne.n	80102e0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80102c0:	2100      	movs	r1, #0
 80102c2:	480a      	ldr	r0, [pc, #40]	; (80102ec <pbuf_pool_is_empty+0x50>)
 80102c4:	f7fe fba4 	bl	800ea10 <tcpip_try_callback>
 80102c8:	4603      	mov	r3, r0
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d008      	beq.n	80102e0 <pbuf_pool_is_empty+0x44>
 80102ce:	f00c fab9 	bl	801c844 <sys_arch_protect>
 80102d2:	6078      	str	r0, [r7, #4]
 80102d4:	4b04      	ldr	r3, [pc, #16]	; (80102e8 <pbuf_pool_is_empty+0x4c>)
 80102d6:	2200      	movs	r2, #0
 80102d8:	701a      	strb	r2, [r3, #0]
 80102da:	6878      	ldr	r0, [r7, #4]
 80102dc:	f00c fac0 	bl	801c860 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80102e0:	bf00      	nop
 80102e2:	3708      	adds	r7, #8
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd80      	pop	{r7, pc}
 80102e8:	20008934 	.word	0x20008934
 80102ec:	08010289 	.word	0x08010289

080102f0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80102f0:	b480      	push	{r7}
 80102f2:	b085      	sub	sp, #20
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	60f8      	str	r0, [r7, #12]
 80102f8:	60b9      	str	r1, [r7, #8]
 80102fa:	4611      	mov	r1, r2
 80102fc:	461a      	mov	r2, r3
 80102fe:	460b      	mov	r3, r1
 8010300:	80fb      	strh	r3, [r7, #6]
 8010302:	4613      	mov	r3, r2
 8010304:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	2200      	movs	r2, #0
 801030a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	68ba      	ldr	r2, [r7, #8]
 8010310:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	88fa      	ldrh	r2, [r7, #6]
 8010316:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	88ba      	ldrh	r2, [r7, #4]
 801031c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801031e:	8b3b      	ldrh	r3, [r7, #24]
 8010320:	b2da      	uxtb	r2, r3
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	7f3a      	ldrb	r2, [r7, #28]
 801032a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	2201      	movs	r2, #1
 8010330:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	2200      	movs	r2, #0
 8010336:	73da      	strb	r2, [r3, #15]
}
 8010338:	bf00      	nop
 801033a:	3714      	adds	r7, #20
 801033c:	46bd      	mov	sp, r7
 801033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010342:	4770      	bx	lr

08010344 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b08c      	sub	sp, #48	; 0x30
 8010348:	af02      	add	r7, sp, #8
 801034a:	4603      	mov	r3, r0
 801034c:	71fb      	strb	r3, [r7, #7]
 801034e:	460b      	mov	r3, r1
 8010350:	80bb      	strh	r3, [r7, #4]
 8010352:	4613      	mov	r3, r2
 8010354:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010356:	79fb      	ldrb	r3, [r7, #7]
 8010358:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801035a:	887b      	ldrh	r3, [r7, #2]
 801035c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010360:	d07f      	beq.n	8010462 <pbuf_alloc+0x11e>
 8010362:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010366:	f300 80c8 	bgt.w	80104fa <pbuf_alloc+0x1b6>
 801036a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801036e:	d010      	beq.n	8010392 <pbuf_alloc+0x4e>
 8010370:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010374:	f300 80c1 	bgt.w	80104fa <pbuf_alloc+0x1b6>
 8010378:	2b01      	cmp	r3, #1
 801037a:	d002      	beq.n	8010382 <pbuf_alloc+0x3e>
 801037c:	2b41      	cmp	r3, #65	; 0x41
 801037e:	f040 80bc 	bne.w	80104fa <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8010382:	887a      	ldrh	r2, [r7, #2]
 8010384:	88bb      	ldrh	r3, [r7, #4]
 8010386:	4619      	mov	r1, r3
 8010388:	2000      	movs	r0, #0
 801038a:	f000 f8d1 	bl	8010530 <pbuf_alloc_reference>
 801038e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8010390:	e0bd      	b.n	801050e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010392:	2300      	movs	r3, #0
 8010394:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8010396:	2300      	movs	r3, #0
 8010398:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801039a:	88bb      	ldrh	r3, [r7, #4]
 801039c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801039e:	200d      	movs	r0, #13
 80103a0:	f7ff fb7a 	bl	800fa98 <memp_malloc>
 80103a4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80103a6:	693b      	ldr	r3, [r7, #16]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d109      	bne.n	80103c0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80103ac:	f7ff ff76 	bl	801029c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80103b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d002      	beq.n	80103bc <pbuf_alloc+0x78>
            pbuf_free(p);
 80103b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80103b8:	f000 fada 	bl	8010970 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80103bc:	2300      	movs	r3, #0
 80103be:	e0a7      	b.n	8010510 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80103c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80103c2:	3303      	adds	r3, #3
 80103c4:	b29b      	uxth	r3, r3
 80103c6:	f023 0303 	bic.w	r3, r3, #3
 80103ca:	b29b      	uxth	r3, r3
 80103cc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80103d0:	b29b      	uxth	r3, r3
 80103d2:	8b7a      	ldrh	r2, [r7, #26]
 80103d4:	4293      	cmp	r3, r2
 80103d6:	bf28      	it	cs
 80103d8:	4613      	movcs	r3, r2
 80103da:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80103dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80103de:	3310      	adds	r3, #16
 80103e0:	693a      	ldr	r2, [r7, #16]
 80103e2:	4413      	add	r3, r2
 80103e4:	3303      	adds	r3, #3
 80103e6:	f023 0303 	bic.w	r3, r3, #3
 80103ea:	4618      	mov	r0, r3
 80103ec:	89f9      	ldrh	r1, [r7, #14]
 80103ee:	8b7a      	ldrh	r2, [r7, #26]
 80103f0:	2300      	movs	r3, #0
 80103f2:	9301      	str	r3, [sp, #4]
 80103f4:	887b      	ldrh	r3, [r7, #2]
 80103f6:	9300      	str	r3, [sp, #0]
 80103f8:	460b      	mov	r3, r1
 80103fa:	4601      	mov	r1, r0
 80103fc:	6938      	ldr	r0, [r7, #16]
 80103fe:	f7ff ff77 	bl	80102f0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	685b      	ldr	r3, [r3, #4]
 8010406:	f003 0303 	and.w	r3, r3, #3
 801040a:	2b00      	cmp	r3, #0
 801040c:	d006      	beq.n	801041c <pbuf_alloc+0xd8>
 801040e:	4b42      	ldr	r3, [pc, #264]	; (8010518 <pbuf_alloc+0x1d4>)
 8010410:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010414:	4941      	ldr	r1, [pc, #260]	; (801051c <pbuf_alloc+0x1d8>)
 8010416:	4842      	ldr	r0, [pc, #264]	; (8010520 <pbuf_alloc+0x1dc>)
 8010418:	f00f fa26 	bl	801f868 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801041c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801041e:	3303      	adds	r3, #3
 8010420:	f023 0303 	bic.w	r3, r3, #3
 8010424:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8010428:	d106      	bne.n	8010438 <pbuf_alloc+0xf4>
 801042a:	4b3b      	ldr	r3, [pc, #236]	; (8010518 <pbuf_alloc+0x1d4>)
 801042c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8010430:	493c      	ldr	r1, [pc, #240]	; (8010524 <pbuf_alloc+0x1e0>)
 8010432:	483b      	ldr	r0, [pc, #236]	; (8010520 <pbuf_alloc+0x1dc>)
 8010434:	f00f fa18 	bl	801f868 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801043a:	2b00      	cmp	r3, #0
 801043c:	d102      	bne.n	8010444 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	627b      	str	r3, [r7, #36]	; 0x24
 8010442:	e002      	b.n	801044a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8010444:	69fb      	ldr	r3, [r7, #28]
 8010446:	693a      	ldr	r2, [r7, #16]
 8010448:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801044a:	693b      	ldr	r3, [r7, #16]
 801044c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801044e:	8b7a      	ldrh	r2, [r7, #26]
 8010450:	89fb      	ldrh	r3, [r7, #14]
 8010452:	1ad3      	subs	r3, r2, r3
 8010454:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010456:	2300      	movs	r3, #0
 8010458:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801045a:	8b7b      	ldrh	r3, [r7, #26]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d19e      	bne.n	801039e <pbuf_alloc+0x5a>
      break;
 8010460:	e055      	b.n	801050e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010462:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010464:	3303      	adds	r3, #3
 8010466:	b29b      	uxth	r3, r3
 8010468:	f023 0303 	bic.w	r3, r3, #3
 801046c:	b29a      	uxth	r2, r3
 801046e:	88bb      	ldrh	r3, [r7, #4]
 8010470:	3303      	adds	r3, #3
 8010472:	b29b      	uxth	r3, r3
 8010474:	f023 0303 	bic.w	r3, r3, #3
 8010478:	b29b      	uxth	r3, r3
 801047a:	4413      	add	r3, r2
 801047c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801047e:	8b3b      	ldrh	r3, [r7, #24]
 8010480:	3310      	adds	r3, #16
 8010482:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010484:	8b3a      	ldrh	r2, [r7, #24]
 8010486:	88bb      	ldrh	r3, [r7, #4]
 8010488:	3303      	adds	r3, #3
 801048a:	f023 0303 	bic.w	r3, r3, #3
 801048e:	429a      	cmp	r2, r3
 8010490:	d306      	bcc.n	80104a0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010492:	8afa      	ldrh	r2, [r7, #22]
 8010494:	88bb      	ldrh	r3, [r7, #4]
 8010496:	3303      	adds	r3, #3
 8010498:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801049c:	429a      	cmp	r2, r3
 801049e:	d201      	bcs.n	80104a4 <pbuf_alloc+0x160>
        return NULL;
 80104a0:	2300      	movs	r3, #0
 80104a2:	e035      	b.n	8010510 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80104a4:	8afb      	ldrh	r3, [r7, #22]
 80104a6:	4618      	mov	r0, r3
 80104a8:	f7ff f974 	bl	800f794 <mem_malloc>
 80104ac:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80104ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d101      	bne.n	80104b8 <pbuf_alloc+0x174>
        return NULL;
 80104b4:	2300      	movs	r3, #0
 80104b6:	e02b      	b.n	8010510 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80104b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80104ba:	3310      	adds	r3, #16
 80104bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80104be:	4413      	add	r3, r2
 80104c0:	3303      	adds	r3, #3
 80104c2:	f023 0303 	bic.w	r3, r3, #3
 80104c6:	4618      	mov	r0, r3
 80104c8:	88b9      	ldrh	r1, [r7, #4]
 80104ca:	88ba      	ldrh	r2, [r7, #4]
 80104cc:	2300      	movs	r3, #0
 80104ce:	9301      	str	r3, [sp, #4]
 80104d0:	887b      	ldrh	r3, [r7, #2]
 80104d2:	9300      	str	r3, [sp, #0]
 80104d4:	460b      	mov	r3, r1
 80104d6:	4601      	mov	r1, r0
 80104d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80104da:	f7ff ff09 	bl	80102f0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80104de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104e0:	685b      	ldr	r3, [r3, #4]
 80104e2:	f003 0303 	and.w	r3, r3, #3
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d010      	beq.n	801050c <pbuf_alloc+0x1c8>
 80104ea:	4b0b      	ldr	r3, [pc, #44]	; (8010518 <pbuf_alloc+0x1d4>)
 80104ec:	f44f 7291 	mov.w	r2, #290	; 0x122
 80104f0:	490d      	ldr	r1, [pc, #52]	; (8010528 <pbuf_alloc+0x1e4>)
 80104f2:	480b      	ldr	r0, [pc, #44]	; (8010520 <pbuf_alloc+0x1dc>)
 80104f4:	f00f f9b8 	bl	801f868 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80104f8:	e008      	b.n	801050c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80104fa:	4b07      	ldr	r3, [pc, #28]	; (8010518 <pbuf_alloc+0x1d4>)
 80104fc:	f240 1227 	movw	r2, #295	; 0x127
 8010500:	490a      	ldr	r1, [pc, #40]	; (801052c <pbuf_alloc+0x1e8>)
 8010502:	4807      	ldr	r0, [pc, #28]	; (8010520 <pbuf_alloc+0x1dc>)
 8010504:	f00f f9b0 	bl	801f868 <iprintf>
      return NULL;
 8010508:	2300      	movs	r3, #0
 801050a:	e001      	b.n	8010510 <pbuf_alloc+0x1cc>
      break;
 801050c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801050e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010510:	4618      	mov	r0, r3
 8010512:	3728      	adds	r7, #40	; 0x28
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}
 8010518:	08022f64 	.word	0x08022f64
 801051c:	08022f94 	.word	0x08022f94
 8010520:	08022fc4 	.word	0x08022fc4
 8010524:	08022fec 	.word	0x08022fec
 8010528:	08023020 	.word	0x08023020
 801052c:	0802304c 	.word	0x0802304c

08010530 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b086      	sub	sp, #24
 8010534:	af02      	add	r7, sp, #8
 8010536:	6078      	str	r0, [r7, #4]
 8010538:	460b      	mov	r3, r1
 801053a:	807b      	strh	r3, [r7, #2]
 801053c:	4613      	mov	r3, r2
 801053e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010540:	883b      	ldrh	r3, [r7, #0]
 8010542:	2b41      	cmp	r3, #65	; 0x41
 8010544:	d009      	beq.n	801055a <pbuf_alloc_reference+0x2a>
 8010546:	883b      	ldrh	r3, [r7, #0]
 8010548:	2b01      	cmp	r3, #1
 801054a:	d006      	beq.n	801055a <pbuf_alloc_reference+0x2a>
 801054c:	4b0f      	ldr	r3, [pc, #60]	; (801058c <pbuf_alloc_reference+0x5c>)
 801054e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8010552:	490f      	ldr	r1, [pc, #60]	; (8010590 <pbuf_alloc_reference+0x60>)
 8010554:	480f      	ldr	r0, [pc, #60]	; (8010594 <pbuf_alloc_reference+0x64>)
 8010556:	f00f f987 	bl	801f868 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801055a:	200c      	movs	r0, #12
 801055c:	f7ff fa9c 	bl	800fa98 <memp_malloc>
 8010560:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d101      	bne.n	801056c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010568:	2300      	movs	r3, #0
 801056a:	e00b      	b.n	8010584 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801056c:	8879      	ldrh	r1, [r7, #2]
 801056e:	887a      	ldrh	r2, [r7, #2]
 8010570:	2300      	movs	r3, #0
 8010572:	9301      	str	r3, [sp, #4]
 8010574:	883b      	ldrh	r3, [r7, #0]
 8010576:	9300      	str	r3, [sp, #0]
 8010578:	460b      	mov	r3, r1
 801057a:	6879      	ldr	r1, [r7, #4]
 801057c:	68f8      	ldr	r0, [r7, #12]
 801057e:	f7ff feb7 	bl	80102f0 <pbuf_init_alloced_pbuf>
  return p;
 8010582:	68fb      	ldr	r3, [r7, #12]
}
 8010584:	4618      	mov	r0, r3
 8010586:	3710      	adds	r7, #16
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}
 801058c:	08022f64 	.word	0x08022f64
 8010590:	08023068 	.word	0x08023068
 8010594:	08022fc4 	.word	0x08022fc4

08010598 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b088      	sub	sp, #32
 801059c:	af02      	add	r7, sp, #8
 801059e:	607b      	str	r3, [r7, #4]
 80105a0:	4603      	mov	r3, r0
 80105a2:	73fb      	strb	r3, [r7, #15]
 80105a4:	460b      	mov	r3, r1
 80105a6:	81bb      	strh	r3, [r7, #12]
 80105a8:	4613      	mov	r3, r2
 80105aa:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80105ac:	7bfb      	ldrb	r3, [r7, #15]
 80105ae:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80105b0:	8a7b      	ldrh	r3, [r7, #18]
 80105b2:	3303      	adds	r3, #3
 80105b4:	f023 0203 	bic.w	r2, r3, #3
 80105b8:	89bb      	ldrh	r3, [r7, #12]
 80105ba:	441a      	add	r2, r3
 80105bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80105be:	429a      	cmp	r2, r3
 80105c0:	d901      	bls.n	80105c6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80105c2:	2300      	movs	r3, #0
 80105c4:	e018      	b.n	80105f8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80105c6:	6a3b      	ldr	r3, [r7, #32]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d007      	beq.n	80105dc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80105cc:	8a7b      	ldrh	r3, [r7, #18]
 80105ce:	3303      	adds	r3, #3
 80105d0:	f023 0303 	bic.w	r3, r3, #3
 80105d4:	6a3a      	ldr	r2, [r7, #32]
 80105d6:	4413      	add	r3, r2
 80105d8:	617b      	str	r3, [r7, #20]
 80105da:	e001      	b.n	80105e0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80105dc:	2300      	movs	r3, #0
 80105de:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80105e0:	6878      	ldr	r0, [r7, #4]
 80105e2:	89b9      	ldrh	r1, [r7, #12]
 80105e4:	89ba      	ldrh	r2, [r7, #12]
 80105e6:	2302      	movs	r3, #2
 80105e8:	9301      	str	r3, [sp, #4]
 80105ea:	897b      	ldrh	r3, [r7, #10]
 80105ec:	9300      	str	r3, [sp, #0]
 80105ee:	460b      	mov	r3, r1
 80105f0:	6979      	ldr	r1, [r7, #20]
 80105f2:	f7ff fe7d 	bl	80102f0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80105f6:	687b      	ldr	r3, [r7, #4]
}
 80105f8:	4618      	mov	r0, r3
 80105fa:	3718      	adds	r7, #24
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd80      	pop	{r7, pc}

08010600 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b084      	sub	sp, #16
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
 8010608:	460b      	mov	r3, r1
 801060a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d106      	bne.n	8010620 <pbuf_realloc+0x20>
 8010612:	4b3a      	ldr	r3, [pc, #232]	; (80106fc <pbuf_realloc+0xfc>)
 8010614:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8010618:	4939      	ldr	r1, [pc, #228]	; (8010700 <pbuf_realloc+0x100>)
 801061a:	483a      	ldr	r0, [pc, #232]	; (8010704 <pbuf_realloc+0x104>)
 801061c:	f00f f924 	bl	801f868 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	891b      	ldrh	r3, [r3, #8]
 8010624:	887a      	ldrh	r2, [r7, #2]
 8010626:	429a      	cmp	r2, r3
 8010628:	d263      	bcs.n	80106f2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	891a      	ldrh	r2, [r3, #8]
 801062e:	887b      	ldrh	r3, [r7, #2]
 8010630:	1ad3      	subs	r3, r2, r3
 8010632:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010634:	887b      	ldrh	r3, [r7, #2]
 8010636:	817b      	strh	r3, [r7, #10]
  q = p;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801063c:	e018      	b.n	8010670 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	895b      	ldrh	r3, [r3, #10]
 8010642:	897a      	ldrh	r2, [r7, #10]
 8010644:	1ad3      	subs	r3, r2, r3
 8010646:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	891a      	ldrh	r2, [r3, #8]
 801064c:	893b      	ldrh	r3, [r7, #8]
 801064e:	1ad3      	subs	r3, r2, r3
 8010650:	b29a      	uxth	r2, r3
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d106      	bne.n	8010670 <pbuf_realloc+0x70>
 8010662:	4b26      	ldr	r3, [pc, #152]	; (80106fc <pbuf_realloc+0xfc>)
 8010664:	f240 12af 	movw	r2, #431	; 0x1af
 8010668:	4927      	ldr	r1, [pc, #156]	; (8010708 <pbuf_realloc+0x108>)
 801066a:	4826      	ldr	r0, [pc, #152]	; (8010704 <pbuf_realloc+0x104>)
 801066c:	f00f f8fc 	bl	801f868 <iprintf>
  while (rem_len > q->len) {
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	895b      	ldrh	r3, [r3, #10]
 8010674:	897a      	ldrh	r2, [r7, #10]
 8010676:	429a      	cmp	r2, r3
 8010678:	d8e1      	bhi.n	801063e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	7b1b      	ldrb	r3, [r3, #12]
 801067e:	f003 030f 	and.w	r3, r3, #15
 8010682:	2b00      	cmp	r3, #0
 8010684:	d121      	bne.n	80106ca <pbuf_realloc+0xca>
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	895b      	ldrh	r3, [r3, #10]
 801068a:	897a      	ldrh	r2, [r7, #10]
 801068c:	429a      	cmp	r2, r3
 801068e:	d01c      	beq.n	80106ca <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	7b5b      	ldrb	r3, [r3, #13]
 8010694:	f003 0302 	and.w	r3, r3, #2
 8010698:	2b00      	cmp	r3, #0
 801069a:	d116      	bne.n	80106ca <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	685a      	ldr	r2, [r3, #4]
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	1ad3      	subs	r3, r2, r3
 80106a4:	b29a      	uxth	r2, r3
 80106a6:	897b      	ldrh	r3, [r7, #10]
 80106a8:	4413      	add	r3, r2
 80106aa:	b29b      	uxth	r3, r3
 80106ac:	4619      	mov	r1, r3
 80106ae:	68f8      	ldr	r0, [r7, #12]
 80106b0:	f7fe ff66 	bl	800f580 <mem_trim>
 80106b4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d106      	bne.n	80106ca <pbuf_realloc+0xca>
 80106bc:	4b0f      	ldr	r3, [pc, #60]	; (80106fc <pbuf_realloc+0xfc>)
 80106be:	f240 12bd 	movw	r2, #445	; 0x1bd
 80106c2:	4912      	ldr	r1, [pc, #72]	; (801070c <pbuf_realloc+0x10c>)
 80106c4:	480f      	ldr	r0, [pc, #60]	; (8010704 <pbuf_realloc+0x104>)
 80106c6:	f00f f8cf 	bl	801f868 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	897a      	ldrh	r2, [r7, #10]
 80106ce:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	895a      	ldrh	r2, [r3, #10]
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d004      	beq.n	80106ea <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	4618      	mov	r0, r3
 80106e6:	f000 f943 	bl	8010970 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	2200      	movs	r2, #0
 80106ee:	601a      	str	r2, [r3, #0]
 80106f0:	e000      	b.n	80106f4 <pbuf_realloc+0xf4>
    return;
 80106f2:	bf00      	nop

}
 80106f4:	3710      	adds	r7, #16
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}
 80106fa:	bf00      	nop
 80106fc:	08022f64 	.word	0x08022f64
 8010700:	0802307c 	.word	0x0802307c
 8010704:	08022fc4 	.word	0x08022fc4
 8010708:	08023094 	.word	0x08023094
 801070c:	080230ac 	.word	0x080230ac

08010710 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b086      	sub	sp, #24
 8010714:	af00      	add	r7, sp, #0
 8010716:	60f8      	str	r0, [r7, #12]
 8010718:	60b9      	str	r1, [r7, #8]
 801071a:	4613      	mov	r3, r2
 801071c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d106      	bne.n	8010732 <pbuf_add_header_impl+0x22>
 8010724:	4b2b      	ldr	r3, [pc, #172]	; (80107d4 <pbuf_add_header_impl+0xc4>)
 8010726:	f240 12df 	movw	r2, #479	; 0x1df
 801072a:	492b      	ldr	r1, [pc, #172]	; (80107d8 <pbuf_add_header_impl+0xc8>)
 801072c:	482b      	ldr	r0, [pc, #172]	; (80107dc <pbuf_add_header_impl+0xcc>)
 801072e:	f00f f89b 	bl	801f868 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d003      	beq.n	8010740 <pbuf_add_header_impl+0x30>
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801073e:	d301      	bcc.n	8010744 <pbuf_add_header_impl+0x34>
    return 1;
 8010740:	2301      	movs	r3, #1
 8010742:	e043      	b.n	80107cc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010744:	68bb      	ldr	r3, [r7, #8]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d101      	bne.n	801074e <pbuf_add_header_impl+0x3e>
    return 0;
 801074a:	2300      	movs	r3, #0
 801074c:	e03e      	b.n	80107cc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	891a      	ldrh	r2, [r3, #8]
 8010756:	8a7b      	ldrh	r3, [r7, #18]
 8010758:	4413      	add	r3, r2
 801075a:	b29b      	uxth	r3, r3
 801075c:	8a7a      	ldrh	r2, [r7, #18]
 801075e:	429a      	cmp	r2, r3
 8010760:	d901      	bls.n	8010766 <pbuf_add_header_impl+0x56>
    return 1;
 8010762:	2301      	movs	r3, #1
 8010764:	e032      	b.n	80107cc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	7b1b      	ldrb	r3, [r3, #12]
 801076a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801076c:	8a3b      	ldrh	r3, [r7, #16]
 801076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010772:	2b00      	cmp	r3, #0
 8010774:	d00c      	beq.n	8010790 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	685a      	ldr	r2, [r3, #4]
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	425b      	negs	r3, r3
 801077e:	4413      	add	r3, r2
 8010780:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	3310      	adds	r3, #16
 8010786:	697a      	ldr	r2, [r7, #20]
 8010788:	429a      	cmp	r2, r3
 801078a:	d20d      	bcs.n	80107a8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801078c:	2301      	movs	r3, #1
 801078e:	e01d      	b.n	80107cc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010790:	79fb      	ldrb	r3, [r7, #7]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d006      	beq.n	80107a4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	685a      	ldr	r2, [r3, #4]
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	425b      	negs	r3, r3
 801079e:	4413      	add	r3, r2
 80107a0:	617b      	str	r3, [r7, #20]
 80107a2:	e001      	b.n	80107a8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80107a4:	2301      	movs	r3, #1
 80107a6:	e011      	b.n	80107cc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	697a      	ldr	r2, [r7, #20]
 80107ac:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	895a      	ldrh	r2, [r3, #10]
 80107b2:	8a7b      	ldrh	r3, [r7, #18]
 80107b4:	4413      	add	r3, r2
 80107b6:	b29a      	uxth	r2, r3
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	891a      	ldrh	r2, [r3, #8]
 80107c0:	8a7b      	ldrh	r3, [r7, #18]
 80107c2:	4413      	add	r3, r2
 80107c4:	b29a      	uxth	r2, r3
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	811a      	strh	r2, [r3, #8]


  return 0;
 80107ca:	2300      	movs	r3, #0
}
 80107cc:	4618      	mov	r0, r3
 80107ce:	3718      	adds	r7, #24
 80107d0:	46bd      	mov	sp, r7
 80107d2:	bd80      	pop	{r7, pc}
 80107d4:	08022f64 	.word	0x08022f64
 80107d8:	080230c8 	.word	0x080230c8
 80107dc:	08022fc4 	.word	0x08022fc4

080107e0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b082      	sub	sp, #8
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80107ea:	2200      	movs	r2, #0
 80107ec:	6839      	ldr	r1, [r7, #0]
 80107ee:	6878      	ldr	r0, [r7, #4]
 80107f0:	f7ff ff8e 	bl	8010710 <pbuf_add_header_impl>
 80107f4:	4603      	mov	r3, r0
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3708      	adds	r7, #8
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}
	...

08010800 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b084      	sub	sp, #16
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
 8010808:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d106      	bne.n	801081e <pbuf_remove_header+0x1e>
 8010810:	4b20      	ldr	r3, [pc, #128]	; (8010894 <pbuf_remove_header+0x94>)
 8010812:	f240 224b 	movw	r2, #587	; 0x24b
 8010816:	4920      	ldr	r1, [pc, #128]	; (8010898 <pbuf_remove_header+0x98>)
 8010818:	4820      	ldr	r0, [pc, #128]	; (801089c <pbuf_remove_header+0x9c>)
 801081a:	f00f f825 	bl	801f868 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d003      	beq.n	801082c <pbuf_remove_header+0x2c>
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801082a:	d301      	bcc.n	8010830 <pbuf_remove_header+0x30>
    return 1;
 801082c:	2301      	movs	r3, #1
 801082e:	e02c      	b.n	801088a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d101      	bne.n	801083a <pbuf_remove_header+0x3a>
    return 0;
 8010836:	2300      	movs	r3, #0
 8010838:	e027      	b.n	801088a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	895b      	ldrh	r3, [r3, #10]
 8010842:	89fa      	ldrh	r2, [r7, #14]
 8010844:	429a      	cmp	r2, r3
 8010846:	d908      	bls.n	801085a <pbuf_remove_header+0x5a>
 8010848:	4b12      	ldr	r3, [pc, #72]	; (8010894 <pbuf_remove_header+0x94>)
 801084a:	f240 2255 	movw	r2, #597	; 0x255
 801084e:	4914      	ldr	r1, [pc, #80]	; (80108a0 <pbuf_remove_header+0xa0>)
 8010850:	4812      	ldr	r0, [pc, #72]	; (801089c <pbuf_remove_header+0x9c>)
 8010852:	f00f f809 	bl	801f868 <iprintf>
 8010856:	2301      	movs	r3, #1
 8010858:	e017      	b.n	801088a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	685b      	ldr	r3, [r3, #4]
 801085e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	685a      	ldr	r2, [r3, #4]
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	441a      	add	r2, r3
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	895a      	ldrh	r2, [r3, #10]
 8010870:	89fb      	ldrh	r3, [r7, #14]
 8010872:	1ad3      	subs	r3, r2, r3
 8010874:	b29a      	uxth	r2, r3
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	891a      	ldrh	r2, [r3, #8]
 801087e:	89fb      	ldrh	r3, [r7, #14]
 8010880:	1ad3      	subs	r3, r2, r3
 8010882:	b29a      	uxth	r2, r3
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010888:	2300      	movs	r3, #0
}
 801088a:	4618      	mov	r0, r3
 801088c:	3710      	adds	r7, #16
 801088e:	46bd      	mov	sp, r7
 8010890:	bd80      	pop	{r7, pc}
 8010892:	bf00      	nop
 8010894:	08022f64 	.word	0x08022f64
 8010898:	080230c8 	.word	0x080230c8
 801089c:	08022fc4 	.word	0x08022fc4
 80108a0:	080230d4 	.word	0x080230d4

080108a4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b082      	sub	sp, #8
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	460b      	mov	r3, r1
 80108ae:	807b      	strh	r3, [r7, #2]
 80108b0:	4613      	mov	r3, r2
 80108b2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80108b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	da08      	bge.n	80108ce <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80108bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80108c0:	425b      	negs	r3, r3
 80108c2:	4619      	mov	r1, r3
 80108c4:	6878      	ldr	r0, [r7, #4]
 80108c6:	f7ff ff9b 	bl	8010800 <pbuf_remove_header>
 80108ca:	4603      	mov	r3, r0
 80108cc:	e007      	b.n	80108de <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80108ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80108d2:	787a      	ldrb	r2, [r7, #1]
 80108d4:	4619      	mov	r1, r3
 80108d6:	6878      	ldr	r0, [r7, #4]
 80108d8:	f7ff ff1a 	bl	8010710 <pbuf_add_header_impl>
 80108dc:	4603      	mov	r3, r0
  }
}
 80108de:	4618      	mov	r0, r3
 80108e0:	3708      	adds	r7, #8
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd80      	pop	{r7, pc}

080108e6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80108e6:	b580      	push	{r7, lr}
 80108e8:	b082      	sub	sp, #8
 80108ea:	af00      	add	r7, sp, #0
 80108ec:	6078      	str	r0, [r7, #4]
 80108ee:	460b      	mov	r3, r1
 80108f0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80108f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80108f6:	2201      	movs	r2, #1
 80108f8:	4619      	mov	r1, r3
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	f7ff ffd2 	bl	80108a4 <pbuf_header_impl>
 8010900:	4603      	mov	r3, r0
}
 8010902:	4618      	mov	r0, r3
 8010904:	3708      	adds	r7, #8
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}

0801090a <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 801090a:	b580      	push	{r7, lr}
 801090c:	b086      	sub	sp, #24
 801090e:	af00      	add	r7, sp, #0
 8010910:	6078      	str	r0, [r7, #4]
 8010912:	460b      	mov	r3, r1
 8010914:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 801091a:	887b      	ldrh	r3, [r7, #2]
 801091c:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 801091e:	e01c      	b.n	801095a <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 8010920:	697b      	ldr	r3, [r7, #20]
 8010922:	895b      	ldrh	r3, [r3, #10]
 8010924:	8a7a      	ldrh	r2, [r7, #18]
 8010926:	429a      	cmp	r2, r3
 8010928:	d310      	bcc.n	801094c <pbuf_free_header+0x42>
      struct pbuf *f = p;
 801092a:	697b      	ldr	r3, [r7, #20]
 801092c:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 801092e:	697b      	ldr	r3, [r7, #20]
 8010930:	895b      	ldrh	r3, [r3, #10]
 8010932:	8a7a      	ldrh	r2, [r7, #18]
 8010934:	1ad3      	subs	r3, r2, r3
 8010936:	827b      	strh	r3, [r7, #18]
      p = p->next;
 8010938:	697b      	ldr	r3, [r7, #20]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	617b      	str	r3, [r7, #20]
      f->next = 0;
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	2200      	movs	r2, #0
 8010942:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 8010944:	68f8      	ldr	r0, [r7, #12]
 8010946:	f000 f813 	bl	8010970 <pbuf_free>
 801094a:	e006      	b.n	801095a <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 801094c:	8a7b      	ldrh	r3, [r7, #18]
 801094e:	4619      	mov	r1, r3
 8010950:	6978      	ldr	r0, [r7, #20]
 8010952:	f7ff ff55 	bl	8010800 <pbuf_remove_header>
      free_left = 0;
 8010956:	2300      	movs	r3, #0
 8010958:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 801095a:	8a7b      	ldrh	r3, [r7, #18]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d002      	beq.n	8010966 <pbuf_free_header+0x5c>
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d1dc      	bne.n	8010920 <pbuf_free_header+0x16>
    }
  }
  return p;
 8010966:	697b      	ldr	r3, [r7, #20]
}
 8010968:	4618      	mov	r0, r3
 801096a:	3718      	adds	r7, #24
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}

08010970 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b088      	sub	sp, #32
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d10b      	bne.n	8010996 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d106      	bne.n	8010992 <pbuf_free+0x22>
 8010984:	4b3b      	ldr	r3, [pc, #236]	; (8010a74 <pbuf_free+0x104>)
 8010986:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801098a:	493b      	ldr	r1, [pc, #236]	; (8010a78 <pbuf_free+0x108>)
 801098c:	483b      	ldr	r0, [pc, #236]	; (8010a7c <pbuf_free+0x10c>)
 801098e:	f00e ff6b 	bl	801f868 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010992:	2300      	movs	r3, #0
 8010994:	e069      	b.n	8010a6a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8010996:	2300      	movs	r3, #0
 8010998:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801099a:	e062      	b.n	8010a62 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801099c:	f00b ff52 	bl	801c844 <sys_arch_protect>
 80109a0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	7b9b      	ldrb	r3, [r3, #14]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d106      	bne.n	80109b8 <pbuf_free+0x48>
 80109aa:	4b32      	ldr	r3, [pc, #200]	; (8010a74 <pbuf_free+0x104>)
 80109ac:	f240 22f1 	movw	r2, #753	; 0x2f1
 80109b0:	4933      	ldr	r1, [pc, #204]	; (8010a80 <pbuf_free+0x110>)
 80109b2:	4832      	ldr	r0, [pc, #200]	; (8010a7c <pbuf_free+0x10c>)
 80109b4:	f00e ff58 	bl	801f868 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	7b9b      	ldrb	r3, [r3, #14]
 80109bc:	3b01      	subs	r3, #1
 80109be:	b2da      	uxtb	r2, r3
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	739a      	strb	r2, [r3, #14]
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	7b9b      	ldrb	r3, [r3, #14]
 80109c8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80109ca:	69b8      	ldr	r0, [r7, #24]
 80109cc:	f00b ff48 	bl	801c860 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80109d0:	7dfb      	ldrb	r3, [r7, #23]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d143      	bne.n	8010a5e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	7b1b      	ldrb	r3, [r3, #12]
 80109e0:	f003 030f 	and.w	r3, r3, #15
 80109e4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	7b5b      	ldrb	r3, [r3, #13]
 80109ea:	f003 0302 	and.w	r3, r3, #2
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d011      	beq.n	8010a16 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	691b      	ldr	r3, [r3, #16]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d106      	bne.n	8010a0c <pbuf_free+0x9c>
 80109fe:	4b1d      	ldr	r3, [pc, #116]	; (8010a74 <pbuf_free+0x104>)
 8010a00:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010a04:	491f      	ldr	r1, [pc, #124]	; (8010a84 <pbuf_free+0x114>)
 8010a06:	481d      	ldr	r0, [pc, #116]	; (8010a7c <pbuf_free+0x10c>)
 8010a08:	f00e ff2e 	bl	801f868 <iprintf>
        pc->custom_free_function(p);
 8010a0c:	68bb      	ldr	r3, [r7, #8]
 8010a0e:	691b      	ldr	r3, [r3, #16]
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	4798      	blx	r3
 8010a14:	e01d      	b.n	8010a52 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8010a16:	7bfb      	ldrb	r3, [r7, #15]
 8010a18:	2b02      	cmp	r3, #2
 8010a1a:	d104      	bne.n	8010a26 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8010a1c:	6879      	ldr	r1, [r7, #4]
 8010a1e:	200d      	movs	r0, #13
 8010a20:	f7ff f88c 	bl	800fb3c <memp_free>
 8010a24:	e015      	b.n	8010a52 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8010a26:	7bfb      	ldrb	r3, [r7, #15]
 8010a28:	2b01      	cmp	r3, #1
 8010a2a:	d104      	bne.n	8010a36 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8010a2c:	6879      	ldr	r1, [r7, #4]
 8010a2e:	200c      	movs	r0, #12
 8010a30:	f7ff f884 	bl	800fb3c <memp_free>
 8010a34:	e00d      	b.n	8010a52 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8010a36:	7bfb      	ldrb	r3, [r7, #15]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d103      	bne.n	8010a44 <pbuf_free+0xd4>
          mem_free(p);
 8010a3c:	6878      	ldr	r0, [r7, #4]
 8010a3e:	f7fe fd0f 	bl	800f460 <mem_free>
 8010a42:	e006      	b.n	8010a52 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010a44:	4b0b      	ldr	r3, [pc, #44]	; (8010a74 <pbuf_free+0x104>)
 8010a46:	f240 320f 	movw	r2, #783	; 0x30f
 8010a4a:	490f      	ldr	r1, [pc, #60]	; (8010a88 <pbuf_free+0x118>)
 8010a4c:	480b      	ldr	r0, [pc, #44]	; (8010a7c <pbuf_free+0x10c>)
 8010a4e:	f00e ff0b 	bl	801f868 <iprintf>
        }
      }
      count++;
 8010a52:	7ffb      	ldrb	r3, [r7, #31]
 8010a54:	3301      	adds	r3, #1
 8010a56:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8010a58:	693b      	ldr	r3, [r7, #16]
 8010a5a:	607b      	str	r3, [r7, #4]
 8010a5c:	e001      	b.n	8010a62 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8010a5e:	2300      	movs	r3, #0
 8010a60:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d199      	bne.n	801099c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010a68:	7ffb      	ldrb	r3, [r7, #31]
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	3720      	adds	r7, #32
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}
 8010a72:	bf00      	nop
 8010a74:	08022f64 	.word	0x08022f64
 8010a78:	080230c8 	.word	0x080230c8
 8010a7c:	08022fc4 	.word	0x08022fc4
 8010a80:	080230f4 	.word	0x080230f4
 8010a84:	0802310c 	.word	0x0802310c
 8010a88:	08023130 	.word	0x08023130

08010a8c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010a8c:	b480      	push	{r7}
 8010a8e:	b085      	sub	sp, #20
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010a94:	2300      	movs	r3, #0
 8010a96:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010a98:	e005      	b.n	8010aa6 <pbuf_clen+0x1a>
    ++len;
 8010a9a:	89fb      	ldrh	r3, [r7, #14]
 8010a9c:	3301      	adds	r3, #1
 8010a9e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d1f6      	bne.n	8010a9a <pbuf_clen+0xe>
  }
  return len;
 8010aac:	89fb      	ldrh	r3, [r7, #14]
}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	3714      	adds	r7, #20
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab8:	4770      	bx	lr
	...

08010abc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b084      	sub	sp, #16
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d016      	beq.n	8010af8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8010aca:	f00b febb 	bl	801c844 <sys_arch_protect>
 8010ace:	60f8      	str	r0, [r7, #12]
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	7b9b      	ldrb	r3, [r3, #14]
 8010ad4:	3301      	adds	r3, #1
 8010ad6:	b2da      	uxtb	r2, r3
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	739a      	strb	r2, [r3, #14]
 8010adc:	68f8      	ldr	r0, [r7, #12]
 8010ade:	f00b febf 	bl	801c860 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	7b9b      	ldrb	r3, [r3, #14]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d106      	bne.n	8010af8 <pbuf_ref+0x3c>
 8010aea:	4b05      	ldr	r3, [pc, #20]	; (8010b00 <pbuf_ref+0x44>)
 8010aec:	f240 3242 	movw	r2, #834	; 0x342
 8010af0:	4904      	ldr	r1, [pc, #16]	; (8010b04 <pbuf_ref+0x48>)
 8010af2:	4805      	ldr	r0, [pc, #20]	; (8010b08 <pbuf_ref+0x4c>)
 8010af4:	f00e feb8 	bl	801f868 <iprintf>
  }
}
 8010af8:	bf00      	nop
 8010afa:	3710      	adds	r7, #16
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}
 8010b00:	08022f64 	.word	0x08022f64
 8010b04:	08023144 	.word	0x08023144
 8010b08:	08022fc4 	.word	0x08022fc4

08010b0c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b084      	sub	sp, #16
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
 8010b14:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d002      	beq.n	8010b22 <pbuf_cat+0x16>
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d107      	bne.n	8010b32 <pbuf_cat+0x26>
 8010b22:	4b20      	ldr	r3, [pc, #128]	; (8010ba4 <pbuf_cat+0x98>)
 8010b24:	f240 3259 	movw	r2, #857	; 0x359
 8010b28:	491f      	ldr	r1, [pc, #124]	; (8010ba8 <pbuf_cat+0x9c>)
 8010b2a:	4820      	ldr	r0, [pc, #128]	; (8010bac <pbuf_cat+0xa0>)
 8010b2c:	f00e fe9c 	bl	801f868 <iprintf>
 8010b30:	e034      	b.n	8010b9c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	60fb      	str	r3, [r7, #12]
 8010b36:	e00a      	b.n	8010b4e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	891a      	ldrh	r2, [r3, #8]
 8010b3c:	683b      	ldr	r3, [r7, #0]
 8010b3e:	891b      	ldrh	r3, [r3, #8]
 8010b40:	4413      	add	r3, r2
 8010b42:	b29a      	uxth	r2, r3
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	60fb      	str	r3, [r7, #12]
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d1f0      	bne.n	8010b38 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	891a      	ldrh	r2, [r3, #8]
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	895b      	ldrh	r3, [r3, #10]
 8010b5e:	429a      	cmp	r2, r3
 8010b60:	d006      	beq.n	8010b70 <pbuf_cat+0x64>
 8010b62:	4b10      	ldr	r3, [pc, #64]	; (8010ba4 <pbuf_cat+0x98>)
 8010b64:	f240 3262 	movw	r2, #866	; 0x362
 8010b68:	4911      	ldr	r1, [pc, #68]	; (8010bb0 <pbuf_cat+0xa4>)
 8010b6a:	4810      	ldr	r0, [pc, #64]	; (8010bac <pbuf_cat+0xa0>)
 8010b6c:	f00e fe7c 	bl	801f868 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d006      	beq.n	8010b86 <pbuf_cat+0x7a>
 8010b78:	4b0a      	ldr	r3, [pc, #40]	; (8010ba4 <pbuf_cat+0x98>)
 8010b7a:	f240 3263 	movw	r2, #867	; 0x363
 8010b7e:	490d      	ldr	r1, [pc, #52]	; (8010bb4 <pbuf_cat+0xa8>)
 8010b80:	480a      	ldr	r0, [pc, #40]	; (8010bac <pbuf_cat+0xa0>)
 8010b82:	f00e fe71 	bl	801f868 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	891a      	ldrh	r2, [r3, #8]
 8010b8a:	683b      	ldr	r3, [r7, #0]
 8010b8c:	891b      	ldrh	r3, [r3, #8]
 8010b8e:	4413      	add	r3, r2
 8010b90:	b29a      	uxth	r2, r3
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	683a      	ldr	r2, [r7, #0]
 8010b9a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010b9c:	3710      	adds	r7, #16
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}
 8010ba2:	bf00      	nop
 8010ba4:	08022f64 	.word	0x08022f64
 8010ba8:	08023158 	.word	0x08023158
 8010bac:	08022fc4 	.word	0x08022fc4
 8010bb0:	08023190 	.word	0x08023190
 8010bb4:	080231c0 	.word	0x080231c0

08010bb8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b082      	sub	sp, #8
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
 8010bc0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8010bc2:	6839      	ldr	r1, [r7, #0]
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	f7ff ffa1 	bl	8010b0c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8010bca:	6838      	ldr	r0, [r7, #0]
 8010bcc:	f7ff ff76 	bl	8010abc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8010bd0:	bf00      	nop
 8010bd2:	3708      	adds	r7, #8
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	bd80      	pop	{r7, pc}

08010bd8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b086      	sub	sp, #24
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
 8010be0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010be2:	2300      	movs	r3, #0
 8010be4:	617b      	str	r3, [r7, #20]
 8010be6:	2300      	movs	r3, #0
 8010be8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d008      	beq.n	8010c02 <pbuf_copy+0x2a>
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d005      	beq.n	8010c02 <pbuf_copy+0x2a>
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	891a      	ldrh	r2, [r3, #8]
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	891b      	ldrh	r3, [r3, #8]
 8010bfe:	429a      	cmp	r2, r3
 8010c00:	d209      	bcs.n	8010c16 <pbuf_copy+0x3e>
 8010c02:	4b57      	ldr	r3, [pc, #348]	; (8010d60 <pbuf_copy+0x188>)
 8010c04:	f240 32c9 	movw	r2, #969	; 0x3c9
 8010c08:	4956      	ldr	r1, [pc, #344]	; (8010d64 <pbuf_copy+0x18c>)
 8010c0a:	4857      	ldr	r0, [pc, #348]	; (8010d68 <pbuf_copy+0x190>)
 8010c0c:	f00e fe2c 	bl	801f868 <iprintf>
 8010c10:	f06f 030f 	mvn.w	r3, #15
 8010c14:	e09f      	b.n	8010d56 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	895b      	ldrh	r3, [r3, #10]
 8010c1a:	461a      	mov	r2, r3
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	1ad2      	subs	r2, r2, r3
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	895b      	ldrh	r3, [r3, #10]
 8010c24:	4619      	mov	r1, r3
 8010c26:	693b      	ldr	r3, [r7, #16]
 8010c28:	1acb      	subs	r3, r1, r3
 8010c2a:	429a      	cmp	r2, r3
 8010c2c:	d306      	bcc.n	8010c3c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	895b      	ldrh	r3, [r3, #10]
 8010c32:	461a      	mov	r2, r3
 8010c34:	693b      	ldr	r3, [r7, #16]
 8010c36:	1ad3      	subs	r3, r2, r3
 8010c38:	60fb      	str	r3, [r7, #12]
 8010c3a:	e005      	b.n	8010c48 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	895b      	ldrh	r3, [r3, #10]
 8010c40:	461a      	mov	r2, r3
 8010c42:	697b      	ldr	r3, [r7, #20]
 8010c44:	1ad3      	subs	r3, r2, r3
 8010c46:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	685a      	ldr	r2, [r3, #4]
 8010c4c:	697b      	ldr	r3, [r7, #20]
 8010c4e:	18d0      	adds	r0, r2, r3
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	685a      	ldr	r2, [r3, #4]
 8010c54:	693b      	ldr	r3, [r7, #16]
 8010c56:	4413      	add	r3, r2
 8010c58:	68fa      	ldr	r2, [r7, #12]
 8010c5a:	4619      	mov	r1, r3
 8010c5c:	f00d ff66 	bl	801eb2c <memcpy>
    offset_to += len;
 8010c60:	697a      	ldr	r2, [r7, #20]
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	4413      	add	r3, r2
 8010c66:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8010c68:	693a      	ldr	r2, [r7, #16]
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	4413      	add	r3, r2
 8010c6e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	895b      	ldrh	r3, [r3, #10]
 8010c74:	461a      	mov	r2, r3
 8010c76:	697b      	ldr	r3, [r7, #20]
 8010c78:	4293      	cmp	r3, r2
 8010c7a:	d906      	bls.n	8010c8a <pbuf_copy+0xb2>
 8010c7c:	4b38      	ldr	r3, [pc, #224]	; (8010d60 <pbuf_copy+0x188>)
 8010c7e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8010c82:	493a      	ldr	r1, [pc, #232]	; (8010d6c <pbuf_copy+0x194>)
 8010c84:	4838      	ldr	r0, [pc, #224]	; (8010d68 <pbuf_copy+0x190>)
 8010c86:	f00e fdef 	bl	801f868 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010c8a:	683b      	ldr	r3, [r7, #0]
 8010c8c:	895b      	ldrh	r3, [r3, #10]
 8010c8e:	461a      	mov	r2, r3
 8010c90:	693b      	ldr	r3, [r7, #16]
 8010c92:	4293      	cmp	r3, r2
 8010c94:	d906      	bls.n	8010ca4 <pbuf_copy+0xcc>
 8010c96:	4b32      	ldr	r3, [pc, #200]	; (8010d60 <pbuf_copy+0x188>)
 8010c98:	f240 32da 	movw	r2, #986	; 0x3da
 8010c9c:	4934      	ldr	r1, [pc, #208]	; (8010d70 <pbuf_copy+0x198>)
 8010c9e:	4832      	ldr	r0, [pc, #200]	; (8010d68 <pbuf_copy+0x190>)
 8010ca0:	f00e fde2 	bl	801f868 <iprintf>
    if (offset_from >= p_from->len) {
 8010ca4:	683b      	ldr	r3, [r7, #0]
 8010ca6:	895b      	ldrh	r3, [r3, #10]
 8010ca8:	461a      	mov	r2, r3
 8010caa:	693b      	ldr	r3, [r7, #16]
 8010cac:	4293      	cmp	r3, r2
 8010cae:	d304      	bcc.n	8010cba <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	895b      	ldrh	r3, [r3, #10]
 8010cbe:	461a      	mov	r2, r3
 8010cc0:	697b      	ldr	r3, [r7, #20]
 8010cc2:	4293      	cmp	r3, r2
 8010cc4:	d114      	bne.n	8010cf0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d10c      	bne.n	8010cf0 <pbuf_copy+0x118>
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d009      	beq.n	8010cf0 <pbuf_copy+0x118>
 8010cdc:	4b20      	ldr	r3, [pc, #128]	; (8010d60 <pbuf_copy+0x188>)
 8010cde:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8010ce2:	4924      	ldr	r1, [pc, #144]	; (8010d74 <pbuf_copy+0x19c>)
 8010ce4:	4820      	ldr	r0, [pc, #128]	; (8010d68 <pbuf_copy+0x190>)
 8010ce6:	f00e fdbf 	bl	801f868 <iprintf>
 8010cea:	f06f 030f 	mvn.w	r3, #15
 8010cee:	e032      	b.n	8010d56 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010cf0:	683b      	ldr	r3, [r7, #0]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d013      	beq.n	8010d1e <pbuf_copy+0x146>
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	895a      	ldrh	r2, [r3, #10]
 8010cfa:	683b      	ldr	r3, [r7, #0]
 8010cfc:	891b      	ldrh	r3, [r3, #8]
 8010cfe:	429a      	cmp	r2, r3
 8010d00:	d10d      	bne.n	8010d1e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d009      	beq.n	8010d1e <pbuf_copy+0x146>
 8010d0a:	4b15      	ldr	r3, [pc, #84]	; (8010d60 <pbuf_copy+0x188>)
 8010d0c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8010d10:	4919      	ldr	r1, [pc, #100]	; (8010d78 <pbuf_copy+0x1a0>)
 8010d12:	4815      	ldr	r0, [pc, #84]	; (8010d68 <pbuf_copy+0x190>)
 8010d14:	f00e fda8 	bl	801f868 <iprintf>
 8010d18:	f06f 0305 	mvn.w	r3, #5
 8010d1c:	e01b      	b.n	8010d56 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d013      	beq.n	8010d4c <pbuf_copy+0x174>
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	895a      	ldrh	r2, [r3, #10]
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	891b      	ldrh	r3, [r3, #8]
 8010d2c:	429a      	cmp	r2, r3
 8010d2e:	d10d      	bne.n	8010d4c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d009      	beq.n	8010d4c <pbuf_copy+0x174>
 8010d38:	4b09      	ldr	r3, [pc, #36]	; (8010d60 <pbuf_copy+0x188>)
 8010d3a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8010d3e:	490e      	ldr	r1, [pc, #56]	; (8010d78 <pbuf_copy+0x1a0>)
 8010d40:	4809      	ldr	r0, [pc, #36]	; (8010d68 <pbuf_copy+0x190>)
 8010d42:	f00e fd91 	bl	801f868 <iprintf>
 8010d46:	f06f 0305 	mvn.w	r3, #5
 8010d4a:	e004      	b.n	8010d56 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010d4c:	683b      	ldr	r3, [r7, #0]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	f47f af61 	bne.w	8010c16 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010d54:	2300      	movs	r3, #0
}
 8010d56:	4618      	mov	r0, r3
 8010d58:	3718      	adds	r7, #24
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd80      	pop	{r7, pc}
 8010d5e:	bf00      	nop
 8010d60:	08022f64 	.word	0x08022f64
 8010d64:	0802320c 	.word	0x0802320c
 8010d68:	08022fc4 	.word	0x08022fc4
 8010d6c:	0802323c 	.word	0x0802323c
 8010d70:	08023254 	.word	0x08023254
 8010d74:	08023270 	.word	0x08023270
 8010d78:	08023280 	.word	0x08023280

08010d7c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b088      	sub	sp, #32
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	60f8      	str	r0, [r7, #12]
 8010d84:	60b9      	str	r1, [r7, #8]
 8010d86:	4611      	mov	r1, r2
 8010d88:	461a      	mov	r2, r3
 8010d8a:	460b      	mov	r3, r1
 8010d8c:	80fb      	strh	r3, [r7, #6]
 8010d8e:	4613      	mov	r3, r2
 8010d90:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8010d92:	2300      	movs	r3, #0
 8010d94:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010d96:	2300      	movs	r3, #0
 8010d98:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d108      	bne.n	8010db2 <pbuf_copy_partial+0x36>
 8010da0:	4b2b      	ldr	r3, [pc, #172]	; (8010e50 <pbuf_copy_partial+0xd4>)
 8010da2:	f240 420a 	movw	r2, #1034	; 0x40a
 8010da6:	492b      	ldr	r1, [pc, #172]	; (8010e54 <pbuf_copy_partial+0xd8>)
 8010da8:	482b      	ldr	r0, [pc, #172]	; (8010e58 <pbuf_copy_partial+0xdc>)
 8010daa:	f00e fd5d 	bl	801f868 <iprintf>
 8010dae:	2300      	movs	r3, #0
 8010db0:	e04a      	b.n	8010e48 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010db2:	68bb      	ldr	r3, [r7, #8]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d108      	bne.n	8010dca <pbuf_copy_partial+0x4e>
 8010db8:	4b25      	ldr	r3, [pc, #148]	; (8010e50 <pbuf_copy_partial+0xd4>)
 8010dba:	f240 420b 	movw	r2, #1035	; 0x40b
 8010dbe:	4927      	ldr	r1, [pc, #156]	; (8010e5c <pbuf_copy_partial+0xe0>)
 8010dc0:	4825      	ldr	r0, [pc, #148]	; (8010e58 <pbuf_copy_partial+0xdc>)
 8010dc2:	f00e fd51 	bl	801f868 <iprintf>
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	e03e      	b.n	8010e48 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	61fb      	str	r3, [r7, #28]
 8010dce:	e034      	b.n	8010e3a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8010dd0:	88bb      	ldrh	r3, [r7, #4]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d00a      	beq.n	8010dec <pbuf_copy_partial+0x70>
 8010dd6:	69fb      	ldr	r3, [r7, #28]
 8010dd8:	895b      	ldrh	r3, [r3, #10]
 8010dda:	88ba      	ldrh	r2, [r7, #4]
 8010ddc:	429a      	cmp	r2, r3
 8010dde:	d305      	bcc.n	8010dec <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8010de0:	69fb      	ldr	r3, [r7, #28]
 8010de2:	895b      	ldrh	r3, [r3, #10]
 8010de4:	88ba      	ldrh	r2, [r7, #4]
 8010de6:	1ad3      	subs	r3, r2, r3
 8010de8:	80bb      	strh	r3, [r7, #4]
 8010dea:	e023      	b.n	8010e34 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8010dec:	69fb      	ldr	r3, [r7, #28]
 8010dee:	895a      	ldrh	r2, [r3, #10]
 8010df0:	88bb      	ldrh	r3, [r7, #4]
 8010df2:	1ad3      	subs	r3, r2, r3
 8010df4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010df6:	8b3a      	ldrh	r2, [r7, #24]
 8010df8:	88fb      	ldrh	r3, [r7, #6]
 8010dfa:	429a      	cmp	r2, r3
 8010dfc:	d901      	bls.n	8010e02 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8010dfe:	88fb      	ldrh	r3, [r7, #6]
 8010e00:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010e02:	8b7b      	ldrh	r3, [r7, #26]
 8010e04:	68ba      	ldr	r2, [r7, #8]
 8010e06:	18d0      	adds	r0, r2, r3
 8010e08:	69fb      	ldr	r3, [r7, #28]
 8010e0a:	685a      	ldr	r2, [r3, #4]
 8010e0c:	88bb      	ldrh	r3, [r7, #4]
 8010e0e:	4413      	add	r3, r2
 8010e10:	8b3a      	ldrh	r2, [r7, #24]
 8010e12:	4619      	mov	r1, r3
 8010e14:	f00d fe8a 	bl	801eb2c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8010e18:	8afa      	ldrh	r2, [r7, #22]
 8010e1a:	8b3b      	ldrh	r3, [r7, #24]
 8010e1c:	4413      	add	r3, r2
 8010e1e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010e20:	8b7a      	ldrh	r2, [r7, #26]
 8010e22:	8b3b      	ldrh	r3, [r7, #24]
 8010e24:	4413      	add	r3, r2
 8010e26:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8010e28:	88fa      	ldrh	r2, [r7, #6]
 8010e2a:	8b3b      	ldrh	r3, [r7, #24]
 8010e2c:	1ad3      	subs	r3, r2, r3
 8010e2e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010e30:	2300      	movs	r3, #0
 8010e32:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010e34:	69fb      	ldr	r3, [r7, #28]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	61fb      	str	r3, [r7, #28]
 8010e3a:	88fb      	ldrh	r3, [r7, #6]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d002      	beq.n	8010e46 <pbuf_copy_partial+0xca>
 8010e40:	69fb      	ldr	r3, [r7, #28]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d1c4      	bne.n	8010dd0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8010e46:	8afb      	ldrh	r3, [r7, #22]
}
 8010e48:	4618      	mov	r0, r3
 8010e4a:	3720      	adds	r7, #32
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}
 8010e50:	08022f64 	.word	0x08022f64
 8010e54:	080232ac 	.word	0x080232ac
 8010e58:	08022fc4 	.word	0x08022fc4
 8010e5c:	080232cc 	.word	0x080232cc

08010e60 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8010e60:	b480      	push	{r7}
 8010e62:	b087      	sub	sp, #28
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	60f8      	str	r0, [r7, #12]
 8010e68:	460b      	mov	r3, r1
 8010e6a:	607a      	str	r2, [r7, #4]
 8010e6c:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8010e6e:	897b      	ldrh	r3, [r7, #10]
 8010e70:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8010e76:	e007      	b.n	8010e88 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8010e78:	693b      	ldr	r3, [r7, #16]
 8010e7a:	895b      	ldrh	r3, [r3, #10]
 8010e7c:	8afa      	ldrh	r2, [r7, #22]
 8010e7e:	1ad3      	subs	r3, r2, r3
 8010e80:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8010e82:	693b      	ldr	r3, [r7, #16]
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8010e88:	693b      	ldr	r3, [r7, #16]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d004      	beq.n	8010e98 <pbuf_skip_const+0x38>
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	895b      	ldrh	r3, [r3, #10]
 8010e92:	8afa      	ldrh	r2, [r7, #22]
 8010e94:	429a      	cmp	r2, r3
 8010e96:	d2ef      	bcs.n	8010e78 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d002      	beq.n	8010ea4 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	8afa      	ldrh	r2, [r7, #22]
 8010ea2:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8010ea4:	693b      	ldr	r3, [r7, #16]
}
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	371c      	adds	r7, #28
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb0:	4770      	bx	lr

08010eb2 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8010eb2:	b580      	push	{r7, lr}
 8010eb4:	b086      	sub	sp, #24
 8010eb6:	af00      	add	r7, sp, #0
 8010eb8:	60f8      	str	r0, [r7, #12]
 8010eba:	460b      	mov	r3, r1
 8010ebc:	607a      	str	r2, [r7, #4]
 8010ebe:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8010ec0:	897b      	ldrh	r3, [r7, #10]
 8010ec2:	687a      	ldr	r2, [r7, #4]
 8010ec4:	4619      	mov	r1, r3
 8010ec6:	68f8      	ldr	r0, [r7, #12]
 8010ec8:	f7ff ffca 	bl	8010e60 <pbuf_skip_const>
 8010ecc:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 8010ece:	697b      	ldr	r3, [r7, #20]
}
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	3718      	adds	r7, #24
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	bd80      	pop	{r7, pc}

08010ed8 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b088      	sub	sp, #32
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	60f8      	str	r0, [r7, #12]
 8010ee0:	60b9      	str	r1, [r7, #8]
 8010ee2:	4613      	mov	r3, r2
 8010ee4:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8010ee6:	88fb      	ldrh	r3, [r7, #6]
 8010ee8:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8010eea:	2300      	movs	r3, #0
 8010eec:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d109      	bne.n	8010f08 <pbuf_take+0x30>
 8010ef4:	4b3a      	ldr	r3, [pc, #232]	; (8010fe0 <pbuf_take+0x108>)
 8010ef6:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8010efa:	493a      	ldr	r1, [pc, #232]	; (8010fe4 <pbuf_take+0x10c>)
 8010efc:	483a      	ldr	r0, [pc, #232]	; (8010fe8 <pbuf_take+0x110>)
 8010efe:	f00e fcb3 	bl	801f868 <iprintf>
 8010f02:	f06f 030f 	mvn.w	r3, #15
 8010f06:	e067      	b.n	8010fd8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8010f08:	68bb      	ldr	r3, [r7, #8]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d109      	bne.n	8010f22 <pbuf_take+0x4a>
 8010f0e:	4b34      	ldr	r3, [pc, #208]	; (8010fe0 <pbuf_take+0x108>)
 8010f10:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8010f14:	4935      	ldr	r1, [pc, #212]	; (8010fec <pbuf_take+0x114>)
 8010f16:	4834      	ldr	r0, [pc, #208]	; (8010fe8 <pbuf_take+0x110>)
 8010f18:	f00e fca6 	bl	801f868 <iprintf>
 8010f1c:	f06f 030f 	mvn.w	r3, #15
 8010f20:	e05a      	b.n	8010fd8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	891b      	ldrh	r3, [r3, #8]
 8010f26:	88fa      	ldrh	r2, [r7, #6]
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	d909      	bls.n	8010f40 <pbuf_take+0x68>
 8010f2c:	4b2c      	ldr	r3, [pc, #176]	; (8010fe0 <pbuf_take+0x108>)
 8010f2e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8010f32:	492f      	ldr	r1, [pc, #188]	; (8010ff0 <pbuf_take+0x118>)
 8010f34:	482c      	ldr	r0, [pc, #176]	; (8010fe8 <pbuf_take+0x110>)
 8010f36:	f00e fc97 	bl	801f868 <iprintf>
 8010f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8010f3e:	e04b      	b.n	8010fd8 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d007      	beq.n	8010f56 <pbuf_take+0x7e>
 8010f46:	68bb      	ldr	r3, [r7, #8]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d004      	beq.n	8010f56 <pbuf_take+0x7e>
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	891b      	ldrh	r3, [r3, #8]
 8010f50:	88fa      	ldrh	r2, [r7, #6]
 8010f52:	429a      	cmp	r2, r3
 8010f54:	d902      	bls.n	8010f5c <pbuf_take+0x84>
    return ERR_ARG;
 8010f56:	f06f 030f 	mvn.w	r3, #15
 8010f5a:	e03d      	b.n	8010fd8 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	61fb      	str	r3, [r7, #28]
 8010f60:	e028      	b.n	8010fb4 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8010f62:	69fb      	ldr	r3, [r7, #28]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d106      	bne.n	8010f76 <pbuf_take+0x9e>
 8010f68:	4b1d      	ldr	r3, [pc, #116]	; (8010fe0 <pbuf_take+0x108>)
 8010f6a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8010f6e:	4921      	ldr	r1, [pc, #132]	; (8010ff4 <pbuf_take+0x11c>)
 8010f70:	481d      	ldr	r0, [pc, #116]	; (8010fe8 <pbuf_take+0x110>)
 8010f72:	f00e fc79 	bl	801f868 <iprintf>
    buf_copy_len = total_copy_len;
 8010f76:	697b      	ldr	r3, [r7, #20]
 8010f78:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8010f7a:	69fb      	ldr	r3, [r7, #28]
 8010f7c:	895b      	ldrh	r3, [r3, #10]
 8010f7e:	461a      	mov	r2, r3
 8010f80:	69bb      	ldr	r3, [r7, #24]
 8010f82:	4293      	cmp	r3, r2
 8010f84:	d902      	bls.n	8010f8c <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8010f86:	69fb      	ldr	r3, [r7, #28]
 8010f88:	895b      	ldrh	r3, [r3, #10]
 8010f8a:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8010f8c:	69fb      	ldr	r3, [r7, #28]
 8010f8e:	6858      	ldr	r0, [r3, #4]
 8010f90:	68ba      	ldr	r2, [r7, #8]
 8010f92:	693b      	ldr	r3, [r7, #16]
 8010f94:	4413      	add	r3, r2
 8010f96:	69ba      	ldr	r2, [r7, #24]
 8010f98:	4619      	mov	r1, r3
 8010f9a:	f00d fdc7 	bl	801eb2c <memcpy>
    total_copy_len -= buf_copy_len;
 8010f9e:	697a      	ldr	r2, [r7, #20]
 8010fa0:	69bb      	ldr	r3, [r7, #24]
 8010fa2:	1ad3      	subs	r3, r2, r3
 8010fa4:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8010fa6:	693a      	ldr	r2, [r7, #16]
 8010fa8:	69bb      	ldr	r3, [r7, #24]
 8010faa:	4413      	add	r3, r2
 8010fac:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8010fae:	69fb      	ldr	r3, [r7, #28]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	61fb      	str	r3, [r7, #28]
 8010fb4:	697b      	ldr	r3, [r7, #20]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d1d3      	bne.n	8010f62 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8010fba:	697b      	ldr	r3, [r7, #20]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d103      	bne.n	8010fc8 <pbuf_take+0xf0>
 8010fc0:	88fb      	ldrh	r3, [r7, #6]
 8010fc2:	693a      	ldr	r2, [r7, #16]
 8010fc4:	429a      	cmp	r2, r3
 8010fc6:	d006      	beq.n	8010fd6 <pbuf_take+0xfe>
 8010fc8:	4b05      	ldr	r3, [pc, #20]	; (8010fe0 <pbuf_take+0x108>)
 8010fca:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8010fce:	490a      	ldr	r1, [pc, #40]	; (8010ff8 <pbuf_take+0x120>)
 8010fd0:	4805      	ldr	r0, [pc, #20]	; (8010fe8 <pbuf_take+0x110>)
 8010fd2:	f00e fc49 	bl	801f868 <iprintf>
  return ERR_OK;
 8010fd6:	2300      	movs	r3, #0
}
 8010fd8:	4618      	mov	r0, r3
 8010fda:	3720      	adds	r7, #32
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}
 8010fe0:	08022f64 	.word	0x08022f64
 8010fe4:	0802333c 	.word	0x0802333c
 8010fe8:	08022fc4 	.word	0x08022fc4
 8010fec:	08023354 	.word	0x08023354
 8010ff0:	08023370 	.word	0x08023370
 8010ff4:	08023390 	.word	0x08023390
 8010ff8:	080233a8 	.word	0x080233a8

08010ffc <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b088      	sub	sp, #32
 8011000:	af00      	add	r7, sp, #0
 8011002:	60f8      	str	r0, [r7, #12]
 8011004:	60b9      	str	r1, [r7, #8]
 8011006:	4611      	mov	r1, r2
 8011008:	461a      	mov	r2, r3
 801100a:	460b      	mov	r3, r1
 801100c:	80fb      	strh	r3, [r7, #6]
 801100e:	4613      	mov	r3, r2
 8011010:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 8011012:	f107 0210 	add.w	r2, r7, #16
 8011016:	88bb      	ldrh	r3, [r7, #4]
 8011018:	4619      	mov	r1, r3
 801101a:	68f8      	ldr	r0, [r7, #12]
 801101c:	f7ff ff49 	bl	8010eb2 <pbuf_skip>
 8011020:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8011022:	69fb      	ldr	r3, [r7, #28]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d047      	beq.n	80110b8 <pbuf_take_at+0xbc>
 8011028:	69fb      	ldr	r3, [r7, #28]
 801102a:	891b      	ldrh	r3, [r3, #8]
 801102c:	461a      	mov	r2, r3
 801102e:	8a3b      	ldrh	r3, [r7, #16]
 8011030:	4619      	mov	r1, r3
 8011032:	88fb      	ldrh	r3, [r7, #6]
 8011034:	440b      	add	r3, r1
 8011036:	429a      	cmp	r2, r3
 8011038:	db3e      	blt.n	80110b8 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 801103a:	88fb      	ldrh	r3, [r7, #6]
 801103c:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8011042:	69fb      	ldr	r3, [r7, #28]
 8011044:	895a      	ldrh	r2, [r3, #10]
 8011046:	8a3b      	ldrh	r3, [r7, #16]
 8011048:	429a      	cmp	r2, r3
 801104a:	d806      	bhi.n	801105a <pbuf_take_at+0x5e>
 801104c:	4b1d      	ldr	r3, [pc, #116]	; (80110c4 <pbuf_take_at+0xc8>)
 801104e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8011052:	491d      	ldr	r1, [pc, #116]	; (80110c8 <pbuf_take_at+0xcc>)
 8011054:	481d      	ldr	r0, [pc, #116]	; (80110cc <pbuf_take_at+0xd0>)
 8011056:	f00e fc07 	bl	801f868 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 801105a:	69fb      	ldr	r3, [r7, #28]
 801105c:	895b      	ldrh	r3, [r3, #10]
 801105e:	461a      	mov	r2, r3
 8011060:	8a3b      	ldrh	r3, [r7, #16]
 8011062:	1ad2      	subs	r2, r2, r3
 8011064:	88fb      	ldrh	r3, [r7, #6]
 8011066:	429a      	cmp	r2, r3
 8011068:	da05      	bge.n	8011076 <pbuf_take_at+0x7a>
 801106a:	69fb      	ldr	r3, [r7, #28]
 801106c:	895a      	ldrh	r2, [r3, #10]
 801106e:	8a3b      	ldrh	r3, [r7, #16]
 8011070:	1ad3      	subs	r3, r2, r3
 8011072:	b29b      	uxth	r3, r3
 8011074:	e000      	b.n	8011078 <pbuf_take_at+0x7c>
 8011076:	88fb      	ldrh	r3, [r7, #6]
 8011078:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801107a:	69fb      	ldr	r3, [r7, #28]
 801107c:	685b      	ldr	r3, [r3, #4]
 801107e:	8a3a      	ldrh	r2, [r7, #16]
 8011080:	4413      	add	r3, r2
 8011082:	8a7a      	ldrh	r2, [r7, #18]
 8011084:	68b9      	ldr	r1, [r7, #8]
 8011086:	4618      	mov	r0, r3
 8011088:	f00d fd50 	bl	801eb2c <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 801108c:	8b7a      	ldrh	r2, [r7, #26]
 801108e:	8a7b      	ldrh	r3, [r7, #18]
 8011090:	1ad3      	subs	r3, r2, r3
 8011092:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8011094:	8a7b      	ldrh	r3, [r7, #18]
 8011096:	697a      	ldr	r2, [r7, #20]
 8011098:	4413      	add	r3, r2
 801109a:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 801109c:	8b7b      	ldrh	r3, [r7, #26]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d008      	beq.n	80110b4 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 80110a2:	69fb      	ldr	r3, [r7, #28]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	8b7a      	ldrh	r2, [r7, #26]
 80110a8:	6979      	ldr	r1, [r7, #20]
 80110aa:	4618      	mov	r0, r3
 80110ac:	f7ff ff14 	bl	8010ed8 <pbuf_take>
 80110b0:	4603      	mov	r3, r0
 80110b2:	e003      	b.n	80110bc <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 80110b4:	2300      	movs	r3, #0
 80110b6:	e001      	b.n	80110bc <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 80110b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80110bc:	4618      	mov	r0, r3
 80110be:	3720      	adds	r7, #32
 80110c0:	46bd      	mov	sp, r7
 80110c2:	bd80      	pop	{r7, pc}
 80110c4:	08022f64 	.word	0x08022f64
 80110c8:	080233c0 	.word	0x080233c0
 80110cc:	08022fc4 	.word	0x08022fc4

080110d0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b084      	sub	sp, #16
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	4603      	mov	r3, r0
 80110d8:	603a      	str	r2, [r7, #0]
 80110da:	71fb      	strb	r3, [r7, #7]
 80110dc:	460b      	mov	r3, r1
 80110de:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	8919      	ldrh	r1, [r3, #8]
 80110e4:	88ba      	ldrh	r2, [r7, #4]
 80110e6:	79fb      	ldrb	r3, [r7, #7]
 80110e8:	4618      	mov	r0, r3
 80110ea:	f7ff f92b 	bl	8010344 <pbuf_alloc>
 80110ee:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d101      	bne.n	80110fa <pbuf_clone+0x2a>
    return NULL;
 80110f6:	2300      	movs	r3, #0
 80110f8:	e011      	b.n	801111e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80110fa:	6839      	ldr	r1, [r7, #0]
 80110fc:	68f8      	ldr	r0, [r7, #12]
 80110fe:	f7ff fd6b 	bl	8010bd8 <pbuf_copy>
 8011102:	4603      	mov	r3, r0
 8011104:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011106:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d006      	beq.n	801111c <pbuf_clone+0x4c>
 801110e:	4b06      	ldr	r3, [pc, #24]	; (8011128 <pbuf_clone+0x58>)
 8011110:	f240 5224 	movw	r2, #1316	; 0x524
 8011114:	4905      	ldr	r1, [pc, #20]	; (801112c <pbuf_clone+0x5c>)
 8011116:	4806      	ldr	r0, [pc, #24]	; (8011130 <pbuf_clone+0x60>)
 8011118:	f00e fba6 	bl	801f868 <iprintf>
  return q;
 801111c:	68fb      	ldr	r3, [r7, #12]
}
 801111e:	4618      	mov	r0, r3
 8011120:	3710      	adds	r7, #16
 8011122:	46bd      	mov	sp, r7
 8011124:	bd80      	pop	{r7, pc}
 8011126:	bf00      	nop
 8011128:	08022f64 	.word	0x08022f64
 801112c:	080233d8 	.word	0x080233d8
 8011130:	08022fc4 	.word	0x08022fc4

08011134 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8011134:	b580      	push	{r7, lr}
 8011136:	b084      	sub	sp, #16
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
 801113c:	460b      	mov	r3, r1
 801113e:	807b      	strh	r3, [r7, #2]
 8011140:	4613      	mov	r3, r2
 8011142:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8011144:	f107 020a 	add.w	r2, r7, #10
 8011148:	887b      	ldrh	r3, [r7, #2]
 801114a:	4619      	mov	r1, r3
 801114c:	6878      	ldr	r0, [r7, #4]
 801114e:	f7ff feb0 	bl	8010eb2 <pbuf_skip>
 8011152:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d00a      	beq.n	8011170 <pbuf_put_at+0x3c>
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	895a      	ldrh	r2, [r3, #10]
 801115e:	897b      	ldrh	r3, [r7, #10]
 8011160:	429a      	cmp	r2, r3
 8011162:	d905      	bls.n	8011170 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	685b      	ldr	r3, [r3, #4]
 8011168:	897a      	ldrh	r2, [r7, #10]
 801116a:	4413      	add	r3, r2
 801116c:	787a      	ldrb	r2, [r7, #1]
 801116e:	701a      	strb	r2, [r3, #0]
  }
}
 8011170:	bf00      	nop
 8011172:	3710      	adds	r7, #16
 8011174:	46bd      	mov	sp, r7
 8011176:	bd80      	pop	{r7, pc}

08011178 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011178:	b580      	push	{r7, lr}
 801117a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801117c:	f00e fb8c 	bl	801f898 <rand>
 8011180:	4603      	mov	r3, r0
 8011182:	b29b      	uxth	r3, r3
 8011184:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011188:	b29b      	uxth	r3, r3
 801118a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801118e:	b29a      	uxth	r2, r3
 8011190:	4b01      	ldr	r3, [pc, #4]	; (8011198 <tcp_init+0x20>)
 8011192:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011194:	bf00      	nop
 8011196:	bd80      	pop	{r7, pc}
 8011198:	10000010 	.word	0x10000010

0801119c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b082      	sub	sp, #8
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	7d1b      	ldrb	r3, [r3, #20]
 80111a8:	2b01      	cmp	r3, #1
 80111aa:	d105      	bne.n	80111b8 <tcp_free+0x1c>
 80111ac:	4b06      	ldr	r3, [pc, #24]	; (80111c8 <tcp_free+0x2c>)
 80111ae:	22d4      	movs	r2, #212	; 0xd4
 80111b0:	4906      	ldr	r1, [pc, #24]	; (80111cc <tcp_free+0x30>)
 80111b2:	4807      	ldr	r0, [pc, #28]	; (80111d0 <tcp_free+0x34>)
 80111b4:	f00e fb58 	bl	801f868 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80111b8:	6879      	ldr	r1, [r7, #4]
 80111ba:	2001      	movs	r0, #1
 80111bc:	f7fe fcbe 	bl	800fb3c <memp_free>
}
 80111c0:	bf00      	nop
 80111c2:	3708      	adds	r7, #8
 80111c4:	46bd      	mov	sp, r7
 80111c6:	bd80      	pop	{r7, pc}
 80111c8:	08023464 	.word	0x08023464
 80111cc:	08023494 	.word	0x08023494
 80111d0:	080234a8 	.word	0x080234a8

080111d4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b082      	sub	sp, #8
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	7d1b      	ldrb	r3, [r3, #20]
 80111e0:	2b01      	cmp	r3, #1
 80111e2:	d105      	bne.n	80111f0 <tcp_free_listen+0x1c>
 80111e4:	4b06      	ldr	r3, [pc, #24]	; (8011200 <tcp_free_listen+0x2c>)
 80111e6:	22df      	movs	r2, #223	; 0xdf
 80111e8:	4906      	ldr	r1, [pc, #24]	; (8011204 <tcp_free_listen+0x30>)
 80111ea:	4807      	ldr	r0, [pc, #28]	; (8011208 <tcp_free_listen+0x34>)
 80111ec:	f00e fb3c 	bl	801f868 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80111f0:	6879      	ldr	r1, [r7, #4]
 80111f2:	2002      	movs	r0, #2
 80111f4:	f7fe fca2 	bl	800fb3c <memp_free>
}
 80111f8:	bf00      	nop
 80111fa:	3708      	adds	r7, #8
 80111fc:	46bd      	mov	sp, r7
 80111fe:	bd80      	pop	{r7, pc}
 8011200:	08023464 	.word	0x08023464
 8011204:	080234d0 	.word	0x080234d0
 8011208:	080234a8 	.word	0x080234a8

0801120c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801120c:	b580      	push	{r7, lr}
 801120e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011210:	f001 f8c0 	bl	8012394 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011214:	4b07      	ldr	r3, [pc, #28]	; (8011234 <tcp_tmr+0x28>)
 8011216:	781b      	ldrb	r3, [r3, #0]
 8011218:	3301      	adds	r3, #1
 801121a:	b2da      	uxtb	r2, r3
 801121c:	4b05      	ldr	r3, [pc, #20]	; (8011234 <tcp_tmr+0x28>)
 801121e:	701a      	strb	r2, [r3, #0]
 8011220:	4b04      	ldr	r3, [pc, #16]	; (8011234 <tcp_tmr+0x28>)
 8011222:	781b      	ldrb	r3, [r3, #0]
 8011224:	f003 0301 	and.w	r3, r3, #1
 8011228:	2b00      	cmp	r3, #0
 801122a:	d001      	beq.n	8011230 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801122c:	f000 fd72 	bl	8011d14 <tcp_slowtmr>
  }
}
 8011230:	bf00      	nop
 8011232:	bd80      	pop	{r7, pc}
 8011234:	20001919 	.word	0x20001919

08011238 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011238:	b580      	push	{r7, lr}
 801123a:	b084      	sub	sp, #16
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
 8011240:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8011242:	683b      	ldr	r3, [r7, #0]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d105      	bne.n	8011254 <tcp_remove_listener+0x1c>
 8011248:	4b0d      	ldr	r3, [pc, #52]	; (8011280 <tcp_remove_listener+0x48>)
 801124a:	22ff      	movs	r2, #255	; 0xff
 801124c:	490d      	ldr	r1, [pc, #52]	; (8011284 <tcp_remove_listener+0x4c>)
 801124e:	480e      	ldr	r0, [pc, #56]	; (8011288 <tcp_remove_listener+0x50>)
 8011250:	f00e fb0a 	bl	801f868 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	60fb      	str	r3, [r7, #12]
 8011258:	e00a      	b.n	8011270 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801125e:	683a      	ldr	r2, [r7, #0]
 8011260:	429a      	cmp	r2, r3
 8011262:	d102      	bne.n	801126a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	2200      	movs	r2, #0
 8011268:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	68db      	ldr	r3, [r3, #12]
 801126e:	60fb      	str	r3, [r7, #12]
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d1f1      	bne.n	801125a <tcp_remove_listener+0x22>
    }
  }
}
 8011276:	bf00      	nop
 8011278:	bf00      	nop
 801127a:	3710      	adds	r7, #16
 801127c:	46bd      	mov	sp, r7
 801127e:	bd80      	pop	{r7, pc}
 8011280:	08023464 	.word	0x08023464
 8011284:	080234ec 	.word	0x080234ec
 8011288:	080234a8 	.word	0x080234a8

0801128c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b084      	sub	sp, #16
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d106      	bne.n	80112a8 <tcp_listen_closed+0x1c>
 801129a:	4b14      	ldr	r3, [pc, #80]	; (80112ec <tcp_listen_closed+0x60>)
 801129c:	f240 1211 	movw	r2, #273	; 0x111
 80112a0:	4913      	ldr	r1, [pc, #76]	; (80112f0 <tcp_listen_closed+0x64>)
 80112a2:	4814      	ldr	r0, [pc, #80]	; (80112f4 <tcp_listen_closed+0x68>)
 80112a4:	f00e fae0 	bl	801f868 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	7d1b      	ldrb	r3, [r3, #20]
 80112ac:	2b01      	cmp	r3, #1
 80112ae:	d006      	beq.n	80112be <tcp_listen_closed+0x32>
 80112b0:	4b0e      	ldr	r3, [pc, #56]	; (80112ec <tcp_listen_closed+0x60>)
 80112b2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80112b6:	4910      	ldr	r1, [pc, #64]	; (80112f8 <tcp_listen_closed+0x6c>)
 80112b8:	480e      	ldr	r0, [pc, #56]	; (80112f4 <tcp_listen_closed+0x68>)
 80112ba:	f00e fad5 	bl	801f868 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80112be:	2301      	movs	r3, #1
 80112c0:	60fb      	str	r3, [r7, #12]
 80112c2:	e00b      	b.n	80112dc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80112c4:	4a0d      	ldr	r2, [pc, #52]	; (80112fc <tcp_listen_closed+0x70>)
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	6879      	ldr	r1, [r7, #4]
 80112d0:	4618      	mov	r0, r3
 80112d2:	f7ff ffb1 	bl	8011238 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	3301      	adds	r3, #1
 80112da:	60fb      	str	r3, [r7, #12]
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	2b03      	cmp	r3, #3
 80112e0:	d9f0      	bls.n	80112c4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80112e2:	bf00      	nop
 80112e4:	bf00      	nop
 80112e6:	3710      	adds	r7, #16
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bd80      	pop	{r7, pc}
 80112ec:	08023464 	.word	0x08023464
 80112f0:	08023514 	.word	0x08023514
 80112f4:	080234a8 	.word	0x080234a8
 80112f8:	08023520 	.word	0x08023520
 80112fc:	08025a84 	.word	0x08025a84

08011300 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011300:	b5b0      	push	{r4, r5, r7, lr}
 8011302:	b088      	sub	sp, #32
 8011304:	af04      	add	r7, sp, #16
 8011306:	6078      	str	r0, [r7, #4]
 8011308:	460b      	mov	r3, r1
 801130a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d106      	bne.n	8011320 <tcp_close_shutdown+0x20>
 8011312:	4b63      	ldr	r3, [pc, #396]	; (80114a0 <tcp_close_shutdown+0x1a0>)
 8011314:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8011318:	4962      	ldr	r1, [pc, #392]	; (80114a4 <tcp_close_shutdown+0x1a4>)
 801131a:	4863      	ldr	r0, [pc, #396]	; (80114a8 <tcp_close_shutdown+0x1a8>)
 801131c:	f00e faa4 	bl	801f868 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011320:	78fb      	ldrb	r3, [r7, #3]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d066      	beq.n	80113f4 <tcp_close_shutdown+0xf4>
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	7d1b      	ldrb	r3, [r3, #20]
 801132a:	2b04      	cmp	r3, #4
 801132c:	d003      	beq.n	8011336 <tcp_close_shutdown+0x36>
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	7d1b      	ldrb	r3, [r3, #20]
 8011332:	2b07      	cmp	r3, #7
 8011334:	d15e      	bne.n	80113f4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801133a:	2b00      	cmp	r3, #0
 801133c:	d104      	bne.n	8011348 <tcp_close_shutdown+0x48>
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011342:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011346:	d055      	beq.n	80113f4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	8b5b      	ldrh	r3, [r3, #26]
 801134c:	f003 0310 	and.w	r3, r3, #16
 8011350:	2b00      	cmp	r3, #0
 8011352:	d106      	bne.n	8011362 <tcp_close_shutdown+0x62>
 8011354:	4b52      	ldr	r3, [pc, #328]	; (80114a0 <tcp_close_shutdown+0x1a0>)
 8011356:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801135a:	4954      	ldr	r1, [pc, #336]	; (80114ac <tcp_close_shutdown+0x1ac>)
 801135c:	4852      	ldr	r0, [pc, #328]	; (80114a8 <tcp_close_shutdown+0x1a8>)
 801135e:	f00e fa83 	bl	801f868 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801136a:	687d      	ldr	r5, [r7, #4]
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	3304      	adds	r3, #4
 8011370:	687a      	ldr	r2, [r7, #4]
 8011372:	8ad2      	ldrh	r2, [r2, #22]
 8011374:	6879      	ldr	r1, [r7, #4]
 8011376:	8b09      	ldrh	r1, [r1, #24]
 8011378:	9102      	str	r1, [sp, #8]
 801137a:	9201      	str	r2, [sp, #4]
 801137c:	9300      	str	r3, [sp, #0]
 801137e:	462b      	mov	r3, r5
 8011380:	4622      	mov	r2, r4
 8011382:	4601      	mov	r1, r0
 8011384:	6878      	ldr	r0, [r7, #4]
 8011386:	f005 fdd1 	bl	8016f2c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801138a:	6878      	ldr	r0, [r7, #4]
 801138c:	f001 fbb2 	bl	8012af4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011390:	4b47      	ldr	r3, [pc, #284]	; (80114b0 <tcp_close_shutdown+0x1b0>)
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	687a      	ldr	r2, [r7, #4]
 8011396:	429a      	cmp	r2, r3
 8011398:	d105      	bne.n	80113a6 <tcp_close_shutdown+0xa6>
 801139a:	4b45      	ldr	r3, [pc, #276]	; (80114b0 <tcp_close_shutdown+0x1b0>)
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	68db      	ldr	r3, [r3, #12]
 80113a0:	4a43      	ldr	r2, [pc, #268]	; (80114b0 <tcp_close_shutdown+0x1b0>)
 80113a2:	6013      	str	r3, [r2, #0]
 80113a4:	e013      	b.n	80113ce <tcp_close_shutdown+0xce>
 80113a6:	4b42      	ldr	r3, [pc, #264]	; (80114b0 <tcp_close_shutdown+0x1b0>)
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	60fb      	str	r3, [r7, #12]
 80113ac:	e00c      	b.n	80113c8 <tcp_close_shutdown+0xc8>
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	68db      	ldr	r3, [r3, #12]
 80113b2:	687a      	ldr	r2, [r7, #4]
 80113b4:	429a      	cmp	r2, r3
 80113b6:	d104      	bne.n	80113c2 <tcp_close_shutdown+0xc2>
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	68da      	ldr	r2, [r3, #12]
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	60da      	str	r2, [r3, #12]
 80113c0:	e005      	b.n	80113ce <tcp_close_shutdown+0xce>
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	68db      	ldr	r3, [r3, #12]
 80113c6:	60fb      	str	r3, [r7, #12]
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d1ef      	bne.n	80113ae <tcp_close_shutdown+0xae>
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	2200      	movs	r2, #0
 80113d2:	60da      	str	r2, [r3, #12]
 80113d4:	4b37      	ldr	r3, [pc, #220]	; (80114b4 <tcp_close_shutdown+0x1b4>)
 80113d6:	2201      	movs	r2, #1
 80113d8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80113da:	4b37      	ldr	r3, [pc, #220]	; (80114b8 <tcp_close_shutdown+0x1b8>)
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	687a      	ldr	r2, [r7, #4]
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d102      	bne.n	80113ea <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80113e4:	f004 f846 	bl	8015474 <tcp_trigger_input_pcb_close>
 80113e8:	e002      	b.n	80113f0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80113ea:	6878      	ldr	r0, [r7, #4]
 80113ec:	f7ff fed6 	bl	801119c <tcp_free>
      }
      return ERR_OK;
 80113f0:	2300      	movs	r3, #0
 80113f2:	e050      	b.n	8011496 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	7d1b      	ldrb	r3, [r3, #20]
 80113f8:	2b02      	cmp	r3, #2
 80113fa:	d03b      	beq.n	8011474 <tcp_close_shutdown+0x174>
 80113fc:	2b02      	cmp	r3, #2
 80113fe:	dc44      	bgt.n	801148a <tcp_close_shutdown+0x18a>
 8011400:	2b00      	cmp	r3, #0
 8011402:	d002      	beq.n	801140a <tcp_close_shutdown+0x10a>
 8011404:	2b01      	cmp	r3, #1
 8011406:	d02a      	beq.n	801145e <tcp_close_shutdown+0x15e>
 8011408:	e03f      	b.n	801148a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	8adb      	ldrh	r3, [r3, #22]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d021      	beq.n	8011456 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011412:	4b2a      	ldr	r3, [pc, #168]	; (80114bc <tcp_close_shutdown+0x1bc>)
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	687a      	ldr	r2, [r7, #4]
 8011418:	429a      	cmp	r2, r3
 801141a:	d105      	bne.n	8011428 <tcp_close_shutdown+0x128>
 801141c:	4b27      	ldr	r3, [pc, #156]	; (80114bc <tcp_close_shutdown+0x1bc>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	68db      	ldr	r3, [r3, #12]
 8011422:	4a26      	ldr	r2, [pc, #152]	; (80114bc <tcp_close_shutdown+0x1bc>)
 8011424:	6013      	str	r3, [r2, #0]
 8011426:	e013      	b.n	8011450 <tcp_close_shutdown+0x150>
 8011428:	4b24      	ldr	r3, [pc, #144]	; (80114bc <tcp_close_shutdown+0x1bc>)
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	60bb      	str	r3, [r7, #8]
 801142e:	e00c      	b.n	801144a <tcp_close_shutdown+0x14a>
 8011430:	68bb      	ldr	r3, [r7, #8]
 8011432:	68db      	ldr	r3, [r3, #12]
 8011434:	687a      	ldr	r2, [r7, #4]
 8011436:	429a      	cmp	r2, r3
 8011438:	d104      	bne.n	8011444 <tcp_close_shutdown+0x144>
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	68da      	ldr	r2, [r3, #12]
 801143e:	68bb      	ldr	r3, [r7, #8]
 8011440:	60da      	str	r2, [r3, #12]
 8011442:	e005      	b.n	8011450 <tcp_close_shutdown+0x150>
 8011444:	68bb      	ldr	r3, [r7, #8]
 8011446:	68db      	ldr	r3, [r3, #12]
 8011448:	60bb      	str	r3, [r7, #8]
 801144a:	68bb      	ldr	r3, [r7, #8]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d1ef      	bne.n	8011430 <tcp_close_shutdown+0x130>
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	2200      	movs	r2, #0
 8011454:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011456:	6878      	ldr	r0, [r7, #4]
 8011458:	f7ff fea0 	bl	801119c <tcp_free>
      break;
 801145c:	e01a      	b.n	8011494 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801145e:	6878      	ldr	r0, [r7, #4]
 8011460:	f7ff ff14 	bl	801128c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011464:	6879      	ldr	r1, [r7, #4]
 8011466:	4816      	ldr	r0, [pc, #88]	; (80114c0 <tcp_close_shutdown+0x1c0>)
 8011468:	f001 fb94 	bl	8012b94 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	f7ff feb1 	bl	80111d4 <tcp_free_listen>
      break;
 8011472:	e00f      	b.n	8011494 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011474:	6879      	ldr	r1, [r7, #4]
 8011476:	480e      	ldr	r0, [pc, #56]	; (80114b0 <tcp_close_shutdown+0x1b0>)
 8011478:	f001 fb8c 	bl	8012b94 <tcp_pcb_remove>
 801147c:	4b0d      	ldr	r3, [pc, #52]	; (80114b4 <tcp_close_shutdown+0x1b4>)
 801147e:	2201      	movs	r2, #1
 8011480:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011482:	6878      	ldr	r0, [r7, #4]
 8011484:	f7ff fe8a 	bl	801119c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011488:	e004      	b.n	8011494 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801148a:	6878      	ldr	r0, [r7, #4]
 801148c:	f000 f81a 	bl	80114c4 <tcp_close_shutdown_fin>
 8011490:	4603      	mov	r3, r0
 8011492:	e000      	b.n	8011496 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8011494:	2300      	movs	r3, #0
}
 8011496:	4618      	mov	r0, r3
 8011498:	3710      	adds	r7, #16
 801149a:	46bd      	mov	sp, r7
 801149c:	bdb0      	pop	{r4, r5, r7, pc}
 801149e:	bf00      	nop
 80114a0:	08023464 	.word	0x08023464
 80114a4:	08023538 	.word	0x08023538
 80114a8:	080234a8 	.word	0x080234a8
 80114ac:	08023558 	.word	0x08023558
 80114b0:	2000893c 	.word	0x2000893c
 80114b4:	20008938 	.word	0x20008938
 80114b8:	20008950 	.word	0x20008950
 80114bc:	20008948 	.word	0x20008948
 80114c0:	20008944 	.word	0x20008944

080114c4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b084      	sub	sp, #16
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d106      	bne.n	80114e0 <tcp_close_shutdown_fin+0x1c>
 80114d2:	4b2e      	ldr	r3, [pc, #184]	; (801158c <tcp_close_shutdown_fin+0xc8>)
 80114d4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80114d8:	492d      	ldr	r1, [pc, #180]	; (8011590 <tcp_close_shutdown_fin+0xcc>)
 80114da:	482e      	ldr	r0, [pc, #184]	; (8011594 <tcp_close_shutdown_fin+0xd0>)
 80114dc:	f00e f9c4 	bl	801f868 <iprintf>

  switch (pcb->state) {
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	7d1b      	ldrb	r3, [r3, #20]
 80114e4:	2b07      	cmp	r3, #7
 80114e6:	d020      	beq.n	801152a <tcp_close_shutdown_fin+0x66>
 80114e8:	2b07      	cmp	r3, #7
 80114ea:	dc2b      	bgt.n	8011544 <tcp_close_shutdown_fin+0x80>
 80114ec:	2b03      	cmp	r3, #3
 80114ee:	d002      	beq.n	80114f6 <tcp_close_shutdown_fin+0x32>
 80114f0:	2b04      	cmp	r3, #4
 80114f2:	d00d      	beq.n	8011510 <tcp_close_shutdown_fin+0x4c>
 80114f4:	e026      	b.n	8011544 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80114f6:	6878      	ldr	r0, [r7, #4]
 80114f8:	f004 fe26 	bl	8016148 <tcp_send_fin>
 80114fc:	4603      	mov	r3, r0
 80114fe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011500:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d11f      	bne.n	8011548 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	2205      	movs	r2, #5
 801150c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801150e:	e01b      	b.n	8011548 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011510:	6878      	ldr	r0, [r7, #4]
 8011512:	f004 fe19 	bl	8016148 <tcp_send_fin>
 8011516:	4603      	mov	r3, r0
 8011518:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801151a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d114      	bne.n	801154c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	2205      	movs	r2, #5
 8011526:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011528:	e010      	b.n	801154c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801152a:	6878      	ldr	r0, [r7, #4]
 801152c:	f004 fe0c 	bl	8016148 <tcp_send_fin>
 8011530:	4603      	mov	r3, r0
 8011532:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011534:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d109      	bne.n	8011550 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	2209      	movs	r2, #9
 8011540:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011542:	e005      	b.n	8011550 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011544:	2300      	movs	r3, #0
 8011546:	e01c      	b.n	8011582 <tcp_close_shutdown_fin+0xbe>
      break;
 8011548:	bf00      	nop
 801154a:	e002      	b.n	8011552 <tcp_close_shutdown_fin+0x8e>
      break;
 801154c:	bf00      	nop
 801154e:	e000      	b.n	8011552 <tcp_close_shutdown_fin+0x8e>
      break;
 8011550:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d103      	bne.n	8011562 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801155a:	6878      	ldr	r0, [r7, #4]
 801155c:	f004 ff32 	bl	80163c4 <tcp_output>
 8011560:	e00d      	b.n	801157e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8011562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011566:	f1b3 3fff 	cmp.w	r3, #4294967295
 801156a:	d108      	bne.n	801157e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	8b5b      	ldrh	r3, [r3, #26]
 8011570:	f043 0308 	orr.w	r3, r3, #8
 8011574:	b29a      	uxth	r2, r3
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801157a:	2300      	movs	r3, #0
 801157c:	e001      	b.n	8011582 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801157e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011582:	4618      	mov	r0, r3
 8011584:	3710      	adds	r7, #16
 8011586:	46bd      	mov	sp, r7
 8011588:	bd80      	pop	{r7, pc}
 801158a:	bf00      	nop
 801158c:	08023464 	.word	0x08023464
 8011590:	08023514 	.word	0x08023514
 8011594:	080234a8 	.word	0x080234a8

08011598 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b082      	sub	sp, #8
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d109      	bne.n	80115ba <tcp_close+0x22>
 80115a6:	4b0f      	ldr	r3, [pc, #60]	; (80115e4 <tcp_close+0x4c>)
 80115a8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80115ac:	490e      	ldr	r1, [pc, #56]	; (80115e8 <tcp_close+0x50>)
 80115ae:	480f      	ldr	r0, [pc, #60]	; (80115ec <tcp_close+0x54>)
 80115b0:	f00e f95a 	bl	801f868 <iprintf>
 80115b4:	f06f 030f 	mvn.w	r3, #15
 80115b8:	e00f      	b.n	80115da <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	7d1b      	ldrb	r3, [r3, #20]
 80115be:	2b01      	cmp	r3, #1
 80115c0:	d006      	beq.n	80115d0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	8b5b      	ldrh	r3, [r3, #26]
 80115c6:	f043 0310 	orr.w	r3, r3, #16
 80115ca:	b29a      	uxth	r2, r3
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80115d0:	2101      	movs	r1, #1
 80115d2:	6878      	ldr	r0, [r7, #4]
 80115d4:	f7ff fe94 	bl	8011300 <tcp_close_shutdown>
 80115d8:	4603      	mov	r3, r0
}
 80115da:	4618      	mov	r0, r3
 80115dc:	3708      	adds	r7, #8
 80115de:	46bd      	mov	sp, r7
 80115e0:	bd80      	pop	{r7, pc}
 80115e2:	bf00      	nop
 80115e4:	08023464 	.word	0x08023464
 80115e8:	08023574 	.word	0x08023574
 80115ec:	080234a8 	.word	0x080234a8

080115f0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b084      	sub	sp, #16
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	60f8      	str	r0, [r7, #12]
 80115f8:	60b9      	str	r1, [r7, #8]
 80115fa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d109      	bne.n	8011616 <tcp_shutdown+0x26>
 8011602:	4b26      	ldr	r3, [pc, #152]	; (801169c <tcp_shutdown+0xac>)
 8011604:	f240 2207 	movw	r2, #519	; 0x207
 8011608:	4925      	ldr	r1, [pc, #148]	; (80116a0 <tcp_shutdown+0xb0>)
 801160a:	4826      	ldr	r0, [pc, #152]	; (80116a4 <tcp_shutdown+0xb4>)
 801160c:	f00e f92c 	bl	801f868 <iprintf>
 8011610:	f06f 030f 	mvn.w	r3, #15
 8011614:	e03d      	b.n	8011692 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	7d1b      	ldrb	r3, [r3, #20]
 801161a:	2b01      	cmp	r3, #1
 801161c:	d102      	bne.n	8011624 <tcp_shutdown+0x34>
    return ERR_CONN;
 801161e:	f06f 030a 	mvn.w	r3, #10
 8011622:	e036      	b.n	8011692 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8011624:	68bb      	ldr	r3, [r7, #8]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d01b      	beq.n	8011662 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	8b5b      	ldrh	r3, [r3, #26]
 801162e:	f043 0310 	orr.w	r3, r3, #16
 8011632:	b29a      	uxth	r2, r3
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d005      	beq.n	801164a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801163e:	2101      	movs	r1, #1
 8011640:	68f8      	ldr	r0, [r7, #12]
 8011642:	f7ff fe5d 	bl	8011300 <tcp_close_shutdown>
 8011646:	4603      	mov	r3, r0
 8011648:	e023      	b.n	8011692 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801164e:	2b00      	cmp	r3, #0
 8011650:	d007      	beq.n	8011662 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011656:	4618      	mov	r0, r3
 8011658:	f7ff f98a 	bl	8010970 <pbuf_free>
      pcb->refused_data = NULL;
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	2200      	movs	r2, #0
 8011660:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d013      	beq.n	8011690 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	7d1b      	ldrb	r3, [r3, #20]
 801166c:	2b04      	cmp	r3, #4
 801166e:	dc02      	bgt.n	8011676 <tcp_shutdown+0x86>
 8011670:	2b03      	cmp	r3, #3
 8011672:	da02      	bge.n	801167a <tcp_shutdown+0x8a>
 8011674:	e009      	b.n	801168a <tcp_shutdown+0x9a>
 8011676:	2b07      	cmp	r3, #7
 8011678:	d107      	bne.n	801168a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801167a:	68bb      	ldr	r3, [r7, #8]
 801167c:	b2db      	uxtb	r3, r3
 801167e:	4619      	mov	r1, r3
 8011680:	68f8      	ldr	r0, [r7, #12]
 8011682:	f7ff fe3d 	bl	8011300 <tcp_close_shutdown>
 8011686:	4603      	mov	r3, r0
 8011688:	e003      	b.n	8011692 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801168a:	f06f 030a 	mvn.w	r3, #10
 801168e:	e000      	b.n	8011692 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8011690:	2300      	movs	r3, #0
}
 8011692:	4618      	mov	r0, r3
 8011694:	3710      	adds	r7, #16
 8011696:	46bd      	mov	sp, r7
 8011698:	bd80      	pop	{r7, pc}
 801169a:	bf00      	nop
 801169c:	08023464 	.word	0x08023464
 80116a0:	0802358c 	.word	0x0802358c
 80116a4:	080234a8 	.word	0x080234a8

080116a8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b08e      	sub	sp, #56	; 0x38
 80116ac:	af04      	add	r7, sp, #16
 80116ae:	6078      	str	r0, [r7, #4]
 80116b0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d107      	bne.n	80116c8 <tcp_abandon+0x20>
 80116b8:	4b52      	ldr	r3, [pc, #328]	; (8011804 <tcp_abandon+0x15c>)
 80116ba:	f240 223d 	movw	r2, #573	; 0x23d
 80116be:	4952      	ldr	r1, [pc, #328]	; (8011808 <tcp_abandon+0x160>)
 80116c0:	4852      	ldr	r0, [pc, #328]	; (801180c <tcp_abandon+0x164>)
 80116c2:	f00e f8d1 	bl	801f868 <iprintf>
 80116c6:	e099      	b.n	80117fc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	7d1b      	ldrb	r3, [r3, #20]
 80116cc:	2b01      	cmp	r3, #1
 80116ce:	d106      	bne.n	80116de <tcp_abandon+0x36>
 80116d0:	4b4c      	ldr	r3, [pc, #304]	; (8011804 <tcp_abandon+0x15c>)
 80116d2:	f44f 7210 	mov.w	r2, #576	; 0x240
 80116d6:	494e      	ldr	r1, [pc, #312]	; (8011810 <tcp_abandon+0x168>)
 80116d8:	484c      	ldr	r0, [pc, #304]	; (801180c <tcp_abandon+0x164>)
 80116da:	f00e f8c5 	bl	801f868 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	7d1b      	ldrb	r3, [r3, #20]
 80116e2:	2b0a      	cmp	r3, #10
 80116e4:	d107      	bne.n	80116f6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80116e6:	6879      	ldr	r1, [r7, #4]
 80116e8:	484a      	ldr	r0, [pc, #296]	; (8011814 <tcp_abandon+0x16c>)
 80116ea:	f001 fa53 	bl	8012b94 <tcp_pcb_remove>
    tcp_free(pcb);
 80116ee:	6878      	ldr	r0, [r7, #4]
 80116f0:	f7ff fd54 	bl	801119c <tcp_free>
 80116f4:	e082      	b.n	80117fc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80116f6:	2300      	movs	r3, #0
 80116f8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80116fa:	2300      	movs	r3, #0
 80116fc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011702:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011708:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011710:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	691b      	ldr	r3, [r3, #16]
 8011716:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	7d1b      	ldrb	r3, [r3, #20]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d126      	bne.n	801176e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	8adb      	ldrh	r3, [r3, #22]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d02e      	beq.n	8011786 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011728:	4b3b      	ldr	r3, [pc, #236]	; (8011818 <tcp_abandon+0x170>)
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	687a      	ldr	r2, [r7, #4]
 801172e:	429a      	cmp	r2, r3
 8011730:	d105      	bne.n	801173e <tcp_abandon+0x96>
 8011732:	4b39      	ldr	r3, [pc, #228]	; (8011818 <tcp_abandon+0x170>)
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	68db      	ldr	r3, [r3, #12]
 8011738:	4a37      	ldr	r2, [pc, #220]	; (8011818 <tcp_abandon+0x170>)
 801173a:	6013      	str	r3, [r2, #0]
 801173c:	e013      	b.n	8011766 <tcp_abandon+0xbe>
 801173e:	4b36      	ldr	r3, [pc, #216]	; (8011818 <tcp_abandon+0x170>)
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	61fb      	str	r3, [r7, #28]
 8011744:	e00c      	b.n	8011760 <tcp_abandon+0xb8>
 8011746:	69fb      	ldr	r3, [r7, #28]
 8011748:	68db      	ldr	r3, [r3, #12]
 801174a:	687a      	ldr	r2, [r7, #4]
 801174c:	429a      	cmp	r2, r3
 801174e:	d104      	bne.n	801175a <tcp_abandon+0xb2>
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	68da      	ldr	r2, [r3, #12]
 8011754:	69fb      	ldr	r3, [r7, #28]
 8011756:	60da      	str	r2, [r3, #12]
 8011758:	e005      	b.n	8011766 <tcp_abandon+0xbe>
 801175a:	69fb      	ldr	r3, [r7, #28]
 801175c:	68db      	ldr	r3, [r3, #12]
 801175e:	61fb      	str	r3, [r7, #28]
 8011760:	69fb      	ldr	r3, [r7, #28]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d1ef      	bne.n	8011746 <tcp_abandon+0x9e>
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	2200      	movs	r2, #0
 801176a:	60da      	str	r2, [r3, #12]
 801176c:	e00b      	b.n	8011786 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	8adb      	ldrh	r3, [r3, #22]
 8011776:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011778:	6879      	ldr	r1, [r7, #4]
 801177a:	4828      	ldr	r0, [pc, #160]	; (801181c <tcp_abandon+0x174>)
 801177c:	f001 fa0a 	bl	8012b94 <tcp_pcb_remove>
 8011780:	4b27      	ldr	r3, [pc, #156]	; (8011820 <tcp_abandon+0x178>)
 8011782:	2201      	movs	r2, #1
 8011784:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801178a:	2b00      	cmp	r3, #0
 801178c:	d004      	beq.n	8011798 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011792:	4618      	mov	r0, r3
 8011794:	f000 fede 	bl	8012554 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801179c:	2b00      	cmp	r3, #0
 801179e:	d004      	beq.n	80117aa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117a4:	4618      	mov	r0, r3
 80117a6:	f000 fed5 	bl	8012554 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d004      	beq.n	80117bc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117b6:	4618      	mov	r0, r3
 80117b8:	f000 fecc 	bl	8012554 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80117bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d00e      	beq.n	80117e0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80117c2:	6879      	ldr	r1, [r7, #4]
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	3304      	adds	r3, #4
 80117c8:	687a      	ldr	r2, [r7, #4]
 80117ca:	8b12      	ldrh	r2, [r2, #24]
 80117cc:	9202      	str	r2, [sp, #8]
 80117ce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80117d0:	9201      	str	r2, [sp, #4]
 80117d2:	9300      	str	r3, [sp, #0]
 80117d4:	460b      	mov	r3, r1
 80117d6:	697a      	ldr	r2, [r7, #20]
 80117d8:	69b9      	ldr	r1, [r7, #24]
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	f005 fba6 	bl	8016f2c <tcp_rst>
    }
    last_state = pcb->state;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	7d1b      	ldrb	r3, [r3, #20]
 80117e4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80117e6:	6878      	ldr	r0, [r7, #4]
 80117e8:	f7ff fcd8 	bl	801119c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80117ec:	693b      	ldr	r3, [r7, #16]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d004      	beq.n	80117fc <tcp_abandon+0x154>
 80117f2:	693b      	ldr	r3, [r7, #16]
 80117f4:	f06f 010c 	mvn.w	r1, #12
 80117f8:	68f8      	ldr	r0, [r7, #12]
 80117fa:	4798      	blx	r3
  }
}
 80117fc:	3728      	adds	r7, #40	; 0x28
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd80      	pop	{r7, pc}
 8011802:	bf00      	nop
 8011804:	08023464 	.word	0x08023464
 8011808:	080235a8 	.word	0x080235a8
 801180c:	080234a8 	.word	0x080234a8
 8011810:	080235c4 	.word	0x080235c4
 8011814:	2000894c 	.word	0x2000894c
 8011818:	20008948 	.word	0x20008948
 801181c:	2000893c 	.word	0x2000893c
 8011820:	20008938 	.word	0x20008938

08011824 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b082      	sub	sp, #8
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801182c:	2101      	movs	r1, #1
 801182e:	6878      	ldr	r0, [r7, #4]
 8011830:	f7ff ff3a 	bl	80116a8 <tcp_abandon>
}
 8011834:	bf00      	nop
 8011836:	3708      	adds	r7, #8
 8011838:	46bd      	mov	sp, r7
 801183a:	bd80      	pop	{r7, pc}

0801183c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b088      	sub	sp, #32
 8011840:	af00      	add	r7, sp, #0
 8011842:	60f8      	str	r0, [r7, #12]
 8011844:	60b9      	str	r1, [r7, #8]
 8011846:	4613      	mov	r3, r2
 8011848:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801184a:	2304      	movs	r3, #4
 801184c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801184e:	68bb      	ldr	r3, [r7, #8]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d101      	bne.n	8011858 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8011854:	4b3e      	ldr	r3, [pc, #248]	; (8011950 <tcp_bind+0x114>)
 8011856:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d109      	bne.n	8011872 <tcp_bind+0x36>
 801185e:	4b3d      	ldr	r3, [pc, #244]	; (8011954 <tcp_bind+0x118>)
 8011860:	f240 22a9 	movw	r2, #681	; 0x2a9
 8011864:	493c      	ldr	r1, [pc, #240]	; (8011958 <tcp_bind+0x11c>)
 8011866:	483d      	ldr	r0, [pc, #244]	; (801195c <tcp_bind+0x120>)
 8011868:	f00d fffe 	bl	801f868 <iprintf>
 801186c:	f06f 030f 	mvn.w	r3, #15
 8011870:	e06a      	b.n	8011948 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	7d1b      	ldrb	r3, [r3, #20]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d009      	beq.n	801188e <tcp_bind+0x52>
 801187a:	4b36      	ldr	r3, [pc, #216]	; (8011954 <tcp_bind+0x118>)
 801187c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011880:	4937      	ldr	r1, [pc, #220]	; (8011960 <tcp_bind+0x124>)
 8011882:	4836      	ldr	r0, [pc, #216]	; (801195c <tcp_bind+0x120>)
 8011884:	f00d fff0 	bl	801f868 <iprintf>
 8011888:	f06f 0305 	mvn.w	r3, #5
 801188c:	e05c      	b.n	8011948 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801188e:	88fb      	ldrh	r3, [r7, #6]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d109      	bne.n	80118a8 <tcp_bind+0x6c>
    port = tcp_new_port();
 8011894:	f000 f9f8 	bl	8011c88 <tcp_new_port>
 8011898:	4603      	mov	r3, r0
 801189a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801189c:	88fb      	ldrh	r3, [r7, #6]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d135      	bne.n	801190e <tcp_bind+0xd2>
      return ERR_BUF;
 80118a2:	f06f 0301 	mvn.w	r3, #1
 80118a6:	e04f      	b.n	8011948 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80118a8:	2300      	movs	r3, #0
 80118aa:	61fb      	str	r3, [r7, #28]
 80118ac:	e02b      	b.n	8011906 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80118ae:	4a2d      	ldr	r2, [pc, #180]	; (8011964 <tcp_bind+0x128>)
 80118b0:	69fb      	ldr	r3, [r7, #28]
 80118b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	61bb      	str	r3, [r7, #24]
 80118ba:	e01e      	b.n	80118fa <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80118bc:	69bb      	ldr	r3, [r7, #24]
 80118be:	8adb      	ldrh	r3, [r3, #22]
 80118c0:	88fa      	ldrh	r2, [r7, #6]
 80118c2:	429a      	cmp	r2, r3
 80118c4:	d116      	bne.n	80118f4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80118c6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d010      	beq.n	80118ee <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80118cc:	69bb      	ldr	r3, [r7, #24]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d00c      	beq.n	80118ee <tcp_bind+0xb2>
 80118d4:	68bb      	ldr	r3, [r7, #8]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d009      	beq.n	80118ee <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80118da:	68bb      	ldr	r3, [r7, #8]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d005      	beq.n	80118ee <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80118e2:	69bb      	ldr	r3, [r7, #24]
 80118e4:	681a      	ldr	r2, [r3, #0]
 80118e6:	68bb      	ldr	r3, [r7, #8]
 80118e8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80118ea:	429a      	cmp	r2, r3
 80118ec:	d102      	bne.n	80118f4 <tcp_bind+0xb8>
              return ERR_USE;
 80118ee:	f06f 0307 	mvn.w	r3, #7
 80118f2:	e029      	b.n	8011948 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80118f4:	69bb      	ldr	r3, [r7, #24]
 80118f6:	68db      	ldr	r3, [r3, #12]
 80118f8:	61bb      	str	r3, [r7, #24]
 80118fa:	69bb      	ldr	r3, [r7, #24]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d1dd      	bne.n	80118bc <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8011900:	69fb      	ldr	r3, [r7, #28]
 8011902:	3301      	adds	r3, #1
 8011904:	61fb      	str	r3, [r7, #28]
 8011906:	69fa      	ldr	r2, [r7, #28]
 8011908:	697b      	ldr	r3, [r7, #20]
 801190a:	429a      	cmp	r2, r3
 801190c:	dbcf      	blt.n	80118ae <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801190e:	68bb      	ldr	r3, [r7, #8]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d00c      	beq.n	801192e <tcp_bind+0xf2>
 8011914:	68bb      	ldr	r3, [r7, #8]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d008      	beq.n	801192e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 801191c:	68bb      	ldr	r3, [r7, #8]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d002      	beq.n	8011928 <tcp_bind+0xec>
 8011922:	68bb      	ldr	r3, [r7, #8]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	e000      	b.n	801192a <tcp_bind+0xee>
 8011928:	2300      	movs	r3, #0
 801192a:	68fa      	ldr	r2, [r7, #12]
 801192c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	88fa      	ldrh	r2, [r7, #6]
 8011932:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8011934:	4b0c      	ldr	r3, [pc, #48]	; (8011968 <tcp_bind+0x12c>)
 8011936:	681a      	ldr	r2, [r3, #0]
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	60da      	str	r2, [r3, #12]
 801193c:	4a0a      	ldr	r2, [pc, #40]	; (8011968 <tcp_bind+0x12c>)
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	6013      	str	r3, [r2, #0]
 8011942:	f005 fcb5 	bl	80172b0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8011946:	2300      	movs	r3, #0
}
 8011948:	4618      	mov	r0, r3
 801194a:	3720      	adds	r7, #32
 801194c:	46bd      	mov	sp, r7
 801194e:	bd80      	pop	{r7, pc}
 8011950:	08025ac4 	.word	0x08025ac4
 8011954:	08023464 	.word	0x08023464
 8011958:	080235f8 	.word	0x080235f8
 801195c:	080234a8 	.word	0x080234a8
 8011960:	08023610 	.word	0x08023610
 8011964:	08025a84 	.word	0x08025a84
 8011968:	20008948 	.word	0x20008948

0801196c <tcp_bind_netif>:
 * @param pcb the tcp_pcb to bind.
 * @param netif the netif to bind to. Can be NULL.
 */
void
tcp_bind_netif(struct tcp_pcb *pcb, const struct netif *netif)
{
 801196c:	b480      	push	{r7}
 801196e:	b083      	sub	sp, #12
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
 8011974:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (netif != NULL) {
 8011976:	683b      	ldr	r3, [r7, #0]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d007      	beq.n	801198c <tcp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011982:	3301      	adds	r3, #1
 8011984:	b2da      	uxtb	r2, r3
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 801198a:	e002      	b.n	8011992 <tcp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	2200      	movs	r2, #0
 8011990:	721a      	strb	r2, [r3, #8]
}
 8011992:	bf00      	nop
 8011994:	370c      	adds	r7, #12
 8011996:	46bd      	mov	sp, r7
 8011998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199c:	4770      	bx	lr
	...

080119a0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b084      	sub	sp, #16
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	60f8      	str	r0, [r7, #12]
 80119a8:	60b9      	str	r1, [r7, #8]
 80119aa:	4613      	mov	r3, r2
 80119ac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80119ae:	68bb      	ldr	r3, [r7, #8]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d106      	bne.n	80119c2 <tcp_accept_null+0x22>
 80119b4:	4b07      	ldr	r3, [pc, #28]	; (80119d4 <tcp_accept_null+0x34>)
 80119b6:	f240 320f 	movw	r2, #783	; 0x30f
 80119ba:	4907      	ldr	r1, [pc, #28]	; (80119d8 <tcp_accept_null+0x38>)
 80119bc:	4807      	ldr	r0, [pc, #28]	; (80119dc <tcp_accept_null+0x3c>)
 80119be:	f00d ff53 	bl	801f868 <iprintf>

  tcp_abort(pcb);
 80119c2:	68b8      	ldr	r0, [r7, #8]
 80119c4:	f7ff ff2e 	bl	8011824 <tcp_abort>

  return ERR_ABRT;
 80119c8:	f06f 030c 	mvn.w	r3, #12
}
 80119cc:	4618      	mov	r0, r3
 80119ce:	3710      	adds	r7, #16
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}
 80119d4:	08023464 	.word	0x08023464
 80119d8:	08023638 	.word	0x08023638
 80119dc:	080234a8 	.word	0x080234a8

080119e0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b088      	sub	sp, #32
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	60f8      	str	r0, [r7, #12]
 80119e8:	460b      	mov	r3, r1
 80119ea:	607a      	str	r2, [r7, #4]
 80119ec:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80119ee:	2300      	movs	r3, #0
 80119f0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d109      	bne.n	8011a0c <tcp_listen_with_backlog_and_err+0x2c>
 80119f8:	4b47      	ldr	r3, [pc, #284]	; (8011b18 <tcp_listen_with_backlog_and_err+0x138>)
 80119fa:	f240 3259 	movw	r2, #857	; 0x359
 80119fe:	4947      	ldr	r1, [pc, #284]	; (8011b1c <tcp_listen_with_backlog_and_err+0x13c>)
 8011a00:	4847      	ldr	r0, [pc, #284]	; (8011b20 <tcp_listen_with_backlog_and_err+0x140>)
 8011a02:	f00d ff31 	bl	801f868 <iprintf>
 8011a06:	23f0      	movs	r3, #240	; 0xf0
 8011a08:	76fb      	strb	r3, [r7, #27]
 8011a0a:	e079      	b.n	8011b00 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	7d1b      	ldrb	r3, [r3, #20]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d009      	beq.n	8011a28 <tcp_listen_with_backlog_and_err+0x48>
 8011a14:	4b40      	ldr	r3, [pc, #256]	; (8011b18 <tcp_listen_with_backlog_and_err+0x138>)
 8011a16:	f240 325a 	movw	r2, #858	; 0x35a
 8011a1a:	4942      	ldr	r1, [pc, #264]	; (8011b24 <tcp_listen_with_backlog_and_err+0x144>)
 8011a1c:	4840      	ldr	r0, [pc, #256]	; (8011b20 <tcp_listen_with_backlog_and_err+0x140>)
 8011a1e:	f00d ff23 	bl	801f868 <iprintf>
 8011a22:	23f1      	movs	r3, #241	; 0xf1
 8011a24:	76fb      	strb	r3, [r7, #27]
 8011a26:	e06b      	b.n	8011b00 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	7d1b      	ldrb	r3, [r3, #20]
 8011a2c:	2b01      	cmp	r3, #1
 8011a2e:	d104      	bne.n	8011a3a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8011a34:	23f7      	movs	r3, #247	; 0xf7
 8011a36:	76fb      	strb	r3, [r7, #27]
    goto done;
 8011a38:	e062      	b.n	8011b00 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8011a3a:	2002      	movs	r0, #2
 8011a3c:	f7fe f82c 	bl	800fa98 <memp_malloc>
 8011a40:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8011a42:	69fb      	ldr	r3, [r7, #28]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d102      	bne.n	8011a4e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8011a48:	23ff      	movs	r3, #255	; 0xff
 8011a4a:	76fb      	strb	r3, [r7, #27]
    goto done;
 8011a4c:	e058      	b.n	8011b00 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	691a      	ldr	r2, [r3, #16]
 8011a52:	69fb      	ldr	r3, [r7, #28]
 8011a54:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	8ada      	ldrh	r2, [r3, #22]
 8011a5a:	69fb      	ldr	r3, [r7, #28]
 8011a5c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8011a5e:	69fb      	ldr	r3, [r7, #28]
 8011a60:	2201      	movs	r2, #1
 8011a62:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	7d5a      	ldrb	r2, [r3, #21]
 8011a68:	69fb      	ldr	r3, [r7, #28]
 8011a6a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	7a5a      	ldrb	r2, [r3, #9]
 8011a70:	69fb      	ldr	r3, [r7, #28]
 8011a72:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8011a74:	69fb      	ldr	r3, [r7, #28]
 8011a76:	2200      	movs	r2, #0
 8011a78:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	7ada      	ldrb	r2, [r3, #11]
 8011a7e:	69fb      	ldr	r3, [r7, #28]
 8011a80:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	7a9a      	ldrb	r2, [r3, #10]
 8011a86:	69fb      	ldr	r3, [r7, #28]
 8011a88:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	681a      	ldr	r2, [r3, #0]
 8011a8e:	69fb      	ldr	r3, [r7, #28]
 8011a90:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	8adb      	ldrh	r3, [r3, #22]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d021      	beq.n	8011ade <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8011a9a:	4b23      	ldr	r3, [pc, #140]	; (8011b28 <tcp_listen_with_backlog_and_err+0x148>)
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	68fa      	ldr	r2, [r7, #12]
 8011aa0:	429a      	cmp	r2, r3
 8011aa2:	d105      	bne.n	8011ab0 <tcp_listen_with_backlog_and_err+0xd0>
 8011aa4:	4b20      	ldr	r3, [pc, #128]	; (8011b28 <tcp_listen_with_backlog_and_err+0x148>)
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	68db      	ldr	r3, [r3, #12]
 8011aaa:	4a1f      	ldr	r2, [pc, #124]	; (8011b28 <tcp_listen_with_backlog_and_err+0x148>)
 8011aac:	6013      	str	r3, [r2, #0]
 8011aae:	e013      	b.n	8011ad8 <tcp_listen_with_backlog_and_err+0xf8>
 8011ab0:	4b1d      	ldr	r3, [pc, #116]	; (8011b28 <tcp_listen_with_backlog_and_err+0x148>)
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	617b      	str	r3, [r7, #20]
 8011ab6:	e00c      	b.n	8011ad2 <tcp_listen_with_backlog_and_err+0xf2>
 8011ab8:	697b      	ldr	r3, [r7, #20]
 8011aba:	68db      	ldr	r3, [r3, #12]
 8011abc:	68fa      	ldr	r2, [r7, #12]
 8011abe:	429a      	cmp	r2, r3
 8011ac0:	d104      	bne.n	8011acc <tcp_listen_with_backlog_and_err+0xec>
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	68da      	ldr	r2, [r3, #12]
 8011ac6:	697b      	ldr	r3, [r7, #20]
 8011ac8:	60da      	str	r2, [r3, #12]
 8011aca:	e005      	b.n	8011ad8 <tcp_listen_with_backlog_and_err+0xf8>
 8011acc:	697b      	ldr	r3, [r7, #20]
 8011ace:	68db      	ldr	r3, [r3, #12]
 8011ad0:	617b      	str	r3, [r7, #20]
 8011ad2:	697b      	ldr	r3, [r7, #20]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d1ef      	bne.n	8011ab8 <tcp_listen_with_backlog_and_err+0xd8>
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	2200      	movs	r2, #0
 8011adc:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8011ade:	68f8      	ldr	r0, [r7, #12]
 8011ae0:	f7ff fb5c 	bl	801119c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8011ae4:	69fb      	ldr	r3, [r7, #28]
 8011ae6:	4a11      	ldr	r2, [pc, #68]	; (8011b2c <tcp_listen_with_backlog_and_err+0x14c>)
 8011ae8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8011aea:	4b11      	ldr	r3, [pc, #68]	; (8011b30 <tcp_listen_with_backlog_and_err+0x150>)
 8011aec:	681a      	ldr	r2, [r3, #0]
 8011aee:	69fb      	ldr	r3, [r7, #28]
 8011af0:	60da      	str	r2, [r3, #12]
 8011af2:	4a0f      	ldr	r2, [pc, #60]	; (8011b30 <tcp_listen_with_backlog_and_err+0x150>)
 8011af4:	69fb      	ldr	r3, [r7, #28]
 8011af6:	6013      	str	r3, [r2, #0]
 8011af8:	f005 fbda 	bl	80172b0 <tcp_timer_needed>
  res = ERR_OK;
 8011afc:	2300      	movs	r3, #0
 8011afe:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d002      	beq.n	8011b0c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	7efa      	ldrb	r2, [r7, #27]
 8011b0a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8011b0c:	69fb      	ldr	r3, [r7, #28]
}
 8011b0e:	4618      	mov	r0, r3
 8011b10:	3720      	adds	r7, #32
 8011b12:	46bd      	mov	sp, r7
 8011b14:	bd80      	pop	{r7, pc}
 8011b16:	bf00      	nop
 8011b18:	08023464 	.word	0x08023464
 8011b1c:	08023658 	.word	0x08023658
 8011b20:	080234a8 	.word	0x080234a8
 8011b24:	08023688 	.word	0x08023688
 8011b28:	20008948 	.word	0x20008948
 8011b2c:	080119a1 	.word	0x080119a1
 8011b30:	20008944 	.word	0x20008944

08011b34 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b084      	sub	sp, #16
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d106      	bne.n	8011b50 <tcp_update_rcv_ann_wnd+0x1c>
 8011b42:	4b25      	ldr	r3, [pc, #148]	; (8011bd8 <tcp_update_rcv_ann_wnd+0xa4>)
 8011b44:	f240 32a6 	movw	r2, #934	; 0x3a6
 8011b48:	4924      	ldr	r1, [pc, #144]	; (8011bdc <tcp_update_rcv_ann_wnd+0xa8>)
 8011b4a:	4825      	ldr	r0, [pc, #148]	; (8011be0 <tcp_update_rcv_ann_wnd+0xac>)
 8011b4c:	f00d fe8c 	bl	801f868 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b54:	687a      	ldr	r2, [r7, #4]
 8011b56:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011b58:	4413      	add	r3, r2
 8011b5a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b60:	687a      	ldr	r2, [r7, #4]
 8011b62:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8011b64:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8011b68:	bf28      	it	cs
 8011b6a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8011b6e:	b292      	uxth	r2, r2
 8011b70:	4413      	add	r3, r2
 8011b72:	68fa      	ldr	r2, [r7, #12]
 8011b74:	1ad3      	subs	r3, r2, r3
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	db08      	blt.n	8011b8c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b86:	68fa      	ldr	r2, [r7, #12]
 8011b88:	1ad3      	subs	r3, r2, r3
 8011b8a:	e020      	b.n	8011bce <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b94:	1ad3      	subs	r3, r2, r3
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	dd03      	ble.n	8011ba2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011ba0:	e014      	b.n	8011bcc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011baa:	1ad3      	subs	r3, r2, r3
 8011bac:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011bae:	68bb      	ldr	r3, [r7, #8]
 8011bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011bb4:	d306      	bcc.n	8011bc4 <tcp_update_rcv_ann_wnd+0x90>
 8011bb6:	4b08      	ldr	r3, [pc, #32]	; (8011bd8 <tcp_update_rcv_ann_wnd+0xa4>)
 8011bb8:	f240 32b6 	movw	r2, #950	; 0x3b6
 8011bbc:	4909      	ldr	r1, [pc, #36]	; (8011be4 <tcp_update_rcv_ann_wnd+0xb0>)
 8011bbe:	4808      	ldr	r0, [pc, #32]	; (8011be0 <tcp_update_rcv_ann_wnd+0xac>)
 8011bc0:	f00d fe52 	bl	801f868 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8011bc4:	68bb      	ldr	r3, [r7, #8]
 8011bc6:	b29a      	uxth	r2, r3
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8011bcc:	2300      	movs	r3, #0
  }
}
 8011bce:	4618      	mov	r0, r3
 8011bd0:	3710      	adds	r7, #16
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	bd80      	pop	{r7, pc}
 8011bd6:	bf00      	nop
 8011bd8:	08023464 	.word	0x08023464
 8011bdc:	080236c0 	.word	0x080236c0
 8011be0:	080234a8 	.word	0x080234a8
 8011be4:	080236e4 	.word	0x080236e4

08011be8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b084      	sub	sp, #16
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
 8011bf0:	460b      	mov	r3, r1
 8011bf2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d107      	bne.n	8011c0a <tcp_recved+0x22>
 8011bfa:	4b1f      	ldr	r3, [pc, #124]	; (8011c78 <tcp_recved+0x90>)
 8011bfc:	f240 32cf 	movw	r2, #975	; 0x3cf
 8011c00:	491e      	ldr	r1, [pc, #120]	; (8011c7c <tcp_recved+0x94>)
 8011c02:	481f      	ldr	r0, [pc, #124]	; (8011c80 <tcp_recved+0x98>)
 8011c04:	f00d fe30 	bl	801f868 <iprintf>
 8011c08:	e032      	b.n	8011c70 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	7d1b      	ldrb	r3, [r3, #20]
 8011c0e:	2b01      	cmp	r3, #1
 8011c10:	d106      	bne.n	8011c20 <tcp_recved+0x38>
 8011c12:	4b19      	ldr	r3, [pc, #100]	; (8011c78 <tcp_recved+0x90>)
 8011c14:	f240 32d2 	movw	r2, #978	; 0x3d2
 8011c18:	491a      	ldr	r1, [pc, #104]	; (8011c84 <tcp_recved+0x9c>)
 8011c1a:	4819      	ldr	r0, [pc, #100]	; (8011c80 <tcp_recved+0x98>)
 8011c1c:	f00d fe24 	bl	801f868 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011c24:	887b      	ldrh	r3, [r7, #2]
 8011c26:	4413      	add	r3, r2
 8011c28:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8011c2a:	89fb      	ldrh	r3, [r7, #14]
 8011c2c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011c30:	d804      	bhi.n	8011c3c <tcp_recved+0x54>
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011c36:	89fa      	ldrh	r2, [r7, #14]
 8011c38:	429a      	cmp	r2, r3
 8011c3a:	d204      	bcs.n	8011c46 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011c42:	851a      	strh	r2, [r3, #40]	; 0x28
 8011c44:	e002      	b.n	8011c4c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	89fa      	ldrh	r2, [r7, #14]
 8011c4a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011c4c:	6878      	ldr	r0, [r7, #4]
 8011c4e:	f7ff ff71 	bl	8011b34 <tcp_update_rcv_ann_wnd>
 8011c52:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011c54:	68bb      	ldr	r3, [r7, #8]
 8011c56:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011c5a:	d309      	bcc.n	8011c70 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	8b5b      	ldrh	r3, [r3, #26]
 8011c60:	f043 0302 	orr.w	r3, r3, #2
 8011c64:	b29a      	uxth	r2, r3
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011c6a:	6878      	ldr	r0, [r7, #4]
 8011c6c:	f004 fbaa 	bl	80163c4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011c70:	3710      	adds	r7, #16
 8011c72:	46bd      	mov	sp, r7
 8011c74:	bd80      	pop	{r7, pc}
 8011c76:	bf00      	nop
 8011c78:	08023464 	.word	0x08023464
 8011c7c:	08023700 	.word	0x08023700
 8011c80:	080234a8 	.word	0x080234a8
 8011c84:	08023718 	.word	0x08023718

08011c88 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8011c88:	b480      	push	{r7}
 8011c8a:	b083      	sub	sp, #12
 8011c8c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8011c8e:	2300      	movs	r3, #0
 8011c90:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8011c92:	4b1e      	ldr	r3, [pc, #120]	; (8011d0c <tcp_new_port+0x84>)
 8011c94:	881b      	ldrh	r3, [r3, #0]
 8011c96:	3301      	adds	r3, #1
 8011c98:	b29a      	uxth	r2, r3
 8011c9a:	4b1c      	ldr	r3, [pc, #112]	; (8011d0c <tcp_new_port+0x84>)
 8011c9c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8011c9e:	4b1b      	ldr	r3, [pc, #108]	; (8011d0c <tcp_new_port+0x84>)
 8011ca0:	881b      	ldrh	r3, [r3, #0]
 8011ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ca6:	4293      	cmp	r3, r2
 8011ca8:	d103      	bne.n	8011cb2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8011caa:	4b18      	ldr	r3, [pc, #96]	; (8011d0c <tcp_new_port+0x84>)
 8011cac:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011cb0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	71fb      	strb	r3, [r7, #7]
 8011cb6:	e01e      	b.n	8011cf6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8011cb8:	79fb      	ldrb	r3, [r7, #7]
 8011cba:	4a15      	ldr	r2, [pc, #84]	; (8011d10 <tcp_new_port+0x88>)
 8011cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	603b      	str	r3, [r7, #0]
 8011cc4:	e011      	b.n	8011cea <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	8ada      	ldrh	r2, [r3, #22]
 8011cca:	4b10      	ldr	r3, [pc, #64]	; (8011d0c <tcp_new_port+0x84>)
 8011ccc:	881b      	ldrh	r3, [r3, #0]
 8011cce:	429a      	cmp	r2, r3
 8011cd0:	d108      	bne.n	8011ce4 <tcp_new_port+0x5c>
        n++;
 8011cd2:	88bb      	ldrh	r3, [r7, #4]
 8011cd4:	3301      	adds	r3, #1
 8011cd6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8011cd8:	88bb      	ldrh	r3, [r7, #4]
 8011cda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011cde:	d3d8      	bcc.n	8011c92 <tcp_new_port+0xa>
          return 0;
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	e00d      	b.n	8011d00 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8011ce4:	683b      	ldr	r3, [r7, #0]
 8011ce6:	68db      	ldr	r3, [r3, #12]
 8011ce8:	603b      	str	r3, [r7, #0]
 8011cea:	683b      	ldr	r3, [r7, #0]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d1ea      	bne.n	8011cc6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011cf0:	79fb      	ldrb	r3, [r7, #7]
 8011cf2:	3301      	adds	r3, #1
 8011cf4:	71fb      	strb	r3, [r7, #7]
 8011cf6:	79fb      	ldrb	r3, [r7, #7]
 8011cf8:	2b03      	cmp	r3, #3
 8011cfa:	d9dd      	bls.n	8011cb8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8011cfc:	4b03      	ldr	r3, [pc, #12]	; (8011d0c <tcp_new_port+0x84>)
 8011cfe:	881b      	ldrh	r3, [r3, #0]
}
 8011d00:	4618      	mov	r0, r3
 8011d02:	370c      	adds	r7, #12
 8011d04:	46bd      	mov	sp, r7
 8011d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0a:	4770      	bx	lr
 8011d0c:	10000010 	.word	0x10000010
 8011d10:	08025a84 	.word	0x08025a84

08011d14 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011d14:	b5b0      	push	{r4, r5, r7, lr}
 8011d16:	b090      	sub	sp, #64	; 0x40
 8011d18:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8011d20:	4b94      	ldr	r3, [pc, #592]	; (8011f74 <tcp_slowtmr+0x260>)
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	3301      	adds	r3, #1
 8011d26:	4a93      	ldr	r2, [pc, #588]	; (8011f74 <tcp_slowtmr+0x260>)
 8011d28:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8011d2a:	4b93      	ldr	r3, [pc, #588]	; (8011f78 <tcp_slowtmr+0x264>)
 8011d2c:	781b      	ldrb	r3, [r3, #0]
 8011d2e:	3301      	adds	r3, #1
 8011d30:	b2da      	uxtb	r2, r3
 8011d32:	4b91      	ldr	r3, [pc, #580]	; (8011f78 <tcp_slowtmr+0x264>)
 8011d34:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8011d36:	2300      	movs	r3, #0
 8011d38:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8011d3a:	4b90      	ldr	r3, [pc, #576]	; (8011f7c <tcp_slowtmr+0x268>)
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011d40:	e29f      	b.n	8012282 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8011d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d44:	7d1b      	ldrb	r3, [r3, #20]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d106      	bne.n	8011d58 <tcp_slowtmr+0x44>
 8011d4a:	4b8d      	ldr	r3, [pc, #564]	; (8011f80 <tcp_slowtmr+0x26c>)
 8011d4c:	f240 42be 	movw	r2, #1214	; 0x4be
 8011d50:	498c      	ldr	r1, [pc, #560]	; (8011f84 <tcp_slowtmr+0x270>)
 8011d52:	488d      	ldr	r0, [pc, #564]	; (8011f88 <tcp_slowtmr+0x274>)
 8011d54:	f00d fd88 	bl	801f868 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d5a:	7d1b      	ldrb	r3, [r3, #20]
 8011d5c:	2b01      	cmp	r3, #1
 8011d5e:	d106      	bne.n	8011d6e <tcp_slowtmr+0x5a>
 8011d60:	4b87      	ldr	r3, [pc, #540]	; (8011f80 <tcp_slowtmr+0x26c>)
 8011d62:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8011d66:	4989      	ldr	r1, [pc, #548]	; (8011f8c <tcp_slowtmr+0x278>)
 8011d68:	4887      	ldr	r0, [pc, #540]	; (8011f88 <tcp_slowtmr+0x274>)
 8011d6a:	f00d fd7d 	bl	801f868 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d70:	7d1b      	ldrb	r3, [r3, #20]
 8011d72:	2b0a      	cmp	r3, #10
 8011d74:	d106      	bne.n	8011d84 <tcp_slowtmr+0x70>
 8011d76:	4b82      	ldr	r3, [pc, #520]	; (8011f80 <tcp_slowtmr+0x26c>)
 8011d78:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8011d7c:	4984      	ldr	r1, [pc, #528]	; (8011f90 <tcp_slowtmr+0x27c>)
 8011d7e:	4882      	ldr	r0, [pc, #520]	; (8011f88 <tcp_slowtmr+0x274>)
 8011d80:	f00d fd72 	bl	801f868 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d86:	7f9a      	ldrb	r2, [r3, #30]
 8011d88:	4b7b      	ldr	r3, [pc, #492]	; (8011f78 <tcp_slowtmr+0x264>)
 8011d8a:	781b      	ldrb	r3, [r3, #0]
 8011d8c:	429a      	cmp	r2, r3
 8011d8e:	d105      	bne.n	8011d9c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8011d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d92:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d96:	68db      	ldr	r3, [r3, #12]
 8011d98:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8011d9a:	e272      	b.n	8012282 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8011d9c:	4b76      	ldr	r3, [pc, #472]	; (8011f78 <tcp_slowtmr+0x264>)
 8011d9e:	781a      	ldrb	r2, [r3, #0]
 8011da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011da2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8011da4:	2300      	movs	r3, #0
 8011da6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8011daa:	2300      	movs	r3, #0
 8011dac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011db2:	7d1b      	ldrb	r3, [r3, #20]
 8011db4:	2b02      	cmp	r3, #2
 8011db6:	d10a      	bne.n	8011dce <tcp_slowtmr+0xba>
 8011db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011dbe:	2b05      	cmp	r3, #5
 8011dc0:	d905      	bls.n	8011dce <tcp_slowtmr+0xba>
      ++pcb_remove;
 8011dc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011dc6:	3301      	adds	r3, #1
 8011dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011dcc:	e11e      	b.n	801200c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8011dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dd0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011dd4:	2b0b      	cmp	r3, #11
 8011dd6:	d905      	bls.n	8011de4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8011dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ddc:	3301      	adds	r3, #1
 8011dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011de2:	e113      	b.n	801200c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011de6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d075      	beq.n	8011eda <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d006      	beq.n	8011e04 <tcp_slowtmr+0xf0>
 8011df6:	4b62      	ldr	r3, [pc, #392]	; (8011f80 <tcp_slowtmr+0x26c>)
 8011df8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8011dfc:	4965      	ldr	r1, [pc, #404]	; (8011f94 <tcp_slowtmr+0x280>)
 8011dfe:	4862      	ldr	r0, [pc, #392]	; (8011f88 <tcp_slowtmr+0x274>)
 8011e00:	f00d fd32 	bl	801f868 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d106      	bne.n	8011e1a <tcp_slowtmr+0x106>
 8011e0c:	4b5c      	ldr	r3, [pc, #368]	; (8011f80 <tcp_slowtmr+0x26c>)
 8011e0e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8011e12:	4961      	ldr	r1, [pc, #388]	; (8011f98 <tcp_slowtmr+0x284>)
 8011e14:	485c      	ldr	r0, [pc, #368]	; (8011f88 <tcp_slowtmr+0x274>)
 8011e16:	f00d fd27 	bl	801f868 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8011e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e1c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011e20:	2b0b      	cmp	r3, #11
 8011e22:	d905      	bls.n	8011e30 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8011e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e28:	3301      	adds	r3, #1
 8011e2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011e2e:	e0ed      	b.n	801200c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e32:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011e36:	3b01      	subs	r3, #1
 8011e38:	4a58      	ldr	r2, [pc, #352]	; (8011f9c <tcp_slowtmr+0x288>)
 8011e3a:	5cd3      	ldrb	r3, [r2, r3]
 8011e3c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8011e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e40:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011e44:	7c7a      	ldrb	r2, [r7, #17]
 8011e46:	429a      	cmp	r2, r3
 8011e48:	d907      	bls.n	8011e5a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8011e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e4c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011e50:	3301      	adds	r3, #1
 8011e52:	b2da      	uxtb	r2, r3
 8011e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e56:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8011e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e5c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011e60:	7c7a      	ldrb	r2, [r7, #17]
 8011e62:	429a      	cmp	r2, r3
 8011e64:	f200 80d2 	bhi.w	801200c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011e68:	2301      	movs	r3, #1
 8011e6a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8011e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d108      	bne.n	8011e88 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8011e76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e78:	f005 f94c 	bl	8017114 <tcp_zero_window_probe>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d014      	beq.n	8011eac <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8011e82:	2300      	movs	r3, #0
 8011e84:	623b      	str	r3, [r7, #32]
 8011e86:	e011      	b.n	8011eac <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e8e:	4619      	mov	r1, r3
 8011e90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e92:	f004 f811 	bl	8015eb8 <tcp_split_unsent_seg>
 8011e96:	4603      	mov	r3, r0
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d107      	bne.n	8011eac <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8011e9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e9e:	f004 fa91 	bl	80163c4 <tcp_output>
 8011ea2:	4603      	mov	r3, r0
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d101      	bne.n	8011eac <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8011eac:	6a3b      	ldr	r3, [r7, #32]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	f000 80ac 	beq.w	801200c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8011eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ebe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011ec2:	2b06      	cmp	r3, #6
 8011ec4:	f200 80a2 	bhi.w	801200c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8011ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011ece:	3301      	adds	r3, #1
 8011ed0:	b2da      	uxtb	r2, r3
 8011ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ed4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8011ed8:	e098      	b.n	801200c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011edc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	db0f      	blt.n	8011f04 <tcp_slowtmr+0x1f0>
 8011ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ee6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011eea:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011eee:	4293      	cmp	r3, r2
 8011ef0:	d008      	beq.n	8011f04 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8011ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ef4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011ef8:	b29b      	uxth	r3, r3
 8011efa:	3301      	adds	r3, #1
 8011efc:	b29b      	uxth	r3, r3
 8011efe:	b21a      	sxth	r2, r3
 8011f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f02:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8011f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f06:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f0c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011f10:	429a      	cmp	r2, r3
 8011f12:	db7b      	blt.n	801200c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011f14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011f16:	f004 fd47 	bl	80169a8 <tcp_rexmit_rto_prepare>
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d007      	beq.n	8011f30 <tcp_slowtmr+0x21c>
 8011f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d171      	bne.n	801200c <tcp_slowtmr+0x2f8>
 8011f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d06d      	beq.n	801200c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8011f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f32:	7d1b      	ldrb	r3, [r3, #20]
 8011f34:	2b02      	cmp	r3, #2
 8011f36:	d03a      	beq.n	8011fae <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011f3e:	2b0c      	cmp	r3, #12
 8011f40:	bf28      	it	cs
 8011f42:	230c      	movcs	r3, #12
 8011f44:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f48:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011f4c:	10db      	asrs	r3, r3, #3
 8011f4e:	b21b      	sxth	r3, r3
 8011f50:	461a      	mov	r2, r3
 8011f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f54:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011f58:	4413      	add	r3, r2
 8011f5a:	7efa      	ldrb	r2, [r7, #27]
 8011f5c:	4910      	ldr	r1, [pc, #64]	; (8011fa0 <tcp_slowtmr+0x28c>)
 8011f5e:	5c8a      	ldrb	r2, [r1, r2]
 8011f60:	4093      	lsls	r3, r2
 8011f62:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011f64:	697b      	ldr	r3, [r7, #20]
 8011f66:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011f6a:	4293      	cmp	r3, r2
 8011f6c:	dc1a      	bgt.n	8011fa4 <tcp_slowtmr+0x290>
 8011f6e:	697b      	ldr	r3, [r7, #20]
 8011f70:	b21a      	sxth	r2, r3
 8011f72:	e019      	b.n	8011fa8 <tcp_slowtmr+0x294>
 8011f74:	20008940 	.word	0x20008940
 8011f78:	2000191a 	.word	0x2000191a
 8011f7c:	2000893c 	.word	0x2000893c
 8011f80:	08023464 	.word	0x08023464
 8011f84:	080237a8 	.word	0x080237a8
 8011f88:	080234a8 	.word	0x080234a8
 8011f8c:	080237d4 	.word	0x080237d4
 8011f90:	08023800 	.word	0x08023800
 8011f94:	08023830 	.word	0x08023830
 8011f98:	08023864 	.word	0x08023864
 8011f9c:	08025a7c 	.word	0x08025a7c
 8011fa0:	08025a6c 	.word	0x08025a6c
 8011fa4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011faa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8011fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fb0:	2200      	movs	r2, #0
 8011fb2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fb6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fbc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011fc0:	4293      	cmp	r3, r2
 8011fc2:	bf28      	it	cs
 8011fc4:	4613      	movcs	r3, r2
 8011fc6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011fc8:	8a7b      	ldrh	r3, [r7, #18]
 8011fca:	085b      	lsrs	r3, r3, #1
 8011fcc:	b29a      	uxth	r2, r3
 8011fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fd0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fd6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011fde:	005b      	lsls	r3, r3, #1
 8011fe0:	b29b      	uxth	r3, r3
 8011fe2:	429a      	cmp	r2, r3
 8011fe4:	d206      	bcs.n	8011ff4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8011fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fe8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011fea:	005b      	lsls	r3, r3, #1
 8011fec:	b29a      	uxth	r2, r3
 8011fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8011ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ffa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8011ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012000:	2200      	movs	r2, #0
 8012002:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8012006:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012008:	f004 fd3e 	bl	8016a88 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801200c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801200e:	7d1b      	ldrb	r3, [r3, #20]
 8012010:	2b06      	cmp	r3, #6
 8012012:	d111      	bne.n	8012038 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8012014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012016:	8b5b      	ldrh	r3, [r3, #26]
 8012018:	f003 0310 	and.w	r3, r3, #16
 801201c:	2b00      	cmp	r3, #0
 801201e:	d00b      	beq.n	8012038 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012020:	4b9d      	ldr	r3, [pc, #628]	; (8012298 <tcp_slowtmr+0x584>)
 8012022:	681a      	ldr	r2, [r3, #0]
 8012024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012026:	6a1b      	ldr	r3, [r3, #32]
 8012028:	1ad3      	subs	r3, r2, r3
 801202a:	2b28      	cmp	r3, #40	; 0x28
 801202c:	d904      	bls.n	8012038 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801202e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012032:	3301      	adds	r3, #1
 8012034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801203a:	7a5b      	ldrb	r3, [r3, #9]
 801203c:	f003 0308 	and.w	r3, r3, #8
 8012040:	2b00      	cmp	r3, #0
 8012042:	d04c      	beq.n	80120de <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8012044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012046:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012048:	2b04      	cmp	r3, #4
 801204a:	d003      	beq.n	8012054 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801204c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801204e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8012050:	2b07      	cmp	r3, #7
 8012052:	d144      	bne.n	80120de <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012054:	4b90      	ldr	r3, [pc, #576]	; (8012298 <tcp_slowtmr+0x584>)
 8012056:	681a      	ldr	r2, [r3, #0]
 8012058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801205a:	6a1b      	ldr	r3, [r3, #32]
 801205c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801205e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012064:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8012068:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 801206c:	498b      	ldr	r1, [pc, #556]	; (801229c <tcp_slowtmr+0x588>)
 801206e:	fba1 1303 	umull	r1, r3, r1, r3
 8012072:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012074:	429a      	cmp	r2, r3
 8012076:	d90a      	bls.n	801208e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8012078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801207c:	3301      	adds	r3, #1
 801207e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8012082:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012086:	3301      	adds	r3, #1
 8012088:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801208c:	e027      	b.n	80120de <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801208e:	4b82      	ldr	r3, [pc, #520]	; (8012298 <tcp_slowtmr+0x584>)
 8012090:	681a      	ldr	r2, [r3, #0]
 8012092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012094:	6a1b      	ldr	r3, [r3, #32]
 8012096:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8012098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801209a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801209e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120a0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80120a4:	4618      	mov	r0, r3
 80120a6:	4b7e      	ldr	r3, [pc, #504]	; (80122a0 <tcp_slowtmr+0x58c>)
 80120a8:	fb03 f300 	mul.w	r3, r3, r0
 80120ac:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80120ae:	497b      	ldr	r1, [pc, #492]	; (801229c <tcp_slowtmr+0x588>)
 80120b0:	fba1 1303 	umull	r1, r3, r1, r3
 80120b4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80120b6:	429a      	cmp	r2, r3
 80120b8:	d911      	bls.n	80120de <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80120ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80120bc:	f004 ffea 	bl	8017094 <tcp_keepalive>
 80120c0:	4603      	mov	r3, r0
 80120c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80120c6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d107      	bne.n	80120de <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80120ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120d0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80120d4:	3301      	adds	r3, #1
 80120d6:	b2da      	uxtb	r2, r3
 80120d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120da:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80120de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d011      	beq.n	801210a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80120e6:	4b6c      	ldr	r3, [pc, #432]	; (8012298 <tcp_slowtmr+0x584>)
 80120e8:	681a      	ldr	r2, [r3, #0]
 80120ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ec:	6a1b      	ldr	r3, [r3, #32]
 80120ee:	1ad2      	subs	r2, r2, r3
 80120f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120f2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80120f6:	4619      	mov	r1, r3
 80120f8:	460b      	mov	r3, r1
 80120fa:	005b      	lsls	r3, r3, #1
 80120fc:	440b      	add	r3, r1
 80120fe:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8012100:	429a      	cmp	r2, r3
 8012102:	d302      	bcc.n	801210a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8012104:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012106:	f000 fea9 	bl	8012e5c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801210a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801210c:	7d1b      	ldrb	r3, [r3, #20]
 801210e:	2b03      	cmp	r3, #3
 8012110:	d10b      	bne.n	801212a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012112:	4b61      	ldr	r3, [pc, #388]	; (8012298 <tcp_slowtmr+0x584>)
 8012114:	681a      	ldr	r2, [r3, #0]
 8012116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012118:	6a1b      	ldr	r3, [r3, #32]
 801211a:	1ad3      	subs	r3, r2, r3
 801211c:	2b28      	cmp	r3, #40	; 0x28
 801211e:	d904      	bls.n	801212a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8012120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012124:	3301      	adds	r3, #1
 8012126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801212a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801212c:	7d1b      	ldrb	r3, [r3, #20]
 801212e:	2b09      	cmp	r3, #9
 8012130:	d10b      	bne.n	801214a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012132:	4b59      	ldr	r3, [pc, #356]	; (8012298 <tcp_slowtmr+0x584>)
 8012134:	681a      	ldr	r2, [r3, #0]
 8012136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012138:	6a1b      	ldr	r3, [r3, #32]
 801213a:	1ad3      	subs	r3, r2, r3
 801213c:	2bf0      	cmp	r3, #240	; 0xf0
 801213e:	d904      	bls.n	801214a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8012140:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012144:	3301      	adds	r3, #1
 8012146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801214a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801214e:	2b00      	cmp	r3, #0
 8012150:	d060      	beq.n	8012214 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8012152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012158:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801215a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801215c:	f000 fcca 	bl	8012af4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8012160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012162:	2b00      	cmp	r3, #0
 8012164:	d010      	beq.n	8012188 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8012166:	4b4f      	ldr	r3, [pc, #316]	; (80122a4 <tcp_slowtmr+0x590>)
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801216c:	429a      	cmp	r2, r3
 801216e:	d106      	bne.n	801217e <tcp_slowtmr+0x46a>
 8012170:	4b4d      	ldr	r3, [pc, #308]	; (80122a8 <tcp_slowtmr+0x594>)
 8012172:	f240 526d 	movw	r2, #1389	; 0x56d
 8012176:	494d      	ldr	r1, [pc, #308]	; (80122ac <tcp_slowtmr+0x598>)
 8012178:	484d      	ldr	r0, [pc, #308]	; (80122b0 <tcp_slowtmr+0x59c>)
 801217a:	f00d fb75 	bl	801f868 <iprintf>
        prev->next = pcb->next;
 801217e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012180:	68da      	ldr	r2, [r3, #12]
 8012182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012184:	60da      	str	r2, [r3, #12]
 8012186:	e00f      	b.n	80121a8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8012188:	4b46      	ldr	r3, [pc, #280]	; (80122a4 <tcp_slowtmr+0x590>)
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801218e:	429a      	cmp	r2, r3
 8012190:	d006      	beq.n	80121a0 <tcp_slowtmr+0x48c>
 8012192:	4b45      	ldr	r3, [pc, #276]	; (80122a8 <tcp_slowtmr+0x594>)
 8012194:	f240 5271 	movw	r2, #1393	; 0x571
 8012198:	4946      	ldr	r1, [pc, #280]	; (80122b4 <tcp_slowtmr+0x5a0>)
 801219a:	4845      	ldr	r0, [pc, #276]	; (80122b0 <tcp_slowtmr+0x59c>)
 801219c:	f00d fb64 	bl	801f868 <iprintf>
        tcp_active_pcbs = pcb->next;
 80121a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121a2:	68db      	ldr	r3, [r3, #12]
 80121a4:	4a3f      	ldr	r2, [pc, #252]	; (80122a4 <tcp_slowtmr+0x590>)
 80121a6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80121a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d013      	beq.n	80121d8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80121b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121b2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80121b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121b6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80121b8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80121ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121bc:	3304      	adds	r3, #4
 80121be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121c0:	8ad2      	ldrh	r2, [r2, #22]
 80121c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80121c4:	8b09      	ldrh	r1, [r1, #24]
 80121c6:	9102      	str	r1, [sp, #8]
 80121c8:	9201      	str	r2, [sp, #4]
 80121ca:	9300      	str	r3, [sp, #0]
 80121cc:	462b      	mov	r3, r5
 80121ce:	4622      	mov	r2, r4
 80121d0:	4601      	mov	r1, r0
 80121d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80121d4:	f004 feaa 	bl	8016f2c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80121d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121da:	691b      	ldr	r3, [r3, #16]
 80121dc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80121de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121e0:	7d1b      	ldrb	r3, [r3, #20]
 80121e2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80121e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121e6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80121e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121ea:	68db      	ldr	r3, [r3, #12]
 80121ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80121ee:	6838      	ldr	r0, [r7, #0]
 80121f0:	f7fe ffd4 	bl	801119c <tcp_free>

      tcp_active_pcbs_changed = 0;
 80121f4:	4b30      	ldr	r3, [pc, #192]	; (80122b8 <tcp_slowtmr+0x5a4>)
 80121f6:	2200      	movs	r2, #0
 80121f8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d004      	beq.n	801220a <tcp_slowtmr+0x4f6>
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	f06f 010c 	mvn.w	r1, #12
 8012206:	68b8      	ldr	r0, [r7, #8]
 8012208:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801220a:	4b2b      	ldr	r3, [pc, #172]	; (80122b8 <tcp_slowtmr+0x5a4>)
 801220c:	781b      	ldrb	r3, [r3, #0]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d037      	beq.n	8012282 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8012212:	e590      	b.n	8011d36 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8012214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012216:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801221a:	68db      	ldr	r3, [r3, #12]
 801221c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801221e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012220:	7f1b      	ldrb	r3, [r3, #28]
 8012222:	3301      	adds	r3, #1
 8012224:	b2da      	uxtb	r2, r3
 8012226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012228:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801222a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801222c:	7f1a      	ldrb	r2, [r3, #28]
 801222e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012230:	7f5b      	ldrb	r3, [r3, #29]
 8012232:	429a      	cmp	r2, r3
 8012234:	d325      	bcc.n	8012282 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8012236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012238:	2200      	movs	r2, #0
 801223a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801223c:	4b1e      	ldr	r3, [pc, #120]	; (80122b8 <tcp_slowtmr+0x5a4>)
 801223e:	2200      	movs	r2, #0
 8012240:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8012242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012248:	2b00      	cmp	r3, #0
 801224a:	d00b      	beq.n	8012264 <tcp_slowtmr+0x550>
 801224c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801224e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012252:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012254:	6912      	ldr	r2, [r2, #16]
 8012256:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012258:	4610      	mov	r0, r2
 801225a:	4798      	blx	r3
 801225c:	4603      	mov	r3, r0
 801225e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8012262:	e002      	b.n	801226a <tcp_slowtmr+0x556>
 8012264:	2300      	movs	r3, #0
 8012266:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801226a:	4b13      	ldr	r3, [pc, #76]	; (80122b8 <tcp_slowtmr+0x5a4>)
 801226c:	781b      	ldrb	r3, [r3, #0]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d000      	beq.n	8012274 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8012272:	e560      	b.n	8011d36 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012274:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012278:	2b00      	cmp	r3, #0
 801227a:	d102      	bne.n	8012282 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801227c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801227e:	f004 f8a1 	bl	80163c4 <tcp_output>
  while (pcb != NULL) {
 8012282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012284:	2b00      	cmp	r3, #0
 8012286:	f47f ad5c 	bne.w	8011d42 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801228a:	2300      	movs	r3, #0
 801228c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801228e:	4b0b      	ldr	r3, [pc, #44]	; (80122bc <tcp_slowtmr+0x5a8>)
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012294:	e067      	b.n	8012366 <tcp_slowtmr+0x652>
 8012296:	bf00      	nop
 8012298:	20008940 	.word	0x20008940
 801229c:	10624dd3 	.word	0x10624dd3
 80122a0:	000124f8 	.word	0x000124f8
 80122a4:	2000893c 	.word	0x2000893c
 80122a8:	08023464 	.word	0x08023464
 80122ac:	0802389c 	.word	0x0802389c
 80122b0:	080234a8 	.word	0x080234a8
 80122b4:	080238c8 	.word	0x080238c8
 80122b8:	20008938 	.word	0x20008938
 80122bc:	2000894c 	.word	0x2000894c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80122c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122c2:	7d1b      	ldrb	r3, [r3, #20]
 80122c4:	2b0a      	cmp	r3, #10
 80122c6:	d006      	beq.n	80122d6 <tcp_slowtmr+0x5c2>
 80122c8:	4b2b      	ldr	r3, [pc, #172]	; (8012378 <tcp_slowtmr+0x664>)
 80122ca:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80122ce:	492b      	ldr	r1, [pc, #172]	; (801237c <tcp_slowtmr+0x668>)
 80122d0:	482b      	ldr	r0, [pc, #172]	; (8012380 <tcp_slowtmr+0x66c>)
 80122d2:	f00d fac9 	bl	801f868 <iprintf>
    pcb_remove = 0;
 80122d6:	2300      	movs	r3, #0
 80122d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80122dc:	4b29      	ldr	r3, [pc, #164]	; (8012384 <tcp_slowtmr+0x670>)
 80122de:	681a      	ldr	r2, [r3, #0]
 80122e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122e2:	6a1b      	ldr	r3, [r3, #32]
 80122e4:	1ad3      	subs	r3, r2, r3
 80122e6:	2bf0      	cmp	r3, #240	; 0xf0
 80122e8:	d904      	bls.n	80122f4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80122ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80122ee:	3301      	adds	r3, #1
 80122f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80122f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d02f      	beq.n	801235c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80122fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80122fe:	f000 fbf9 	bl	8012af4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012304:	2b00      	cmp	r3, #0
 8012306:	d010      	beq.n	801232a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012308:	4b1f      	ldr	r3, [pc, #124]	; (8012388 <tcp_slowtmr+0x674>)
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801230e:	429a      	cmp	r2, r3
 8012310:	d106      	bne.n	8012320 <tcp_slowtmr+0x60c>
 8012312:	4b19      	ldr	r3, [pc, #100]	; (8012378 <tcp_slowtmr+0x664>)
 8012314:	f240 52af 	movw	r2, #1455	; 0x5af
 8012318:	491c      	ldr	r1, [pc, #112]	; (801238c <tcp_slowtmr+0x678>)
 801231a:	4819      	ldr	r0, [pc, #100]	; (8012380 <tcp_slowtmr+0x66c>)
 801231c:	f00d faa4 	bl	801f868 <iprintf>
        prev->next = pcb->next;
 8012320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012322:	68da      	ldr	r2, [r3, #12]
 8012324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012326:	60da      	str	r2, [r3, #12]
 8012328:	e00f      	b.n	801234a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801232a:	4b17      	ldr	r3, [pc, #92]	; (8012388 <tcp_slowtmr+0x674>)
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012330:	429a      	cmp	r2, r3
 8012332:	d006      	beq.n	8012342 <tcp_slowtmr+0x62e>
 8012334:	4b10      	ldr	r3, [pc, #64]	; (8012378 <tcp_slowtmr+0x664>)
 8012336:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801233a:	4915      	ldr	r1, [pc, #84]	; (8012390 <tcp_slowtmr+0x67c>)
 801233c:	4810      	ldr	r0, [pc, #64]	; (8012380 <tcp_slowtmr+0x66c>)
 801233e:	f00d fa93 	bl	801f868 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012344:	68db      	ldr	r3, [r3, #12]
 8012346:	4a10      	ldr	r2, [pc, #64]	; (8012388 <tcp_slowtmr+0x674>)
 8012348:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801234a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801234c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801234e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012350:	68db      	ldr	r3, [r3, #12]
 8012352:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012354:	69f8      	ldr	r0, [r7, #28]
 8012356:	f7fe ff21 	bl	801119c <tcp_free>
 801235a:	e004      	b.n	8012366 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801235c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801235e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012362:	68db      	ldr	r3, [r3, #12]
 8012364:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012368:	2b00      	cmp	r3, #0
 801236a:	d1a9      	bne.n	80122c0 <tcp_slowtmr+0x5ac>
    }
  }
}
 801236c:	bf00      	nop
 801236e:	bf00      	nop
 8012370:	3730      	adds	r7, #48	; 0x30
 8012372:	46bd      	mov	sp, r7
 8012374:	bdb0      	pop	{r4, r5, r7, pc}
 8012376:	bf00      	nop
 8012378:	08023464 	.word	0x08023464
 801237c:	080238f4 	.word	0x080238f4
 8012380:	080234a8 	.word	0x080234a8
 8012384:	20008940 	.word	0x20008940
 8012388:	2000894c 	.word	0x2000894c
 801238c:	08023924 	.word	0x08023924
 8012390:	0802394c 	.word	0x0802394c

08012394 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012394:	b580      	push	{r7, lr}
 8012396:	b082      	sub	sp, #8
 8012398:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801239a:	4b2d      	ldr	r3, [pc, #180]	; (8012450 <tcp_fasttmr+0xbc>)
 801239c:	781b      	ldrb	r3, [r3, #0]
 801239e:	3301      	adds	r3, #1
 80123a0:	b2da      	uxtb	r2, r3
 80123a2:	4b2b      	ldr	r3, [pc, #172]	; (8012450 <tcp_fasttmr+0xbc>)
 80123a4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80123a6:	4b2b      	ldr	r3, [pc, #172]	; (8012454 <tcp_fasttmr+0xc0>)
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80123ac:	e048      	b.n	8012440 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	7f9a      	ldrb	r2, [r3, #30]
 80123b2:	4b27      	ldr	r3, [pc, #156]	; (8012450 <tcp_fasttmr+0xbc>)
 80123b4:	781b      	ldrb	r3, [r3, #0]
 80123b6:	429a      	cmp	r2, r3
 80123b8:	d03f      	beq.n	801243a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80123ba:	4b25      	ldr	r3, [pc, #148]	; (8012450 <tcp_fasttmr+0xbc>)
 80123bc:	781a      	ldrb	r2, [r3, #0]
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	8b5b      	ldrh	r3, [r3, #26]
 80123c6:	f003 0301 	and.w	r3, r3, #1
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d010      	beq.n	80123f0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	8b5b      	ldrh	r3, [r3, #26]
 80123d2:	f043 0302 	orr.w	r3, r3, #2
 80123d6:	b29a      	uxth	r2, r3
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	f003 fff1 	bl	80163c4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	8b5b      	ldrh	r3, [r3, #26]
 80123e6:	f023 0303 	bic.w	r3, r3, #3
 80123ea:	b29a      	uxth	r2, r3
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	8b5b      	ldrh	r3, [r3, #26]
 80123f4:	f003 0308 	and.w	r3, r3, #8
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d009      	beq.n	8012410 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	8b5b      	ldrh	r3, [r3, #26]
 8012400:	f023 0308 	bic.w	r3, r3, #8
 8012404:	b29a      	uxth	r2, r3
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801240a:	6878      	ldr	r0, [r7, #4]
 801240c:	f7ff f85a 	bl	80114c4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	68db      	ldr	r3, [r3, #12]
 8012414:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801241a:	2b00      	cmp	r3, #0
 801241c:	d00a      	beq.n	8012434 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801241e:	4b0e      	ldr	r3, [pc, #56]	; (8012458 <tcp_fasttmr+0xc4>)
 8012420:	2200      	movs	r2, #0
 8012422:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012424:	6878      	ldr	r0, [r7, #4]
 8012426:	f000 f819 	bl	801245c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801242a:	4b0b      	ldr	r3, [pc, #44]	; (8012458 <tcp_fasttmr+0xc4>)
 801242c:	781b      	ldrb	r3, [r3, #0]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d000      	beq.n	8012434 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012432:	e7b8      	b.n	80123a6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012434:	683b      	ldr	r3, [r7, #0]
 8012436:	607b      	str	r3, [r7, #4]
 8012438:	e002      	b.n	8012440 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	68db      	ldr	r3, [r3, #12]
 801243e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d1b3      	bne.n	80123ae <tcp_fasttmr+0x1a>
    }
  }
}
 8012446:	bf00      	nop
 8012448:	bf00      	nop
 801244a:	3708      	adds	r7, #8
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}
 8012450:	2000191a 	.word	0x2000191a
 8012454:	2000893c 	.word	0x2000893c
 8012458:	20008938 	.word	0x20008938

0801245c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801245c:	b590      	push	{r4, r7, lr}
 801245e:	b085      	sub	sp, #20
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d109      	bne.n	801247e <tcp_process_refused_data+0x22>
 801246a:	4b37      	ldr	r3, [pc, #220]	; (8012548 <tcp_process_refused_data+0xec>)
 801246c:	f240 6209 	movw	r2, #1545	; 0x609
 8012470:	4936      	ldr	r1, [pc, #216]	; (801254c <tcp_process_refused_data+0xf0>)
 8012472:	4837      	ldr	r0, [pc, #220]	; (8012550 <tcp_process_refused_data+0xf4>)
 8012474:	f00d f9f8 	bl	801f868 <iprintf>
 8012478:	f06f 030f 	mvn.w	r3, #15
 801247c:	e060      	b.n	8012540 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012482:	7b5b      	ldrb	r3, [r3, #13]
 8012484:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801248a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	2200      	movs	r2, #0
 8012490:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012498:	2b00      	cmp	r3, #0
 801249a:	d00b      	beq.n	80124b4 <tcp_process_refused_data+0x58>
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	6918      	ldr	r0, [r3, #16]
 80124a6:	2300      	movs	r3, #0
 80124a8:	68ba      	ldr	r2, [r7, #8]
 80124aa:	6879      	ldr	r1, [r7, #4]
 80124ac:	47a0      	blx	r4
 80124ae:	4603      	mov	r3, r0
 80124b0:	73fb      	strb	r3, [r7, #15]
 80124b2:	e007      	b.n	80124c4 <tcp_process_refused_data+0x68>
 80124b4:	2300      	movs	r3, #0
 80124b6:	68ba      	ldr	r2, [r7, #8]
 80124b8:	6879      	ldr	r1, [r7, #4]
 80124ba:	2000      	movs	r0, #0
 80124bc:	f000 f8a4 	bl	8012608 <tcp_recv_null>
 80124c0:	4603      	mov	r3, r0
 80124c2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80124c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d12a      	bne.n	8012522 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80124cc:	7bbb      	ldrb	r3, [r7, #14]
 80124ce:	f003 0320 	and.w	r3, r3, #32
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d033      	beq.n	801253e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80124da:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80124de:	d005      	beq.n	80124ec <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80124e4:	3301      	adds	r3, #1
 80124e6:	b29a      	uxth	r2, r3
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d00b      	beq.n	801250e <tcp_process_refused_data+0xb2>
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	6918      	ldr	r0, [r3, #16]
 8012500:	2300      	movs	r3, #0
 8012502:	2200      	movs	r2, #0
 8012504:	6879      	ldr	r1, [r7, #4]
 8012506:	47a0      	blx	r4
 8012508:	4603      	mov	r3, r0
 801250a:	73fb      	strb	r3, [r7, #15]
 801250c:	e001      	b.n	8012512 <tcp_process_refused_data+0xb6>
 801250e:	2300      	movs	r3, #0
 8012510:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012516:	f113 0f0d 	cmn.w	r3, #13
 801251a:	d110      	bne.n	801253e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801251c:	f06f 030c 	mvn.w	r3, #12
 8012520:	e00e      	b.n	8012540 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8012522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012526:	f113 0f0d 	cmn.w	r3, #13
 801252a:	d102      	bne.n	8012532 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801252c:	f06f 030c 	mvn.w	r3, #12
 8012530:	e006      	b.n	8012540 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	68ba      	ldr	r2, [r7, #8]
 8012536:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8012538:	f06f 0304 	mvn.w	r3, #4
 801253c:	e000      	b.n	8012540 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801253e:	2300      	movs	r3, #0
}
 8012540:	4618      	mov	r0, r3
 8012542:	3714      	adds	r7, #20
 8012544:	46bd      	mov	sp, r7
 8012546:	bd90      	pop	{r4, r7, pc}
 8012548:	08023464 	.word	0x08023464
 801254c:	08023974 	.word	0x08023974
 8012550:	080234a8 	.word	0x080234a8

08012554 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b084      	sub	sp, #16
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801255c:	e007      	b.n	801256e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012564:	6878      	ldr	r0, [r7, #4]
 8012566:	f000 f80a 	bl	801257e <tcp_seg_free>
    seg = next;
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d1f4      	bne.n	801255e <tcp_segs_free+0xa>
  }
}
 8012574:	bf00      	nop
 8012576:	bf00      	nop
 8012578:	3710      	adds	r7, #16
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}

0801257e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801257e:	b580      	push	{r7, lr}
 8012580:	b082      	sub	sp, #8
 8012582:	af00      	add	r7, sp, #0
 8012584:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d00c      	beq.n	80125a6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	685b      	ldr	r3, [r3, #4]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d004      	beq.n	801259e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	685b      	ldr	r3, [r3, #4]
 8012598:	4618      	mov	r0, r3
 801259a:	f7fe f9e9 	bl	8010970 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801259e:	6879      	ldr	r1, [r7, #4]
 80125a0:	2003      	movs	r0, #3
 80125a2:	f7fd facb 	bl	800fb3c <memp_free>
  }
}
 80125a6:	bf00      	nop
 80125a8:	3708      	adds	r7, #8
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}
	...

080125b0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b084      	sub	sp, #16
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d106      	bne.n	80125cc <tcp_seg_copy+0x1c>
 80125be:	4b0f      	ldr	r3, [pc, #60]	; (80125fc <tcp_seg_copy+0x4c>)
 80125c0:	f240 6282 	movw	r2, #1666	; 0x682
 80125c4:	490e      	ldr	r1, [pc, #56]	; (8012600 <tcp_seg_copy+0x50>)
 80125c6:	480f      	ldr	r0, [pc, #60]	; (8012604 <tcp_seg_copy+0x54>)
 80125c8:	f00d f94e 	bl	801f868 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80125cc:	2003      	movs	r0, #3
 80125ce:	f7fd fa63 	bl	800fa98 <memp_malloc>
 80125d2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d101      	bne.n	80125de <tcp_seg_copy+0x2e>
    return NULL;
 80125da:	2300      	movs	r3, #0
 80125dc:	e00a      	b.n	80125f4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80125de:	2210      	movs	r2, #16
 80125e0:	6879      	ldr	r1, [r7, #4]
 80125e2:	68f8      	ldr	r0, [r7, #12]
 80125e4:	f00c faa2 	bl	801eb2c <memcpy>
  pbuf_ref(cseg->p);
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	685b      	ldr	r3, [r3, #4]
 80125ec:	4618      	mov	r0, r3
 80125ee:	f7fe fa65 	bl	8010abc <pbuf_ref>
  return cseg;
 80125f2:	68fb      	ldr	r3, [r7, #12]
}
 80125f4:	4618      	mov	r0, r3
 80125f6:	3710      	adds	r7, #16
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd80      	pop	{r7, pc}
 80125fc:	08023464 	.word	0x08023464
 8012600:	080239b8 	.word	0x080239b8
 8012604:	080234a8 	.word	0x080234a8

08012608 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b084      	sub	sp, #16
 801260c:	af00      	add	r7, sp, #0
 801260e:	60f8      	str	r0, [r7, #12]
 8012610:	60b9      	str	r1, [r7, #8]
 8012612:	607a      	str	r2, [r7, #4]
 8012614:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8012616:	68bb      	ldr	r3, [r7, #8]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d109      	bne.n	8012630 <tcp_recv_null+0x28>
 801261c:	4b12      	ldr	r3, [pc, #72]	; (8012668 <tcp_recv_null+0x60>)
 801261e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012622:	4912      	ldr	r1, [pc, #72]	; (801266c <tcp_recv_null+0x64>)
 8012624:	4812      	ldr	r0, [pc, #72]	; (8012670 <tcp_recv_null+0x68>)
 8012626:	f00d f91f 	bl	801f868 <iprintf>
 801262a:	f06f 030f 	mvn.w	r3, #15
 801262e:	e016      	b.n	801265e <tcp_recv_null+0x56>

  if (p != NULL) {
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d009      	beq.n	801264a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	891b      	ldrh	r3, [r3, #8]
 801263a:	4619      	mov	r1, r3
 801263c:	68b8      	ldr	r0, [r7, #8]
 801263e:	f7ff fad3 	bl	8011be8 <tcp_recved>
    pbuf_free(p);
 8012642:	6878      	ldr	r0, [r7, #4]
 8012644:	f7fe f994 	bl	8010970 <pbuf_free>
 8012648:	e008      	b.n	801265c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801264a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d104      	bne.n	801265c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012652:	68b8      	ldr	r0, [r7, #8]
 8012654:	f7fe ffa0 	bl	8011598 <tcp_close>
 8012658:	4603      	mov	r3, r0
 801265a:	e000      	b.n	801265e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801265c:	2300      	movs	r3, #0
}
 801265e:	4618      	mov	r0, r3
 8012660:	3710      	adds	r7, #16
 8012662:	46bd      	mov	sp, r7
 8012664:	bd80      	pop	{r7, pc}
 8012666:	bf00      	nop
 8012668:	08023464 	.word	0x08023464
 801266c:	080239d4 	.word	0x080239d4
 8012670:	080234a8 	.word	0x080234a8

08012674 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012674:	b580      	push	{r7, lr}
 8012676:	b086      	sub	sp, #24
 8012678:	af00      	add	r7, sp, #0
 801267a:	4603      	mov	r3, r0
 801267c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012682:	2b00      	cmp	r3, #0
 8012684:	db01      	blt.n	801268a <tcp_kill_prio+0x16>
 8012686:	79fb      	ldrb	r3, [r7, #7]
 8012688:	e000      	b.n	801268c <tcp_kill_prio+0x18>
 801268a:	237f      	movs	r3, #127	; 0x7f
 801268c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801268e:	7afb      	ldrb	r3, [r7, #11]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d034      	beq.n	80126fe <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012694:	7afb      	ldrb	r3, [r7, #11]
 8012696:	3b01      	subs	r3, #1
 8012698:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801269a:	2300      	movs	r3, #0
 801269c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801269e:	2300      	movs	r3, #0
 80126a0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80126a2:	4b19      	ldr	r3, [pc, #100]	; (8012708 <tcp_kill_prio+0x94>)
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	617b      	str	r3, [r7, #20]
 80126a8:	e01f      	b.n	80126ea <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80126aa:	697b      	ldr	r3, [r7, #20]
 80126ac:	7d5b      	ldrb	r3, [r3, #21]
 80126ae:	7afa      	ldrb	r2, [r7, #11]
 80126b0:	429a      	cmp	r2, r3
 80126b2:	d80c      	bhi.n	80126ce <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80126b4:	697b      	ldr	r3, [r7, #20]
 80126b6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80126b8:	7afa      	ldrb	r2, [r7, #11]
 80126ba:	429a      	cmp	r2, r3
 80126bc:	d112      	bne.n	80126e4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80126be:	4b13      	ldr	r3, [pc, #76]	; (801270c <tcp_kill_prio+0x98>)
 80126c0:	681a      	ldr	r2, [r3, #0]
 80126c2:	697b      	ldr	r3, [r7, #20]
 80126c4:	6a1b      	ldr	r3, [r3, #32]
 80126c6:	1ad3      	subs	r3, r2, r3
 80126c8:	68fa      	ldr	r2, [r7, #12]
 80126ca:	429a      	cmp	r2, r3
 80126cc:	d80a      	bhi.n	80126e4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80126ce:	4b0f      	ldr	r3, [pc, #60]	; (801270c <tcp_kill_prio+0x98>)
 80126d0:	681a      	ldr	r2, [r3, #0]
 80126d2:	697b      	ldr	r3, [r7, #20]
 80126d4:	6a1b      	ldr	r3, [r3, #32]
 80126d6:	1ad3      	subs	r3, r2, r3
 80126d8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80126da:	697b      	ldr	r3, [r7, #20]
 80126dc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80126de:	697b      	ldr	r3, [r7, #20]
 80126e0:	7d5b      	ldrb	r3, [r3, #21]
 80126e2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80126e4:	697b      	ldr	r3, [r7, #20]
 80126e6:	68db      	ldr	r3, [r3, #12]
 80126e8:	617b      	str	r3, [r7, #20]
 80126ea:	697b      	ldr	r3, [r7, #20]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d1dc      	bne.n	80126aa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80126f0:	693b      	ldr	r3, [r7, #16]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d004      	beq.n	8012700 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80126f6:	6938      	ldr	r0, [r7, #16]
 80126f8:	f7ff f894 	bl	8011824 <tcp_abort>
 80126fc:	e000      	b.n	8012700 <tcp_kill_prio+0x8c>
    return;
 80126fe:	bf00      	nop
  }
}
 8012700:	3718      	adds	r7, #24
 8012702:	46bd      	mov	sp, r7
 8012704:	bd80      	pop	{r7, pc}
 8012706:	bf00      	nop
 8012708:	2000893c 	.word	0x2000893c
 801270c:	20008940 	.word	0x20008940

08012710 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b086      	sub	sp, #24
 8012714:	af00      	add	r7, sp, #0
 8012716:	4603      	mov	r3, r0
 8012718:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801271a:	79fb      	ldrb	r3, [r7, #7]
 801271c:	2b08      	cmp	r3, #8
 801271e:	d009      	beq.n	8012734 <tcp_kill_state+0x24>
 8012720:	79fb      	ldrb	r3, [r7, #7]
 8012722:	2b09      	cmp	r3, #9
 8012724:	d006      	beq.n	8012734 <tcp_kill_state+0x24>
 8012726:	4b1a      	ldr	r3, [pc, #104]	; (8012790 <tcp_kill_state+0x80>)
 8012728:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801272c:	4919      	ldr	r1, [pc, #100]	; (8012794 <tcp_kill_state+0x84>)
 801272e:	481a      	ldr	r0, [pc, #104]	; (8012798 <tcp_kill_state+0x88>)
 8012730:	f00d f89a 	bl	801f868 <iprintf>

  inactivity = 0;
 8012734:	2300      	movs	r3, #0
 8012736:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012738:	2300      	movs	r3, #0
 801273a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801273c:	4b17      	ldr	r3, [pc, #92]	; (801279c <tcp_kill_state+0x8c>)
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	617b      	str	r3, [r7, #20]
 8012742:	e017      	b.n	8012774 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012744:	697b      	ldr	r3, [r7, #20]
 8012746:	7d1b      	ldrb	r3, [r3, #20]
 8012748:	79fa      	ldrb	r2, [r7, #7]
 801274a:	429a      	cmp	r2, r3
 801274c:	d10f      	bne.n	801276e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801274e:	4b14      	ldr	r3, [pc, #80]	; (80127a0 <tcp_kill_state+0x90>)
 8012750:	681a      	ldr	r2, [r3, #0]
 8012752:	697b      	ldr	r3, [r7, #20]
 8012754:	6a1b      	ldr	r3, [r3, #32]
 8012756:	1ad3      	subs	r3, r2, r3
 8012758:	68fa      	ldr	r2, [r7, #12]
 801275a:	429a      	cmp	r2, r3
 801275c:	d807      	bhi.n	801276e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801275e:	4b10      	ldr	r3, [pc, #64]	; (80127a0 <tcp_kill_state+0x90>)
 8012760:	681a      	ldr	r2, [r3, #0]
 8012762:	697b      	ldr	r3, [r7, #20]
 8012764:	6a1b      	ldr	r3, [r3, #32]
 8012766:	1ad3      	subs	r3, r2, r3
 8012768:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801276a:	697b      	ldr	r3, [r7, #20]
 801276c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801276e:	697b      	ldr	r3, [r7, #20]
 8012770:	68db      	ldr	r3, [r3, #12]
 8012772:	617b      	str	r3, [r7, #20]
 8012774:	697b      	ldr	r3, [r7, #20]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d1e4      	bne.n	8012744 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801277a:	693b      	ldr	r3, [r7, #16]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d003      	beq.n	8012788 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012780:	2100      	movs	r1, #0
 8012782:	6938      	ldr	r0, [r7, #16]
 8012784:	f7fe ff90 	bl	80116a8 <tcp_abandon>
  }
}
 8012788:	bf00      	nop
 801278a:	3718      	adds	r7, #24
 801278c:	46bd      	mov	sp, r7
 801278e:	bd80      	pop	{r7, pc}
 8012790:	08023464 	.word	0x08023464
 8012794:	080239f0 	.word	0x080239f0
 8012798:	080234a8 	.word	0x080234a8
 801279c:	2000893c 	.word	0x2000893c
 80127a0:	20008940 	.word	0x20008940

080127a4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b084      	sub	sp, #16
 80127a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80127aa:	2300      	movs	r3, #0
 80127ac:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80127ae:	2300      	movs	r3, #0
 80127b0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80127b2:	4b12      	ldr	r3, [pc, #72]	; (80127fc <tcp_kill_timewait+0x58>)
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	60fb      	str	r3, [r7, #12]
 80127b8:	e012      	b.n	80127e0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80127ba:	4b11      	ldr	r3, [pc, #68]	; (8012800 <tcp_kill_timewait+0x5c>)
 80127bc:	681a      	ldr	r2, [r3, #0]
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	6a1b      	ldr	r3, [r3, #32]
 80127c2:	1ad3      	subs	r3, r2, r3
 80127c4:	687a      	ldr	r2, [r7, #4]
 80127c6:	429a      	cmp	r2, r3
 80127c8:	d807      	bhi.n	80127da <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80127ca:	4b0d      	ldr	r3, [pc, #52]	; (8012800 <tcp_kill_timewait+0x5c>)
 80127cc:	681a      	ldr	r2, [r3, #0]
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	6a1b      	ldr	r3, [r3, #32]
 80127d2:	1ad3      	subs	r3, r2, r3
 80127d4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	68db      	ldr	r3, [r3, #12]
 80127de:	60fb      	str	r3, [r7, #12]
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d1e9      	bne.n	80127ba <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80127e6:	68bb      	ldr	r3, [r7, #8]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d002      	beq.n	80127f2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80127ec:	68b8      	ldr	r0, [r7, #8]
 80127ee:	f7ff f819 	bl	8011824 <tcp_abort>
  }
}
 80127f2:	bf00      	nop
 80127f4:	3710      	adds	r7, #16
 80127f6:	46bd      	mov	sp, r7
 80127f8:	bd80      	pop	{r7, pc}
 80127fa:	bf00      	nop
 80127fc:	2000894c 	.word	0x2000894c
 8012800:	20008940 	.word	0x20008940

08012804 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012804:	b580      	push	{r7, lr}
 8012806:	b082      	sub	sp, #8
 8012808:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801280a:	4b10      	ldr	r3, [pc, #64]	; (801284c <tcp_handle_closepend+0x48>)
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012810:	e014      	b.n	801283c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	68db      	ldr	r3, [r3, #12]
 8012816:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	8b5b      	ldrh	r3, [r3, #26]
 801281c:	f003 0308 	and.w	r3, r3, #8
 8012820:	2b00      	cmp	r3, #0
 8012822:	d009      	beq.n	8012838 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	8b5b      	ldrh	r3, [r3, #26]
 8012828:	f023 0308 	bic.w	r3, r3, #8
 801282c:	b29a      	uxth	r2, r3
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8012832:	6878      	ldr	r0, [r7, #4]
 8012834:	f7fe fe46 	bl	80114c4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8012838:	683b      	ldr	r3, [r7, #0]
 801283a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d1e7      	bne.n	8012812 <tcp_handle_closepend+0xe>
  }
}
 8012842:	bf00      	nop
 8012844:	bf00      	nop
 8012846:	3708      	adds	r7, #8
 8012848:	46bd      	mov	sp, r7
 801284a:	bd80      	pop	{r7, pc}
 801284c:	2000893c 	.word	0x2000893c

08012850 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012850:	b580      	push	{r7, lr}
 8012852:	b084      	sub	sp, #16
 8012854:	af00      	add	r7, sp, #0
 8012856:	4603      	mov	r3, r0
 8012858:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801285a:	2001      	movs	r0, #1
 801285c:	f7fd f91c 	bl	800fa98 <memp_malloc>
 8012860:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d126      	bne.n	80128b6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8012868:	f7ff ffcc 	bl	8012804 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801286c:	f7ff ff9a 	bl	80127a4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012870:	2001      	movs	r0, #1
 8012872:	f7fd f911 	bl	800fa98 <memp_malloc>
 8012876:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d11b      	bne.n	80128b6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801287e:	2009      	movs	r0, #9
 8012880:	f7ff ff46 	bl	8012710 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012884:	2001      	movs	r0, #1
 8012886:	f7fd f907 	bl	800fa98 <memp_malloc>
 801288a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d111      	bne.n	80128b6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8012892:	2008      	movs	r0, #8
 8012894:	f7ff ff3c 	bl	8012710 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012898:	2001      	movs	r0, #1
 801289a:	f7fd f8fd 	bl	800fa98 <memp_malloc>
 801289e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d107      	bne.n	80128b6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80128a6:	79fb      	ldrb	r3, [r7, #7]
 80128a8:	4618      	mov	r0, r3
 80128aa:	f7ff fee3 	bl	8012674 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80128ae:	2001      	movs	r0, #1
 80128b0:	f7fd f8f2 	bl	800fa98 <memp_malloc>
 80128b4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d03f      	beq.n	801293c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80128bc:	229c      	movs	r2, #156	; 0x9c
 80128be:	2100      	movs	r1, #0
 80128c0:	68f8      	ldr	r0, [r7, #12]
 80128c2:	f00c f95b 	bl	801eb7c <memset>
    pcb->prio = prio;
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	79fa      	ldrb	r2, [r7, #7]
 80128ca:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80128d2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80128dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	22ff      	movs	r2, #255	; 0xff
 80128ea:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	f44f 7206 	mov.w	r2, #536	; 0x218
 80128f2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	2206      	movs	r2, #6
 80128f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	2206      	movs	r2, #6
 8012900:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012908:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	2201      	movs	r2, #1
 801290e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8012912:	4b0d      	ldr	r3, [pc, #52]	; (8012948 <tcp_alloc+0xf8>)
 8012914:	681a      	ldr	r2, [r3, #0]
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801291a:	4b0c      	ldr	r3, [pc, #48]	; (801294c <tcp_alloc+0xfc>)
 801291c:	781a      	ldrb	r2, [r3, #0]
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012928:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	4a08      	ldr	r2, [pc, #32]	; (8012950 <tcp_alloc+0x100>)
 8012930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	4a07      	ldr	r2, [pc, #28]	; (8012954 <tcp_alloc+0x104>)
 8012938:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801293c:	68fb      	ldr	r3, [r7, #12]
}
 801293e:	4618      	mov	r0, r3
 8012940:	3710      	adds	r7, #16
 8012942:	46bd      	mov	sp, r7
 8012944:	bd80      	pop	{r7, pc}
 8012946:	bf00      	nop
 8012948:	20008940 	.word	0x20008940
 801294c:	2000191a 	.word	0x2000191a
 8012950:	08012609 	.word	0x08012609
 8012954:	006ddd00 	.word	0x006ddd00

08012958 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b084      	sub	sp, #16
 801295c:	af00      	add	r7, sp, #0
 801295e:	4603      	mov	r3, r0
 8012960:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8012962:	2040      	movs	r0, #64	; 0x40
 8012964:	f7ff ff74 	bl	8012850 <tcp_alloc>
 8012968:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801296a:	68fb      	ldr	r3, [r7, #12]
}
 801296c:	4618      	mov	r0, r3
 801296e:	3710      	adds	r7, #16
 8012970:	46bd      	mov	sp, r7
 8012972:	bd80      	pop	{r7, pc}

08012974 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8012974:	b480      	push	{r7}
 8012976:	b083      	sub	sp, #12
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
 801297c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d002      	beq.n	801298a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	683a      	ldr	r2, [r7, #0]
 8012988:	611a      	str	r2, [r3, #16]
  }
}
 801298a:	bf00      	nop
 801298c:	370c      	adds	r7, #12
 801298e:	46bd      	mov	sp, r7
 8012990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012994:	4770      	bx	lr
	...

08012998 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b082      	sub	sp, #8
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
 80129a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d00e      	beq.n	80129c6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	7d1b      	ldrb	r3, [r3, #20]
 80129ac:	2b01      	cmp	r3, #1
 80129ae:	d106      	bne.n	80129be <tcp_recv+0x26>
 80129b0:	4b07      	ldr	r3, [pc, #28]	; (80129d0 <tcp_recv+0x38>)
 80129b2:	f240 72df 	movw	r2, #2015	; 0x7df
 80129b6:	4907      	ldr	r1, [pc, #28]	; (80129d4 <tcp_recv+0x3c>)
 80129b8:	4807      	ldr	r0, [pc, #28]	; (80129d8 <tcp_recv+0x40>)
 80129ba:	f00c ff55 	bl	801f868 <iprintf>
    pcb->recv = recv;
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	683a      	ldr	r2, [r7, #0]
 80129c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80129c6:	bf00      	nop
 80129c8:	3708      	adds	r7, #8
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd80      	pop	{r7, pc}
 80129ce:	bf00      	nop
 80129d0:	08023464 	.word	0x08023464
 80129d4:	08023a00 	.word	0x08023a00
 80129d8:	080234a8 	.word	0x080234a8

080129dc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	b082      	sub	sp, #8
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
 80129e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d00e      	beq.n	8012a0a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	7d1b      	ldrb	r3, [r3, #20]
 80129f0:	2b01      	cmp	r3, #1
 80129f2:	d106      	bne.n	8012a02 <tcp_sent+0x26>
 80129f4:	4b07      	ldr	r3, [pc, #28]	; (8012a14 <tcp_sent+0x38>)
 80129f6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80129fa:	4907      	ldr	r1, [pc, #28]	; (8012a18 <tcp_sent+0x3c>)
 80129fc:	4807      	ldr	r0, [pc, #28]	; (8012a1c <tcp_sent+0x40>)
 80129fe:	f00c ff33 	bl	801f868 <iprintf>
    pcb->sent = sent;
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	683a      	ldr	r2, [r7, #0]
 8012a06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8012a0a:	bf00      	nop
 8012a0c:	3708      	adds	r7, #8
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}
 8012a12:	bf00      	nop
 8012a14:	08023464 	.word	0x08023464
 8012a18:	08023a28 	.word	0x08023a28
 8012a1c:	080234a8 	.word	0x080234a8

08012a20 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b082      	sub	sp, #8
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
 8012a28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d00e      	beq.n	8012a4e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	7d1b      	ldrb	r3, [r3, #20]
 8012a34:	2b01      	cmp	r3, #1
 8012a36:	d106      	bne.n	8012a46 <tcp_err+0x26>
 8012a38:	4b07      	ldr	r3, [pc, #28]	; (8012a58 <tcp_err+0x38>)
 8012a3a:	f640 020d 	movw	r2, #2061	; 0x80d
 8012a3e:	4907      	ldr	r1, [pc, #28]	; (8012a5c <tcp_err+0x3c>)
 8012a40:	4807      	ldr	r0, [pc, #28]	; (8012a60 <tcp_err+0x40>)
 8012a42:	f00c ff11 	bl	801f868 <iprintf>
    pcb->errf = err;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	683a      	ldr	r2, [r7, #0]
 8012a4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8012a4e:	bf00      	nop
 8012a50:	3708      	adds	r7, #8
 8012a52:	46bd      	mov	sp, r7
 8012a54:	bd80      	pop	{r7, pc}
 8012a56:	bf00      	nop
 8012a58:	08023464 	.word	0x08023464
 8012a5c:	08023a50 	.word	0x08023a50
 8012a60:	080234a8 	.word	0x080234a8

08012a64 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8012a64:	b480      	push	{r7}
 8012a66:	b085      	sub	sp, #20
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	6078      	str	r0, [r7, #4]
 8012a6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d008      	beq.n	8012a86 <tcp_accept+0x22>
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	7d1b      	ldrb	r3, [r3, #20]
 8012a78:	2b01      	cmp	r3, #1
 8012a7a:	d104      	bne.n	8012a86 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	683a      	ldr	r2, [r7, #0]
 8012a84:	619a      	str	r2, [r3, #24]
  }
}
 8012a86:	bf00      	nop
 8012a88:	3714      	adds	r7, #20
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a90:	4770      	bx	lr
	...

08012a94 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b084      	sub	sp, #16
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	60f8      	str	r0, [r7, #12]
 8012a9c:	60b9      	str	r1, [r7, #8]
 8012a9e:	4613      	mov	r3, r2
 8012aa0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d107      	bne.n	8012ab8 <tcp_poll+0x24>
 8012aa8:	4b0e      	ldr	r3, [pc, #56]	; (8012ae4 <tcp_poll+0x50>)
 8012aaa:	f640 023d 	movw	r2, #2109	; 0x83d
 8012aae:	490e      	ldr	r1, [pc, #56]	; (8012ae8 <tcp_poll+0x54>)
 8012ab0:	480e      	ldr	r0, [pc, #56]	; (8012aec <tcp_poll+0x58>)
 8012ab2:	f00c fed9 	bl	801f868 <iprintf>
 8012ab6:	e011      	b.n	8012adc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	7d1b      	ldrb	r3, [r3, #20]
 8012abc:	2b01      	cmp	r3, #1
 8012abe:	d106      	bne.n	8012ace <tcp_poll+0x3a>
 8012ac0:	4b08      	ldr	r3, [pc, #32]	; (8012ae4 <tcp_poll+0x50>)
 8012ac2:	f640 023e 	movw	r2, #2110	; 0x83e
 8012ac6:	490a      	ldr	r1, [pc, #40]	; (8012af0 <tcp_poll+0x5c>)
 8012ac8:	4808      	ldr	r0, [pc, #32]	; (8012aec <tcp_poll+0x58>)
 8012aca:	f00c fecd 	bl	801f868 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	68ba      	ldr	r2, [r7, #8]
 8012ad2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	79fa      	ldrb	r2, [r7, #7]
 8012ada:	775a      	strb	r2, [r3, #29]
}
 8012adc:	3710      	adds	r7, #16
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bd80      	pop	{r7, pc}
 8012ae2:	bf00      	nop
 8012ae4:	08023464 	.word	0x08023464
 8012ae8:	08023a78 	.word	0x08023a78
 8012aec:	080234a8 	.word	0x080234a8
 8012af0:	08023a90 	.word	0x08023a90

08012af4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b082      	sub	sp, #8
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d107      	bne.n	8012b12 <tcp_pcb_purge+0x1e>
 8012b02:	4b21      	ldr	r3, [pc, #132]	; (8012b88 <tcp_pcb_purge+0x94>)
 8012b04:	f640 0251 	movw	r2, #2129	; 0x851
 8012b08:	4920      	ldr	r1, [pc, #128]	; (8012b8c <tcp_pcb_purge+0x98>)
 8012b0a:	4821      	ldr	r0, [pc, #132]	; (8012b90 <tcp_pcb_purge+0x9c>)
 8012b0c:	f00c feac 	bl	801f868 <iprintf>
 8012b10:	e037      	b.n	8012b82 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	7d1b      	ldrb	r3, [r3, #20]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d033      	beq.n	8012b82 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8012b1e:	2b0a      	cmp	r3, #10
 8012b20:	d02f      	beq.n	8012b82 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8012b26:	2b01      	cmp	r3, #1
 8012b28:	d02b      	beq.n	8012b82 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d007      	beq.n	8012b42 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012b36:	4618      	mov	r0, r3
 8012b38:	f7fd ff1a 	bl	8010970 <pbuf_free>
      pcb->refused_data = NULL;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	2200      	movs	r2, #0
 8012b40:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d002      	beq.n	8012b50 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8012b4a:	6878      	ldr	r0, [r7, #4]
 8012b4c:	f000 f986 	bl	8012e5c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b56:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	f7ff fcf9 	bl	8012554 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b66:	4618      	mov	r0, r3
 8012b68:	f7ff fcf4 	bl	8012554 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	2200      	movs	r2, #0
 8012b70:	66da      	str	r2, [r3, #108]	; 0x6c
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8012b82:	3708      	adds	r7, #8
 8012b84:	46bd      	mov	sp, r7
 8012b86:	bd80      	pop	{r7, pc}
 8012b88:	08023464 	.word	0x08023464
 8012b8c:	08023ab0 	.word	0x08023ab0
 8012b90:	080234a8 	.word	0x080234a8

08012b94 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b084      	sub	sp, #16
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
 8012b9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8012b9e:	683b      	ldr	r3, [r7, #0]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d106      	bne.n	8012bb2 <tcp_pcb_remove+0x1e>
 8012ba4:	4b3e      	ldr	r3, [pc, #248]	; (8012ca0 <tcp_pcb_remove+0x10c>)
 8012ba6:	f640 0283 	movw	r2, #2179	; 0x883
 8012baa:	493e      	ldr	r1, [pc, #248]	; (8012ca4 <tcp_pcb_remove+0x110>)
 8012bac:	483e      	ldr	r0, [pc, #248]	; (8012ca8 <tcp_pcb_remove+0x114>)
 8012bae:	f00c fe5b 	bl	801f868 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d106      	bne.n	8012bc6 <tcp_pcb_remove+0x32>
 8012bb8:	4b39      	ldr	r3, [pc, #228]	; (8012ca0 <tcp_pcb_remove+0x10c>)
 8012bba:	f640 0284 	movw	r2, #2180	; 0x884
 8012bbe:	493b      	ldr	r1, [pc, #236]	; (8012cac <tcp_pcb_remove+0x118>)
 8012bc0:	4839      	ldr	r0, [pc, #228]	; (8012ca8 <tcp_pcb_remove+0x114>)
 8012bc2:	f00c fe51 	bl	801f868 <iprintf>

  TCP_RMV(pcblist, pcb);
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	683a      	ldr	r2, [r7, #0]
 8012bcc:	429a      	cmp	r2, r3
 8012bce:	d105      	bne.n	8012bdc <tcp_pcb_remove+0x48>
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	68da      	ldr	r2, [r3, #12]
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	601a      	str	r2, [r3, #0]
 8012bda:	e013      	b.n	8012c04 <tcp_pcb_remove+0x70>
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	60fb      	str	r3, [r7, #12]
 8012be2:	e00c      	b.n	8012bfe <tcp_pcb_remove+0x6a>
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	68db      	ldr	r3, [r3, #12]
 8012be8:	683a      	ldr	r2, [r7, #0]
 8012bea:	429a      	cmp	r2, r3
 8012bec:	d104      	bne.n	8012bf8 <tcp_pcb_remove+0x64>
 8012bee:	683b      	ldr	r3, [r7, #0]
 8012bf0:	68da      	ldr	r2, [r3, #12]
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	60da      	str	r2, [r3, #12]
 8012bf6:	e005      	b.n	8012c04 <tcp_pcb_remove+0x70>
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	68db      	ldr	r3, [r3, #12]
 8012bfc:	60fb      	str	r3, [r7, #12]
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d1ef      	bne.n	8012be4 <tcp_pcb_remove+0x50>
 8012c04:	683b      	ldr	r3, [r7, #0]
 8012c06:	2200      	movs	r2, #0
 8012c08:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8012c0a:	6838      	ldr	r0, [r7, #0]
 8012c0c:	f7ff ff72 	bl	8012af4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8012c10:	683b      	ldr	r3, [r7, #0]
 8012c12:	7d1b      	ldrb	r3, [r3, #20]
 8012c14:	2b0a      	cmp	r3, #10
 8012c16:	d013      	beq.n	8012c40 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8012c18:	683b      	ldr	r3, [r7, #0]
 8012c1a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8012c1c:	2b01      	cmp	r3, #1
 8012c1e:	d00f      	beq.n	8012c40 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8012c20:	683b      	ldr	r3, [r7, #0]
 8012c22:	8b5b      	ldrh	r3, [r3, #26]
 8012c24:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d009      	beq.n	8012c40 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8012c2c:	683b      	ldr	r3, [r7, #0]
 8012c2e:	8b5b      	ldrh	r3, [r3, #26]
 8012c30:	f043 0302 	orr.w	r3, r3, #2
 8012c34:	b29a      	uxth	r2, r3
 8012c36:	683b      	ldr	r3, [r7, #0]
 8012c38:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012c3a:	6838      	ldr	r0, [r7, #0]
 8012c3c:	f003 fbc2 	bl	80163c4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012c40:	683b      	ldr	r3, [r7, #0]
 8012c42:	7d1b      	ldrb	r3, [r3, #20]
 8012c44:	2b01      	cmp	r3, #1
 8012c46:	d020      	beq.n	8012c8a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d006      	beq.n	8012c5e <tcp_pcb_remove+0xca>
 8012c50:	4b13      	ldr	r3, [pc, #76]	; (8012ca0 <tcp_pcb_remove+0x10c>)
 8012c52:	f640 0293 	movw	r2, #2195	; 0x893
 8012c56:	4916      	ldr	r1, [pc, #88]	; (8012cb0 <tcp_pcb_remove+0x11c>)
 8012c58:	4813      	ldr	r0, [pc, #76]	; (8012ca8 <tcp_pcb_remove+0x114>)
 8012c5a:	f00c fe05 	bl	801f868 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8012c5e:	683b      	ldr	r3, [r7, #0]
 8012c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d006      	beq.n	8012c74 <tcp_pcb_remove+0xe0>
 8012c66:	4b0e      	ldr	r3, [pc, #56]	; (8012ca0 <tcp_pcb_remove+0x10c>)
 8012c68:	f640 0294 	movw	r2, #2196	; 0x894
 8012c6c:	4911      	ldr	r1, [pc, #68]	; (8012cb4 <tcp_pcb_remove+0x120>)
 8012c6e:	480e      	ldr	r0, [pc, #56]	; (8012ca8 <tcp_pcb_remove+0x114>)
 8012c70:	f00c fdfa 	bl	801f868 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d006      	beq.n	8012c8a <tcp_pcb_remove+0xf6>
 8012c7c:	4b08      	ldr	r3, [pc, #32]	; (8012ca0 <tcp_pcb_remove+0x10c>)
 8012c7e:	f640 0296 	movw	r2, #2198	; 0x896
 8012c82:	490d      	ldr	r1, [pc, #52]	; (8012cb8 <tcp_pcb_remove+0x124>)
 8012c84:	4808      	ldr	r0, [pc, #32]	; (8012ca8 <tcp_pcb_remove+0x114>)
 8012c86:	f00c fdef 	bl	801f868 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8012c8a:	683b      	ldr	r3, [r7, #0]
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012c90:	683b      	ldr	r3, [r7, #0]
 8012c92:	2200      	movs	r2, #0
 8012c94:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8012c96:	bf00      	nop
 8012c98:	3710      	adds	r7, #16
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	bd80      	pop	{r7, pc}
 8012c9e:	bf00      	nop
 8012ca0:	08023464 	.word	0x08023464
 8012ca4:	08023acc 	.word	0x08023acc
 8012ca8:	080234a8 	.word	0x080234a8
 8012cac:	08023ae8 	.word	0x08023ae8
 8012cb0:	08023b08 	.word	0x08023b08
 8012cb4:	08023b20 	.word	0x08023b20
 8012cb8:	08023b3c 	.word	0x08023b3c

08012cbc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b082      	sub	sp, #8
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d106      	bne.n	8012cd8 <tcp_next_iss+0x1c>
 8012cca:	4b0a      	ldr	r3, [pc, #40]	; (8012cf4 <tcp_next_iss+0x38>)
 8012ccc:	f640 02af 	movw	r2, #2223	; 0x8af
 8012cd0:	4909      	ldr	r1, [pc, #36]	; (8012cf8 <tcp_next_iss+0x3c>)
 8012cd2:	480a      	ldr	r0, [pc, #40]	; (8012cfc <tcp_next_iss+0x40>)
 8012cd4:	f00c fdc8 	bl	801f868 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8012cd8:	4b09      	ldr	r3, [pc, #36]	; (8012d00 <tcp_next_iss+0x44>)
 8012cda:	681a      	ldr	r2, [r3, #0]
 8012cdc:	4b09      	ldr	r3, [pc, #36]	; (8012d04 <tcp_next_iss+0x48>)
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	4413      	add	r3, r2
 8012ce2:	4a07      	ldr	r2, [pc, #28]	; (8012d00 <tcp_next_iss+0x44>)
 8012ce4:	6013      	str	r3, [r2, #0]
  return iss;
 8012ce6:	4b06      	ldr	r3, [pc, #24]	; (8012d00 <tcp_next_iss+0x44>)
 8012ce8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8012cea:	4618      	mov	r0, r3
 8012cec:	3708      	adds	r7, #8
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bd80      	pop	{r7, pc}
 8012cf2:	bf00      	nop
 8012cf4:	08023464 	.word	0x08023464
 8012cf8:	08023b54 	.word	0x08023b54
 8012cfc:	080234a8 	.word	0x080234a8
 8012d00:	10000014 	.word	0x10000014
 8012d04:	20008940 	.word	0x20008940

08012d08 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b086      	sub	sp, #24
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	4603      	mov	r3, r0
 8012d10:	60b9      	str	r1, [r7, #8]
 8012d12:	607a      	str	r2, [r7, #4]
 8012d14:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d106      	bne.n	8012d2a <tcp_eff_send_mss_netif+0x22>
 8012d1c:	4b14      	ldr	r3, [pc, #80]	; (8012d70 <tcp_eff_send_mss_netif+0x68>)
 8012d1e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8012d22:	4914      	ldr	r1, [pc, #80]	; (8012d74 <tcp_eff_send_mss_netif+0x6c>)
 8012d24:	4814      	ldr	r0, [pc, #80]	; (8012d78 <tcp_eff_send_mss_netif+0x70>)
 8012d26:	f00c fd9f 	bl	801f868 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8012d2a:	68bb      	ldr	r3, [r7, #8]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d101      	bne.n	8012d34 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8012d30:	89fb      	ldrh	r3, [r7, #14]
 8012d32:	e019      	b.n	8012d68 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8012d34:	68bb      	ldr	r3, [r7, #8]
 8012d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d38:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8012d3a:	8afb      	ldrh	r3, [r7, #22]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d012      	beq.n	8012d66 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012d40:	2328      	movs	r3, #40	; 0x28
 8012d42:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8012d44:	8afa      	ldrh	r2, [r7, #22]
 8012d46:	8abb      	ldrh	r3, [r7, #20]
 8012d48:	429a      	cmp	r2, r3
 8012d4a:	d904      	bls.n	8012d56 <tcp_eff_send_mss_netif+0x4e>
 8012d4c:	8afa      	ldrh	r2, [r7, #22]
 8012d4e:	8abb      	ldrh	r3, [r7, #20]
 8012d50:	1ad3      	subs	r3, r2, r3
 8012d52:	b29b      	uxth	r3, r3
 8012d54:	e000      	b.n	8012d58 <tcp_eff_send_mss_netif+0x50>
 8012d56:	2300      	movs	r3, #0
 8012d58:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8012d5a:	8a7a      	ldrh	r2, [r7, #18]
 8012d5c:	89fb      	ldrh	r3, [r7, #14]
 8012d5e:	4293      	cmp	r3, r2
 8012d60:	bf28      	it	cs
 8012d62:	4613      	movcs	r3, r2
 8012d64:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8012d66:	89fb      	ldrh	r3, [r7, #14]
}
 8012d68:	4618      	mov	r0, r3
 8012d6a:	3718      	adds	r7, #24
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	bd80      	pop	{r7, pc}
 8012d70:	08023464 	.word	0x08023464
 8012d74:	08023b70 	.word	0x08023b70
 8012d78:	080234a8 	.word	0x080234a8

08012d7c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b084      	sub	sp, #16
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]
 8012d84:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8012d86:	683b      	ldr	r3, [r7, #0]
 8012d88:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d119      	bne.n	8012dc4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012d90:	4b10      	ldr	r3, [pc, #64]	; (8012dd4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8012d92:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8012d96:	4910      	ldr	r1, [pc, #64]	; (8012dd8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8012d98:	4810      	ldr	r0, [pc, #64]	; (8012ddc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8012d9a:	f00c fd65 	bl	801f868 <iprintf>

  while (pcb != NULL) {
 8012d9e:	e011      	b.n	8012dc4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	681a      	ldr	r2, [r3, #0]
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	429a      	cmp	r2, r3
 8012daa:	d108      	bne.n	8012dbe <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	68db      	ldr	r3, [r3, #12]
 8012db0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8012db2:	68f8      	ldr	r0, [r7, #12]
 8012db4:	f7fe fd36 	bl	8011824 <tcp_abort>
      pcb = next;
 8012db8:	68bb      	ldr	r3, [r7, #8]
 8012dba:	60fb      	str	r3, [r7, #12]
 8012dbc:	e002      	b.n	8012dc4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	68db      	ldr	r3, [r3, #12]
 8012dc2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d1ea      	bne.n	8012da0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8012dca:	bf00      	nop
 8012dcc:	bf00      	nop
 8012dce:	3710      	adds	r7, #16
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	bd80      	pop	{r7, pc}
 8012dd4:	08023464 	.word	0x08023464
 8012dd8:	08023b98 	.word	0x08023b98
 8012ddc:	080234a8 	.word	0x080234a8

08012de0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b084      	sub	sp, #16
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
 8012de8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d02a      	beq.n	8012e46 <tcp_netif_ip_addr_changed+0x66>
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d026      	beq.n	8012e46 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8012df8:	4b15      	ldr	r3, [pc, #84]	; (8012e50 <tcp_netif_ip_addr_changed+0x70>)
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	4619      	mov	r1, r3
 8012dfe:	6878      	ldr	r0, [r7, #4]
 8012e00:	f7ff ffbc 	bl	8012d7c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012e04:	4b13      	ldr	r3, [pc, #76]	; (8012e54 <tcp_netif_ip_addr_changed+0x74>)
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	4619      	mov	r1, r3
 8012e0a:	6878      	ldr	r0, [r7, #4]
 8012e0c:	f7ff ffb6 	bl	8012d7c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012e10:	683b      	ldr	r3, [r7, #0]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d017      	beq.n	8012e46 <tcp_netif_ip_addr_changed+0x66>
 8012e16:	683b      	ldr	r3, [r7, #0]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d013      	beq.n	8012e46 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012e1e:	4b0e      	ldr	r3, [pc, #56]	; (8012e58 <tcp_netif_ip_addr_changed+0x78>)
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	60fb      	str	r3, [r7, #12]
 8012e24:	e00c      	b.n	8012e40 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	681a      	ldr	r2, [r3, #0]
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	429a      	cmp	r2, r3
 8012e30:	d103      	bne.n	8012e3a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	681a      	ldr	r2, [r3, #0]
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	68db      	ldr	r3, [r3, #12]
 8012e3e:	60fb      	str	r3, [r7, #12]
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d1ef      	bne.n	8012e26 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8012e46:	bf00      	nop
 8012e48:	3710      	adds	r7, #16
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	bd80      	pop	{r7, pc}
 8012e4e:	bf00      	nop
 8012e50:	2000893c 	.word	0x2000893c
 8012e54:	20008948 	.word	0x20008948
 8012e58:	20008944 	.word	0x20008944

08012e5c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b082      	sub	sp, #8
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d007      	beq.n	8012e7c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e70:	4618      	mov	r0, r3
 8012e72:	f7ff fb6f 	bl	8012554 <tcp_segs_free>
    pcb->ooseq = NULL;
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	2200      	movs	r2, #0
 8012e7a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012e7c:	bf00      	nop
 8012e7e:	3708      	adds	r7, #8
 8012e80:	46bd      	mov	sp, r7
 8012e82:	bd80      	pop	{r7, pc}

08012e84 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012e84:	b590      	push	{r4, r7, lr}
 8012e86:	b08d      	sub	sp, #52	; 0x34
 8012e88:	af04      	add	r7, sp, #16
 8012e8a:	6078      	str	r0, [r7, #4]
 8012e8c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d105      	bne.n	8012ea0 <tcp_input+0x1c>
 8012e94:	4b9b      	ldr	r3, [pc, #620]	; (8013104 <tcp_input+0x280>)
 8012e96:	2283      	movs	r2, #131	; 0x83
 8012e98:	499b      	ldr	r1, [pc, #620]	; (8013108 <tcp_input+0x284>)
 8012e9a:	489c      	ldr	r0, [pc, #624]	; (801310c <tcp_input+0x288>)
 8012e9c:	f00c fce4 	bl	801f868 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	685b      	ldr	r3, [r3, #4]
 8012ea4:	4a9a      	ldr	r2, [pc, #616]	; (8013110 <tcp_input+0x28c>)
 8012ea6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	895b      	ldrh	r3, [r3, #10]
 8012eac:	2b13      	cmp	r3, #19
 8012eae:	f240 83c4 	bls.w	801363a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012eb2:	4b98      	ldr	r3, [pc, #608]	; (8013114 <tcp_input+0x290>)
 8012eb4:	695b      	ldr	r3, [r3, #20]
 8012eb6:	4a97      	ldr	r2, [pc, #604]	; (8013114 <tcp_input+0x290>)
 8012eb8:	6812      	ldr	r2, [r2, #0]
 8012eba:	4611      	mov	r1, r2
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	f008 fb57 	bl	801b570 <ip4_addr_isbroadcast_u32>
 8012ec2:	4603      	mov	r3, r0
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	f040 83ba 	bne.w	801363e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012eca:	4b92      	ldr	r3, [pc, #584]	; (8013114 <tcp_input+0x290>)
 8012ecc:	695b      	ldr	r3, [r3, #20]
 8012ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012ed2:	2be0      	cmp	r3, #224	; 0xe0
 8012ed4:	f000 83b3 	beq.w	801363e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8012ed8:	4b8d      	ldr	r3, [pc, #564]	; (8013110 <tcp_input+0x28c>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	899b      	ldrh	r3, [r3, #12]
 8012ede:	b29b      	uxth	r3, r3
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	f7fb fe35 	bl	800eb50 <lwip_htons>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	0b1b      	lsrs	r3, r3, #12
 8012eea:	b29b      	uxth	r3, r3
 8012eec:	b2db      	uxtb	r3, r3
 8012eee:	009b      	lsls	r3, r3, #2
 8012ef0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012ef2:	7cbb      	ldrb	r3, [r7, #18]
 8012ef4:	2b13      	cmp	r3, #19
 8012ef6:	f240 83a4 	bls.w	8013642 <tcp_input+0x7be>
 8012efa:	7cbb      	ldrb	r3, [r7, #18]
 8012efc:	b29a      	uxth	r2, r3
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	891b      	ldrh	r3, [r3, #8]
 8012f02:	429a      	cmp	r2, r3
 8012f04:	f200 839d 	bhi.w	8013642 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012f08:	7cbb      	ldrb	r3, [r7, #18]
 8012f0a:	b29b      	uxth	r3, r3
 8012f0c:	3b14      	subs	r3, #20
 8012f0e:	b29a      	uxth	r2, r3
 8012f10:	4b81      	ldr	r3, [pc, #516]	; (8013118 <tcp_input+0x294>)
 8012f12:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012f14:	4b81      	ldr	r3, [pc, #516]	; (801311c <tcp_input+0x298>)
 8012f16:	2200      	movs	r2, #0
 8012f18:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	895a      	ldrh	r2, [r3, #10]
 8012f1e:	7cbb      	ldrb	r3, [r7, #18]
 8012f20:	b29b      	uxth	r3, r3
 8012f22:	429a      	cmp	r2, r3
 8012f24:	d309      	bcc.n	8012f3a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8012f26:	4b7c      	ldr	r3, [pc, #496]	; (8013118 <tcp_input+0x294>)
 8012f28:	881a      	ldrh	r2, [r3, #0]
 8012f2a:	4b7d      	ldr	r3, [pc, #500]	; (8013120 <tcp_input+0x29c>)
 8012f2c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012f2e:	7cbb      	ldrb	r3, [r7, #18]
 8012f30:	4619      	mov	r1, r3
 8012f32:	6878      	ldr	r0, [r7, #4]
 8012f34:	f7fd fc64 	bl	8010800 <pbuf_remove_header>
 8012f38:	e04e      	b.n	8012fd8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d105      	bne.n	8012f4e <tcp_input+0xca>
 8012f42:	4b70      	ldr	r3, [pc, #448]	; (8013104 <tcp_input+0x280>)
 8012f44:	22c2      	movs	r2, #194	; 0xc2
 8012f46:	4977      	ldr	r1, [pc, #476]	; (8013124 <tcp_input+0x2a0>)
 8012f48:	4870      	ldr	r0, [pc, #448]	; (801310c <tcp_input+0x288>)
 8012f4a:	f00c fc8d 	bl	801f868 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012f4e:	2114      	movs	r1, #20
 8012f50:	6878      	ldr	r0, [r7, #4]
 8012f52:	f7fd fc55 	bl	8010800 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	895a      	ldrh	r2, [r3, #10]
 8012f5a:	4b71      	ldr	r3, [pc, #452]	; (8013120 <tcp_input+0x29c>)
 8012f5c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012f5e:	4b6e      	ldr	r3, [pc, #440]	; (8013118 <tcp_input+0x294>)
 8012f60:	881a      	ldrh	r2, [r3, #0]
 8012f62:	4b6f      	ldr	r3, [pc, #444]	; (8013120 <tcp_input+0x29c>)
 8012f64:	881b      	ldrh	r3, [r3, #0]
 8012f66:	1ad3      	subs	r3, r2, r3
 8012f68:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012f6a:	4b6d      	ldr	r3, [pc, #436]	; (8013120 <tcp_input+0x29c>)
 8012f6c:	881b      	ldrh	r3, [r3, #0]
 8012f6e:	4619      	mov	r1, r3
 8012f70:	6878      	ldr	r0, [r7, #4]
 8012f72:	f7fd fc45 	bl	8010800 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	895b      	ldrh	r3, [r3, #10]
 8012f7c:	8a3a      	ldrh	r2, [r7, #16]
 8012f7e:	429a      	cmp	r2, r3
 8012f80:	f200 8361 	bhi.w	8013646 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	685b      	ldr	r3, [r3, #4]
 8012f8a:	4a64      	ldr	r2, [pc, #400]	; (801311c <tcp_input+0x298>)
 8012f8c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	8a3a      	ldrh	r2, [r7, #16]
 8012f94:	4611      	mov	r1, r2
 8012f96:	4618      	mov	r0, r3
 8012f98:	f7fd fc32 	bl	8010800 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	891a      	ldrh	r2, [r3, #8]
 8012fa0:	8a3b      	ldrh	r3, [r7, #16]
 8012fa2:	1ad3      	subs	r3, r2, r3
 8012fa4:	b29a      	uxth	r2, r3
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	895b      	ldrh	r3, [r3, #10]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d005      	beq.n	8012fbe <tcp_input+0x13a>
 8012fb2:	4b54      	ldr	r3, [pc, #336]	; (8013104 <tcp_input+0x280>)
 8012fb4:	22df      	movs	r2, #223	; 0xdf
 8012fb6:	495c      	ldr	r1, [pc, #368]	; (8013128 <tcp_input+0x2a4>)
 8012fb8:	4854      	ldr	r0, [pc, #336]	; (801310c <tcp_input+0x288>)
 8012fba:	f00c fc55 	bl	801f868 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	891a      	ldrh	r2, [r3, #8]
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	891b      	ldrh	r3, [r3, #8]
 8012fc8:	429a      	cmp	r2, r3
 8012fca:	d005      	beq.n	8012fd8 <tcp_input+0x154>
 8012fcc:	4b4d      	ldr	r3, [pc, #308]	; (8013104 <tcp_input+0x280>)
 8012fce:	22e0      	movs	r2, #224	; 0xe0
 8012fd0:	4956      	ldr	r1, [pc, #344]	; (801312c <tcp_input+0x2a8>)
 8012fd2:	484e      	ldr	r0, [pc, #312]	; (801310c <tcp_input+0x288>)
 8012fd4:	f00c fc48 	bl	801f868 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012fd8:	4b4d      	ldr	r3, [pc, #308]	; (8013110 <tcp_input+0x28c>)
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	881b      	ldrh	r3, [r3, #0]
 8012fde:	b29b      	uxth	r3, r3
 8012fe0:	4a4b      	ldr	r2, [pc, #300]	; (8013110 <tcp_input+0x28c>)
 8012fe2:	6814      	ldr	r4, [r2, #0]
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f7fb fdb3 	bl	800eb50 <lwip_htons>
 8012fea:	4603      	mov	r3, r0
 8012fec:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012fee:	4b48      	ldr	r3, [pc, #288]	; (8013110 <tcp_input+0x28c>)
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	885b      	ldrh	r3, [r3, #2]
 8012ff4:	b29b      	uxth	r3, r3
 8012ff6:	4a46      	ldr	r2, [pc, #280]	; (8013110 <tcp_input+0x28c>)
 8012ff8:	6814      	ldr	r4, [r2, #0]
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	f7fb fda8 	bl	800eb50 <lwip_htons>
 8013000:	4603      	mov	r3, r0
 8013002:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8013004:	4b42      	ldr	r3, [pc, #264]	; (8013110 <tcp_input+0x28c>)
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	685b      	ldr	r3, [r3, #4]
 801300a:	4a41      	ldr	r2, [pc, #260]	; (8013110 <tcp_input+0x28c>)
 801300c:	6814      	ldr	r4, [r2, #0]
 801300e:	4618      	mov	r0, r3
 8013010:	f7fb fdb3 	bl	800eb7a <lwip_htonl>
 8013014:	4603      	mov	r3, r0
 8013016:	6063      	str	r3, [r4, #4]
 8013018:	6863      	ldr	r3, [r4, #4]
 801301a:	4a45      	ldr	r2, [pc, #276]	; (8013130 <tcp_input+0x2ac>)
 801301c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801301e:	4b3c      	ldr	r3, [pc, #240]	; (8013110 <tcp_input+0x28c>)
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	689b      	ldr	r3, [r3, #8]
 8013024:	4a3a      	ldr	r2, [pc, #232]	; (8013110 <tcp_input+0x28c>)
 8013026:	6814      	ldr	r4, [r2, #0]
 8013028:	4618      	mov	r0, r3
 801302a:	f7fb fda6 	bl	800eb7a <lwip_htonl>
 801302e:	4603      	mov	r3, r0
 8013030:	60a3      	str	r3, [r4, #8]
 8013032:	68a3      	ldr	r3, [r4, #8]
 8013034:	4a3f      	ldr	r2, [pc, #252]	; (8013134 <tcp_input+0x2b0>)
 8013036:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8013038:	4b35      	ldr	r3, [pc, #212]	; (8013110 <tcp_input+0x28c>)
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	89db      	ldrh	r3, [r3, #14]
 801303e:	b29b      	uxth	r3, r3
 8013040:	4a33      	ldr	r2, [pc, #204]	; (8013110 <tcp_input+0x28c>)
 8013042:	6814      	ldr	r4, [r2, #0]
 8013044:	4618      	mov	r0, r3
 8013046:	f7fb fd83 	bl	800eb50 <lwip_htons>
 801304a:	4603      	mov	r3, r0
 801304c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801304e:	4b30      	ldr	r3, [pc, #192]	; (8013110 <tcp_input+0x28c>)
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	899b      	ldrh	r3, [r3, #12]
 8013054:	b29b      	uxth	r3, r3
 8013056:	4618      	mov	r0, r3
 8013058:	f7fb fd7a 	bl	800eb50 <lwip_htons>
 801305c:	4603      	mov	r3, r0
 801305e:	b2db      	uxtb	r3, r3
 8013060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013064:	b2da      	uxtb	r2, r3
 8013066:	4b34      	ldr	r3, [pc, #208]	; (8013138 <tcp_input+0x2b4>)
 8013068:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	891a      	ldrh	r2, [r3, #8]
 801306e:	4b33      	ldr	r3, [pc, #204]	; (801313c <tcp_input+0x2b8>)
 8013070:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8013072:	4b31      	ldr	r3, [pc, #196]	; (8013138 <tcp_input+0x2b4>)
 8013074:	781b      	ldrb	r3, [r3, #0]
 8013076:	f003 0303 	and.w	r3, r3, #3
 801307a:	2b00      	cmp	r3, #0
 801307c:	d00c      	beq.n	8013098 <tcp_input+0x214>
    tcplen++;
 801307e:	4b2f      	ldr	r3, [pc, #188]	; (801313c <tcp_input+0x2b8>)
 8013080:	881b      	ldrh	r3, [r3, #0]
 8013082:	3301      	adds	r3, #1
 8013084:	b29a      	uxth	r2, r3
 8013086:	4b2d      	ldr	r3, [pc, #180]	; (801313c <tcp_input+0x2b8>)
 8013088:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	891a      	ldrh	r2, [r3, #8]
 801308e:	4b2b      	ldr	r3, [pc, #172]	; (801313c <tcp_input+0x2b8>)
 8013090:	881b      	ldrh	r3, [r3, #0]
 8013092:	429a      	cmp	r2, r3
 8013094:	f200 82d9 	bhi.w	801364a <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8013098:	2300      	movs	r3, #0
 801309a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801309c:	4b28      	ldr	r3, [pc, #160]	; (8013140 <tcp_input+0x2bc>)
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	61fb      	str	r3, [r7, #28]
 80130a2:	e09d      	b.n	80131e0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80130a4:	69fb      	ldr	r3, [r7, #28]
 80130a6:	7d1b      	ldrb	r3, [r3, #20]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d105      	bne.n	80130b8 <tcp_input+0x234>
 80130ac:	4b15      	ldr	r3, [pc, #84]	; (8013104 <tcp_input+0x280>)
 80130ae:	22fb      	movs	r2, #251	; 0xfb
 80130b0:	4924      	ldr	r1, [pc, #144]	; (8013144 <tcp_input+0x2c0>)
 80130b2:	4816      	ldr	r0, [pc, #88]	; (801310c <tcp_input+0x288>)
 80130b4:	f00c fbd8 	bl	801f868 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80130b8:	69fb      	ldr	r3, [r7, #28]
 80130ba:	7d1b      	ldrb	r3, [r3, #20]
 80130bc:	2b0a      	cmp	r3, #10
 80130be:	d105      	bne.n	80130cc <tcp_input+0x248>
 80130c0:	4b10      	ldr	r3, [pc, #64]	; (8013104 <tcp_input+0x280>)
 80130c2:	22fc      	movs	r2, #252	; 0xfc
 80130c4:	4920      	ldr	r1, [pc, #128]	; (8013148 <tcp_input+0x2c4>)
 80130c6:	4811      	ldr	r0, [pc, #68]	; (801310c <tcp_input+0x288>)
 80130c8:	f00c fbce 	bl	801f868 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80130cc:	69fb      	ldr	r3, [r7, #28]
 80130ce:	7d1b      	ldrb	r3, [r3, #20]
 80130d0:	2b01      	cmp	r3, #1
 80130d2:	d105      	bne.n	80130e0 <tcp_input+0x25c>
 80130d4:	4b0b      	ldr	r3, [pc, #44]	; (8013104 <tcp_input+0x280>)
 80130d6:	22fd      	movs	r2, #253	; 0xfd
 80130d8:	491c      	ldr	r1, [pc, #112]	; (801314c <tcp_input+0x2c8>)
 80130da:	480c      	ldr	r0, [pc, #48]	; (801310c <tcp_input+0x288>)
 80130dc:	f00c fbc4 	bl	801f868 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80130e0:	69fb      	ldr	r3, [r7, #28]
 80130e2:	7a1b      	ldrb	r3, [r3, #8]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d033      	beq.n	8013150 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80130e8:	69fb      	ldr	r3, [r7, #28]
 80130ea:	7a1a      	ldrb	r2, [r3, #8]
 80130ec:	4b09      	ldr	r3, [pc, #36]	; (8013114 <tcp_input+0x290>)
 80130ee:	685b      	ldr	r3, [r3, #4]
 80130f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80130f4:	3301      	adds	r3, #1
 80130f6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80130f8:	429a      	cmp	r2, r3
 80130fa:	d029      	beq.n	8013150 <tcp_input+0x2cc>
      prev = pcb;
 80130fc:	69fb      	ldr	r3, [r7, #28]
 80130fe:	61bb      	str	r3, [r7, #24]
      continue;
 8013100:	e06b      	b.n	80131da <tcp_input+0x356>
 8013102:	bf00      	nop
 8013104:	08023bcc 	.word	0x08023bcc
 8013108:	08023c00 	.word	0x08023c00
 801310c:	08023c18 	.word	0x08023c18
 8013110:	2000192c 	.word	0x2000192c
 8013114:	200050c0 	.word	0x200050c0
 8013118:	20001930 	.word	0x20001930
 801311c:	20001934 	.word	0x20001934
 8013120:	20001932 	.word	0x20001932
 8013124:	08023c40 	.word	0x08023c40
 8013128:	08023c50 	.word	0x08023c50
 801312c:	08023c5c 	.word	0x08023c5c
 8013130:	2000193c 	.word	0x2000193c
 8013134:	20001940 	.word	0x20001940
 8013138:	20001948 	.word	0x20001948
 801313c:	20001946 	.word	0x20001946
 8013140:	2000893c 	.word	0x2000893c
 8013144:	08023c7c 	.word	0x08023c7c
 8013148:	08023ca4 	.word	0x08023ca4
 801314c:	08023cd0 	.word	0x08023cd0
    }

    if (pcb->remote_port == tcphdr->src &&
 8013150:	69fb      	ldr	r3, [r7, #28]
 8013152:	8b1a      	ldrh	r2, [r3, #24]
 8013154:	4b94      	ldr	r3, [pc, #592]	; (80133a8 <tcp_input+0x524>)
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	881b      	ldrh	r3, [r3, #0]
 801315a:	b29b      	uxth	r3, r3
 801315c:	429a      	cmp	r2, r3
 801315e:	d13a      	bne.n	80131d6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8013160:	69fb      	ldr	r3, [r7, #28]
 8013162:	8ada      	ldrh	r2, [r3, #22]
 8013164:	4b90      	ldr	r3, [pc, #576]	; (80133a8 <tcp_input+0x524>)
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	885b      	ldrh	r3, [r3, #2]
 801316a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801316c:	429a      	cmp	r2, r3
 801316e:	d132      	bne.n	80131d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013170:	69fb      	ldr	r3, [r7, #28]
 8013172:	685a      	ldr	r2, [r3, #4]
 8013174:	4b8d      	ldr	r3, [pc, #564]	; (80133ac <tcp_input+0x528>)
 8013176:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8013178:	429a      	cmp	r2, r3
 801317a:	d12c      	bne.n	80131d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801317c:	69fb      	ldr	r3, [r7, #28]
 801317e:	681a      	ldr	r2, [r3, #0]
 8013180:	4b8a      	ldr	r3, [pc, #552]	; (80133ac <tcp_input+0x528>)
 8013182:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013184:	429a      	cmp	r2, r3
 8013186:	d126      	bne.n	80131d6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8013188:	69fb      	ldr	r3, [r7, #28]
 801318a:	68db      	ldr	r3, [r3, #12]
 801318c:	69fa      	ldr	r2, [r7, #28]
 801318e:	429a      	cmp	r2, r3
 8013190:	d106      	bne.n	80131a0 <tcp_input+0x31c>
 8013192:	4b87      	ldr	r3, [pc, #540]	; (80133b0 <tcp_input+0x52c>)
 8013194:	f240 120d 	movw	r2, #269	; 0x10d
 8013198:	4986      	ldr	r1, [pc, #536]	; (80133b4 <tcp_input+0x530>)
 801319a:	4887      	ldr	r0, [pc, #540]	; (80133b8 <tcp_input+0x534>)
 801319c:	f00c fb64 	bl	801f868 <iprintf>
      if (prev != NULL) {
 80131a0:	69bb      	ldr	r3, [r7, #24]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d00a      	beq.n	80131bc <tcp_input+0x338>
        prev->next = pcb->next;
 80131a6:	69fb      	ldr	r3, [r7, #28]
 80131a8:	68da      	ldr	r2, [r3, #12]
 80131aa:	69bb      	ldr	r3, [r7, #24]
 80131ac:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80131ae:	4b83      	ldr	r3, [pc, #524]	; (80133bc <tcp_input+0x538>)
 80131b0:	681a      	ldr	r2, [r3, #0]
 80131b2:	69fb      	ldr	r3, [r7, #28]
 80131b4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80131b6:	4a81      	ldr	r2, [pc, #516]	; (80133bc <tcp_input+0x538>)
 80131b8:	69fb      	ldr	r3, [r7, #28]
 80131ba:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80131bc:	69fb      	ldr	r3, [r7, #28]
 80131be:	68db      	ldr	r3, [r3, #12]
 80131c0:	69fa      	ldr	r2, [r7, #28]
 80131c2:	429a      	cmp	r2, r3
 80131c4:	d111      	bne.n	80131ea <tcp_input+0x366>
 80131c6:	4b7a      	ldr	r3, [pc, #488]	; (80133b0 <tcp_input+0x52c>)
 80131c8:	f240 1215 	movw	r2, #277	; 0x115
 80131cc:	497c      	ldr	r1, [pc, #496]	; (80133c0 <tcp_input+0x53c>)
 80131ce:	487a      	ldr	r0, [pc, #488]	; (80133b8 <tcp_input+0x534>)
 80131d0:	f00c fb4a 	bl	801f868 <iprintf>
      break;
 80131d4:	e009      	b.n	80131ea <tcp_input+0x366>
    }
    prev = pcb;
 80131d6:	69fb      	ldr	r3, [r7, #28]
 80131d8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80131da:	69fb      	ldr	r3, [r7, #28]
 80131dc:	68db      	ldr	r3, [r3, #12]
 80131de:	61fb      	str	r3, [r7, #28]
 80131e0:	69fb      	ldr	r3, [r7, #28]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	f47f af5e 	bne.w	80130a4 <tcp_input+0x220>
 80131e8:	e000      	b.n	80131ec <tcp_input+0x368>
      break;
 80131ea:	bf00      	nop
  }

  if (pcb == NULL) {
 80131ec:	69fb      	ldr	r3, [r7, #28]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	f040 8095 	bne.w	801331e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80131f4:	4b73      	ldr	r3, [pc, #460]	; (80133c4 <tcp_input+0x540>)
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	61fb      	str	r3, [r7, #28]
 80131fa:	e03f      	b.n	801327c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80131fc:	69fb      	ldr	r3, [r7, #28]
 80131fe:	7d1b      	ldrb	r3, [r3, #20]
 8013200:	2b0a      	cmp	r3, #10
 8013202:	d006      	beq.n	8013212 <tcp_input+0x38e>
 8013204:	4b6a      	ldr	r3, [pc, #424]	; (80133b0 <tcp_input+0x52c>)
 8013206:	f240 121f 	movw	r2, #287	; 0x11f
 801320a:	496f      	ldr	r1, [pc, #444]	; (80133c8 <tcp_input+0x544>)
 801320c:	486a      	ldr	r0, [pc, #424]	; (80133b8 <tcp_input+0x534>)
 801320e:	f00c fb2b 	bl	801f868 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013212:	69fb      	ldr	r3, [r7, #28]
 8013214:	7a1b      	ldrb	r3, [r3, #8]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d009      	beq.n	801322e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801321a:	69fb      	ldr	r3, [r7, #28]
 801321c:	7a1a      	ldrb	r2, [r3, #8]
 801321e:	4b63      	ldr	r3, [pc, #396]	; (80133ac <tcp_input+0x528>)
 8013220:	685b      	ldr	r3, [r3, #4]
 8013222:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013226:	3301      	adds	r3, #1
 8013228:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801322a:	429a      	cmp	r2, r3
 801322c:	d122      	bne.n	8013274 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801322e:	69fb      	ldr	r3, [r7, #28]
 8013230:	8b1a      	ldrh	r2, [r3, #24]
 8013232:	4b5d      	ldr	r3, [pc, #372]	; (80133a8 <tcp_input+0x524>)
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	881b      	ldrh	r3, [r3, #0]
 8013238:	b29b      	uxth	r3, r3
 801323a:	429a      	cmp	r2, r3
 801323c:	d11b      	bne.n	8013276 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801323e:	69fb      	ldr	r3, [r7, #28]
 8013240:	8ada      	ldrh	r2, [r3, #22]
 8013242:	4b59      	ldr	r3, [pc, #356]	; (80133a8 <tcp_input+0x524>)
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	885b      	ldrh	r3, [r3, #2]
 8013248:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801324a:	429a      	cmp	r2, r3
 801324c:	d113      	bne.n	8013276 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801324e:	69fb      	ldr	r3, [r7, #28]
 8013250:	685a      	ldr	r2, [r3, #4]
 8013252:	4b56      	ldr	r3, [pc, #344]	; (80133ac <tcp_input+0x528>)
 8013254:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8013256:	429a      	cmp	r2, r3
 8013258:	d10d      	bne.n	8013276 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801325a:	69fb      	ldr	r3, [r7, #28]
 801325c:	681a      	ldr	r2, [r3, #0]
 801325e:	4b53      	ldr	r3, [pc, #332]	; (80133ac <tcp_input+0x528>)
 8013260:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013262:	429a      	cmp	r2, r3
 8013264:	d107      	bne.n	8013276 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8013266:	69f8      	ldr	r0, [r7, #28]
 8013268:	f000 fb54 	bl	8013914 <tcp_timewait_input>
        }
        pbuf_free(p);
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	f7fd fb7f 	bl	8010970 <pbuf_free>
        return;
 8013272:	e1f0      	b.n	8013656 <tcp_input+0x7d2>
        continue;
 8013274:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013276:	69fb      	ldr	r3, [r7, #28]
 8013278:	68db      	ldr	r3, [r3, #12]
 801327a:	61fb      	str	r3, [r7, #28]
 801327c:	69fb      	ldr	r3, [r7, #28]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d1bc      	bne.n	80131fc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013282:	2300      	movs	r3, #0
 8013284:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013286:	4b51      	ldr	r3, [pc, #324]	; (80133cc <tcp_input+0x548>)
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	617b      	str	r3, [r7, #20]
 801328c:	e02a      	b.n	80132e4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801328e:	697b      	ldr	r3, [r7, #20]
 8013290:	7a1b      	ldrb	r3, [r3, #8]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d00c      	beq.n	80132b0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013296:	697b      	ldr	r3, [r7, #20]
 8013298:	7a1a      	ldrb	r2, [r3, #8]
 801329a:	4b44      	ldr	r3, [pc, #272]	; (80133ac <tcp_input+0x528>)
 801329c:	685b      	ldr	r3, [r3, #4]
 801329e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80132a2:	3301      	adds	r3, #1
 80132a4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80132a6:	429a      	cmp	r2, r3
 80132a8:	d002      	beq.n	80132b0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80132aa:	697b      	ldr	r3, [r7, #20]
 80132ac:	61bb      	str	r3, [r7, #24]
        continue;
 80132ae:	e016      	b.n	80132de <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80132b0:	697b      	ldr	r3, [r7, #20]
 80132b2:	8ada      	ldrh	r2, [r3, #22]
 80132b4:	4b3c      	ldr	r3, [pc, #240]	; (80133a8 <tcp_input+0x524>)
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	885b      	ldrh	r3, [r3, #2]
 80132ba:	b29b      	uxth	r3, r3
 80132bc:	429a      	cmp	r2, r3
 80132be:	d10c      	bne.n	80132da <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80132c0:	697b      	ldr	r3, [r7, #20]
 80132c2:	681a      	ldr	r2, [r3, #0]
 80132c4:	4b39      	ldr	r3, [pc, #228]	; (80133ac <tcp_input+0x528>)
 80132c6:	695b      	ldr	r3, [r3, #20]
 80132c8:	429a      	cmp	r2, r3
 80132ca:	d00f      	beq.n	80132ec <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80132cc:	697b      	ldr	r3, [r7, #20]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d00d      	beq.n	80132ee <tcp_input+0x46a>
 80132d2:	697b      	ldr	r3, [r7, #20]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d009      	beq.n	80132ee <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80132da:	697b      	ldr	r3, [r7, #20]
 80132dc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80132de:	697b      	ldr	r3, [r7, #20]
 80132e0:	68db      	ldr	r3, [r3, #12]
 80132e2:	617b      	str	r3, [r7, #20]
 80132e4:	697b      	ldr	r3, [r7, #20]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d1d1      	bne.n	801328e <tcp_input+0x40a>
 80132ea:	e000      	b.n	80132ee <tcp_input+0x46a>
            break;
 80132ec:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80132ee:	697b      	ldr	r3, [r7, #20]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d014      	beq.n	801331e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80132f4:	69bb      	ldr	r3, [r7, #24]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d00a      	beq.n	8013310 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80132fa:	697b      	ldr	r3, [r7, #20]
 80132fc:	68da      	ldr	r2, [r3, #12]
 80132fe:	69bb      	ldr	r3, [r7, #24]
 8013300:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013302:	4b32      	ldr	r3, [pc, #200]	; (80133cc <tcp_input+0x548>)
 8013304:	681a      	ldr	r2, [r3, #0]
 8013306:	697b      	ldr	r3, [r7, #20]
 8013308:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801330a:	4a30      	ldr	r2, [pc, #192]	; (80133cc <tcp_input+0x548>)
 801330c:	697b      	ldr	r3, [r7, #20]
 801330e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013310:	6978      	ldr	r0, [r7, #20]
 8013312:	f000 fa01 	bl	8013718 <tcp_listen_input>
      }
      pbuf_free(p);
 8013316:	6878      	ldr	r0, [r7, #4]
 8013318:	f7fd fb2a 	bl	8010970 <pbuf_free>
      return;
 801331c:	e19b      	b.n	8013656 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801331e:	69fb      	ldr	r3, [r7, #28]
 8013320:	2b00      	cmp	r3, #0
 8013322:	f000 8160 	beq.w	80135e6 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013326:	4b2a      	ldr	r3, [pc, #168]	; (80133d0 <tcp_input+0x54c>)
 8013328:	2200      	movs	r2, #0
 801332a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	891a      	ldrh	r2, [r3, #8]
 8013330:	4b27      	ldr	r3, [pc, #156]	; (80133d0 <tcp_input+0x54c>)
 8013332:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013334:	4a26      	ldr	r2, [pc, #152]	; (80133d0 <tcp_input+0x54c>)
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801333a:	4b1b      	ldr	r3, [pc, #108]	; (80133a8 <tcp_input+0x524>)
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	4a24      	ldr	r2, [pc, #144]	; (80133d0 <tcp_input+0x54c>)
 8013340:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013342:	4b24      	ldr	r3, [pc, #144]	; (80133d4 <tcp_input+0x550>)
 8013344:	2200      	movs	r2, #0
 8013346:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013348:	4b23      	ldr	r3, [pc, #140]	; (80133d8 <tcp_input+0x554>)
 801334a:	2200      	movs	r2, #0
 801334c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801334e:	4b23      	ldr	r3, [pc, #140]	; (80133dc <tcp_input+0x558>)
 8013350:	2200      	movs	r2, #0
 8013352:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013354:	4b22      	ldr	r3, [pc, #136]	; (80133e0 <tcp_input+0x55c>)
 8013356:	781b      	ldrb	r3, [r3, #0]
 8013358:	f003 0308 	and.w	r3, r3, #8
 801335c:	2b00      	cmp	r3, #0
 801335e:	d006      	beq.n	801336e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	7b5b      	ldrb	r3, [r3, #13]
 8013364:	f043 0301 	orr.w	r3, r3, #1
 8013368:	b2da      	uxtb	r2, r3
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801336e:	69fb      	ldr	r3, [r7, #28]
 8013370:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013372:	2b00      	cmp	r3, #0
 8013374:	d038      	beq.n	80133e8 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013376:	69f8      	ldr	r0, [r7, #28]
 8013378:	f7ff f870 	bl	801245c <tcp_process_refused_data>
 801337c:	4603      	mov	r3, r0
 801337e:	f113 0f0d 	cmn.w	r3, #13
 8013382:	d007      	beq.n	8013394 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013384:	69fb      	ldr	r3, [r7, #28]
 8013386:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013388:	2b00      	cmp	r3, #0
 801338a:	d02d      	beq.n	80133e8 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801338c:	4b15      	ldr	r3, [pc, #84]	; (80133e4 <tcp_input+0x560>)
 801338e:	881b      	ldrh	r3, [r3, #0]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d029      	beq.n	80133e8 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013394:	69fb      	ldr	r3, [r7, #28]
 8013396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013398:	2b00      	cmp	r3, #0
 801339a:	f040 8104 	bne.w	80135a6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801339e:	69f8      	ldr	r0, [r7, #28]
 80133a0:	f003 fe16 	bl	8016fd0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80133a4:	e0ff      	b.n	80135a6 <tcp_input+0x722>
 80133a6:	bf00      	nop
 80133a8:	2000192c 	.word	0x2000192c
 80133ac:	200050c0 	.word	0x200050c0
 80133b0:	08023bcc 	.word	0x08023bcc
 80133b4:	08023cf8 	.word	0x08023cf8
 80133b8:	08023c18 	.word	0x08023c18
 80133bc:	2000893c 	.word	0x2000893c
 80133c0:	08023d24 	.word	0x08023d24
 80133c4:	2000894c 	.word	0x2000894c
 80133c8:	08023d50 	.word	0x08023d50
 80133cc:	20008944 	.word	0x20008944
 80133d0:	2000191c 	.word	0x2000191c
 80133d4:	2000194c 	.word	0x2000194c
 80133d8:	20001949 	.word	0x20001949
 80133dc:	20001944 	.word	0x20001944
 80133e0:	20001948 	.word	0x20001948
 80133e4:	20001946 	.word	0x20001946
      }
    }
    tcp_input_pcb = pcb;
 80133e8:	4a9c      	ldr	r2, [pc, #624]	; (801365c <tcp_input+0x7d8>)
 80133ea:	69fb      	ldr	r3, [r7, #28]
 80133ec:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80133ee:	69f8      	ldr	r0, [r7, #28]
 80133f0:	f000 fb0a 	bl	8013a08 <tcp_process>
 80133f4:	4603      	mov	r3, r0
 80133f6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80133f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80133fc:	f113 0f0d 	cmn.w	r3, #13
 8013400:	f000 80d3 	beq.w	80135aa <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8013404:	4b96      	ldr	r3, [pc, #600]	; (8013660 <tcp_input+0x7dc>)
 8013406:	781b      	ldrb	r3, [r3, #0]
 8013408:	f003 0308 	and.w	r3, r3, #8
 801340c:	2b00      	cmp	r3, #0
 801340e:	d015      	beq.n	801343c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013410:	69fb      	ldr	r3, [r7, #28]
 8013412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013416:	2b00      	cmp	r3, #0
 8013418:	d008      	beq.n	801342c <tcp_input+0x5a8>
 801341a:	69fb      	ldr	r3, [r7, #28]
 801341c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013420:	69fa      	ldr	r2, [r7, #28]
 8013422:	6912      	ldr	r2, [r2, #16]
 8013424:	f06f 010d 	mvn.w	r1, #13
 8013428:	4610      	mov	r0, r2
 801342a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801342c:	69f9      	ldr	r1, [r7, #28]
 801342e:	488d      	ldr	r0, [pc, #564]	; (8013664 <tcp_input+0x7e0>)
 8013430:	f7ff fbb0 	bl	8012b94 <tcp_pcb_remove>
        tcp_free(pcb);
 8013434:	69f8      	ldr	r0, [r7, #28]
 8013436:	f7fd feb1 	bl	801119c <tcp_free>
 801343a:	e0c1      	b.n	80135c0 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 801343c:	2300      	movs	r3, #0
 801343e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013440:	4b89      	ldr	r3, [pc, #548]	; (8013668 <tcp_input+0x7e4>)
 8013442:	881b      	ldrh	r3, [r3, #0]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d01d      	beq.n	8013484 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013448:	4b87      	ldr	r3, [pc, #540]	; (8013668 <tcp_input+0x7e4>)
 801344a:	881b      	ldrh	r3, [r3, #0]
 801344c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801344e:	69fb      	ldr	r3, [r7, #28]
 8013450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013454:	2b00      	cmp	r3, #0
 8013456:	d00a      	beq.n	801346e <tcp_input+0x5ea>
 8013458:	69fb      	ldr	r3, [r7, #28]
 801345a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801345e:	69fa      	ldr	r2, [r7, #28]
 8013460:	6910      	ldr	r0, [r2, #16]
 8013462:	89fa      	ldrh	r2, [r7, #14]
 8013464:	69f9      	ldr	r1, [r7, #28]
 8013466:	4798      	blx	r3
 8013468:	4603      	mov	r3, r0
 801346a:	74fb      	strb	r3, [r7, #19]
 801346c:	e001      	b.n	8013472 <tcp_input+0x5ee>
 801346e:	2300      	movs	r3, #0
 8013470:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013472:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013476:	f113 0f0d 	cmn.w	r3, #13
 801347a:	f000 8098 	beq.w	80135ae <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 801347e:	4b7a      	ldr	r3, [pc, #488]	; (8013668 <tcp_input+0x7e4>)
 8013480:	2200      	movs	r2, #0
 8013482:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013484:	69f8      	ldr	r0, [r7, #28]
 8013486:	f000 f907 	bl	8013698 <tcp_input_delayed_close>
 801348a:	4603      	mov	r3, r0
 801348c:	2b00      	cmp	r3, #0
 801348e:	f040 8090 	bne.w	80135b2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013492:	4b76      	ldr	r3, [pc, #472]	; (801366c <tcp_input+0x7e8>)
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d041      	beq.n	801351e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801349a:	69fb      	ldr	r3, [r7, #28]
 801349c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d006      	beq.n	80134b0 <tcp_input+0x62c>
 80134a2:	4b73      	ldr	r3, [pc, #460]	; (8013670 <tcp_input+0x7ec>)
 80134a4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80134a8:	4972      	ldr	r1, [pc, #456]	; (8013674 <tcp_input+0x7f0>)
 80134aa:	4873      	ldr	r0, [pc, #460]	; (8013678 <tcp_input+0x7f4>)
 80134ac:	f00c f9dc 	bl	801f868 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80134b0:	69fb      	ldr	r3, [r7, #28]
 80134b2:	8b5b      	ldrh	r3, [r3, #26]
 80134b4:	f003 0310 	and.w	r3, r3, #16
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d008      	beq.n	80134ce <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80134bc:	4b6b      	ldr	r3, [pc, #428]	; (801366c <tcp_input+0x7e8>)
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	4618      	mov	r0, r3
 80134c2:	f7fd fa55 	bl	8010970 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80134c6:	69f8      	ldr	r0, [r7, #28]
 80134c8:	f7fe f9ac 	bl	8011824 <tcp_abort>
            goto aborted;
 80134cc:	e078      	b.n	80135c0 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80134ce:	69fb      	ldr	r3, [r7, #28]
 80134d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d00c      	beq.n	80134f2 <tcp_input+0x66e>
 80134d8:	69fb      	ldr	r3, [r7, #28]
 80134da:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80134de:	69fb      	ldr	r3, [r7, #28]
 80134e0:	6918      	ldr	r0, [r3, #16]
 80134e2:	4b62      	ldr	r3, [pc, #392]	; (801366c <tcp_input+0x7e8>)
 80134e4:	681a      	ldr	r2, [r3, #0]
 80134e6:	2300      	movs	r3, #0
 80134e8:	69f9      	ldr	r1, [r7, #28]
 80134ea:	47a0      	blx	r4
 80134ec:	4603      	mov	r3, r0
 80134ee:	74fb      	strb	r3, [r7, #19]
 80134f0:	e008      	b.n	8013504 <tcp_input+0x680>
 80134f2:	4b5e      	ldr	r3, [pc, #376]	; (801366c <tcp_input+0x7e8>)
 80134f4:	681a      	ldr	r2, [r3, #0]
 80134f6:	2300      	movs	r3, #0
 80134f8:	69f9      	ldr	r1, [r7, #28]
 80134fa:	2000      	movs	r0, #0
 80134fc:	f7ff f884 	bl	8012608 <tcp_recv_null>
 8013500:	4603      	mov	r3, r0
 8013502:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013504:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013508:	f113 0f0d 	cmn.w	r3, #13
 801350c:	d053      	beq.n	80135b6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801350e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013512:	2b00      	cmp	r3, #0
 8013514:	d003      	beq.n	801351e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013516:	4b55      	ldr	r3, [pc, #340]	; (801366c <tcp_input+0x7e8>)
 8013518:	681a      	ldr	r2, [r3, #0]
 801351a:	69fb      	ldr	r3, [r7, #28]
 801351c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801351e:	4b50      	ldr	r3, [pc, #320]	; (8013660 <tcp_input+0x7dc>)
 8013520:	781b      	ldrb	r3, [r3, #0]
 8013522:	f003 0320 	and.w	r3, r3, #32
 8013526:	2b00      	cmp	r3, #0
 8013528:	d030      	beq.n	801358c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801352a:	69fb      	ldr	r3, [r7, #28]
 801352c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801352e:	2b00      	cmp	r3, #0
 8013530:	d009      	beq.n	8013546 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013532:	69fb      	ldr	r3, [r7, #28]
 8013534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013536:	7b5a      	ldrb	r2, [r3, #13]
 8013538:	69fb      	ldr	r3, [r7, #28]
 801353a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801353c:	f042 0220 	orr.w	r2, r2, #32
 8013540:	b2d2      	uxtb	r2, r2
 8013542:	735a      	strb	r2, [r3, #13]
 8013544:	e022      	b.n	801358c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013546:	69fb      	ldr	r3, [r7, #28]
 8013548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801354a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801354e:	d005      	beq.n	801355c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8013550:	69fb      	ldr	r3, [r7, #28]
 8013552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013554:	3301      	adds	r3, #1
 8013556:	b29a      	uxth	r2, r3
 8013558:	69fb      	ldr	r3, [r7, #28]
 801355a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801355c:	69fb      	ldr	r3, [r7, #28]
 801355e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013562:	2b00      	cmp	r3, #0
 8013564:	d00b      	beq.n	801357e <tcp_input+0x6fa>
 8013566:	69fb      	ldr	r3, [r7, #28]
 8013568:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801356c:	69fb      	ldr	r3, [r7, #28]
 801356e:	6918      	ldr	r0, [r3, #16]
 8013570:	2300      	movs	r3, #0
 8013572:	2200      	movs	r2, #0
 8013574:	69f9      	ldr	r1, [r7, #28]
 8013576:	47a0      	blx	r4
 8013578:	4603      	mov	r3, r0
 801357a:	74fb      	strb	r3, [r7, #19]
 801357c:	e001      	b.n	8013582 <tcp_input+0x6fe>
 801357e:	2300      	movs	r3, #0
 8013580:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013582:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013586:	f113 0f0d 	cmn.w	r3, #13
 801358a:	d016      	beq.n	80135ba <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801358c:	4b33      	ldr	r3, [pc, #204]	; (801365c <tcp_input+0x7d8>)
 801358e:	2200      	movs	r2, #0
 8013590:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013592:	69f8      	ldr	r0, [r7, #28]
 8013594:	f000 f880 	bl	8013698 <tcp_input_delayed_close>
 8013598:	4603      	mov	r3, r0
 801359a:	2b00      	cmp	r3, #0
 801359c:	d10f      	bne.n	80135be <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801359e:	69f8      	ldr	r0, [r7, #28]
 80135a0:	f002 ff10 	bl	80163c4 <tcp_output>
 80135a4:	e00c      	b.n	80135c0 <tcp_input+0x73c>
        goto aborted;
 80135a6:	bf00      	nop
 80135a8:	e00a      	b.n	80135c0 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80135aa:	bf00      	nop
 80135ac:	e008      	b.n	80135c0 <tcp_input+0x73c>
              goto aborted;
 80135ae:	bf00      	nop
 80135b0:	e006      	b.n	80135c0 <tcp_input+0x73c>
          goto aborted;
 80135b2:	bf00      	nop
 80135b4:	e004      	b.n	80135c0 <tcp_input+0x73c>
            goto aborted;
 80135b6:	bf00      	nop
 80135b8:	e002      	b.n	80135c0 <tcp_input+0x73c>
              goto aborted;
 80135ba:	bf00      	nop
 80135bc:	e000      	b.n	80135c0 <tcp_input+0x73c>
          goto aborted;
 80135be:	bf00      	nop
    tcp_input_pcb = NULL;
 80135c0:	4b26      	ldr	r3, [pc, #152]	; (801365c <tcp_input+0x7d8>)
 80135c2:	2200      	movs	r2, #0
 80135c4:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80135c6:	4b29      	ldr	r3, [pc, #164]	; (801366c <tcp_input+0x7e8>)
 80135c8:	2200      	movs	r2, #0
 80135ca:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80135cc:	4b2b      	ldr	r3, [pc, #172]	; (801367c <tcp_input+0x7f8>)
 80135ce:	685b      	ldr	r3, [r3, #4]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d03f      	beq.n	8013654 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 80135d4:	4b29      	ldr	r3, [pc, #164]	; (801367c <tcp_input+0x7f8>)
 80135d6:	685b      	ldr	r3, [r3, #4]
 80135d8:	4618      	mov	r0, r3
 80135da:	f7fd f9c9 	bl	8010970 <pbuf_free>
      inseg.p = NULL;
 80135de:	4b27      	ldr	r3, [pc, #156]	; (801367c <tcp_input+0x7f8>)
 80135e0:	2200      	movs	r2, #0
 80135e2:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80135e4:	e036      	b.n	8013654 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80135e6:	4b26      	ldr	r3, [pc, #152]	; (8013680 <tcp_input+0x7fc>)
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	899b      	ldrh	r3, [r3, #12]
 80135ec:	b29b      	uxth	r3, r3
 80135ee:	4618      	mov	r0, r3
 80135f0:	f7fb faae 	bl	800eb50 <lwip_htons>
 80135f4:	4603      	mov	r3, r0
 80135f6:	b2db      	uxtb	r3, r3
 80135f8:	f003 0304 	and.w	r3, r3, #4
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d118      	bne.n	8013632 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013600:	4b20      	ldr	r3, [pc, #128]	; (8013684 <tcp_input+0x800>)
 8013602:	6819      	ldr	r1, [r3, #0]
 8013604:	4b20      	ldr	r3, [pc, #128]	; (8013688 <tcp_input+0x804>)
 8013606:	881b      	ldrh	r3, [r3, #0]
 8013608:	461a      	mov	r2, r3
 801360a:	4b20      	ldr	r3, [pc, #128]	; (801368c <tcp_input+0x808>)
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013610:	4b1b      	ldr	r3, [pc, #108]	; (8013680 <tcp_input+0x7fc>)
 8013612:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013614:	885b      	ldrh	r3, [r3, #2]
 8013616:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013618:	4a19      	ldr	r2, [pc, #100]	; (8013680 <tcp_input+0x7fc>)
 801361a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801361c:	8812      	ldrh	r2, [r2, #0]
 801361e:	b292      	uxth	r2, r2
 8013620:	9202      	str	r2, [sp, #8]
 8013622:	9301      	str	r3, [sp, #4]
 8013624:	4b1a      	ldr	r3, [pc, #104]	; (8013690 <tcp_input+0x80c>)
 8013626:	9300      	str	r3, [sp, #0]
 8013628:	4b1a      	ldr	r3, [pc, #104]	; (8013694 <tcp_input+0x810>)
 801362a:	4602      	mov	r2, r0
 801362c:	2000      	movs	r0, #0
 801362e:	f003 fc7d 	bl	8016f2c <tcp_rst>
    pbuf_free(p);
 8013632:	6878      	ldr	r0, [r7, #4]
 8013634:	f7fd f99c 	bl	8010970 <pbuf_free>
  return;
 8013638:	e00c      	b.n	8013654 <tcp_input+0x7d0>
    goto dropped;
 801363a:	bf00      	nop
 801363c:	e006      	b.n	801364c <tcp_input+0x7c8>
    goto dropped;
 801363e:	bf00      	nop
 8013640:	e004      	b.n	801364c <tcp_input+0x7c8>
    goto dropped;
 8013642:	bf00      	nop
 8013644:	e002      	b.n	801364c <tcp_input+0x7c8>
      goto dropped;
 8013646:	bf00      	nop
 8013648:	e000      	b.n	801364c <tcp_input+0x7c8>
      goto dropped;
 801364a:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801364c:	6878      	ldr	r0, [r7, #4]
 801364e:	f7fd f98f 	bl	8010970 <pbuf_free>
 8013652:	e000      	b.n	8013656 <tcp_input+0x7d2>
  return;
 8013654:	bf00      	nop
}
 8013656:	3724      	adds	r7, #36	; 0x24
 8013658:	46bd      	mov	sp, r7
 801365a:	bd90      	pop	{r4, r7, pc}
 801365c:	20008950 	.word	0x20008950
 8013660:	20001949 	.word	0x20001949
 8013664:	2000893c 	.word	0x2000893c
 8013668:	20001944 	.word	0x20001944
 801366c:	2000194c 	.word	0x2000194c
 8013670:	08023bcc 	.word	0x08023bcc
 8013674:	08023d80 	.word	0x08023d80
 8013678:	08023c18 	.word	0x08023c18
 801367c:	2000191c 	.word	0x2000191c
 8013680:	2000192c 	.word	0x2000192c
 8013684:	20001940 	.word	0x20001940
 8013688:	20001946 	.word	0x20001946
 801368c:	2000193c 	.word	0x2000193c
 8013690:	200050d0 	.word	0x200050d0
 8013694:	200050d4 	.word	0x200050d4

08013698 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b082      	sub	sp, #8
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d106      	bne.n	80136b4 <tcp_input_delayed_close+0x1c>
 80136a6:	4b17      	ldr	r3, [pc, #92]	; (8013704 <tcp_input_delayed_close+0x6c>)
 80136a8:	f240 225a 	movw	r2, #602	; 0x25a
 80136ac:	4916      	ldr	r1, [pc, #88]	; (8013708 <tcp_input_delayed_close+0x70>)
 80136ae:	4817      	ldr	r0, [pc, #92]	; (801370c <tcp_input_delayed_close+0x74>)
 80136b0:	f00c f8da 	bl	801f868 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80136b4:	4b16      	ldr	r3, [pc, #88]	; (8013710 <tcp_input_delayed_close+0x78>)
 80136b6:	781b      	ldrb	r3, [r3, #0]
 80136b8:	f003 0310 	and.w	r3, r3, #16
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d01c      	beq.n	80136fa <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	8b5b      	ldrh	r3, [r3, #26]
 80136c4:	f003 0310 	and.w	r3, r3, #16
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d10d      	bne.n	80136e8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d008      	beq.n	80136e8 <tcp_input_delayed_close+0x50>
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80136dc:	687a      	ldr	r2, [r7, #4]
 80136de:	6912      	ldr	r2, [r2, #16]
 80136e0:	f06f 010e 	mvn.w	r1, #14
 80136e4:	4610      	mov	r0, r2
 80136e6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80136e8:	6879      	ldr	r1, [r7, #4]
 80136ea:	480a      	ldr	r0, [pc, #40]	; (8013714 <tcp_input_delayed_close+0x7c>)
 80136ec:	f7ff fa52 	bl	8012b94 <tcp_pcb_remove>
    tcp_free(pcb);
 80136f0:	6878      	ldr	r0, [r7, #4]
 80136f2:	f7fd fd53 	bl	801119c <tcp_free>
    return 1;
 80136f6:	2301      	movs	r3, #1
 80136f8:	e000      	b.n	80136fc <tcp_input_delayed_close+0x64>
  }
  return 0;
 80136fa:	2300      	movs	r3, #0
}
 80136fc:	4618      	mov	r0, r3
 80136fe:	3708      	adds	r7, #8
 8013700:	46bd      	mov	sp, r7
 8013702:	bd80      	pop	{r7, pc}
 8013704:	08023bcc 	.word	0x08023bcc
 8013708:	08023d9c 	.word	0x08023d9c
 801370c:	08023c18 	.word	0x08023c18
 8013710:	20001949 	.word	0x20001949
 8013714:	2000893c 	.word	0x2000893c

08013718 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013718:	b590      	push	{r4, r7, lr}
 801371a:	b08b      	sub	sp, #44	; 0x2c
 801371c:	af04      	add	r7, sp, #16
 801371e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013720:	4b6f      	ldr	r3, [pc, #444]	; (80138e0 <tcp_listen_input+0x1c8>)
 8013722:	781b      	ldrb	r3, [r3, #0]
 8013724:	f003 0304 	and.w	r3, r3, #4
 8013728:	2b00      	cmp	r3, #0
 801372a:	f040 80d2 	bne.w	80138d2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d106      	bne.n	8013742 <tcp_listen_input+0x2a>
 8013734:	4b6b      	ldr	r3, [pc, #428]	; (80138e4 <tcp_listen_input+0x1cc>)
 8013736:	f240 2281 	movw	r2, #641	; 0x281
 801373a:	496b      	ldr	r1, [pc, #428]	; (80138e8 <tcp_listen_input+0x1d0>)
 801373c:	486b      	ldr	r0, [pc, #428]	; (80138ec <tcp_listen_input+0x1d4>)
 801373e:	f00c f893 	bl	801f868 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013742:	4b67      	ldr	r3, [pc, #412]	; (80138e0 <tcp_listen_input+0x1c8>)
 8013744:	781b      	ldrb	r3, [r3, #0]
 8013746:	f003 0310 	and.w	r3, r3, #16
 801374a:	2b00      	cmp	r3, #0
 801374c:	d019      	beq.n	8013782 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801374e:	4b68      	ldr	r3, [pc, #416]	; (80138f0 <tcp_listen_input+0x1d8>)
 8013750:	6819      	ldr	r1, [r3, #0]
 8013752:	4b68      	ldr	r3, [pc, #416]	; (80138f4 <tcp_listen_input+0x1dc>)
 8013754:	881b      	ldrh	r3, [r3, #0]
 8013756:	461a      	mov	r2, r3
 8013758:	4b67      	ldr	r3, [pc, #412]	; (80138f8 <tcp_listen_input+0x1e0>)
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801375e:	4b67      	ldr	r3, [pc, #412]	; (80138fc <tcp_listen_input+0x1e4>)
 8013760:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013762:	885b      	ldrh	r3, [r3, #2]
 8013764:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013766:	4a65      	ldr	r2, [pc, #404]	; (80138fc <tcp_listen_input+0x1e4>)
 8013768:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801376a:	8812      	ldrh	r2, [r2, #0]
 801376c:	b292      	uxth	r2, r2
 801376e:	9202      	str	r2, [sp, #8]
 8013770:	9301      	str	r3, [sp, #4]
 8013772:	4b63      	ldr	r3, [pc, #396]	; (8013900 <tcp_listen_input+0x1e8>)
 8013774:	9300      	str	r3, [sp, #0]
 8013776:	4b63      	ldr	r3, [pc, #396]	; (8013904 <tcp_listen_input+0x1ec>)
 8013778:	4602      	mov	r2, r0
 801377a:	6878      	ldr	r0, [r7, #4]
 801377c:	f003 fbd6 	bl	8016f2c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013780:	e0a9      	b.n	80138d6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8013782:	4b57      	ldr	r3, [pc, #348]	; (80138e0 <tcp_listen_input+0x1c8>)
 8013784:	781b      	ldrb	r3, [r3, #0]
 8013786:	f003 0302 	and.w	r3, r3, #2
 801378a:	2b00      	cmp	r3, #0
 801378c:	f000 80a3 	beq.w	80138d6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	7d5b      	ldrb	r3, [r3, #21]
 8013794:	4618      	mov	r0, r3
 8013796:	f7ff f85b 	bl	8012850 <tcp_alloc>
 801379a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801379c:	697b      	ldr	r3, [r7, #20]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d111      	bne.n	80137c6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	699b      	ldr	r3, [r3, #24]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d00a      	beq.n	80137c0 <tcp_listen_input+0xa8>
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	699b      	ldr	r3, [r3, #24]
 80137ae:	687a      	ldr	r2, [r7, #4]
 80137b0:	6910      	ldr	r0, [r2, #16]
 80137b2:	f04f 32ff 	mov.w	r2, #4294967295
 80137b6:	2100      	movs	r1, #0
 80137b8:	4798      	blx	r3
 80137ba:	4603      	mov	r3, r0
 80137bc:	73bb      	strb	r3, [r7, #14]
      return;
 80137be:	e08b      	b.n	80138d8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80137c0:	23f0      	movs	r3, #240	; 0xf0
 80137c2:	73bb      	strb	r3, [r7, #14]
      return;
 80137c4:	e088      	b.n	80138d8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80137c6:	4b50      	ldr	r3, [pc, #320]	; (8013908 <tcp_listen_input+0x1f0>)
 80137c8:	695a      	ldr	r2, [r3, #20]
 80137ca:	697b      	ldr	r3, [r7, #20]
 80137cc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80137ce:	4b4e      	ldr	r3, [pc, #312]	; (8013908 <tcp_listen_input+0x1f0>)
 80137d0:	691a      	ldr	r2, [r3, #16]
 80137d2:	697b      	ldr	r3, [r7, #20]
 80137d4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	8ada      	ldrh	r2, [r3, #22]
 80137da:	697b      	ldr	r3, [r7, #20]
 80137dc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80137de:	4b47      	ldr	r3, [pc, #284]	; (80138fc <tcp_listen_input+0x1e4>)
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	881b      	ldrh	r3, [r3, #0]
 80137e4:	b29a      	uxth	r2, r3
 80137e6:	697b      	ldr	r3, [r7, #20]
 80137e8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80137ea:	697b      	ldr	r3, [r7, #20]
 80137ec:	2203      	movs	r2, #3
 80137ee:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80137f0:	4b41      	ldr	r3, [pc, #260]	; (80138f8 <tcp_listen_input+0x1e0>)
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	1c5a      	adds	r2, r3, #1
 80137f6:	697b      	ldr	r3, [r7, #20]
 80137f8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80137fa:	697b      	ldr	r3, [r7, #20]
 80137fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80137fe:	697b      	ldr	r3, [r7, #20]
 8013800:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8013802:	6978      	ldr	r0, [r7, #20]
 8013804:	f7ff fa5a 	bl	8012cbc <tcp_next_iss>
 8013808:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801380a:	697b      	ldr	r3, [r7, #20]
 801380c:	693a      	ldr	r2, [r7, #16]
 801380e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8013810:	697b      	ldr	r3, [r7, #20]
 8013812:	693a      	ldr	r2, [r7, #16]
 8013814:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8013816:	697b      	ldr	r3, [r7, #20]
 8013818:	693a      	ldr	r2, [r7, #16]
 801381a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801381c:	697b      	ldr	r3, [r7, #20]
 801381e:	693a      	ldr	r2, [r7, #16]
 8013820:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8013822:	4b35      	ldr	r3, [pc, #212]	; (80138f8 <tcp_listen_input+0x1e0>)
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	1e5a      	subs	r2, r3, #1
 8013828:	697b      	ldr	r3, [r7, #20]
 801382a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	691a      	ldr	r2, [r3, #16]
 8013830:	697b      	ldr	r3, [r7, #20]
 8013832:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8013834:	697b      	ldr	r3, [r7, #20]
 8013836:	687a      	ldr	r2, [r7, #4]
 8013838:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	7a5b      	ldrb	r3, [r3, #9]
 801383e:	f003 030c 	and.w	r3, r3, #12
 8013842:	b2da      	uxtb	r2, r3
 8013844:	697b      	ldr	r3, [r7, #20]
 8013846:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	7a1a      	ldrb	r2, [r3, #8]
 801384c:	697b      	ldr	r3, [r7, #20]
 801384e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013850:	4b2e      	ldr	r3, [pc, #184]	; (801390c <tcp_listen_input+0x1f4>)
 8013852:	681a      	ldr	r2, [r3, #0]
 8013854:	697b      	ldr	r3, [r7, #20]
 8013856:	60da      	str	r2, [r3, #12]
 8013858:	4a2c      	ldr	r2, [pc, #176]	; (801390c <tcp_listen_input+0x1f4>)
 801385a:	697b      	ldr	r3, [r7, #20]
 801385c:	6013      	str	r3, [r2, #0]
 801385e:	f003 fd27 	bl	80172b0 <tcp_timer_needed>
 8013862:	4b2b      	ldr	r3, [pc, #172]	; (8013910 <tcp_listen_input+0x1f8>)
 8013864:	2201      	movs	r2, #1
 8013866:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8013868:	6978      	ldr	r0, [r7, #20]
 801386a:	f001 fd8d 	bl	8015388 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801386e:	4b23      	ldr	r3, [pc, #140]	; (80138fc <tcp_listen_input+0x1e4>)
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	89db      	ldrh	r3, [r3, #14]
 8013874:	b29a      	uxth	r2, r3
 8013876:	697b      	ldr	r3, [r7, #20]
 8013878:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801387c:	697b      	ldr	r3, [r7, #20]
 801387e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013882:	697b      	ldr	r3, [r7, #20]
 8013884:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013888:	697b      	ldr	r3, [r7, #20]
 801388a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801388c:	697b      	ldr	r3, [r7, #20]
 801388e:	3304      	adds	r3, #4
 8013890:	4618      	mov	r0, r3
 8013892:	f007 fbb9 	bl	801b008 <ip4_route>
 8013896:	4601      	mov	r1, r0
 8013898:	697b      	ldr	r3, [r7, #20]
 801389a:	3304      	adds	r3, #4
 801389c:	461a      	mov	r2, r3
 801389e:	4620      	mov	r0, r4
 80138a0:	f7ff fa32 	bl	8012d08 <tcp_eff_send_mss_netif>
 80138a4:	4603      	mov	r3, r0
 80138a6:	461a      	mov	r2, r3
 80138a8:	697b      	ldr	r3, [r7, #20]
 80138aa:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80138ac:	2112      	movs	r1, #18
 80138ae:	6978      	ldr	r0, [r7, #20]
 80138b0:	f002 fc9a 	bl	80161e8 <tcp_enqueue_flags>
 80138b4:	4603      	mov	r3, r0
 80138b6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80138b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d004      	beq.n	80138ca <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80138c0:	2100      	movs	r1, #0
 80138c2:	6978      	ldr	r0, [r7, #20]
 80138c4:	f7fd fef0 	bl	80116a8 <tcp_abandon>
      return;
 80138c8:	e006      	b.n	80138d8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80138ca:	6978      	ldr	r0, [r7, #20]
 80138cc:	f002 fd7a 	bl	80163c4 <tcp_output>
  return;
 80138d0:	e001      	b.n	80138d6 <tcp_listen_input+0x1be>
    return;
 80138d2:	bf00      	nop
 80138d4:	e000      	b.n	80138d8 <tcp_listen_input+0x1c0>
  return;
 80138d6:	bf00      	nop
}
 80138d8:	371c      	adds	r7, #28
 80138da:	46bd      	mov	sp, r7
 80138dc:	bd90      	pop	{r4, r7, pc}
 80138de:	bf00      	nop
 80138e0:	20001948 	.word	0x20001948
 80138e4:	08023bcc 	.word	0x08023bcc
 80138e8:	08023dc4 	.word	0x08023dc4
 80138ec:	08023c18 	.word	0x08023c18
 80138f0:	20001940 	.word	0x20001940
 80138f4:	20001946 	.word	0x20001946
 80138f8:	2000193c 	.word	0x2000193c
 80138fc:	2000192c 	.word	0x2000192c
 8013900:	200050d0 	.word	0x200050d0
 8013904:	200050d4 	.word	0x200050d4
 8013908:	200050c0 	.word	0x200050c0
 801390c:	2000893c 	.word	0x2000893c
 8013910:	20008938 	.word	0x20008938

08013914 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8013914:	b580      	push	{r7, lr}
 8013916:	b086      	sub	sp, #24
 8013918:	af04      	add	r7, sp, #16
 801391a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801391c:	4b2f      	ldr	r3, [pc, #188]	; (80139dc <tcp_timewait_input+0xc8>)
 801391e:	781b      	ldrb	r3, [r3, #0]
 8013920:	f003 0304 	and.w	r3, r3, #4
 8013924:	2b00      	cmp	r3, #0
 8013926:	d153      	bne.n	80139d0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d106      	bne.n	801393c <tcp_timewait_input+0x28>
 801392e:	4b2c      	ldr	r3, [pc, #176]	; (80139e0 <tcp_timewait_input+0xcc>)
 8013930:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013934:	492b      	ldr	r1, [pc, #172]	; (80139e4 <tcp_timewait_input+0xd0>)
 8013936:	482c      	ldr	r0, [pc, #176]	; (80139e8 <tcp_timewait_input+0xd4>)
 8013938:	f00b ff96 	bl	801f868 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801393c:	4b27      	ldr	r3, [pc, #156]	; (80139dc <tcp_timewait_input+0xc8>)
 801393e:	781b      	ldrb	r3, [r3, #0]
 8013940:	f003 0302 	and.w	r3, r3, #2
 8013944:	2b00      	cmp	r3, #0
 8013946:	d02a      	beq.n	801399e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8013948:	4b28      	ldr	r3, [pc, #160]	; (80139ec <tcp_timewait_input+0xd8>)
 801394a:	681a      	ldr	r2, [r3, #0]
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013950:	1ad3      	subs	r3, r2, r3
 8013952:	2b00      	cmp	r3, #0
 8013954:	db2d      	blt.n	80139b2 <tcp_timewait_input+0x9e>
 8013956:	4b25      	ldr	r3, [pc, #148]	; (80139ec <tcp_timewait_input+0xd8>)
 8013958:	681a      	ldr	r2, [r3, #0]
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801395e:	6879      	ldr	r1, [r7, #4]
 8013960:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013962:	440b      	add	r3, r1
 8013964:	1ad3      	subs	r3, r2, r3
 8013966:	2b00      	cmp	r3, #0
 8013968:	dc23      	bgt.n	80139b2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801396a:	4b21      	ldr	r3, [pc, #132]	; (80139f0 <tcp_timewait_input+0xdc>)
 801396c:	6819      	ldr	r1, [r3, #0]
 801396e:	4b21      	ldr	r3, [pc, #132]	; (80139f4 <tcp_timewait_input+0xe0>)
 8013970:	881b      	ldrh	r3, [r3, #0]
 8013972:	461a      	mov	r2, r3
 8013974:	4b1d      	ldr	r3, [pc, #116]	; (80139ec <tcp_timewait_input+0xd8>)
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801397a:	4b1f      	ldr	r3, [pc, #124]	; (80139f8 <tcp_timewait_input+0xe4>)
 801397c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801397e:	885b      	ldrh	r3, [r3, #2]
 8013980:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013982:	4a1d      	ldr	r2, [pc, #116]	; (80139f8 <tcp_timewait_input+0xe4>)
 8013984:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013986:	8812      	ldrh	r2, [r2, #0]
 8013988:	b292      	uxth	r2, r2
 801398a:	9202      	str	r2, [sp, #8]
 801398c:	9301      	str	r3, [sp, #4]
 801398e:	4b1b      	ldr	r3, [pc, #108]	; (80139fc <tcp_timewait_input+0xe8>)
 8013990:	9300      	str	r3, [sp, #0]
 8013992:	4b1b      	ldr	r3, [pc, #108]	; (8013a00 <tcp_timewait_input+0xec>)
 8013994:	4602      	mov	r2, r0
 8013996:	6878      	ldr	r0, [r7, #4]
 8013998:	f003 fac8 	bl	8016f2c <tcp_rst>
      return;
 801399c:	e01b      	b.n	80139d6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801399e:	4b0f      	ldr	r3, [pc, #60]	; (80139dc <tcp_timewait_input+0xc8>)
 80139a0:	781b      	ldrb	r3, [r3, #0]
 80139a2:	f003 0301 	and.w	r3, r3, #1
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d003      	beq.n	80139b2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80139aa:	4b16      	ldr	r3, [pc, #88]	; (8013a04 <tcp_timewait_input+0xf0>)
 80139ac:	681a      	ldr	r2, [r3, #0]
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80139b2:	4b10      	ldr	r3, [pc, #64]	; (80139f4 <tcp_timewait_input+0xe0>)
 80139b4:	881b      	ldrh	r3, [r3, #0]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d00c      	beq.n	80139d4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	8b5b      	ldrh	r3, [r3, #26]
 80139be:	f043 0302 	orr.w	r3, r3, #2
 80139c2:	b29a      	uxth	r2, r3
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80139c8:	6878      	ldr	r0, [r7, #4]
 80139ca:	f002 fcfb 	bl	80163c4 <tcp_output>
  }
  return;
 80139ce:	e001      	b.n	80139d4 <tcp_timewait_input+0xc0>
    return;
 80139d0:	bf00      	nop
 80139d2:	e000      	b.n	80139d6 <tcp_timewait_input+0xc2>
  return;
 80139d4:	bf00      	nop
}
 80139d6:	3708      	adds	r7, #8
 80139d8:	46bd      	mov	sp, r7
 80139da:	bd80      	pop	{r7, pc}
 80139dc:	20001948 	.word	0x20001948
 80139e0:	08023bcc 	.word	0x08023bcc
 80139e4:	08023de4 	.word	0x08023de4
 80139e8:	08023c18 	.word	0x08023c18
 80139ec:	2000193c 	.word	0x2000193c
 80139f0:	20001940 	.word	0x20001940
 80139f4:	20001946 	.word	0x20001946
 80139f8:	2000192c 	.word	0x2000192c
 80139fc:	200050d0 	.word	0x200050d0
 8013a00:	200050d4 	.word	0x200050d4
 8013a04:	20008940 	.word	0x20008940

08013a08 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8013a08:	b590      	push	{r4, r7, lr}
 8013a0a:	b08d      	sub	sp, #52	; 0x34
 8013a0c:	af04      	add	r7, sp, #16
 8013a0e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013a10:	2300      	movs	r3, #0
 8013a12:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8013a14:	2300      	movs	r3, #0
 8013a16:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d106      	bne.n	8013a2c <tcp_process+0x24>
 8013a1e:	4ba5      	ldr	r3, [pc, #660]	; (8013cb4 <tcp_process+0x2ac>)
 8013a20:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8013a24:	49a4      	ldr	r1, [pc, #656]	; (8013cb8 <tcp_process+0x2b0>)
 8013a26:	48a5      	ldr	r0, [pc, #660]	; (8013cbc <tcp_process+0x2b4>)
 8013a28:	f00b ff1e 	bl	801f868 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8013a2c:	4ba4      	ldr	r3, [pc, #656]	; (8013cc0 <tcp_process+0x2b8>)
 8013a2e:	781b      	ldrb	r3, [r3, #0]
 8013a30:	f003 0304 	and.w	r3, r3, #4
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d04e      	beq.n	8013ad6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	7d1b      	ldrb	r3, [r3, #20]
 8013a3c:	2b02      	cmp	r3, #2
 8013a3e:	d108      	bne.n	8013a52 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013a44:	4b9f      	ldr	r3, [pc, #636]	; (8013cc4 <tcp_process+0x2bc>)
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	429a      	cmp	r2, r3
 8013a4a:	d123      	bne.n	8013a94 <tcp_process+0x8c>
        acceptable = 1;
 8013a4c:	2301      	movs	r3, #1
 8013a4e:	76fb      	strb	r3, [r7, #27]
 8013a50:	e020      	b.n	8013a94 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013a56:	4b9c      	ldr	r3, [pc, #624]	; (8013cc8 <tcp_process+0x2c0>)
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	429a      	cmp	r2, r3
 8013a5c:	d102      	bne.n	8013a64 <tcp_process+0x5c>
        acceptable = 1;
 8013a5e:	2301      	movs	r3, #1
 8013a60:	76fb      	strb	r3, [r7, #27]
 8013a62:	e017      	b.n	8013a94 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013a64:	4b98      	ldr	r3, [pc, #608]	; (8013cc8 <tcp_process+0x2c0>)
 8013a66:	681a      	ldr	r2, [r3, #0]
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a6c:	1ad3      	subs	r3, r2, r3
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	db10      	blt.n	8013a94 <tcp_process+0x8c>
 8013a72:	4b95      	ldr	r3, [pc, #596]	; (8013cc8 <tcp_process+0x2c0>)
 8013a74:	681a      	ldr	r2, [r3, #0]
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a7a:	6879      	ldr	r1, [r7, #4]
 8013a7c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013a7e:	440b      	add	r3, r1
 8013a80:	1ad3      	subs	r3, r2, r3
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	dc06      	bgt.n	8013a94 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	8b5b      	ldrh	r3, [r3, #26]
 8013a8a:	f043 0302 	orr.w	r3, r3, #2
 8013a8e:	b29a      	uxth	r2, r3
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8013a94:	7efb      	ldrb	r3, [r7, #27]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d01b      	beq.n	8013ad2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	7d1b      	ldrb	r3, [r3, #20]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d106      	bne.n	8013ab0 <tcp_process+0xa8>
 8013aa2:	4b84      	ldr	r3, [pc, #528]	; (8013cb4 <tcp_process+0x2ac>)
 8013aa4:	f44f 724e 	mov.w	r2, #824	; 0x338
 8013aa8:	4988      	ldr	r1, [pc, #544]	; (8013ccc <tcp_process+0x2c4>)
 8013aaa:	4884      	ldr	r0, [pc, #528]	; (8013cbc <tcp_process+0x2b4>)
 8013aac:	f00b fedc 	bl	801f868 <iprintf>
      recv_flags |= TF_RESET;
 8013ab0:	4b87      	ldr	r3, [pc, #540]	; (8013cd0 <tcp_process+0x2c8>)
 8013ab2:	781b      	ldrb	r3, [r3, #0]
 8013ab4:	f043 0308 	orr.w	r3, r3, #8
 8013ab8:	b2da      	uxtb	r2, r3
 8013aba:	4b85      	ldr	r3, [pc, #532]	; (8013cd0 <tcp_process+0x2c8>)
 8013abc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	8b5b      	ldrh	r3, [r3, #26]
 8013ac2:	f023 0301 	bic.w	r3, r3, #1
 8013ac6:	b29a      	uxth	r2, r3
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8013acc:	f06f 030d 	mvn.w	r3, #13
 8013ad0:	e37a      	b.n	80141c8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	e378      	b.n	80141c8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8013ad6:	4b7a      	ldr	r3, [pc, #488]	; (8013cc0 <tcp_process+0x2b8>)
 8013ad8:	781b      	ldrb	r3, [r3, #0]
 8013ada:	f003 0302 	and.w	r3, r3, #2
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d010      	beq.n	8013b04 <tcp_process+0xfc>
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	7d1b      	ldrb	r3, [r3, #20]
 8013ae6:	2b02      	cmp	r3, #2
 8013ae8:	d00c      	beq.n	8013b04 <tcp_process+0xfc>
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	7d1b      	ldrb	r3, [r3, #20]
 8013aee:	2b03      	cmp	r3, #3
 8013af0:	d008      	beq.n	8013b04 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	8b5b      	ldrh	r3, [r3, #26]
 8013af6:	f043 0302 	orr.w	r3, r3, #2
 8013afa:	b29a      	uxth	r2, r3
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8013b00:	2300      	movs	r3, #0
 8013b02:	e361      	b.n	80141c8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	8b5b      	ldrh	r3, [r3, #26]
 8013b08:	f003 0310 	and.w	r3, r3, #16
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d103      	bne.n	8013b18 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013b10:	4b70      	ldr	r3, [pc, #448]	; (8013cd4 <tcp_process+0x2cc>)
 8013b12:	681a      	ldr	r2, [r3, #0]
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	2200      	movs	r2, #0
 8013b24:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8013b28:	6878      	ldr	r0, [r7, #4]
 8013b2a:	f001 fc2d 	bl	8015388 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	7d1b      	ldrb	r3, [r3, #20]
 8013b32:	3b02      	subs	r3, #2
 8013b34:	2b07      	cmp	r3, #7
 8013b36:	f200 8337 	bhi.w	80141a8 <tcp_process+0x7a0>
 8013b3a:	a201      	add	r2, pc, #4	; (adr r2, 8013b40 <tcp_process+0x138>)
 8013b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b40:	08013b61 	.word	0x08013b61
 8013b44:	08013d91 	.word	0x08013d91
 8013b48:	08013f09 	.word	0x08013f09
 8013b4c:	08013f33 	.word	0x08013f33
 8013b50:	08014057 	.word	0x08014057
 8013b54:	08013f09 	.word	0x08013f09
 8013b58:	080140e3 	.word	0x080140e3
 8013b5c:	08014173 	.word	0x08014173
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013b60:	4b57      	ldr	r3, [pc, #348]	; (8013cc0 <tcp_process+0x2b8>)
 8013b62:	781b      	ldrb	r3, [r3, #0]
 8013b64:	f003 0310 	and.w	r3, r3, #16
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	f000 80e4 	beq.w	8013d36 <tcp_process+0x32e>
 8013b6e:	4b54      	ldr	r3, [pc, #336]	; (8013cc0 <tcp_process+0x2b8>)
 8013b70:	781b      	ldrb	r3, [r3, #0]
 8013b72:	f003 0302 	and.w	r3, r3, #2
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	f000 80dd 	beq.w	8013d36 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b80:	1c5a      	adds	r2, r3, #1
 8013b82:	4b50      	ldr	r3, [pc, #320]	; (8013cc4 <tcp_process+0x2bc>)
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	429a      	cmp	r2, r3
 8013b88:	f040 80d5 	bne.w	8013d36 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8013b8c:	4b4e      	ldr	r3, [pc, #312]	; (8013cc8 <tcp_process+0x2c0>)
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	1c5a      	adds	r2, r3, #1
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8013b9e:	4b49      	ldr	r3, [pc, #292]	; (8013cc4 <tcp_process+0x2bc>)
 8013ba0:	681a      	ldr	r2, [r3, #0]
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8013ba6:	4b4c      	ldr	r3, [pc, #304]	; (8013cd8 <tcp_process+0x2d0>)
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	89db      	ldrh	r3, [r3, #14]
 8013bac:	b29a      	uxth	r2, r3
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013bc0:	4b41      	ldr	r3, [pc, #260]	; (8013cc8 <tcp_process+0x2c0>)
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	1e5a      	subs	r2, r3, #1
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	2204      	movs	r2, #4
 8013bce:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	3304      	adds	r3, #4
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f007 fa15 	bl	801b008 <ip4_route>
 8013bde:	4601      	mov	r1, r0
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	3304      	adds	r3, #4
 8013be4:	461a      	mov	r2, r3
 8013be6:	4620      	mov	r0, r4
 8013be8:	f7ff f88e 	bl	8012d08 <tcp_eff_send_mss_netif>
 8013bec:	4603      	mov	r3, r0
 8013bee:	461a      	mov	r2, r3
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013bf8:	009a      	lsls	r2, r3, #2
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013bfe:	005b      	lsls	r3, r3, #1
 8013c00:	f241 111c 	movw	r1, #4380	; 0x111c
 8013c04:	428b      	cmp	r3, r1
 8013c06:	bf38      	it	cc
 8013c08:	460b      	movcc	r3, r1
 8013c0a:	429a      	cmp	r2, r3
 8013c0c:	d204      	bcs.n	8013c18 <tcp_process+0x210>
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013c12:	009b      	lsls	r3, r3, #2
 8013c14:	b29b      	uxth	r3, r3
 8013c16:	e00d      	b.n	8013c34 <tcp_process+0x22c>
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013c1c:	005b      	lsls	r3, r3, #1
 8013c1e:	f241 121c 	movw	r2, #4380	; 0x111c
 8013c22:	4293      	cmp	r3, r2
 8013c24:	d904      	bls.n	8013c30 <tcp_process+0x228>
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013c2a:	005b      	lsls	r3, r3, #1
 8013c2c:	b29b      	uxth	r3, r3
 8013c2e:	e001      	b.n	8013c34 <tcp_process+0x22c>
 8013c30:	f241 131c 	movw	r3, #4380	; 0x111c
 8013c34:	687a      	ldr	r2, [r7, #4]
 8013c36:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d106      	bne.n	8013c52 <tcp_process+0x24a>
 8013c44:	4b1b      	ldr	r3, [pc, #108]	; (8013cb4 <tcp_process+0x2ac>)
 8013c46:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8013c4a:	4924      	ldr	r1, [pc, #144]	; (8013cdc <tcp_process+0x2d4>)
 8013c4c:	481b      	ldr	r0, [pc, #108]	; (8013cbc <tcp_process+0x2b4>)
 8013c4e:	f00b fe0b 	bl	801f868 <iprintf>
        --pcb->snd_queuelen;
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013c58:	3b01      	subs	r3, #1
 8013c5a:	b29a      	uxth	r2, r3
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c66:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8013c68:	69fb      	ldr	r3, [r7, #28]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d111      	bne.n	8013c92 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c72:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8013c74:	69fb      	ldr	r3, [r7, #28]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d106      	bne.n	8013c88 <tcp_process+0x280>
 8013c7a:	4b0e      	ldr	r3, [pc, #56]	; (8013cb4 <tcp_process+0x2ac>)
 8013c7c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8013c80:	4917      	ldr	r1, [pc, #92]	; (8013ce0 <tcp_process+0x2d8>)
 8013c82:	480e      	ldr	r0, [pc, #56]	; (8013cbc <tcp_process+0x2b4>)
 8013c84:	f00b fdf0 	bl	801f868 <iprintf>
          pcb->unsent = rseg->next;
 8013c88:	69fb      	ldr	r3, [r7, #28]
 8013c8a:	681a      	ldr	r2, [r3, #0]
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	66da      	str	r2, [r3, #108]	; 0x6c
 8013c90:	e003      	b.n	8013c9a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8013c92:	69fb      	ldr	r3, [r7, #28]
 8013c94:	681a      	ldr	r2, [r3, #0]
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8013c9a:	69f8      	ldr	r0, [r7, #28]
 8013c9c:	f7fe fc6f 	bl	801257e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d11d      	bne.n	8013ce4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013cae:	861a      	strh	r2, [r3, #48]	; 0x30
 8013cb0:	e01f      	b.n	8013cf2 <tcp_process+0x2ea>
 8013cb2:	bf00      	nop
 8013cb4:	08023bcc 	.word	0x08023bcc
 8013cb8:	08023e04 	.word	0x08023e04
 8013cbc:	08023c18 	.word	0x08023c18
 8013cc0:	20001948 	.word	0x20001948
 8013cc4:	20001940 	.word	0x20001940
 8013cc8:	2000193c 	.word	0x2000193c
 8013ccc:	08023e20 	.word	0x08023e20
 8013cd0:	20001949 	.word	0x20001949
 8013cd4:	20008940 	.word	0x20008940
 8013cd8:	2000192c 	.word	0x2000192c
 8013cdc:	08023e40 	.word	0x08023e40
 8013ce0:	08023e58 	.word	0x08023e58
        } else {
          pcb->rtime = 0;
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	2200      	movs	r2, #0
 8013cee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d00a      	beq.n	8013d12 <tcp_process+0x30a>
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013d02:	687a      	ldr	r2, [r7, #4]
 8013d04:	6910      	ldr	r0, [r2, #16]
 8013d06:	2200      	movs	r2, #0
 8013d08:	6879      	ldr	r1, [r7, #4]
 8013d0a:	4798      	blx	r3
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	76bb      	strb	r3, [r7, #26]
 8013d10:	e001      	b.n	8013d16 <tcp_process+0x30e>
 8013d12:	2300      	movs	r3, #0
 8013d14:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8013d16:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013d1a:	f113 0f0d 	cmn.w	r3, #13
 8013d1e:	d102      	bne.n	8013d26 <tcp_process+0x31e>
          return ERR_ABRT;
 8013d20:	f06f 030c 	mvn.w	r3, #12
 8013d24:	e250      	b.n	80141c8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	8b5b      	ldrh	r3, [r3, #26]
 8013d2a:	f043 0302 	orr.w	r3, r3, #2
 8013d2e:	b29a      	uxth	r2, r3
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8013d34:	e23a      	b.n	80141ac <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8013d36:	4b9d      	ldr	r3, [pc, #628]	; (8013fac <tcp_process+0x5a4>)
 8013d38:	781b      	ldrb	r3, [r3, #0]
 8013d3a:	f003 0310 	and.w	r3, r3, #16
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	f000 8234 	beq.w	80141ac <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013d44:	4b9a      	ldr	r3, [pc, #616]	; (8013fb0 <tcp_process+0x5a8>)
 8013d46:	6819      	ldr	r1, [r3, #0]
 8013d48:	4b9a      	ldr	r3, [pc, #616]	; (8013fb4 <tcp_process+0x5ac>)
 8013d4a:	881b      	ldrh	r3, [r3, #0]
 8013d4c:	461a      	mov	r2, r3
 8013d4e:	4b9a      	ldr	r3, [pc, #616]	; (8013fb8 <tcp_process+0x5b0>)
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013d54:	4b99      	ldr	r3, [pc, #612]	; (8013fbc <tcp_process+0x5b4>)
 8013d56:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013d58:	885b      	ldrh	r3, [r3, #2]
 8013d5a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013d5c:	4a97      	ldr	r2, [pc, #604]	; (8013fbc <tcp_process+0x5b4>)
 8013d5e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013d60:	8812      	ldrh	r2, [r2, #0]
 8013d62:	b292      	uxth	r2, r2
 8013d64:	9202      	str	r2, [sp, #8]
 8013d66:	9301      	str	r3, [sp, #4]
 8013d68:	4b95      	ldr	r3, [pc, #596]	; (8013fc0 <tcp_process+0x5b8>)
 8013d6a:	9300      	str	r3, [sp, #0]
 8013d6c:	4b95      	ldr	r3, [pc, #596]	; (8013fc4 <tcp_process+0x5bc>)
 8013d6e:	4602      	mov	r2, r0
 8013d70:	6878      	ldr	r0, [r7, #4]
 8013d72:	f003 f8db 	bl	8016f2c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013d7c:	2b05      	cmp	r3, #5
 8013d7e:	f200 8215 	bhi.w	80141ac <tcp_process+0x7a4>
          pcb->rtime = 0;
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	2200      	movs	r2, #0
 8013d86:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8013d88:	6878      	ldr	r0, [r7, #4]
 8013d8a:	f002 fea5 	bl	8016ad8 <tcp_rexmit_rto>
      break;
 8013d8e:	e20d      	b.n	80141ac <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8013d90:	4b86      	ldr	r3, [pc, #536]	; (8013fac <tcp_process+0x5a4>)
 8013d92:	781b      	ldrb	r3, [r3, #0]
 8013d94:	f003 0310 	and.w	r3, r3, #16
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	f000 80a1 	beq.w	8013ee0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013d9e:	4b84      	ldr	r3, [pc, #528]	; (8013fb0 <tcp_process+0x5a8>)
 8013da0:	681a      	ldr	r2, [r3, #0]
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013da6:	1ad3      	subs	r3, r2, r3
 8013da8:	3b01      	subs	r3, #1
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	db7e      	blt.n	8013eac <tcp_process+0x4a4>
 8013dae:	4b80      	ldr	r3, [pc, #512]	; (8013fb0 <tcp_process+0x5a8>)
 8013db0:	681a      	ldr	r2, [r3, #0]
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013db6:	1ad3      	subs	r3, r2, r3
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	dc77      	bgt.n	8013eac <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	2204      	movs	r2, #4
 8013dc0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d102      	bne.n	8013dd0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8013dca:	23fa      	movs	r3, #250	; 0xfa
 8013dcc:	76bb      	strb	r3, [r7, #26]
 8013dce:	e01d      	b.n	8013e0c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013dd4:	699b      	ldr	r3, [r3, #24]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d106      	bne.n	8013de8 <tcp_process+0x3e0>
 8013dda:	4b7b      	ldr	r3, [pc, #492]	; (8013fc8 <tcp_process+0x5c0>)
 8013ddc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8013de0:	497a      	ldr	r1, [pc, #488]	; (8013fcc <tcp_process+0x5c4>)
 8013de2:	487b      	ldr	r0, [pc, #492]	; (8013fd0 <tcp_process+0x5c8>)
 8013de4:	f00b fd40 	bl	801f868 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013dec:	699b      	ldr	r3, [r3, #24]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d00a      	beq.n	8013e08 <tcp_process+0x400>
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013df6:	699b      	ldr	r3, [r3, #24]
 8013df8:	687a      	ldr	r2, [r7, #4]
 8013dfa:	6910      	ldr	r0, [r2, #16]
 8013dfc:	2200      	movs	r2, #0
 8013dfe:	6879      	ldr	r1, [r7, #4]
 8013e00:	4798      	blx	r3
 8013e02:	4603      	mov	r3, r0
 8013e04:	76bb      	strb	r3, [r7, #26]
 8013e06:	e001      	b.n	8013e0c <tcp_process+0x404>
 8013e08:	23f0      	movs	r3, #240	; 0xf0
 8013e0a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8013e0c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d00a      	beq.n	8013e2a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8013e14:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013e18:	f113 0f0d 	cmn.w	r3, #13
 8013e1c:	d002      	beq.n	8013e24 <tcp_process+0x41c>
              tcp_abort(pcb);
 8013e1e:	6878      	ldr	r0, [r7, #4]
 8013e20:	f7fd fd00 	bl	8011824 <tcp_abort>
            }
            return ERR_ABRT;
 8013e24:	f06f 030c 	mvn.w	r3, #12
 8013e28:	e1ce      	b.n	80141c8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8013e2a:	6878      	ldr	r0, [r7, #4]
 8013e2c:	f000 fae0 	bl	80143f0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013e30:	4b68      	ldr	r3, [pc, #416]	; (8013fd4 <tcp_process+0x5cc>)
 8013e32:	881b      	ldrh	r3, [r3, #0]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d005      	beq.n	8013e44 <tcp_process+0x43c>
            recv_acked--;
 8013e38:	4b66      	ldr	r3, [pc, #408]	; (8013fd4 <tcp_process+0x5cc>)
 8013e3a:	881b      	ldrh	r3, [r3, #0]
 8013e3c:	3b01      	subs	r3, #1
 8013e3e:	b29a      	uxth	r2, r3
 8013e40:	4b64      	ldr	r3, [pc, #400]	; (8013fd4 <tcp_process+0x5cc>)
 8013e42:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e48:	009a      	lsls	r2, r3, #2
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e4e:	005b      	lsls	r3, r3, #1
 8013e50:	f241 111c 	movw	r1, #4380	; 0x111c
 8013e54:	428b      	cmp	r3, r1
 8013e56:	bf38      	it	cc
 8013e58:	460b      	movcc	r3, r1
 8013e5a:	429a      	cmp	r2, r3
 8013e5c:	d204      	bcs.n	8013e68 <tcp_process+0x460>
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e62:	009b      	lsls	r3, r3, #2
 8013e64:	b29b      	uxth	r3, r3
 8013e66:	e00d      	b.n	8013e84 <tcp_process+0x47c>
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e6c:	005b      	lsls	r3, r3, #1
 8013e6e:	f241 121c 	movw	r2, #4380	; 0x111c
 8013e72:	4293      	cmp	r3, r2
 8013e74:	d904      	bls.n	8013e80 <tcp_process+0x478>
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e7a:	005b      	lsls	r3, r3, #1
 8013e7c:	b29b      	uxth	r3, r3
 8013e7e:	e001      	b.n	8013e84 <tcp_process+0x47c>
 8013e80:	f241 131c 	movw	r3, #4380	; 0x111c
 8013e84:	687a      	ldr	r2, [r7, #4]
 8013e86:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013e8a:	4b53      	ldr	r3, [pc, #332]	; (8013fd8 <tcp_process+0x5d0>)
 8013e8c:	781b      	ldrb	r3, [r3, #0]
 8013e8e:	f003 0320 	and.w	r3, r3, #32
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d037      	beq.n	8013f06 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	8b5b      	ldrh	r3, [r3, #26]
 8013e9a:	f043 0302 	orr.w	r3, r3, #2
 8013e9e:	b29a      	uxth	r2, r3
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	2207      	movs	r2, #7
 8013ea8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013eaa:	e02c      	b.n	8013f06 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013eac:	4b40      	ldr	r3, [pc, #256]	; (8013fb0 <tcp_process+0x5a8>)
 8013eae:	6819      	ldr	r1, [r3, #0]
 8013eb0:	4b40      	ldr	r3, [pc, #256]	; (8013fb4 <tcp_process+0x5ac>)
 8013eb2:	881b      	ldrh	r3, [r3, #0]
 8013eb4:	461a      	mov	r2, r3
 8013eb6:	4b40      	ldr	r3, [pc, #256]	; (8013fb8 <tcp_process+0x5b0>)
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013ebc:	4b3f      	ldr	r3, [pc, #252]	; (8013fbc <tcp_process+0x5b4>)
 8013ebe:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ec0:	885b      	ldrh	r3, [r3, #2]
 8013ec2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013ec4:	4a3d      	ldr	r2, [pc, #244]	; (8013fbc <tcp_process+0x5b4>)
 8013ec6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ec8:	8812      	ldrh	r2, [r2, #0]
 8013eca:	b292      	uxth	r2, r2
 8013ecc:	9202      	str	r2, [sp, #8]
 8013ece:	9301      	str	r3, [sp, #4]
 8013ed0:	4b3b      	ldr	r3, [pc, #236]	; (8013fc0 <tcp_process+0x5b8>)
 8013ed2:	9300      	str	r3, [sp, #0]
 8013ed4:	4b3b      	ldr	r3, [pc, #236]	; (8013fc4 <tcp_process+0x5bc>)
 8013ed6:	4602      	mov	r2, r0
 8013ed8:	6878      	ldr	r0, [r7, #4]
 8013eda:	f003 f827 	bl	8016f2c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8013ede:	e167      	b.n	80141b0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013ee0:	4b32      	ldr	r3, [pc, #200]	; (8013fac <tcp_process+0x5a4>)
 8013ee2:	781b      	ldrb	r3, [r3, #0]
 8013ee4:	f003 0302 	and.w	r3, r3, #2
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	f000 8161 	beq.w	80141b0 <tcp_process+0x7a8>
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ef2:	1e5a      	subs	r2, r3, #1
 8013ef4:	4b30      	ldr	r3, [pc, #192]	; (8013fb8 <tcp_process+0x5b0>)
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	429a      	cmp	r2, r3
 8013efa:	f040 8159 	bne.w	80141b0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8013efe:	6878      	ldr	r0, [r7, #4]
 8013f00:	f002 fe0c 	bl	8016b1c <tcp_rexmit>
      break;
 8013f04:	e154      	b.n	80141b0 <tcp_process+0x7a8>
 8013f06:	e153      	b.n	80141b0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013f08:	6878      	ldr	r0, [r7, #4]
 8013f0a:	f000 fa71 	bl	80143f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013f0e:	4b32      	ldr	r3, [pc, #200]	; (8013fd8 <tcp_process+0x5d0>)
 8013f10:	781b      	ldrb	r3, [r3, #0]
 8013f12:	f003 0320 	and.w	r3, r3, #32
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	f000 814c 	beq.w	80141b4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	8b5b      	ldrh	r3, [r3, #26]
 8013f20:	f043 0302 	orr.w	r3, r3, #2
 8013f24:	b29a      	uxth	r2, r3
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	2207      	movs	r2, #7
 8013f2e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013f30:	e140      	b.n	80141b4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8013f32:	6878      	ldr	r0, [r7, #4]
 8013f34:	f000 fa5c 	bl	80143f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013f38:	4b27      	ldr	r3, [pc, #156]	; (8013fd8 <tcp_process+0x5d0>)
 8013f3a:	781b      	ldrb	r3, [r3, #0]
 8013f3c:	f003 0320 	and.w	r3, r3, #32
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d071      	beq.n	8014028 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013f44:	4b19      	ldr	r3, [pc, #100]	; (8013fac <tcp_process+0x5a4>)
 8013f46:	781b      	ldrb	r3, [r3, #0]
 8013f48:	f003 0310 	and.w	r3, r3, #16
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d060      	beq.n	8014012 <tcp_process+0x60a>
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013f54:	4b16      	ldr	r3, [pc, #88]	; (8013fb0 <tcp_process+0x5a8>)
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	429a      	cmp	r2, r3
 8013f5a:	d15a      	bne.n	8014012 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d156      	bne.n	8014012 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	8b5b      	ldrh	r3, [r3, #26]
 8013f68:	f043 0302 	orr.w	r3, r3, #2
 8013f6c:	b29a      	uxth	r2, r3
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8013f72:	6878      	ldr	r0, [r7, #4]
 8013f74:	f7fe fdbe 	bl	8012af4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013f78:	4b18      	ldr	r3, [pc, #96]	; (8013fdc <tcp_process+0x5d4>)
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	687a      	ldr	r2, [r7, #4]
 8013f7e:	429a      	cmp	r2, r3
 8013f80:	d105      	bne.n	8013f8e <tcp_process+0x586>
 8013f82:	4b16      	ldr	r3, [pc, #88]	; (8013fdc <tcp_process+0x5d4>)
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	68db      	ldr	r3, [r3, #12]
 8013f88:	4a14      	ldr	r2, [pc, #80]	; (8013fdc <tcp_process+0x5d4>)
 8013f8a:	6013      	str	r3, [r2, #0]
 8013f8c:	e02e      	b.n	8013fec <tcp_process+0x5e4>
 8013f8e:	4b13      	ldr	r3, [pc, #76]	; (8013fdc <tcp_process+0x5d4>)
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	617b      	str	r3, [r7, #20]
 8013f94:	e027      	b.n	8013fe6 <tcp_process+0x5de>
 8013f96:	697b      	ldr	r3, [r7, #20]
 8013f98:	68db      	ldr	r3, [r3, #12]
 8013f9a:	687a      	ldr	r2, [r7, #4]
 8013f9c:	429a      	cmp	r2, r3
 8013f9e:	d11f      	bne.n	8013fe0 <tcp_process+0x5d8>
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	68da      	ldr	r2, [r3, #12]
 8013fa4:	697b      	ldr	r3, [r7, #20]
 8013fa6:	60da      	str	r2, [r3, #12]
 8013fa8:	e020      	b.n	8013fec <tcp_process+0x5e4>
 8013faa:	bf00      	nop
 8013fac:	20001948 	.word	0x20001948
 8013fb0:	20001940 	.word	0x20001940
 8013fb4:	20001946 	.word	0x20001946
 8013fb8:	2000193c 	.word	0x2000193c
 8013fbc:	2000192c 	.word	0x2000192c
 8013fc0:	200050d0 	.word	0x200050d0
 8013fc4:	200050d4 	.word	0x200050d4
 8013fc8:	08023bcc 	.word	0x08023bcc
 8013fcc:	08023e6c 	.word	0x08023e6c
 8013fd0:	08023c18 	.word	0x08023c18
 8013fd4:	20001944 	.word	0x20001944
 8013fd8:	20001949 	.word	0x20001949
 8013fdc:	2000893c 	.word	0x2000893c
 8013fe0:	697b      	ldr	r3, [r7, #20]
 8013fe2:	68db      	ldr	r3, [r3, #12]
 8013fe4:	617b      	str	r3, [r7, #20]
 8013fe6:	697b      	ldr	r3, [r7, #20]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d1d4      	bne.n	8013f96 <tcp_process+0x58e>
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	2200      	movs	r2, #0
 8013ff0:	60da      	str	r2, [r3, #12]
 8013ff2:	4b77      	ldr	r3, [pc, #476]	; (80141d0 <tcp_process+0x7c8>)
 8013ff4:	2201      	movs	r2, #1
 8013ff6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	220a      	movs	r2, #10
 8013ffc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8013ffe:	4b75      	ldr	r3, [pc, #468]	; (80141d4 <tcp_process+0x7cc>)
 8014000:	681a      	ldr	r2, [r3, #0]
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	60da      	str	r2, [r3, #12]
 8014006:	4a73      	ldr	r2, [pc, #460]	; (80141d4 <tcp_process+0x7cc>)
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	6013      	str	r3, [r2, #0]
 801400c:	f003 f950 	bl	80172b0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8014010:	e0d2      	b.n	80141b8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	8b5b      	ldrh	r3, [r3, #26]
 8014016:	f043 0302 	orr.w	r3, r3, #2
 801401a:	b29a      	uxth	r2, r3
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	2208      	movs	r2, #8
 8014024:	751a      	strb	r2, [r3, #20]
      break;
 8014026:	e0c7      	b.n	80141b8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014028:	4b6b      	ldr	r3, [pc, #428]	; (80141d8 <tcp_process+0x7d0>)
 801402a:	781b      	ldrb	r3, [r3, #0]
 801402c:	f003 0310 	and.w	r3, r3, #16
 8014030:	2b00      	cmp	r3, #0
 8014032:	f000 80c1 	beq.w	80141b8 <tcp_process+0x7b0>
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801403a:	4b68      	ldr	r3, [pc, #416]	; (80141dc <tcp_process+0x7d4>)
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	429a      	cmp	r2, r3
 8014040:	f040 80ba 	bne.w	80141b8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014048:	2b00      	cmp	r3, #0
 801404a:	f040 80b5 	bne.w	80141b8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	2206      	movs	r2, #6
 8014052:	751a      	strb	r2, [r3, #20]
      break;
 8014054:	e0b0      	b.n	80141b8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8014056:	6878      	ldr	r0, [r7, #4]
 8014058:	f000 f9ca 	bl	80143f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801405c:	4b60      	ldr	r3, [pc, #384]	; (80141e0 <tcp_process+0x7d8>)
 801405e:	781b      	ldrb	r3, [r3, #0]
 8014060:	f003 0320 	and.w	r3, r3, #32
 8014064:	2b00      	cmp	r3, #0
 8014066:	f000 80a9 	beq.w	80141bc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	8b5b      	ldrh	r3, [r3, #26]
 801406e:	f043 0302 	orr.w	r3, r3, #2
 8014072:	b29a      	uxth	r2, r3
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8014078:	6878      	ldr	r0, [r7, #4]
 801407a:	f7fe fd3b 	bl	8012af4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801407e:	4b59      	ldr	r3, [pc, #356]	; (80141e4 <tcp_process+0x7dc>)
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	687a      	ldr	r2, [r7, #4]
 8014084:	429a      	cmp	r2, r3
 8014086:	d105      	bne.n	8014094 <tcp_process+0x68c>
 8014088:	4b56      	ldr	r3, [pc, #344]	; (80141e4 <tcp_process+0x7dc>)
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	68db      	ldr	r3, [r3, #12]
 801408e:	4a55      	ldr	r2, [pc, #340]	; (80141e4 <tcp_process+0x7dc>)
 8014090:	6013      	str	r3, [r2, #0]
 8014092:	e013      	b.n	80140bc <tcp_process+0x6b4>
 8014094:	4b53      	ldr	r3, [pc, #332]	; (80141e4 <tcp_process+0x7dc>)
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	613b      	str	r3, [r7, #16]
 801409a:	e00c      	b.n	80140b6 <tcp_process+0x6ae>
 801409c:	693b      	ldr	r3, [r7, #16]
 801409e:	68db      	ldr	r3, [r3, #12]
 80140a0:	687a      	ldr	r2, [r7, #4]
 80140a2:	429a      	cmp	r2, r3
 80140a4:	d104      	bne.n	80140b0 <tcp_process+0x6a8>
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	68da      	ldr	r2, [r3, #12]
 80140aa:	693b      	ldr	r3, [r7, #16]
 80140ac:	60da      	str	r2, [r3, #12]
 80140ae:	e005      	b.n	80140bc <tcp_process+0x6b4>
 80140b0:	693b      	ldr	r3, [r7, #16]
 80140b2:	68db      	ldr	r3, [r3, #12]
 80140b4:	613b      	str	r3, [r7, #16]
 80140b6:	693b      	ldr	r3, [r7, #16]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d1ef      	bne.n	801409c <tcp_process+0x694>
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	2200      	movs	r2, #0
 80140c0:	60da      	str	r2, [r3, #12]
 80140c2:	4b43      	ldr	r3, [pc, #268]	; (80141d0 <tcp_process+0x7c8>)
 80140c4:	2201      	movs	r2, #1
 80140c6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	220a      	movs	r2, #10
 80140cc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80140ce:	4b41      	ldr	r3, [pc, #260]	; (80141d4 <tcp_process+0x7cc>)
 80140d0:	681a      	ldr	r2, [r3, #0]
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	60da      	str	r2, [r3, #12]
 80140d6:	4a3f      	ldr	r2, [pc, #252]	; (80141d4 <tcp_process+0x7cc>)
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	6013      	str	r3, [r2, #0]
 80140dc:	f003 f8e8 	bl	80172b0 <tcp_timer_needed>
      }
      break;
 80140e0:	e06c      	b.n	80141bc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80140e2:	6878      	ldr	r0, [r7, #4]
 80140e4:	f000 f984 	bl	80143f0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80140e8:	4b3b      	ldr	r3, [pc, #236]	; (80141d8 <tcp_process+0x7d0>)
 80140ea:	781b      	ldrb	r3, [r3, #0]
 80140ec:	f003 0310 	and.w	r3, r3, #16
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d065      	beq.n	80141c0 <tcp_process+0x7b8>
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80140f8:	4b38      	ldr	r3, [pc, #224]	; (80141dc <tcp_process+0x7d4>)
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	429a      	cmp	r2, r3
 80140fe:	d15f      	bne.n	80141c0 <tcp_process+0x7b8>
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014104:	2b00      	cmp	r3, #0
 8014106:	d15b      	bne.n	80141c0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8014108:	6878      	ldr	r0, [r7, #4]
 801410a:	f7fe fcf3 	bl	8012af4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801410e:	4b35      	ldr	r3, [pc, #212]	; (80141e4 <tcp_process+0x7dc>)
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	687a      	ldr	r2, [r7, #4]
 8014114:	429a      	cmp	r2, r3
 8014116:	d105      	bne.n	8014124 <tcp_process+0x71c>
 8014118:	4b32      	ldr	r3, [pc, #200]	; (80141e4 <tcp_process+0x7dc>)
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	68db      	ldr	r3, [r3, #12]
 801411e:	4a31      	ldr	r2, [pc, #196]	; (80141e4 <tcp_process+0x7dc>)
 8014120:	6013      	str	r3, [r2, #0]
 8014122:	e013      	b.n	801414c <tcp_process+0x744>
 8014124:	4b2f      	ldr	r3, [pc, #188]	; (80141e4 <tcp_process+0x7dc>)
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	60fb      	str	r3, [r7, #12]
 801412a:	e00c      	b.n	8014146 <tcp_process+0x73e>
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	68db      	ldr	r3, [r3, #12]
 8014130:	687a      	ldr	r2, [r7, #4]
 8014132:	429a      	cmp	r2, r3
 8014134:	d104      	bne.n	8014140 <tcp_process+0x738>
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	68da      	ldr	r2, [r3, #12]
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	60da      	str	r2, [r3, #12]
 801413e:	e005      	b.n	801414c <tcp_process+0x744>
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	68db      	ldr	r3, [r3, #12]
 8014144:	60fb      	str	r3, [r7, #12]
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d1ef      	bne.n	801412c <tcp_process+0x724>
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	2200      	movs	r2, #0
 8014150:	60da      	str	r2, [r3, #12]
 8014152:	4b1f      	ldr	r3, [pc, #124]	; (80141d0 <tcp_process+0x7c8>)
 8014154:	2201      	movs	r2, #1
 8014156:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	220a      	movs	r2, #10
 801415c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801415e:	4b1d      	ldr	r3, [pc, #116]	; (80141d4 <tcp_process+0x7cc>)
 8014160:	681a      	ldr	r2, [r3, #0]
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	60da      	str	r2, [r3, #12]
 8014166:	4a1b      	ldr	r2, [pc, #108]	; (80141d4 <tcp_process+0x7cc>)
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	6013      	str	r3, [r2, #0]
 801416c:	f003 f8a0 	bl	80172b0 <tcp_timer_needed>
      }
      break;
 8014170:	e026      	b.n	80141c0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8014172:	6878      	ldr	r0, [r7, #4]
 8014174:	f000 f93c 	bl	80143f0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014178:	4b17      	ldr	r3, [pc, #92]	; (80141d8 <tcp_process+0x7d0>)
 801417a:	781b      	ldrb	r3, [r3, #0]
 801417c:	f003 0310 	and.w	r3, r3, #16
 8014180:	2b00      	cmp	r3, #0
 8014182:	d01f      	beq.n	80141c4 <tcp_process+0x7bc>
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014188:	4b14      	ldr	r3, [pc, #80]	; (80141dc <tcp_process+0x7d4>)
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	429a      	cmp	r2, r3
 801418e:	d119      	bne.n	80141c4 <tcp_process+0x7bc>
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014194:	2b00      	cmp	r3, #0
 8014196:	d115      	bne.n	80141c4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8014198:	4b11      	ldr	r3, [pc, #68]	; (80141e0 <tcp_process+0x7d8>)
 801419a:	781b      	ldrb	r3, [r3, #0]
 801419c:	f043 0310 	orr.w	r3, r3, #16
 80141a0:	b2da      	uxtb	r2, r3
 80141a2:	4b0f      	ldr	r3, [pc, #60]	; (80141e0 <tcp_process+0x7d8>)
 80141a4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80141a6:	e00d      	b.n	80141c4 <tcp_process+0x7bc>
    default:
      break;
 80141a8:	bf00      	nop
 80141aa:	e00c      	b.n	80141c6 <tcp_process+0x7be>
      break;
 80141ac:	bf00      	nop
 80141ae:	e00a      	b.n	80141c6 <tcp_process+0x7be>
      break;
 80141b0:	bf00      	nop
 80141b2:	e008      	b.n	80141c6 <tcp_process+0x7be>
      break;
 80141b4:	bf00      	nop
 80141b6:	e006      	b.n	80141c6 <tcp_process+0x7be>
      break;
 80141b8:	bf00      	nop
 80141ba:	e004      	b.n	80141c6 <tcp_process+0x7be>
      break;
 80141bc:	bf00      	nop
 80141be:	e002      	b.n	80141c6 <tcp_process+0x7be>
      break;
 80141c0:	bf00      	nop
 80141c2:	e000      	b.n	80141c6 <tcp_process+0x7be>
      break;
 80141c4:	bf00      	nop
  }
  return ERR_OK;
 80141c6:	2300      	movs	r3, #0
}
 80141c8:	4618      	mov	r0, r3
 80141ca:	3724      	adds	r7, #36	; 0x24
 80141cc:	46bd      	mov	sp, r7
 80141ce:	bd90      	pop	{r4, r7, pc}
 80141d0:	20008938 	.word	0x20008938
 80141d4:	2000894c 	.word	0x2000894c
 80141d8:	20001948 	.word	0x20001948
 80141dc:	20001940 	.word	0x20001940
 80141e0:	20001949 	.word	0x20001949
 80141e4:	2000893c 	.word	0x2000893c

080141e8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80141e8:	b590      	push	{r4, r7, lr}
 80141ea:	b085      	sub	sp, #20
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	6078      	str	r0, [r7, #4]
 80141f0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d106      	bne.n	8014206 <tcp_oos_insert_segment+0x1e>
 80141f8:	4b3b      	ldr	r3, [pc, #236]	; (80142e8 <tcp_oos_insert_segment+0x100>)
 80141fa:	f240 421f 	movw	r2, #1055	; 0x41f
 80141fe:	493b      	ldr	r1, [pc, #236]	; (80142ec <tcp_oos_insert_segment+0x104>)
 8014200:	483b      	ldr	r0, [pc, #236]	; (80142f0 <tcp_oos_insert_segment+0x108>)
 8014202:	f00b fb31 	bl	801f868 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	68db      	ldr	r3, [r3, #12]
 801420a:	899b      	ldrh	r3, [r3, #12]
 801420c:	b29b      	uxth	r3, r3
 801420e:	4618      	mov	r0, r3
 8014210:	f7fa fc9e 	bl	800eb50 <lwip_htons>
 8014214:	4603      	mov	r3, r0
 8014216:	b2db      	uxtb	r3, r3
 8014218:	f003 0301 	and.w	r3, r3, #1
 801421c:	2b00      	cmp	r3, #0
 801421e:	d028      	beq.n	8014272 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014220:	6838      	ldr	r0, [r7, #0]
 8014222:	f7fe f997 	bl	8012554 <tcp_segs_free>
    next = NULL;
 8014226:	2300      	movs	r3, #0
 8014228:	603b      	str	r3, [r7, #0]
 801422a:	e056      	b.n	80142da <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801422c:	683b      	ldr	r3, [r7, #0]
 801422e:	68db      	ldr	r3, [r3, #12]
 8014230:	899b      	ldrh	r3, [r3, #12]
 8014232:	b29b      	uxth	r3, r3
 8014234:	4618      	mov	r0, r3
 8014236:	f7fa fc8b 	bl	800eb50 <lwip_htons>
 801423a:	4603      	mov	r3, r0
 801423c:	b2db      	uxtb	r3, r3
 801423e:	f003 0301 	and.w	r3, r3, #1
 8014242:	2b00      	cmp	r3, #0
 8014244:	d00d      	beq.n	8014262 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	68db      	ldr	r3, [r3, #12]
 801424a:	899b      	ldrh	r3, [r3, #12]
 801424c:	b29c      	uxth	r4, r3
 801424e:	2001      	movs	r0, #1
 8014250:	f7fa fc7e 	bl	800eb50 <lwip_htons>
 8014254:	4603      	mov	r3, r0
 8014256:	461a      	mov	r2, r3
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	68db      	ldr	r3, [r3, #12]
 801425c:	4322      	orrs	r2, r4
 801425e:	b292      	uxth	r2, r2
 8014260:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8014262:	683b      	ldr	r3, [r7, #0]
 8014264:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8014266:	683b      	ldr	r3, [r7, #0]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801426c:	68f8      	ldr	r0, [r7, #12]
 801426e:	f7fe f986 	bl	801257e <tcp_seg_free>
    while (next &&
 8014272:	683b      	ldr	r3, [r7, #0]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d00e      	beq.n	8014296 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	891b      	ldrh	r3, [r3, #8]
 801427c:	461a      	mov	r2, r3
 801427e:	4b1d      	ldr	r3, [pc, #116]	; (80142f4 <tcp_oos_insert_segment+0x10c>)
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	441a      	add	r2, r3
 8014284:	683b      	ldr	r3, [r7, #0]
 8014286:	68db      	ldr	r3, [r3, #12]
 8014288:	685b      	ldr	r3, [r3, #4]
 801428a:	6839      	ldr	r1, [r7, #0]
 801428c:	8909      	ldrh	r1, [r1, #8]
 801428e:	440b      	add	r3, r1
 8014290:	1ad3      	subs	r3, r2, r3
    while (next &&
 8014292:	2b00      	cmp	r3, #0
 8014294:	daca      	bge.n	801422c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8014296:	683b      	ldr	r3, [r7, #0]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d01e      	beq.n	80142da <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	891b      	ldrh	r3, [r3, #8]
 80142a0:	461a      	mov	r2, r3
 80142a2:	4b14      	ldr	r3, [pc, #80]	; (80142f4 <tcp_oos_insert_segment+0x10c>)
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	441a      	add	r2, r3
 80142a8:	683b      	ldr	r3, [r7, #0]
 80142aa:	68db      	ldr	r3, [r3, #12]
 80142ac:	685b      	ldr	r3, [r3, #4]
 80142ae:	1ad3      	subs	r3, r2, r3
    if (next &&
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	dd12      	ble.n	80142da <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80142b4:	683b      	ldr	r3, [r7, #0]
 80142b6:	68db      	ldr	r3, [r3, #12]
 80142b8:	685b      	ldr	r3, [r3, #4]
 80142ba:	b29a      	uxth	r2, r3
 80142bc:	4b0d      	ldr	r3, [pc, #52]	; (80142f4 <tcp_oos_insert_segment+0x10c>)
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	b29b      	uxth	r3, r3
 80142c2:	1ad3      	subs	r3, r2, r3
 80142c4:	b29a      	uxth	r2, r3
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	685a      	ldr	r2, [r3, #4]
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	891b      	ldrh	r3, [r3, #8]
 80142d2:	4619      	mov	r1, r3
 80142d4:	4610      	mov	r0, r2
 80142d6:	f7fc f993 	bl	8010600 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	683a      	ldr	r2, [r7, #0]
 80142de:	601a      	str	r2, [r3, #0]
}
 80142e0:	bf00      	nop
 80142e2:	3714      	adds	r7, #20
 80142e4:	46bd      	mov	sp, r7
 80142e6:	bd90      	pop	{r4, r7, pc}
 80142e8:	08023bcc 	.word	0x08023bcc
 80142ec:	08023e8c 	.word	0x08023e8c
 80142f0:	08023c18 	.word	0x08023c18
 80142f4:	2000193c 	.word	0x2000193c

080142f8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80142f8:	b5b0      	push	{r4, r5, r7, lr}
 80142fa:	b086      	sub	sp, #24
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	60f8      	str	r0, [r7, #12]
 8014300:	60b9      	str	r1, [r7, #8]
 8014302:	607a      	str	r2, [r7, #4]
 8014304:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8014306:	e03e      	b.n	8014386 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014308:	68bb      	ldr	r3, [r7, #8]
 801430a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801430c:	68bb      	ldr	r3, [r7, #8]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8014312:	697b      	ldr	r3, [r7, #20]
 8014314:	685b      	ldr	r3, [r3, #4]
 8014316:	4618      	mov	r0, r3
 8014318:	f7fc fbb8 	bl	8010a8c <pbuf_clen>
 801431c:	4603      	mov	r3, r0
 801431e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014326:	8a7a      	ldrh	r2, [r7, #18]
 8014328:	429a      	cmp	r2, r3
 801432a:	d906      	bls.n	801433a <tcp_free_acked_segments+0x42>
 801432c:	4b2a      	ldr	r3, [pc, #168]	; (80143d8 <tcp_free_acked_segments+0xe0>)
 801432e:	f240 4257 	movw	r2, #1111	; 0x457
 8014332:	492a      	ldr	r1, [pc, #168]	; (80143dc <tcp_free_acked_segments+0xe4>)
 8014334:	482a      	ldr	r0, [pc, #168]	; (80143e0 <tcp_free_acked_segments+0xe8>)
 8014336:	f00b fa97 	bl	801f868 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8014340:	8a7b      	ldrh	r3, [r7, #18]
 8014342:	1ad3      	subs	r3, r2, r3
 8014344:	b29a      	uxth	r2, r3
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801434c:	697b      	ldr	r3, [r7, #20]
 801434e:	891a      	ldrh	r2, [r3, #8]
 8014350:	4b24      	ldr	r3, [pc, #144]	; (80143e4 <tcp_free_acked_segments+0xec>)
 8014352:	881b      	ldrh	r3, [r3, #0]
 8014354:	4413      	add	r3, r2
 8014356:	b29a      	uxth	r2, r3
 8014358:	4b22      	ldr	r3, [pc, #136]	; (80143e4 <tcp_free_acked_segments+0xec>)
 801435a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801435c:	6978      	ldr	r0, [r7, #20]
 801435e:	f7fe f90e 	bl	801257e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014368:	2b00      	cmp	r3, #0
 801436a:	d00c      	beq.n	8014386 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801436c:	68bb      	ldr	r3, [r7, #8]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d109      	bne.n	8014386 <tcp_free_acked_segments+0x8e>
 8014372:	683b      	ldr	r3, [r7, #0]
 8014374:	2b00      	cmp	r3, #0
 8014376:	d106      	bne.n	8014386 <tcp_free_acked_segments+0x8e>
 8014378:	4b17      	ldr	r3, [pc, #92]	; (80143d8 <tcp_free_acked_segments+0xe0>)
 801437a:	f240 4261 	movw	r2, #1121	; 0x461
 801437e:	491a      	ldr	r1, [pc, #104]	; (80143e8 <tcp_free_acked_segments+0xf0>)
 8014380:	4817      	ldr	r0, [pc, #92]	; (80143e0 <tcp_free_acked_segments+0xe8>)
 8014382:	f00b fa71 	bl	801f868 <iprintf>
  while (seg_list != NULL &&
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	2b00      	cmp	r3, #0
 801438a:	d020      	beq.n	80143ce <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801438c:	68bb      	ldr	r3, [r7, #8]
 801438e:	68db      	ldr	r3, [r3, #12]
 8014390:	685b      	ldr	r3, [r3, #4]
 8014392:	4618      	mov	r0, r3
 8014394:	f7fa fbf1 	bl	800eb7a <lwip_htonl>
 8014398:	4604      	mov	r4, r0
 801439a:	68bb      	ldr	r3, [r7, #8]
 801439c:	891b      	ldrh	r3, [r3, #8]
 801439e:	461d      	mov	r5, r3
 80143a0:	68bb      	ldr	r3, [r7, #8]
 80143a2:	68db      	ldr	r3, [r3, #12]
 80143a4:	899b      	ldrh	r3, [r3, #12]
 80143a6:	b29b      	uxth	r3, r3
 80143a8:	4618      	mov	r0, r3
 80143aa:	f7fa fbd1 	bl	800eb50 <lwip_htons>
 80143ae:	4603      	mov	r3, r0
 80143b0:	b2db      	uxtb	r3, r3
 80143b2:	f003 0303 	and.w	r3, r3, #3
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d001      	beq.n	80143be <tcp_free_acked_segments+0xc6>
 80143ba:	2301      	movs	r3, #1
 80143bc:	e000      	b.n	80143c0 <tcp_free_acked_segments+0xc8>
 80143be:	2300      	movs	r3, #0
 80143c0:	442b      	add	r3, r5
 80143c2:	18e2      	adds	r2, r4, r3
 80143c4:	4b09      	ldr	r3, [pc, #36]	; (80143ec <tcp_free_acked_segments+0xf4>)
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	dd9c      	ble.n	8014308 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80143ce:	68bb      	ldr	r3, [r7, #8]
}
 80143d0:	4618      	mov	r0, r3
 80143d2:	3718      	adds	r7, #24
 80143d4:	46bd      	mov	sp, r7
 80143d6:	bdb0      	pop	{r4, r5, r7, pc}
 80143d8:	08023bcc 	.word	0x08023bcc
 80143dc:	08023eb4 	.word	0x08023eb4
 80143e0:	08023c18 	.word	0x08023c18
 80143e4:	20001944 	.word	0x20001944
 80143e8:	08023edc 	.word	0x08023edc
 80143ec:	20001940 	.word	0x20001940

080143f0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80143f0:	b5b0      	push	{r4, r5, r7, lr}
 80143f2:	b094      	sub	sp, #80	; 0x50
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80143f8:	2300      	movs	r3, #0
 80143fa:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d106      	bne.n	8014410 <tcp_receive+0x20>
 8014402:	4ba6      	ldr	r3, [pc, #664]	; (801469c <tcp_receive+0x2ac>)
 8014404:	f240 427b 	movw	r2, #1147	; 0x47b
 8014408:	49a5      	ldr	r1, [pc, #660]	; (80146a0 <tcp_receive+0x2b0>)
 801440a:	48a6      	ldr	r0, [pc, #664]	; (80146a4 <tcp_receive+0x2b4>)
 801440c:	f00b fa2c 	bl	801f868 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	7d1b      	ldrb	r3, [r3, #20]
 8014414:	2b03      	cmp	r3, #3
 8014416:	d806      	bhi.n	8014426 <tcp_receive+0x36>
 8014418:	4ba0      	ldr	r3, [pc, #640]	; (801469c <tcp_receive+0x2ac>)
 801441a:	f240 427c 	movw	r2, #1148	; 0x47c
 801441e:	49a2      	ldr	r1, [pc, #648]	; (80146a8 <tcp_receive+0x2b8>)
 8014420:	48a0      	ldr	r0, [pc, #640]	; (80146a4 <tcp_receive+0x2b4>)
 8014422:	f00b fa21 	bl	801f868 <iprintf>

  if (flags & TCP_ACK) {
 8014426:	4ba1      	ldr	r3, [pc, #644]	; (80146ac <tcp_receive+0x2bc>)
 8014428:	781b      	ldrb	r3, [r3, #0]
 801442a:	f003 0310 	and.w	r3, r3, #16
 801442e:	2b00      	cmp	r3, #0
 8014430:	f000 8263 	beq.w	80148fa <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801443a:	461a      	mov	r2, r3
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014440:	4413      	add	r3, r2
 8014442:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014448:	4b99      	ldr	r3, [pc, #612]	; (80146b0 <tcp_receive+0x2c0>)
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	1ad3      	subs	r3, r2, r3
 801444e:	2b00      	cmp	r3, #0
 8014450:	db1b      	blt.n	801448a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014456:	4b96      	ldr	r3, [pc, #600]	; (80146b0 <tcp_receive+0x2c0>)
 8014458:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801445a:	429a      	cmp	r2, r3
 801445c:	d106      	bne.n	801446c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014462:	4b94      	ldr	r3, [pc, #592]	; (80146b4 <tcp_receive+0x2c4>)
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	1ad3      	subs	r3, r2, r3
 8014468:	2b00      	cmp	r3, #0
 801446a:	db0e      	blt.n	801448a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014470:	4b90      	ldr	r3, [pc, #576]	; (80146b4 <tcp_receive+0x2c4>)
 8014472:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014474:	429a      	cmp	r2, r3
 8014476:	d125      	bne.n	80144c4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014478:	4b8f      	ldr	r3, [pc, #572]	; (80146b8 <tcp_receive+0x2c8>)
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	89db      	ldrh	r3, [r3, #14]
 801447e:	b29a      	uxth	r2, r3
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014486:	429a      	cmp	r2, r3
 8014488:	d91c      	bls.n	80144c4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801448a:	4b8b      	ldr	r3, [pc, #556]	; (80146b8 <tcp_receive+0x2c8>)
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	89db      	ldrh	r3, [r3, #14]
 8014490:	b29a      	uxth	r2, r3
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80144a4:	429a      	cmp	r2, r3
 80144a6:	d205      	bcs.n	80144b4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80144b4:	4b7e      	ldr	r3, [pc, #504]	; (80146b0 <tcp_receive+0x2c0>)
 80144b6:	681a      	ldr	r2, [r3, #0]
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80144bc:	4b7d      	ldr	r3, [pc, #500]	; (80146b4 <tcp_receive+0x2c4>)
 80144be:	681a      	ldr	r2, [r3, #0]
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80144c4:	4b7b      	ldr	r3, [pc, #492]	; (80146b4 <tcp_receive+0x2c4>)
 80144c6:	681a      	ldr	r2, [r3, #0]
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80144cc:	1ad3      	subs	r3, r2, r3
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	dc58      	bgt.n	8014584 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80144d2:	4b7a      	ldr	r3, [pc, #488]	; (80146bc <tcp_receive+0x2cc>)
 80144d4:	881b      	ldrh	r3, [r3, #0]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d14b      	bne.n	8014572 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80144de:	687a      	ldr	r2, [r7, #4]
 80144e0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80144e4:	4413      	add	r3, r2
 80144e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80144e8:	429a      	cmp	r2, r3
 80144ea:	d142      	bne.n	8014572 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	db3d      	blt.n	8014572 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80144fa:	4b6e      	ldr	r3, [pc, #440]	; (80146b4 <tcp_receive+0x2c4>)
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	429a      	cmp	r2, r3
 8014500:	d137      	bne.n	8014572 <tcp_receive+0x182>
              found_dupack = 1;
 8014502:	2301      	movs	r3, #1
 8014504:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801450c:	2bff      	cmp	r3, #255	; 0xff
 801450e:	d007      	beq.n	8014520 <tcp_receive+0x130>
                ++pcb->dupacks;
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014516:	3301      	adds	r3, #1
 8014518:	b2da      	uxtb	r2, r3
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014526:	2b03      	cmp	r3, #3
 8014528:	d91b      	bls.n	8014562 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014534:	4413      	add	r3, r2
 8014536:	b29a      	uxth	r2, r3
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801453e:	429a      	cmp	r2, r3
 8014540:	d30a      	bcc.n	8014558 <tcp_receive+0x168>
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801454c:	4413      	add	r3, r2
 801454e:	b29a      	uxth	r2, r3
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014556:	e004      	b.n	8014562 <tcp_receive+0x172>
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801455e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014568:	2b02      	cmp	r3, #2
 801456a:	d902      	bls.n	8014572 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801456c:	6878      	ldr	r0, [r7, #4]
 801456e:	f002 fb41 	bl	8016bf4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014574:	2b00      	cmp	r3, #0
 8014576:	f040 8160 	bne.w	801483a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	2200      	movs	r2, #0
 801457e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014582:	e15a      	b.n	801483a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014584:	4b4b      	ldr	r3, [pc, #300]	; (80146b4 <tcp_receive+0x2c4>)
 8014586:	681a      	ldr	r2, [r3, #0]
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801458c:	1ad3      	subs	r3, r2, r3
 801458e:	3b01      	subs	r3, #1
 8014590:	2b00      	cmp	r3, #0
 8014592:	f2c0 814d 	blt.w	8014830 <tcp_receive+0x440>
 8014596:	4b47      	ldr	r3, [pc, #284]	; (80146b4 <tcp_receive+0x2c4>)
 8014598:	681a      	ldr	r2, [r3, #0]
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801459e:	1ad3      	subs	r3, r2, r3
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	f300 8145 	bgt.w	8014830 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	8b5b      	ldrh	r3, [r3, #26]
 80145aa:	f003 0304 	and.w	r3, r3, #4
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d010      	beq.n	80145d4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	8b5b      	ldrh	r3, [r3, #26]
 80145b6:	f023 0304 	bic.w	r3, r3, #4
 80145ba:	b29a      	uxth	r2, r3
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	2200      	movs	r2, #0
 80145d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	2200      	movs	r2, #0
 80145d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80145e2:	10db      	asrs	r3, r3, #3
 80145e4:	b21b      	sxth	r3, r3
 80145e6:	b29a      	uxth	r2, r3
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80145ee:	b29b      	uxth	r3, r3
 80145f0:	4413      	add	r3, r2
 80145f2:	b29b      	uxth	r3, r3
 80145f4:	b21a      	sxth	r2, r3
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80145fc:	4b2d      	ldr	r3, [pc, #180]	; (80146b4 <tcp_receive+0x2c4>)
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	b29a      	uxth	r2, r3
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014606:	b29b      	uxth	r3, r3
 8014608:	1ad3      	subs	r3, r2, r3
 801460a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	2200      	movs	r2, #0
 8014610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014614:	4b27      	ldr	r3, [pc, #156]	; (80146b4 <tcp_receive+0x2c4>)
 8014616:	681a      	ldr	r2, [r3, #0]
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	7d1b      	ldrb	r3, [r3, #20]
 8014620:	2b03      	cmp	r3, #3
 8014622:	f240 8096 	bls.w	8014752 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014632:	429a      	cmp	r2, r3
 8014634:	d244      	bcs.n	80146c0 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	8b5b      	ldrh	r3, [r3, #26]
 801463a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801463e:	2b00      	cmp	r3, #0
 8014640:	d001      	beq.n	8014646 <tcp_receive+0x256>
 8014642:	2301      	movs	r3, #1
 8014644:	e000      	b.n	8014648 <tcp_receive+0x258>
 8014646:	2302      	movs	r3, #2
 8014648:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801464c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014650:	b29a      	uxth	r2, r3
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014656:	fb12 f303 	smulbb	r3, r2, r3
 801465a:	b29b      	uxth	r3, r3
 801465c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801465e:	4293      	cmp	r3, r2
 8014660:	bf28      	it	cs
 8014662:	4613      	movcs	r3, r2
 8014664:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801466c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801466e:	4413      	add	r3, r2
 8014670:	b29a      	uxth	r2, r3
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014678:	429a      	cmp	r2, r3
 801467a:	d309      	bcc.n	8014690 <tcp_receive+0x2a0>
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014682:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014684:	4413      	add	r3, r2
 8014686:	b29a      	uxth	r2, r3
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801468e:	e060      	b.n	8014752 <tcp_receive+0x362>
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014696:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801469a:	e05a      	b.n	8014752 <tcp_receive+0x362>
 801469c:	08023bcc 	.word	0x08023bcc
 80146a0:	08023efc 	.word	0x08023efc
 80146a4:	08023c18 	.word	0x08023c18
 80146a8:	08023f18 	.word	0x08023f18
 80146ac:	20001948 	.word	0x20001948
 80146b0:	2000193c 	.word	0x2000193c
 80146b4:	20001940 	.word	0x20001940
 80146b8:	2000192c 	.word	0x2000192c
 80146bc:	20001946 	.word	0x20001946
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80146c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80146c8:	4413      	add	r3, r2
 80146ca:	b29a      	uxth	r2, r3
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80146d2:	429a      	cmp	r2, r3
 80146d4:	d309      	bcc.n	80146ea <tcp_receive+0x2fa>
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80146dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80146de:	4413      	add	r3, r2
 80146e0:	b29a      	uxth	r2, r3
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80146e8:	e004      	b.n	80146f4 <tcp_receive+0x304>
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80146f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014700:	429a      	cmp	r2, r3
 8014702:	d326      	bcc.n	8014752 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014710:	1ad3      	subs	r3, r2, r3
 8014712:	b29a      	uxth	r2, r3
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014724:	4413      	add	r3, r2
 8014726:	b29a      	uxth	r2, r3
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801472e:	429a      	cmp	r2, r3
 8014730:	d30a      	bcc.n	8014748 <tcp_receive+0x358>
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801473c:	4413      	add	r3, r2
 801473e:	b29a      	uxth	r2, r3
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014746:	e004      	b.n	8014752 <tcp_receive+0x362>
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801474e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801475a:	4a98      	ldr	r2, [pc, #608]	; (80149bc <tcp_receive+0x5cc>)
 801475c:	6878      	ldr	r0, [r7, #4]
 801475e:	f7ff fdcb 	bl	80142f8 <tcp_free_acked_segments>
 8014762:	4602      	mov	r2, r0
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014770:	4a93      	ldr	r2, [pc, #588]	; (80149c0 <tcp_receive+0x5d0>)
 8014772:	6878      	ldr	r0, [r7, #4]
 8014774:	f7ff fdc0 	bl	80142f8 <tcp_free_acked_segments>
 8014778:	4602      	mov	r2, r0
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014782:	2b00      	cmp	r3, #0
 8014784:	d104      	bne.n	8014790 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801478c:	861a      	strh	r2, [r3, #48]	; 0x30
 801478e:	e002      	b.n	8014796 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	2200      	movs	r2, #0
 8014794:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	2200      	movs	r2, #0
 801479a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d103      	bne.n	80147ac <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	2200      	movs	r2, #0
 80147a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80147b2:	4b84      	ldr	r3, [pc, #528]	; (80149c4 <tcp_receive+0x5d4>)
 80147b4:	881b      	ldrh	r3, [r3, #0]
 80147b6:	4413      	add	r3, r2
 80147b8:	b29a      	uxth	r2, r3
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	8b5b      	ldrh	r3, [r3, #26]
 80147c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d035      	beq.n	8014838 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d118      	bne.n	8014806 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d00c      	beq.n	80147f6 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147e4:	68db      	ldr	r3, [r3, #12]
 80147e6:	685b      	ldr	r3, [r3, #4]
 80147e8:	4618      	mov	r0, r3
 80147ea:	f7fa f9c6 	bl	800eb7a <lwip_htonl>
 80147ee:	4603      	mov	r3, r0
 80147f0:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	dc20      	bgt.n	8014838 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	8b5b      	ldrh	r3, [r3, #26]
 80147fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80147fe:	b29a      	uxth	r2, r3
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014804:	e018      	b.n	8014838 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801480e:	68db      	ldr	r3, [r3, #12]
 8014810:	685b      	ldr	r3, [r3, #4]
 8014812:	4618      	mov	r0, r3
 8014814:	f7fa f9b1 	bl	800eb7a <lwip_htonl>
 8014818:	4603      	mov	r3, r0
 801481a:	1ae3      	subs	r3, r4, r3
 801481c:	2b00      	cmp	r3, #0
 801481e:	dc0b      	bgt.n	8014838 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	8b5b      	ldrh	r3, [r3, #26]
 8014824:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014828:	b29a      	uxth	r2, r3
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801482e:	e003      	b.n	8014838 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8014830:	6878      	ldr	r0, [r7, #4]
 8014832:	f002 fbcd 	bl	8016fd0 <tcp_send_empty_ack>
 8014836:	e000      	b.n	801483a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014838:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801483e:	2b00      	cmp	r3, #0
 8014840:	d05b      	beq.n	80148fa <tcp_receive+0x50a>
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014846:	4b60      	ldr	r3, [pc, #384]	; (80149c8 <tcp_receive+0x5d8>)
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	1ad3      	subs	r3, r2, r3
 801484c:	2b00      	cmp	r3, #0
 801484e:	da54      	bge.n	80148fa <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8014850:	4b5e      	ldr	r3, [pc, #376]	; (80149cc <tcp_receive+0x5dc>)
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	b29a      	uxth	r2, r3
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801485a:	b29b      	uxth	r3, r3
 801485c:	1ad3      	subs	r3, r2, r3
 801485e:	b29b      	uxth	r3, r3
 8014860:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8014864:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801486e:	10db      	asrs	r3, r3, #3
 8014870:	b21b      	sxth	r3, r3
 8014872:	b29b      	uxth	r3, r3
 8014874:	1ad3      	subs	r3, r2, r3
 8014876:	b29b      	uxth	r3, r3
 8014878:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014882:	b29a      	uxth	r2, r3
 8014884:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014888:	4413      	add	r3, r2
 801488a:	b29b      	uxth	r3, r3
 801488c:	b21a      	sxth	r2, r3
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8014892:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014896:	2b00      	cmp	r3, #0
 8014898:	da05      	bge.n	80148a6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801489a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801489e:	425b      	negs	r3, r3
 80148a0:	b29b      	uxth	r3, r3
 80148a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80148a6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80148b0:	109b      	asrs	r3, r3, #2
 80148b2:	b21b      	sxth	r3, r3
 80148b4:	b29b      	uxth	r3, r3
 80148b6:	1ad3      	subs	r3, r2, r3
 80148b8:	b29b      	uxth	r3, r3
 80148ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80148c4:	b29a      	uxth	r2, r3
 80148c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80148ca:	4413      	add	r3, r2
 80148cc:	b29b      	uxth	r3, r3
 80148ce:	b21a      	sxth	r2, r3
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80148da:	10db      	asrs	r3, r3, #3
 80148dc:	b21b      	sxth	r3, r3
 80148de:	b29a      	uxth	r2, r3
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80148e6:	b29b      	uxth	r3, r3
 80148e8:	4413      	add	r3, r2
 80148ea:	b29b      	uxth	r3, r3
 80148ec:	b21a      	sxth	r2, r3
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	2200      	movs	r2, #0
 80148f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80148fa:	4b35      	ldr	r3, [pc, #212]	; (80149d0 <tcp_receive+0x5e0>)
 80148fc:	881b      	ldrh	r3, [r3, #0]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	f000 84e1 	beq.w	80152c6 <tcp_receive+0xed6>
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	7d1b      	ldrb	r3, [r3, #20]
 8014908:	2b06      	cmp	r3, #6
 801490a:	f200 84dc 	bhi.w	80152c6 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014912:	4b30      	ldr	r3, [pc, #192]	; (80149d4 <tcp_receive+0x5e4>)
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	1ad3      	subs	r3, r2, r3
 8014918:	3b01      	subs	r3, #1
 801491a:	2b00      	cmp	r3, #0
 801491c:	f2c0 808e 	blt.w	8014a3c <tcp_receive+0x64c>
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014924:	4b2a      	ldr	r3, [pc, #168]	; (80149d0 <tcp_receive+0x5e0>)
 8014926:	881b      	ldrh	r3, [r3, #0]
 8014928:	4619      	mov	r1, r3
 801492a:	4b2a      	ldr	r3, [pc, #168]	; (80149d4 <tcp_receive+0x5e4>)
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	440b      	add	r3, r1
 8014930:	1ad3      	subs	r3, r2, r3
 8014932:	3301      	adds	r3, #1
 8014934:	2b00      	cmp	r3, #0
 8014936:	f300 8081 	bgt.w	8014a3c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801493a:	4b27      	ldr	r3, [pc, #156]	; (80149d8 <tcp_receive+0x5e8>)
 801493c:	685b      	ldr	r3, [r3, #4]
 801493e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014944:	4b23      	ldr	r3, [pc, #140]	; (80149d4 <tcp_receive+0x5e4>)
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	1ad3      	subs	r3, r2, r3
 801494a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801494c:	4b22      	ldr	r3, [pc, #136]	; (80149d8 <tcp_receive+0x5e8>)
 801494e:	685b      	ldr	r3, [r3, #4]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d106      	bne.n	8014962 <tcp_receive+0x572>
 8014954:	4b21      	ldr	r3, [pc, #132]	; (80149dc <tcp_receive+0x5ec>)
 8014956:	f240 5294 	movw	r2, #1428	; 0x594
 801495a:	4921      	ldr	r1, [pc, #132]	; (80149e0 <tcp_receive+0x5f0>)
 801495c:	4821      	ldr	r0, [pc, #132]	; (80149e4 <tcp_receive+0x5f4>)
 801495e:	f00a ff83 	bl	801f868 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8014962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014964:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014968:	4293      	cmp	r3, r2
 801496a:	d906      	bls.n	801497a <tcp_receive+0x58a>
 801496c:	4b1b      	ldr	r3, [pc, #108]	; (80149dc <tcp_receive+0x5ec>)
 801496e:	f240 5295 	movw	r2, #1429	; 0x595
 8014972:	491d      	ldr	r1, [pc, #116]	; (80149e8 <tcp_receive+0x5f8>)
 8014974:	481b      	ldr	r0, [pc, #108]	; (80149e4 <tcp_receive+0x5f4>)
 8014976:	f00a ff77 	bl	801f868 <iprintf>
      off = (u16_t)off32;
 801497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801497c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8014980:	4b15      	ldr	r3, [pc, #84]	; (80149d8 <tcp_receive+0x5e8>)
 8014982:	685b      	ldr	r3, [r3, #4]
 8014984:	891b      	ldrh	r3, [r3, #8]
 8014986:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801498a:	429a      	cmp	r2, r3
 801498c:	d906      	bls.n	801499c <tcp_receive+0x5ac>
 801498e:	4b13      	ldr	r3, [pc, #76]	; (80149dc <tcp_receive+0x5ec>)
 8014990:	f240 5297 	movw	r2, #1431	; 0x597
 8014994:	4915      	ldr	r1, [pc, #84]	; (80149ec <tcp_receive+0x5fc>)
 8014996:	4813      	ldr	r0, [pc, #76]	; (80149e4 <tcp_receive+0x5f4>)
 8014998:	f00a ff66 	bl	801f868 <iprintf>
      inseg.len -= off;
 801499c:	4b0e      	ldr	r3, [pc, #56]	; (80149d8 <tcp_receive+0x5e8>)
 801499e:	891a      	ldrh	r2, [r3, #8]
 80149a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80149a4:	1ad3      	subs	r3, r2, r3
 80149a6:	b29a      	uxth	r2, r3
 80149a8:	4b0b      	ldr	r3, [pc, #44]	; (80149d8 <tcp_receive+0x5e8>)
 80149aa:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80149ac:	4b0a      	ldr	r3, [pc, #40]	; (80149d8 <tcp_receive+0x5e8>)
 80149ae:	685b      	ldr	r3, [r3, #4]
 80149b0:	891a      	ldrh	r2, [r3, #8]
 80149b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80149b6:	1ad3      	subs	r3, r2, r3
 80149b8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80149ba:	e029      	b.n	8014a10 <tcp_receive+0x620>
 80149bc:	08023f34 	.word	0x08023f34
 80149c0:	08023f3c 	.word	0x08023f3c
 80149c4:	20001944 	.word	0x20001944
 80149c8:	20001940 	.word	0x20001940
 80149cc:	20008940 	.word	0x20008940
 80149d0:	20001946 	.word	0x20001946
 80149d4:	2000193c 	.word	0x2000193c
 80149d8:	2000191c 	.word	0x2000191c
 80149dc:	08023bcc 	.word	0x08023bcc
 80149e0:	08023f44 	.word	0x08023f44
 80149e4:	08023c18 	.word	0x08023c18
 80149e8:	08023f54 	.word	0x08023f54
 80149ec:	08023f64 	.word	0x08023f64
        off -= p->len;
 80149f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80149f2:	895b      	ldrh	r3, [r3, #10]
 80149f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80149f8:	1ad3      	subs	r3, r2, r3
 80149fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80149fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a00:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014a02:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8014a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a06:	2200      	movs	r2, #0
 8014a08:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8014a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8014a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a12:	895b      	ldrh	r3, [r3, #10]
 8014a14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014a18:	429a      	cmp	r2, r3
 8014a1a:	d8e9      	bhi.n	80149f0 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8014a1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014a20:	4619      	mov	r1, r3
 8014a22:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014a24:	f7fb feec 	bl	8010800 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a2c:	4a91      	ldr	r2, [pc, #580]	; (8014c74 <tcp_receive+0x884>)
 8014a2e:	6013      	str	r3, [r2, #0]
 8014a30:	4b91      	ldr	r3, [pc, #580]	; (8014c78 <tcp_receive+0x888>)
 8014a32:	68db      	ldr	r3, [r3, #12]
 8014a34:	4a8f      	ldr	r2, [pc, #572]	; (8014c74 <tcp_receive+0x884>)
 8014a36:	6812      	ldr	r2, [r2, #0]
 8014a38:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014a3a:	e00d      	b.n	8014a58 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014a3c:	4b8d      	ldr	r3, [pc, #564]	; (8014c74 <tcp_receive+0x884>)
 8014a3e:	681a      	ldr	r2, [r3, #0]
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a44:	1ad3      	subs	r3, r2, r3
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	da06      	bge.n	8014a58 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	8b5b      	ldrh	r3, [r3, #26]
 8014a4e:	f043 0302 	orr.w	r3, r3, #2
 8014a52:	b29a      	uxth	r2, r3
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014a58:	4b86      	ldr	r3, [pc, #536]	; (8014c74 <tcp_receive+0x884>)
 8014a5a:	681a      	ldr	r2, [r3, #0]
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a60:	1ad3      	subs	r3, r2, r3
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	f2c0 842a 	blt.w	80152bc <tcp_receive+0xecc>
 8014a68:	4b82      	ldr	r3, [pc, #520]	; (8014c74 <tcp_receive+0x884>)
 8014a6a:	681a      	ldr	r2, [r3, #0]
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a70:	6879      	ldr	r1, [r7, #4]
 8014a72:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014a74:	440b      	add	r3, r1
 8014a76:	1ad3      	subs	r3, r2, r3
 8014a78:	3301      	adds	r3, #1
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	f300 841e 	bgt.w	80152bc <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014a84:	4b7b      	ldr	r3, [pc, #492]	; (8014c74 <tcp_receive+0x884>)
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	429a      	cmp	r2, r3
 8014a8a:	f040 829a 	bne.w	8014fc2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8014a8e:	4b7a      	ldr	r3, [pc, #488]	; (8014c78 <tcp_receive+0x888>)
 8014a90:	891c      	ldrh	r4, [r3, #8]
 8014a92:	4b79      	ldr	r3, [pc, #484]	; (8014c78 <tcp_receive+0x888>)
 8014a94:	68db      	ldr	r3, [r3, #12]
 8014a96:	899b      	ldrh	r3, [r3, #12]
 8014a98:	b29b      	uxth	r3, r3
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	f7fa f858 	bl	800eb50 <lwip_htons>
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	b2db      	uxtb	r3, r3
 8014aa4:	f003 0303 	and.w	r3, r3, #3
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d001      	beq.n	8014ab0 <tcp_receive+0x6c0>
 8014aac:	2301      	movs	r3, #1
 8014aae:	e000      	b.n	8014ab2 <tcp_receive+0x6c2>
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	4423      	add	r3, r4
 8014ab4:	b29a      	uxth	r2, r3
 8014ab6:	4b71      	ldr	r3, [pc, #452]	; (8014c7c <tcp_receive+0x88c>)
 8014ab8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014abe:	4b6f      	ldr	r3, [pc, #444]	; (8014c7c <tcp_receive+0x88c>)
 8014ac0:	881b      	ldrh	r3, [r3, #0]
 8014ac2:	429a      	cmp	r2, r3
 8014ac4:	d275      	bcs.n	8014bb2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014ac6:	4b6c      	ldr	r3, [pc, #432]	; (8014c78 <tcp_receive+0x888>)
 8014ac8:	68db      	ldr	r3, [r3, #12]
 8014aca:	899b      	ldrh	r3, [r3, #12]
 8014acc:	b29b      	uxth	r3, r3
 8014ace:	4618      	mov	r0, r3
 8014ad0:	f7fa f83e 	bl	800eb50 <lwip_htons>
 8014ad4:	4603      	mov	r3, r0
 8014ad6:	b2db      	uxtb	r3, r3
 8014ad8:	f003 0301 	and.w	r3, r3, #1
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d01f      	beq.n	8014b20 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8014ae0:	4b65      	ldr	r3, [pc, #404]	; (8014c78 <tcp_receive+0x888>)
 8014ae2:	68db      	ldr	r3, [r3, #12]
 8014ae4:	899b      	ldrh	r3, [r3, #12]
 8014ae6:	b29b      	uxth	r3, r3
 8014ae8:	b21b      	sxth	r3, r3
 8014aea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014aee:	b21c      	sxth	r4, r3
 8014af0:	4b61      	ldr	r3, [pc, #388]	; (8014c78 <tcp_receive+0x888>)
 8014af2:	68db      	ldr	r3, [r3, #12]
 8014af4:	899b      	ldrh	r3, [r3, #12]
 8014af6:	b29b      	uxth	r3, r3
 8014af8:	4618      	mov	r0, r3
 8014afa:	f7fa f829 	bl	800eb50 <lwip_htons>
 8014afe:	4603      	mov	r3, r0
 8014b00:	b2db      	uxtb	r3, r3
 8014b02:	b29b      	uxth	r3, r3
 8014b04:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014b08:	b29b      	uxth	r3, r3
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	f7fa f820 	bl	800eb50 <lwip_htons>
 8014b10:	4603      	mov	r3, r0
 8014b12:	b21b      	sxth	r3, r3
 8014b14:	4323      	orrs	r3, r4
 8014b16:	b21a      	sxth	r2, r3
 8014b18:	4b57      	ldr	r3, [pc, #348]	; (8014c78 <tcp_receive+0x888>)
 8014b1a:	68db      	ldr	r3, [r3, #12]
 8014b1c:	b292      	uxth	r2, r2
 8014b1e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014b24:	4b54      	ldr	r3, [pc, #336]	; (8014c78 <tcp_receive+0x888>)
 8014b26:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014b28:	4b53      	ldr	r3, [pc, #332]	; (8014c78 <tcp_receive+0x888>)
 8014b2a:	68db      	ldr	r3, [r3, #12]
 8014b2c:	899b      	ldrh	r3, [r3, #12]
 8014b2e:	b29b      	uxth	r3, r3
 8014b30:	4618      	mov	r0, r3
 8014b32:	f7fa f80d 	bl	800eb50 <lwip_htons>
 8014b36:	4603      	mov	r3, r0
 8014b38:	b2db      	uxtb	r3, r3
 8014b3a:	f003 0302 	and.w	r3, r3, #2
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d005      	beq.n	8014b4e <tcp_receive+0x75e>
            inseg.len -= 1;
 8014b42:	4b4d      	ldr	r3, [pc, #308]	; (8014c78 <tcp_receive+0x888>)
 8014b44:	891b      	ldrh	r3, [r3, #8]
 8014b46:	3b01      	subs	r3, #1
 8014b48:	b29a      	uxth	r2, r3
 8014b4a:	4b4b      	ldr	r3, [pc, #300]	; (8014c78 <tcp_receive+0x888>)
 8014b4c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8014b4e:	4b4a      	ldr	r3, [pc, #296]	; (8014c78 <tcp_receive+0x888>)
 8014b50:	685b      	ldr	r3, [r3, #4]
 8014b52:	4a49      	ldr	r2, [pc, #292]	; (8014c78 <tcp_receive+0x888>)
 8014b54:	8912      	ldrh	r2, [r2, #8]
 8014b56:	4611      	mov	r1, r2
 8014b58:	4618      	mov	r0, r3
 8014b5a:	f7fb fd51 	bl	8010600 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8014b5e:	4b46      	ldr	r3, [pc, #280]	; (8014c78 <tcp_receive+0x888>)
 8014b60:	891c      	ldrh	r4, [r3, #8]
 8014b62:	4b45      	ldr	r3, [pc, #276]	; (8014c78 <tcp_receive+0x888>)
 8014b64:	68db      	ldr	r3, [r3, #12]
 8014b66:	899b      	ldrh	r3, [r3, #12]
 8014b68:	b29b      	uxth	r3, r3
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	f7f9 fff0 	bl	800eb50 <lwip_htons>
 8014b70:	4603      	mov	r3, r0
 8014b72:	b2db      	uxtb	r3, r3
 8014b74:	f003 0303 	and.w	r3, r3, #3
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d001      	beq.n	8014b80 <tcp_receive+0x790>
 8014b7c:	2301      	movs	r3, #1
 8014b7e:	e000      	b.n	8014b82 <tcp_receive+0x792>
 8014b80:	2300      	movs	r3, #0
 8014b82:	4423      	add	r3, r4
 8014b84:	b29a      	uxth	r2, r3
 8014b86:	4b3d      	ldr	r3, [pc, #244]	; (8014c7c <tcp_receive+0x88c>)
 8014b88:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014b8a:	4b3c      	ldr	r3, [pc, #240]	; (8014c7c <tcp_receive+0x88c>)
 8014b8c:	881b      	ldrh	r3, [r3, #0]
 8014b8e:	461a      	mov	r2, r3
 8014b90:	4b38      	ldr	r3, [pc, #224]	; (8014c74 <tcp_receive+0x884>)
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	441a      	add	r2, r3
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b9a:	6879      	ldr	r1, [r7, #4]
 8014b9c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014b9e:	440b      	add	r3, r1
 8014ba0:	429a      	cmp	r2, r3
 8014ba2:	d006      	beq.n	8014bb2 <tcp_receive+0x7c2>
 8014ba4:	4b36      	ldr	r3, [pc, #216]	; (8014c80 <tcp_receive+0x890>)
 8014ba6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8014baa:	4936      	ldr	r1, [pc, #216]	; (8014c84 <tcp_receive+0x894>)
 8014bac:	4836      	ldr	r0, [pc, #216]	; (8014c88 <tcp_receive+0x898>)
 8014bae:	f00a fe5b 	bl	801f868 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	f000 80e7 	beq.w	8014d8a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014bbc:	4b2e      	ldr	r3, [pc, #184]	; (8014c78 <tcp_receive+0x888>)
 8014bbe:	68db      	ldr	r3, [r3, #12]
 8014bc0:	899b      	ldrh	r3, [r3, #12]
 8014bc2:	b29b      	uxth	r3, r3
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	f7f9 ffc3 	bl	800eb50 <lwip_htons>
 8014bca:	4603      	mov	r3, r0
 8014bcc:	b2db      	uxtb	r3, r3
 8014bce:	f003 0301 	and.w	r3, r3, #1
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d010      	beq.n	8014bf8 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8014bd6:	e00a      	b.n	8014bee <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014bdc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014be2:	681a      	ldr	r2, [r3, #0]
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8014be8:	68f8      	ldr	r0, [r7, #12]
 8014bea:	f7fd fcc8 	bl	801257e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d1f0      	bne.n	8014bd8 <tcp_receive+0x7e8>
 8014bf6:	e0c8      	b.n	8014d8a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8014bfe:	e052      	b.n	8014ca6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c02:	68db      	ldr	r3, [r3, #12]
 8014c04:	899b      	ldrh	r3, [r3, #12]
 8014c06:	b29b      	uxth	r3, r3
 8014c08:	4618      	mov	r0, r3
 8014c0a:	f7f9 ffa1 	bl	800eb50 <lwip_htons>
 8014c0e:	4603      	mov	r3, r0
 8014c10:	b2db      	uxtb	r3, r3
 8014c12:	f003 0301 	and.w	r3, r3, #1
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d03d      	beq.n	8014c96 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8014c1a:	4b17      	ldr	r3, [pc, #92]	; (8014c78 <tcp_receive+0x888>)
 8014c1c:	68db      	ldr	r3, [r3, #12]
 8014c1e:	899b      	ldrh	r3, [r3, #12]
 8014c20:	b29b      	uxth	r3, r3
 8014c22:	4618      	mov	r0, r3
 8014c24:	f7f9 ff94 	bl	800eb50 <lwip_htons>
 8014c28:	4603      	mov	r3, r0
 8014c2a:	b2db      	uxtb	r3, r3
 8014c2c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d130      	bne.n	8014c96 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8014c34:	4b10      	ldr	r3, [pc, #64]	; (8014c78 <tcp_receive+0x888>)
 8014c36:	68db      	ldr	r3, [r3, #12]
 8014c38:	899b      	ldrh	r3, [r3, #12]
 8014c3a:	b29c      	uxth	r4, r3
 8014c3c:	2001      	movs	r0, #1
 8014c3e:	f7f9 ff87 	bl	800eb50 <lwip_htons>
 8014c42:	4603      	mov	r3, r0
 8014c44:	461a      	mov	r2, r3
 8014c46:	4b0c      	ldr	r3, [pc, #48]	; (8014c78 <tcp_receive+0x888>)
 8014c48:	68db      	ldr	r3, [r3, #12]
 8014c4a:	4322      	orrs	r2, r4
 8014c4c:	b292      	uxth	r2, r2
 8014c4e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8014c50:	4b09      	ldr	r3, [pc, #36]	; (8014c78 <tcp_receive+0x888>)
 8014c52:	891c      	ldrh	r4, [r3, #8]
 8014c54:	4b08      	ldr	r3, [pc, #32]	; (8014c78 <tcp_receive+0x888>)
 8014c56:	68db      	ldr	r3, [r3, #12]
 8014c58:	899b      	ldrh	r3, [r3, #12]
 8014c5a:	b29b      	uxth	r3, r3
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	f7f9 ff77 	bl	800eb50 <lwip_htons>
 8014c62:	4603      	mov	r3, r0
 8014c64:	b2db      	uxtb	r3, r3
 8014c66:	f003 0303 	and.w	r3, r3, #3
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d00e      	beq.n	8014c8c <tcp_receive+0x89c>
 8014c6e:	2301      	movs	r3, #1
 8014c70:	e00d      	b.n	8014c8e <tcp_receive+0x89e>
 8014c72:	bf00      	nop
 8014c74:	2000193c 	.word	0x2000193c
 8014c78:	2000191c 	.word	0x2000191c
 8014c7c:	20001946 	.word	0x20001946
 8014c80:	08023bcc 	.word	0x08023bcc
 8014c84:	08023f74 	.word	0x08023f74
 8014c88:	08023c18 	.word	0x08023c18
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	4423      	add	r3, r4
 8014c90:	b29a      	uxth	r2, r3
 8014c92:	4b98      	ldr	r3, [pc, #608]	; (8014ef4 <tcp_receive+0xb04>)
 8014c94:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8014c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c98:	613b      	str	r3, [r7, #16]
              next = next->next;
 8014c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8014ca0:	6938      	ldr	r0, [r7, #16]
 8014ca2:	f7fd fc6c 	bl	801257e <tcp_seg_free>
            while (next &&
 8014ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d00e      	beq.n	8014cca <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014cac:	4b91      	ldr	r3, [pc, #580]	; (8014ef4 <tcp_receive+0xb04>)
 8014cae:	881b      	ldrh	r3, [r3, #0]
 8014cb0:	461a      	mov	r2, r3
 8014cb2:	4b91      	ldr	r3, [pc, #580]	; (8014ef8 <tcp_receive+0xb08>)
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	441a      	add	r2, r3
 8014cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cba:	68db      	ldr	r3, [r3, #12]
 8014cbc:	685b      	ldr	r3, [r3, #4]
 8014cbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014cc0:	8909      	ldrh	r1, [r1, #8]
 8014cc2:	440b      	add	r3, r1
 8014cc4:	1ad3      	subs	r3, r2, r3
            while (next &&
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	da9a      	bge.n	8014c00 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8014cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d059      	beq.n	8014d84 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8014cd0:	4b88      	ldr	r3, [pc, #544]	; (8014ef4 <tcp_receive+0xb04>)
 8014cd2:	881b      	ldrh	r3, [r3, #0]
 8014cd4:	461a      	mov	r2, r3
 8014cd6:	4b88      	ldr	r3, [pc, #544]	; (8014ef8 <tcp_receive+0xb08>)
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	441a      	add	r2, r3
 8014cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cde:	68db      	ldr	r3, [r3, #12]
 8014ce0:	685b      	ldr	r3, [r3, #4]
 8014ce2:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	dd4d      	ble.n	8014d84 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cea:	68db      	ldr	r3, [r3, #12]
 8014cec:	685b      	ldr	r3, [r3, #4]
 8014cee:	b29a      	uxth	r2, r3
 8014cf0:	4b81      	ldr	r3, [pc, #516]	; (8014ef8 <tcp_receive+0xb08>)
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	b29b      	uxth	r3, r3
 8014cf6:	1ad3      	subs	r3, r2, r3
 8014cf8:	b29a      	uxth	r2, r3
 8014cfa:	4b80      	ldr	r3, [pc, #512]	; (8014efc <tcp_receive+0xb0c>)
 8014cfc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014cfe:	4b7f      	ldr	r3, [pc, #508]	; (8014efc <tcp_receive+0xb0c>)
 8014d00:	68db      	ldr	r3, [r3, #12]
 8014d02:	899b      	ldrh	r3, [r3, #12]
 8014d04:	b29b      	uxth	r3, r3
 8014d06:	4618      	mov	r0, r3
 8014d08:	f7f9 ff22 	bl	800eb50 <lwip_htons>
 8014d0c:	4603      	mov	r3, r0
 8014d0e:	b2db      	uxtb	r3, r3
 8014d10:	f003 0302 	and.w	r3, r3, #2
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d005      	beq.n	8014d24 <tcp_receive+0x934>
                inseg.len -= 1;
 8014d18:	4b78      	ldr	r3, [pc, #480]	; (8014efc <tcp_receive+0xb0c>)
 8014d1a:	891b      	ldrh	r3, [r3, #8]
 8014d1c:	3b01      	subs	r3, #1
 8014d1e:	b29a      	uxth	r2, r3
 8014d20:	4b76      	ldr	r3, [pc, #472]	; (8014efc <tcp_receive+0xb0c>)
 8014d22:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8014d24:	4b75      	ldr	r3, [pc, #468]	; (8014efc <tcp_receive+0xb0c>)
 8014d26:	685b      	ldr	r3, [r3, #4]
 8014d28:	4a74      	ldr	r2, [pc, #464]	; (8014efc <tcp_receive+0xb0c>)
 8014d2a:	8912      	ldrh	r2, [r2, #8]
 8014d2c:	4611      	mov	r1, r2
 8014d2e:	4618      	mov	r0, r3
 8014d30:	f7fb fc66 	bl	8010600 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8014d34:	4b71      	ldr	r3, [pc, #452]	; (8014efc <tcp_receive+0xb0c>)
 8014d36:	891c      	ldrh	r4, [r3, #8]
 8014d38:	4b70      	ldr	r3, [pc, #448]	; (8014efc <tcp_receive+0xb0c>)
 8014d3a:	68db      	ldr	r3, [r3, #12]
 8014d3c:	899b      	ldrh	r3, [r3, #12]
 8014d3e:	b29b      	uxth	r3, r3
 8014d40:	4618      	mov	r0, r3
 8014d42:	f7f9 ff05 	bl	800eb50 <lwip_htons>
 8014d46:	4603      	mov	r3, r0
 8014d48:	b2db      	uxtb	r3, r3
 8014d4a:	f003 0303 	and.w	r3, r3, #3
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d001      	beq.n	8014d56 <tcp_receive+0x966>
 8014d52:	2301      	movs	r3, #1
 8014d54:	e000      	b.n	8014d58 <tcp_receive+0x968>
 8014d56:	2300      	movs	r3, #0
 8014d58:	4423      	add	r3, r4
 8014d5a:	b29a      	uxth	r2, r3
 8014d5c:	4b65      	ldr	r3, [pc, #404]	; (8014ef4 <tcp_receive+0xb04>)
 8014d5e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014d60:	4b64      	ldr	r3, [pc, #400]	; (8014ef4 <tcp_receive+0xb04>)
 8014d62:	881b      	ldrh	r3, [r3, #0]
 8014d64:	461a      	mov	r2, r3
 8014d66:	4b64      	ldr	r3, [pc, #400]	; (8014ef8 <tcp_receive+0xb08>)
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	441a      	add	r2, r3
 8014d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d6e:	68db      	ldr	r3, [r3, #12]
 8014d70:	685b      	ldr	r3, [r3, #4]
 8014d72:	429a      	cmp	r2, r3
 8014d74:	d006      	beq.n	8014d84 <tcp_receive+0x994>
 8014d76:	4b62      	ldr	r3, [pc, #392]	; (8014f00 <tcp_receive+0xb10>)
 8014d78:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8014d7c:	4961      	ldr	r1, [pc, #388]	; (8014f04 <tcp_receive+0xb14>)
 8014d7e:	4862      	ldr	r0, [pc, #392]	; (8014f08 <tcp_receive+0xb18>)
 8014d80:	f00a fd72 	bl	801f868 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014d88:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014d8a:	4b5a      	ldr	r3, [pc, #360]	; (8014ef4 <tcp_receive+0xb04>)
 8014d8c:	881b      	ldrh	r3, [r3, #0]
 8014d8e:	461a      	mov	r2, r3
 8014d90:	4b59      	ldr	r3, [pc, #356]	; (8014ef8 <tcp_receive+0xb08>)
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	441a      	add	r2, r3
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014d9e:	4b55      	ldr	r3, [pc, #340]	; (8014ef4 <tcp_receive+0xb04>)
 8014da0:	881b      	ldrh	r3, [r3, #0]
 8014da2:	429a      	cmp	r2, r3
 8014da4:	d206      	bcs.n	8014db4 <tcp_receive+0x9c4>
 8014da6:	4b56      	ldr	r3, [pc, #344]	; (8014f00 <tcp_receive+0xb10>)
 8014da8:	f240 6207 	movw	r2, #1543	; 0x607
 8014dac:	4957      	ldr	r1, [pc, #348]	; (8014f0c <tcp_receive+0xb1c>)
 8014dae:	4856      	ldr	r0, [pc, #344]	; (8014f08 <tcp_receive+0xb18>)
 8014db0:	f00a fd5a 	bl	801f868 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014db8:	4b4e      	ldr	r3, [pc, #312]	; (8014ef4 <tcp_receive+0xb04>)
 8014dba:	881b      	ldrh	r3, [r3, #0]
 8014dbc:	1ad3      	subs	r3, r2, r3
 8014dbe:	b29a      	uxth	r2, r3
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014dc4:	6878      	ldr	r0, [r7, #4]
 8014dc6:	f7fc feb5 	bl	8011b34 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8014dca:	4b4c      	ldr	r3, [pc, #304]	; (8014efc <tcp_receive+0xb0c>)
 8014dcc:	685b      	ldr	r3, [r3, #4]
 8014dce:	891b      	ldrh	r3, [r3, #8]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d006      	beq.n	8014de2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8014dd4:	4b49      	ldr	r3, [pc, #292]	; (8014efc <tcp_receive+0xb0c>)
 8014dd6:	685b      	ldr	r3, [r3, #4]
 8014dd8:	4a4d      	ldr	r2, [pc, #308]	; (8014f10 <tcp_receive+0xb20>)
 8014dda:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014ddc:	4b47      	ldr	r3, [pc, #284]	; (8014efc <tcp_receive+0xb0c>)
 8014dde:	2200      	movs	r2, #0
 8014de0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014de2:	4b46      	ldr	r3, [pc, #280]	; (8014efc <tcp_receive+0xb0c>)
 8014de4:	68db      	ldr	r3, [r3, #12]
 8014de6:	899b      	ldrh	r3, [r3, #12]
 8014de8:	b29b      	uxth	r3, r3
 8014dea:	4618      	mov	r0, r3
 8014dec:	f7f9 feb0 	bl	800eb50 <lwip_htons>
 8014df0:	4603      	mov	r3, r0
 8014df2:	b2db      	uxtb	r3, r3
 8014df4:	f003 0301 	and.w	r3, r3, #1
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	f000 80b8 	beq.w	8014f6e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8014dfe:	4b45      	ldr	r3, [pc, #276]	; (8014f14 <tcp_receive+0xb24>)
 8014e00:	781b      	ldrb	r3, [r3, #0]
 8014e02:	f043 0320 	orr.w	r3, r3, #32
 8014e06:	b2da      	uxtb	r2, r3
 8014e08:	4b42      	ldr	r3, [pc, #264]	; (8014f14 <tcp_receive+0xb24>)
 8014e0a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014e0c:	e0af      	b.n	8014f6e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014e12:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014e18:	68db      	ldr	r3, [r3, #12]
 8014e1a:	685b      	ldr	r3, [r3, #4]
 8014e1c:	4a36      	ldr	r2, [pc, #216]	; (8014ef8 <tcp_receive+0xb08>)
 8014e1e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014e20:	68bb      	ldr	r3, [r7, #8]
 8014e22:	891b      	ldrh	r3, [r3, #8]
 8014e24:	461c      	mov	r4, r3
 8014e26:	68bb      	ldr	r3, [r7, #8]
 8014e28:	68db      	ldr	r3, [r3, #12]
 8014e2a:	899b      	ldrh	r3, [r3, #12]
 8014e2c:	b29b      	uxth	r3, r3
 8014e2e:	4618      	mov	r0, r3
 8014e30:	f7f9 fe8e 	bl	800eb50 <lwip_htons>
 8014e34:	4603      	mov	r3, r0
 8014e36:	b2db      	uxtb	r3, r3
 8014e38:	f003 0303 	and.w	r3, r3, #3
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d001      	beq.n	8014e44 <tcp_receive+0xa54>
 8014e40:	2301      	movs	r3, #1
 8014e42:	e000      	b.n	8014e46 <tcp_receive+0xa56>
 8014e44:	2300      	movs	r3, #0
 8014e46:	191a      	adds	r2, r3, r4
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e4c:	441a      	add	r2, r3
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014e56:	461c      	mov	r4, r3
 8014e58:	68bb      	ldr	r3, [r7, #8]
 8014e5a:	891b      	ldrh	r3, [r3, #8]
 8014e5c:	461d      	mov	r5, r3
 8014e5e:	68bb      	ldr	r3, [r7, #8]
 8014e60:	68db      	ldr	r3, [r3, #12]
 8014e62:	899b      	ldrh	r3, [r3, #12]
 8014e64:	b29b      	uxth	r3, r3
 8014e66:	4618      	mov	r0, r3
 8014e68:	f7f9 fe72 	bl	800eb50 <lwip_htons>
 8014e6c:	4603      	mov	r3, r0
 8014e6e:	b2db      	uxtb	r3, r3
 8014e70:	f003 0303 	and.w	r3, r3, #3
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d001      	beq.n	8014e7c <tcp_receive+0xa8c>
 8014e78:	2301      	movs	r3, #1
 8014e7a:	e000      	b.n	8014e7e <tcp_receive+0xa8e>
 8014e7c:	2300      	movs	r3, #0
 8014e7e:	442b      	add	r3, r5
 8014e80:	429c      	cmp	r4, r3
 8014e82:	d206      	bcs.n	8014e92 <tcp_receive+0xaa2>
 8014e84:	4b1e      	ldr	r3, [pc, #120]	; (8014f00 <tcp_receive+0xb10>)
 8014e86:	f240 622b 	movw	r2, #1579	; 0x62b
 8014e8a:	4923      	ldr	r1, [pc, #140]	; (8014f18 <tcp_receive+0xb28>)
 8014e8c:	481e      	ldr	r0, [pc, #120]	; (8014f08 <tcp_receive+0xb18>)
 8014e8e:	f00a fceb 	bl	801f868 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014e92:	68bb      	ldr	r3, [r7, #8]
 8014e94:	891b      	ldrh	r3, [r3, #8]
 8014e96:	461c      	mov	r4, r3
 8014e98:	68bb      	ldr	r3, [r7, #8]
 8014e9a:	68db      	ldr	r3, [r3, #12]
 8014e9c:	899b      	ldrh	r3, [r3, #12]
 8014e9e:	b29b      	uxth	r3, r3
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	f7f9 fe55 	bl	800eb50 <lwip_htons>
 8014ea6:	4603      	mov	r3, r0
 8014ea8:	b2db      	uxtb	r3, r3
 8014eaa:	f003 0303 	and.w	r3, r3, #3
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d001      	beq.n	8014eb6 <tcp_receive+0xac6>
 8014eb2:	2301      	movs	r3, #1
 8014eb4:	e000      	b.n	8014eb8 <tcp_receive+0xac8>
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	1919      	adds	r1, r3, r4
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014ebe:	b28b      	uxth	r3, r1
 8014ec0:	1ad3      	subs	r3, r2, r3
 8014ec2:	b29a      	uxth	r2, r3
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014ec8:	6878      	ldr	r0, [r7, #4]
 8014eca:	f7fc fe33 	bl	8011b34 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8014ece:	68bb      	ldr	r3, [r7, #8]
 8014ed0:	685b      	ldr	r3, [r3, #4]
 8014ed2:	891b      	ldrh	r3, [r3, #8]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d028      	beq.n	8014f2a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014ed8:	4b0d      	ldr	r3, [pc, #52]	; (8014f10 <tcp_receive+0xb20>)
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d01d      	beq.n	8014f1c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8014ee0:	4b0b      	ldr	r3, [pc, #44]	; (8014f10 <tcp_receive+0xb20>)
 8014ee2:	681a      	ldr	r2, [r3, #0]
 8014ee4:	68bb      	ldr	r3, [r7, #8]
 8014ee6:	685b      	ldr	r3, [r3, #4]
 8014ee8:	4619      	mov	r1, r3
 8014eea:	4610      	mov	r0, r2
 8014eec:	f7fb fe0e 	bl	8010b0c <pbuf_cat>
 8014ef0:	e018      	b.n	8014f24 <tcp_receive+0xb34>
 8014ef2:	bf00      	nop
 8014ef4:	20001946 	.word	0x20001946
 8014ef8:	2000193c 	.word	0x2000193c
 8014efc:	2000191c 	.word	0x2000191c
 8014f00:	08023bcc 	.word	0x08023bcc
 8014f04:	08023fac 	.word	0x08023fac
 8014f08:	08023c18 	.word	0x08023c18
 8014f0c:	08023fe8 	.word	0x08023fe8
 8014f10:	2000194c 	.word	0x2000194c
 8014f14:	20001949 	.word	0x20001949
 8014f18:	08024008 	.word	0x08024008
            } else {
              recv_data = cseg->p;
 8014f1c:	68bb      	ldr	r3, [r7, #8]
 8014f1e:	685b      	ldr	r3, [r3, #4]
 8014f20:	4a70      	ldr	r2, [pc, #448]	; (80150e4 <tcp_receive+0xcf4>)
 8014f22:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014f24:	68bb      	ldr	r3, [r7, #8]
 8014f26:	2200      	movs	r2, #0
 8014f28:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014f2a:	68bb      	ldr	r3, [r7, #8]
 8014f2c:	68db      	ldr	r3, [r3, #12]
 8014f2e:	899b      	ldrh	r3, [r3, #12]
 8014f30:	b29b      	uxth	r3, r3
 8014f32:	4618      	mov	r0, r3
 8014f34:	f7f9 fe0c 	bl	800eb50 <lwip_htons>
 8014f38:	4603      	mov	r3, r0
 8014f3a:	b2db      	uxtb	r3, r3
 8014f3c:	f003 0301 	and.w	r3, r3, #1
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d00d      	beq.n	8014f60 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014f44:	4b68      	ldr	r3, [pc, #416]	; (80150e8 <tcp_receive+0xcf8>)
 8014f46:	781b      	ldrb	r3, [r3, #0]
 8014f48:	f043 0320 	orr.w	r3, r3, #32
 8014f4c:	b2da      	uxtb	r2, r3
 8014f4e:	4b66      	ldr	r3, [pc, #408]	; (80150e8 <tcp_receive+0xcf8>)
 8014f50:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	7d1b      	ldrb	r3, [r3, #20]
 8014f56:	2b04      	cmp	r3, #4
 8014f58:	d102      	bne.n	8014f60 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	2207      	movs	r2, #7
 8014f5e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014f60:	68bb      	ldr	r3, [r7, #8]
 8014f62:	681a      	ldr	r2, [r3, #0]
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014f68:	68b8      	ldr	r0, [r7, #8]
 8014f6a:	f7fd fb08 	bl	801257e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d008      	beq.n	8014f88 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f7a:	68db      	ldr	r3, [r3, #12]
 8014f7c:	685a      	ldr	r2, [r3, #4]
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014f82:	429a      	cmp	r2, r3
 8014f84:	f43f af43 	beq.w	8014e0e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	8b5b      	ldrh	r3, [r3, #26]
 8014f8c:	f003 0301 	and.w	r3, r3, #1
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d00e      	beq.n	8014fb2 <tcp_receive+0xbc2>
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	8b5b      	ldrh	r3, [r3, #26]
 8014f98:	f023 0301 	bic.w	r3, r3, #1
 8014f9c:	b29a      	uxth	r2, r3
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	835a      	strh	r2, [r3, #26]
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	8b5b      	ldrh	r3, [r3, #26]
 8014fa6:	f043 0302 	orr.w	r3, r3, #2
 8014faa:	b29a      	uxth	r2, r3
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014fb0:	e188      	b.n	80152c4 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	8b5b      	ldrh	r3, [r3, #26]
 8014fb6:	f043 0301 	orr.w	r3, r3, #1
 8014fba:	b29a      	uxth	r2, r3
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014fc0:	e180      	b.n	80152c4 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d106      	bne.n	8014fd8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014fca:	4848      	ldr	r0, [pc, #288]	; (80150ec <tcp_receive+0xcfc>)
 8014fcc:	f7fd faf0 	bl	80125b0 <tcp_seg_copy>
 8014fd0:	4602      	mov	r2, r0
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	675a      	str	r2, [r3, #116]	; 0x74
 8014fd6:	e16d      	b.n	80152b4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014fd8:	2300      	movs	r3, #0
 8014fda:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014fe0:	63bb      	str	r3, [r7, #56]	; 0x38
 8014fe2:	e157      	b.n	8015294 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8014fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fe6:	68db      	ldr	r3, [r3, #12]
 8014fe8:	685a      	ldr	r2, [r3, #4]
 8014fea:	4b41      	ldr	r3, [pc, #260]	; (80150f0 <tcp_receive+0xd00>)
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	429a      	cmp	r2, r3
 8014ff0:	d11d      	bne.n	801502e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014ff2:	4b3e      	ldr	r3, [pc, #248]	; (80150ec <tcp_receive+0xcfc>)
 8014ff4:	891a      	ldrh	r2, [r3, #8]
 8014ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ff8:	891b      	ldrh	r3, [r3, #8]
 8014ffa:	429a      	cmp	r2, r3
 8014ffc:	f240 814f 	bls.w	801529e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015000:	483a      	ldr	r0, [pc, #232]	; (80150ec <tcp_receive+0xcfc>)
 8015002:	f7fd fad5 	bl	80125b0 <tcp_seg_copy>
 8015006:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8015008:	697b      	ldr	r3, [r7, #20]
 801500a:	2b00      	cmp	r3, #0
 801500c:	f000 8149 	beq.w	80152a2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8015010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015012:	2b00      	cmp	r3, #0
 8015014:	d003      	beq.n	801501e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8015016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015018:	697a      	ldr	r2, [r7, #20]
 801501a:	601a      	str	r2, [r3, #0]
 801501c:	e002      	b.n	8015024 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	697a      	ldr	r2, [r7, #20]
 8015022:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8015024:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015026:	6978      	ldr	r0, [r7, #20]
 8015028:	f7ff f8de 	bl	80141e8 <tcp_oos_insert_segment>
                }
                break;
 801502c:	e139      	b.n	80152a2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801502e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015030:	2b00      	cmp	r3, #0
 8015032:	d117      	bne.n	8015064 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8015034:	4b2e      	ldr	r3, [pc, #184]	; (80150f0 <tcp_receive+0xd00>)
 8015036:	681a      	ldr	r2, [r3, #0]
 8015038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801503a:	68db      	ldr	r3, [r3, #12]
 801503c:	685b      	ldr	r3, [r3, #4]
 801503e:	1ad3      	subs	r3, r2, r3
 8015040:	2b00      	cmp	r3, #0
 8015042:	da57      	bge.n	80150f4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015044:	4829      	ldr	r0, [pc, #164]	; (80150ec <tcp_receive+0xcfc>)
 8015046:	f7fd fab3 	bl	80125b0 <tcp_seg_copy>
 801504a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801504c:	69bb      	ldr	r3, [r7, #24]
 801504e:	2b00      	cmp	r3, #0
 8015050:	f000 8129 	beq.w	80152a6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	69ba      	ldr	r2, [r7, #24]
 8015058:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801505a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801505c:	69b8      	ldr	r0, [r7, #24]
 801505e:	f7ff f8c3 	bl	80141e8 <tcp_oos_insert_segment>
                  }
                  break;
 8015062:	e120      	b.n	80152a6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8015064:	4b22      	ldr	r3, [pc, #136]	; (80150f0 <tcp_receive+0xd00>)
 8015066:	681a      	ldr	r2, [r3, #0]
 8015068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801506a:	68db      	ldr	r3, [r3, #12]
 801506c:	685b      	ldr	r3, [r3, #4]
 801506e:	1ad3      	subs	r3, r2, r3
 8015070:	3b01      	subs	r3, #1
 8015072:	2b00      	cmp	r3, #0
 8015074:	db3e      	blt.n	80150f4 <tcp_receive+0xd04>
 8015076:	4b1e      	ldr	r3, [pc, #120]	; (80150f0 <tcp_receive+0xd00>)
 8015078:	681a      	ldr	r2, [r3, #0]
 801507a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801507c:	68db      	ldr	r3, [r3, #12]
 801507e:	685b      	ldr	r3, [r3, #4]
 8015080:	1ad3      	subs	r3, r2, r3
 8015082:	3301      	adds	r3, #1
 8015084:	2b00      	cmp	r3, #0
 8015086:	dc35      	bgt.n	80150f4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015088:	4818      	ldr	r0, [pc, #96]	; (80150ec <tcp_receive+0xcfc>)
 801508a:	f7fd fa91 	bl	80125b0 <tcp_seg_copy>
 801508e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8015090:	69fb      	ldr	r3, [r7, #28]
 8015092:	2b00      	cmp	r3, #0
 8015094:	f000 8109 	beq.w	80152aa <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8015098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801509a:	68db      	ldr	r3, [r3, #12]
 801509c:	685b      	ldr	r3, [r3, #4]
 801509e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80150a0:	8912      	ldrh	r2, [r2, #8]
 80150a2:	441a      	add	r2, r3
 80150a4:	4b12      	ldr	r3, [pc, #72]	; (80150f0 <tcp_receive+0xd00>)
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	1ad3      	subs	r3, r2, r3
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	dd12      	ble.n	80150d4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80150ae:	4b10      	ldr	r3, [pc, #64]	; (80150f0 <tcp_receive+0xd00>)
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	b29a      	uxth	r2, r3
 80150b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150b6:	68db      	ldr	r3, [r3, #12]
 80150b8:	685b      	ldr	r3, [r3, #4]
 80150ba:	b29b      	uxth	r3, r3
 80150bc:	1ad3      	subs	r3, r2, r3
 80150be:	b29a      	uxth	r2, r3
 80150c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150c2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80150c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150c6:	685a      	ldr	r2, [r3, #4]
 80150c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150ca:	891b      	ldrh	r3, [r3, #8]
 80150cc:	4619      	mov	r1, r3
 80150ce:	4610      	mov	r0, r2
 80150d0:	f7fb fa96 	bl	8010600 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80150d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150d6:	69fa      	ldr	r2, [r7, #28]
 80150d8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80150da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80150dc:	69f8      	ldr	r0, [r7, #28]
 80150de:	f7ff f883 	bl	80141e8 <tcp_oos_insert_segment>
                  }
                  break;
 80150e2:	e0e2      	b.n	80152aa <tcp_receive+0xeba>
 80150e4:	2000194c 	.word	0x2000194c
 80150e8:	20001949 	.word	0x20001949
 80150ec:	2000191c 	.word	0x2000191c
 80150f0:	2000193c 	.word	0x2000193c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80150f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150f6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80150f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	f040 80c6 	bne.w	801528e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8015102:	4b80      	ldr	r3, [pc, #512]	; (8015304 <tcp_receive+0xf14>)
 8015104:	681a      	ldr	r2, [r3, #0]
 8015106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015108:	68db      	ldr	r3, [r3, #12]
 801510a:	685b      	ldr	r3, [r3, #4]
 801510c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801510e:	2b00      	cmp	r3, #0
 8015110:	f340 80bd 	ble.w	801528e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015116:	68db      	ldr	r3, [r3, #12]
 8015118:	899b      	ldrh	r3, [r3, #12]
 801511a:	b29b      	uxth	r3, r3
 801511c:	4618      	mov	r0, r3
 801511e:	f7f9 fd17 	bl	800eb50 <lwip_htons>
 8015122:	4603      	mov	r3, r0
 8015124:	b2db      	uxtb	r3, r3
 8015126:	f003 0301 	and.w	r3, r3, #1
 801512a:	2b00      	cmp	r3, #0
 801512c:	f040 80bf 	bne.w	80152ae <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8015130:	4875      	ldr	r0, [pc, #468]	; (8015308 <tcp_receive+0xf18>)
 8015132:	f7fd fa3d 	bl	80125b0 <tcp_seg_copy>
 8015136:	4602      	mov	r2, r0
 8015138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801513a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801513c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	2b00      	cmp	r3, #0
 8015142:	f000 80b6 	beq.w	80152b2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8015146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015148:	68db      	ldr	r3, [r3, #12]
 801514a:	685b      	ldr	r3, [r3, #4]
 801514c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801514e:	8912      	ldrh	r2, [r2, #8]
 8015150:	441a      	add	r2, r3
 8015152:	4b6c      	ldr	r3, [pc, #432]	; (8015304 <tcp_receive+0xf14>)
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	1ad3      	subs	r3, r2, r3
 8015158:	2b00      	cmp	r3, #0
 801515a:	dd12      	ble.n	8015182 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801515c:	4b69      	ldr	r3, [pc, #420]	; (8015304 <tcp_receive+0xf14>)
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	b29a      	uxth	r2, r3
 8015162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015164:	68db      	ldr	r3, [r3, #12]
 8015166:	685b      	ldr	r3, [r3, #4]
 8015168:	b29b      	uxth	r3, r3
 801516a:	1ad3      	subs	r3, r2, r3
 801516c:	b29a      	uxth	r2, r3
 801516e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015170:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8015172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015174:	685a      	ldr	r2, [r3, #4]
 8015176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015178:	891b      	ldrh	r3, [r3, #8]
 801517a:	4619      	mov	r1, r3
 801517c:	4610      	mov	r0, r2
 801517e:	f7fb fa3f 	bl	8010600 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8015182:	4b62      	ldr	r3, [pc, #392]	; (801530c <tcp_receive+0xf1c>)
 8015184:	881b      	ldrh	r3, [r3, #0]
 8015186:	461a      	mov	r2, r3
 8015188:	4b5e      	ldr	r3, [pc, #376]	; (8015304 <tcp_receive+0xf14>)
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	441a      	add	r2, r3
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015192:	6879      	ldr	r1, [r7, #4]
 8015194:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015196:	440b      	add	r3, r1
 8015198:	1ad3      	subs	r3, r2, r3
 801519a:	2b00      	cmp	r3, #0
 801519c:	f340 8089 	ble.w	80152b2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80151a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	68db      	ldr	r3, [r3, #12]
 80151a6:	899b      	ldrh	r3, [r3, #12]
 80151a8:	b29b      	uxth	r3, r3
 80151aa:	4618      	mov	r0, r3
 80151ac:	f7f9 fcd0 	bl	800eb50 <lwip_htons>
 80151b0:	4603      	mov	r3, r0
 80151b2:	b2db      	uxtb	r3, r3
 80151b4:	f003 0301 	and.w	r3, r3, #1
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d022      	beq.n	8015202 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80151bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	68db      	ldr	r3, [r3, #12]
 80151c2:	899b      	ldrh	r3, [r3, #12]
 80151c4:	b29b      	uxth	r3, r3
 80151c6:	b21b      	sxth	r3, r3
 80151c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80151cc:	b21c      	sxth	r4, r3
 80151ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	68db      	ldr	r3, [r3, #12]
 80151d4:	899b      	ldrh	r3, [r3, #12]
 80151d6:	b29b      	uxth	r3, r3
 80151d8:	4618      	mov	r0, r3
 80151da:	f7f9 fcb9 	bl	800eb50 <lwip_htons>
 80151de:	4603      	mov	r3, r0
 80151e0:	b2db      	uxtb	r3, r3
 80151e2:	b29b      	uxth	r3, r3
 80151e4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80151e8:	b29b      	uxth	r3, r3
 80151ea:	4618      	mov	r0, r3
 80151ec:	f7f9 fcb0 	bl	800eb50 <lwip_htons>
 80151f0:	4603      	mov	r3, r0
 80151f2:	b21b      	sxth	r3, r3
 80151f4:	4323      	orrs	r3, r4
 80151f6:	b21a      	sxth	r2, r3
 80151f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	68db      	ldr	r3, [r3, #12]
 80151fe:	b292      	uxth	r2, r2
 8015200:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015206:	b29a      	uxth	r2, r3
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801520c:	4413      	add	r3, r2
 801520e:	b299      	uxth	r1, r3
 8015210:	4b3c      	ldr	r3, [pc, #240]	; (8015304 <tcp_receive+0xf14>)
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	b29a      	uxth	r2, r3
 8015216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	1a8a      	subs	r2, r1, r2
 801521c:	b292      	uxth	r2, r2
 801521e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8015220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	685a      	ldr	r2, [r3, #4]
 8015226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	891b      	ldrh	r3, [r3, #8]
 801522c:	4619      	mov	r1, r3
 801522e:	4610      	mov	r0, r2
 8015230:	f7fb f9e6 	bl	8010600 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8015234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	891c      	ldrh	r4, [r3, #8]
 801523a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	68db      	ldr	r3, [r3, #12]
 8015240:	899b      	ldrh	r3, [r3, #12]
 8015242:	b29b      	uxth	r3, r3
 8015244:	4618      	mov	r0, r3
 8015246:	f7f9 fc83 	bl	800eb50 <lwip_htons>
 801524a:	4603      	mov	r3, r0
 801524c:	b2db      	uxtb	r3, r3
 801524e:	f003 0303 	and.w	r3, r3, #3
 8015252:	2b00      	cmp	r3, #0
 8015254:	d001      	beq.n	801525a <tcp_receive+0xe6a>
 8015256:	2301      	movs	r3, #1
 8015258:	e000      	b.n	801525c <tcp_receive+0xe6c>
 801525a:	2300      	movs	r3, #0
 801525c:	4423      	add	r3, r4
 801525e:	b29a      	uxth	r2, r3
 8015260:	4b2a      	ldr	r3, [pc, #168]	; (801530c <tcp_receive+0xf1c>)
 8015262:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015264:	4b29      	ldr	r3, [pc, #164]	; (801530c <tcp_receive+0xf1c>)
 8015266:	881b      	ldrh	r3, [r3, #0]
 8015268:	461a      	mov	r2, r3
 801526a:	4b26      	ldr	r3, [pc, #152]	; (8015304 <tcp_receive+0xf14>)
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	441a      	add	r2, r3
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015274:	6879      	ldr	r1, [r7, #4]
 8015276:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015278:	440b      	add	r3, r1
 801527a:	429a      	cmp	r2, r3
 801527c:	d019      	beq.n	80152b2 <tcp_receive+0xec2>
 801527e:	4b24      	ldr	r3, [pc, #144]	; (8015310 <tcp_receive+0xf20>)
 8015280:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8015284:	4923      	ldr	r1, [pc, #140]	; (8015314 <tcp_receive+0xf24>)
 8015286:	4824      	ldr	r0, [pc, #144]	; (8015318 <tcp_receive+0xf28>)
 8015288:	f00a faee 	bl	801f868 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801528c:	e011      	b.n	80152b2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801528e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	63bb      	str	r3, [r7, #56]	; 0x38
 8015294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015296:	2b00      	cmp	r3, #0
 8015298:	f47f aea4 	bne.w	8014fe4 <tcp_receive+0xbf4>
 801529c:	e00a      	b.n	80152b4 <tcp_receive+0xec4>
                break;
 801529e:	bf00      	nop
 80152a0:	e008      	b.n	80152b4 <tcp_receive+0xec4>
                break;
 80152a2:	bf00      	nop
 80152a4:	e006      	b.n	80152b4 <tcp_receive+0xec4>
                  break;
 80152a6:	bf00      	nop
 80152a8:	e004      	b.n	80152b4 <tcp_receive+0xec4>
                  break;
 80152aa:	bf00      	nop
 80152ac:	e002      	b.n	80152b4 <tcp_receive+0xec4>
                  break;
 80152ae:	bf00      	nop
 80152b0:	e000      	b.n	80152b4 <tcp_receive+0xec4>
                break;
 80152b2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80152b4:	6878      	ldr	r0, [r7, #4]
 80152b6:	f001 fe8b 	bl	8016fd0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80152ba:	e003      	b.n	80152c4 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80152bc:	6878      	ldr	r0, [r7, #4]
 80152be:	f001 fe87 	bl	8016fd0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80152c2:	e01a      	b.n	80152fa <tcp_receive+0xf0a>
 80152c4:	e019      	b.n	80152fa <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80152c6:	4b0f      	ldr	r3, [pc, #60]	; (8015304 <tcp_receive+0xf14>)
 80152c8:	681a      	ldr	r2, [r3, #0]
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152ce:	1ad3      	subs	r3, r2, r3
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	db0a      	blt.n	80152ea <tcp_receive+0xefa>
 80152d4:	4b0b      	ldr	r3, [pc, #44]	; (8015304 <tcp_receive+0xf14>)
 80152d6:	681a      	ldr	r2, [r3, #0]
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152dc:	6879      	ldr	r1, [r7, #4]
 80152de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80152e0:	440b      	add	r3, r1
 80152e2:	1ad3      	subs	r3, r2, r3
 80152e4:	3301      	adds	r3, #1
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	dd07      	ble.n	80152fa <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	8b5b      	ldrh	r3, [r3, #26]
 80152ee:	f043 0302 	orr.w	r3, r3, #2
 80152f2:	b29a      	uxth	r2, r3
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80152f8:	e7ff      	b.n	80152fa <tcp_receive+0xf0a>
 80152fa:	bf00      	nop
 80152fc:	3750      	adds	r7, #80	; 0x50
 80152fe:	46bd      	mov	sp, r7
 8015300:	bdb0      	pop	{r4, r5, r7, pc}
 8015302:	bf00      	nop
 8015304:	2000193c 	.word	0x2000193c
 8015308:	2000191c 	.word	0x2000191c
 801530c:	20001946 	.word	0x20001946
 8015310:	08023bcc 	.word	0x08023bcc
 8015314:	08023f74 	.word	0x08023f74
 8015318:	08023c18 	.word	0x08023c18

0801531c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801531c:	b480      	push	{r7}
 801531e:	b083      	sub	sp, #12
 8015320:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8015322:	4b15      	ldr	r3, [pc, #84]	; (8015378 <tcp_get_next_optbyte+0x5c>)
 8015324:	881b      	ldrh	r3, [r3, #0]
 8015326:	1c5a      	adds	r2, r3, #1
 8015328:	b291      	uxth	r1, r2
 801532a:	4a13      	ldr	r2, [pc, #76]	; (8015378 <tcp_get_next_optbyte+0x5c>)
 801532c:	8011      	strh	r1, [r2, #0]
 801532e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015330:	4b12      	ldr	r3, [pc, #72]	; (801537c <tcp_get_next_optbyte+0x60>)
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d004      	beq.n	8015342 <tcp_get_next_optbyte+0x26>
 8015338:	4b11      	ldr	r3, [pc, #68]	; (8015380 <tcp_get_next_optbyte+0x64>)
 801533a:	881b      	ldrh	r3, [r3, #0]
 801533c:	88fa      	ldrh	r2, [r7, #6]
 801533e:	429a      	cmp	r2, r3
 8015340:	d208      	bcs.n	8015354 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015342:	4b10      	ldr	r3, [pc, #64]	; (8015384 <tcp_get_next_optbyte+0x68>)
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	3314      	adds	r3, #20
 8015348:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801534a:	88fb      	ldrh	r3, [r7, #6]
 801534c:	683a      	ldr	r2, [r7, #0]
 801534e:	4413      	add	r3, r2
 8015350:	781b      	ldrb	r3, [r3, #0]
 8015352:	e00b      	b.n	801536c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015354:	88fb      	ldrh	r3, [r7, #6]
 8015356:	b2da      	uxtb	r2, r3
 8015358:	4b09      	ldr	r3, [pc, #36]	; (8015380 <tcp_get_next_optbyte+0x64>)
 801535a:	881b      	ldrh	r3, [r3, #0]
 801535c:	b2db      	uxtb	r3, r3
 801535e:	1ad3      	subs	r3, r2, r3
 8015360:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015362:	4b06      	ldr	r3, [pc, #24]	; (801537c <tcp_get_next_optbyte+0x60>)
 8015364:	681a      	ldr	r2, [r3, #0]
 8015366:	797b      	ldrb	r3, [r7, #5]
 8015368:	4413      	add	r3, r2
 801536a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801536c:	4618      	mov	r0, r3
 801536e:	370c      	adds	r7, #12
 8015370:	46bd      	mov	sp, r7
 8015372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015376:	4770      	bx	lr
 8015378:	20001938 	.word	0x20001938
 801537c:	20001934 	.word	0x20001934
 8015380:	20001932 	.word	0x20001932
 8015384:	2000192c 	.word	0x2000192c

08015388 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015388:	b580      	push	{r7, lr}
 801538a:	b084      	sub	sp, #16
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d106      	bne.n	80153a4 <tcp_parseopt+0x1c>
 8015396:	4b32      	ldr	r3, [pc, #200]	; (8015460 <tcp_parseopt+0xd8>)
 8015398:	f240 727d 	movw	r2, #1917	; 0x77d
 801539c:	4931      	ldr	r1, [pc, #196]	; (8015464 <tcp_parseopt+0xdc>)
 801539e:	4832      	ldr	r0, [pc, #200]	; (8015468 <tcp_parseopt+0xe0>)
 80153a0:	f00a fa62 	bl	801f868 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80153a4:	4b31      	ldr	r3, [pc, #196]	; (801546c <tcp_parseopt+0xe4>)
 80153a6:	881b      	ldrh	r3, [r3, #0]
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d055      	beq.n	8015458 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80153ac:	4b30      	ldr	r3, [pc, #192]	; (8015470 <tcp_parseopt+0xe8>)
 80153ae:	2200      	movs	r2, #0
 80153b0:	801a      	strh	r2, [r3, #0]
 80153b2:	e045      	b.n	8015440 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80153b4:	f7ff ffb2 	bl	801531c <tcp_get_next_optbyte>
 80153b8:	4603      	mov	r3, r0
 80153ba:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80153bc:	7bfb      	ldrb	r3, [r7, #15]
 80153be:	2b02      	cmp	r3, #2
 80153c0:	d006      	beq.n	80153d0 <tcp_parseopt+0x48>
 80153c2:	2b02      	cmp	r3, #2
 80153c4:	dc2b      	bgt.n	801541e <tcp_parseopt+0x96>
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d041      	beq.n	801544e <tcp_parseopt+0xc6>
 80153ca:	2b01      	cmp	r3, #1
 80153cc:	d127      	bne.n	801541e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80153ce:	e037      	b.n	8015440 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80153d0:	f7ff ffa4 	bl	801531c <tcp_get_next_optbyte>
 80153d4:	4603      	mov	r3, r0
 80153d6:	2b04      	cmp	r3, #4
 80153d8:	d13b      	bne.n	8015452 <tcp_parseopt+0xca>
 80153da:	4b25      	ldr	r3, [pc, #148]	; (8015470 <tcp_parseopt+0xe8>)
 80153dc:	881b      	ldrh	r3, [r3, #0]
 80153de:	3301      	adds	r3, #1
 80153e0:	4a22      	ldr	r2, [pc, #136]	; (801546c <tcp_parseopt+0xe4>)
 80153e2:	8812      	ldrh	r2, [r2, #0]
 80153e4:	4293      	cmp	r3, r2
 80153e6:	da34      	bge.n	8015452 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80153e8:	f7ff ff98 	bl	801531c <tcp_get_next_optbyte>
 80153ec:	4603      	mov	r3, r0
 80153ee:	b29b      	uxth	r3, r3
 80153f0:	021b      	lsls	r3, r3, #8
 80153f2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80153f4:	f7ff ff92 	bl	801531c <tcp_get_next_optbyte>
 80153f8:	4603      	mov	r3, r0
 80153fa:	b29a      	uxth	r2, r3
 80153fc:	89bb      	ldrh	r3, [r7, #12]
 80153fe:	4313      	orrs	r3, r2
 8015400:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015402:	89bb      	ldrh	r3, [r7, #12]
 8015404:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8015408:	d804      	bhi.n	8015414 <tcp_parseopt+0x8c>
 801540a:	89bb      	ldrh	r3, [r7, #12]
 801540c:	2b00      	cmp	r3, #0
 801540e:	d001      	beq.n	8015414 <tcp_parseopt+0x8c>
 8015410:	89ba      	ldrh	r2, [r7, #12]
 8015412:	e001      	b.n	8015418 <tcp_parseopt+0x90>
 8015414:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801541c:	e010      	b.n	8015440 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801541e:	f7ff ff7d 	bl	801531c <tcp_get_next_optbyte>
 8015422:	4603      	mov	r3, r0
 8015424:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8015426:	7afb      	ldrb	r3, [r7, #11]
 8015428:	2b01      	cmp	r3, #1
 801542a:	d914      	bls.n	8015456 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801542c:	7afb      	ldrb	r3, [r7, #11]
 801542e:	b29a      	uxth	r2, r3
 8015430:	4b0f      	ldr	r3, [pc, #60]	; (8015470 <tcp_parseopt+0xe8>)
 8015432:	881b      	ldrh	r3, [r3, #0]
 8015434:	4413      	add	r3, r2
 8015436:	b29b      	uxth	r3, r3
 8015438:	3b02      	subs	r3, #2
 801543a:	b29a      	uxth	r2, r3
 801543c:	4b0c      	ldr	r3, [pc, #48]	; (8015470 <tcp_parseopt+0xe8>)
 801543e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015440:	4b0b      	ldr	r3, [pc, #44]	; (8015470 <tcp_parseopt+0xe8>)
 8015442:	881a      	ldrh	r2, [r3, #0]
 8015444:	4b09      	ldr	r3, [pc, #36]	; (801546c <tcp_parseopt+0xe4>)
 8015446:	881b      	ldrh	r3, [r3, #0]
 8015448:	429a      	cmp	r2, r3
 801544a:	d3b3      	bcc.n	80153b4 <tcp_parseopt+0x2c>
 801544c:	e004      	b.n	8015458 <tcp_parseopt+0xd0>
          return;
 801544e:	bf00      	nop
 8015450:	e002      	b.n	8015458 <tcp_parseopt+0xd0>
            return;
 8015452:	bf00      	nop
 8015454:	e000      	b.n	8015458 <tcp_parseopt+0xd0>
            return;
 8015456:	bf00      	nop
      }
    }
  }
}
 8015458:	3710      	adds	r7, #16
 801545a:	46bd      	mov	sp, r7
 801545c:	bd80      	pop	{r7, pc}
 801545e:	bf00      	nop
 8015460:	08023bcc 	.word	0x08023bcc
 8015464:	08024030 	.word	0x08024030
 8015468:	08023c18 	.word	0x08023c18
 801546c:	20001930 	.word	0x20001930
 8015470:	20001938 	.word	0x20001938

08015474 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015474:	b480      	push	{r7}
 8015476:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015478:	4b05      	ldr	r3, [pc, #20]	; (8015490 <tcp_trigger_input_pcb_close+0x1c>)
 801547a:	781b      	ldrb	r3, [r3, #0]
 801547c:	f043 0310 	orr.w	r3, r3, #16
 8015480:	b2da      	uxtb	r2, r3
 8015482:	4b03      	ldr	r3, [pc, #12]	; (8015490 <tcp_trigger_input_pcb_close+0x1c>)
 8015484:	701a      	strb	r2, [r3, #0]
}
 8015486:	bf00      	nop
 8015488:	46bd      	mov	sp, r7
 801548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801548e:	4770      	bx	lr
 8015490:	20001949 	.word	0x20001949

08015494 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015494:	b580      	push	{r7, lr}
 8015496:	b084      	sub	sp, #16
 8015498:	af00      	add	r7, sp, #0
 801549a:	60f8      	str	r0, [r7, #12]
 801549c:	60b9      	str	r1, [r7, #8]
 801549e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d00a      	beq.n	80154bc <tcp_route+0x28>
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	7a1b      	ldrb	r3, [r3, #8]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d006      	beq.n	80154bc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	7a1b      	ldrb	r3, [r3, #8]
 80154b2:	4618      	mov	r0, r3
 80154b4:	f7fa fe64 	bl	8010180 <netif_get_by_index>
 80154b8:	4603      	mov	r3, r0
 80154ba:	e003      	b.n	80154c4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80154bc:	6878      	ldr	r0, [r7, #4]
 80154be:	f005 fda3 	bl	801b008 <ip4_route>
 80154c2:	4603      	mov	r3, r0
  }
}
 80154c4:	4618      	mov	r0, r3
 80154c6:	3710      	adds	r7, #16
 80154c8:	46bd      	mov	sp, r7
 80154ca:	bd80      	pop	{r7, pc}

080154cc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80154cc:	b590      	push	{r4, r7, lr}
 80154ce:	b087      	sub	sp, #28
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	60f8      	str	r0, [r7, #12]
 80154d4:	60b9      	str	r1, [r7, #8]
 80154d6:	603b      	str	r3, [r7, #0]
 80154d8:	4613      	mov	r3, r2
 80154da:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d105      	bne.n	80154ee <tcp_create_segment+0x22>
 80154e2:	4b44      	ldr	r3, [pc, #272]	; (80155f4 <tcp_create_segment+0x128>)
 80154e4:	22a3      	movs	r2, #163	; 0xa3
 80154e6:	4944      	ldr	r1, [pc, #272]	; (80155f8 <tcp_create_segment+0x12c>)
 80154e8:	4844      	ldr	r0, [pc, #272]	; (80155fc <tcp_create_segment+0x130>)
 80154ea:	f00a f9bd 	bl	801f868 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80154ee:	68bb      	ldr	r3, [r7, #8]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d105      	bne.n	8015500 <tcp_create_segment+0x34>
 80154f4:	4b3f      	ldr	r3, [pc, #252]	; (80155f4 <tcp_create_segment+0x128>)
 80154f6:	22a4      	movs	r2, #164	; 0xa4
 80154f8:	4941      	ldr	r1, [pc, #260]	; (8015600 <tcp_create_segment+0x134>)
 80154fa:	4840      	ldr	r0, [pc, #256]	; (80155fc <tcp_create_segment+0x130>)
 80154fc:	f00a f9b4 	bl	801f868 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015500:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015504:	009b      	lsls	r3, r3, #2
 8015506:	b2db      	uxtb	r3, r3
 8015508:	f003 0304 	and.w	r3, r3, #4
 801550c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801550e:	2003      	movs	r0, #3
 8015510:	f7fa fac2 	bl	800fa98 <memp_malloc>
 8015514:	6138      	str	r0, [r7, #16]
 8015516:	693b      	ldr	r3, [r7, #16]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d104      	bne.n	8015526 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801551c:	68b8      	ldr	r0, [r7, #8]
 801551e:	f7fb fa27 	bl	8010970 <pbuf_free>
    return NULL;
 8015522:	2300      	movs	r3, #0
 8015524:	e061      	b.n	80155ea <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8015526:	693b      	ldr	r3, [r7, #16]
 8015528:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801552c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801552e:	693b      	ldr	r3, [r7, #16]
 8015530:	2200      	movs	r2, #0
 8015532:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015534:	693b      	ldr	r3, [r7, #16]
 8015536:	68ba      	ldr	r2, [r7, #8]
 8015538:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801553a:	68bb      	ldr	r3, [r7, #8]
 801553c:	891a      	ldrh	r2, [r3, #8]
 801553e:	7dfb      	ldrb	r3, [r7, #23]
 8015540:	b29b      	uxth	r3, r3
 8015542:	429a      	cmp	r2, r3
 8015544:	d205      	bcs.n	8015552 <tcp_create_segment+0x86>
 8015546:	4b2b      	ldr	r3, [pc, #172]	; (80155f4 <tcp_create_segment+0x128>)
 8015548:	22b0      	movs	r2, #176	; 0xb0
 801554a:	492e      	ldr	r1, [pc, #184]	; (8015604 <tcp_create_segment+0x138>)
 801554c:	482b      	ldr	r0, [pc, #172]	; (80155fc <tcp_create_segment+0x130>)
 801554e:	f00a f98b 	bl	801f868 <iprintf>
  seg->len = p->tot_len - optlen;
 8015552:	68bb      	ldr	r3, [r7, #8]
 8015554:	891a      	ldrh	r2, [r3, #8]
 8015556:	7dfb      	ldrb	r3, [r7, #23]
 8015558:	b29b      	uxth	r3, r3
 801555a:	1ad3      	subs	r3, r2, r3
 801555c:	b29a      	uxth	r2, r3
 801555e:	693b      	ldr	r3, [r7, #16]
 8015560:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8015562:	2114      	movs	r1, #20
 8015564:	68b8      	ldr	r0, [r7, #8]
 8015566:	f7fb f93b 	bl	80107e0 <pbuf_add_header>
 801556a:	4603      	mov	r3, r0
 801556c:	2b00      	cmp	r3, #0
 801556e:	d004      	beq.n	801557a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015570:	6938      	ldr	r0, [r7, #16]
 8015572:	f7fd f804 	bl	801257e <tcp_seg_free>
    return NULL;
 8015576:	2300      	movs	r3, #0
 8015578:	e037      	b.n	80155ea <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801557a:	693b      	ldr	r3, [r7, #16]
 801557c:	685b      	ldr	r3, [r3, #4]
 801557e:	685a      	ldr	r2, [r3, #4]
 8015580:	693b      	ldr	r3, [r7, #16]
 8015582:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	8ada      	ldrh	r2, [r3, #22]
 8015588:	693b      	ldr	r3, [r7, #16]
 801558a:	68dc      	ldr	r4, [r3, #12]
 801558c:	4610      	mov	r0, r2
 801558e:	f7f9 fadf 	bl	800eb50 <lwip_htons>
 8015592:	4603      	mov	r3, r0
 8015594:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	8b1a      	ldrh	r2, [r3, #24]
 801559a:	693b      	ldr	r3, [r7, #16]
 801559c:	68dc      	ldr	r4, [r3, #12]
 801559e:	4610      	mov	r0, r2
 80155a0:	f7f9 fad6 	bl	800eb50 <lwip_htons>
 80155a4:	4603      	mov	r3, r0
 80155a6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80155a8:	693b      	ldr	r3, [r7, #16]
 80155aa:	68dc      	ldr	r4, [r3, #12]
 80155ac:	6838      	ldr	r0, [r7, #0]
 80155ae:	f7f9 fae4 	bl	800eb7a <lwip_htonl>
 80155b2:	4603      	mov	r3, r0
 80155b4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80155b6:	7dfb      	ldrb	r3, [r7, #23]
 80155b8:	089b      	lsrs	r3, r3, #2
 80155ba:	b2db      	uxtb	r3, r3
 80155bc:	b29b      	uxth	r3, r3
 80155be:	3305      	adds	r3, #5
 80155c0:	b29b      	uxth	r3, r3
 80155c2:	031b      	lsls	r3, r3, #12
 80155c4:	b29a      	uxth	r2, r3
 80155c6:	79fb      	ldrb	r3, [r7, #7]
 80155c8:	b29b      	uxth	r3, r3
 80155ca:	4313      	orrs	r3, r2
 80155cc:	b29a      	uxth	r2, r3
 80155ce:	693b      	ldr	r3, [r7, #16]
 80155d0:	68dc      	ldr	r4, [r3, #12]
 80155d2:	4610      	mov	r0, r2
 80155d4:	f7f9 fabc 	bl	800eb50 <lwip_htons>
 80155d8:	4603      	mov	r3, r0
 80155da:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80155dc:	693b      	ldr	r3, [r7, #16]
 80155de:	68db      	ldr	r3, [r3, #12]
 80155e0:	2200      	movs	r2, #0
 80155e2:	749a      	strb	r2, [r3, #18]
 80155e4:	2200      	movs	r2, #0
 80155e6:	74da      	strb	r2, [r3, #19]
  return seg;
 80155e8:	693b      	ldr	r3, [r7, #16]
}
 80155ea:	4618      	mov	r0, r3
 80155ec:	371c      	adds	r7, #28
 80155ee:	46bd      	mov	sp, r7
 80155f0:	bd90      	pop	{r4, r7, pc}
 80155f2:	bf00      	nop
 80155f4:	0802404c 	.word	0x0802404c
 80155f8:	08024080 	.word	0x08024080
 80155fc:	080240a0 	.word	0x080240a0
 8015600:	080240c8 	.word	0x080240c8
 8015604:	080240ec 	.word	0x080240ec

08015608 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8015608:	b580      	push	{r7, lr}
 801560a:	b086      	sub	sp, #24
 801560c:	af00      	add	r7, sp, #0
 801560e:	607b      	str	r3, [r7, #4]
 8015610:	4603      	mov	r3, r0
 8015612:	73fb      	strb	r3, [r7, #15]
 8015614:	460b      	mov	r3, r1
 8015616:	81bb      	strh	r3, [r7, #12]
 8015618:	4613      	mov	r3, r2
 801561a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801561c:	89bb      	ldrh	r3, [r7, #12]
 801561e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d105      	bne.n	8015632 <tcp_pbuf_prealloc+0x2a>
 8015626:	4b30      	ldr	r3, [pc, #192]	; (80156e8 <tcp_pbuf_prealloc+0xe0>)
 8015628:	22e8      	movs	r2, #232	; 0xe8
 801562a:	4930      	ldr	r1, [pc, #192]	; (80156ec <tcp_pbuf_prealloc+0xe4>)
 801562c:	4830      	ldr	r0, [pc, #192]	; (80156f0 <tcp_pbuf_prealloc+0xe8>)
 801562e:	f00a f91b 	bl	801f868 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8015632:	6a3b      	ldr	r3, [r7, #32]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d105      	bne.n	8015644 <tcp_pbuf_prealloc+0x3c>
 8015638:	4b2b      	ldr	r3, [pc, #172]	; (80156e8 <tcp_pbuf_prealloc+0xe0>)
 801563a:	22e9      	movs	r2, #233	; 0xe9
 801563c:	492d      	ldr	r1, [pc, #180]	; (80156f4 <tcp_pbuf_prealloc+0xec>)
 801563e:	482c      	ldr	r0, [pc, #176]	; (80156f0 <tcp_pbuf_prealloc+0xe8>)
 8015640:	f00a f912 	bl	801f868 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015644:	89ba      	ldrh	r2, [r7, #12]
 8015646:	897b      	ldrh	r3, [r7, #10]
 8015648:	429a      	cmp	r2, r3
 801564a:	d221      	bcs.n	8015690 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801564c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015650:	f003 0302 	and.w	r3, r3, #2
 8015654:	2b00      	cmp	r3, #0
 8015656:	d111      	bne.n	801567c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8015658:	6a3b      	ldr	r3, [r7, #32]
 801565a:	8b5b      	ldrh	r3, [r3, #26]
 801565c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015660:	2b00      	cmp	r3, #0
 8015662:	d115      	bne.n	8015690 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8015664:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015668:	2b00      	cmp	r3, #0
 801566a:	d007      	beq.n	801567c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801566c:	6a3b      	ldr	r3, [r7, #32]
 801566e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8015670:	2b00      	cmp	r3, #0
 8015672:	d103      	bne.n	801567c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8015674:	6a3b      	ldr	r3, [r7, #32]
 8015676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8015678:	2b00      	cmp	r3, #0
 801567a:	d009      	beq.n	8015690 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801567c:	89bb      	ldrh	r3, [r7, #12]
 801567e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8015682:	f023 0203 	bic.w	r2, r3, #3
 8015686:	897b      	ldrh	r3, [r7, #10]
 8015688:	4293      	cmp	r3, r2
 801568a:	bf28      	it	cs
 801568c:	4613      	movcs	r3, r2
 801568e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8015690:	8af9      	ldrh	r1, [r7, #22]
 8015692:	7bfb      	ldrb	r3, [r7, #15]
 8015694:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015698:	4618      	mov	r0, r3
 801569a:	f7fa fe53 	bl	8010344 <pbuf_alloc>
 801569e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80156a0:	693b      	ldr	r3, [r7, #16]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d101      	bne.n	80156aa <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80156a6:	2300      	movs	r3, #0
 80156a8:	e019      	b.n	80156de <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80156aa:	693b      	ldr	r3, [r7, #16]
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d006      	beq.n	80156c0 <tcp_pbuf_prealloc+0xb8>
 80156b2:	4b0d      	ldr	r3, [pc, #52]	; (80156e8 <tcp_pbuf_prealloc+0xe0>)
 80156b4:	f240 120b 	movw	r2, #267	; 0x10b
 80156b8:	490f      	ldr	r1, [pc, #60]	; (80156f8 <tcp_pbuf_prealloc+0xf0>)
 80156ba:	480d      	ldr	r0, [pc, #52]	; (80156f0 <tcp_pbuf_prealloc+0xe8>)
 80156bc:	f00a f8d4 	bl	801f868 <iprintf>
  *oversize = p->len - length;
 80156c0:	693b      	ldr	r3, [r7, #16]
 80156c2:	895a      	ldrh	r2, [r3, #10]
 80156c4:	89bb      	ldrh	r3, [r7, #12]
 80156c6:	1ad3      	subs	r3, r2, r3
 80156c8:	b29a      	uxth	r2, r3
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80156ce:	693b      	ldr	r3, [r7, #16]
 80156d0:	89ba      	ldrh	r2, [r7, #12]
 80156d2:	811a      	strh	r2, [r3, #8]
 80156d4:	693b      	ldr	r3, [r7, #16]
 80156d6:	891a      	ldrh	r2, [r3, #8]
 80156d8:	693b      	ldr	r3, [r7, #16]
 80156da:	815a      	strh	r2, [r3, #10]
  return p;
 80156dc:	693b      	ldr	r3, [r7, #16]
}
 80156de:	4618      	mov	r0, r3
 80156e0:	3718      	adds	r7, #24
 80156e2:	46bd      	mov	sp, r7
 80156e4:	bd80      	pop	{r7, pc}
 80156e6:	bf00      	nop
 80156e8:	0802404c 	.word	0x0802404c
 80156ec:	08024104 	.word	0x08024104
 80156f0:	080240a0 	.word	0x080240a0
 80156f4:	08024128 	.word	0x08024128
 80156f8:	08024148 	.word	0x08024148

080156fc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80156fc:	b580      	push	{r7, lr}
 80156fe:	b082      	sub	sp, #8
 8015700:	af00      	add	r7, sp, #0
 8015702:	6078      	str	r0, [r7, #4]
 8015704:	460b      	mov	r3, r1
 8015706:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	2b00      	cmp	r3, #0
 801570c:	d106      	bne.n	801571c <tcp_write_checks+0x20>
 801570e:	4b33      	ldr	r3, [pc, #204]	; (80157dc <tcp_write_checks+0xe0>)
 8015710:	f240 1233 	movw	r2, #307	; 0x133
 8015714:	4932      	ldr	r1, [pc, #200]	; (80157e0 <tcp_write_checks+0xe4>)
 8015716:	4833      	ldr	r0, [pc, #204]	; (80157e4 <tcp_write_checks+0xe8>)
 8015718:	f00a f8a6 	bl	801f868 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	7d1b      	ldrb	r3, [r3, #20]
 8015720:	2b04      	cmp	r3, #4
 8015722:	d00e      	beq.n	8015742 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015728:	2b07      	cmp	r3, #7
 801572a:	d00a      	beq.n	8015742 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8015730:	2b02      	cmp	r3, #2
 8015732:	d006      	beq.n	8015742 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8015738:	2b03      	cmp	r3, #3
 801573a:	d002      	beq.n	8015742 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801573c:	f06f 030a 	mvn.w	r3, #10
 8015740:	e048      	b.n	80157d4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8015742:	887b      	ldrh	r3, [r7, #2]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d101      	bne.n	801574c <tcp_write_checks+0x50>
    return ERR_OK;
 8015748:	2300      	movs	r3, #0
 801574a:	e043      	b.n	80157d4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015752:	887a      	ldrh	r2, [r7, #2]
 8015754:	429a      	cmp	r2, r3
 8015756:	d909      	bls.n	801576c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	8b5b      	ldrh	r3, [r3, #26]
 801575c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015760:	b29a      	uxth	r2, r3
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015766:	f04f 33ff 	mov.w	r3, #4294967295
 801576a:	e033      	b.n	80157d4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015772:	2b08      	cmp	r3, #8
 8015774:	d909      	bls.n	801578a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	8b5b      	ldrh	r3, [r3, #26]
 801577a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801577e:	b29a      	uxth	r2, r3
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015784:	f04f 33ff 	mov.w	r3, #4294967295
 8015788:	e024      	b.n	80157d4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015790:	2b00      	cmp	r3, #0
 8015792:	d00f      	beq.n	80157b4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015798:	2b00      	cmp	r3, #0
 801579a:	d11a      	bne.n	80157d2 <tcp_write_checks+0xd6>
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d116      	bne.n	80157d2 <tcp_write_checks+0xd6>
 80157a4:	4b0d      	ldr	r3, [pc, #52]	; (80157dc <tcp_write_checks+0xe0>)
 80157a6:	f240 1255 	movw	r2, #341	; 0x155
 80157aa:	490f      	ldr	r1, [pc, #60]	; (80157e8 <tcp_write_checks+0xec>)
 80157ac:	480d      	ldr	r0, [pc, #52]	; (80157e4 <tcp_write_checks+0xe8>)
 80157ae:	f00a f85b 	bl	801f868 <iprintf>
 80157b2:	e00e      	b.n	80157d2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d103      	bne.n	80157c4 <tcp_write_checks+0xc8>
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d006      	beq.n	80157d2 <tcp_write_checks+0xd6>
 80157c4:	4b05      	ldr	r3, [pc, #20]	; (80157dc <tcp_write_checks+0xe0>)
 80157c6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80157ca:	4908      	ldr	r1, [pc, #32]	; (80157ec <tcp_write_checks+0xf0>)
 80157cc:	4805      	ldr	r0, [pc, #20]	; (80157e4 <tcp_write_checks+0xe8>)
 80157ce:	f00a f84b 	bl	801f868 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80157d2:	2300      	movs	r3, #0
}
 80157d4:	4618      	mov	r0, r3
 80157d6:	3708      	adds	r7, #8
 80157d8:	46bd      	mov	sp, r7
 80157da:	bd80      	pop	{r7, pc}
 80157dc:	0802404c 	.word	0x0802404c
 80157e0:	0802415c 	.word	0x0802415c
 80157e4:	080240a0 	.word	0x080240a0
 80157e8:	0802417c 	.word	0x0802417c
 80157ec:	080241b8 	.word	0x080241b8

080157f0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80157f0:	b590      	push	{r4, r7, lr}
 80157f2:	b09b      	sub	sp, #108	; 0x6c
 80157f4:	af04      	add	r7, sp, #16
 80157f6:	60f8      	str	r0, [r7, #12]
 80157f8:	60b9      	str	r1, [r7, #8]
 80157fa:	4611      	mov	r1, r2
 80157fc:	461a      	mov	r2, r3
 80157fe:	460b      	mov	r3, r1
 8015800:	80fb      	strh	r3, [r7, #6]
 8015802:	4613      	mov	r3, r2
 8015804:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8015806:	2300      	movs	r3, #0
 8015808:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801580a:	2300      	movs	r3, #0
 801580c:	653b      	str	r3, [r7, #80]	; 0x50
 801580e:	2300      	movs	r3, #0
 8015810:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015812:	2300      	movs	r3, #0
 8015814:	64bb      	str	r3, [r7, #72]	; 0x48
 8015816:	2300      	movs	r3, #0
 8015818:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801581a:	2300      	movs	r3, #0
 801581c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8015820:	2300      	movs	r3, #0
 8015822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8015826:	2300      	movs	r3, #0
 8015828:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801582a:	2300      	movs	r3, #0
 801582c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801582e:	2300      	movs	r3, #0
 8015830:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	2b00      	cmp	r3, #0
 8015836:	d109      	bne.n	801584c <tcp_write+0x5c>
 8015838:	4ba4      	ldr	r3, [pc, #656]	; (8015acc <tcp_write+0x2dc>)
 801583a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801583e:	49a4      	ldr	r1, [pc, #656]	; (8015ad0 <tcp_write+0x2e0>)
 8015840:	48a4      	ldr	r0, [pc, #656]	; (8015ad4 <tcp_write+0x2e4>)
 8015842:	f00a f811 	bl	801f868 <iprintf>
 8015846:	f06f 030f 	mvn.w	r3, #15
 801584a:	e32a      	b.n	8015ea2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015852:	085b      	lsrs	r3, r3, #1
 8015854:	b29a      	uxth	r2, r3
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801585a:	4293      	cmp	r3, r2
 801585c:	bf28      	it	cs
 801585e:	4613      	movcs	r3, r2
 8015860:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8015862:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015864:	2b00      	cmp	r3, #0
 8015866:	d102      	bne.n	801586e <tcp_write+0x7e>
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801586c:	e000      	b.n	8015870 <tcp_write+0x80>
 801586e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015870:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8015872:	68bb      	ldr	r3, [r7, #8]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d109      	bne.n	801588c <tcp_write+0x9c>
 8015878:	4b94      	ldr	r3, [pc, #592]	; (8015acc <tcp_write+0x2dc>)
 801587a:	f240 12ad 	movw	r2, #429	; 0x1ad
 801587e:	4996      	ldr	r1, [pc, #600]	; (8015ad8 <tcp_write+0x2e8>)
 8015880:	4894      	ldr	r0, [pc, #592]	; (8015ad4 <tcp_write+0x2e4>)
 8015882:	f009 fff1 	bl	801f868 <iprintf>
 8015886:	f06f 030f 	mvn.w	r3, #15
 801588a:	e30a      	b.n	8015ea2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801588c:	88fb      	ldrh	r3, [r7, #6]
 801588e:	4619      	mov	r1, r3
 8015890:	68f8      	ldr	r0, [r7, #12]
 8015892:	f7ff ff33 	bl	80156fc <tcp_write_checks>
 8015896:	4603      	mov	r3, r0
 8015898:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801589c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d002      	beq.n	80158aa <tcp_write+0xba>
    return err;
 80158a4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80158a8:	e2fb      	b.n	8015ea2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80158b0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80158b4:	2300      	movs	r3, #0
 80158b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80158be:	2b00      	cmp	r3, #0
 80158c0:	f000 80f6 	beq.w	8015ab0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80158c8:	653b      	str	r3, [r7, #80]	; 0x50
 80158ca:	e002      	b.n	80158d2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80158cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80158d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d1f8      	bne.n	80158cc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80158da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158dc:	7a9b      	ldrb	r3, [r3, #10]
 80158de:	009b      	lsls	r3, r3, #2
 80158e0:	b29b      	uxth	r3, r3
 80158e2:	f003 0304 	and.w	r3, r3, #4
 80158e6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80158e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80158ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158ec:	891b      	ldrh	r3, [r3, #8]
 80158ee:	4619      	mov	r1, r3
 80158f0:	8c3b      	ldrh	r3, [r7, #32]
 80158f2:	440b      	add	r3, r1
 80158f4:	429a      	cmp	r2, r3
 80158f6:	da06      	bge.n	8015906 <tcp_write+0x116>
 80158f8:	4b74      	ldr	r3, [pc, #464]	; (8015acc <tcp_write+0x2dc>)
 80158fa:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80158fe:	4977      	ldr	r1, [pc, #476]	; (8015adc <tcp_write+0x2ec>)
 8015900:	4874      	ldr	r0, [pc, #464]	; (8015ad4 <tcp_write+0x2e4>)
 8015902:	f009 ffb1 	bl	801f868 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8015906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015908:	891a      	ldrh	r2, [r3, #8]
 801590a:	8c3b      	ldrh	r3, [r7, #32]
 801590c:	4413      	add	r3, r2
 801590e:	b29b      	uxth	r3, r3
 8015910:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015912:	1ad3      	subs	r3, r2, r3
 8015914:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801591c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801591e:	8a7b      	ldrh	r3, [r7, #18]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d026      	beq.n	8015972 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8015924:	8a7b      	ldrh	r3, [r7, #18]
 8015926:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015928:	429a      	cmp	r2, r3
 801592a:	d206      	bcs.n	801593a <tcp_write+0x14a>
 801592c:	4b67      	ldr	r3, [pc, #412]	; (8015acc <tcp_write+0x2dc>)
 801592e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8015932:	496b      	ldr	r1, [pc, #428]	; (8015ae0 <tcp_write+0x2f0>)
 8015934:	4867      	ldr	r0, [pc, #412]	; (8015ad4 <tcp_write+0x2e4>)
 8015936:	f009 ff97 	bl	801f868 <iprintf>
      seg = last_unsent;
 801593a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801593c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801593e:	8a7b      	ldrh	r3, [r7, #18]
 8015940:	88fa      	ldrh	r2, [r7, #6]
 8015942:	4293      	cmp	r3, r2
 8015944:	bf28      	it	cs
 8015946:	4613      	movcs	r3, r2
 8015948:	b29b      	uxth	r3, r3
 801594a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801594c:	4293      	cmp	r3, r2
 801594e:	bf28      	it	cs
 8015950:	4613      	movcs	r3, r2
 8015952:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8015954:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015958:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801595a:	4413      	add	r3, r2
 801595c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8015960:	8a7a      	ldrh	r2, [r7, #18]
 8015962:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015964:	1ad3      	subs	r3, r2, r3
 8015966:	b29b      	uxth	r3, r3
 8015968:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801596a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801596c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801596e:	1ad3      	subs	r3, r2, r3
 8015970:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8015972:	8a7b      	ldrh	r3, [r7, #18]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d00b      	beq.n	8015990 <tcp_write+0x1a0>
 8015978:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801597c:	88fb      	ldrh	r3, [r7, #6]
 801597e:	429a      	cmp	r2, r3
 8015980:	d006      	beq.n	8015990 <tcp_write+0x1a0>
 8015982:	4b52      	ldr	r3, [pc, #328]	; (8015acc <tcp_write+0x2dc>)
 8015984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015988:	4956      	ldr	r1, [pc, #344]	; (8015ae4 <tcp_write+0x2f4>)
 801598a:	4852      	ldr	r0, [pc, #328]	; (8015ad4 <tcp_write+0x2e4>)
 801598c:	f009 ff6c 	bl	801f868 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8015990:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015994:	88fb      	ldrh	r3, [r7, #6]
 8015996:	429a      	cmp	r2, r3
 8015998:	f080 8167 	bcs.w	8015c6a <tcp_write+0x47a>
 801599c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801599e:	2b00      	cmp	r3, #0
 80159a0:	f000 8163 	beq.w	8015c6a <tcp_write+0x47a>
 80159a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80159a6:	891b      	ldrh	r3, [r3, #8]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	f000 815e 	beq.w	8015c6a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80159ae:	88fa      	ldrh	r2, [r7, #6]
 80159b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80159b4:	1ad2      	subs	r2, r2, r3
 80159b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80159b8:	4293      	cmp	r3, r2
 80159ba:	bfa8      	it	ge
 80159bc:	4613      	movge	r3, r2
 80159be:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80159c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80159c2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80159c4:	797b      	ldrb	r3, [r7, #5]
 80159c6:	f003 0301 	and.w	r3, r3, #1
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d027      	beq.n	8015a1e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80159ce:	f107 0012 	add.w	r0, r7, #18
 80159d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80159d4:	8bf9      	ldrh	r1, [r7, #30]
 80159d6:	2301      	movs	r3, #1
 80159d8:	9302      	str	r3, [sp, #8]
 80159da:	797b      	ldrb	r3, [r7, #5]
 80159dc:	9301      	str	r3, [sp, #4]
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	9300      	str	r3, [sp, #0]
 80159e2:	4603      	mov	r3, r0
 80159e4:	2000      	movs	r0, #0
 80159e6:	f7ff fe0f 	bl	8015608 <tcp_pbuf_prealloc>
 80159ea:	6578      	str	r0, [r7, #84]	; 0x54
 80159ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	f000 8225 	beq.w	8015e3e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80159f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80159f6:	6858      	ldr	r0, [r3, #4]
 80159f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80159fc:	68ba      	ldr	r2, [r7, #8]
 80159fe:	4413      	add	r3, r2
 8015a00:	8bfa      	ldrh	r2, [r7, #30]
 8015a02:	4619      	mov	r1, r3
 8015a04:	f009 f892 	bl	801eb2c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8015a08:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015a0a:	f7fb f83f 	bl	8010a8c <pbuf_clen>
 8015a0e:	4603      	mov	r3, r0
 8015a10:	461a      	mov	r2, r3
 8015a12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015a16:	4413      	add	r3, r2
 8015a18:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8015a1c:	e041      	b.n	8015aa2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8015a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a20:	685b      	ldr	r3, [r3, #4]
 8015a22:	637b      	str	r3, [r7, #52]	; 0x34
 8015a24:	e002      	b.n	8015a2c <tcp_write+0x23c>
 8015a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8015a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d1f8      	bne.n	8015a26 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8015a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a36:	7b1b      	ldrb	r3, [r3, #12]
 8015a38:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d115      	bne.n	8015a6c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8015a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a42:	685b      	ldr	r3, [r3, #4]
 8015a44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015a46:	8952      	ldrh	r2, [r2, #10]
 8015a48:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8015a4a:	68ba      	ldr	r2, [r7, #8]
 8015a4c:	429a      	cmp	r2, r3
 8015a4e:	d10d      	bne.n	8015a6c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8015a50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d006      	beq.n	8015a66 <tcp_write+0x276>
 8015a58:	4b1c      	ldr	r3, [pc, #112]	; (8015acc <tcp_write+0x2dc>)
 8015a5a:	f240 2231 	movw	r2, #561	; 0x231
 8015a5e:	4922      	ldr	r1, [pc, #136]	; (8015ae8 <tcp_write+0x2f8>)
 8015a60:	481c      	ldr	r0, [pc, #112]	; (8015ad4 <tcp_write+0x2e4>)
 8015a62:	f009 ff01 	bl	801f868 <iprintf>
          extendlen = seglen;
 8015a66:	8bfb      	ldrh	r3, [r7, #30]
 8015a68:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8015a6a:	e01a      	b.n	8015aa2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8015a6c:	8bfb      	ldrh	r3, [r7, #30]
 8015a6e:	2201      	movs	r2, #1
 8015a70:	4619      	mov	r1, r3
 8015a72:	2000      	movs	r0, #0
 8015a74:	f7fa fc66 	bl	8010344 <pbuf_alloc>
 8015a78:	6578      	str	r0, [r7, #84]	; 0x54
 8015a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	f000 81e0 	beq.w	8015e42 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8015a82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015a86:	68ba      	ldr	r2, [r7, #8]
 8015a88:	441a      	add	r2, r3
 8015a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a8c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8015a8e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015a90:	f7fa fffc 	bl	8010a8c <pbuf_clen>
 8015a94:	4603      	mov	r3, r0
 8015a96:	461a      	mov	r2, r3
 8015a98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015a9c:	4413      	add	r3, r2
 8015a9e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8015aa2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015aa6:	8bfb      	ldrh	r3, [r7, #30]
 8015aa8:	4413      	add	r3, r2
 8015aaa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8015aae:	e0dc      	b.n	8015c6a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	f000 80d7 	beq.w	8015c6a <tcp_write+0x47a>
 8015abc:	4b03      	ldr	r3, [pc, #12]	; (8015acc <tcp_write+0x2dc>)
 8015abe:	f240 224a 	movw	r2, #586	; 0x24a
 8015ac2:	490a      	ldr	r1, [pc, #40]	; (8015aec <tcp_write+0x2fc>)
 8015ac4:	4803      	ldr	r0, [pc, #12]	; (8015ad4 <tcp_write+0x2e4>)
 8015ac6:	f009 fecf 	bl	801f868 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8015aca:	e0ce      	b.n	8015c6a <tcp_write+0x47a>
 8015acc:	0802404c 	.word	0x0802404c
 8015ad0:	080241ec 	.word	0x080241ec
 8015ad4:	080240a0 	.word	0x080240a0
 8015ad8:	08024204 	.word	0x08024204
 8015adc:	08024238 	.word	0x08024238
 8015ae0:	08024250 	.word	0x08024250
 8015ae4:	08024270 	.word	0x08024270
 8015ae8:	08024290 	.word	0x08024290
 8015aec:	080242bc 	.word	0x080242bc
    struct pbuf *p;
    u16_t left = len - pos;
 8015af0:	88fa      	ldrh	r2, [r7, #6]
 8015af2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015af6:	1ad3      	subs	r3, r2, r3
 8015af8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8015afa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015afe:	b29b      	uxth	r3, r3
 8015b00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015b02:	1ad3      	subs	r3, r2, r3
 8015b04:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8015b06:	8b7a      	ldrh	r2, [r7, #26]
 8015b08:	8bbb      	ldrh	r3, [r7, #28]
 8015b0a:	4293      	cmp	r3, r2
 8015b0c:	bf28      	it	cs
 8015b0e:	4613      	movcs	r3, r2
 8015b10:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8015b12:	797b      	ldrb	r3, [r7, #5]
 8015b14:	f003 0301 	and.w	r3, r3, #1
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d036      	beq.n	8015b8a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8015b1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015b20:	b29a      	uxth	r2, r3
 8015b22:	8b3b      	ldrh	r3, [r7, #24]
 8015b24:	4413      	add	r3, r2
 8015b26:	b299      	uxth	r1, r3
 8015b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	bf0c      	ite	eq
 8015b2e:	2301      	moveq	r3, #1
 8015b30:	2300      	movne	r3, #0
 8015b32:	b2db      	uxtb	r3, r3
 8015b34:	f107 0012 	add.w	r0, r7, #18
 8015b38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015b3a:	9302      	str	r3, [sp, #8]
 8015b3c:	797b      	ldrb	r3, [r7, #5]
 8015b3e:	9301      	str	r3, [sp, #4]
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	9300      	str	r3, [sp, #0]
 8015b44:	4603      	mov	r3, r0
 8015b46:	2036      	movs	r0, #54	; 0x36
 8015b48:	f7ff fd5e 	bl	8015608 <tcp_pbuf_prealloc>
 8015b4c:	6338      	str	r0, [r7, #48]	; 0x30
 8015b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	f000 8178 	beq.w	8015e46 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8015b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b58:	895b      	ldrh	r3, [r3, #10]
 8015b5a:	8b3a      	ldrh	r2, [r7, #24]
 8015b5c:	429a      	cmp	r2, r3
 8015b5e:	d906      	bls.n	8015b6e <tcp_write+0x37e>
 8015b60:	4b8c      	ldr	r3, [pc, #560]	; (8015d94 <tcp_write+0x5a4>)
 8015b62:	f240 2266 	movw	r2, #614	; 0x266
 8015b66:	498c      	ldr	r1, [pc, #560]	; (8015d98 <tcp_write+0x5a8>)
 8015b68:	488c      	ldr	r0, [pc, #560]	; (8015d9c <tcp_write+0x5ac>)
 8015b6a:	f009 fe7d 	bl	801f868 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8015b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b70:	685a      	ldr	r2, [r3, #4]
 8015b72:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015b76:	18d0      	adds	r0, r2, r3
 8015b78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015b7c:	68ba      	ldr	r2, [r7, #8]
 8015b7e:	4413      	add	r3, r2
 8015b80:	8b3a      	ldrh	r2, [r7, #24]
 8015b82:	4619      	mov	r1, r3
 8015b84:	f008 ffd2 	bl	801eb2c <memcpy>
 8015b88:	e02f      	b.n	8015bea <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8015b8a:	8a7b      	ldrh	r3, [r7, #18]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d006      	beq.n	8015b9e <tcp_write+0x3ae>
 8015b90:	4b80      	ldr	r3, [pc, #512]	; (8015d94 <tcp_write+0x5a4>)
 8015b92:	f240 2271 	movw	r2, #625	; 0x271
 8015b96:	4982      	ldr	r1, [pc, #520]	; (8015da0 <tcp_write+0x5b0>)
 8015b98:	4880      	ldr	r0, [pc, #512]	; (8015d9c <tcp_write+0x5ac>)
 8015b9a:	f009 fe65 	bl	801f868 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8015b9e:	8b3b      	ldrh	r3, [r7, #24]
 8015ba0:	2201      	movs	r2, #1
 8015ba2:	4619      	mov	r1, r3
 8015ba4:	2036      	movs	r0, #54	; 0x36
 8015ba6:	f7fa fbcd 	bl	8010344 <pbuf_alloc>
 8015baa:	6178      	str	r0, [r7, #20]
 8015bac:	697b      	ldr	r3, [r7, #20]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	f000 814b 	beq.w	8015e4a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8015bb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015bb8:	68ba      	ldr	r2, [r7, #8]
 8015bba:	441a      	add	r2, r3
 8015bbc:	697b      	ldr	r3, [r7, #20]
 8015bbe:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015bc0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015bc4:	b29b      	uxth	r3, r3
 8015bc6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015bca:	4619      	mov	r1, r3
 8015bcc:	2036      	movs	r0, #54	; 0x36
 8015bce:	f7fa fbb9 	bl	8010344 <pbuf_alloc>
 8015bd2:	6338      	str	r0, [r7, #48]	; 0x30
 8015bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d103      	bne.n	8015be2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8015bda:	6978      	ldr	r0, [r7, #20]
 8015bdc:	f7fa fec8 	bl	8010970 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8015be0:	e136      	b.n	8015e50 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8015be2:	6979      	ldr	r1, [r7, #20]
 8015be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015be6:	f7fa ff91 	bl	8010b0c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8015bea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015bec:	f7fa ff4e 	bl	8010a8c <pbuf_clen>
 8015bf0:	4603      	mov	r3, r0
 8015bf2:	461a      	mov	r2, r3
 8015bf4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015bf8:	4413      	add	r3, r2
 8015bfa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8015bfe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015c02:	2b09      	cmp	r3, #9
 8015c04:	d903      	bls.n	8015c0e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8015c06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c08:	f7fa feb2 	bl	8010970 <pbuf_free>
      goto memerr;
 8015c0c:	e120      	b.n	8015e50 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8015c12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015c16:	441a      	add	r2, r3
 8015c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c1c:	9300      	str	r3, [sp, #0]
 8015c1e:	4613      	mov	r3, r2
 8015c20:	2200      	movs	r2, #0
 8015c22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015c24:	68f8      	ldr	r0, [r7, #12]
 8015c26:	f7ff fc51 	bl	80154cc <tcp_create_segment>
 8015c2a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8015c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	f000 810d 	beq.w	8015e4e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8015c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d102      	bne.n	8015c40 <tcp_write+0x450>
      queue = seg;
 8015c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c3c:	647b      	str	r3, [r7, #68]	; 0x44
 8015c3e:	e00c      	b.n	8015c5a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8015c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d106      	bne.n	8015c54 <tcp_write+0x464>
 8015c46:	4b53      	ldr	r3, [pc, #332]	; (8015d94 <tcp_write+0x5a4>)
 8015c48:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015c4c:	4955      	ldr	r1, [pc, #340]	; (8015da4 <tcp_write+0x5b4>)
 8015c4e:	4853      	ldr	r0, [pc, #332]	; (8015d9c <tcp_write+0x5ac>)
 8015c50:	f009 fe0a 	bl	801f868 <iprintf>
      prev_seg->next = seg;
 8015c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015c56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015c58:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8015c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c5c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8015c5e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015c62:	8b3b      	ldrh	r3, [r7, #24]
 8015c64:	4413      	add	r3, r2
 8015c66:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8015c6a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015c6e:	88fb      	ldrh	r3, [r7, #6]
 8015c70:	429a      	cmp	r2, r3
 8015c72:	f4ff af3d 	bcc.w	8015af0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8015c76:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d02c      	beq.n	8015cd6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8015c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c7e:	685b      	ldr	r3, [r3, #4]
 8015c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015c82:	e01e      	b.n	8015cc2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8015c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c86:	891a      	ldrh	r2, [r3, #8]
 8015c88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015c8a:	4413      	add	r3, r2
 8015c8c:	b29a      	uxth	r2, r3
 8015c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c90:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8015c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d110      	bne.n	8015cbc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8015c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c9c:	685b      	ldr	r3, [r3, #4]
 8015c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ca0:	8952      	ldrh	r2, [r2, #10]
 8015ca2:	4413      	add	r3, r2
 8015ca4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015ca6:	68b9      	ldr	r1, [r7, #8]
 8015ca8:	4618      	mov	r0, r3
 8015caa:	f008 ff3f 	bl	801eb2c <memcpy>
        p->len += oversize_used;
 8015cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cb0:	895a      	ldrh	r2, [r3, #10]
 8015cb2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015cb4:	4413      	add	r3, r2
 8015cb6:	b29a      	uxth	r2, r3
 8015cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cba:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8015cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d1dd      	bne.n	8015c84 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8015cc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015cca:	891a      	ldrh	r2, [r3, #8]
 8015ccc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015cce:	4413      	add	r3, r2
 8015cd0:	b29a      	uxth	r2, r3
 8015cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015cd4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8015cd6:	8a7a      	ldrh	r2, [r7, #18]
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8015cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d018      	beq.n	8015d16 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8015ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d106      	bne.n	8015cf8 <tcp_write+0x508>
 8015cea:	4b2a      	ldr	r3, [pc, #168]	; (8015d94 <tcp_write+0x5a4>)
 8015cec:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8015cf0:	492d      	ldr	r1, [pc, #180]	; (8015da8 <tcp_write+0x5b8>)
 8015cf2:	482a      	ldr	r0, [pc, #168]	; (8015d9c <tcp_write+0x5ac>)
 8015cf4:	f009 fdb8 	bl	801f868 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8015cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015cfa:	685b      	ldr	r3, [r3, #4]
 8015cfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015cfe:	4618      	mov	r0, r3
 8015d00:	f7fa ff04 	bl	8010b0c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8015d04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d06:	891a      	ldrh	r2, [r3, #8]
 8015d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015d0a:	891b      	ldrh	r3, [r3, #8]
 8015d0c:	4413      	add	r3, r2
 8015d0e:	b29a      	uxth	r2, r3
 8015d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d12:	811a      	strh	r2, [r3, #8]
 8015d14:	e037      	b.n	8015d86 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8015d16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d034      	beq.n	8015d86 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8015d1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d003      	beq.n	8015d2a <tcp_write+0x53a>
 8015d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d24:	685b      	ldr	r3, [r3, #4]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d106      	bne.n	8015d38 <tcp_write+0x548>
 8015d2a:	4b1a      	ldr	r3, [pc, #104]	; (8015d94 <tcp_write+0x5a4>)
 8015d2c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8015d30:	491e      	ldr	r1, [pc, #120]	; (8015dac <tcp_write+0x5bc>)
 8015d32:	481a      	ldr	r0, [pc, #104]	; (8015d9c <tcp_write+0x5ac>)
 8015d34:	f009 fd98 	bl	801f868 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8015d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d3a:	685b      	ldr	r3, [r3, #4]
 8015d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8015d3e:	e009      	b.n	8015d54 <tcp_write+0x564>
      p->tot_len += extendlen;
 8015d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d42:	891a      	ldrh	r2, [r3, #8]
 8015d44:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015d46:	4413      	add	r3, r2
 8015d48:	b29a      	uxth	r2, r3
 8015d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d4c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8015d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	62bb      	str	r3, [r7, #40]	; 0x28
 8015d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d1f1      	bne.n	8015d40 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8015d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d5e:	891a      	ldrh	r2, [r3, #8]
 8015d60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015d62:	4413      	add	r3, r2
 8015d64:	b29a      	uxth	r2, r3
 8015d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d68:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8015d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d6c:	895a      	ldrh	r2, [r3, #10]
 8015d6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015d70:	4413      	add	r3, r2
 8015d72:	b29a      	uxth	r2, r3
 8015d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d76:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8015d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d7a:	891a      	ldrh	r2, [r3, #8]
 8015d7c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015d7e:	4413      	add	r3, r2
 8015d80:	b29a      	uxth	r2, r3
 8015d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d84:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8015d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d111      	bne.n	8015db0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015d90:	66da      	str	r2, [r3, #108]	; 0x6c
 8015d92:	e010      	b.n	8015db6 <tcp_write+0x5c6>
 8015d94:	0802404c 	.word	0x0802404c
 8015d98:	080242ec 	.word	0x080242ec
 8015d9c:	080240a0 	.word	0x080240a0
 8015da0:	0802432c 	.word	0x0802432c
 8015da4:	0802433c 	.word	0x0802433c
 8015da8:	08024350 	.word	0x08024350
 8015dac:	08024388 	.word	0x08024388
  } else {
    last_unsent->next = queue;
 8015db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015db2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015db4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8015dba:	88fb      	ldrh	r3, [r7, #6]
 8015dbc:	441a      	add	r2, r3
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8015dc8:	88fb      	ldrh	r3, [r7, #6]
 8015dca:	1ad3      	subs	r3, r2, r3
 8015dcc:	b29a      	uxth	r2, r3
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015dda:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d00e      	beq.n	8015e06 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d10a      	bne.n	8015e06 <tcp_write+0x616>
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d106      	bne.n	8015e06 <tcp_write+0x616>
 8015df8:	4b2c      	ldr	r3, [pc, #176]	; (8015eac <tcp_write+0x6bc>)
 8015dfa:	f240 3212 	movw	r2, #786	; 0x312
 8015dfe:	492c      	ldr	r1, [pc, #176]	; (8015eb0 <tcp_write+0x6c0>)
 8015e00:	482c      	ldr	r0, [pc, #176]	; (8015eb4 <tcp_write+0x6c4>)
 8015e02:	f009 fd31 	bl	801f868 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8015e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d016      	beq.n	8015e3a <tcp_write+0x64a>
 8015e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e0e:	68db      	ldr	r3, [r3, #12]
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d012      	beq.n	8015e3a <tcp_write+0x64a>
 8015e14:	797b      	ldrb	r3, [r7, #5]
 8015e16:	f003 0302 	and.w	r3, r3, #2
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d10d      	bne.n	8015e3a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8015e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e20:	68db      	ldr	r3, [r3, #12]
 8015e22:	899b      	ldrh	r3, [r3, #12]
 8015e24:	b29c      	uxth	r4, r3
 8015e26:	2008      	movs	r0, #8
 8015e28:	f7f8 fe92 	bl	800eb50 <lwip_htons>
 8015e2c:	4603      	mov	r3, r0
 8015e2e:	461a      	mov	r2, r3
 8015e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e32:	68db      	ldr	r3, [r3, #12]
 8015e34:	4322      	orrs	r2, r4
 8015e36:	b292      	uxth	r2, r2
 8015e38:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	e031      	b.n	8015ea2 <tcp_write+0x6b2>
          goto memerr;
 8015e3e:	bf00      	nop
 8015e40:	e006      	b.n	8015e50 <tcp_write+0x660>
            goto memerr;
 8015e42:	bf00      	nop
 8015e44:	e004      	b.n	8015e50 <tcp_write+0x660>
        goto memerr;
 8015e46:	bf00      	nop
 8015e48:	e002      	b.n	8015e50 <tcp_write+0x660>
        goto memerr;
 8015e4a:	bf00      	nop
 8015e4c:	e000      	b.n	8015e50 <tcp_write+0x660>
      goto memerr;
 8015e4e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	8b5b      	ldrh	r3, [r3, #26]
 8015e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015e58:	b29a      	uxth	r2, r3
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8015e5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d002      	beq.n	8015e6a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8015e64:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015e66:	f7fa fd83 	bl	8010970 <pbuf_free>
  }
  if (queue != NULL) {
 8015e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d002      	beq.n	8015e76 <tcp_write+0x686>
    tcp_segs_free(queue);
 8015e70:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015e72:	f7fc fb6f 	bl	8012554 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d00e      	beq.n	8015e9e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d10a      	bne.n	8015e9e <tcp_write+0x6ae>
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d106      	bne.n	8015e9e <tcp_write+0x6ae>
 8015e90:	4b06      	ldr	r3, [pc, #24]	; (8015eac <tcp_write+0x6bc>)
 8015e92:	f240 3227 	movw	r2, #807	; 0x327
 8015e96:	4906      	ldr	r1, [pc, #24]	; (8015eb0 <tcp_write+0x6c0>)
 8015e98:	4806      	ldr	r0, [pc, #24]	; (8015eb4 <tcp_write+0x6c4>)
 8015e9a:	f009 fce5 	bl	801f868 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8015e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015ea2:	4618      	mov	r0, r3
 8015ea4:	375c      	adds	r7, #92	; 0x5c
 8015ea6:	46bd      	mov	sp, r7
 8015ea8:	bd90      	pop	{r4, r7, pc}
 8015eaa:	bf00      	nop
 8015eac:	0802404c 	.word	0x0802404c
 8015eb0:	080243c0 	.word	0x080243c0
 8015eb4:	080240a0 	.word	0x080240a0

08015eb8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8015eb8:	b590      	push	{r4, r7, lr}
 8015eba:	b08b      	sub	sp, #44	; 0x2c
 8015ebc:	af02      	add	r7, sp, #8
 8015ebe:	6078      	str	r0, [r7, #4]
 8015ec0:	460b      	mov	r3, r1
 8015ec2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	61fb      	str	r3, [r7, #28]
 8015ec8:	2300      	movs	r3, #0
 8015eca:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8015ecc:	2300      	movs	r3, #0
 8015ece:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d106      	bne.n	8015ee4 <tcp_split_unsent_seg+0x2c>
 8015ed6:	4b95      	ldr	r3, [pc, #596]	; (801612c <tcp_split_unsent_seg+0x274>)
 8015ed8:	f240 324b 	movw	r2, #843	; 0x34b
 8015edc:	4994      	ldr	r1, [pc, #592]	; (8016130 <tcp_split_unsent_seg+0x278>)
 8015ede:	4895      	ldr	r0, [pc, #596]	; (8016134 <tcp_split_unsent_seg+0x27c>)
 8015ee0:	f009 fcc2 	bl	801f868 <iprintf>

  useg = pcb->unsent;
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ee8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8015eea:	697b      	ldr	r3, [r7, #20]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d102      	bne.n	8015ef6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8015ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8015ef4:	e116      	b.n	8016124 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8015ef6:	887b      	ldrh	r3, [r7, #2]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d109      	bne.n	8015f10 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8015efc:	4b8b      	ldr	r3, [pc, #556]	; (801612c <tcp_split_unsent_seg+0x274>)
 8015efe:	f240 3253 	movw	r2, #851	; 0x353
 8015f02:	498d      	ldr	r1, [pc, #564]	; (8016138 <tcp_split_unsent_seg+0x280>)
 8015f04:	488b      	ldr	r0, [pc, #556]	; (8016134 <tcp_split_unsent_seg+0x27c>)
 8015f06:	f009 fcaf 	bl	801f868 <iprintf>
    return ERR_VAL;
 8015f0a:	f06f 0305 	mvn.w	r3, #5
 8015f0e:	e109      	b.n	8016124 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8015f10:	697b      	ldr	r3, [r7, #20]
 8015f12:	891b      	ldrh	r3, [r3, #8]
 8015f14:	887a      	ldrh	r2, [r7, #2]
 8015f16:	429a      	cmp	r2, r3
 8015f18:	d301      	bcc.n	8015f1e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	e102      	b.n	8016124 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f22:	887a      	ldrh	r2, [r7, #2]
 8015f24:	429a      	cmp	r2, r3
 8015f26:	d906      	bls.n	8015f36 <tcp_split_unsent_seg+0x7e>
 8015f28:	4b80      	ldr	r3, [pc, #512]	; (801612c <tcp_split_unsent_seg+0x274>)
 8015f2a:	f240 325b 	movw	r2, #859	; 0x35b
 8015f2e:	4983      	ldr	r1, [pc, #524]	; (801613c <tcp_split_unsent_seg+0x284>)
 8015f30:	4880      	ldr	r0, [pc, #512]	; (8016134 <tcp_split_unsent_seg+0x27c>)
 8015f32:	f009 fc99 	bl	801f868 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8015f36:	697b      	ldr	r3, [r7, #20]
 8015f38:	891b      	ldrh	r3, [r3, #8]
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d106      	bne.n	8015f4c <tcp_split_unsent_seg+0x94>
 8015f3e:	4b7b      	ldr	r3, [pc, #492]	; (801612c <tcp_split_unsent_seg+0x274>)
 8015f40:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8015f44:	497e      	ldr	r1, [pc, #504]	; (8016140 <tcp_split_unsent_seg+0x288>)
 8015f46:	487b      	ldr	r0, [pc, #492]	; (8016134 <tcp_split_unsent_seg+0x27c>)
 8015f48:	f009 fc8e 	bl	801f868 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8015f4c:	697b      	ldr	r3, [r7, #20]
 8015f4e:	7a9b      	ldrb	r3, [r3, #10]
 8015f50:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8015f52:	7bfb      	ldrb	r3, [r7, #15]
 8015f54:	009b      	lsls	r3, r3, #2
 8015f56:	b2db      	uxtb	r3, r3
 8015f58:	f003 0304 	and.w	r3, r3, #4
 8015f5c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8015f5e:	697b      	ldr	r3, [r7, #20]
 8015f60:	891a      	ldrh	r2, [r3, #8]
 8015f62:	887b      	ldrh	r3, [r7, #2]
 8015f64:	1ad3      	subs	r3, r2, r3
 8015f66:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8015f68:	7bbb      	ldrb	r3, [r7, #14]
 8015f6a:	b29a      	uxth	r2, r3
 8015f6c:	89bb      	ldrh	r3, [r7, #12]
 8015f6e:	4413      	add	r3, r2
 8015f70:	b29b      	uxth	r3, r3
 8015f72:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015f76:	4619      	mov	r1, r3
 8015f78:	2036      	movs	r0, #54	; 0x36
 8015f7a:	f7fa f9e3 	bl	8010344 <pbuf_alloc>
 8015f7e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015f80:	693b      	ldr	r3, [r7, #16]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	f000 80b7 	beq.w	80160f6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8015f88:	697b      	ldr	r3, [r7, #20]
 8015f8a:	685b      	ldr	r3, [r3, #4]
 8015f8c:	891a      	ldrh	r2, [r3, #8]
 8015f8e:	697b      	ldr	r3, [r7, #20]
 8015f90:	891b      	ldrh	r3, [r3, #8]
 8015f92:	1ad3      	subs	r3, r2, r3
 8015f94:	b29a      	uxth	r2, r3
 8015f96:	887b      	ldrh	r3, [r7, #2]
 8015f98:	4413      	add	r3, r2
 8015f9a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8015f9c:	697b      	ldr	r3, [r7, #20]
 8015f9e:	6858      	ldr	r0, [r3, #4]
 8015fa0:	693b      	ldr	r3, [r7, #16]
 8015fa2:	685a      	ldr	r2, [r3, #4]
 8015fa4:	7bbb      	ldrb	r3, [r7, #14]
 8015fa6:	18d1      	adds	r1, r2, r3
 8015fa8:	897b      	ldrh	r3, [r7, #10]
 8015faa:	89ba      	ldrh	r2, [r7, #12]
 8015fac:	f7fa fee6 	bl	8010d7c <pbuf_copy_partial>
 8015fb0:	4603      	mov	r3, r0
 8015fb2:	461a      	mov	r2, r3
 8015fb4:	89bb      	ldrh	r3, [r7, #12]
 8015fb6:	4293      	cmp	r3, r2
 8015fb8:	f040 809f 	bne.w	80160fa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8015fbc:	697b      	ldr	r3, [r7, #20]
 8015fbe:	68db      	ldr	r3, [r3, #12]
 8015fc0:	899b      	ldrh	r3, [r3, #12]
 8015fc2:	b29b      	uxth	r3, r3
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	f7f8 fdc3 	bl	800eb50 <lwip_htons>
 8015fca:	4603      	mov	r3, r0
 8015fcc:	b2db      	uxtb	r3, r3
 8015fce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015fd2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8015fd8:	7efb      	ldrb	r3, [r7, #27]
 8015fda:	f003 0308 	and.w	r3, r3, #8
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d007      	beq.n	8015ff2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8015fe2:	7efb      	ldrb	r3, [r7, #27]
 8015fe4:	f023 0308 	bic.w	r3, r3, #8
 8015fe8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8015fea:	7ebb      	ldrb	r3, [r7, #26]
 8015fec:	f043 0308 	orr.w	r3, r3, #8
 8015ff0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8015ff2:	7efb      	ldrb	r3, [r7, #27]
 8015ff4:	f003 0301 	and.w	r3, r3, #1
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d007      	beq.n	801600c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8015ffc:	7efb      	ldrb	r3, [r7, #27]
 8015ffe:	f023 0301 	bic.w	r3, r3, #1
 8016002:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8016004:	7ebb      	ldrb	r3, [r7, #26]
 8016006:	f043 0301 	orr.w	r3, r3, #1
 801600a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801600c:	697b      	ldr	r3, [r7, #20]
 801600e:	68db      	ldr	r3, [r3, #12]
 8016010:	685b      	ldr	r3, [r3, #4]
 8016012:	4618      	mov	r0, r3
 8016014:	f7f8 fdb1 	bl	800eb7a <lwip_htonl>
 8016018:	4602      	mov	r2, r0
 801601a:	887b      	ldrh	r3, [r7, #2]
 801601c:	18d1      	adds	r1, r2, r3
 801601e:	7eba      	ldrb	r2, [r7, #26]
 8016020:	7bfb      	ldrb	r3, [r7, #15]
 8016022:	9300      	str	r3, [sp, #0]
 8016024:	460b      	mov	r3, r1
 8016026:	6939      	ldr	r1, [r7, #16]
 8016028:	6878      	ldr	r0, [r7, #4]
 801602a:	f7ff fa4f 	bl	80154cc <tcp_create_segment>
 801602e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8016030:	69fb      	ldr	r3, [r7, #28]
 8016032:	2b00      	cmp	r3, #0
 8016034:	d063      	beq.n	80160fe <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8016036:	697b      	ldr	r3, [r7, #20]
 8016038:	685b      	ldr	r3, [r3, #4]
 801603a:	4618      	mov	r0, r3
 801603c:	f7fa fd26 	bl	8010a8c <pbuf_clen>
 8016040:	4603      	mov	r3, r0
 8016042:	461a      	mov	r2, r3
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801604a:	1a9b      	subs	r3, r3, r2
 801604c:	b29a      	uxth	r2, r3
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8016054:	697b      	ldr	r3, [r7, #20]
 8016056:	6858      	ldr	r0, [r3, #4]
 8016058:	697b      	ldr	r3, [r7, #20]
 801605a:	685b      	ldr	r3, [r3, #4]
 801605c:	891a      	ldrh	r2, [r3, #8]
 801605e:	89bb      	ldrh	r3, [r7, #12]
 8016060:	1ad3      	subs	r3, r2, r3
 8016062:	b29b      	uxth	r3, r3
 8016064:	4619      	mov	r1, r3
 8016066:	f7fa facb 	bl	8010600 <pbuf_realloc>
  useg->len -= remainder;
 801606a:	697b      	ldr	r3, [r7, #20]
 801606c:	891a      	ldrh	r2, [r3, #8]
 801606e:	89bb      	ldrh	r3, [r7, #12]
 8016070:	1ad3      	subs	r3, r2, r3
 8016072:	b29a      	uxth	r2, r3
 8016074:	697b      	ldr	r3, [r7, #20]
 8016076:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8016078:	697b      	ldr	r3, [r7, #20]
 801607a:	68db      	ldr	r3, [r3, #12]
 801607c:	899b      	ldrh	r3, [r3, #12]
 801607e:	b29c      	uxth	r4, r3
 8016080:	7efb      	ldrb	r3, [r7, #27]
 8016082:	b29b      	uxth	r3, r3
 8016084:	4618      	mov	r0, r3
 8016086:	f7f8 fd63 	bl	800eb50 <lwip_htons>
 801608a:	4603      	mov	r3, r0
 801608c:	461a      	mov	r2, r3
 801608e:	697b      	ldr	r3, [r7, #20]
 8016090:	68db      	ldr	r3, [r3, #12]
 8016092:	4322      	orrs	r2, r4
 8016094:	b292      	uxth	r2, r2
 8016096:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016098:	697b      	ldr	r3, [r7, #20]
 801609a:	685b      	ldr	r3, [r3, #4]
 801609c:	4618      	mov	r0, r3
 801609e:	f7fa fcf5 	bl	8010a8c <pbuf_clen>
 80160a2:	4603      	mov	r3, r0
 80160a4:	461a      	mov	r2, r3
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80160ac:	4413      	add	r3, r2
 80160ae:	b29a      	uxth	r2, r3
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80160b6:	69fb      	ldr	r3, [r7, #28]
 80160b8:	685b      	ldr	r3, [r3, #4]
 80160ba:	4618      	mov	r0, r3
 80160bc:	f7fa fce6 	bl	8010a8c <pbuf_clen>
 80160c0:	4603      	mov	r3, r0
 80160c2:	461a      	mov	r2, r3
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80160ca:	4413      	add	r3, r2
 80160cc:	b29a      	uxth	r2, r3
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80160d4:	697b      	ldr	r3, [r7, #20]
 80160d6:	681a      	ldr	r2, [r3, #0]
 80160d8:	69fb      	ldr	r3, [r7, #28]
 80160da:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80160dc:	697b      	ldr	r3, [r7, #20]
 80160de:	69fa      	ldr	r2, [r7, #28]
 80160e0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80160e2:	69fb      	ldr	r3, [r7, #28]
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d103      	bne.n	80160f2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	2200      	movs	r2, #0
 80160ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80160f2:	2300      	movs	r3, #0
 80160f4:	e016      	b.n	8016124 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80160f6:	bf00      	nop
 80160f8:	e002      	b.n	8016100 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80160fa:	bf00      	nop
 80160fc:	e000      	b.n	8016100 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80160fe:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016100:	69fb      	ldr	r3, [r7, #28]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d006      	beq.n	8016114 <tcp_split_unsent_seg+0x25c>
 8016106:	4b09      	ldr	r3, [pc, #36]	; (801612c <tcp_split_unsent_seg+0x274>)
 8016108:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801610c:	490d      	ldr	r1, [pc, #52]	; (8016144 <tcp_split_unsent_seg+0x28c>)
 801610e:	4809      	ldr	r0, [pc, #36]	; (8016134 <tcp_split_unsent_seg+0x27c>)
 8016110:	f009 fbaa 	bl	801f868 <iprintf>
  if (p != NULL) {
 8016114:	693b      	ldr	r3, [r7, #16]
 8016116:	2b00      	cmp	r3, #0
 8016118:	d002      	beq.n	8016120 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801611a:	6938      	ldr	r0, [r7, #16]
 801611c:	f7fa fc28 	bl	8010970 <pbuf_free>
  }

  return ERR_MEM;
 8016120:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016124:	4618      	mov	r0, r3
 8016126:	3724      	adds	r7, #36	; 0x24
 8016128:	46bd      	mov	sp, r7
 801612a:	bd90      	pop	{r4, r7, pc}
 801612c:	0802404c 	.word	0x0802404c
 8016130:	080243e0 	.word	0x080243e0
 8016134:	080240a0 	.word	0x080240a0
 8016138:	08024404 	.word	0x08024404
 801613c:	08024428 	.word	0x08024428
 8016140:	08024438 	.word	0x08024438
 8016144:	08024448 	.word	0x08024448

08016148 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016148:	b590      	push	{r4, r7, lr}
 801614a:	b085      	sub	sp, #20
 801614c:	af00      	add	r7, sp, #0
 801614e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d106      	bne.n	8016164 <tcp_send_fin+0x1c>
 8016156:	4b21      	ldr	r3, [pc, #132]	; (80161dc <tcp_send_fin+0x94>)
 8016158:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801615c:	4920      	ldr	r1, [pc, #128]	; (80161e0 <tcp_send_fin+0x98>)
 801615e:	4821      	ldr	r0, [pc, #132]	; (80161e4 <tcp_send_fin+0x9c>)
 8016160:	f009 fb82 	bl	801f868 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016168:	2b00      	cmp	r3, #0
 801616a:	d02e      	beq.n	80161ca <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016170:	60fb      	str	r3, [r7, #12]
 8016172:	e002      	b.n	801617a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d1f8      	bne.n	8016174 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	68db      	ldr	r3, [r3, #12]
 8016186:	899b      	ldrh	r3, [r3, #12]
 8016188:	b29b      	uxth	r3, r3
 801618a:	4618      	mov	r0, r3
 801618c:	f7f8 fce0 	bl	800eb50 <lwip_htons>
 8016190:	4603      	mov	r3, r0
 8016192:	b2db      	uxtb	r3, r3
 8016194:	f003 0307 	and.w	r3, r3, #7
 8016198:	2b00      	cmp	r3, #0
 801619a:	d116      	bne.n	80161ca <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	68db      	ldr	r3, [r3, #12]
 80161a0:	899b      	ldrh	r3, [r3, #12]
 80161a2:	b29c      	uxth	r4, r3
 80161a4:	2001      	movs	r0, #1
 80161a6:	f7f8 fcd3 	bl	800eb50 <lwip_htons>
 80161aa:	4603      	mov	r3, r0
 80161ac:	461a      	mov	r2, r3
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	68db      	ldr	r3, [r3, #12]
 80161b2:	4322      	orrs	r2, r4
 80161b4:	b292      	uxth	r2, r2
 80161b6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	8b5b      	ldrh	r3, [r3, #26]
 80161bc:	f043 0320 	orr.w	r3, r3, #32
 80161c0:	b29a      	uxth	r2, r3
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80161c6:	2300      	movs	r3, #0
 80161c8:	e004      	b.n	80161d4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80161ca:	2101      	movs	r1, #1
 80161cc:	6878      	ldr	r0, [r7, #4]
 80161ce:	f000 f80b 	bl	80161e8 <tcp_enqueue_flags>
 80161d2:	4603      	mov	r3, r0
}
 80161d4:	4618      	mov	r0, r3
 80161d6:	3714      	adds	r7, #20
 80161d8:	46bd      	mov	sp, r7
 80161da:	bd90      	pop	{r4, r7, pc}
 80161dc:	0802404c 	.word	0x0802404c
 80161e0:	08024454 	.word	0x08024454
 80161e4:	080240a0 	.word	0x080240a0

080161e8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80161e8:	b580      	push	{r7, lr}
 80161ea:	b08a      	sub	sp, #40	; 0x28
 80161ec:	af02      	add	r7, sp, #8
 80161ee:	6078      	str	r0, [r7, #4]
 80161f0:	460b      	mov	r3, r1
 80161f2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80161f4:	2300      	movs	r3, #0
 80161f6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80161f8:	2300      	movs	r3, #0
 80161fa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80161fc:	78fb      	ldrb	r3, [r7, #3]
 80161fe:	f003 0303 	and.w	r3, r3, #3
 8016202:	2b00      	cmp	r3, #0
 8016204:	d106      	bne.n	8016214 <tcp_enqueue_flags+0x2c>
 8016206:	4b67      	ldr	r3, [pc, #412]	; (80163a4 <tcp_enqueue_flags+0x1bc>)
 8016208:	f240 4211 	movw	r2, #1041	; 0x411
 801620c:	4966      	ldr	r1, [pc, #408]	; (80163a8 <tcp_enqueue_flags+0x1c0>)
 801620e:	4867      	ldr	r0, [pc, #412]	; (80163ac <tcp_enqueue_flags+0x1c4>)
 8016210:	f009 fb2a 	bl	801f868 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d106      	bne.n	8016228 <tcp_enqueue_flags+0x40>
 801621a:	4b62      	ldr	r3, [pc, #392]	; (80163a4 <tcp_enqueue_flags+0x1bc>)
 801621c:	f240 4213 	movw	r2, #1043	; 0x413
 8016220:	4963      	ldr	r1, [pc, #396]	; (80163b0 <tcp_enqueue_flags+0x1c8>)
 8016222:	4862      	ldr	r0, [pc, #392]	; (80163ac <tcp_enqueue_flags+0x1c4>)
 8016224:	f009 fb20 	bl	801f868 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016228:	78fb      	ldrb	r3, [r7, #3]
 801622a:	f003 0302 	and.w	r3, r3, #2
 801622e:	2b00      	cmp	r3, #0
 8016230:	d001      	beq.n	8016236 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8016232:	2301      	movs	r3, #1
 8016234:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016236:	7ffb      	ldrb	r3, [r7, #31]
 8016238:	009b      	lsls	r3, r3, #2
 801623a:	b2db      	uxtb	r3, r3
 801623c:	f003 0304 	and.w	r3, r3, #4
 8016240:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016242:	7dfb      	ldrb	r3, [r7, #23]
 8016244:	b29b      	uxth	r3, r3
 8016246:	f44f 7220 	mov.w	r2, #640	; 0x280
 801624a:	4619      	mov	r1, r3
 801624c:	2036      	movs	r0, #54	; 0x36
 801624e:	f7fa f879 	bl	8010344 <pbuf_alloc>
 8016252:	6138      	str	r0, [r7, #16]
 8016254:	693b      	ldr	r3, [r7, #16]
 8016256:	2b00      	cmp	r3, #0
 8016258:	d109      	bne.n	801626e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	8b5b      	ldrh	r3, [r3, #26]
 801625e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016262:	b29a      	uxth	r2, r3
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016268:	f04f 33ff 	mov.w	r3, #4294967295
 801626c:	e095      	b.n	801639a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801626e:	693b      	ldr	r3, [r7, #16]
 8016270:	895a      	ldrh	r2, [r3, #10]
 8016272:	7dfb      	ldrb	r3, [r7, #23]
 8016274:	b29b      	uxth	r3, r3
 8016276:	429a      	cmp	r2, r3
 8016278:	d206      	bcs.n	8016288 <tcp_enqueue_flags+0xa0>
 801627a:	4b4a      	ldr	r3, [pc, #296]	; (80163a4 <tcp_enqueue_flags+0x1bc>)
 801627c:	f240 4239 	movw	r2, #1081	; 0x439
 8016280:	494c      	ldr	r1, [pc, #304]	; (80163b4 <tcp_enqueue_flags+0x1cc>)
 8016282:	484a      	ldr	r0, [pc, #296]	; (80163ac <tcp_enqueue_flags+0x1c4>)
 8016284:	f009 faf0 	bl	801f868 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801628c:	78fa      	ldrb	r2, [r7, #3]
 801628e:	7ffb      	ldrb	r3, [r7, #31]
 8016290:	9300      	str	r3, [sp, #0]
 8016292:	460b      	mov	r3, r1
 8016294:	6939      	ldr	r1, [r7, #16]
 8016296:	6878      	ldr	r0, [r7, #4]
 8016298:	f7ff f918 	bl	80154cc <tcp_create_segment>
 801629c:	60f8      	str	r0, [r7, #12]
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d109      	bne.n	80162b8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	8b5b      	ldrh	r3, [r3, #26]
 80162a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80162ac:	b29a      	uxth	r2, r3
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80162b2:	f04f 33ff 	mov.w	r3, #4294967295
 80162b6:	e070      	b.n	801639a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	68db      	ldr	r3, [r3, #12]
 80162bc:	f003 0303 	and.w	r3, r3, #3
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d006      	beq.n	80162d2 <tcp_enqueue_flags+0xea>
 80162c4:	4b37      	ldr	r3, [pc, #220]	; (80163a4 <tcp_enqueue_flags+0x1bc>)
 80162c6:	f240 4242 	movw	r2, #1090	; 0x442
 80162ca:	493b      	ldr	r1, [pc, #236]	; (80163b8 <tcp_enqueue_flags+0x1d0>)
 80162cc:	4837      	ldr	r0, [pc, #220]	; (80163ac <tcp_enqueue_flags+0x1c4>)
 80162ce:	f009 facb 	bl	801f868 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	891b      	ldrh	r3, [r3, #8]
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d006      	beq.n	80162e8 <tcp_enqueue_flags+0x100>
 80162da:	4b32      	ldr	r3, [pc, #200]	; (80163a4 <tcp_enqueue_flags+0x1bc>)
 80162dc:	f240 4243 	movw	r2, #1091	; 0x443
 80162e0:	4936      	ldr	r1, [pc, #216]	; (80163bc <tcp_enqueue_flags+0x1d4>)
 80162e2:	4832      	ldr	r0, [pc, #200]	; (80163ac <tcp_enqueue_flags+0x1c4>)
 80162e4:	f009 fac0 	bl	801f868 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d103      	bne.n	80162f8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	68fa      	ldr	r2, [r7, #12]
 80162f4:	66da      	str	r2, [r3, #108]	; 0x6c
 80162f6:	e00d      	b.n	8016314 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80162fc:	61bb      	str	r3, [r7, #24]
 80162fe:	e002      	b.n	8016306 <tcp_enqueue_flags+0x11e>
 8016300:	69bb      	ldr	r3, [r7, #24]
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	61bb      	str	r3, [r7, #24]
 8016306:	69bb      	ldr	r3, [r7, #24]
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d1f8      	bne.n	8016300 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801630e:	69bb      	ldr	r3, [r7, #24]
 8016310:	68fa      	ldr	r2, [r7, #12]
 8016312:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	2200      	movs	r2, #0
 8016318:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801631c:	78fb      	ldrb	r3, [r7, #3]
 801631e:	f003 0302 	and.w	r3, r3, #2
 8016322:	2b00      	cmp	r3, #0
 8016324:	d104      	bne.n	8016330 <tcp_enqueue_flags+0x148>
 8016326:	78fb      	ldrb	r3, [r7, #3]
 8016328:	f003 0301 	and.w	r3, r3, #1
 801632c:	2b00      	cmp	r3, #0
 801632e:	d004      	beq.n	801633a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016334:	1c5a      	adds	r2, r3, #1
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801633a:	78fb      	ldrb	r3, [r7, #3]
 801633c:	f003 0301 	and.w	r3, r3, #1
 8016340:	2b00      	cmp	r3, #0
 8016342:	d006      	beq.n	8016352 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	8b5b      	ldrh	r3, [r3, #26]
 8016348:	f043 0320 	orr.w	r3, r3, #32
 801634c:	b29a      	uxth	r2, r3
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	685b      	ldr	r3, [r3, #4]
 8016356:	4618      	mov	r0, r3
 8016358:	f7fa fb98 	bl	8010a8c <pbuf_clen>
 801635c:	4603      	mov	r3, r0
 801635e:	461a      	mov	r2, r3
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016366:	4413      	add	r3, r2
 8016368:	b29a      	uxth	r2, r3
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016376:	2b00      	cmp	r3, #0
 8016378:	d00e      	beq.n	8016398 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801637e:	2b00      	cmp	r3, #0
 8016380:	d10a      	bne.n	8016398 <tcp_enqueue_flags+0x1b0>
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016386:	2b00      	cmp	r3, #0
 8016388:	d106      	bne.n	8016398 <tcp_enqueue_flags+0x1b0>
 801638a:	4b06      	ldr	r3, [pc, #24]	; (80163a4 <tcp_enqueue_flags+0x1bc>)
 801638c:	f240 4265 	movw	r2, #1125	; 0x465
 8016390:	490b      	ldr	r1, [pc, #44]	; (80163c0 <tcp_enqueue_flags+0x1d8>)
 8016392:	4806      	ldr	r0, [pc, #24]	; (80163ac <tcp_enqueue_flags+0x1c4>)
 8016394:	f009 fa68 	bl	801f868 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016398:	2300      	movs	r3, #0
}
 801639a:	4618      	mov	r0, r3
 801639c:	3720      	adds	r7, #32
 801639e:	46bd      	mov	sp, r7
 80163a0:	bd80      	pop	{r7, pc}
 80163a2:	bf00      	nop
 80163a4:	0802404c 	.word	0x0802404c
 80163a8:	08024470 	.word	0x08024470
 80163ac:	080240a0 	.word	0x080240a0
 80163b0:	080244c8 	.word	0x080244c8
 80163b4:	080244e8 	.word	0x080244e8
 80163b8:	08024524 	.word	0x08024524
 80163bc:	0802453c 	.word	0x0802453c
 80163c0:	08024568 	.word	0x08024568

080163c4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80163c4:	b5b0      	push	{r4, r5, r7, lr}
 80163c6:	b08a      	sub	sp, #40	; 0x28
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d106      	bne.n	80163e0 <tcp_output+0x1c>
 80163d2:	4b9e      	ldr	r3, [pc, #632]	; (801664c <tcp_output+0x288>)
 80163d4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80163d8:	499d      	ldr	r1, [pc, #628]	; (8016650 <tcp_output+0x28c>)
 80163da:	489e      	ldr	r0, [pc, #632]	; (8016654 <tcp_output+0x290>)
 80163dc:	f009 fa44 	bl	801f868 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	7d1b      	ldrb	r3, [r3, #20]
 80163e4:	2b01      	cmp	r3, #1
 80163e6:	d106      	bne.n	80163f6 <tcp_output+0x32>
 80163e8:	4b98      	ldr	r3, [pc, #608]	; (801664c <tcp_output+0x288>)
 80163ea:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80163ee:	499a      	ldr	r1, [pc, #616]	; (8016658 <tcp_output+0x294>)
 80163f0:	4898      	ldr	r0, [pc, #608]	; (8016654 <tcp_output+0x290>)
 80163f2:	f009 fa39 	bl	801f868 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80163f6:	4b99      	ldr	r3, [pc, #612]	; (801665c <tcp_output+0x298>)
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	687a      	ldr	r2, [r7, #4]
 80163fc:	429a      	cmp	r2, r3
 80163fe:	d101      	bne.n	8016404 <tcp_output+0x40>
    return ERR_OK;
 8016400:	2300      	movs	r3, #0
 8016402:	e1ce      	b.n	80167a2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016410:	4293      	cmp	r3, r2
 8016412:	bf28      	it	cs
 8016414:	4613      	movcs	r3, r2
 8016416:	b29b      	uxth	r3, r3
 8016418:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801641e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8016420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016422:	2b00      	cmp	r3, #0
 8016424:	d10b      	bne.n	801643e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	8b5b      	ldrh	r3, [r3, #26]
 801642a:	f003 0302 	and.w	r3, r3, #2
 801642e:	2b00      	cmp	r3, #0
 8016430:	f000 81aa 	beq.w	8016788 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016434:	6878      	ldr	r0, [r7, #4]
 8016436:	f000 fdcb 	bl	8016fd0 <tcp_send_empty_ack>
 801643a:	4603      	mov	r3, r0
 801643c:	e1b1      	b.n	80167a2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801643e:	6879      	ldr	r1, [r7, #4]
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	3304      	adds	r3, #4
 8016444:	461a      	mov	r2, r3
 8016446:	6878      	ldr	r0, [r7, #4]
 8016448:	f7ff f824 	bl	8015494 <tcp_route>
 801644c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801644e:	697b      	ldr	r3, [r7, #20]
 8016450:	2b00      	cmp	r3, #0
 8016452:	d102      	bne.n	801645a <tcp_output+0x96>
    return ERR_RTE;
 8016454:	f06f 0303 	mvn.w	r3, #3
 8016458:	e1a3      	b.n	80167a2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d003      	beq.n	8016468 <tcp_output+0xa4>
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d111      	bne.n	801648c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016468:	697b      	ldr	r3, [r7, #20]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d002      	beq.n	8016474 <tcp_output+0xb0>
 801646e:	697b      	ldr	r3, [r7, #20]
 8016470:	3304      	adds	r3, #4
 8016472:	e000      	b.n	8016476 <tcp_output+0xb2>
 8016474:	2300      	movs	r3, #0
 8016476:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016478:	693b      	ldr	r3, [r7, #16]
 801647a:	2b00      	cmp	r3, #0
 801647c:	d102      	bne.n	8016484 <tcp_output+0xc0>
      return ERR_RTE;
 801647e:	f06f 0303 	mvn.w	r3, #3
 8016482:	e18e      	b.n	80167a2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016484:	693b      	ldr	r3, [r7, #16]
 8016486:	681a      	ldr	r2, [r3, #0]
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801648e:	68db      	ldr	r3, [r3, #12]
 8016490:	685b      	ldr	r3, [r3, #4]
 8016492:	4618      	mov	r0, r3
 8016494:	f7f8 fb71 	bl	800eb7a <lwip_htonl>
 8016498:	4602      	mov	r2, r0
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801649e:	1ad3      	subs	r3, r2, r3
 80164a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80164a2:	8912      	ldrh	r2, [r2, #8]
 80164a4:	4413      	add	r3, r2
 80164a6:	69ba      	ldr	r2, [r7, #24]
 80164a8:	429a      	cmp	r2, r3
 80164aa:	d227      	bcs.n	80164fc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80164b2:	461a      	mov	r2, r3
 80164b4:	69bb      	ldr	r3, [r7, #24]
 80164b6:	4293      	cmp	r3, r2
 80164b8:	d114      	bne.n	80164e4 <tcp_output+0x120>
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d110      	bne.n	80164e4 <tcp_output+0x120>
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d10b      	bne.n	80164e4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	2200      	movs	r2, #0
 80164d0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	2201      	movs	r2, #1
 80164d8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	2200      	movs	r2, #0
 80164e0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	8b5b      	ldrh	r3, [r3, #26]
 80164e8:	f003 0302 	and.w	r3, r3, #2
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	f000 814d 	beq.w	801678c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80164f2:	6878      	ldr	r0, [r7, #4]
 80164f4:	f000 fd6c 	bl	8016fd0 <tcp_send_empty_ack>
 80164f8:	4603      	mov	r3, r0
 80164fa:	e152      	b.n	80167a2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	2200      	movs	r2, #0
 8016500:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016508:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801650a:	6a3b      	ldr	r3, [r7, #32]
 801650c:	2b00      	cmp	r3, #0
 801650e:	f000 811c 	beq.w	801674a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8016512:	e002      	b.n	801651a <tcp_output+0x156>
 8016514:	6a3b      	ldr	r3, [r7, #32]
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	623b      	str	r3, [r7, #32]
 801651a:	6a3b      	ldr	r3, [r7, #32]
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d1f8      	bne.n	8016514 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8016522:	e112      	b.n	801674a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016526:	68db      	ldr	r3, [r3, #12]
 8016528:	899b      	ldrh	r3, [r3, #12]
 801652a:	b29b      	uxth	r3, r3
 801652c:	4618      	mov	r0, r3
 801652e:	f7f8 fb0f 	bl	800eb50 <lwip_htons>
 8016532:	4603      	mov	r3, r0
 8016534:	b2db      	uxtb	r3, r3
 8016536:	f003 0304 	and.w	r3, r3, #4
 801653a:	2b00      	cmp	r3, #0
 801653c:	d006      	beq.n	801654c <tcp_output+0x188>
 801653e:	4b43      	ldr	r3, [pc, #268]	; (801664c <tcp_output+0x288>)
 8016540:	f240 5236 	movw	r2, #1334	; 0x536
 8016544:	4946      	ldr	r1, [pc, #280]	; (8016660 <tcp_output+0x29c>)
 8016546:	4843      	ldr	r0, [pc, #268]	; (8016654 <tcp_output+0x290>)
 8016548:	f009 f98e 	bl	801f868 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016550:	2b00      	cmp	r3, #0
 8016552:	d01f      	beq.n	8016594 <tcp_output+0x1d0>
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	8b5b      	ldrh	r3, [r3, #26]
 8016558:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801655c:	2b00      	cmp	r3, #0
 801655e:	d119      	bne.n	8016594 <tcp_output+0x1d0>
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016564:	2b00      	cmp	r3, #0
 8016566:	d00b      	beq.n	8016580 <tcp_output+0x1bc>
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	2b00      	cmp	r3, #0
 8016570:	d110      	bne.n	8016594 <tcp_output+0x1d0>
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016576:	891a      	ldrh	r2, [r3, #8]
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801657c:	429a      	cmp	r2, r3
 801657e:	d209      	bcs.n	8016594 <tcp_output+0x1d0>
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016586:	2b00      	cmp	r3, #0
 8016588:	d004      	beq.n	8016594 <tcp_output+0x1d0>
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016590:	2b08      	cmp	r3, #8
 8016592:	d901      	bls.n	8016598 <tcp_output+0x1d4>
 8016594:	2301      	movs	r3, #1
 8016596:	e000      	b.n	801659a <tcp_output+0x1d6>
 8016598:	2300      	movs	r3, #0
 801659a:	2b00      	cmp	r3, #0
 801659c:	d106      	bne.n	80165ac <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	8b5b      	ldrh	r3, [r3, #26]
 80165a2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	f000 80e4 	beq.w	8016774 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	7d1b      	ldrb	r3, [r3, #20]
 80165b0:	2b02      	cmp	r3, #2
 80165b2:	d00d      	beq.n	80165d0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80165b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165b6:	68db      	ldr	r3, [r3, #12]
 80165b8:	899b      	ldrh	r3, [r3, #12]
 80165ba:	b29c      	uxth	r4, r3
 80165bc:	2010      	movs	r0, #16
 80165be:	f7f8 fac7 	bl	800eb50 <lwip_htons>
 80165c2:	4603      	mov	r3, r0
 80165c4:	461a      	mov	r2, r3
 80165c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165c8:	68db      	ldr	r3, [r3, #12]
 80165ca:	4322      	orrs	r2, r4
 80165cc:	b292      	uxth	r2, r2
 80165ce:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80165d0:	697a      	ldr	r2, [r7, #20]
 80165d2:	6879      	ldr	r1, [r7, #4]
 80165d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80165d6:	f000 f909 	bl	80167ec <tcp_output_segment>
 80165da:	4603      	mov	r3, r0
 80165dc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80165de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d009      	beq.n	80165fa <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	8b5b      	ldrh	r3, [r3, #26]
 80165ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80165ee:	b29a      	uxth	r2, r3
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	835a      	strh	r2, [r3, #26]
      return err;
 80165f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80165f8:	e0d3      	b.n	80167a2 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80165fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165fc:	681a      	ldr	r2, [r3, #0]
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	7d1b      	ldrb	r3, [r3, #20]
 8016606:	2b02      	cmp	r3, #2
 8016608:	d006      	beq.n	8016618 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	8b5b      	ldrh	r3, [r3, #26]
 801660e:	f023 0303 	bic.w	r3, r3, #3
 8016612:	b29a      	uxth	r2, r3
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801661a:	68db      	ldr	r3, [r3, #12]
 801661c:	685b      	ldr	r3, [r3, #4]
 801661e:	4618      	mov	r0, r3
 8016620:	f7f8 faab 	bl	800eb7a <lwip_htonl>
 8016624:	4604      	mov	r4, r0
 8016626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016628:	891b      	ldrh	r3, [r3, #8]
 801662a:	461d      	mov	r5, r3
 801662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801662e:	68db      	ldr	r3, [r3, #12]
 8016630:	899b      	ldrh	r3, [r3, #12]
 8016632:	b29b      	uxth	r3, r3
 8016634:	4618      	mov	r0, r3
 8016636:	f7f8 fa8b 	bl	800eb50 <lwip_htons>
 801663a:	4603      	mov	r3, r0
 801663c:	b2db      	uxtb	r3, r3
 801663e:	f003 0303 	and.w	r3, r3, #3
 8016642:	2b00      	cmp	r3, #0
 8016644:	d00e      	beq.n	8016664 <tcp_output+0x2a0>
 8016646:	2301      	movs	r3, #1
 8016648:	e00d      	b.n	8016666 <tcp_output+0x2a2>
 801664a:	bf00      	nop
 801664c:	0802404c 	.word	0x0802404c
 8016650:	08024590 	.word	0x08024590
 8016654:	080240a0 	.word	0x080240a0
 8016658:	080245a8 	.word	0x080245a8
 801665c:	20008950 	.word	0x20008950
 8016660:	080245d0 	.word	0x080245d0
 8016664:	2300      	movs	r3, #0
 8016666:	442b      	add	r3, r5
 8016668:	4423      	add	r3, r4
 801666a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016670:	68bb      	ldr	r3, [r7, #8]
 8016672:	1ad3      	subs	r3, r2, r3
 8016674:	2b00      	cmp	r3, #0
 8016676:	da02      	bge.n	801667e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	68ba      	ldr	r2, [r7, #8]
 801667c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801667e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016680:	891b      	ldrh	r3, [r3, #8]
 8016682:	461c      	mov	r4, r3
 8016684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016686:	68db      	ldr	r3, [r3, #12]
 8016688:	899b      	ldrh	r3, [r3, #12]
 801668a:	b29b      	uxth	r3, r3
 801668c:	4618      	mov	r0, r3
 801668e:	f7f8 fa5f 	bl	800eb50 <lwip_htons>
 8016692:	4603      	mov	r3, r0
 8016694:	b2db      	uxtb	r3, r3
 8016696:	f003 0303 	and.w	r3, r3, #3
 801669a:	2b00      	cmp	r3, #0
 801669c:	d001      	beq.n	80166a2 <tcp_output+0x2de>
 801669e:	2301      	movs	r3, #1
 80166a0:	e000      	b.n	80166a4 <tcp_output+0x2e0>
 80166a2:	2300      	movs	r3, #0
 80166a4:	4423      	add	r3, r4
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d049      	beq.n	801673e <tcp_output+0x37a>
      seg->next = NULL;
 80166aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166ac:	2200      	movs	r2, #0
 80166ae:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d105      	bne.n	80166c4 <tcp_output+0x300>
        pcb->unacked = seg;
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80166bc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80166be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166c0:	623b      	str	r3, [r7, #32]
 80166c2:	e03f      	b.n	8016744 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80166c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166c6:	68db      	ldr	r3, [r3, #12]
 80166c8:	685b      	ldr	r3, [r3, #4]
 80166ca:	4618      	mov	r0, r3
 80166cc:	f7f8 fa55 	bl	800eb7a <lwip_htonl>
 80166d0:	4604      	mov	r4, r0
 80166d2:	6a3b      	ldr	r3, [r7, #32]
 80166d4:	68db      	ldr	r3, [r3, #12]
 80166d6:	685b      	ldr	r3, [r3, #4]
 80166d8:	4618      	mov	r0, r3
 80166da:	f7f8 fa4e 	bl	800eb7a <lwip_htonl>
 80166de:	4603      	mov	r3, r0
 80166e0:	1ae3      	subs	r3, r4, r3
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	da24      	bge.n	8016730 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	3370      	adds	r3, #112	; 0x70
 80166ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80166ec:	e002      	b.n	80166f4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80166ee:	69fb      	ldr	r3, [r7, #28]
 80166f0:	681b      	ldr	r3, [r3, #0]
 80166f2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80166f4:	69fb      	ldr	r3, [r7, #28]
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d011      	beq.n	8016720 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80166fc:	69fb      	ldr	r3, [r7, #28]
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	68db      	ldr	r3, [r3, #12]
 8016702:	685b      	ldr	r3, [r3, #4]
 8016704:	4618      	mov	r0, r3
 8016706:	f7f8 fa38 	bl	800eb7a <lwip_htonl>
 801670a:	4604      	mov	r4, r0
 801670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801670e:	68db      	ldr	r3, [r3, #12]
 8016710:	685b      	ldr	r3, [r3, #4]
 8016712:	4618      	mov	r0, r3
 8016714:	f7f8 fa31 	bl	800eb7a <lwip_htonl>
 8016718:	4603      	mov	r3, r0
 801671a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801671c:	2b00      	cmp	r3, #0
 801671e:	dbe6      	blt.n	80166ee <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016720:	69fb      	ldr	r3, [r7, #28]
 8016722:	681a      	ldr	r2, [r3, #0]
 8016724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016726:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016728:	69fb      	ldr	r3, [r7, #28]
 801672a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801672c:	601a      	str	r2, [r3, #0]
 801672e:	e009      	b.n	8016744 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016730:	6a3b      	ldr	r3, [r7, #32]
 8016732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016734:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016736:	6a3b      	ldr	r3, [r7, #32]
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	623b      	str	r3, [r7, #32]
 801673c:	e002      	b.n	8016744 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801673e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016740:	f7fb ff1d 	bl	801257e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016748:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801674c:	2b00      	cmp	r3, #0
 801674e:	d012      	beq.n	8016776 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016752:	68db      	ldr	r3, [r3, #12]
 8016754:	685b      	ldr	r3, [r3, #4]
 8016756:	4618      	mov	r0, r3
 8016758:	f7f8 fa0f 	bl	800eb7a <lwip_htonl>
 801675c:	4602      	mov	r2, r0
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016762:	1ad3      	subs	r3, r2, r3
 8016764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016766:	8912      	ldrh	r2, [r2, #8]
 8016768:	4413      	add	r3, r2
  while (seg != NULL &&
 801676a:	69ba      	ldr	r2, [r7, #24]
 801676c:	429a      	cmp	r2, r3
 801676e:	f4bf aed9 	bcs.w	8016524 <tcp_output+0x160>
 8016772:	e000      	b.n	8016776 <tcp_output+0x3b2>
      break;
 8016774:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801677a:	2b00      	cmp	r3, #0
 801677c:	d108      	bne.n	8016790 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	2200      	movs	r2, #0
 8016782:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8016786:	e004      	b.n	8016792 <tcp_output+0x3ce>
    goto output_done;
 8016788:	bf00      	nop
 801678a:	e002      	b.n	8016792 <tcp_output+0x3ce>
    goto output_done;
 801678c:	bf00      	nop
 801678e:	e000      	b.n	8016792 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016790:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	8b5b      	ldrh	r3, [r3, #26]
 8016796:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801679a:	b29a      	uxth	r2, r3
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80167a0:	2300      	movs	r3, #0
}
 80167a2:	4618      	mov	r0, r3
 80167a4:	3728      	adds	r7, #40	; 0x28
 80167a6:	46bd      	mov	sp, r7
 80167a8:	bdb0      	pop	{r4, r5, r7, pc}
 80167aa:	bf00      	nop

080167ac <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b082      	sub	sp, #8
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d106      	bne.n	80167c8 <tcp_output_segment_busy+0x1c>
 80167ba:	4b09      	ldr	r3, [pc, #36]	; (80167e0 <tcp_output_segment_busy+0x34>)
 80167bc:	f240 529a 	movw	r2, #1434	; 0x59a
 80167c0:	4908      	ldr	r1, [pc, #32]	; (80167e4 <tcp_output_segment_busy+0x38>)
 80167c2:	4809      	ldr	r0, [pc, #36]	; (80167e8 <tcp_output_segment_busy+0x3c>)
 80167c4:	f009 f850 	bl	801f868 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	685b      	ldr	r3, [r3, #4]
 80167cc:	7b9b      	ldrb	r3, [r3, #14]
 80167ce:	2b01      	cmp	r3, #1
 80167d0:	d001      	beq.n	80167d6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80167d2:	2301      	movs	r3, #1
 80167d4:	e000      	b.n	80167d8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80167d6:	2300      	movs	r3, #0
}
 80167d8:	4618      	mov	r0, r3
 80167da:	3708      	adds	r7, #8
 80167dc:	46bd      	mov	sp, r7
 80167de:	bd80      	pop	{r7, pc}
 80167e0:	0802404c 	.word	0x0802404c
 80167e4:	080245e8 	.word	0x080245e8
 80167e8:	080240a0 	.word	0x080240a0

080167ec <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80167ec:	b5b0      	push	{r4, r5, r7, lr}
 80167ee:	b08c      	sub	sp, #48	; 0x30
 80167f0:	af04      	add	r7, sp, #16
 80167f2:	60f8      	str	r0, [r7, #12]
 80167f4:	60b9      	str	r1, [r7, #8]
 80167f6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d106      	bne.n	801680c <tcp_output_segment+0x20>
 80167fe:	4b63      	ldr	r3, [pc, #396]	; (801698c <tcp_output_segment+0x1a0>)
 8016800:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8016804:	4962      	ldr	r1, [pc, #392]	; (8016990 <tcp_output_segment+0x1a4>)
 8016806:	4863      	ldr	r0, [pc, #396]	; (8016994 <tcp_output_segment+0x1a8>)
 8016808:	f009 f82e 	bl	801f868 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801680c:	68bb      	ldr	r3, [r7, #8]
 801680e:	2b00      	cmp	r3, #0
 8016810:	d106      	bne.n	8016820 <tcp_output_segment+0x34>
 8016812:	4b5e      	ldr	r3, [pc, #376]	; (801698c <tcp_output_segment+0x1a0>)
 8016814:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8016818:	495f      	ldr	r1, [pc, #380]	; (8016998 <tcp_output_segment+0x1ac>)
 801681a:	485e      	ldr	r0, [pc, #376]	; (8016994 <tcp_output_segment+0x1a8>)
 801681c:	f009 f824 	bl	801f868 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	2b00      	cmp	r3, #0
 8016824:	d106      	bne.n	8016834 <tcp_output_segment+0x48>
 8016826:	4b59      	ldr	r3, [pc, #356]	; (801698c <tcp_output_segment+0x1a0>)
 8016828:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801682c:	495b      	ldr	r1, [pc, #364]	; (801699c <tcp_output_segment+0x1b0>)
 801682e:	4859      	ldr	r0, [pc, #356]	; (8016994 <tcp_output_segment+0x1a8>)
 8016830:	f009 f81a 	bl	801f868 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8016834:	68f8      	ldr	r0, [r7, #12]
 8016836:	f7ff ffb9 	bl	80167ac <tcp_output_segment_busy>
 801683a:	4603      	mov	r3, r0
 801683c:	2b00      	cmp	r3, #0
 801683e:	d001      	beq.n	8016844 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8016840:	2300      	movs	r3, #0
 8016842:	e09f      	b.n	8016984 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8016844:	68bb      	ldr	r3, [r7, #8]
 8016846:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	68dc      	ldr	r4, [r3, #12]
 801684c:	4610      	mov	r0, r2
 801684e:	f7f8 f994 	bl	800eb7a <lwip_htonl>
 8016852:	4603      	mov	r3, r0
 8016854:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8016856:	68bb      	ldr	r3, [r7, #8]
 8016858:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	68dc      	ldr	r4, [r3, #12]
 801685e:	4610      	mov	r0, r2
 8016860:	f7f8 f976 	bl	800eb50 <lwip_htons>
 8016864:	4603      	mov	r3, r0
 8016866:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016868:	68bb      	ldr	r3, [r7, #8]
 801686a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801686c:	68ba      	ldr	r2, [r7, #8]
 801686e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016870:	441a      	add	r2, r3
 8016872:	68bb      	ldr	r3, [r7, #8]
 8016874:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	68db      	ldr	r3, [r3, #12]
 801687a:	3314      	adds	r3, #20
 801687c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	7a9b      	ldrb	r3, [r3, #10]
 8016882:	f003 0301 	and.w	r3, r3, #1
 8016886:	2b00      	cmp	r3, #0
 8016888:	d015      	beq.n	80168b6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801688a:	68bb      	ldr	r3, [r7, #8]
 801688c:	3304      	adds	r3, #4
 801688e:	461a      	mov	r2, r3
 8016890:	6879      	ldr	r1, [r7, #4]
 8016892:	f44f 7006 	mov.w	r0, #536	; 0x218
 8016896:	f7fc fa37 	bl	8012d08 <tcp_eff_send_mss_netif>
 801689a:	4603      	mov	r3, r0
 801689c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801689e:	8b7b      	ldrh	r3, [r7, #26]
 80168a0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80168a4:	4618      	mov	r0, r3
 80168a6:	f7f8 f968 	bl	800eb7a <lwip_htonl>
 80168aa:	4602      	mov	r2, r0
 80168ac:	69fb      	ldr	r3, [r7, #28]
 80168ae:	601a      	str	r2, [r3, #0]
    opts += 1;
 80168b0:	69fb      	ldr	r3, [r7, #28]
 80168b2:	3304      	adds	r3, #4
 80168b4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80168b6:	68bb      	ldr	r3, [r7, #8]
 80168b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80168bc:	2b00      	cmp	r3, #0
 80168be:	da02      	bge.n	80168c6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80168c0:	68bb      	ldr	r3, [r7, #8]
 80168c2:	2200      	movs	r2, #0
 80168c4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80168c6:	68bb      	ldr	r3, [r7, #8]
 80168c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d10c      	bne.n	80168e8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80168ce:	4b34      	ldr	r3, [pc, #208]	; (80169a0 <tcp_output_segment+0x1b4>)
 80168d0:	681a      	ldr	r2, [r3, #0]
 80168d2:	68bb      	ldr	r3, [r7, #8]
 80168d4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	68db      	ldr	r3, [r3, #12]
 80168da:	685b      	ldr	r3, [r3, #4]
 80168dc:	4618      	mov	r0, r3
 80168de:	f7f8 f94c 	bl	800eb7a <lwip_htonl>
 80168e2:	4602      	mov	r2, r0
 80168e4:	68bb      	ldr	r3, [r7, #8]
 80168e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	68da      	ldr	r2, [r3, #12]
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	685b      	ldr	r3, [r3, #4]
 80168f0:	685b      	ldr	r3, [r3, #4]
 80168f2:	1ad3      	subs	r3, r2, r3
 80168f4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	685b      	ldr	r3, [r3, #4]
 80168fa:	8959      	ldrh	r1, [r3, #10]
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	685b      	ldr	r3, [r3, #4]
 8016900:	8b3a      	ldrh	r2, [r7, #24]
 8016902:	1a8a      	subs	r2, r1, r2
 8016904:	b292      	uxth	r2, r2
 8016906:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8016908:	68fb      	ldr	r3, [r7, #12]
 801690a:	685b      	ldr	r3, [r3, #4]
 801690c:	8919      	ldrh	r1, [r3, #8]
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	685b      	ldr	r3, [r3, #4]
 8016912:	8b3a      	ldrh	r2, [r7, #24]
 8016914:	1a8a      	subs	r2, r1, r2
 8016916:	b292      	uxth	r2, r2
 8016918:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	685b      	ldr	r3, [r3, #4]
 801691e:	68fa      	ldr	r2, [r7, #12]
 8016920:	68d2      	ldr	r2, [r2, #12]
 8016922:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	68db      	ldr	r3, [r3, #12]
 8016928:	2200      	movs	r2, #0
 801692a:	741a      	strb	r2, [r3, #16]
 801692c:	2200      	movs	r2, #0
 801692e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	68db      	ldr	r3, [r3, #12]
 8016934:	f103 0214 	add.w	r2, r3, #20
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	7a9b      	ldrb	r3, [r3, #10]
 801693c:	009b      	lsls	r3, r3, #2
 801693e:	f003 0304 	and.w	r3, r3, #4
 8016942:	4413      	add	r3, r2
 8016944:	69fa      	ldr	r2, [r7, #28]
 8016946:	429a      	cmp	r2, r3
 8016948:	d006      	beq.n	8016958 <tcp_output_segment+0x16c>
 801694a:	4b10      	ldr	r3, [pc, #64]	; (801698c <tcp_output_segment+0x1a0>)
 801694c:	f240 621c 	movw	r2, #1564	; 0x61c
 8016950:	4914      	ldr	r1, [pc, #80]	; (80169a4 <tcp_output_segment+0x1b8>)
 8016952:	4810      	ldr	r0, [pc, #64]	; (8016994 <tcp_output_segment+0x1a8>)
 8016954:	f008 ff88 	bl	801f868 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	6858      	ldr	r0, [r3, #4]
 801695c:	68b9      	ldr	r1, [r7, #8]
 801695e:	68bb      	ldr	r3, [r7, #8]
 8016960:	1d1c      	adds	r4, r3, #4
 8016962:	68bb      	ldr	r3, [r7, #8]
 8016964:	7add      	ldrb	r5, [r3, #11]
 8016966:	68bb      	ldr	r3, [r7, #8]
 8016968:	7a9b      	ldrb	r3, [r3, #10]
 801696a:	687a      	ldr	r2, [r7, #4]
 801696c:	9202      	str	r2, [sp, #8]
 801696e:	2206      	movs	r2, #6
 8016970:	9201      	str	r2, [sp, #4]
 8016972:	9300      	str	r3, [sp, #0]
 8016974:	462b      	mov	r3, r5
 8016976:	4622      	mov	r2, r4
 8016978:	f004 fd22 	bl	801b3c0 <ip4_output_if>
 801697c:	4603      	mov	r3, r0
 801697e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8016980:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016984:	4618      	mov	r0, r3
 8016986:	3720      	adds	r7, #32
 8016988:	46bd      	mov	sp, r7
 801698a:	bdb0      	pop	{r4, r5, r7, pc}
 801698c:	0802404c 	.word	0x0802404c
 8016990:	08024610 	.word	0x08024610
 8016994:	080240a0 	.word	0x080240a0
 8016998:	08024630 	.word	0x08024630
 801699c:	08024650 	.word	0x08024650
 80169a0:	20008940 	.word	0x20008940
 80169a4:	08024674 	.word	0x08024674

080169a8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80169a8:	b5b0      	push	{r4, r5, r7, lr}
 80169aa:	b084      	sub	sp, #16
 80169ac:	af00      	add	r7, sp, #0
 80169ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d106      	bne.n	80169c4 <tcp_rexmit_rto_prepare+0x1c>
 80169b6:	4b31      	ldr	r3, [pc, #196]	; (8016a7c <tcp_rexmit_rto_prepare+0xd4>)
 80169b8:	f240 6263 	movw	r2, #1635	; 0x663
 80169bc:	4930      	ldr	r1, [pc, #192]	; (8016a80 <tcp_rexmit_rto_prepare+0xd8>)
 80169be:	4831      	ldr	r0, [pc, #196]	; (8016a84 <tcp_rexmit_rto_prepare+0xdc>)
 80169c0:	f008 ff52 	bl	801f868 <iprintf>

  if (pcb->unacked == NULL) {
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d102      	bne.n	80169d2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80169cc:	f06f 0305 	mvn.w	r3, #5
 80169d0:	e050      	b.n	8016a74 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80169d6:	60fb      	str	r3, [r7, #12]
 80169d8:	e00b      	b.n	80169f2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80169da:	68f8      	ldr	r0, [r7, #12]
 80169dc:	f7ff fee6 	bl	80167ac <tcp_output_segment_busy>
 80169e0:	4603      	mov	r3, r0
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d002      	beq.n	80169ec <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80169e6:	f06f 0305 	mvn.w	r3, #5
 80169ea:	e043      	b.n	8016a74 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	60fb      	str	r3, [r7, #12]
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d1ef      	bne.n	80169da <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80169fa:	68f8      	ldr	r0, [r7, #12]
 80169fc:	f7ff fed6 	bl	80167ac <tcp_output_segment_busy>
 8016a00:	4603      	mov	r3, r0
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d002      	beq.n	8016a0c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8016a06:	f06f 0305 	mvn.w	r3, #5
 8016a0a:	e033      	b.n	8016a74 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	2200      	movs	r2, #0
 8016a20:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	8b5b      	ldrh	r3, [r3, #26]
 8016a26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8016a2a:	b29a      	uxth	r2, r3
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	68db      	ldr	r3, [r3, #12]
 8016a34:	685b      	ldr	r3, [r3, #4]
 8016a36:	4618      	mov	r0, r3
 8016a38:	f7f8 f89f 	bl	800eb7a <lwip_htonl>
 8016a3c:	4604      	mov	r4, r0
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	891b      	ldrh	r3, [r3, #8]
 8016a42:	461d      	mov	r5, r3
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	68db      	ldr	r3, [r3, #12]
 8016a48:	899b      	ldrh	r3, [r3, #12]
 8016a4a:	b29b      	uxth	r3, r3
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	f7f8 f87f 	bl	800eb50 <lwip_htons>
 8016a52:	4603      	mov	r3, r0
 8016a54:	b2db      	uxtb	r3, r3
 8016a56:	f003 0303 	and.w	r3, r3, #3
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d001      	beq.n	8016a62 <tcp_rexmit_rto_prepare+0xba>
 8016a5e:	2301      	movs	r3, #1
 8016a60:	e000      	b.n	8016a64 <tcp_rexmit_rto_prepare+0xbc>
 8016a62:	2300      	movs	r3, #0
 8016a64:	442b      	add	r3, r5
 8016a66:	18e2      	adds	r2, r4, r3
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	2200      	movs	r2, #0
 8016a70:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8016a72:	2300      	movs	r3, #0
}
 8016a74:	4618      	mov	r0, r3
 8016a76:	3710      	adds	r7, #16
 8016a78:	46bd      	mov	sp, r7
 8016a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8016a7c:	0802404c 	.word	0x0802404c
 8016a80:	08024688 	.word	0x08024688
 8016a84:	080240a0 	.word	0x080240a0

08016a88 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8016a88:	b580      	push	{r7, lr}
 8016a8a:	b082      	sub	sp, #8
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d106      	bne.n	8016aa4 <tcp_rexmit_rto_commit+0x1c>
 8016a96:	4b0d      	ldr	r3, [pc, #52]	; (8016acc <tcp_rexmit_rto_commit+0x44>)
 8016a98:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8016a9c:	490c      	ldr	r1, [pc, #48]	; (8016ad0 <tcp_rexmit_rto_commit+0x48>)
 8016a9e:	480d      	ldr	r0, [pc, #52]	; (8016ad4 <tcp_rexmit_rto_commit+0x4c>)
 8016aa0:	f008 fee2 	bl	801f868 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016aaa:	2bff      	cmp	r3, #255	; 0xff
 8016aac:	d007      	beq.n	8016abe <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016ab4:	3301      	adds	r3, #1
 8016ab6:	b2da      	uxtb	r2, r3
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8016abe:	6878      	ldr	r0, [r7, #4]
 8016ac0:	f7ff fc80 	bl	80163c4 <tcp_output>
}
 8016ac4:	bf00      	nop
 8016ac6:	3708      	adds	r7, #8
 8016ac8:	46bd      	mov	sp, r7
 8016aca:	bd80      	pop	{r7, pc}
 8016acc:	0802404c 	.word	0x0802404c
 8016ad0:	080246ac 	.word	0x080246ac
 8016ad4:	080240a0 	.word	0x080240a0

08016ad8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	b082      	sub	sp, #8
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d106      	bne.n	8016af4 <tcp_rexmit_rto+0x1c>
 8016ae6:	4b0a      	ldr	r3, [pc, #40]	; (8016b10 <tcp_rexmit_rto+0x38>)
 8016ae8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8016aec:	4909      	ldr	r1, [pc, #36]	; (8016b14 <tcp_rexmit_rto+0x3c>)
 8016aee:	480a      	ldr	r0, [pc, #40]	; (8016b18 <tcp_rexmit_rto+0x40>)
 8016af0:	f008 feba 	bl	801f868 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8016af4:	6878      	ldr	r0, [r7, #4]
 8016af6:	f7ff ff57 	bl	80169a8 <tcp_rexmit_rto_prepare>
 8016afa:	4603      	mov	r3, r0
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d102      	bne.n	8016b06 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8016b00:	6878      	ldr	r0, [r7, #4]
 8016b02:	f7ff ffc1 	bl	8016a88 <tcp_rexmit_rto_commit>
  }
}
 8016b06:	bf00      	nop
 8016b08:	3708      	adds	r7, #8
 8016b0a:	46bd      	mov	sp, r7
 8016b0c:	bd80      	pop	{r7, pc}
 8016b0e:	bf00      	nop
 8016b10:	0802404c 	.word	0x0802404c
 8016b14:	080246d0 	.word	0x080246d0
 8016b18:	080240a0 	.word	0x080240a0

08016b1c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8016b1c:	b590      	push	{r4, r7, lr}
 8016b1e:	b085      	sub	sp, #20
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d106      	bne.n	8016b38 <tcp_rexmit+0x1c>
 8016b2a:	4b2f      	ldr	r3, [pc, #188]	; (8016be8 <tcp_rexmit+0xcc>)
 8016b2c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8016b30:	492e      	ldr	r1, [pc, #184]	; (8016bec <tcp_rexmit+0xd0>)
 8016b32:	482f      	ldr	r0, [pc, #188]	; (8016bf0 <tcp_rexmit+0xd4>)
 8016b34:	f008 fe98 	bl	801f868 <iprintf>

  if (pcb->unacked == NULL) {
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d102      	bne.n	8016b46 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8016b40:	f06f 0305 	mvn.w	r3, #5
 8016b44:	e04c      	b.n	8016be0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016b4a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8016b4c:	68b8      	ldr	r0, [r7, #8]
 8016b4e:	f7ff fe2d 	bl	80167ac <tcp_output_segment_busy>
 8016b52:	4603      	mov	r3, r0
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d002      	beq.n	8016b5e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8016b58:	f06f 0305 	mvn.w	r3, #5
 8016b5c:	e040      	b.n	8016be0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8016b5e:	68bb      	ldr	r3, [r7, #8]
 8016b60:	681a      	ldr	r2, [r3, #0]
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	336c      	adds	r3, #108	; 0x6c
 8016b6a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016b6c:	e002      	b.n	8016b74 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d011      	beq.n	8016ba0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	68db      	ldr	r3, [r3, #12]
 8016b82:	685b      	ldr	r3, [r3, #4]
 8016b84:	4618      	mov	r0, r3
 8016b86:	f7f7 fff8 	bl	800eb7a <lwip_htonl>
 8016b8a:	4604      	mov	r4, r0
 8016b8c:	68bb      	ldr	r3, [r7, #8]
 8016b8e:	68db      	ldr	r3, [r3, #12]
 8016b90:	685b      	ldr	r3, [r3, #4]
 8016b92:	4618      	mov	r0, r3
 8016b94:	f7f7 fff1 	bl	800eb7a <lwip_htonl>
 8016b98:	4603      	mov	r3, r0
 8016b9a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	dbe6      	blt.n	8016b6e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	681a      	ldr	r2, [r3, #0]
 8016ba4:	68bb      	ldr	r3, [r7, #8]
 8016ba6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	68ba      	ldr	r2, [r7, #8]
 8016bac:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8016bae:	68bb      	ldr	r3, [r7, #8]
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d103      	bne.n	8016bbe <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	2200      	movs	r2, #0
 8016bba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016bc4:	2bff      	cmp	r3, #255	; 0xff
 8016bc6:	d007      	beq.n	8016bd8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016bce:	3301      	adds	r3, #1
 8016bd0:	b2da      	uxtb	r2, r3
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	2200      	movs	r2, #0
 8016bdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8016bde:	2300      	movs	r3, #0
}
 8016be0:	4618      	mov	r0, r3
 8016be2:	3714      	adds	r7, #20
 8016be4:	46bd      	mov	sp, r7
 8016be6:	bd90      	pop	{r4, r7, pc}
 8016be8:	0802404c 	.word	0x0802404c
 8016bec:	080246ec 	.word	0x080246ec
 8016bf0:	080240a0 	.word	0x080240a0

08016bf4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	b082      	sub	sp, #8
 8016bf8:	af00      	add	r7, sp, #0
 8016bfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d106      	bne.n	8016c10 <tcp_rexmit_fast+0x1c>
 8016c02:	4b2a      	ldr	r3, [pc, #168]	; (8016cac <tcp_rexmit_fast+0xb8>)
 8016c04:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8016c08:	4929      	ldr	r1, [pc, #164]	; (8016cb0 <tcp_rexmit_fast+0xbc>)
 8016c0a:	482a      	ldr	r0, [pc, #168]	; (8016cb4 <tcp_rexmit_fast+0xc0>)
 8016c0c:	f008 fe2c 	bl	801f868 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d044      	beq.n	8016ca2 <tcp_rexmit_fast+0xae>
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	8b5b      	ldrh	r3, [r3, #26]
 8016c1c:	f003 0304 	and.w	r3, r3, #4
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d13e      	bne.n	8016ca2 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8016c24:	6878      	ldr	r0, [r7, #4]
 8016c26:	f7ff ff79 	bl	8016b1c <tcp_rexmit>
 8016c2a:	4603      	mov	r3, r0
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d138      	bne.n	8016ca2 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016c3c:	4293      	cmp	r3, r2
 8016c3e:	bf28      	it	cs
 8016c40:	4613      	movcs	r3, r2
 8016c42:	b29b      	uxth	r3, r3
 8016c44:	0fda      	lsrs	r2, r3, #31
 8016c46:	4413      	add	r3, r2
 8016c48:	105b      	asrs	r3, r3, #1
 8016c4a:	b29a      	uxth	r2, r3
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016c58:	461a      	mov	r2, r3
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016c5e:	005b      	lsls	r3, r3, #1
 8016c60:	429a      	cmp	r2, r3
 8016c62:	d206      	bcs.n	8016c72 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016c68:	005b      	lsls	r3, r3, #1
 8016c6a:	b29a      	uxth	r2, r3
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016c7c:	4619      	mov	r1, r3
 8016c7e:	0049      	lsls	r1, r1, #1
 8016c80:	440b      	add	r3, r1
 8016c82:	b29b      	uxth	r3, r3
 8016c84:	4413      	add	r3, r2
 8016c86:	b29a      	uxth	r2, r3
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	8b5b      	ldrh	r3, [r3, #26]
 8016c92:	f043 0304 	orr.w	r3, r3, #4
 8016c96:	b29a      	uxth	r2, r3
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	2200      	movs	r2, #0
 8016ca0:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8016ca2:	bf00      	nop
 8016ca4:	3708      	adds	r7, #8
 8016ca6:	46bd      	mov	sp, r7
 8016ca8:	bd80      	pop	{r7, pc}
 8016caa:	bf00      	nop
 8016cac:	0802404c 	.word	0x0802404c
 8016cb0:	08024704 	.word	0x08024704
 8016cb4:	080240a0 	.word	0x080240a0

08016cb8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8016cb8:	b580      	push	{r7, lr}
 8016cba:	b086      	sub	sp, #24
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	60f8      	str	r0, [r7, #12]
 8016cc0:	607b      	str	r3, [r7, #4]
 8016cc2:	460b      	mov	r3, r1
 8016cc4:	817b      	strh	r3, [r7, #10]
 8016cc6:	4613      	mov	r3, r2
 8016cc8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8016cca:	897a      	ldrh	r2, [r7, #10]
 8016ccc:	893b      	ldrh	r3, [r7, #8]
 8016cce:	4413      	add	r3, r2
 8016cd0:	b29b      	uxth	r3, r3
 8016cd2:	3314      	adds	r3, #20
 8016cd4:	b29b      	uxth	r3, r3
 8016cd6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016cda:	4619      	mov	r1, r3
 8016cdc:	2022      	movs	r0, #34	; 0x22
 8016cde:	f7f9 fb31 	bl	8010344 <pbuf_alloc>
 8016ce2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8016ce4:	697b      	ldr	r3, [r7, #20]
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d04d      	beq.n	8016d86 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8016cea:	897b      	ldrh	r3, [r7, #10]
 8016cec:	3313      	adds	r3, #19
 8016cee:	697a      	ldr	r2, [r7, #20]
 8016cf0:	8952      	ldrh	r2, [r2, #10]
 8016cf2:	4293      	cmp	r3, r2
 8016cf4:	db06      	blt.n	8016d04 <tcp_output_alloc_header_common+0x4c>
 8016cf6:	4b26      	ldr	r3, [pc, #152]	; (8016d90 <tcp_output_alloc_header_common+0xd8>)
 8016cf8:	f240 7223 	movw	r2, #1827	; 0x723
 8016cfc:	4925      	ldr	r1, [pc, #148]	; (8016d94 <tcp_output_alloc_header_common+0xdc>)
 8016cfe:	4826      	ldr	r0, [pc, #152]	; (8016d98 <tcp_output_alloc_header_common+0xe0>)
 8016d00:	f008 fdb2 	bl	801f868 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8016d04:	697b      	ldr	r3, [r7, #20]
 8016d06:	685b      	ldr	r3, [r3, #4]
 8016d08:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8016d0a:	8c3b      	ldrh	r3, [r7, #32]
 8016d0c:	4618      	mov	r0, r3
 8016d0e:	f7f7 ff1f 	bl	800eb50 <lwip_htons>
 8016d12:	4603      	mov	r3, r0
 8016d14:	461a      	mov	r2, r3
 8016d16:	693b      	ldr	r3, [r7, #16]
 8016d18:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8016d1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	f7f7 ff17 	bl	800eb50 <lwip_htons>
 8016d22:	4603      	mov	r3, r0
 8016d24:	461a      	mov	r2, r3
 8016d26:	693b      	ldr	r3, [r7, #16]
 8016d28:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8016d2a:	693b      	ldr	r3, [r7, #16]
 8016d2c:	687a      	ldr	r2, [r7, #4]
 8016d2e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8016d30:	68f8      	ldr	r0, [r7, #12]
 8016d32:	f7f7 ff22 	bl	800eb7a <lwip_htonl>
 8016d36:	4602      	mov	r2, r0
 8016d38:	693b      	ldr	r3, [r7, #16]
 8016d3a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8016d3c:	897b      	ldrh	r3, [r7, #10]
 8016d3e:	089b      	lsrs	r3, r3, #2
 8016d40:	b29b      	uxth	r3, r3
 8016d42:	3305      	adds	r3, #5
 8016d44:	b29b      	uxth	r3, r3
 8016d46:	031b      	lsls	r3, r3, #12
 8016d48:	b29a      	uxth	r2, r3
 8016d4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016d4e:	b29b      	uxth	r3, r3
 8016d50:	4313      	orrs	r3, r2
 8016d52:	b29b      	uxth	r3, r3
 8016d54:	4618      	mov	r0, r3
 8016d56:	f7f7 fefb 	bl	800eb50 <lwip_htons>
 8016d5a:	4603      	mov	r3, r0
 8016d5c:	461a      	mov	r2, r3
 8016d5e:	693b      	ldr	r3, [r7, #16]
 8016d60:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8016d62:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016d64:	4618      	mov	r0, r3
 8016d66:	f7f7 fef3 	bl	800eb50 <lwip_htons>
 8016d6a:	4603      	mov	r3, r0
 8016d6c:	461a      	mov	r2, r3
 8016d6e:	693b      	ldr	r3, [r7, #16]
 8016d70:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8016d72:	693b      	ldr	r3, [r7, #16]
 8016d74:	2200      	movs	r2, #0
 8016d76:	741a      	strb	r2, [r3, #16]
 8016d78:	2200      	movs	r2, #0
 8016d7a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8016d7c:	693b      	ldr	r3, [r7, #16]
 8016d7e:	2200      	movs	r2, #0
 8016d80:	749a      	strb	r2, [r3, #18]
 8016d82:	2200      	movs	r2, #0
 8016d84:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8016d86:	697b      	ldr	r3, [r7, #20]
}
 8016d88:	4618      	mov	r0, r3
 8016d8a:	3718      	adds	r7, #24
 8016d8c:	46bd      	mov	sp, r7
 8016d8e:	bd80      	pop	{r7, pc}
 8016d90:	0802404c 	.word	0x0802404c
 8016d94:	08024724 	.word	0x08024724
 8016d98:	080240a0 	.word	0x080240a0

08016d9c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8016d9c:	b5b0      	push	{r4, r5, r7, lr}
 8016d9e:	b08a      	sub	sp, #40	; 0x28
 8016da0:	af04      	add	r7, sp, #16
 8016da2:	60f8      	str	r0, [r7, #12]
 8016da4:	607b      	str	r3, [r7, #4]
 8016da6:	460b      	mov	r3, r1
 8016da8:	817b      	strh	r3, [r7, #10]
 8016daa:	4613      	mov	r3, r2
 8016dac:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d106      	bne.n	8016dc2 <tcp_output_alloc_header+0x26>
 8016db4:	4b15      	ldr	r3, [pc, #84]	; (8016e0c <tcp_output_alloc_header+0x70>)
 8016db6:	f240 7242 	movw	r2, #1858	; 0x742
 8016dba:	4915      	ldr	r1, [pc, #84]	; (8016e10 <tcp_output_alloc_header+0x74>)
 8016dbc:	4815      	ldr	r0, [pc, #84]	; (8016e14 <tcp_output_alloc_header+0x78>)
 8016dbe:	f008 fd53 	bl	801f868 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016dc6:	68fb      	ldr	r3, [r7, #12]
 8016dc8:	8adb      	ldrh	r3, [r3, #22]
 8016dca:	68fa      	ldr	r2, [r7, #12]
 8016dcc:	8b12      	ldrh	r2, [r2, #24]
 8016dce:	68f9      	ldr	r1, [r7, #12]
 8016dd0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8016dd2:	893d      	ldrh	r5, [r7, #8]
 8016dd4:	897c      	ldrh	r4, [r7, #10]
 8016dd6:	9103      	str	r1, [sp, #12]
 8016dd8:	2110      	movs	r1, #16
 8016dda:	9102      	str	r1, [sp, #8]
 8016ddc:	9201      	str	r2, [sp, #4]
 8016dde:	9300      	str	r3, [sp, #0]
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	462a      	mov	r2, r5
 8016de4:	4621      	mov	r1, r4
 8016de6:	f7ff ff67 	bl	8016cb8 <tcp_output_alloc_header_common>
 8016dea:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8016dec:	697b      	ldr	r3, [r7, #20]
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d006      	beq.n	8016e00 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016df2:	68fb      	ldr	r3, [r7, #12]
 8016df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016df6:	68fa      	ldr	r2, [r7, #12]
 8016df8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016dfa:	441a      	add	r2, r3
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8016e00:	697b      	ldr	r3, [r7, #20]
}
 8016e02:	4618      	mov	r0, r3
 8016e04:	3718      	adds	r7, #24
 8016e06:	46bd      	mov	sp, r7
 8016e08:	bdb0      	pop	{r4, r5, r7, pc}
 8016e0a:	bf00      	nop
 8016e0c:	0802404c 	.word	0x0802404c
 8016e10:	08024754 	.word	0x08024754
 8016e14:	080240a0 	.word	0x080240a0

08016e18 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8016e18:	b580      	push	{r7, lr}
 8016e1a:	b088      	sub	sp, #32
 8016e1c:	af00      	add	r7, sp, #0
 8016e1e:	60f8      	str	r0, [r7, #12]
 8016e20:	60b9      	str	r1, [r7, #8]
 8016e22:	4611      	mov	r1, r2
 8016e24:	461a      	mov	r2, r3
 8016e26:	460b      	mov	r3, r1
 8016e28:	71fb      	strb	r3, [r7, #7]
 8016e2a:	4613      	mov	r3, r2
 8016e2c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8016e2e:	2300      	movs	r3, #0
 8016e30:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8016e32:	68bb      	ldr	r3, [r7, #8]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d106      	bne.n	8016e46 <tcp_output_fill_options+0x2e>
 8016e38:	4b13      	ldr	r3, [pc, #76]	; (8016e88 <tcp_output_fill_options+0x70>)
 8016e3a:	f240 7256 	movw	r2, #1878	; 0x756
 8016e3e:	4913      	ldr	r1, [pc, #76]	; (8016e8c <tcp_output_fill_options+0x74>)
 8016e40:	4813      	ldr	r0, [pc, #76]	; (8016e90 <tcp_output_fill_options+0x78>)
 8016e42:	f008 fd11 	bl	801f868 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8016e46:	68bb      	ldr	r3, [r7, #8]
 8016e48:	685b      	ldr	r3, [r3, #4]
 8016e4a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8016e4c:	69bb      	ldr	r3, [r7, #24]
 8016e4e:	3314      	adds	r3, #20
 8016e50:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8016e52:	69bb      	ldr	r3, [r7, #24]
 8016e54:	f103 0214 	add.w	r2, r3, #20
 8016e58:	8bfb      	ldrh	r3, [r7, #30]
 8016e5a:	009b      	lsls	r3, r3, #2
 8016e5c:	4619      	mov	r1, r3
 8016e5e:	79fb      	ldrb	r3, [r7, #7]
 8016e60:	009b      	lsls	r3, r3, #2
 8016e62:	f003 0304 	and.w	r3, r3, #4
 8016e66:	440b      	add	r3, r1
 8016e68:	4413      	add	r3, r2
 8016e6a:	697a      	ldr	r2, [r7, #20]
 8016e6c:	429a      	cmp	r2, r3
 8016e6e:	d006      	beq.n	8016e7e <tcp_output_fill_options+0x66>
 8016e70:	4b05      	ldr	r3, [pc, #20]	; (8016e88 <tcp_output_fill_options+0x70>)
 8016e72:	f240 7275 	movw	r2, #1909	; 0x775
 8016e76:	4907      	ldr	r1, [pc, #28]	; (8016e94 <tcp_output_fill_options+0x7c>)
 8016e78:	4805      	ldr	r0, [pc, #20]	; (8016e90 <tcp_output_fill_options+0x78>)
 8016e7a:	f008 fcf5 	bl	801f868 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8016e7e:	bf00      	nop
 8016e80:	3720      	adds	r7, #32
 8016e82:	46bd      	mov	sp, r7
 8016e84:	bd80      	pop	{r7, pc}
 8016e86:	bf00      	nop
 8016e88:	0802404c 	.word	0x0802404c
 8016e8c:	0802477c 	.word	0x0802477c
 8016e90:	080240a0 	.word	0x080240a0
 8016e94:	08024674 	.word	0x08024674

08016e98 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8016e98:	b580      	push	{r7, lr}
 8016e9a:	b08a      	sub	sp, #40	; 0x28
 8016e9c:	af04      	add	r7, sp, #16
 8016e9e:	60f8      	str	r0, [r7, #12]
 8016ea0:	60b9      	str	r1, [r7, #8]
 8016ea2:	607a      	str	r2, [r7, #4]
 8016ea4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8016ea6:	68bb      	ldr	r3, [r7, #8]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d106      	bne.n	8016eba <tcp_output_control_segment+0x22>
 8016eac:	4b1c      	ldr	r3, [pc, #112]	; (8016f20 <tcp_output_control_segment+0x88>)
 8016eae:	f240 7287 	movw	r2, #1927	; 0x787
 8016eb2:	491c      	ldr	r1, [pc, #112]	; (8016f24 <tcp_output_control_segment+0x8c>)
 8016eb4:	481c      	ldr	r0, [pc, #112]	; (8016f28 <tcp_output_control_segment+0x90>)
 8016eb6:	f008 fcd7 	bl	801f868 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8016eba:	683a      	ldr	r2, [r7, #0]
 8016ebc:	6879      	ldr	r1, [r7, #4]
 8016ebe:	68f8      	ldr	r0, [r7, #12]
 8016ec0:	f7fe fae8 	bl	8015494 <tcp_route>
 8016ec4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8016ec6:	693b      	ldr	r3, [r7, #16]
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d102      	bne.n	8016ed2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8016ecc:	23fc      	movs	r3, #252	; 0xfc
 8016ece:	75fb      	strb	r3, [r7, #23]
 8016ed0:	e01c      	b.n	8016f0c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d006      	beq.n	8016ee6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8016ed8:	68fb      	ldr	r3, [r7, #12]
 8016eda:	7adb      	ldrb	r3, [r3, #11]
 8016edc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	7a9b      	ldrb	r3, [r3, #10]
 8016ee2:	757b      	strb	r3, [r7, #21]
 8016ee4:	e003      	b.n	8016eee <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8016ee6:	23ff      	movs	r3, #255	; 0xff
 8016ee8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8016eea:	2300      	movs	r3, #0
 8016eec:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8016eee:	7dba      	ldrb	r2, [r7, #22]
 8016ef0:	693b      	ldr	r3, [r7, #16]
 8016ef2:	9302      	str	r3, [sp, #8]
 8016ef4:	2306      	movs	r3, #6
 8016ef6:	9301      	str	r3, [sp, #4]
 8016ef8:	7d7b      	ldrb	r3, [r7, #21]
 8016efa:	9300      	str	r3, [sp, #0]
 8016efc:	4613      	mov	r3, r2
 8016efe:	683a      	ldr	r2, [r7, #0]
 8016f00:	6879      	ldr	r1, [r7, #4]
 8016f02:	68b8      	ldr	r0, [r7, #8]
 8016f04:	f004 fa5c 	bl	801b3c0 <ip4_output_if>
 8016f08:	4603      	mov	r3, r0
 8016f0a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8016f0c:	68b8      	ldr	r0, [r7, #8]
 8016f0e:	f7f9 fd2f 	bl	8010970 <pbuf_free>
  return err;
 8016f12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016f16:	4618      	mov	r0, r3
 8016f18:	3718      	adds	r7, #24
 8016f1a:	46bd      	mov	sp, r7
 8016f1c:	bd80      	pop	{r7, pc}
 8016f1e:	bf00      	nop
 8016f20:	0802404c 	.word	0x0802404c
 8016f24:	080247a4 	.word	0x080247a4
 8016f28:	080240a0 	.word	0x080240a0

08016f2c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8016f2c:	b590      	push	{r4, r7, lr}
 8016f2e:	b08b      	sub	sp, #44	; 0x2c
 8016f30:	af04      	add	r7, sp, #16
 8016f32:	60f8      	str	r0, [r7, #12]
 8016f34:	60b9      	str	r1, [r7, #8]
 8016f36:	607a      	str	r2, [r7, #4]
 8016f38:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8016f3a:	683b      	ldr	r3, [r7, #0]
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d106      	bne.n	8016f4e <tcp_rst+0x22>
 8016f40:	4b1f      	ldr	r3, [pc, #124]	; (8016fc0 <tcp_rst+0x94>)
 8016f42:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8016f46:	491f      	ldr	r1, [pc, #124]	; (8016fc4 <tcp_rst+0x98>)
 8016f48:	481f      	ldr	r0, [pc, #124]	; (8016fc8 <tcp_rst+0x9c>)
 8016f4a:	f008 fc8d 	bl	801f868 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8016f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d106      	bne.n	8016f62 <tcp_rst+0x36>
 8016f54:	4b1a      	ldr	r3, [pc, #104]	; (8016fc0 <tcp_rst+0x94>)
 8016f56:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8016f5a:	491c      	ldr	r1, [pc, #112]	; (8016fcc <tcp_rst+0xa0>)
 8016f5c:	481a      	ldr	r0, [pc, #104]	; (8016fc8 <tcp_rst+0x9c>)
 8016f5e:	f008 fc83 	bl	801f868 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016f62:	2300      	movs	r3, #0
 8016f64:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8016f66:	f246 0308 	movw	r3, #24584	; 0x6008
 8016f6a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8016f6c:	7dfb      	ldrb	r3, [r7, #23]
 8016f6e:	b29c      	uxth	r4, r3
 8016f70:	68b8      	ldr	r0, [r7, #8]
 8016f72:	f7f7 fe02 	bl	800eb7a <lwip_htonl>
 8016f76:	4602      	mov	r2, r0
 8016f78:	8abb      	ldrh	r3, [r7, #20]
 8016f7a:	9303      	str	r3, [sp, #12]
 8016f7c:	2314      	movs	r3, #20
 8016f7e:	9302      	str	r3, [sp, #8]
 8016f80:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8016f82:	9301      	str	r3, [sp, #4]
 8016f84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016f86:	9300      	str	r3, [sp, #0]
 8016f88:	4613      	mov	r3, r2
 8016f8a:	2200      	movs	r2, #0
 8016f8c:	4621      	mov	r1, r4
 8016f8e:	6878      	ldr	r0, [r7, #4]
 8016f90:	f7ff fe92 	bl	8016cb8 <tcp_output_alloc_header_common>
 8016f94:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8016f96:	693b      	ldr	r3, [r7, #16]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d00c      	beq.n	8016fb6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016f9c:	7dfb      	ldrb	r3, [r7, #23]
 8016f9e:	2200      	movs	r2, #0
 8016fa0:	6939      	ldr	r1, [r7, #16]
 8016fa2:	68f8      	ldr	r0, [r7, #12]
 8016fa4:	f7ff ff38 	bl	8016e18 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8016fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016faa:	683a      	ldr	r2, [r7, #0]
 8016fac:	6939      	ldr	r1, [r7, #16]
 8016fae:	68f8      	ldr	r0, [r7, #12]
 8016fb0:	f7ff ff72 	bl	8016e98 <tcp_output_control_segment>
 8016fb4:	e000      	b.n	8016fb8 <tcp_rst+0x8c>
    return;
 8016fb6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8016fb8:	371c      	adds	r7, #28
 8016fba:	46bd      	mov	sp, r7
 8016fbc:	bd90      	pop	{r4, r7, pc}
 8016fbe:	bf00      	nop
 8016fc0:	0802404c 	.word	0x0802404c
 8016fc4:	080247d0 	.word	0x080247d0
 8016fc8:	080240a0 	.word	0x080240a0
 8016fcc:	080247ec 	.word	0x080247ec

08016fd0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8016fd0:	b590      	push	{r4, r7, lr}
 8016fd2:	b087      	sub	sp, #28
 8016fd4:	af00      	add	r7, sp, #0
 8016fd6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8016fd8:	2300      	movs	r3, #0
 8016fda:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8016fdc:	2300      	movs	r3, #0
 8016fde:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d106      	bne.n	8016ff4 <tcp_send_empty_ack+0x24>
 8016fe6:	4b28      	ldr	r3, [pc, #160]	; (8017088 <tcp_send_empty_ack+0xb8>)
 8016fe8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8016fec:	4927      	ldr	r1, [pc, #156]	; (801708c <tcp_send_empty_ack+0xbc>)
 8016fee:	4828      	ldr	r0, [pc, #160]	; (8017090 <tcp_send_empty_ack+0xc0>)
 8016ff0:	f008 fc3a 	bl	801f868 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016ff4:	7dfb      	ldrb	r3, [r7, #23]
 8016ff6:	009b      	lsls	r3, r3, #2
 8016ff8:	b2db      	uxtb	r3, r3
 8016ffa:	f003 0304 	and.w	r3, r3, #4
 8016ffe:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017000:	7d7b      	ldrb	r3, [r7, #21]
 8017002:	b29c      	uxth	r4, r3
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017008:	4618      	mov	r0, r3
 801700a:	f7f7 fdb6 	bl	800eb7a <lwip_htonl>
 801700e:	4603      	mov	r3, r0
 8017010:	2200      	movs	r2, #0
 8017012:	4621      	mov	r1, r4
 8017014:	6878      	ldr	r0, [r7, #4]
 8017016:	f7ff fec1 	bl	8016d9c <tcp_output_alloc_header>
 801701a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801701c:	693b      	ldr	r3, [r7, #16]
 801701e:	2b00      	cmp	r3, #0
 8017020:	d109      	bne.n	8017036 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	8b5b      	ldrh	r3, [r3, #26]
 8017026:	f043 0303 	orr.w	r3, r3, #3
 801702a:	b29a      	uxth	r2, r3
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8017030:	f06f 0301 	mvn.w	r3, #1
 8017034:	e023      	b.n	801707e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8017036:	7dbb      	ldrb	r3, [r7, #22]
 8017038:	7dfa      	ldrb	r2, [r7, #23]
 801703a:	6939      	ldr	r1, [r7, #16]
 801703c:	6878      	ldr	r0, [r7, #4]
 801703e:	f7ff feeb 	bl	8016e18 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017042:	687a      	ldr	r2, [r7, #4]
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	3304      	adds	r3, #4
 8017048:	6939      	ldr	r1, [r7, #16]
 801704a:	6878      	ldr	r0, [r7, #4]
 801704c:	f7ff ff24 	bl	8016e98 <tcp_output_control_segment>
 8017050:	4603      	mov	r3, r0
 8017052:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017058:	2b00      	cmp	r3, #0
 801705a:	d007      	beq.n	801706c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	8b5b      	ldrh	r3, [r3, #26]
 8017060:	f043 0303 	orr.w	r3, r3, #3
 8017064:	b29a      	uxth	r2, r3
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	835a      	strh	r2, [r3, #26]
 801706a:	e006      	b.n	801707a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	8b5b      	ldrh	r3, [r3, #26]
 8017070:	f023 0303 	bic.w	r3, r3, #3
 8017074:	b29a      	uxth	r2, r3
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801707a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801707e:	4618      	mov	r0, r3
 8017080:	371c      	adds	r7, #28
 8017082:	46bd      	mov	sp, r7
 8017084:	bd90      	pop	{r4, r7, pc}
 8017086:	bf00      	nop
 8017088:	0802404c 	.word	0x0802404c
 801708c:	08024808 	.word	0x08024808
 8017090:	080240a0 	.word	0x080240a0

08017094 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017094:	b590      	push	{r4, r7, lr}
 8017096:	b087      	sub	sp, #28
 8017098:	af00      	add	r7, sp, #0
 801709a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801709c:	2300      	movs	r3, #0
 801709e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d106      	bne.n	80170b4 <tcp_keepalive+0x20>
 80170a6:	4b18      	ldr	r3, [pc, #96]	; (8017108 <tcp_keepalive+0x74>)
 80170a8:	f640 0224 	movw	r2, #2084	; 0x824
 80170ac:	4917      	ldr	r1, [pc, #92]	; (801710c <tcp_keepalive+0x78>)
 80170ae:	4818      	ldr	r0, [pc, #96]	; (8017110 <tcp_keepalive+0x7c>)
 80170b0:	f008 fbda 	bl	801f868 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80170b4:	7dfb      	ldrb	r3, [r7, #23]
 80170b6:	b29c      	uxth	r4, r3
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80170bc:	3b01      	subs	r3, #1
 80170be:	4618      	mov	r0, r3
 80170c0:	f7f7 fd5b 	bl	800eb7a <lwip_htonl>
 80170c4:	4603      	mov	r3, r0
 80170c6:	2200      	movs	r2, #0
 80170c8:	4621      	mov	r1, r4
 80170ca:	6878      	ldr	r0, [r7, #4]
 80170cc:	f7ff fe66 	bl	8016d9c <tcp_output_alloc_header>
 80170d0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80170d2:	693b      	ldr	r3, [r7, #16]
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d102      	bne.n	80170de <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80170d8:	f04f 33ff 	mov.w	r3, #4294967295
 80170dc:	e010      	b.n	8017100 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80170de:	7dfb      	ldrb	r3, [r7, #23]
 80170e0:	2200      	movs	r2, #0
 80170e2:	6939      	ldr	r1, [r7, #16]
 80170e4:	6878      	ldr	r0, [r7, #4]
 80170e6:	f7ff fe97 	bl	8016e18 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80170ea:	687a      	ldr	r2, [r7, #4]
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	3304      	adds	r3, #4
 80170f0:	6939      	ldr	r1, [r7, #16]
 80170f2:	6878      	ldr	r0, [r7, #4]
 80170f4:	f7ff fed0 	bl	8016e98 <tcp_output_control_segment>
 80170f8:	4603      	mov	r3, r0
 80170fa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80170fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017100:	4618      	mov	r0, r3
 8017102:	371c      	adds	r7, #28
 8017104:	46bd      	mov	sp, r7
 8017106:	bd90      	pop	{r4, r7, pc}
 8017108:	0802404c 	.word	0x0802404c
 801710c:	08024828 	.word	0x08024828
 8017110:	080240a0 	.word	0x080240a0

08017114 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8017114:	b590      	push	{r4, r7, lr}
 8017116:	b08b      	sub	sp, #44	; 0x2c
 8017118:	af00      	add	r7, sp, #0
 801711a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801711c:	2300      	movs	r3, #0
 801711e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	2b00      	cmp	r3, #0
 8017126:	d106      	bne.n	8017136 <tcp_zero_window_probe+0x22>
 8017128:	4b4c      	ldr	r3, [pc, #304]	; (801725c <tcp_zero_window_probe+0x148>)
 801712a:	f640 024f 	movw	r2, #2127	; 0x84f
 801712e:	494c      	ldr	r1, [pc, #304]	; (8017260 <tcp_zero_window_probe+0x14c>)
 8017130:	484c      	ldr	r0, [pc, #304]	; (8017264 <tcp_zero_window_probe+0x150>)
 8017132:	f008 fb99 	bl	801f868 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801713a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801713c:	6a3b      	ldr	r3, [r7, #32]
 801713e:	2b00      	cmp	r3, #0
 8017140:	d101      	bne.n	8017146 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8017142:	2300      	movs	r3, #0
 8017144:	e086      	b.n	8017254 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801714c:	2bff      	cmp	r3, #255	; 0xff
 801714e:	d007      	beq.n	8017160 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017156:	3301      	adds	r3, #1
 8017158:	b2da      	uxtb	r2, r3
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8017160:	6a3b      	ldr	r3, [r7, #32]
 8017162:	68db      	ldr	r3, [r3, #12]
 8017164:	899b      	ldrh	r3, [r3, #12]
 8017166:	b29b      	uxth	r3, r3
 8017168:	4618      	mov	r0, r3
 801716a:	f7f7 fcf1 	bl	800eb50 <lwip_htons>
 801716e:	4603      	mov	r3, r0
 8017170:	b2db      	uxtb	r3, r3
 8017172:	f003 0301 	and.w	r3, r3, #1
 8017176:	2b00      	cmp	r3, #0
 8017178:	d005      	beq.n	8017186 <tcp_zero_window_probe+0x72>
 801717a:	6a3b      	ldr	r3, [r7, #32]
 801717c:	891b      	ldrh	r3, [r3, #8]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d101      	bne.n	8017186 <tcp_zero_window_probe+0x72>
 8017182:	2301      	movs	r3, #1
 8017184:	e000      	b.n	8017188 <tcp_zero_window_probe+0x74>
 8017186:	2300      	movs	r3, #0
 8017188:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801718a:	7ffb      	ldrb	r3, [r7, #31]
 801718c:	2b00      	cmp	r3, #0
 801718e:	bf0c      	ite	eq
 8017190:	2301      	moveq	r3, #1
 8017192:	2300      	movne	r3, #0
 8017194:	b2db      	uxtb	r3, r3
 8017196:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8017198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801719c:	b299      	uxth	r1, r3
 801719e:	6a3b      	ldr	r3, [r7, #32]
 80171a0:	68db      	ldr	r3, [r3, #12]
 80171a2:	685b      	ldr	r3, [r3, #4]
 80171a4:	8bba      	ldrh	r2, [r7, #28]
 80171a6:	6878      	ldr	r0, [r7, #4]
 80171a8:	f7ff fdf8 	bl	8016d9c <tcp_output_alloc_header>
 80171ac:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80171ae:	69bb      	ldr	r3, [r7, #24]
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d102      	bne.n	80171ba <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80171b4:	f04f 33ff 	mov.w	r3, #4294967295
 80171b8:	e04c      	b.n	8017254 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80171ba:	69bb      	ldr	r3, [r7, #24]
 80171bc:	685b      	ldr	r3, [r3, #4]
 80171be:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80171c0:	7ffb      	ldrb	r3, [r7, #31]
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d011      	beq.n	80171ea <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80171c6:	697b      	ldr	r3, [r7, #20]
 80171c8:	899b      	ldrh	r3, [r3, #12]
 80171ca:	b29b      	uxth	r3, r3
 80171cc:	b21b      	sxth	r3, r3
 80171ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80171d2:	b21c      	sxth	r4, r3
 80171d4:	2011      	movs	r0, #17
 80171d6:	f7f7 fcbb 	bl	800eb50 <lwip_htons>
 80171da:	4603      	mov	r3, r0
 80171dc:	b21b      	sxth	r3, r3
 80171de:	4323      	orrs	r3, r4
 80171e0:	b21b      	sxth	r3, r3
 80171e2:	b29a      	uxth	r2, r3
 80171e4:	697b      	ldr	r3, [r7, #20]
 80171e6:	819a      	strh	r2, [r3, #12]
 80171e8:	e010      	b.n	801720c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80171ea:	69bb      	ldr	r3, [r7, #24]
 80171ec:	685b      	ldr	r3, [r3, #4]
 80171ee:	3314      	adds	r3, #20
 80171f0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80171f2:	6a3b      	ldr	r3, [r7, #32]
 80171f4:	6858      	ldr	r0, [r3, #4]
 80171f6:	6a3b      	ldr	r3, [r7, #32]
 80171f8:	685b      	ldr	r3, [r3, #4]
 80171fa:	891a      	ldrh	r2, [r3, #8]
 80171fc:	6a3b      	ldr	r3, [r7, #32]
 80171fe:	891b      	ldrh	r3, [r3, #8]
 8017200:	1ad3      	subs	r3, r2, r3
 8017202:	b29b      	uxth	r3, r3
 8017204:	2201      	movs	r2, #1
 8017206:	6939      	ldr	r1, [r7, #16]
 8017208:	f7f9 fdb8 	bl	8010d7c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801720c:	6a3b      	ldr	r3, [r7, #32]
 801720e:	68db      	ldr	r3, [r3, #12]
 8017210:	685b      	ldr	r3, [r3, #4]
 8017212:	4618      	mov	r0, r3
 8017214:	f7f7 fcb1 	bl	800eb7a <lwip_htonl>
 8017218:	4603      	mov	r3, r0
 801721a:	3301      	adds	r3, #1
 801721c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	1ad3      	subs	r3, r2, r3
 8017226:	2b00      	cmp	r3, #0
 8017228:	da02      	bge.n	8017230 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	68fa      	ldr	r2, [r7, #12]
 801722e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017234:	2200      	movs	r2, #0
 8017236:	69b9      	ldr	r1, [r7, #24]
 8017238:	6878      	ldr	r0, [r7, #4]
 801723a:	f7ff fded 	bl	8016e18 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801723e:	687a      	ldr	r2, [r7, #4]
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	3304      	adds	r3, #4
 8017244:	69b9      	ldr	r1, [r7, #24]
 8017246:	6878      	ldr	r0, [r7, #4]
 8017248:	f7ff fe26 	bl	8016e98 <tcp_output_control_segment>
 801724c:	4603      	mov	r3, r0
 801724e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017250:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017254:	4618      	mov	r0, r3
 8017256:	372c      	adds	r7, #44	; 0x2c
 8017258:	46bd      	mov	sp, r7
 801725a:	bd90      	pop	{r4, r7, pc}
 801725c:	0802404c 	.word	0x0802404c
 8017260:	08024844 	.word	0x08024844
 8017264:	080240a0 	.word	0x080240a0

08017268 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017268:	b580      	push	{r7, lr}
 801726a:	b082      	sub	sp, #8
 801726c:	af00      	add	r7, sp, #0
 801726e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017270:	f7f9 ffcc 	bl	801120c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017274:	4b0a      	ldr	r3, [pc, #40]	; (80172a0 <tcpip_tcp_timer+0x38>)
 8017276:	681b      	ldr	r3, [r3, #0]
 8017278:	2b00      	cmp	r3, #0
 801727a:	d103      	bne.n	8017284 <tcpip_tcp_timer+0x1c>
 801727c:	4b09      	ldr	r3, [pc, #36]	; (80172a4 <tcpip_tcp_timer+0x3c>)
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	2b00      	cmp	r3, #0
 8017282:	d005      	beq.n	8017290 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017284:	2200      	movs	r2, #0
 8017286:	4908      	ldr	r1, [pc, #32]	; (80172a8 <tcpip_tcp_timer+0x40>)
 8017288:	20fa      	movs	r0, #250	; 0xfa
 801728a:	f000 f8f3 	bl	8017474 <sys_timeout>
 801728e:	e003      	b.n	8017298 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017290:	4b06      	ldr	r3, [pc, #24]	; (80172ac <tcpip_tcp_timer+0x44>)
 8017292:	2200      	movs	r2, #0
 8017294:	601a      	str	r2, [r3, #0]
  }
}
 8017296:	bf00      	nop
 8017298:	bf00      	nop
 801729a:	3708      	adds	r7, #8
 801729c:	46bd      	mov	sp, r7
 801729e:	bd80      	pop	{r7, pc}
 80172a0:	2000893c 	.word	0x2000893c
 80172a4:	2000894c 	.word	0x2000894c
 80172a8:	08017269 	.word	0x08017269
 80172ac:	20001958 	.word	0x20001958

080172b0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80172b0:	b580      	push	{r7, lr}
 80172b2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80172b4:	4b0a      	ldr	r3, [pc, #40]	; (80172e0 <tcp_timer_needed+0x30>)
 80172b6:	681b      	ldr	r3, [r3, #0]
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d10f      	bne.n	80172dc <tcp_timer_needed+0x2c>
 80172bc:	4b09      	ldr	r3, [pc, #36]	; (80172e4 <tcp_timer_needed+0x34>)
 80172be:	681b      	ldr	r3, [r3, #0]
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d103      	bne.n	80172cc <tcp_timer_needed+0x1c>
 80172c4:	4b08      	ldr	r3, [pc, #32]	; (80172e8 <tcp_timer_needed+0x38>)
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d007      	beq.n	80172dc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80172cc:	4b04      	ldr	r3, [pc, #16]	; (80172e0 <tcp_timer_needed+0x30>)
 80172ce:	2201      	movs	r2, #1
 80172d0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80172d2:	2200      	movs	r2, #0
 80172d4:	4905      	ldr	r1, [pc, #20]	; (80172ec <tcp_timer_needed+0x3c>)
 80172d6:	20fa      	movs	r0, #250	; 0xfa
 80172d8:	f000 f8cc 	bl	8017474 <sys_timeout>
  }
}
 80172dc:	bf00      	nop
 80172de:	bd80      	pop	{r7, pc}
 80172e0:	20001958 	.word	0x20001958
 80172e4:	2000893c 	.word	0x2000893c
 80172e8:	2000894c 	.word	0x2000894c
 80172ec:	08017269 	.word	0x08017269

080172f0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80172f0:	b580      	push	{r7, lr}
 80172f2:	b086      	sub	sp, #24
 80172f4:	af00      	add	r7, sp, #0
 80172f6:	60f8      	str	r0, [r7, #12]
 80172f8:	60b9      	str	r1, [r7, #8]
 80172fa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80172fc:	200a      	movs	r0, #10
 80172fe:	f7f8 fbcb 	bl	800fa98 <memp_malloc>
 8017302:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017304:	693b      	ldr	r3, [r7, #16]
 8017306:	2b00      	cmp	r3, #0
 8017308:	d109      	bne.n	801731e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801730a:	693b      	ldr	r3, [r7, #16]
 801730c:	2b00      	cmp	r3, #0
 801730e:	d151      	bne.n	80173b4 <sys_timeout_abs+0xc4>
 8017310:	4b2a      	ldr	r3, [pc, #168]	; (80173bc <sys_timeout_abs+0xcc>)
 8017312:	22be      	movs	r2, #190	; 0xbe
 8017314:	492a      	ldr	r1, [pc, #168]	; (80173c0 <sys_timeout_abs+0xd0>)
 8017316:	482b      	ldr	r0, [pc, #172]	; (80173c4 <sys_timeout_abs+0xd4>)
 8017318:	f008 faa6 	bl	801f868 <iprintf>
    return;
 801731c:	e04a      	b.n	80173b4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801731e:	693b      	ldr	r3, [r7, #16]
 8017320:	2200      	movs	r2, #0
 8017322:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017324:	693b      	ldr	r3, [r7, #16]
 8017326:	68ba      	ldr	r2, [r7, #8]
 8017328:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801732a:	693b      	ldr	r3, [r7, #16]
 801732c:	687a      	ldr	r2, [r7, #4]
 801732e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017330:	693b      	ldr	r3, [r7, #16]
 8017332:	68fa      	ldr	r2, [r7, #12]
 8017334:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017336:	4b24      	ldr	r3, [pc, #144]	; (80173c8 <sys_timeout_abs+0xd8>)
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	2b00      	cmp	r3, #0
 801733c:	d103      	bne.n	8017346 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801733e:	4a22      	ldr	r2, [pc, #136]	; (80173c8 <sys_timeout_abs+0xd8>)
 8017340:	693b      	ldr	r3, [r7, #16]
 8017342:	6013      	str	r3, [r2, #0]
    return;
 8017344:	e037      	b.n	80173b6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017346:	693b      	ldr	r3, [r7, #16]
 8017348:	685a      	ldr	r2, [r3, #4]
 801734a:	4b1f      	ldr	r3, [pc, #124]	; (80173c8 <sys_timeout_abs+0xd8>)
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	685b      	ldr	r3, [r3, #4]
 8017350:	1ad3      	subs	r3, r2, r3
 8017352:	0fdb      	lsrs	r3, r3, #31
 8017354:	f003 0301 	and.w	r3, r3, #1
 8017358:	b2db      	uxtb	r3, r3
 801735a:	2b00      	cmp	r3, #0
 801735c:	d007      	beq.n	801736e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801735e:	4b1a      	ldr	r3, [pc, #104]	; (80173c8 <sys_timeout_abs+0xd8>)
 8017360:	681a      	ldr	r2, [r3, #0]
 8017362:	693b      	ldr	r3, [r7, #16]
 8017364:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017366:	4a18      	ldr	r2, [pc, #96]	; (80173c8 <sys_timeout_abs+0xd8>)
 8017368:	693b      	ldr	r3, [r7, #16]
 801736a:	6013      	str	r3, [r2, #0]
 801736c:	e023      	b.n	80173b6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801736e:	4b16      	ldr	r3, [pc, #88]	; (80173c8 <sys_timeout_abs+0xd8>)
 8017370:	681b      	ldr	r3, [r3, #0]
 8017372:	617b      	str	r3, [r7, #20]
 8017374:	e01a      	b.n	80173ac <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017376:	697b      	ldr	r3, [r7, #20]
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d00b      	beq.n	8017396 <sys_timeout_abs+0xa6>
 801737e:	693b      	ldr	r3, [r7, #16]
 8017380:	685a      	ldr	r2, [r3, #4]
 8017382:	697b      	ldr	r3, [r7, #20]
 8017384:	681b      	ldr	r3, [r3, #0]
 8017386:	685b      	ldr	r3, [r3, #4]
 8017388:	1ad3      	subs	r3, r2, r3
 801738a:	0fdb      	lsrs	r3, r3, #31
 801738c:	f003 0301 	and.w	r3, r3, #1
 8017390:	b2db      	uxtb	r3, r3
 8017392:	2b00      	cmp	r3, #0
 8017394:	d007      	beq.n	80173a6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017396:	697b      	ldr	r3, [r7, #20]
 8017398:	681a      	ldr	r2, [r3, #0]
 801739a:	693b      	ldr	r3, [r7, #16]
 801739c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801739e:	697b      	ldr	r3, [r7, #20]
 80173a0:	693a      	ldr	r2, [r7, #16]
 80173a2:	601a      	str	r2, [r3, #0]
        break;
 80173a4:	e007      	b.n	80173b6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80173a6:	697b      	ldr	r3, [r7, #20]
 80173a8:	681b      	ldr	r3, [r3, #0]
 80173aa:	617b      	str	r3, [r7, #20]
 80173ac:	697b      	ldr	r3, [r7, #20]
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d1e1      	bne.n	8017376 <sys_timeout_abs+0x86>
 80173b2:	e000      	b.n	80173b6 <sys_timeout_abs+0xc6>
    return;
 80173b4:	bf00      	nop
      }
    }
  }
}
 80173b6:	3718      	adds	r7, #24
 80173b8:	46bd      	mov	sp, r7
 80173ba:	bd80      	pop	{r7, pc}
 80173bc:	08024868 	.word	0x08024868
 80173c0:	0802489c 	.word	0x0802489c
 80173c4:	080248dc 	.word	0x080248dc
 80173c8:	20001950 	.word	0x20001950

080173cc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80173cc:	b580      	push	{r7, lr}
 80173ce:	b086      	sub	sp, #24
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80173d8:	697b      	ldr	r3, [r7, #20]
 80173da:	685b      	ldr	r3, [r3, #4]
 80173dc:	4798      	blx	r3

  now = sys_now();
 80173de:	f7ef fb95 	bl	8006b0c <sys_now>
 80173e2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80173e4:	697b      	ldr	r3, [r7, #20]
 80173e6:	681a      	ldr	r2, [r3, #0]
 80173e8:	4b0f      	ldr	r3, [pc, #60]	; (8017428 <lwip_cyclic_timer+0x5c>)
 80173ea:	681b      	ldr	r3, [r3, #0]
 80173ec:	4413      	add	r3, r2
 80173ee:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80173f0:	68fa      	ldr	r2, [r7, #12]
 80173f2:	693b      	ldr	r3, [r7, #16]
 80173f4:	1ad3      	subs	r3, r2, r3
 80173f6:	0fdb      	lsrs	r3, r3, #31
 80173f8:	f003 0301 	and.w	r3, r3, #1
 80173fc:	b2db      	uxtb	r3, r3
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d009      	beq.n	8017416 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8017402:	697b      	ldr	r3, [r7, #20]
 8017404:	681a      	ldr	r2, [r3, #0]
 8017406:	693b      	ldr	r3, [r7, #16]
 8017408:	4413      	add	r3, r2
 801740a:	687a      	ldr	r2, [r7, #4]
 801740c:	4907      	ldr	r1, [pc, #28]	; (801742c <lwip_cyclic_timer+0x60>)
 801740e:	4618      	mov	r0, r3
 8017410:	f7ff ff6e 	bl	80172f0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017414:	e004      	b.n	8017420 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017416:	687a      	ldr	r2, [r7, #4]
 8017418:	4904      	ldr	r1, [pc, #16]	; (801742c <lwip_cyclic_timer+0x60>)
 801741a:	68f8      	ldr	r0, [r7, #12]
 801741c:	f7ff ff68 	bl	80172f0 <sys_timeout_abs>
}
 8017420:	bf00      	nop
 8017422:	3718      	adds	r7, #24
 8017424:	46bd      	mov	sp, r7
 8017426:	bd80      	pop	{r7, pc}
 8017428:	20001954 	.word	0x20001954
 801742c:	080173cd 	.word	0x080173cd

08017430 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017430:	b580      	push	{r7, lr}
 8017432:	b082      	sub	sp, #8
 8017434:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017436:	2301      	movs	r3, #1
 8017438:	607b      	str	r3, [r7, #4]
 801743a:	e00e      	b.n	801745a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801743c:	4a0b      	ldr	r2, [pc, #44]	; (801746c <sys_timeouts_init+0x3c>)
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	00db      	lsls	r3, r3, #3
 8017448:	4a08      	ldr	r2, [pc, #32]	; (801746c <sys_timeouts_init+0x3c>)
 801744a:	4413      	add	r3, r2
 801744c:	461a      	mov	r2, r3
 801744e:	4908      	ldr	r1, [pc, #32]	; (8017470 <sys_timeouts_init+0x40>)
 8017450:	f000 f810 	bl	8017474 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	3301      	adds	r3, #1
 8017458:	607b      	str	r3, [r7, #4]
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	2b05      	cmp	r3, #5
 801745e:	d9ed      	bls.n	801743c <sys_timeouts_init+0xc>
  }
}
 8017460:	bf00      	nop
 8017462:	bf00      	nop
 8017464:	3708      	adds	r7, #8
 8017466:	46bd      	mov	sp, r7
 8017468:	bd80      	pop	{r7, pc}
 801746a:	bf00      	nop
 801746c:	08025a94 	.word	0x08025a94
 8017470:	080173cd 	.word	0x080173cd

08017474 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017474:	b580      	push	{r7, lr}
 8017476:	b086      	sub	sp, #24
 8017478:	af00      	add	r7, sp, #0
 801747a:	60f8      	str	r0, [r7, #12]
 801747c:	60b9      	str	r1, [r7, #8]
 801747e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017486:	d306      	bcc.n	8017496 <sys_timeout+0x22>
 8017488:	4b0a      	ldr	r3, [pc, #40]	; (80174b4 <sys_timeout+0x40>)
 801748a:	f240 1229 	movw	r2, #297	; 0x129
 801748e:	490a      	ldr	r1, [pc, #40]	; (80174b8 <sys_timeout+0x44>)
 8017490:	480a      	ldr	r0, [pc, #40]	; (80174bc <sys_timeout+0x48>)
 8017492:	f008 f9e9 	bl	801f868 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017496:	f7ef fb39 	bl	8006b0c <sys_now>
 801749a:	4602      	mov	r2, r0
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	4413      	add	r3, r2
 80174a0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80174a2:	687a      	ldr	r2, [r7, #4]
 80174a4:	68b9      	ldr	r1, [r7, #8]
 80174a6:	6978      	ldr	r0, [r7, #20]
 80174a8:	f7ff ff22 	bl	80172f0 <sys_timeout_abs>
#endif
}
 80174ac:	bf00      	nop
 80174ae:	3718      	adds	r7, #24
 80174b0:	46bd      	mov	sp, r7
 80174b2:	bd80      	pop	{r7, pc}
 80174b4:	08024868 	.word	0x08024868
 80174b8:	08024904 	.word	0x08024904
 80174bc:	080248dc 	.word	0x080248dc

080174c0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80174c0:	b580      	push	{r7, lr}
 80174c2:	b084      	sub	sp, #16
 80174c4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80174c6:	f7ef fb21 	bl	8006b0c <sys_now>
 80174ca:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80174cc:	4b17      	ldr	r3, [pc, #92]	; (801752c <sys_check_timeouts+0x6c>)
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80174d2:	68bb      	ldr	r3, [r7, #8]
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d022      	beq.n	801751e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80174d8:	68bb      	ldr	r3, [r7, #8]
 80174da:	685b      	ldr	r3, [r3, #4]
 80174dc:	68fa      	ldr	r2, [r7, #12]
 80174de:	1ad3      	subs	r3, r2, r3
 80174e0:	0fdb      	lsrs	r3, r3, #31
 80174e2:	f003 0301 	and.w	r3, r3, #1
 80174e6:	b2db      	uxtb	r3, r3
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d11a      	bne.n	8017522 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80174ec:	68bb      	ldr	r3, [r7, #8]
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	4a0e      	ldr	r2, [pc, #56]	; (801752c <sys_check_timeouts+0x6c>)
 80174f2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80174f4:	68bb      	ldr	r3, [r7, #8]
 80174f6:	689b      	ldr	r3, [r3, #8]
 80174f8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80174fa:	68bb      	ldr	r3, [r7, #8]
 80174fc:	68db      	ldr	r3, [r3, #12]
 80174fe:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017500:	68bb      	ldr	r3, [r7, #8]
 8017502:	685b      	ldr	r3, [r3, #4]
 8017504:	4a0a      	ldr	r2, [pc, #40]	; (8017530 <sys_check_timeouts+0x70>)
 8017506:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017508:	68b9      	ldr	r1, [r7, #8]
 801750a:	200a      	movs	r0, #10
 801750c:	f7f8 fb16 	bl	800fb3c <memp_free>
    if (handler != NULL) {
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	2b00      	cmp	r3, #0
 8017514:	d0da      	beq.n	80174cc <sys_check_timeouts+0xc>
      handler(arg);
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	6838      	ldr	r0, [r7, #0]
 801751a:	4798      	blx	r3
  do {
 801751c:	e7d6      	b.n	80174cc <sys_check_timeouts+0xc>
      return;
 801751e:	bf00      	nop
 8017520:	e000      	b.n	8017524 <sys_check_timeouts+0x64>
      return;
 8017522:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8017524:	3710      	adds	r7, #16
 8017526:	46bd      	mov	sp, r7
 8017528:	bd80      	pop	{r7, pc}
 801752a:	bf00      	nop
 801752c:	20001950 	.word	0x20001950
 8017530:	20001954 	.word	0x20001954

08017534 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8017534:	b580      	push	{r7, lr}
 8017536:	b082      	sub	sp, #8
 8017538:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801753a:	4b16      	ldr	r3, [pc, #88]	; (8017594 <sys_timeouts_sleeptime+0x60>)
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d102      	bne.n	8017548 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8017542:	f04f 33ff 	mov.w	r3, #4294967295
 8017546:	e020      	b.n	801758a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8017548:	f7ef fae0 	bl	8006b0c <sys_now>
 801754c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801754e:	4b11      	ldr	r3, [pc, #68]	; (8017594 <sys_timeouts_sleeptime+0x60>)
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	685a      	ldr	r2, [r3, #4]
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	1ad3      	subs	r3, r2, r3
 8017558:	0fdb      	lsrs	r3, r3, #31
 801755a:	f003 0301 	and.w	r3, r3, #1
 801755e:	b2db      	uxtb	r3, r3
 8017560:	2b00      	cmp	r3, #0
 8017562:	d001      	beq.n	8017568 <sys_timeouts_sleeptime+0x34>
    return 0;
 8017564:	2300      	movs	r3, #0
 8017566:	e010      	b.n	801758a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8017568:	4b0a      	ldr	r3, [pc, #40]	; (8017594 <sys_timeouts_sleeptime+0x60>)
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	685a      	ldr	r2, [r3, #4]
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	1ad3      	subs	r3, r2, r3
 8017572:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8017574:	683b      	ldr	r3, [r7, #0]
 8017576:	2b00      	cmp	r3, #0
 8017578:	da06      	bge.n	8017588 <sys_timeouts_sleeptime+0x54>
 801757a:	4b07      	ldr	r3, [pc, #28]	; (8017598 <sys_timeouts_sleeptime+0x64>)
 801757c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8017580:	4906      	ldr	r1, [pc, #24]	; (801759c <sys_timeouts_sleeptime+0x68>)
 8017582:	4807      	ldr	r0, [pc, #28]	; (80175a0 <sys_timeouts_sleeptime+0x6c>)
 8017584:	f008 f970 	bl	801f868 <iprintf>
    return ret;
 8017588:	683b      	ldr	r3, [r7, #0]
  }
}
 801758a:	4618      	mov	r0, r3
 801758c:	3708      	adds	r7, #8
 801758e:	46bd      	mov	sp, r7
 8017590:	bd80      	pop	{r7, pc}
 8017592:	bf00      	nop
 8017594:	20001950 	.word	0x20001950
 8017598:	08024868 	.word	0x08024868
 801759c:	0802493c 	.word	0x0802493c
 80175a0:	080248dc 	.word	0x080248dc

080175a4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80175a4:	b580      	push	{r7, lr}
 80175a6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80175a8:	f008 f976 	bl	801f898 <rand>
 80175ac:	4603      	mov	r3, r0
 80175ae:	b29b      	uxth	r3, r3
 80175b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80175b4:	b29b      	uxth	r3, r3
 80175b6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80175ba:	b29a      	uxth	r2, r3
 80175bc:	4b01      	ldr	r3, [pc, #4]	; (80175c4 <udp_init+0x20>)
 80175be:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80175c0:	bf00      	nop
 80175c2:	bd80      	pop	{r7, pc}
 80175c4:	10000018 	.word	0x10000018

080175c8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80175c8:	b480      	push	{r7}
 80175ca:	b083      	sub	sp, #12
 80175cc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80175ce:	2300      	movs	r3, #0
 80175d0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80175d2:	4b17      	ldr	r3, [pc, #92]	; (8017630 <udp_new_port+0x68>)
 80175d4:	881b      	ldrh	r3, [r3, #0]
 80175d6:	1c5a      	adds	r2, r3, #1
 80175d8:	b291      	uxth	r1, r2
 80175da:	4a15      	ldr	r2, [pc, #84]	; (8017630 <udp_new_port+0x68>)
 80175dc:	8011      	strh	r1, [r2, #0]
 80175de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80175e2:	4293      	cmp	r3, r2
 80175e4:	d103      	bne.n	80175ee <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80175e6:	4b12      	ldr	r3, [pc, #72]	; (8017630 <udp_new_port+0x68>)
 80175e8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80175ec:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80175ee:	4b11      	ldr	r3, [pc, #68]	; (8017634 <udp_new_port+0x6c>)
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	603b      	str	r3, [r7, #0]
 80175f4:	e011      	b.n	801761a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80175f6:	683b      	ldr	r3, [r7, #0]
 80175f8:	8a5a      	ldrh	r2, [r3, #18]
 80175fa:	4b0d      	ldr	r3, [pc, #52]	; (8017630 <udp_new_port+0x68>)
 80175fc:	881b      	ldrh	r3, [r3, #0]
 80175fe:	429a      	cmp	r2, r3
 8017600:	d108      	bne.n	8017614 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8017602:	88fb      	ldrh	r3, [r7, #6]
 8017604:	3301      	adds	r3, #1
 8017606:	80fb      	strh	r3, [r7, #6]
 8017608:	88fb      	ldrh	r3, [r7, #6]
 801760a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801760e:	d3e0      	bcc.n	80175d2 <udp_new_port+0xa>
        return 0;
 8017610:	2300      	movs	r3, #0
 8017612:	e007      	b.n	8017624 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017614:	683b      	ldr	r3, [r7, #0]
 8017616:	68db      	ldr	r3, [r3, #12]
 8017618:	603b      	str	r3, [r7, #0]
 801761a:	683b      	ldr	r3, [r7, #0]
 801761c:	2b00      	cmp	r3, #0
 801761e:	d1ea      	bne.n	80175f6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8017620:	4b03      	ldr	r3, [pc, #12]	; (8017630 <udp_new_port+0x68>)
 8017622:	881b      	ldrh	r3, [r3, #0]
}
 8017624:	4618      	mov	r0, r3
 8017626:	370c      	adds	r7, #12
 8017628:	46bd      	mov	sp, r7
 801762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801762e:	4770      	bx	lr
 8017630:	10000018 	.word	0x10000018
 8017634:	20008954 	.word	0x20008954

08017638 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017638:	b580      	push	{r7, lr}
 801763a:	b084      	sub	sp, #16
 801763c:	af00      	add	r7, sp, #0
 801763e:	60f8      	str	r0, [r7, #12]
 8017640:	60b9      	str	r1, [r7, #8]
 8017642:	4613      	mov	r3, r2
 8017644:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017646:	68fb      	ldr	r3, [r7, #12]
 8017648:	2b00      	cmp	r3, #0
 801764a:	d105      	bne.n	8017658 <udp_input_local_match+0x20>
 801764c:	4b27      	ldr	r3, [pc, #156]	; (80176ec <udp_input_local_match+0xb4>)
 801764e:	2287      	movs	r2, #135	; 0x87
 8017650:	4927      	ldr	r1, [pc, #156]	; (80176f0 <udp_input_local_match+0xb8>)
 8017652:	4828      	ldr	r0, [pc, #160]	; (80176f4 <udp_input_local_match+0xbc>)
 8017654:	f008 f908 	bl	801f868 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017658:	68bb      	ldr	r3, [r7, #8]
 801765a:	2b00      	cmp	r3, #0
 801765c:	d105      	bne.n	801766a <udp_input_local_match+0x32>
 801765e:	4b23      	ldr	r3, [pc, #140]	; (80176ec <udp_input_local_match+0xb4>)
 8017660:	2288      	movs	r2, #136	; 0x88
 8017662:	4925      	ldr	r1, [pc, #148]	; (80176f8 <udp_input_local_match+0xc0>)
 8017664:	4823      	ldr	r0, [pc, #140]	; (80176f4 <udp_input_local_match+0xbc>)
 8017666:	f008 f8ff 	bl	801f868 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801766a:	68fb      	ldr	r3, [r7, #12]
 801766c:	7a1b      	ldrb	r3, [r3, #8]
 801766e:	2b00      	cmp	r3, #0
 8017670:	d00b      	beq.n	801768a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017672:	68fb      	ldr	r3, [r7, #12]
 8017674:	7a1a      	ldrb	r2, [r3, #8]
 8017676:	4b21      	ldr	r3, [pc, #132]	; (80176fc <udp_input_local_match+0xc4>)
 8017678:	685b      	ldr	r3, [r3, #4]
 801767a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801767e:	3301      	adds	r3, #1
 8017680:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017682:	429a      	cmp	r2, r3
 8017684:	d001      	beq.n	801768a <udp_input_local_match+0x52>
    return 0;
 8017686:	2300      	movs	r3, #0
 8017688:	e02b      	b.n	80176e2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801768a:	79fb      	ldrb	r3, [r7, #7]
 801768c:	2b00      	cmp	r3, #0
 801768e:	d018      	beq.n	80176c2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	2b00      	cmp	r3, #0
 8017694:	d013      	beq.n	80176be <udp_input_local_match+0x86>
 8017696:	68fb      	ldr	r3, [r7, #12]
 8017698:	681b      	ldr	r3, [r3, #0]
 801769a:	2b00      	cmp	r3, #0
 801769c:	d00f      	beq.n	80176be <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801769e:	4b17      	ldr	r3, [pc, #92]	; (80176fc <udp_input_local_match+0xc4>)
 80176a0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80176a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176a6:	d00a      	beq.n	80176be <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	681a      	ldr	r2, [r3, #0]
 80176ac:	4b13      	ldr	r3, [pc, #76]	; (80176fc <udp_input_local_match+0xc4>)
 80176ae:	695b      	ldr	r3, [r3, #20]
 80176b0:	405a      	eors	r2, r3
 80176b2:	68bb      	ldr	r3, [r7, #8]
 80176b4:	3308      	adds	r3, #8
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d110      	bne.n	80176e0 <udp_input_local_match+0xa8>
          return 1;
 80176be:	2301      	movs	r3, #1
 80176c0:	e00f      	b.n	80176e2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80176c2:	68fb      	ldr	r3, [r7, #12]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d009      	beq.n	80176dc <udp_input_local_match+0xa4>
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d005      	beq.n	80176dc <udp_input_local_match+0xa4>
 80176d0:	68fb      	ldr	r3, [r7, #12]
 80176d2:	681a      	ldr	r2, [r3, #0]
 80176d4:	4b09      	ldr	r3, [pc, #36]	; (80176fc <udp_input_local_match+0xc4>)
 80176d6:	695b      	ldr	r3, [r3, #20]
 80176d8:	429a      	cmp	r2, r3
 80176da:	d101      	bne.n	80176e0 <udp_input_local_match+0xa8>
        return 1;
 80176dc:	2301      	movs	r3, #1
 80176de:	e000      	b.n	80176e2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80176e0:	2300      	movs	r3, #0
}
 80176e2:	4618      	mov	r0, r3
 80176e4:	3710      	adds	r7, #16
 80176e6:	46bd      	mov	sp, r7
 80176e8:	bd80      	pop	{r7, pc}
 80176ea:	bf00      	nop
 80176ec:	08024950 	.word	0x08024950
 80176f0:	08024980 	.word	0x08024980
 80176f4:	080249a4 	.word	0x080249a4
 80176f8:	080249cc 	.word	0x080249cc
 80176fc:	200050c0 	.word	0x200050c0

08017700 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017700:	b590      	push	{r4, r7, lr}
 8017702:	b08d      	sub	sp, #52	; 0x34
 8017704:	af02      	add	r7, sp, #8
 8017706:	6078      	str	r0, [r7, #4]
 8017708:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801770a:	2300      	movs	r3, #0
 801770c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	2b00      	cmp	r3, #0
 8017712:	d105      	bne.n	8017720 <udp_input+0x20>
 8017714:	4b7c      	ldr	r3, [pc, #496]	; (8017908 <udp_input+0x208>)
 8017716:	22cf      	movs	r2, #207	; 0xcf
 8017718:	497c      	ldr	r1, [pc, #496]	; (801790c <udp_input+0x20c>)
 801771a:	487d      	ldr	r0, [pc, #500]	; (8017910 <udp_input+0x210>)
 801771c:	f008 f8a4 	bl	801f868 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017720:	683b      	ldr	r3, [r7, #0]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d105      	bne.n	8017732 <udp_input+0x32>
 8017726:	4b78      	ldr	r3, [pc, #480]	; (8017908 <udp_input+0x208>)
 8017728:	22d0      	movs	r2, #208	; 0xd0
 801772a:	497a      	ldr	r1, [pc, #488]	; (8017914 <udp_input+0x214>)
 801772c:	4878      	ldr	r0, [pc, #480]	; (8017910 <udp_input+0x210>)
 801772e:	f008 f89b 	bl	801f868 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	895b      	ldrh	r3, [r3, #10]
 8017736:	2b07      	cmp	r3, #7
 8017738:	d803      	bhi.n	8017742 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801773a:	6878      	ldr	r0, [r7, #4]
 801773c:	f7f9 f918 	bl	8010970 <pbuf_free>
    goto end;
 8017740:	e0de      	b.n	8017900 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	685b      	ldr	r3, [r3, #4]
 8017746:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017748:	4b73      	ldr	r3, [pc, #460]	; (8017918 <udp_input+0x218>)
 801774a:	695b      	ldr	r3, [r3, #20]
 801774c:	4a72      	ldr	r2, [pc, #456]	; (8017918 <udp_input+0x218>)
 801774e:	6812      	ldr	r2, [r2, #0]
 8017750:	4611      	mov	r1, r2
 8017752:	4618      	mov	r0, r3
 8017754:	f003 ff0c 	bl	801b570 <ip4_addr_isbroadcast_u32>
 8017758:	4603      	mov	r3, r0
 801775a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801775c:	697b      	ldr	r3, [r7, #20]
 801775e:	881b      	ldrh	r3, [r3, #0]
 8017760:	b29b      	uxth	r3, r3
 8017762:	4618      	mov	r0, r3
 8017764:	f7f7 f9f4 	bl	800eb50 <lwip_htons>
 8017768:	4603      	mov	r3, r0
 801776a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801776c:	697b      	ldr	r3, [r7, #20]
 801776e:	885b      	ldrh	r3, [r3, #2]
 8017770:	b29b      	uxth	r3, r3
 8017772:	4618      	mov	r0, r3
 8017774:	f7f7 f9ec 	bl	800eb50 <lwip_htons>
 8017778:	4603      	mov	r3, r0
 801777a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801777c:	2300      	movs	r3, #0
 801777e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8017780:	2300      	movs	r3, #0
 8017782:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017784:	2300      	movs	r3, #0
 8017786:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017788:	4b64      	ldr	r3, [pc, #400]	; (801791c <udp_input+0x21c>)
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	627b      	str	r3, [r7, #36]	; 0x24
 801778e:	e054      	b.n	801783a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017792:	8a5b      	ldrh	r3, [r3, #18]
 8017794:	89fa      	ldrh	r2, [r7, #14]
 8017796:	429a      	cmp	r2, r3
 8017798:	d14a      	bne.n	8017830 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801779a:	7cfb      	ldrb	r3, [r7, #19]
 801779c:	461a      	mov	r2, r3
 801779e:	6839      	ldr	r1, [r7, #0]
 80177a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80177a2:	f7ff ff49 	bl	8017638 <udp_input_local_match>
 80177a6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d041      	beq.n	8017830 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80177ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177ae:	7c1b      	ldrb	r3, [r3, #16]
 80177b0:	f003 0304 	and.w	r3, r3, #4
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d11d      	bne.n	80177f4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80177b8:	69fb      	ldr	r3, [r7, #28]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d102      	bne.n	80177c4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80177be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177c0:	61fb      	str	r3, [r7, #28]
 80177c2:	e017      	b.n	80177f4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80177c4:	7cfb      	ldrb	r3, [r7, #19]
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d014      	beq.n	80177f4 <udp_input+0xf4>
 80177ca:	4b53      	ldr	r3, [pc, #332]	; (8017918 <udp_input+0x218>)
 80177cc:	695b      	ldr	r3, [r3, #20]
 80177ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80177d2:	d10f      	bne.n	80177f4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80177d4:	69fb      	ldr	r3, [r7, #28]
 80177d6:	681a      	ldr	r2, [r3, #0]
 80177d8:	683b      	ldr	r3, [r7, #0]
 80177da:	3304      	adds	r3, #4
 80177dc:	681b      	ldr	r3, [r3, #0]
 80177de:	429a      	cmp	r2, r3
 80177e0:	d008      	beq.n	80177f4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80177e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177e4:	681a      	ldr	r2, [r3, #0]
 80177e6:	683b      	ldr	r3, [r7, #0]
 80177e8:	3304      	adds	r3, #4
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	429a      	cmp	r2, r3
 80177ee:	d101      	bne.n	80177f4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80177f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177f2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80177f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177f6:	8a9b      	ldrh	r3, [r3, #20]
 80177f8:	8a3a      	ldrh	r2, [r7, #16]
 80177fa:	429a      	cmp	r2, r3
 80177fc:	d118      	bne.n	8017830 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80177fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017800:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8017802:	2b00      	cmp	r3, #0
 8017804:	d005      	beq.n	8017812 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8017806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017808:	685a      	ldr	r2, [r3, #4]
 801780a:	4b43      	ldr	r3, [pc, #268]	; (8017918 <udp_input+0x218>)
 801780c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801780e:	429a      	cmp	r2, r3
 8017810:	d10e      	bne.n	8017830 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8017812:	6a3b      	ldr	r3, [r7, #32]
 8017814:	2b00      	cmp	r3, #0
 8017816:	d014      	beq.n	8017842 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801781a:	68da      	ldr	r2, [r3, #12]
 801781c:	6a3b      	ldr	r3, [r7, #32]
 801781e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8017820:	4b3e      	ldr	r3, [pc, #248]	; (801791c <udp_input+0x21c>)
 8017822:	681a      	ldr	r2, [r3, #0]
 8017824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017826:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017828:	4a3c      	ldr	r2, [pc, #240]	; (801791c <udp_input+0x21c>)
 801782a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801782c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801782e:	e008      	b.n	8017842 <udp_input+0x142>
      }
    }

    prev = pcb;
 8017830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017832:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017836:	68db      	ldr	r3, [r3, #12]
 8017838:	627b      	str	r3, [r7, #36]	; 0x24
 801783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801783c:	2b00      	cmp	r3, #0
 801783e:	d1a7      	bne.n	8017790 <udp_input+0x90>
 8017840:	e000      	b.n	8017844 <udp_input+0x144>
        break;
 8017842:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8017844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017846:	2b00      	cmp	r3, #0
 8017848:	d101      	bne.n	801784e <udp_input+0x14e>
    pcb = uncon_pcb;
 801784a:	69fb      	ldr	r3, [r7, #28]
 801784c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801784e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017850:	2b00      	cmp	r3, #0
 8017852:	d002      	beq.n	801785a <udp_input+0x15a>
    for_us = 1;
 8017854:	2301      	movs	r3, #1
 8017856:	76fb      	strb	r3, [r7, #27]
 8017858:	e00a      	b.n	8017870 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801785a:	683b      	ldr	r3, [r7, #0]
 801785c:	3304      	adds	r3, #4
 801785e:	681a      	ldr	r2, [r3, #0]
 8017860:	4b2d      	ldr	r3, [pc, #180]	; (8017918 <udp_input+0x218>)
 8017862:	695b      	ldr	r3, [r3, #20]
 8017864:	429a      	cmp	r2, r3
 8017866:	bf0c      	ite	eq
 8017868:	2301      	moveq	r3, #1
 801786a:	2300      	movne	r3, #0
 801786c:	b2db      	uxtb	r3, r3
 801786e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8017870:	7efb      	ldrb	r3, [r7, #27]
 8017872:	2b00      	cmp	r3, #0
 8017874:	d041      	beq.n	80178fa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8017876:	2108      	movs	r1, #8
 8017878:	6878      	ldr	r0, [r7, #4]
 801787a:	f7f8 ffc1 	bl	8010800 <pbuf_remove_header>
 801787e:	4603      	mov	r3, r0
 8017880:	2b00      	cmp	r3, #0
 8017882:	d00a      	beq.n	801789a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8017884:	4b20      	ldr	r3, [pc, #128]	; (8017908 <udp_input+0x208>)
 8017886:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801788a:	4925      	ldr	r1, [pc, #148]	; (8017920 <udp_input+0x220>)
 801788c:	4820      	ldr	r0, [pc, #128]	; (8017910 <udp_input+0x210>)
 801788e:	f007 ffeb 	bl	801f868 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8017892:	6878      	ldr	r0, [r7, #4]
 8017894:	f7f9 f86c 	bl	8010970 <pbuf_free>
      goto end;
 8017898:	e032      	b.n	8017900 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801789c:	2b00      	cmp	r3, #0
 801789e:	d012      	beq.n	80178c6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80178a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178a2:	699b      	ldr	r3, [r3, #24]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d00a      	beq.n	80178be <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80178a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178aa:	699c      	ldr	r4, [r3, #24]
 80178ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178ae:	69d8      	ldr	r0, [r3, #28]
 80178b0:	8a3b      	ldrh	r3, [r7, #16]
 80178b2:	9300      	str	r3, [sp, #0]
 80178b4:	4b1b      	ldr	r3, [pc, #108]	; (8017924 <udp_input+0x224>)
 80178b6:	687a      	ldr	r2, [r7, #4]
 80178b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80178ba:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80178bc:	e021      	b.n	8017902 <udp_input+0x202>
        pbuf_free(p);
 80178be:	6878      	ldr	r0, [r7, #4]
 80178c0:	f7f9 f856 	bl	8010970 <pbuf_free>
        goto end;
 80178c4:	e01c      	b.n	8017900 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80178c6:	7cfb      	ldrb	r3, [r7, #19]
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d112      	bne.n	80178f2 <udp_input+0x1f2>
 80178cc:	4b12      	ldr	r3, [pc, #72]	; (8017918 <udp_input+0x218>)
 80178ce:	695b      	ldr	r3, [r3, #20]
 80178d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80178d4:	2be0      	cmp	r3, #224	; 0xe0
 80178d6:	d00c      	beq.n	80178f2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80178d8:	4b0f      	ldr	r3, [pc, #60]	; (8017918 <udp_input+0x218>)
 80178da:	899b      	ldrh	r3, [r3, #12]
 80178dc:	3308      	adds	r3, #8
 80178de:	b29b      	uxth	r3, r3
 80178e0:	b21b      	sxth	r3, r3
 80178e2:	4619      	mov	r1, r3
 80178e4:	6878      	ldr	r0, [r7, #4]
 80178e6:	f7f8 fffe 	bl	80108e6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80178ea:	2103      	movs	r1, #3
 80178ec:	6878      	ldr	r0, [r7, #4]
 80178ee:	f003 fb01 	bl	801aef4 <icmp_dest_unreach>
      pbuf_free(p);
 80178f2:	6878      	ldr	r0, [r7, #4]
 80178f4:	f7f9 f83c 	bl	8010970 <pbuf_free>
  return;
 80178f8:	e003      	b.n	8017902 <udp_input+0x202>
    pbuf_free(p);
 80178fa:	6878      	ldr	r0, [r7, #4]
 80178fc:	f7f9 f838 	bl	8010970 <pbuf_free>
  return;
 8017900:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8017902:	372c      	adds	r7, #44	; 0x2c
 8017904:	46bd      	mov	sp, r7
 8017906:	bd90      	pop	{r4, r7, pc}
 8017908:	08024950 	.word	0x08024950
 801790c:	080249f4 	.word	0x080249f4
 8017910:	080249a4 	.word	0x080249a4
 8017914:	08024a0c 	.word	0x08024a0c
 8017918:	200050c0 	.word	0x200050c0
 801791c:	20008954 	.word	0x20008954
 8017920:	08024a28 	.word	0x08024a28
 8017924:	200050d0 	.word	0x200050d0

08017928 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8017928:	b580      	push	{r7, lr}
 801792a:	b082      	sub	sp, #8
 801792c:	af00      	add	r7, sp, #0
 801792e:	6078      	str	r0, [r7, #4]
 8017930:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	2b00      	cmp	r3, #0
 8017936:	d109      	bne.n	801794c <udp_send+0x24>
 8017938:	4b11      	ldr	r3, [pc, #68]	; (8017980 <udp_send+0x58>)
 801793a:	f240 12d5 	movw	r2, #469	; 0x1d5
 801793e:	4911      	ldr	r1, [pc, #68]	; (8017984 <udp_send+0x5c>)
 8017940:	4811      	ldr	r0, [pc, #68]	; (8017988 <udp_send+0x60>)
 8017942:	f007 ff91 	bl	801f868 <iprintf>
 8017946:	f06f 030f 	mvn.w	r3, #15
 801794a:	e015      	b.n	8017978 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801794c:	683b      	ldr	r3, [r7, #0]
 801794e:	2b00      	cmp	r3, #0
 8017950:	d109      	bne.n	8017966 <udp_send+0x3e>
 8017952:	4b0b      	ldr	r3, [pc, #44]	; (8017980 <udp_send+0x58>)
 8017954:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8017958:	490c      	ldr	r1, [pc, #48]	; (801798c <udp_send+0x64>)
 801795a:	480b      	ldr	r0, [pc, #44]	; (8017988 <udp_send+0x60>)
 801795c:	f007 ff84 	bl	801f868 <iprintf>
 8017960:	f06f 030f 	mvn.w	r3, #15
 8017964:	e008      	b.n	8017978 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	1d1a      	adds	r2, r3, #4
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	8a9b      	ldrh	r3, [r3, #20]
 801796e:	6839      	ldr	r1, [r7, #0]
 8017970:	6878      	ldr	r0, [r7, #4]
 8017972:	f000 f80d 	bl	8017990 <udp_sendto>
 8017976:	4603      	mov	r3, r0
}
 8017978:	4618      	mov	r0, r3
 801797a:	3708      	adds	r7, #8
 801797c:	46bd      	mov	sp, r7
 801797e:	bd80      	pop	{r7, pc}
 8017980:	08024950 	.word	0x08024950
 8017984:	08024a44 	.word	0x08024a44
 8017988:	080249a4 	.word	0x080249a4
 801798c:	08024a5c 	.word	0x08024a5c

08017990 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8017990:	b580      	push	{r7, lr}
 8017992:	b088      	sub	sp, #32
 8017994:	af02      	add	r7, sp, #8
 8017996:	60f8      	str	r0, [r7, #12]
 8017998:	60b9      	str	r1, [r7, #8]
 801799a:	607a      	str	r2, [r7, #4]
 801799c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d109      	bne.n	80179b8 <udp_sendto+0x28>
 80179a4:	4b23      	ldr	r3, [pc, #140]	; (8017a34 <udp_sendto+0xa4>)
 80179a6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80179aa:	4923      	ldr	r1, [pc, #140]	; (8017a38 <udp_sendto+0xa8>)
 80179ac:	4823      	ldr	r0, [pc, #140]	; (8017a3c <udp_sendto+0xac>)
 80179ae:	f007 ff5b 	bl	801f868 <iprintf>
 80179b2:	f06f 030f 	mvn.w	r3, #15
 80179b6:	e038      	b.n	8017a2a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80179b8:	68bb      	ldr	r3, [r7, #8]
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d109      	bne.n	80179d2 <udp_sendto+0x42>
 80179be:	4b1d      	ldr	r3, [pc, #116]	; (8017a34 <udp_sendto+0xa4>)
 80179c0:	f240 2219 	movw	r2, #537	; 0x219
 80179c4:	491e      	ldr	r1, [pc, #120]	; (8017a40 <udp_sendto+0xb0>)
 80179c6:	481d      	ldr	r0, [pc, #116]	; (8017a3c <udp_sendto+0xac>)
 80179c8:	f007 ff4e 	bl	801f868 <iprintf>
 80179cc:	f06f 030f 	mvn.w	r3, #15
 80179d0:	e02b      	b.n	8017a2a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d109      	bne.n	80179ec <udp_sendto+0x5c>
 80179d8:	4b16      	ldr	r3, [pc, #88]	; (8017a34 <udp_sendto+0xa4>)
 80179da:	f240 221a 	movw	r2, #538	; 0x21a
 80179de:	4919      	ldr	r1, [pc, #100]	; (8017a44 <udp_sendto+0xb4>)
 80179e0:	4816      	ldr	r0, [pc, #88]	; (8017a3c <udp_sendto+0xac>)
 80179e2:	f007 ff41 	bl	801f868 <iprintf>
 80179e6:	f06f 030f 	mvn.w	r3, #15
 80179ea:	e01e      	b.n	8017a2a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80179ec:	68fb      	ldr	r3, [r7, #12]
 80179ee:	7a1b      	ldrb	r3, [r3, #8]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d006      	beq.n	8017a02 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80179f4:	68fb      	ldr	r3, [r7, #12]
 80179f6:	7a1b      	ldrb	r3, [r3, #8]
 80179f8:	4618      	mov	r0, r3
 80179fa:	f7f8 fbc1 	bl	8010180 <netif_get_by_index>
 80179fe:	6178      	str	r0, [r7, #20]
 8017a00:	e003      	b.n	8017a0a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8017a02:	6878      	ldr	r0, [r7, #4]
 8017a04:	f003 fb00 	bl	801b008 <ip4_route>
 8017a08:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8017a0a:	697b      	ldr	r3, [r7, #20]
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	d102      	bne.n	8017a16 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8017a10:	f06f 0303 	mvn.w	r3, #3
 8017a14:	e009      	b.n	8017a2a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8017a16:	887a      	ldrh	r2, [r7, #2]
 8017a18:	697b      	ldr	r3, [r7, #20]
 8017a1a:	9300      	str	r3, [sp, #0]
 8017a1c:	4613      	mov	r3, r2
 8017a1e:	687a      	ldr	r2, [r7, #4]
 8017a20:	68b9      	ldr	r1, [r7, #8]
 8017a22:	68f8      	ldr	r0, [r7, #12]
 8017a24:	f000 f810 	bl	8017a48 <udp_sendto_if>
 8017a28:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	3718      	adds	r7, #24
 8017a2e:	46bd      	mov	sp, r7
 8017a30:	bd80      	pop	{r7, pc}
 8017a32:	bf00      	nop
 8017a34:	08024950 	.word	0x08024950
 8017a38:	08024a74 	.word	0x08024a74
 8017a3c:	080249a4 	.word	0x080249a4
 8017a40:	08024a8c 	.word	0x08024a8c
 8017a44:	08024aa8 	.word	0x08024aa8

08017a48 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8017a48:	b580      	push	{r7, lr}
 8017a4a:	b088      	sub	sp, #32
 8017a4c:	af02      	add	r7, sp, #8
 8017a4e:	60f8      	str	r0, [r7, #12]
 8017a50:	60b9      	str	r1, [r7, #8]
 8017a52:	607a      	str	r2, [r7, #4]
 8017a54:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8017a56:	68fb      	ldr	r3, [r7, #12]
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d109      	bne.n	8017a70 <udp_sendto_if+0x28>
 8017a5c:	4b2e      	ldr	r3, [pc, #184]	; (8017b18 <udp_sendto_if+0xd0>)
 8017a5e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017a62:	492e      	ldr	r1, [pc, #184]	; (8017b1c <udp_sendto_if+0xd4>)
 8017a64:	482e      	ldr	r0, [pc, #184]	; (8017b20 <udp_sendto_if+0xd8>)
 8017a66:	f007 feff 	bl	801f868 <iprintf>
 8017a6a:	f06f 030f 	mvn.w	r3, #15
 8017a6e:	e04f      	b.n	8017b10 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8017a70:	68bb      	ldr	r3, [r7, #8]
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d109      	bne.n	8017a8a <udp_sendto_if+0x42>
 8017a76:	4b28      	ldr	r3, [pc, #160]	; (8017b18 <udp_sendto_if+0xd0>)
 8017a78:	f240 2281 	movw	r2, #641	; 0x281
 8017a7c:	4929      	ldr	r1, [pc, #164]	; (8017b24 <udp_sendto_if+0xdc>)
 8017a7e:	4828      	ldr	r0, [pc, #160]	; (8017b20 <udp_sendto_if+0xd8>)
 8017a80:	f007 fef2 	bl	801f868 <iprintf>
 8017a84:	f06f 030f 	mvn.w	r3, #15
 8017a88:	e042      	b.n	8017b10 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d109      	bne.n	8017aa4 <udp_sendto_if+0x5c>
 8017a90:	4b21      	ldr	r3, [pc, #132]	; (8017b18 <udp_sendto_if+0xd0>)
 8017a92:	f240 2282 	movw	r2, #642	; 0x282
 8017a96:	4924      	ldr	r1, [pc, #144]	; (8017b28 <udp_sendto_if+0xe0>)
 8017a98:	4821      	ldr	r0, [pc, #132]	; (8017b20 <udp_sendto_if+0xd8>)
 8017a9a:	f007 fee5 	bl	801f868 <iprintf>
 8017a9e:	f06f 030f 	mvn.w	r3, #15
 8017aa2:	e035      	b.n	8017b10 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8017aa4:	6a3b      	ldr	r3, [r7, #32]
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d109      	bne.n	8017abe <udp_sendto_if+0x76>
 8017aaa:	4b1b      	ldr	r3, [pc, #108]	; (8017b18 <udp_sendto_if+0xd0>)
 8017aac:	f240 2283 	movw	r2, #643	; 0x283
 8017ab0:	491e      	ldr	r1, [pc, #120]	; (8017b2c <udp_sendto_if+0xe4>)
 8017ab2:	481b      	ldr	r0, [pc, #108]	; (8017b20 <udp_sendto_if+0xd8>)
 8017ab4:	f007 fed8 	bl	801f868 <iprintf>
 8017ab8:	f06f 030f 	mvn.w	r3, #15
 8017abc:	e028      	b.n	8017b10 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017abe:	68fb      	ldr	r3, [r7, #12]
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d009      	beq.n	8017ad8 <udp_sendto_if+0x90>
 8017ac4:	68fb      	ldr	r3, [r7, #12]
 8017ac6:	681b      	ldr	r3, [r3, #0]
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d005      	beq.n	8017ad8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017ad4:	2be0      	cmp	r3, #224	; 0xe0
 8017ad6:	d103      	bne.n	8017ae0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8017ad8:	6a3b      	ldr	r3, [r7, #32]
 8017ada:	3304      	adds	r3, #4
 8017adc:	617b      	str	r3, [r7, #20]
 8017ade:	e00b      	b.n	8017af8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	681a      	ldr	r2, [r3, #0]
 8017ae4:	6a3b      	ldr	r3, [r7, #32]
 8017ae6:	3304      	adds	r3, #4
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	429a      	cmp	r2, r3
 8017aec:	d002      	beq.n	8017af4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8017aee:	f06f 0303 	mvn.w	r3, #3
 8017af2:	e00d      	b.n	8017b10 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8017af8:	887a      	ldrh	r2, [r7, #2]
 8017afa:	697b      	ldr	r3, [r7, #20]
 8017afc:	9301      	str	r3, [sp, #4]
 8017afe:	6a3b      	ldr	r3, [r7, #32]
 8017b00:	9300      	str	r3, [sp, #0]
 8017b02:	4613      	mov	r3, r2
 8017b04:	687a      	ldr	r2, [r7, #4]
 8017b06:	68b9      	ldr	r1, [r7, #8]
 8017b08:	68f8      	ldr	r0, [r7, #12]
 8017b0a:	f000 f811 	bl	8017b30 <udp_sendto_if_src>
 8017b0e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8017b10:	4618      	mov	r0, r3
 8017b12:	3718      	adds	r7, #24
 8017b14:	46bd      	mov	sp, r7
 8017b16:	bd80      	pop	{r7, pc}
 8017b18:	08024950 	.word	0x08024950
 8017b1c:	08024ac4 	.word	0x08024ac4
 8017b20:	080249a4 	.word	0x080249a4
 8017b24:	08024ae0 	.word	0x08024ae0
 8017b28:	08024afc 	.word	0x08024afc
 8017b2c:	08024b1c 	.word	0x08024b1c

08017b30 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b08c      	sub	sp, #48	; 0x30
 8017b34:	af04      	add	r7, sp, #16
 8017b36:	60f8      	str	r0, [r7, #12]
 8017b38:	60b9      	str	r1, [r7, #8]
 8017b3a:	607a      	str	r2, [r7, #4]
 8017b3c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d109      	bne.n	8017b58 <udp_sendto_if_src+0x28>
 8017b44:	4b65      	ldr	r3, [pc, #404]	; (8017cdc <udp_sendto_if_src+0x1ac>)
 8017b46:	f240 22d1 	movw	r2, #721	; 0x2d1
 8017b4a:	4965      	ldr	r1, [pc, #404]	; (8017ce0 <udp_sendto_if_src+0x1b0>)
 8017b4c:	4865      	ldr	r0, [pc, #404]	; (8017ce4 <udp_sendto_if_src+0x1b4>)
 8017b4e:	f007 fe8b 	bl	801f868 <iprintf>
 8017b52:	f06f 030f 	mvn.w	r3, #15
 8017b56:	e0bc      	b.n	8017cd2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8017b58:	68bb      	ldr	r3, [r7, #8]
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d109      	bne.n	8017b72 <udp_sendto_if_src+0x42>
 8017b5e:	4b5f      	ldr	r3, [pc, #380]	; (8017cdc <udp_sendto_if_src+0x1ac>)
 8017b60:	f240 22d2 	movw	r2, #722	; 0x2d2
 8017b64:	4960      	ldr	r1, [pc, #384]	; (8017ce8 <udp_sendto_if_src+0x1b8>)
 8017b66:	485f      	ldr	r0, [pc, #380]	; (8017ce4 <udp_sendto_if_src+0x1b4>)
 8017b68:	f007 fe7e 	bl	801f868 <iprintf>
 8017b6c:	f06f 030f 	mvn.w	r3, #15
 8017b70:	e0af      	b.n	8017cd2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d109      	bne.n	8017b8c <udp_sendto_if_src+0x5c>
 8017b78:	4b58      	ldr	r3, [pc, #352]	; (8017cdc <udp_sendto_if_src+0x1ac>)
 8017b7a:	f240 22d3 	movw	r2, #723	; 0x2d3
 8017b7e:	495b      	ldr	r1, [pc, #364]	; (8017cec <udp_sendto_if_src+0x1bc>)
 8017b80:	4858      	ldr	r0, [pc, #352]	; (8017ce4 <udp_sendto_if_src+0x1b4>)
 8017b82:	f007 fe71 	bl	801f868 <iprintf>
 8017b86:	f06f 030f 	mvn.w	r3, #15
 8017b8a:	e0a2      	b.n	8017cd2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8017b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d109      	bne.n	8017ba6 <udp_sendto_if_src+0x76>
 8017b92:	4b52      	ldr	r3, [pc, #328]	; (8017cdc <udp_sendto_if_src+0x1ac>)
 8017b94:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8017b98:	4955      	ldr	r1, [pc, #340]	; (8017cf0 <udp_sendto_if_src+0x1c0>)
 8017b9a:	4852      	ldr	r0, [pc, #328]	; (8017ce4 <udp_sendto_if_src+0x1b4>)
 8017b9c:	f007 fe64 	bl	801f868 <iprintf>
 8017ba0:	f06f 030f 	mvn.w	r3, #15
 8017ba4:	e095      	b.n	8017cd2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8017ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d109      	bne.n	8017bc0 <udp_sendto_if_src+0x90>
 8017bac:	4b4b      	ldr	r3, [pc, #300]	; (8017cdc <udp_sendto_if_src+0x1ac>)
 8017bae:	f240 22d5 	movw	r2, #725	; 0x2d5
 8017bb2:	4950      	ldr	r1, [pc, #320]	; (8017cf4 <udp_sendto_if_src+0x1c4>)
 8017bb4:	484b      	ldr	r0, [pc, #300]	; (8017ce4 <udp_sendto_if_src+0x1b4>)
 8017bb6:	f007 fe57 	bl	801f868 <iprintf>
 8017bba:	f06f 030f 	mvn.w	r3, #15
 8017bbe:	e088      	b.n	8017cd2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	8a5b      	ldrh	r3, [r3, #18]
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d10f      	bne.n	8017be8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8017bc8:	68f9      	ldr	r1, [r7, #12]
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	8a5b      	ldrh	r3, [r3, #18]
 8017bce:	461a      	mov	r2, r3
 8017bd0:	68f8      	ldr	r0, [r7, #12]
 8017bd2:	f000 f893 	bl	8017cfc <udp_bind>
 8017bd6:	4603      	mov	r3, r0
 8017bd8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8017bda:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d002      	beq.n	8017be8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8017be2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017be6:	e074      	b.n	8017cd2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8017be8:	68bb      	ldr	r3, [r7, #8]
 8017bea:	891b      	ldrh	r3, [r3, #8]
 8017bec:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8017bf0:	4293      	cmp	r3, r2
 8017bf2:	d902      	bls.n	8017bfa <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8017bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8017bf8:	e06b      	b.n	8017cd2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8017bfa:	2108      	movs	r1, #8
 8017bfc:	68b8      	ldr	r0, [r7, #8]
 8017bfe:	f7f8 fdef 	bl	80107e0 <pbuf_add_header>
 8017c02:	4603      	mov	r3, r0
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d015      	beq.n	8017c34 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8017c08:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017c0c:	2108      	movs	r1, #8
 8017c0e:	2022      	movs	r0, #34	; 0x22
 8017c10:	f7f8 fb98 	bl	8010344 <pbuf_alloc>
 8017c14:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8017c16:	69fb      	ldr	r3, [r7, #28]
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d102      	bne.n	8017c22 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8017c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8017c20:	e057      	b.n	8017cd2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8017c22:	68bb      	ldr	r3, [r7, #8]
 8017c24:	891b      	ldrh	r3, [r3, #8]
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d006      	beq.n	8017c38 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8017c2a:	68b9      	ldr	r1, [r7, #8]
 8017c2c:	69f8      	ldr	r0, [r7, #28]
 8017c2e:	f7f8 ffc3 	bl	8010bb8 <pbuf_chain>
 8017c32:	e001      	b.n	8017c38 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8017c34:	68bb      	ldr	r3, [r7, #8]
 8017c36:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8017c38:	69fb      	ldr	r3, [r7, #28]
 8017c3a:	895b      	ldrh	r3, [r3, #10]
 8017c3c:	2b07      	cmp	r3, #7
 8017c3e:	d806      	bhi.n	8017c4e <udp_sendto_if_src+0x11e>
 8017c40:	4b26      	ldr	r3, [pc, #152]	; (8017cdc <udp_sendto_if_src+0x1ac>)
 8017c42:	f240 320d 	movw	r2, #781	; 0x30d
 8017c46:	492c      	ldr	r1, [pc, #176]	; (8017cf8 <udp_sendto_if_src+0x1c8>)
 8017c48:	4826      	ldr	r0, [pc, #152]	; (8017ce4 <udp_sendto_if_src+0x1b4>)
 8017c4a:	f007 fe0d 	bl	801f868 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8017c4e:	69fb      	ldr	r3, [r7, #28]
 8017c50:	685b      	ldr	r3, [r3, #4]
 8017c52:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8017c54:	68fb      	ldr	r3, [r7, #12]
 8017c56:	8a5b      	ldrh	r3, [r3, #18]
 8017c58:	4618      	mov	r0, r3
 8017c5a:	f7f6 ff79 	bl	800eb50 <lwip_htons>
 8017c5e:	4603      	mov	r3, r0
 8017c60:	461a      	mov	r2, r3
 8017c62:	697b      	ldr	r3, [r7, #20]
 8017c64:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8017c66:	887b      	ldrh	r3, [r7, #2]
 8017c68:	4618      	mov	r0, r3
 8017c6a:	f7f6 ff71 	bl	800eb50 <lwip_htons>
 8017c6e:	4603      	mov	r3, r0
 8017c70:	461a      	mov	r2, r3
 8017c72:	697b      	ldr	r3, [r7, #20]
 8017c74:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8017c76:	697b      	ldr	r3, [r7, #20]
 8017c78:	2200      	movs	r2, #0
 8017c7a:	719a      	strb	r2, [r3, #6]
 8017c7c:	2200      	movs	r2, #0
 8017c7e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8017c80:	69fb      	ldr	r3, [r7, #28]
 8017c82:	891b      	ldrh	r3, [r3, #8]
 8017c84:	4618      	mov	r0, r3
 8017c86:	f7f6 ff63 	bl	800eb50 <lwip_htons>
 8017c8a:	4603      	mov	r3, r0
 8017c8c:	461a      	mov	r2, r3
 8017c8e:	697b      	ldr	r3, [r7, #20]
 8017c90:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8017c92:	2311      	movs	r3, #17
 8017c94:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	7adb      	ldrb	r3, [r3, #11]
 8017c9a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8017c9c:	68fb      	ldr	r3, [r7, #12]
 8017c9e:	7a9b      	ldrb	r3, [r3, #10]
 8017ca0:	7cb9      	ldrb	r1, [r7, #18]
 8017ca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017ca4:	9202      	str	r2, [sp, #8]
 8017ca6:	7cfa      	ldrb	r2, [r7, #19]
 8017ca8:	9201      	str	r2, [sp, #4]
 8017caa:	9300      	str	r3, [sp, #0]
 8017cac:	460b      	mov	r3, r1
 8017cae:	687a      	ldr	r2, [r7, #4]
 8017cb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017cb2:	69f8      	ldr	r0, [r7, #28]
 8017cb4:	f003 fbae 	bl	801b414 <ip4_output_if_src>
 8017cb8:	4603      	mov	r3, r0
 8017cba:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8017cbc:	69fa      	ldr	r2, [r7, #28]
 8017cbe:	68bb      	ldr	r3, [r7, #8]
 8017cc0:	429a      	cmp	r2, r3
 8017cc2:	d004      	beq.n	8017cce <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8017cc4:	69f8      	ldr	r0, [r7, #28]
 8017cc6:	f7f8 fe53 	bl	8010970 <pbuf_free>
    q = NULL;
 8017cca:	2300      	movs	r3, #0
 8017ccc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8017cce:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8017cd2:	4618      	mov	r0, r3
 8017cd4:	3720      	adds	r7, #32
 8017cd6:	46bd      	mov	sp, r7
 8017cd8:	bd80      	pop	{r7, pc}
 8017cda:	bf00      	nop
 8017cdc:	08024950 	.word	0x08024950
 8017ce0:	08024b3c 	.word	0x08024b3c
 8017ce4:	080249a4 	.word	0x080249a4
 8017ce8:	08024b5c 	.word	0x08024b5c
 8017cec:	08024b7c 	.word	0x08024b7c
 8017cf0:	08024ba0 	.word	0x08024ba0
 8017cf4:	08024bc4 	.word	0x08024bc4
 8017cf8:	08024be8 	.word	0x08024be8

08017cfc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8017cfc:	b580      	push	{r7, lr}
 8017cfe:	b086      	sub	sp, #24
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	60f8      	str	r0, [r7, #12]
 8017d04:	60b9      	str	r1, [r7, #8]
 8017d06:	4613      	mov	r3, r2
 8017d08:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8017d0a:	68bb      	ldr	r3, [r7, #8]
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d101      	bne.n	8017d14 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8017d10:	4b39      	ldr	r3, [pc, #228]	; (8017df8 <udp_bind+0xfc>)
 8017d12:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d109      	bne.n	8017d2e <udp_bind+0x32>
 8017d1a:	4b38      	ldr	r3, [pc, #224]	; (8017dfc <udp_bind+0x100>)
 8017d1c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8017d20:	4937      	ldr	r1, [pc, #220]	; (8017e00 <udp_bind+0x104>)
 8017d22:	4838      	ldr	r0, [pc, #224]	; (8017e04 <udp_bind+0x108>)
 8017d24:	f007 fda0 	bl	801f868 <iprintf>
 8017d28:	f06f 030f 	mvn.w	r3, #15
 8017d2c:	e060      	b.n	8017df0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8017d2e:	2300      	movs	r3, #0
 8017d30:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017d32:	4b35      	ldr	r3, [pc, #212]	; (8017e08 <udp_bind+0x10c>)
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	617b      	str	r3, [r7, #20]
 8017d38:	e009      	b.n	8017d4e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8017d3a:	68fa      	ldr	r2, [r7, #12]
 8017d3c:	697b      	ldr	r3, [r7, #20]
 8017d3e:	429a      	cmp	r2, r3
 8017d40:	d102      	bne.n	8017d48 <udp_bind+0x4c>
      rebind = 1;
 8017d42:	2301      	movs	r3, #1
 8017d44:	74fb      	strb	r3, [r7, #19]
      break;
 8017d46:	e005      	b.n	8017d54 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017d48:	697b      	ldr	r3, [r7, #20]
 8017d4a:	68db      	ldr	r3, [r3, #12]
 8017d4c:	617b      	str	r3, [r7, #20]
 8017d4e:	697b      	ldr	r3, [r7, #20]
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d1f2      	bne.n	8017d3a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8017d54:	88fb      	ldrh	r3, [r7, #6]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d109      	bne.n	8017d6e <udp_bind+0x72>
    port = udp_new_port();
 8017d5a:	f7ff fc35 	bl	80175c8 <udp_new_port>
 8017d5e:	4603      	mov	r3, r0
 8017d60:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8017d62:	88fb      	ldrh	r3, [r7, #6]
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d12c      	bne.n	8017dc2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8017d68:	f06f 0307 	mvn.w	r3, #7
 8017d6c:	e040      	b.n	8017df0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017d6e:	4b26      	ldr	r3, [pc, #152]	; (8017e08 <udp_bind+0x10c>)
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	617b      	str	r3, [r7, #20]
 8017d74:	e022      	b.n	8017dbc <udp_bind+0xc0>
      if (pcb != ipcb) {
 8017d76:	68fa      	ldr	r2, [r7, #12]
 8017d78:	697b      	ldr	r3, [r7, #20]
 8017d7a:	429a      	cmp	r2, r3
 8017d7c:	d01b      	beq.n	8017db6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8017d7e:	697b      	ldr	r3, [r7, #20]
 8017d80:	8a5b      	ldrh	r3, [r3, #18]
 8017d82:	88fa      	ldrh	r2, [r7, #6]
 8017d84:	429a      	cmp	r2, r3
 8017d86:	d116      	bne.n	8017db6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017d88:	697b      	ldr	r3, [r7, #20]
 8017d8a:	681a      	ldr	r2, [r3, #0]
 8017d8c:	68bb      	ldr	r3, [r7, #8]
 8017d8e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8017d90:	429a      	cmp	r2, r3
 8017d92:	d00d      	beq.n	8017db0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017d94:	68bb      	ldr	r3, [r7, #8]
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d00a      	beq.n	8017db0 <udp_bind+0xb4>
 8017d9a:	68bb      	ldr	r3, [r7, #8]
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d006      	beq.n	8017db0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017da2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d003      	beq.n	8017db0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017da8:	697b      	ldr	r3, [r7, #20]
 8017daa:	681b      	ldr	r3, [r3, #0]
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d102      	bne.n	8017db6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8017db0:	f06f 0307 	mvn.w	r3, #7
 8017db4:	e01c      	b.n	8017df0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017db6:	697b      	ldr	r3, [r7, #20]
 8017db8:	68db      	ldr	r3, [r3, #12]
 8017dba:	617b      	str	r3, [r7, #20]
 8017dbc:	697b      	ldr	r3, [r7, #20]
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d1d9      	bne.n	8017d76 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8017dc2:	68bb      	ldr	r3, [r7, #8]
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d002      	beq.n	8017dce <udp_bind+0xd2>
 8017dc8:	68bb      	ldr	r3, [r7, #8]
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	e000      	b.n	8017dd0 <udp_bind+0xd4>
 8017dce:	2300      	movs	r3, #0
 8017dd0:	68fa      	ldr	r2, [r7, #12]
 8017dd2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	88fa      	ldrh	r2, [r7, #6]
 8017dd8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8017dda:	7cfb      	ldrb	r3, [r7, #19]
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d106      	bne.n	8017dee <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8017de0:	4b09      	ldr	r3, [pc, #36]	; (8017e08 <udp_bind+0x10c>)
 8017de2:	681a      	ldr	r2, [r3, #0]
 8017de4:	68fb      	ldr	r3, [r7, #12]
 8017de6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8017de8:	4a07      	ldr	r2, [pc, #28]	; (8017e08 <udp_bind+0x10c>)
 8017dea:	68fb      	ldr	r3, [r7, #12]
 8017dec:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8017dee:	2300      	movs	r3, #0
}
 8017df0:	4618      	mov	r0, r3
 8017df2:	3718      	adds	r7, #24
 8017df4:	46bd      	mov	sp, r7
 8017df6:	bd80      	pop	{r7, pc}
 8017df8:	08025ac4 	.word	0x08025ac4
 8017dfc:	08024950 	.word	0x08024950
 8017e00:	08024c18 	.word	0x08024c18
 8017e04:	080249a4 	.word	0x080249a4
 8017e08:	20008954 	.word	0x20008954

08017e0c <udp_bind_netif>:
 *
 * @see udp_disconnect()
 */
void
udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
{
 8017e0c:	b480      	push	{r7}
 8017e0e:	b083      	sub	sp, #12
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	6078      	str	r0, [r7, #4]
 8017e14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif != NULL) {
 8017e16:	683b      	ldr	r3, [r7, #0]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d007      	beq.n	8017e2c <udp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 8017e1c:	683b      	ldr	r3, [r7, #0]
 8017e1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017e22:	3301      	adds	r3, #1
 8017e24:	b2da      	uxtb	r2, r3
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 8017e2a:	e002      	b.n	8017e32 <udp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	2200      	movs	r2, #0
 8017e30:	721a      	strb	r2, [r3, #8]
}
 8017e32:	bf00      	nop
 8017e34:	370c      	adds	r7, #12
 8017e36:	46bd      	mov	sp, r7
 8017e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e3c:	4770      	bx	lr
	...

08017e40 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8017e40:	b580      	push	{r7, lr}
 8017e42:	b086      	sub	sp, #24
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	60f8      	str	r0, [r7, #12]
 8017e48:	60b9      	str	r1, [r7, #8]
 8017e4a:	4613      	mov	r3, r2
 8017e4c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8017e4e:	68fb      	ldr	r3, [r7, #12]
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d109      	bne.n	8017e68 <udp_connect+0x28>
 8017e54:	4b2c      	ldr	r3, [pc, #176]	; (8017f08 <udp_connect+0xc8>)
 8017e56:	f240 4235 	movw	r2, #1077	; 0x435
 8017e5a:	492c      	ldr	r1, [pc, #176]	; (8017f0c <udp_connect+0xcc>)
 8017e5c:	482c      	ldr	r0, [pc, #176]	; (8017f10 <udp_connect+0xd0>)
 8017e5e:	f007 fd03 	bl	801f868 <iprintf>
 8017e62:	f06f 030f 	mvn.w	r3, #15
 8017e66:	e04b      	b.n	8017f00 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8017e68:	68bb      	ldr	r3, [r7, #8]
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d109      	bne.n	8017e82 <udp_connect+0x42>
 8017e6e:	4b26      	ldr	r3, [pc, #152]	; (8017f08 <udp_connect+0xc8>)
 8017e70:	f240 4236 	movw	r2, #1078	; 0x436
 8017e74:	4927      	ldr	r1, [pc, #156]	; (8017f14 <udp_connect+0xd4>)
 8017e76:	4826      	ldr	r0, [pc, #152]	; (8017f10 <udp_connect+0xd0>)
 8017e78:	f007 fcf6 	bl	801f868 <iprintf>
 8017e7c:	f06f 030f 	mvn.w	r3, #15
 8017e80:	e03e      	b.n	8017f00 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8017e82:	68fb      	ldr	r3, [r7, #12]
 8017e84:	8a5b      	ldrh	r3, [r3, #18]
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	d10f      	bne.n	8017eaa <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8017e8a:	68f9      	ldr	r1, [r7, #12]
 8017e8c:	68fb      	ldr	r3, [r7, #12]
 8017e8e:	8a5b      	ldrh	r3, [r3, #18]
 8017e90:	461a      	mov	r2, r3
 8017e92:	68f8      	ldr	r0, [r7, #12]
 8017e94:	f7ff ff32 	bl	8017cfc <udp_bind>
 8017e98:	4603      	mov	r3, r0
 8017e9a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8017e9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d002      	beq.n	8017eaa <udp_connect+0x6a>
      return err;
 8017ea4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017ea8:	e02a      	b.n	8017f00 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8017eaa:	68bb      	ldr	r3, [r7, #8]
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d002      	beq.n	8017eb6 <udp_connect+0x76>
 8017eb0:	68bb      	ldr	r3, [r7, #8]
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	e000      	b.n	8017eb8 <udp_connect+0x78>
 8017eb6:	2300      	movs	r3, #0
 8017eb8:	68fa      	ldr	r2, [r7, #12]
 8017eba:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	88fa      	ldrh	r2, [r7, #6]
 8017ec0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	7c1b      	ldrb	r3, [r3, #16]
 8017ec6:	f043 0304 	orr.w	r3, r3, #4
 8017eca:	b2da      	uxtb	r2, r3
 8017ecc:	68fb      	ldr	r3, [r7, #12]
 8017ece:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017ed0:	4b11      	ldr	r3, [pc, #68]	; (8017f18 <udp_connect+0xd8>)
 8017ed2:	681b      	ldr	r3, [r3, #0]
 8017ed4:	617b      	str	r3, [r7, #20]
 8017ed6:	e008      	b.n	8017eea <udp_connect+0xaa>
    if (pcb == ipcb) {
 8017ed8:	68fa      	ldr	r2, [r7, #12]
 8017eda:	697b      	ldr	r3, [r7, #20]
 8017edc:	429a      	cmp	r2, r3
 8017ede:	d101      	bne.n	8017ee4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8017ee0:	2300      	movs	r3, #0
 8017ee2:	e00d      	b.n	8017f00 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017ee4:	697b      	ldr	r3, [r7, #20]
 8017ee6:	68db      	ldr	r3, [r3, #12]
 8017ee8:	617b      	str	r3, [r7, #20]
 8017eea:	697b      	ldr	r3, [r7, #20]
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d1f3      	bne.n	8017ed8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8017ef0:	4b09      	ldr	r3, [pc, #36]	; (8017f18 <udp_connect+0xd8>)
 8017ef2:	681a      	ldr	r2, [r3, #0]
 8017ef4:	68fb      	ldr	r3, [r7, #12]
 8017ef6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8017ef8:	4a07      	ldr	r2, [pc, #28]	; (8017f18 <udp_connect+0xd8>)
 8017efa:	68fb      	ldr	r3, [r7, #12]
 8017efc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8017efe:	2300      	movs	r3, #0
}
 8017f00:	4618      	mov	r0, r3
 8017f02:	3718      	adds	r7, #24
 8017f04:	46bd      	mov	sp, r7
 8017f06:	bd80      	pop	{r7, pc}
 8017f08:	08024950 	.word	0x08024950
 8017f0c:	08024c30 	.word	0x08024c30
 8017f10:	080249a4 	.word	0x080249a4
 8017f14:	08024c4c 	.word	0x08024c4c
 8017f18:	20008954 	.word	0x20008954

08017f1c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8017f1c:	b580      	push	{r7, lr}
 8017f1e:	b084      	sub	sp, #16
 8017f20:	af00      	add	r7, sp, #0
 8017f22:	60f8      	str	r0, [r7, #12]
 8017f24:	60b9      	str	r1, [r7, #8]
 8017f26:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8017f28:	68fb      	ldr	r3, [r7, #12]
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d107      	bne.n	8017f3e <udp_recv+0x22>
 8017f2e:	4b08      	ldr	r3, [pc, #32]	; (8017f50 <udp_recv+0x34>)
 8017f30:	f240 428a 	movw	r2, #1162	; 0x48a
 8017f34:	4907      	ldr	r1, [pc, #28]	; (8017f54 <udp_recv+0x38>)
 8017f36:	4808      	ldr	r0, [pc, #32]	; (8017f58 <udp_recv+0x3c>)
 8017f38:	f007 fc96 	bl	801f868 <iprintf>
 8017f3c:	e005      	b.n	8017f4a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8017f3e:	68fb      	ldr	r3, [r7, #12]
 8017f40:	68ba      	ldr	r2, [r7, #8]
 8017f42:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8017f44:	68fb      	ldr	r3, [r7, #12]
 8017f46:	687a      	ldr	r2, [r7, #4]
 8017f48:	61da      	str	r2, [r3, #28]
}
 8017f4a:	3710      	adds	r7, #16
 8017f4c:	46bd      	mov	sp, r7
 8017f4e:	bd80      	pop	{r7, pc}
 8017f50:	08024950 	.word	0x08024950
 8017f54:	08024c84 	.word	0x08024c84
 8017f58:	080249a4 	.word	0x080249a4

08017f5c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8017f5c:	b580      	push	{r7, lr}
 8017f5e:	b084      	sub	sp, #16
 8017f60:	af00      	add	r7, sp, #0
 8017f62:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d107      	bne.n	8017f7a <udp_remove+0x1e>
 8017f6a:	4b19      	ldr	r3, [pc, #100]	; (8017fd0 <udp_remove+0x74>)
 8017f6c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8017f70:	4918      	ldr	r1, [pc, #96]	; (8017fd4 <udp_remove+0x78>)
 8017f72:	4819      	ldr	r0, [pc, #100]	; (8017fd8 <udp_remove+0x7c>)
 8017f74:	f007 fc78 	bl	801f868 <iprintf>
 8017f78:	e026      	b.n	8017fc8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8017f7a:	4b18      	ldr	r3, [pc, #96]	; (8017fdc <udp_remove+0x80>)
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	687a      	ldr	r2, [r7, #4]
 8017f80:	429a      	cmp	r2, r3
 8017f82:	d105      	bne.n	8017f90 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8017f84:	4b15      	ldr	r3, [pc, #84]	; (8017fdc <udp_remove+0x80>)
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	68db      	ldr	r3, [r3, #12]
 8017f8a:	4a14      	ldr	r2, [pc, #80]	; (8017fdc <udp_remove+0x80>)
 8017f8c:	6013      	str	r3, [r2, #0]
 8017f8e:	e017      	b.n	8017fc0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8017f90:	4b12      	ldr	r3, [pc, #72]	; (8017fdc <udp_remove+0x80>)
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	60fb      	str	r3, [r7, #12]
 8017f96:	e010      	b.n	8017fba <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	68db      	ldr	r3, [r3, #12]
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d009      	beq.n	8017fb4 <udp_remove+0x58>
 8017fa0:	68fb      	ldr	r3, [r7, #12]
 8017fa2:	68db      	ldr	r3, [r3, #12]
 8017fa4:	687a      	ldr	r2, [r7, #4]
 8017fa6:	429a      	cmp	r2, r3
 8017fa8:	d104      	bne.n	8017fb4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	68da      	ldr	r2, [r3, #12]
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	60da      	str	r2, [r3, #12]
        break;
 8017fb2:	e005      	b.n	8017fc0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8017fb4:	68fb      	ldr	r3, [r7, #12]
 8017fb6:	68db      	ldr	r3, [r3, #12]
 8017fb8:	60fb      	str	r3, [r7, #12]
 8017fba:	68fb      	ldr	r3, [r7, #12]
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d1eb      	bne.n	8017f98 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8017fc0:	6879      	ldr	r1, [r7, #4]
 8017fc2:	2000      	movs	r0, #0
 8017fc4:	f7f7 fdba 	bl	800fb3c <memp_free>
}
 8017fc8:	3710      	adds	r7, #16
 8017fca:	46bd      	mov	sp, r7
 8017fcc:	bd80      	pop	{r7, pc}
 8017fce:	bf00      	nop
 8017fd0:	08024950 	.word	0x08024950
 8017fd4:	08024c9c 	.word	0x08024c9c
 8017fd8:	080249a4 	.word	0x080249a4
 8017fdc:	20008954 	.word	0x20008954

08017fe0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b082      	sub	sp, #8
 8017fe4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8017fe6:	2000      	movs	r0, #0
 8017fe8:	f7f7 fd56 	bl	800fa98 <memp_malloc>
 8017fec:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d007      	beq.n	8018004 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8017ff4:	2220      	movs	r2, #32
 8017ff6:	2100      	movs	r1, #0
 8017ff8:	6878      	ldr	r0, [r7, #4]
 8017ffa:	f006 fdbf 	bl	801eb7c <memset>
    pcb->ttl = UDP_TTL;
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	22ff      	movs	r2, #255	; 0xff
 8018002:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8018004:	687b      	ldr	r3, [r7, #4]
}
 8018006:	4618      	mov	r0, r3
 8018008:	3708      	adds	r7, #8
 801800a:	46bd      	mov	sp, r7
 801800c:	bd80      	pop	{r7, pc}

0801800e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801800e:	b580      	push	{r7, lr}
 8018010:	b084      	sub	sp, #16
 8018012:	af00      	add	r7, sp, #0
 8018014:	4603      	mov	r3, r0
 8018016:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8018018:	f7ff ffe2 	bl	8017fe0 <udp_new>
 801801c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801801e:	68fb      	ldr	r3, [r7, #12]
}
 8018020:	4618      	mov	r0, r3
 8018022:	3710      	adds	r7, #16
 8018024:	46bd      	mov	sp, r7
 8018026:	bd80      	pop	{r7, pc}

08018028 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018028:	b480      	push	{r7}
 801802a:	b085      	sub	sp, #20
 801802c:	af00      	add	r7, sp, #0
 801802e:	6078      	str	r0, [r7, #4]
 8018030:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	2b00      	cmp	r3, #0
 8018036:	d01e      	beq.n	8018076 <udp_netif_ip_addr_changed+0x4e>
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	2b00      	cmp	r3, #0
 801803e:	d01a      	beq.n	8018076 <udp_netif_ip_addr_changed+0x4e>
 8018040:	683b      	ldr	r3, [r7, #0]
 8018042:	2b00      	cmp	r3, #0
 8018044:	d017      	beq.n	8018076 <udp_netif_ip_addr_changed+0x4e>
 8018046:	683b      	ldr	r3, [r7, #0]
 8018048:	681b      	ldr	r3, [r3, #0]
 801804a:	2b00      	cmp	r3, #0
 801804c:	d013      	beq.n	8018076 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801804e:	4b0d      	ldr	r3, [pc, #52]	; (8018084 <udp_netif_ip_addr_changed+0x5c>)
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	60fb      	str	r3, [r7, #12]
 8018054:	e00c      	b.n	8018070 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018056:	68fb      	ldr	r3, [r7, #12]
 8018058:	681a      	ldr	r2, [r3, #0]
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	681b      	ldr	r3, [r3, #0]
 801805e:	429a      	cmp	r2, r3
 8018060:	d103      	bne.n	801806a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8018062:	683b      	ldr	r3, [r7, #0]
 8018064:	681a      	ldr	r2, [r3, #0]
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801806a:	68fb      	ldr	r3, [r7, #12]
 801806c:	68db      	ldr	r3, [r3, #12]
 801806e:	60fb      	str	r3, [r7, #12]
 8018070:	68fb      	ldr	r3, [r7, #12]
 8018072:	2b00      	cmp	r3, #0
 8018074:	d1ef      	bne.n	8018056 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8018076:	bf00      	nop
 8018078:	3714      	adds	r7, #20
 801807a:	46bd      	mov	sp, r7
 801807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018080:	4770      	bx	lr
 8018082:	bf00      	nop
 8018084:	20008954 	.word	0x20008954

08018088 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8018088:	b580      	push	{r7, lr}
 801808a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801808c:	4b20      	ldr	r3, [pc, #128]	; (8018110 <dhcp_inc_pcb_refcount+0x88>)
 801808e:	781b      	ldrb	r3, [r3, #0]
 8018090:	2b00      	cmp	r3, #0
 8018092:	d133      	bne.n	80180fc <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8018094:	4b1f      	ldr	r3, [pc, #124]	; (8018114 <dhcp_inc_pcb_refcount+0x8c>)
 8018096:	681b      	ldr	r3, [r3, #0]
 8018098:	2b00      	cmp	r3, #0
 801809a:	d005      	beq.n	80180a8 <dhcp_inc_pcb_refcount+0x20>
 801809c:	4b1e      	ldr	r3, [pc, #120]	; (8018118 <dhcp_inc_pcb_refcount+0x90>)
 801809e:	22e5      	movs	r2, #229	; 0xe5
 80180a0:	491e      	ldr	r1, [pc, #120]	; (801811c <dhcp_inc_pcb_refcount+0x94>)
 80180a2:	481f      	ldr	r0, [pc, #124]	; (8018120 <dhcp_inc_pcb_refcount+0x98>)
 80180a4:	f007 fbe0 	bl	801f868 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80180a8:	f7ff ff9a 	bl	8017fe0 <udp_new>
 80180ac:	4603      	mov	r3, r0
 80180ae:	4a19      	ldr	r2, [pc, #100]	; (8018114 <dhcp_inc_pcb_refcount+0x8c>)
 80180b0:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80180b2:	4b18      	ldr	r3, [pc, #96]	; (8018114 <dhcp_inc_pcb_refcount+0x8c>)
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	d102      	bne.n	80180c0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80180ba:	f04f 33ff 	mov.w	r3, #4294967295
 80180be:	e024      	b.n	801810a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80180c0:	4b14      	ldr	r3, [pc, #80]	; (8018114 <dhcp_inc_pcb_refcount+0x8c>)
 80180c2:	681b      	ldr	r3, [r3, #0]
 80180c4:	7a5a      	ldrb	r2, [r3, #9]
 80180c6:	4b13      	ldr	r3, [pc, #76]	; (8018114 <dhcp_inc_pcb_refcount+0x8c>)
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	f042 0220 	orr.w	r2, r2, #32
 80180ce:	b2d2      	uxtb	r2, r2
 80180d0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80180d2:	4b10      	ldr	r3, [pc, #64]	; (8018114 <dhcp_inc_pcb_refcount+0x8c>)
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	2244      	movs	r2, #68	; 0x44
 80180d8:	4912      	ldr	r1, [pc, #72]	; (8018124 <dhcp_inc_pcb_refcount+0x9c>)
 80180da:	4618      	mov	r0, r3
 80180dc:	f7ff fe0e 	bl	8017cfc <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80180e0:	4b0c      	ldr	r3, [pc, #48]	; (8018114 <dhcp_inc_pcb_refcount+0x8c>)
 80180e2:	681b      	ldr	r3, [r3, #0]
 80180e4:	2243      	movs	r2, #67	; 0x43
 80180e6:	490f      	ldr	r1, [pc, #60]	; (8018124 <dhcp_inc_pcb_refcount+0x9c>)
 80180e8:	4618      	mov	r0, r3
 80180ea:	f7ff fea9 	bl	8017e40 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80180ee:	4b09      	ldr	r3, [pc, #36]	; (8018114 <dhcp_inc_pcb_refcount+0x8c>)
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	2200      	movs	r2, #0
 80180f4:	490c      	ldr	r1, [pc, #48]	; (8018128 <dhcp_inc_pcb_refcount+0xa0>)
 80180f6:	4618      	mov	r0, r3
 80180f8:	f7ff ff10 	bl	8017f1c <udp_recv>
  }

  dhcp_pcb_refcount++;
 80180fc:	4b04      	ldr	r3, [pc, #16]	; (8018110 <dhcp_inc_pcb_refcount+0x88>)
 80180fe:	781b      	ldrb	r3, [r3, #0]
 8018100:	3301      	adds	r3, #1
 8018102:	b2da      	uxtb	r2, r3
 8018104:	4b02      	ldr	r3, [pc, #8]	; (8018110 <dhcp_inc_pcb_refcount+0x88>)
 8018106:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8018108:	2300      	movs	r3, #0
}
 801810a:	4618      	mov	r0, r3
 801810c:	bd80      	pop	{r7, pc}
 801810e:	bf00      	nop
 8018110:	20001960 	.word	0x20001960
 8018114:	2000195c 	.word	0x2000195c
 8018118:	08024cb4 	.word	0x08024cb4
 801811c:	08024cec 	.word	0x08024cec
 8018120:	08024d14 	.word	0x08024d14
 8018124:	08025ac4 	.word	0x08025ac4
 8018128:	08019a5d 	.word	0x08019a5d

0801812c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801812c:	b580      	push	{r7, lr}
 801812e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8018130:	4b0e      	ldr	r3, [pc, #56]	; (801816c <dhcp_dec_pcb_refcount+0x40>)
 8018132:	781b      	ldrb	r3, [r3, #0]
 8018134:	2b00      	cmp	r3, #0
 8018136:	d105      	bne.n	8018144 <dhcp_dec_pcb_refcount+0x18>
 8018138:	4b0d      	ldr	r3, [pc, #52]	; (8018170 <dhcp_dec_pcb_refcount+0x44>)
 801813a:	22ff      	movs	r2, #255	; 0xff
 801813c:	490d      	ldr	r1, [pc, #52]	; (8018174 <dhcp_dec_pcb_refcount+0x48>)
 801813e:	480e      	ldr	r0, [pc, #56]	; (8018178 <dhcp_dec_pcb_refcount+0x4c>)
 8018140:	f007 fb92 	bl	801f868 <iprintf>
  dhcp_pcb_refcount--;
 8018144:	4b09      	ldr	r3, [pc, #36]	; (801816c <dhcp_dec_pcb_refcount+0x40>)
 8018146:	781b      	ldrb	r3, [r3, #0]
 8018148:	3b01      	subs	r3, #1
 801814a:	b2da      	uxtb	r2, r3
 801814c:	4b07      	ldr	r3, [pc, #28]	; (801816c <dhcp_dec_pcb_refcount+0x40>)
 801814e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8018150:	4b06      	ldr	r3, [pc, #24]	; (801816c <dhcp_dec_pcb_refcount+0x40>)
 8018152:	781b      	ldrb	r3, [r3, #0]
 8018154:	2b00      	cmp	r3, #0
 8018156:	d107      	bne.n	8018168 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8018158:	4b08      	ldr	r3, [pc, #32]	; (801817c <dhcp_dec_pcb_refcount+0x50>)
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	4618      	mov	r0, r3
 801815e:	f7ff fefd 	bl	8017f5c <udp_remove>
    dhcp_pcb = NULL;
 8018162:	4b06      	ldr	r3, [pc, #24]	; (801817c <dhcp_dec_pcb_refcount+0x50>)
 8018164:	2200      	movs	r2, #0
 8018166:	601a      	str	r2, [r3, #0]
  }
}
 8018168:	bf00      	nop
 801816a:	bd80      	pop	{r7, pc}
 801816c:	20001960 	.word	0x20001960
 8018170:	08024cb4 	.word	0x08024cb4
 8018174:	08024d3c 	.word	0x08024d3c
 8018178:	08024d14 	.word	0x08024d14
 801817c:	2000195c 	.word	0x2000195c

08018180 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8018180:	b580      	push	{r7, lr}
 8018182:	b084      	sub	sp, #16
 8018184:	af00      	add	r7, sp, #0
 8018186:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801818c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801818e:	210c      	movs	r1, #12
 8018190:	68f8      	ldr	r0, [r7, #12]
 8018192:	f001 f875 	bl	8019280 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8018196:	4b06      	ldr	r3, [pc, #24]	; (80181b0 <dhcp_handle_nak+0x30>)
 8018198:	4a05      	ldr	r2, [pc, #20]	; (80181b0 <dhcp_handle_nak+0x30>)
 801819a:	4905      	ldr	r1, [pc, #20]	; (80181b0 <dhcp_handle_nak+0x30>)
 801819c:	6878      	ldr	r0, [r7, #4]
 801819e:	f7f7 fe6f 	bl	800fe80 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80181a2:	6878      	ldr	r0, [r7, #4]
 80181a4:	f000 fc68 	bl	8018a78 <dhcp_discover>
}
 80181a8:	bf00      	nop
 80181aa:	3710      	adds	r7, #16
 80181ac:	46bd      	mov	sp, r7
 80181ae:	bd80      	pop	{r7, pc}
 80181b0:	08025ac4 	.word	0x08025ac4

080181b4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80181b4:	b580      	push	{r7, lr}
 80181b6:	b084      	sub	sp, #16
 80181b8:	af00      	add	r7, sp, #0
 80181ba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181c0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80181c2:	2108      	movs	r1, #8
 80181c4:	68f8      	ldr	r0, [r7, #12]
 80181c6:	f001 f85b 	bl	8019280 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80181ca:	68fb      	ldr	r3, [r7, #12]
 80181cc:	331c      	adds	r3, #28
 80181ce:	2200      	movs	r2, #0
 80181d0:	4619      	mov	r1, r3
 80181d2:	6878      	ldr	r0, [r7, #4]
 80181d4:	f002 fb8c 	bl	801a8f0 <etharp_query>
 80181d8:	4603      	mov	r3, r0
 80181da:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80181dc:	68fb      	ldr	r3, [r7, #12]
 80181de:	799b      	ldrb	r3, [r3, #6]
 80181e0:	2bff      	cmp	r3, #255	; 0xff
 80181e2:	d005      	beq.n	80181f0 <dhcp_check+0x3c>
    dhcp->tries++;
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	799b      	ldrb	r3, [r3, #6]
 80181e8:	3301      	adds	r3, #1
 80181ea:	b2da      	uxtb	r2, r3
 80181ec:	68fb      	ldr	r3, [r7, #12]
 80181ee:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80181f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80181f4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80181f6:	893b      	ldrh	r3, [r7, #8]
 80181f8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80181fc:	4a06      	ldr	r2, [pc, #24]	; (8018218 <dhcp_check+0x64>)
 80181fe:	fb82 1203 	smull	r1, r2, r2, r3
 8018202:	1152      	asrs	r2, r2, #5
 8018204:	17db      	asrs	r3, r3, #31
 8018206:	1ad3      	subs	r3, r2, r3
 8018208:	b29a      	uxth	r2, r3
 801820a:	68fb      	ldr	r3, [r7, #12]
 801820c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801820e:	bf00      	nop
 8018210:	3710      	adds	r7, #16
 8018212:	46bd      	mov	sp, r7
 8018214:	bd80      	pop	{r7, pc}
 8018216:	bf00      	nop
 8018218:	10624dd3 	.word	0x10624dd3

0801821c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801821c:	b580      	push	{r7, lr}
 801821e:	b084      	sub	sp, #16
 8018220:	af00      	add	r7, sp, #0
 8018222:	6078      	str	r0, [r7, #4]
 8018224:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801822a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801822c:	4b0c      	ldr	r3, [pc, #48]	; (8018260 <dhcp_handle_offer+0x44>)
 801822e:	789b      	ldrb	r3, [r3, #2]
 8018230:	2b00      	cmp	r3, #0
 8018232:	d011      	beq.n	8018258 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8018234:	68fb      	ldr	r3, [r7, #12]
 8018236:	2200      	movs	r2, #0
 8018238:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801823a:	4b0a      	ldr	r3, [pc, #40]	; (8018264 <dhcp_handle_offer+0x48>)
 801823c:	689b      	ldr	r3, [r3, #8]
 801823e:	4618      	mov	r0, r3
 8018240:	f7f6 fc9b 	bl	800eb7a <lwip_htonl>
 8018244:	4602      	mov	r2, r0
 8018246:	68fb      	ldr	r3, [r7, #12]
 8018248:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801824a:	683b      	ldr	r3, [r7, #0]
 801824c:	691a      	ldr	r2, [r3, #16]
 801824e:	68fb      	ldr	r3, [r7, #12]
 8018250:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8018252:	6878      	ldr	r0, [r7, #4]
 8018254:	f000 f808 	bl	8018268 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8018258:	bf00      	nop
 801825a:	3710      	adds	r7, #16
 801825c:	46bd      	mov	sp, r7
 801825e:	bd80      	pop	{r7, pc}
 8018260:	20008958 	.word	0x20008958
 8018264:	20008964 	.word	0x20008964

08018268 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8018268:	b5b0      	push	{r4, r5, r7, lr}
 801826a:	b08a      	sub	sp, #40	; 0x28
 801826c:	af02      	add	r7, sp, #8
 801826e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	2b00      	cmp	r3, #0
 8018274:	d109      	bne.n	801828a <dhcp_select+0x22>
 8018276:	4b71      	ldr	r3, [pc, #452]	; (801843c <dhcp_select+0x1d4>)
 8018278:	f240 1277 	movw	r2, #375	; 0x177
 801827c:	4970      	ldr	r1, [pc, #448]	; (8018440 <dhcp_select+0x1d8>)
 801827e:	4871      	ldr	r0, [pc, #452]	; (8018444 <dhcp_select+0x1dc>)
 8018280:	f007 faf2 	bl	801f868 <iprintf>
 8018284:	f06f 030f 	mvn.w	r3, #15
 8018288:	e0d3      	b.n	8018432 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801828e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8018290:	69bb      	ldr	r3, [r7, #24]
 8018292:	2b00      	cmp	r3, #0
 8018294:	d109      	bne.n	80182aa <dhcp_select+0x42>
 8018296:	4b69      	ldr	r3, [pc, #420]	; (801843c <dhcp_select+0x1d4>)
 8018298:	f240 1279 	movw	r2, #377	; 0x179
 801829c:	496a      	ldr	r1, [pc, #424]	; (8018448 <dhcp_select+0x1e0>)
 801829e:	4869      	ldr	r0, [pc, #420]	; (8018444 <dhcp_select+0x1dc>)
 80182a0:	f007 fae2 	bl	801f868 <iprintf>
 80182a4:	f06f 0305 	mvn.w	r3, #5
 80182a8:	e0c3      	b.n	8018432 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80182aa:	2101      	movs	r1, #1
 80182ac:	69b8      	ldr	r0, [r7, #24]
 80182ae:	f000 ffe7 	bl	8019280 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80182b2:	f107 030c 	add.w	r3, r7, #12
 80182b6:	2203      	movs	r2, #3
 80182b8:	69b9      	ldr	r1, [r7, #24]
 80182ba:	6878      	ldr	r0, [r7, #4]
 80182bc:	f001 fc9c 	bl	8019bf8 <dhcp_create_msg>
 80182c0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80182c2:	697b      	ldr	r3, [r7, #20]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	f000 8085 	beq.w	80183d4 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80182ca:	697b      	ldr	r3, [r7, #20]
 80182cc:	685b      	ldr	r3, [r3, #4]
 80182ce:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80182d0:	89b8      	ldrh	r0, [r7, #12]
 80182d2:	693b      	ldr	r3, [r7, #16]
 80182d4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80182d8:	2302      	movs	r3, #2
 80182da:	2239      	movs	r2, #57	; 0x39
 80182dc:	f000 ffea 	bl	80192b4 <dhcp_option>
 80182e0:	4603      	mov	r3, r0
 80182e2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80182e4:	89b8      	ldrh	r0, [r7, #12]
 80182e6:	693b      	ldr	r3, [r7, #16]
 80182e8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80182f0:	461a      	mov	r2, r3
 80182f2:	f001 f839 	bl	8019368 <dhcp_option_short>
 80182f6:	4603      	mov	r3, r0
 80182f8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80182fa:	89b8      	ldrh	r0, [r7, #12]
 80182fc:	693b      	ldr	r3, [r7, #16]
 80182fe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018302:	2304      	movs	r3, #4
 8018304:	2232      	movs	r2, #50	; 0x32
 8018306:	f000 ffd5 	bl	80192b4 <dhcp_option>
 801830a:	4603      	mov	r3, r0
 801830c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801830e:	89bc      	ldrh	r4, [r7, #12]
 8018310:	693b      	ldr	r3, [r7, #16]
 8018312:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8018316:	69bb      	ldr	r3, [r7, #24]
 8018318:	69db      	ldr	r3, [r3, #28]
 801831a:	4618      	mov	r0, r3
 801831c:	f7f6 fc2d 	bl	800eb7a <lwip_htonl>
 8018320:	4603      	mov	r3, r0
 8018322:	461a      	mov	r2, r3
 8018324:	4629      	mov	r1, r5
 8018326:	4620      	mov	r0, r4
 8018328:	f001 f850 	bl	80193cc <dhcp_option_long>
 801832c:	4603      	mov	r3, r0
 801832e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8018330:	89b8      	ldrh	r0, [r7, #12]
 8018332:	693b      	ldr	r3, [r7, #16]
 8018334:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018338:	2304      	movs	r3, #4
 801833a:	2236      	movs	r2, #54	; 0x36
 801833c:	f000 ffba 	bl	80192b4 <dhcp_option>
 8018340:	4603      	mov	r3, r0
 8018342:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8018344:	89bc      	ldrh	r4, [r7, #12]
 8018346:	693b      	ldr	r3, [r7, #16]
 8018348:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801834c:	69bb      	ldr	r3, [r7, #24]
 801834e:	699b      	ldr	r3, [r3, #24]
 8018350:	4618      	mov	r0, r3
 8018352:	f7f6 fc12 	bl	800eb7a <lwip_htonl>
 8018356:	4603      	mov	r3, r0
 8018358:	461a      	mov	r2, r3
 801835a:	4629      	mov	r1, r5
 801835c:	4620      	mov	r0, r4
 801835e:	f001 f835 	bl	80193cc <dhcp_option_long>
 8018362:	4603      	mov	r3, r0
 8018364:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018366:	89b8      	ldrh	r0, [r7, #12]
 8018368:	693b      	ldr	r3, [r7, #16]
 801836a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801836e:	2304      	movs	r3, #4
 8018370:	2237      	movs	r2, #55	; 0x37
 8018372:	f000 ff9f 	bl	80192b4 <dhcp_option>
 8018376:	4603      	mov	r3, r0
 8018378:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801837a:	2300      	movs	r3, #0
 801837c:	77bb      	strb	r3, [r7, #30]
 801837e:	e00e      	b.n	801839e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8018380:	89b8      	ldrh	r0, [r7, #12]
 8018382:	693b      	ldr	r3, [r7, #16]
 8018384:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018388:	7fbb      	ldrb	r3, [r7, #30]
 801838a:	4a30      	ldr	r2, [pc, #192]	; (801844c <dhcp_select+0x1e4>)
 801838c:	5cd3      	ldrb	r3, [r2, r3]
 801838e:	461a      	mov	r2, r3
 8018390:	f000 ffc4 	bl	801931c <dhcp_option_byte>
 8018394:	4603      	mov	r3, r0
 8018396:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018398:	7fbb      	ldrb	r3, [r7, #30]
 801839a:	3301      	adds	r3, #1
 801839c:	77bb      	strb	r3, [r7, #30]
 801839e:	7fbb      	ldrb	r3, [r7, #30]
 80183a0:	2b03      	cmp	r3, #3
 80183a2:	d9ed      	bls.n	8018380 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80183a4:	89b8      	ldrh	r0, [r7, #12]
 80183a6:	693b      	ldr	r3, [r7, #16]
 80183a8:	33f0      	adds	r3, #240	; 0xf0
 80183aa:	697a      	ldr	r2, [r7, #20]
 80183ac:	4619      	mov	r1, r3
 80183ae:	f001 fcf9 	bl	8019da4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80183b2:	4b27      	ldr	r3, [pc, #156]	; (8018450 <dhcp_select+0x1e8>)
 80183b4:	6818      	ldr	r0, [r3, #0]
 80183b6:	4b27      	ldr	r3, [pc, #156]	; (8018454 <dhcp_select+0x1ec>)
 80183b8:	9301      	str	r3, [sp, #4]
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	9300      	str	r3, [sp, #0]
 80183be:	2343      	movs	r3, #67	; 0x43
 80183c0:	4a25      	ldr	r2, [pc, #148]	; (8018458 <dhcp_select+0x1f0>)
 80183c2:	6979      	ldr	r1, [r7, #20]
 80183c4:	f7ff fbb4 	bl	8017b30 <udp_sendto_if_src>
 80183c8:	4603      	mov	r3, r0
 80183ca:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80183cc:	6978      	ldr	r0, [r7, #20]
 80183ce:	f7f8 facf 	bl	8010970 <pbuf_free>
 80183d2:	e001      	b.n	80183d8 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80183d4:	23ff      	movs	r3, #255	; 0xff
 80183d6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80183d8:	69bb      	ldr	r3, [r7, #24]
 80183da:	799b      	ldrb	r3, [r3, #6]
 80183dc:	2bff      	cmp	r3, #255	; 0xff
 80183de:	d005      	beq.n	80183ec <dhcp_select+0x184>
    dhcp->tries++;
 80183e0:	69bb      	ldr	r3, [r7, #24]
 80183e2:	799b      	ldrb	r3, [r3, #6]
 80183e4:	3301      	adds	r3, #1
 80183e6:	b2da      	uxtb	r2, r3
 80183e8:	69bb      	ldr	r3, [r7, #24]
 80183ea:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80183ec:	69bb      	ldr	r3, [r7, #24]
 80183ee:	799b      	ldrb	r3, [r3, #6]
 80183f0:	2b05      	cmp	r3, #5
 80183f2:	d80d      	bhi.n	8018410 <dhcp_select+0x1a8>
 80183f4:	69bb      	ldr	r3, [r7, #24]
 80183f6:	799b      	ldrb	r3, [r3, #6]
 80183f8:	461a      	mov	r2, r3
 80183fa:	2301      	movs	r3, #1
 80183fc:	4093      	lsls	r3, r2
 80183fe:	b29b      	uxth	r3, r3
 8018400:	461a      	mov	r2, r3
 8018402:	0152      	lsls	r2, r2, #5
 8018404:	1ad2      	subs	r2, r2, r3
 8018406:	0092      	lsls	r2, r2, #2
 8018408:	4413      	add	r3, r2
 801840a:	00db      	lsls	r3, r3, #3
 801840c:	b29b      	uxth	r3, r3
 801840e:	e001      	b.n	8018414 <dhcp_select+0x1ac>
 8018410:	f64e 2360 	movw	r3, #60000	; 0xea60
 8018414:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018416:	89fb      	ldrh	r3, [r7, #14]
 8018418:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801841c:	4a0f      	ldr	r2, [pc, #60]	; (801845c <dhcp_select+0x1f4>)
 801841e:	fb82 1203 	smull	r1, r2, r2, r3
 8018422:	1152      	asrs	r2, r2, #5
 8018424:	17db      	asrs	r3, r3, #31
 8018426:	1ad3      	subs	r3, r2, r3
 8018428:	b29a      	uxth	r2, r3
 801842a:	69bb      	ldr	r3, [r7, #24]
 801842c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801842e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018432:	4618      	mov	r0, r3
 8018434:	3720      	adds	r7, #32
 8018436:	46bd      	mov	sp, r7
 8018438:	bdb0      	pop	{r4, r5, r7, pc}
 801843a:	bf00      	nop
 801843c:	08024cb4 	.word	0x08024cb4
 8018440:	08024d60 	.word	0x08024d60
 8018444:	08024d14 	.word	0x08024d14
 8018448:	08024d7c 	.word	0x08024d7c
 801844c:	1000001c 	.word	0x1000001c
 8018450:	2000195c 	.word	0x2000195c
 8018454:	08025ac4 	.word	0x08025ac4
 8018458:	08025ac8 	.word	0x08025ac8
 801845c:	10624dd3 	.word	0x10624dd3

08018460 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8018460:	b580      	push	{r7, lr}
 8018462:	b082      	sub	sp, #8
 8018464:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8018466:	4b27      	ldr	r3, [pc, #156]	; (8018504 <dhcp_coarse_tmr+0xa4>)
 8018468:	681b      	ldr	r3, [r3, #0]
 801846a:	607b      	str	r3, [r7, #4]
 801846c:	e042      	b.n	80184f4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018472:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8018474:	683b      	ldr	r3, [r7, #0]
 8018476:	2b00      	cmp	r3, #0
 8018478:	d039      	beq.n	80184ee <dhcp_coarse_tmr+0x8e>
 801847a:	683b      	ldr	r3, [r7, #0]
 801847c:	795b      	ldrb	r3, [r3, #5]
 801847e:	2b00      	cmp	r3, #0
 8018480:	d035      	beq.n	80184ee <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8018482:	683b      	ldr	r3, [r7, #0]
 8018484:	8a9b      	ldrh	r3, [r3, #20]
 8018486:	2b00      	cmp	r3, #0
 8018488:	d012      	beq.n	80184b0 <dhcp_coarse_tmr+0x50>
 801848a:	683b      	ldr	r3, [r7, #0]
 801848c:	8a5b      	ldrh	r3, [r3, #18]
 801848e:	3301      	adds	r3, #1
 8018490:	b29a      	uxth	r2, r3
 8018492:	683b      	ldr	r3, [r7, #0]
 8018494:	825a      	strh	r2, [r3, #18]
 8018496:	683b      	ldr	r3, [r7, #0]
 8018498:	8a5a      	ldrh	r2, [r3, #18]
 801849a:	683b      	ldr	r3, [r7, #0]
 801849c:	8a9b      	ldrh	r3, [r3, #20]
 801849e:	429a      	cmp	r2, r3
 80184a0:	d106      	bne.n	80184b0 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80184a2:	6878      	ldr	r0, [r7, #4]
 80184a4:	f000 fe52 	bl	801914c <dhcp_release_and_stop>
        dhcp_start(netif);
 80184a8:	6878      	ldr	r0, [r7, #4]
 80184aa:	f000 f989 	bl	80187c0 <dhcp_start>
 80184ae:	e01e      	b.n	80184ee <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80184b0:	683b      	ldr	r3, [r7, #0]
 80184b2:	8a1b      	ldrh	r3, [r3, #16]
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d00b      	beq.n	80184d0 <dhcp_coarse_tmr+0x70>
 80184b8:	683b      	ldr	r3, [r7, #0]
 80184ba:	8a1b      	ldrh	r3, [r3, #16]
 80184bc:	1e5a      	subs	r2, r3, #1
 80184be:	b291      	uxth	r1, r2
 80184c0:	683a      	ldr	r2, [r7, #0]
 80184c2:	8211      	strh	r1, [r2, #16]
 80184c4:	2b01      	cmp	r3, #1
 80184c6:	d103      	bne.n	80184d0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80184c8:	6878      	ldr	r0, [r7, #4]
 80184ca:	f000 f8c6 	bl	801865a <dhcp_t2_timeout>
 80184ce:	e00e      	b.n	80184ee <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80184d0:	683b      	ldr	r3, [r7, #0]
 80184d2:	89db      	ldrh	r3, [r3, #14]
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d00a      	beq.n	80184ee <dhcp_coarse_tmr+0x8e>
 80184d8:	683b      	ldr	r3, [r7, #0]
 80184da:	89db      	ldrh	r3, [r3, #14]
 80184dc:	1e5a      	subs	r2, r3, #1
 80184de:	b291      	uxth	r1, r2
 80184e0:	683a      	ldr	r2, [r7, #0]
 80184e2:	81d1      	strh	r1, [r2, #14]
 80184e4:	2b01      	cmp	r3, #1
 80184e6:	d102      	bne.n	80184ee <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80184e8:	6878      	ldr	r0, [r7, #4]
 80184ea:	f000 f888 	bl	80185fe <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	607b      	str	r3, [r7, #4]
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d1b9      	bne.n	801846e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80184fa:	bf00      	nop
 80184fc:	bf00      	nop
 80184fe:	3708      	adds	r7, #8
 8018500:	46bd      	mov	sp, r7
 8018502:	bd80      	pop	{r7, pc}
 8018504:	2000892c 	.word	0x2000892c

08018508 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8018508:	b580      	push	{r7, lr}
 801850a:	b082      	sub	sp, #8
 801850c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801850e:	4b16      	ldr	r3, [pc, #88]	; (8018568 <dhcp_fine_tmr+0x60>)
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	607b      	str	r3, [r7, #4]
 8018514:	e020      	b.n	8018558 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801851a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801851c:	683b      	ldr	r3, [r7, #0]
 801851e:	2b00      	cmp	r3, #0
 8018520:	d017      	beq.n	8018552 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8018522:	683b      	ldr	r3, [r7, #0]
 8018524:	891b      	ldrh	r3, [r3, #8]
 8018526:	2b01      	cmp	r3, #1
 8018528:	d906      	bls.n	8018538 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801852a:	683b      	ldr	r3, [r7, #0]
 801852c:	891b      	ldrh	r3, [r3, #8]
 801852e:	3b01      	subs	r3, #1
 8018530:	b29a      	uxth	r2, r3
 8018532:	683b      	ldr	r3, [r7, #0]
 8018534:	811a      	strh	r2, [r3, #8]
 8018536:	e00c      	b.n	8018552 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8018538:	683b      	ldr	r3, [r7, #0]
 801853a:	891b      	ldrh	r3, [r3, #8]
 801853c:	2b01      	cmp	r3, #1
 801853e:	d108      	bne.n	8018552 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8018540:	683b      	ldr	r3, [r7, #0]
 8018542:	891b      	ldrh	r3, [r3, #8]
 8018544:	3b01      	subs	r3, #1
 8018546:	b29a      	uxth	r2, r3
 8018548:	683b      	ldr	r3, [r7, #0]
 801854a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801854c:	6878      	ldr	r0, [r7, #4]
 801854e:	f000 f80d 	bl	801856c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	607b      	str	r3, [r7, #4]
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	2b00      	cmp	r3, #0
 801855c:	d1db      	bne.n	8018516 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801855e:	bf00      	nop
 8018560:	bf00      	nop
 8018562:	3708      	adds	r7, #8
 8018564:	46bd      	mov	sp, r7
 8018566:	bd80      	pop	{r7, pc}
 8018568:	2000892c 	.word	0x2000892c

0801856c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801856c:	b580      	push	{r7, lr}
 801856e:	b084      	sub	sp, #16
 8018570:	af00      	add	r7, sp, #0
 8018572:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018578:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801857a:	68fb      	ldr	r3, [r7, #12]
 801857c:	795b      	ldrb	r3, [r3, #5]
 801857e:	2b0c      	cmp	r3, #12
 8018580:	d003      	beq.n	801858a <dhcp_timeout+0x1e>
 8018582:	68fb      	ldr	r3, [r7, #12]
 8018584:	795b      	ldrb	r3, [r3, #5]
 8018586:	2b06      	cmp	r3, #6
 8018588:	d103      	bne.n	8018592 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801858a:	6878      	ldr	r0, [r7, #4]
 801858c:	f000 fa74 	bl	8018a78 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8018590:	e031      	b.n	80185f6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8018592:	68fb      	ldr	r3, [r7, #12]
 8018594:	795b      	ldrb	r3, [r3, #5]
 8018596:	2b01      	cmp	r3, #1
 8018598:	d10e      	bne.n	80185b8 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801859a:	68fb      	ldr	r3, [r7, #12]
 801859c:	799b      	ldrb	r3, [r3, #6]
 801859e:	2b05      	cmp	r3, #5
 80185a0:	d803      	bhi.n	80185aa <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80185a2:	6878      	ldr	r0, [r7, #4]
 80185a4:	f7ff fe60 	bl	8018268 <dhcp_select>
}
 80185a8:	e025      	b.n	80185f6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80185aa:	6878      	ldr	r0, [r7, #4]
 80185ac:	f000 fdce 	bl	801914c <dhcp_release_and_stop>
      dhcp_start(netif);
 80185b0:	6878      	ldr	r0, [r7, #4]
 80185b2:	f000 f905 	bl	80187c0 <dhcp_start>
}
 80185b6:	e01e      	b.n	80185f6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80185b8:	68fb      	ldr	r3, [r7, #12]
 80185ba:	795b      	ldrb	r3, [r3, #5]
 80185bc:	2b08      	cmp	r3, #8
 80185be:	d10b      	bne.n	80185d8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	799b      	ldrb	r3, [r3, #6]
 80185c4:	2b01      	cmp	r3, #1
 80185c6:	d803      	bhi.n	80185d0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80185c8:	6878      	ldr	r0, [r7, #4]
 80185ca:	f7ff fdf3 	bl	80181b4 <dhcp_check>
}
 80185ce:	e012      	b.n	80185f6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80185d0:	6878      	ldr	r0, [r7, #4]
 80185d2:	f000 faf3 	bl	8018bbc <dhcp_bind>
}
 80185d6:	e00e      	b.n	80185f6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80185d8:	68fb      	ldr	r3, [r7, #12]
 80185da:	795b      	ldrb	r3, [r3, #5]
 80185dc:	2b03      	cmp	r3, #3
 80185de:	d10a      	bne.n	80185f6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80185e0:	68fb      	ldr	r3, [r7, #12]
 80185e2:	799b      	ldrb	r3, [r3, #6]
 80185e4:	2b01      	cmp	r3, #1
 80185e6:	d803      	bhi.n	80185f0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80185e8:	6878      	ldr	r0, [r7, #4]
 80185ea:	f000 fcf9 	bl	8018fe0 <dhcp_reboot>
}
 80185ee:	e002      	b.n	80185f6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80185f0:	6878      	ldr	r0, [r7, #4]
 80185f2:	f000 fa41 	bl	8018a78 <dhcp_discover>
}
 80185f6:	bf00      	nop
 80185f8:	3710      	adds	r7, #16
 80185fa:	46bd      	mov	sp, r7
 80185fc:	bd80      	pop	{r7, pc}

080185fe <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80185fe:	b580      	push	{r7, lr}
 8018600:	b084      	sub	sp, #16
 8018602:	af00      	add	r7, sp, #0
 8018604:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801860a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801860c:	68fb      	ldr	r3, [r7, #12]
 801860e:	795b      	ldrb	r3, [r3, #5]
 8018610:	2b01      	cmp	r3, #1
 8018612:	d007      	beq.n	8018624 <dhcp_t1_timeout+0x26>
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	795b      	ldrb	r3, [r3, #5]
 8018618:	2b0a      	cmp	r3, #10
 801861a:	d003      	beq.n	8018624 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801861c:	68fb      	ldr	r3, [r7, #12]
 801861e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8018620:	2b05      	cmp	r3, #5
 8018622:	d116      	bne.n	8018652 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8018624:	6878      	ldr	r0, [r7, #4]
 8018626:	f000 fba3 	bl	8018d70 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	899b      	ldrh	r3, [r3, #12]
 801862e:	461a      	mov	r2, r3
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	8a5b      	ldrh	r3, [r3, #18]
 8018634:	1ad3      	subs	r3, r2, r3
 8018636:	2b01      	cmp	r3, #1
 8018638:	dd0b      	ble.n	8018652 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801863a:	68fb      	ldr	r3, [r7, #12]
 801863c:	899b      	ldrh	r3, [r3, #12]
 801863e:	461a      	mov	r2, r3
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	8a5b      	ldrh	r3, [r3, #18]
 8018644:	1ad3      	subs	r3, r2, r3
 8018646:	0fda      	lsrs	r2, r3, #31
 8018648:	4413      	add	r3, r2
 801864a:	105b      	asrs	r3, r3, #1
 801864c:	b29a      	uxth	r2, r3
 801864e:	68fb      	ldr	r3, [r7, #12]
 8018650:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8018652:	bf00      	nop
 8018654:	3710      	adds	r7, #16
 8018656:	46bd      	mov	sp, r7
 8018658:	bd80      	pop	{r7, pc}

0801865a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801865a:	b580      	push	{r7, lr}
 801865c:	b084      	sub	sp, #16
 801865e:	af00      	add	r7, sp, #0
 8018660:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018666:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	795b      	ldrb	r3, [r3, #5]
 801866c:	2b01      	cmp	r3, #1
 801866e:	d00b      	beq.n	8018688 <dhcp_t2_timeout+0x2e>
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	795b      	ldrb	r3, [r3, #5]
 8018674:	2b0a      	cmp	r3, #10
 8018676:	d007      	beq.n	8018688 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801867c:	2b05      	cmp	r3, #5
 801867e:	d003      	beq.n	8018688 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8018680:	68fb      	ldr	r3, [r7, #12]
 8018682:	795b      	ldrb	r3, [r3, #5]
 8018684:	2b04      	cmp	r3, #4
 8018686:	d116      	bne.n	80186b6 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8018688:	6878      	ldr	r0, [r7, #4]
 801868a:	f000 fc0d 	bl	8018ea8 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801868e:	68fb      	ldr	r3, [r7, #12]
 8018690:	8a9b      	ldrh	r3, [r3, #20]
 8018692:	461a      	mov	r2, r3
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	8a5b      	ldrh	r3, [r3, #18]
 8018698:	1ad3      	subs	r3, r2, r3
 801869a:	2b01      	cmp	r3, #1
 801869c:	dd0b      	ble.n	80186b6 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	8a9b      	ldrh	r3, [r3, #20]
 80186a2:	461a      	mov	r2, r3
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	8a5b      	ldrh	r3, [r3, #18]
 80186a8:	1ad3      	subs	r3, r2, r3
 80186aa:	0fda      	lsrs	r2, r3, #31
 80186ac:	4413      	add	r3, r2
 80186ae:	105b      	asrs	r3, r3, #1
 80186b0:	b29a      	uxth	r2, r3
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80186b6:	bf00      	nop
 80186b8:	3710      	adds	r7, #16
 80186ba:	46bd      	mov	sp, r7
 80186bc:	bd80      	pop	{r7, pc}
	...

080186c0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80186c0:	b580      	push	{r7, lr}
 80186c2:	b086      	sub	sp, #24
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	6078      	str	r0, [r7, #4]
 80186c8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186ce:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80186d0:	693b      	ldr	r3, [r7, #16]
 80186d2:	2200      	movs	r2, #0
 80186d4:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80186d6:	693b      	ldr	r3, [r7, #16]
 80186d8:	2200      	movs	r2, #0
 80186da:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80186dc:	4b36      	ldr	r3, [pc, #216]	; (80187b8 <dhcp_handle_ack+0xf8>)
 80186de:	78db      	ldrb	r3, [r3, #3]
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d003      	beq.n	80186ec <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80186e4:	4b35      	ldr	r3, [pc, #212]	; (80187bc <dhcp_handle_ack+0xfc>)
 80186e6:	68da      	ldr	r2, [r3, #12]
 80186e8:	693b      	ldr	r3, [r7, #16]
 80186ea:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80186ec:	4b32      	ldr	r3, [pc, #200]	; (80187b8 <dhcp_handle_ack+0xf8>)
 80186ee:	791b      	ldrb	r3, [r3, #4]
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d004      	beq.n	80186fe <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80186f4:	4b31      	ldr	r3, [pc, #196]	; (80187bc <dhcp_handle_ack+0xfc>)
 80186f6:	691a      	ldr	r2, [r3, #16]
 80186f8:	693b      	ldr	r3, [r7, #16]
 80186fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80186fc:	e004      	b.n	8018708 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80186fe:	693b      	ldr	r3, [r7, #16]
 8018700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018702:	085a      	lsrs	r2, r3, #1
 8018704:	693b      	ldr	r3, [r7, #16]
 8018706:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8018708:	4b2b      	ldr	r3, [pc, #172]	; (80187b8 <dhcp_handle_ack+0xf8>)
 801870a:	795b      	ldrb	r3, [r3, #5]
 801870c:	2b00      	cmp	r3, #0
 801870e:	d004      	beq.n	801871a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8018710:	4b2a      	ldr	r3, [pc, #168]	; (80187bc <dhcp_handle_ack+0xfc>)
 8018712:	695a      	ldr	r2, [r3, #20]
 8018714:	693b      	ldr	r3, [r7, #16]
 8018716:	631a      	str	r2, [r3, #48]	; 0x30
 8018718:	e007      	b.n	801872a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801871a:	693b      	ldr	r3, [r7, #16]
 801871c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801871e:	4613      	mov	r3, r2
 8018720:	00db      	lsls	r3, r3, #3
 8018722:	1a9b      	subs	r3, r3, r2
 8018724:	08da      	lsrs	r2, r3, #3
 8018726:	693b      	ldr	r3, [r7, #16]
 8018728:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801872a:	683b      	ldr	r3, [r7, #0]
 801872c:	691a      	ldr	r2, [r3, #16]
 801872e:	693b      	ldr	r3, [r7, #16]
 8018730:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8018732:	4b21      	ldr	r3, [pc, #132]	; (80187b8 <dhcp_handle_ack+0xf8>)
 8018734:	799b      	ldrb	r3, [r3, #6]
 8018736:	2b00      	cmp	r3, #0
 8018738:	d00b      	beq.n	8018752 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801873a:	4b20      	ldr	r3, [pc, #128]	; (80187bc <dhcp_handle_ack+0xfc>)
 801873c:	699b      	ldr	r3, [r3, #24]
 801873e:	4618      	mov	r0, r3
 8018740:	f7f6 fa1b 	bl	800eb7a <lwip_htonl>
 8018744:	4602      	mov	r2, r0
 8018746:	693b      	ldr	r3, [r7, #16]
 8018748:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801874a:	693b      	ldr	r3, [r7, #16]
 801874c:	2201      	movs	r2, #1
 801874e:	71da      	strb	r2, [r3, #7]
 8018750:	e002      	b.n	8018758 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8018752:	693b      	ldr	r3, [r7, #16]
 8018754:	2200      	movs	r2, #0
 8018756:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8018758:	4b17      	ldr	r3, [pc, #92]	; (80187b8 <dhcp_handle_ack+0xf8>)
 801875a:	79db      	ldrb	r3, [r3, #7]
 801875c:	2b00      	cmp	r3, #0
 801875e:	d007      	beq.n	8018770 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8018760:	4b16      	ldr	r3, [pc, #88]	; (80187bc <dhcp_handle_ack+0xfc>)
 8018762:	69db      	ldr	r3, [r3, #28]
 8018764:	4618      	mov	r0, r3
 8018766:	f7f6 fa08 	bl	800eb7a <lwip_htonl>
 801876a:	4602      	mov	r2, r0
 801876c:	693b      	ldr	r3, [r7, #16]
 801876e:	625a      	str	r2, [r3, #36]	; 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8018770:	2300      	movs	r3, #0
 8018772:	75fb      	strb	r3, [r7, #23]
 8018774:	e013      	b.n	801879e <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8018776:	7dfb      	ldrb	r3, [r7, #23]
 8018778:	3308      	adds	r3, #8
 801877a:	4a10      	ldr	r2, [pc, #64]	; (80187bc <dhcp_handle_ack+0xfc>)
 801877c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018780:	4618      	mov	r0, r3
 8018782:	f7f6 f9fa 	bl	800eb7a <lwip_htonl>
 8018786:	4603      	mov	r3, r0
 8018788:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 801878a:	f107 020c 	add.w	r2, r7, #12
 801878e:	7dfb      	ldrb	r3, [r7, #23]
 8018790:	4611      	mov	r1, r2
 8018792:	4618      	mov	r0, r3
 8018794:	f7f6 fa12 	bl	800ebbc <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8018798:	7dfb      	ldrb	r3, [r7, #23]
 801879a:	3301      	adds	r3, #1
 801879c:	75fb      	strb	r3, [r7, #23]
 801879e:	7dfb      	ldrb	r3, [r7, #23]
 80187a0:	2b01      	cmp	r3, #1
 80187a2:	d805      	bhi.n	80187b0 <dhcp_handle_ack+0xf0>
 80187a4:	7dfb      	ldrb	r3, [r7, #23]
 80187a6:	3308      	adds	r3, #8
 80187a8:	4a03      	ldr	r2, [pc, #12]	; (80187b8 <dhcp_handle_ack+0xf8>)
 80187aa:	5cd3      	ldrb	r3, [r2, r3]
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	d1e2      	bne.n	8018776 <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80187b0:	bf00      	nop
 80187b2:	3718      	adds	r7, #24
 80187b4:	46bd      	mov	sp, r7
 80187b6:	bd80      	pop	{r7, pc}
 80187b8:	20008958 	.word	0x20008958
 80187bc:	20008964 	.word	0x20008964

080187c0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80187c0:	b580      	push	{r7, lr}
 80187c2:	b084      	sub	sp, #16
 80187c4:	af00      	add	r7, sp, #0
 80187c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d109      	bne.n	80187e2 <dhcp_start+0x22>
 80187ce:	4b37      	ldr	r3, [pc, #220]	; (80188ac <dhcp_start+0xec>)
 80187d0:	f240 22e7 	movw	r2, #743	; 0x2e7
 80187d4:	4936      	ldr	r1, [pc, #216]	; (80188b0 <dhcp_start+0xf0>)
 80187d6:	4837      	ldr	r0, [pc, #220]	; (80188b4 <dhcp_start+0xf4>)
 80187d8:	f007 f846 	bl	801f868 <iprintf>
 80187dc:	f06f 030f 	mvn.w	r3, #15
 80187e0:	e060      	b.n	80188a4 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80187e8:	f003 0301 	and.w	r3, r3, #1
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d109      	bne.n	8018804 <dhcp_start+0x44>
 80187f0:	4b2e      	ldr	r3, [pc, #184]	; (80188ac <dhcp_start+0xec>)
 80187f2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80187f6:	4930      	ldr	r1, [pc, #192]	; (80188b8 <dhcp_start+0xf8>)
 80187f8:	482e      	ldr	r0, [pc, #184]	; (80188b4 <dhcp_start+0xf4>)
 80187fa:	f007 f835 	bl	801f868 <iprintf>
 80187fe:	f06f 030f 	mvn.w	r3, #15
 8018802:	e04f      	b.n	80188a4 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018808:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801880e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8018812:	d202      	bcs.n	801881a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8018814:	f04f 33ff 	mov.w	r3, #4294967295
 8018818:	e044      	b.n	80188a4 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801881a:	68fb      	ldr	r3, [r7, #12]
 801881c:	2b00      	cmp	r3, #0
 801881e:	d10d      	bne.n	801883c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8018820:	2034      	movs	r0, #52	; 0x34
 8018822:	f7f6 ffb7 	bl	800f794 <mem_malloc>
 8018826:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8018828:	68fb      	ldr	r3, [r7, #12]
 801882a:	2b00      	cmp	r3, #0
 801882c:	d102      	bne.n	8018834 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801882e:	f04f 33ff 	mov.w	r3, #4294967295
 8018832:	e037      	b.n	80188a4 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	68fa      	ldr	r2, [r7, #12]
 8018838:	625a      	str	r2, [r3, #36]	; 0x24
 801883a:	e005      	b.n	8018848 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801883c:	68fb      	ldr	r3, [r7, #12]
 801883e:	791b      	ldrb	r3, [r3, #4]
 8018840:	2b00      	cmp	r3, #0
 8018842:	d001      	beq.n	8018848 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8018844:	f7ff fc72 	bl	801812c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8018848:	2234      	movs	r2, #52	; 0x34
 801884a:	2100      	movs	r1, #0
 801884c:	68f8      	ldr	r0, [r7, #12]
 801884e:	f006 f995 	bl	801eb7c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8018852:	f7ff fc19 	bl	8018088 <dhcp_inc_pcb_refcount>
 8018856:	4603      	mov	r3, r0
 8018858:	2b00      	cmp	r3, #0
 801885a:	d002      	beq.n	8018862 <dhcp_start+0xa2>
    return ERR_MEM;
 801885c:	f04f 33ff 	mov.w	r3, #4294967295
 8018860:	e020      	b.n	80188a4 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8018862:	68fb      	ldr	r3, [r7, #12]
 8018864:	2201      	movs	r2, #1
 8018866:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801886e:	f003 0304 	and.w	r3, r3, #4
 8018872:	2b00      	cmp	r3, #0
 8018874:	d105      	bne.n	8018882 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8018876:	2102      	movs	r1, #2
 8018878:	68f8      	ldr	r0, [r7, #12]
 801887a:	f000 fd01 	bl	8019280 <dhcp_set_state>
    return ERR_OK;
 801887e:	2300      	movs	r3, #0
 8018880:	e010      	b.n	80188a4 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8018882:	6878      	ldr	r0, [r7, #4]
 8018884:	f000 f8f8 	bl	8018a78 <dhcp_discover>
 8018888:	4603      	mov	r3, r0
 801888a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801888c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8018890:	2b00      	cmp	r3, #0
 8018892:	d005      	beq.n	80188a0 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8018894:	6878      	ldr	r0, [r7, #4]
 8018896:	f000 fc59 	bl	801914c <dhcp_release_and_stop>
    return ERR_MEM;
 801889a:	f04f 33ff 	mov.w	r3, #4294967295
 801889e:	e001      	b.n	80188a4 <dhcp_start+0xe4>
  }
  return result;
 80188a0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80188a4:	4618      	mov	r0, r3
 80188a6:	3710      	adds	r7, #16
 80188a8:	46bd      	mov	sp, r7
 80188aa:	bd80      	pop	{r7, pc}
 80188ac:	08024cb4 	.word	0x08024cb4
 80188b0:	08024d98 	.word	0x08024d98
 80188b4:	08024d14 	.word	0x08024d14
 80188b8:	08024ddc 	.word	0x08024ddc

080188bc <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 80188bc:	b580      	push	{r7, lr}
 80188be:	b084      	sub	sp, #16
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188c8:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 80188ca:	68fb      	ldr	r3, [r7, #12]
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d025      	beq.n	801891c <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 80188d0:	68fb      	ldr	r3, [r7, #12]
 80188d2:	795b      	ldrb	r3, [r3, #5]
 80188d4:	2b0a      	cmp	r3, #10
 80188d6:	d008      	beq.n	80188ea <dhcp_network_changed+0x2e>
 80188d8:	2b0a      	cmp	r3, #10
 80188da:	dc0d      	bgt.n	80188f8 <dhcp_network_changed+0x3c>
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d01f      	beq.n	8018920 <dhcp_network_changed+0x64>
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	db09      	blt.n	80188f8 <dhcp_network_changed+0x3c>
 80188e4:	3b03      	subs	r3, #3
 80188e6:	2b02      	cmp	r3, #2
 80188e8:	d806      	bhi.n	80188f8 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	2200      	movs	r2, #0
 80188ee:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80188f0:	6878      	ldr	r0, [r7, #4]
 80188f2:	f000 fb75 	bl	8018fe0 <dhcp_reboot>
      break;
 80188f6:	e014      	b.n	8018922 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80188f8:	68fb      	ldr	r3, [r7, #12]
 80188fa:	795b      	ldrb	r3, [r3, #5]
 80188fc:	2b0c      	cmp	r3, #12
 80188fe:	d906      	bls.n	801890e <dhcp_network_changed+0x52>
 8018900:	4b09      	ldr	r3, [pc, #36]	; (8018928 <dhcp_network_changed+0x6c>)
 8018902:	f240 326d 	movw	r2, #877	; 0x36d
 8018906:	4909      	ldr	r1, [pc, #36]	; (801892c <dhcp_network_changed+0x70>)
 8018908:	4809      	ldr	r0, [pc, #36]	; (8018930 <dhcp_network_changed+0x74>)
 801890a:	f006 ffad 	bl	801f868 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	2200      	movs	r2, #0
 8018912:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8018914:	6878      	ldr	r0, [r7, #4]
 8018916:	f000 f8af 	bl	8018a78 <dhcp_discover>
      break;
 801891a:	e002      	b.n	8018922 <dhcp_network_changed+0x66>
    return;
 801891c:	bf00      	nop
 801891e:	e000      	b.n	8018922 <dhcp_network_changed+0x66>
      break;
 8018920:	bf00      	nop
  }
}
 8018922:	3710      	adds	r7, #16
 8018924:	46bd      	mov	sp, r7
 8018926:	bd80      	pop	{r7, pc}
 8018928:	08024cb4 	.word	0x08024cb4
 801892c:	08024e00 	.word	0x08024e00
 8018930:	08024d14 	.word	0x08024d14

08018934 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8018934:	b580      	push	{r7, lr}
 8018936:	b084      	sub	sp, #16
 8018938:	af00      	add	r7, sp, #0
 801893a:	6078      	str	r0, [r7, #4]
 801893c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	2b00      	cmp	r3, #0
 8018942:	d107      	bne.n	8018954 <dhcp_arp_reply+0x20>
 8018944:	4b0e      	ldr	r3, [pc, #56]	; (8018980 <dhcp_arp_reply+0x4c>)
 8018946:	f240 328b 	movw	r2, #907	; 0x38b
 801894a:	490e      	ldr	r1, [pc, #56]	; (8018984 <dhcp_arp_reply+0x50>)
 801894c:	480e      	ldr	r0, [pc, #56]	; (8018988 <dhcp_arp_reply+0x54>)
 801894e:	f006 ff8b 	bl	801f868 <iprintf>
 8018952:	e012      	b.n	801897a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018958:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801895a:	68fb      	ldr	r3, [r7, #12]
 801895c:	2b00      	cmp	r3, #0
 801895e:	d00c      	beq.n	801897a <dhcp_arp_reply+0x46>
 8018960:	68fb      	ldr	r3, [r7, #12]
 8018962:	795b      	ldrb	r3, [r3, #5]
 8018964:	2b08      	cmp	r3, #8
 8018966:	d108      	bne.n	801897a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8018968:	683b      	ldr	r3, [r7, #0]
 801896a:	681a      	ldr	r2, [r3, #0]
 801896c:	68fb      	ldr	r3, [r7, #12]
 801896e:	69db      	ldr	r3, [r3, #28]
 8018970:	429a      	cmp	r2, r3
 8018972:	d102      	bne.n	801897a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8018974:	6878      	ldr	r0, [r7, #4]
 8018976:	f000 f809 	bl	801898c <dhcp_decline>
    }
  }
}
 801897a:	3710      	adds	r7, #16
 801897c:	46bd      	mov	sp, r7
 801897e:	bd80      	pop	{r7, pc}
 8018980:	08024cb4 	.word	0x08024cb4
 8018984:	08024d98 	.word	0x08024d98
 8018988:	08024d14 	.word	0x08024d14

0801898c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801898c:	b5b0      	push	{r4, r5, r7, lr}
 801898e:	b08a      	sub	sp, #40	; 0x28
 8018990:	af02      	add	r7, sp, #8
 8018992:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018998:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801899a:	210c      	movs	r1, #12
 801899c:	69b8      	ldr	r0, [r7, #24]
 801899e:	f000 fc6f 	bl	8019280 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80189a2:	f107 030c 	add.w	r3, r7, #12
 80189a6:	2204      	movs	r2, #4
 80189a8:	69b9      	ldr	r1, [r7, #24]
 80189aa:	6878      	ldr	r0, [r7, #4]
 80189ac:	f001 f924 	bl	8019bf8 <dhcp_create_msg>
 80189b0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80189b2:	697b      	ldr	r3, [r7, #20]
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d035      	beq.n	8018a24 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80189b8:	697b      	ldr	r3, [r7, #20]
 80189ba:	685b      	ldr	r3, [r3, #4]
 80189bc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80189be:	89b8      	ldrh	r0, [r7, #12]
 80189c0:	693b      	ldr	r3, [r7, #16]
 80189c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80189c6:	2304      	movs	r3, #4
 80189c8:	2232      	movs	r2, #50	; 0x32
 80189ca:	f000 fc73 	bl	80192b4 <dhcp_option>
 80189ce:	4603      	mov	r3, r0
 80189d0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80189d2:	89bc      	ldrh	r4, [r7, #12]
 80189d4:	693b      	ldr	r3, [r7, #16]
 80189d6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80189da:	69bb      	ldr	r3, [r7, #24]
 80189dc:	69db      	ldr	r3, [r3, #28]
 80189de:	4618      	mov	r0, r3
 80189e0:	f7f6 f8cb 	bl	800eb7a <lwip_htonl>
 80189e4:	4603      	mov	r3, r0
 80189e6:	461a      	mov	r2, r3
 80189e8:	4629      	mov	r1, r5
 80189ea:	4620      	mov	r0, r4
 80189ec:	f000 fcee 	bl	80193cc <dhcp_option_long>
 80189f0:	4603      	mov	r3, r0
 80189f2:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80189f4:	89b8      	ldrh	r0, [r7, #12]
 80189f6:	693b      	ldr	r3, [r7, #16]
 80189f8:	33f0      	adds	r3, #240	; 0xf0
 80189fa:	697a      	ldr	r2, [r7, #20]
 80189fc:	4619      	mov	r1, r3
 80189fe:	f001 f9d1 	bl	8019da4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8018a02:	4b19      	ldr	r3, [pc, #100]	; (8018a68 <dhcp_decline+0xdc>)
 8018a04:	6818      	ldr	r0, [r3, #0]
 8018a06:	4b19      	ldr	r3, [pc, #100]	; (8018a6c <dhcp_decline+0xe0>)
 8018a08:	9301      	str	r3, [sp, #4]
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	9300      	str	r3, [sp, #0]
 8018a0e:	2343      	movs	r3, #67	; 0x43
 8018a10:	4a17      	ldr	r2, [pc, #92]	; (8018a70 <dhcp_decline+0xe4>)
 8018a12:	6979      	ldr	r1, [r7, #20]
 8018a14:	f7ff f88c 	bl	8017b30 <udp_sendto_if_src>
 8018a18:	4603      	mov	r3, r0
 8018a1a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8018a1c:	6978      	ldr	r0, [r7, #20]
 8018a1e:	f7f7 ffa7 	bl	8010970 <pbuf_free>
 8018a22:	e001      	b.n	8018a28 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8018a24:	23ff      	movs	r3, #255	; 0xff
 8018a26:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8018a28:	69bb      	ldr	r3, [r7, #24]
 8018a2a:	799b      	ldrb	r3, [r3, #6]
 8018a2c:	2bff      	cmp	r3, #255	; 0xff
 8018a2e:	d005      	beq.n	8018a3c <dhcp_decline+0xb0>
    dhcp->tries++;
 8018a30:	69bb      	ldr	r3, [r7, #24]
 8018a32:	799b      	ldrb	r3, [r3, #6]
 8018a34:	3301      	adds	r3, #1
 8018a36:	b2da      	uxtb	r2, r3
 8018a38:	69bb      	ldr	r3, [r7, #24]
 8018a3a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8018a3c:	f242 7310 	movw	r3, #10000	; 0x2710
 8018a40:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018a42:	89fb      	ldrh	r3, [r7, #14]
 8018a44:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8018a48:	4a0a      	ldr	r2, [pc, #40]	; (8018a74 <dhcp_decline+0xe8>)
 8018a4a:	fb82 1203 	smull	r1, r2, r2, r3
 8018a4e:	1152      	asrs	r2, r2, #5
 8018a50:	17db      	asrs	r3, r3, #31
 8018a52:	1ad3      	subs	r3, r2, r3
 8018a54:	b29a      	uxth	r2, r3
 8018a56:	69bb      	ldr	r3, [r7, #24]
 8018a58:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8018a5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018a5e:	4618      	mov	r0, r3
 8018a60:	3720      	adds	r7, #32
 8018a62:	46bd      	mov	sp, r7
 8018a64:	bdb0      	pop	{r4, r5, r7, pc}
 8018a66:	bf00      	nop
 8018a68:	2000195c 	.word	0x2000195c
 8018a6c:	08025ac4 	.word	0x08025ac4
 8018a70:	08025ac8 	.word	0x08025ac8
 8018a74:	10624dd3 	.word	0x10624dd3

08018a78 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8018a78:	b580      	push	{r7, lr}
 8018a7a:	b08a      	sub	sp, #40	; 0x28
 8018a7c:	af02      	add	r7, sp, #8
 8018a7e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a84:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8018a86:	2300      	movs	r3, #0
 8018a88:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8018a8a:	69bb      	ldr	r3, [r7, #24]
 8018a8c:	2200      	movs	r2, #0
 8018a8e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8018a90:	2106      	movs	r1, #6
 8018a92:	69b8      	ldr	r0, [r7, #24]
 8018a94:	f000 fbf4 	bl	8019280 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8018a98:	f107 0308 	add.w	r3, r7, #8
 8018a9c:	2201      	movs	r2, #1
 8018a9e:	69b9      	ldr	r1, [r7, #24]
 8018aa0:	6878      	ldr	r0, [r7, #4]
 8018aa2:	f001 f8a9 	bl	8019bf8 <dhcp_create_msg>
 8018aa6:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8018aa8:	693b      	ldr	r3, [r7, #16]
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d04b      	beq.n	8018b46 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018aae:	693b      	ldr	r3, [r7, #16]
 8018ab0:	685b      	ldr	r3, [r3, #4]
 8018ab2:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8018ab4:	8938      	ldrh	r0, [r7, #8]
 8018ab6:	68fb      	ldr	r3, [r7, #12]
 8018ab8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018abc:	2302      	movs	r3, #2
 8018abe:	2239      	movs	r2, #57	; 0x39
 8018ac0:	f000 fbf8 	bl	80192b4 <dhcp_option>
 8018ac4:	4603      	mov	r3, r0
 8018ac6:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8018ac8:	8938      	ldrh	r0, [r7, #8]
 8018aca:	68fb      	ldr	r3, [r7, #12]
 8018acc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018ad4:	461a      	mov	r2, r3
 8018ad6:	f000 fc47 	bl	8019368 <dhcp_option_short>
 8018ada:	4603      	mov	r3, r0
 8018adc:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018ade:	8938      	ldrh	r0, [r7, #8]
 8018ae0:	68fb      	ldr	r3, [r7, #12]
 8018ae2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018ae6:	2304      	movs	r3, #4
 8018ae8:	2237      	movs	r2, #55	; 0x37
 8018aea:	f000 fbe3 	bl	80192b4 <dhcp_option>
 8018aee:	4603      	mov	r3, r0
 8018af0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018af2:	2300      	movs	r3, #0
 8018af4:	77fb      	strb	r3, [r7, #31]
 8018af6:	e00e      	b.n	8018b16 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8018af8:	8938      	ldrh	r0, [r7, #8]
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018b00:	7ffb      	ldrb	r3, [r7, #31]
 8018b02:	4a29      	ldr	r2, [pc, #164]	; (8018ba8 <dhcp_discover+0x130>)
 8018b04:	5cd3      	ldrb	r3, [r2, r3]
 8018b06:	461a      	mov	r2, r3
 8018b08:	f000 fc08 	bl	801931c <dhcp_option_byte>
 8018b0c:	4603      	mov	r3, r0
 8018b0e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018b10:	7ffb      	ldrb	r3, [r7, #31]
 8018b12:	3301      	adds	r3, #1
 8018b14:	77fb      	strb	r3, [r7, #31]
 8018b16:	7ffb      	ldrb	r3, [r7, #31]
 8018b18:	2b03      	cmp	r3, #3
 8018b1a:	d9ed      	bls.n	8018af8 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018b1c:	8938      	ldrh	r0, [r7, #8]
 8018b1e:	68fb      	ldr	r3, [r7, #12]
 8018b20:	33f0      	adds	r3, #240	; 0xf0
 8018b22:	693a      	ldr	r2, [r7, #16]
 8018b24:	4619      	mov	r1, r3
 8018b26:	f001 f93d 	bl	8019da4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8018b2a:	4b20      	ldr	r3, [pc, #128]	; (8018bac <dhcp_discover+0x134>)
 8018b2c:	6818      	ldr	r0, [r3, #0]
 8018b2e:	4b20      	ldr	r3, [pc, #128]	; (8018bb0 <dhcp_discover+0x138>)
 8018b30:	9301      	str	r3, [sp, #4]
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	9300      	str	r3, [sp, #0]
 8018b36:	2343      	movs	r3, #67	; 0x43
 8018b38:	4a1e      	ldr	r2, [pc, #120]	; (8018bb4 <dhcp_discover+0x13c>)
 8018b3a:	6939      	ldr	r1, [r7, #16]
 8018b3c:	f7fe fff8 	bl	8017b30 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8018b40:	6938      	ldr	r0, [r7, #16]
 8018b42:	f7f7 ff15 	bl	8010970 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8018b46:	69bb      	ldr	r3, [r7, #24]
 8018b48:	799b      	ldrb	r3, [r3, #6]
 8018b4a:	2bff      	cmp	r3, #255	; 0xff
 8018b4c:	d005      	beq.n	8018b5a <dhcp_discover+0xe2>
    dhcp->tries++;
 8018b4e:	69bb      	ldr	r3, [r7, #24]
 8018b50:	799b      	ldrb	r3, [r3, #6]
 8018b52:	3301      	adds	r3, #1
 8018b54:	b2da      	uxtb	r2, r3
 8018b56:	69bb      	ldr	r3, [r7, #24]
 8018b58:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8018b5a:	69bb      	ldr	r3, [r7, #24]
 8018b5c:	799b      	ldrb	r3, [r3, #6]
 8018b5e:	2b05      	cmp	r3, #5
 8018b60:	d80d      	bhi.n	8018b7e <dhcp_discover+0x106>
 8018b62:	69bb      	ldr	r3, [r7, #24]
 8018b64:	799b      	ldrb	r3, [r3, #6]
 8018b66:	461a      	mov	r2, r3
 8018b68:	2301      	movs	r3, #1
 8018b6a:	4093      	lsls	r3, r2
 8018b6c:	b29b      	uxth	r3, r3
 8018b6e:	461a      	mov	r2, r3
 8018b70:	0152      	lsls	r2, r2, #5
 8018b72:	1ad2      	subs	r2, r2, r3
 8018b74:	0092      	lsls	r2, r2, #2
 8018b76:	4413      	add	r3, r2
 8018b78:	00db      	lsls	r3, r3, #3
 8018b7a:	b29b      	uxth	r3, r3
 8018b7c:	e001      	b.n	8018b82 <dhcp_discover+0x10a>
 8018b7e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8018b82:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018b84:	897b      	ldrh	r3, [r7, #10]
 8018b86:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8018b8a:	4a0b      	ldr	r2, [pc, #44]	; (8018bb8 <dhcp_discover+0x140>)
 8018b8c:	fb82 1203 	smull	r1, r2, r2, r3
 8018b90:	1152      	asrs	r2, r2, #5
 8018b92:	17db      	asrs	r3, r3, #31
 8018b94:	1ad3      	subs	r3, r2, r3
 8018b96:	b29a      	uxth	r2, r3
 8018b98:	69bb      	ldr	r3, [r7, #24]
 8018b9a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8018b9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018ba0:	4618      	mov	r0, r3
 8018ba2:	3720      	adds	r7, #32
 8018ba4:	46bd      	mov	sp, r7
 8018ba6:	bd80      	pop	{r7, pc}
 8018ba8:	1000001c 	.word	0x1000001c
 8018bac:	2000195c 	.word	0x2000195c
 8018bb0:	08025ac4 	.word	0x08025ac4
 8018bb4:	08025ac8 	.word	0x08025ac8
 8018bb8:	10624dd3 	.word	0x10624dd3

08018bbc <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8018bbc:	b580      	push	{r7, lr}
 8018bbe:	b088      	sub	sp, #32
 8018bc0:	af00      	add	r7, sp, #0
 8018bc2:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	d107      	bne.n	8018bda <dhcp_bind+0x1e>
 8018bca:	4b64      	ldr	r3, [pc, #400]	; (8018d5c <dhcp_bind+0x1a0>)
 8018bcc:	f240 4215 	movw	r2, #1045	; 0x415
 8018bd0:	4963      	ldr	r1, [pc, #396]	; (8018d60 <dhcp_bind+0x1a4>)
 8018bd2:	4864      	ldr	r0, [pc, #400]	; (8018d64 <dhcp_bind+0x1a8>)
 8018bd4:	f006 fe48 	bl	801f868 <iprintf>
 8018bd8:	e0bc      	b.n	8018d54 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bde:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8018be0:	69bb      	ldr	r3, [r7, #24]
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	d107      	bne.n	8018bf6 <dhcp_bind+0x3a>
 8018be6:	4b5d      	ldr	r3, [pc, #372]	; (8018d5c <dhcp_bind+0x1a0>)
 8018be8:	f240 4217 	movw	r2, #1047	; 0x417
 8018bec:	495e      	ldr	r1, [pc, #376]	; (8018d68 <dhcp_bind+0x1ac>)
 8018bee:	485d      	ldr	r0, [pc, #372]	; (8018d64 <dhcp_bind+0x1a8>)
 8018bf0:	f006 fe3a 	bl	801f868 <iprintf>
 8018bf4:	e0ae      	b.n	8018d54 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8018bf6:	69bb      	ldr	r3, [r7, #24]
 8018bf8:	2200      	movs	r2, #0
 8018bfa:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8018bfc:	69bb      	ldr	r3, [r7, #24]
 8018bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c04:	d019      	beq.n	8018c3a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8018c06:	69bb      	ldr	r3, [r7, #24]
 8018c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018c0a:	331e      	adds	r3, #30
 8018c0c:	4a57      	ldr	r2, [pc, #348]	; (8018d6c <dhcp_bind+0x1b0>)
 8018c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8018c12:	095b      	lsrs	r3, r3, #5
 8018c14:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8018c16:	69fb      	ldr	r3, [r7, #28]
 8018c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018c1c:	d302      	bcc.n	8018c24 <dhcp_bind+0x68>
      timeout = 0xffff;
 8018c1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018c22:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8018c24:	69fb      	ldr	r3, [r7, #28]
 8018c26:	b29a      	uxth	r2, r3
 8018c28:	69bb      	ldr	r3, [r7, #24]
 8018c2a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8018c2c:	69bb      	ldr	r3, [r7, #24]
 8018c2e:	8a9b      	ldrh	r3, [r3, #20]
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d102      	bne.n	8018c3a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8018c34:	69bb      	ldr	r3, [r7, #24]
 8018c36:	2201      	movs	r2, #1
 8018c38:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8018c3a:	69bb      	ldr	r3, [r7, #24]
 8018c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c42:	d01d      	beq.n	8018c80 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8018c44:	69bb      	ldr	r3, [r7, #24]
 8018c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c48:	331e      	adds	r3, #30
 8018c4a:	4a48      	ldr	r2, [pc, #288]	; (8018d6c <dhcp_bind+0x1b0>)
 8018c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8018c50:	095b      	lsrs	r3, r3, #5
 8018c52:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8018c54:	69fb      	ldr	r3, [r7, #28]
 8018c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018c5a:	d302      	bcc.n	8018c62 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8018c5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018c60:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8018c62:	69fb      	ldr	r3, [r7, #28]
 8018c64:	b29a      	uxth	r2, r3
 8018c66:	69bb      	ldr	r3, [r7, #24]
 8018c68:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8018c6a:	69bb      	ldr	r3, [r7, #24]
 8018c6c:	895b      	ldrh	r3, [r3, #10]
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d102      	bne.n	8018c78 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8018c72:	69bb      	ldr	r3, [r7, #24]
 8018c74:	2201      	movs	r2, #1
 8018c76:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8018c78:	69bb      	ldr	r3, [r7, #24]
 8018c7a:	895a      	ldrh	r2, [r3, #10]
 8018c7c:	69bb      	ldr	r3, [r7, #24]
 8018c7e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8018c80:	69bb      	ldr	r3, [r7, #24]
 8018c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c88:	d01d      	beq.n	8018cc6 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8018c8a:	69bb      	ldr	r3, [r7, #24]
 8018c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c8e:	331e      	adds	r3, #30
 8018c90:	4a36      	ldr	r2, [pc, #216]	; (8018d6c <dhcp_bind+0x1b0>)
 8018c92:	fba2 2303 	umull	r2, r3, r2, r3
 8018c96:	095b      	lsrs	r3, r3, #5
 8018c98:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8018c9a:	69fb      	ldr	r3, [r7, #28]
 8018c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018ca0:	d302      	bcc.n	8018ca8 <dhcp_bind+0xec>
      timeout = 0xffff;
 8018ca2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018ca6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8018ca8:	69fb      	ldr	r3, [r7, #28]
 8018caa:	b29a      	uxth	r2, r3
 8018cac:	69bb      	ldr	r3, [r7, #24]
 8018cae:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8018cb0:	69bb      	ldr	r3, [r7, #24]
 8018cb2:	899b      	ldrh	r3, [r3, #12]
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d102      	bne.n	8018cbe <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8018cb8:	69bb      	ldr	r3, [r7, #24]
 8018cba:	2201      	movs	r2, #1
 8018cbc:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8018cbe:	69bb      	ldr	r3, [r7, #24]
 8018cc0:	899a      	ldrh	r2, [r3, #12]
 8018cc2:	69bb      	ldr	r3, [r7, #24]
 8018cc4:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8018cc6:	69bb      	ldr	r3, [r7, #24]
 8018cc8:	895a      	ldrh	r2, [r3, #10]
 8018cca:	69bb      	ldr	r3, [r7, #24]
 8018ccc:	899b      	ldrh	r3, [r3, #12]
 8018cce:	429a      	cmp	r2, r3
 8018cd0:	d306      	bcc.n	8018ce0 <dhcp_bind+0x124>
 8018cd2:	69bb      	ldr	r3, [r7, #24]
 8018cd4:	899b      	ldrh	r3, [r3, #12]
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d002      	beq.n	8018ce0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8018cda:	69bb      	ldr	r3, [r7, #24]
 8018cdc:	2200      	movs	r2, #0
 8018cde:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8018ce0:	69bb      	ldr	r3, [r7, #24]
 8018ce2:	79db      	ldrb	r3, [r3, #7]
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	d003      	beq.n	8018cf0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8018ce8:	69bb      	ldr	r3, [r7, #24]
 8018cea:	6a1b      	ldr	r3, [r3, #32]
 8018cec:	613b      	str	r3, [r7, #16]
 8018cee:	e014      	b.n	8018d1a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8018cf0:	69bb      	ldr	r3, [r7, #24]
 8018cf2:	331c      	adds	r3, #28
 8018cf4:	781b      	ldrb	r3, [r3, #0]
 8018cf6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8018cf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	db02      	blt.n	8018d06 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8018d00:	23ff      	movs	r3, #255	; 0xff
 8018d02:	613b      	str	r3, [r7, #16]
 8018d04:	e009      	b.n	8018d1a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8018d06:	7dfb      	ldrb	r3, [r7, #23]
 8018d08:	2bbf      	cmp	r3, #191	; 0xbf
 8018d0a:	d903      	bls.n	8018d14 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8018d0c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8018d10:	613b      	str	r3, [r7, #16]
 8018d12:	e002      	b.n	8018d1a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8018d14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018d18:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8018d1a:	69bb      	ldr	r3, [r7, #24]
 8018d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d1e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8018d20:	68fb      	ldr	r3, [r7, #12]
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d108      	bne.n	8018d38 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8018d26:	69bb      	ldr	r3, [r7, #24]
 8018d28:	69da      	ldr	r2, [r3, #28]
 8018d2a:	693b      	ldr	r3, [r7, #16]
 8018d2c:	4013      	ands	r3, r2
 8018d2e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8018d30:	68fb      	ldr	r3, [r7, #12]
 8018d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8018d36:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8018d38:	210a      	movs	r1, #10
 8018d3a:	69b8      	ldr	r0, [r7, #24]
 8018d3c:	f000 faa0 	bl	8019280 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8018d40:	69bb      	ldr	r3, [r7, #24]
 8018d42:	f103 011c 	add.w	r1, r3, #28
 8018d46:	f107 030c 	add.w	r3, r7, #12
 8018d4a:	f107 0210 	add.w	r2, r7, #16
 8018d4e:	6878      	ldr	r0, [r7, #4]
 8018d50:	f7f7 f896 	bl	800fe80 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8018d54:	3720      	adds	r7, #32
 8018d56:	46bd      	mov	sp, r7
 8018d58:	bd80      	pop	{r7, pc}
 8018d5a:	bf00      	nop
 8018d5c:	08024cb4 	.word	0x08024cb4
 8018d60:	08024e14 	.word	0x08024e14
 8018d64:	08024d14 	.word	0x08024d14
 8018d68:	08024e30 	.word	0x08024e30
 8018d6c:	88888889 	.word	0x88888889

08018d70 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8018d70:	b580      	push	{r7, lr}
 8018d72:	b08a      	sub	sp, #40	; 0x28
 8018d74:	af02      	add	r7, sp, #8
 8018d76:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d7c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8018d7e:	2105      	movs	r1, #5
 8018d80:	69b8      	ldr	r0, [r7, #24]
 8018d82:	f000 fa7d 	bl	8019280 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8018d86:	f107 030c 	add.w	r3, r7, #12
 8018d8a:	2203      	movs	r2, #3
 8018d8c:	69b9      	ldr	r1, [r7, #24]
 8018d8e:	6878      	ldr	r0, [r7, #4]
 8018d90:	f000 ff32 	bl	8019bf8 <dhcp_create_msg>
 8018d94:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8018d96:	697b      	ldr	r3, [r7, #20]
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d04e      	beq.n	8018e3a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018d9c:	697b      	ldr	r3, [r7, #20]
 8018d9e:	685b      	ldr	r3, [r3, #4]
 8018da0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8018da2:	89b8      	ldrh	r0, [r7, #12]
 8018da4:	693b      	ldr	r3, [r7, #16]
 8018da6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018daa:	2302      	movs	r3, #2
 8018dac:	2239      	movs	r2, #57	; 0x39
 8018dae:	f000 fa81 	bl	80192b4 <dhcp_option>
 8018db2:	4603      	mov	r3, r0
 8018db4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8018db6:	89b8      	ldrh	r0, [r7, #12]
 8018db8:	693b      	ldr	r3, [r7, #16]
 8018dba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018dc2:	461a      	mov	r2, r3
 8018dc4:	f000 fad0 	bl	8019368 <dhcp_option_short>
 8018dc8:	4603      	mov	r3, r0
 8018dca:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018dcc:	89b8      	ldrh	r0, [r7, #12]
 8018dce:	693b      	ldr	r3, [r7, #16]
 8018dd0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018dd4:	2304      	movs	r3, #4
 8018dd6:	2237      	movs	r2, #55	; 0x37
 8018dd8:	f000 fa6c 	bl	80192b4 <dhcp_option>
 8018ddc:	4603      	mov	r3, r0
 8018dde:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018de0:	2300      	movs	r3, #0
 8018de2:	77bb      	strb	r3, [r7, #30]
 8018de4:	e00e      	b.n	8018e04 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8018de6:	89b8      	ldrh	r0, [r7, #12]
 8018de8:	693b      	ldr	r3, [r7, #16]
 8018dea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018dee:	7fbb      	ldrb	r3, [r7, #30]
 8018df0:	4a2a      	ldr	r2, [pc, #168]	; (8018e9c <dhcp_renew+0x12c>)
 8018df2:	5cd3      	ldrb	r3, [r2, r3]
 8018df4:	461a      	mov	r2, r3
 8018df6:	f000 fa91 	bl	801931c <dhcp_option_byte>
 8018dfa:	4603      	mov	r3, r0
 8018dfc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018dfe:	7fbb      	ldrb	r3, [r7, #30]
 8018e00:	3301      	adds	r3, #1
 8018e02:	77bb      	strb	r3, [r7, #30]
 8018e04:	7fbb      	ldrb	r3, [r7, #30]
 8018e06:	2b03      	cmp	r3, #3
 8018e08:	d9ed      	bls.n	8018de6 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018e0a:	89b8      	ldrh	r0, [r7, #12]
 8018e0c:	693b      	ldr	r3, [r7, #16]
 8018e0e:	33f0      	adds	r3, #240	; 0xf0
 8018e10:	697a      	ldr	r2, [r7, #20]
 8018e12:	4619      	mov	r1, r3
 8018e14:	f000 ffc6 	bl	8019da4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8018e18:	4b21      	ldr	r3, [pc, #132]	; (8018ea0 <dhcp_renew+0x130>)
 8018e1a:	6818      	ldr	r0, [r3, #0]
 8018e1c:	69bb      	ldr	r3, [r7, #24]
 8018e1e:	f103 0218 	add.w	r2, r3, #24
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	9300      	str	r3, [sp, #0]
 8018e26:	2343      	movs	r3, #67	; 0x43
 8018e28:	6979      	ldr	r1, [r7, #20]
 8018e2a:	f7fe fe0d 	bl	8017a48 <udp_sendto_if>
 8018e2e:	4603      	mov	r3, r0
 8018e30:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8018e32:	6978      	ldr	r0, [r7, #20]
 8018e34:	f7f7 fd9c 	bl	8010970 <pbuf_free>
 8018e38:	e001      	b.n	8018e3e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8018e3a:	23ff      	movs	r3, #255	; 0xff
 8018e3c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8018e3e:	69bb      	ldr	r3, [r7, #24]
 8018e40:	799b      	ldrb	r3, [r3, #6]
 8018e42:	2bff      	cmp	r3, #255	; 0xff
 8018e44:	d005      	beq.n	8018e52 <dhcp_renew+0xe2>
    dhcp->tries++;
 8018e46:	69bb      	ldr	r3, [r7, #24]
 8018e48:	799b      	ldrb	r3, [r3, #6]
 8018e4a:	3301      	adds	r3, #1
 8018e4c:	b2da      	uxtb	r2, r3
 8018e4e:	69bb      	ldr	r3, [r7, #24]
 8018e50:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8018e52:	69bb      	ldr	r3, [r7, #24]
 8018e54:	799b      	ldrb	r3, [r3, #6]
 8018e56:	2b09      	cmp	r3, #9
 8018e58:	d80a      	bhi.n	8018e70 <dhcp_renew+0x100>
 8018e5a:	69bb      	ldr	r3, [r7, #24]
 8018e5c:	799b      	ldrb	r3, [r3, #6]
 8018e5e:	b29b      	uxth	r3, r3
 8018e60:	461a      	mov	r2, r3
 8018e62:	0152      	lsls	r2, r2, #5
 8018e64:	1ad2      	subs	r2, r2, r3
 8018e66:	0092      	lsls	r2, r2, #2
 8018e68:	4413      	add	r3, r2
 8018e6a:	011b      	lsls	r3, r3, #4
 8018e6c:	b29b      	uxth	r3, r3
 8018e6e:	e001      	b.n	8018e74 <dhcp_renew+0x104>
 8018e70:	f644 6320 	movw	r3, #20000	; 0x4e20
 8018e74:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018e76:	89fb      	ldrh	r3, [r7, #14]
 8018e78:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8018e7c:	4a09      	ldr	r2, [pc, #36]	; (8018ea4 <dhcp_renew+0x134>)
 8018e7e:	fb82 1203 	smull	r1, r2, r2, r3
 8018e82:	1152      	asrs	r2, r2, #5
 8018e84:	17db      	asrs	r3, r3, #31
 8018e86:	1ad3      	subs	r3, r2, r3
 8018e88:	b29a      	uxth	r2, r3
 8018e8a:	69bb      	ldr	r3, [r7, #24]
 8018e8c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8018e8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018e92:	4618      	mov	r0, r3
 8018e94:	3720      	adds	r7, #32
 8018e96:	46bd      	mov	sp, r7
 8018e98:	bd80      	pop	{r7, pc}
 8018e9a:	bf00      	nop
 8018e9c:	1000001c 	.word	0x1000001c
 8018ea0:	2000195c 	.word	0x2000195c
 8018ea4:	10624dd3 	.word	0x10624dd3

08018ea8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8018ea8:	b580      	push	{r7, lr}
 8018eaa:	b08a      	sub	sp, #40	; 0x28
 8018eac:	af02      	add	r7, sp, #8
 8018eae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018eb4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8018eb6:	2104      	movs	r1, #4
 8018eb8:	69b8      	ldr	r0, [r7, #24]
 8018eba:	f000 f9e1 	bl	8019280 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8018ebe:	f107 030c 	add.w	r3, r7, #12
 8018ec2:	2203      	movs	r2, #3
 8018ec4:	69b9      	ldr	r1, [r7, #24]
 8018ec6:	6878      	ldr	r0, [r7, #4]
 8018ec8:	f000 fe96 	bl	8019bf8 <dhcp_create_msg>
 8018ecc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8018ece:	697b      	ldr	r3, [r7, #20]
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d04c      	beq.n	8018f6e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018ed4:	697b      	ldr	r3, [r7, #20]
 8018ed6:	685b      	ldr	r3, [r3, #4]
 8018ed8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8018eda:	89b8      	ldrh	r0, [r7, #12]
 8018edc:	693b      	ldr	r3, [r7, #16]
 8018ede:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018ee2:	2302      	movs	r3, #2
 8018ee4:	2239      	movs	r2, #57	; 0x39
 8018ee6:	f000 f9e5 	bl	80192b4 <dhcp_option>
 8018eea:	4603      	mov	r3, r0
 8018eec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8018eee:	89b8      	ldrh	r0, [r7, #12]
 8018ef0:	693b      	ldr	r3, [r7, #16]
 8018ef2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018efa:	461a      	mov	r2, r3
 8018efc:	f000 fa34 	bl	8019368 <dhcp_option_short>
 8018f00:	4603      	mov	r3, r0
 8018f02:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018f04:	89b8      	ldrh	r0, [r7, #12]
 8018f06:	693b      	ldr	r3, [r7, #16]
 8018f08:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018f0c:	2304      	movs	r3, #4
 8018f0e:	2237      	movs	r2, #55	; 0x37
 8018f10:	f000 f9d0 	bl	80192b4 <dhcp_option>
 8018f14:	4603      	mov	r3, r0
 8018f16:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018f18:	2300      	movs	r3, #0
 8018f1a:	77bb      	strb	r3, [r7, #30]
 8018f1c:	e00e      	b.n	8018f3c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8018f1e:	89b8      	ldrh	r0, [r7, #12]
 8018f20:	693b      	ldr	r3, [r7, #16]
 8018f22:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018f26:	7fbb      	ldrb	r3, [r7, #30]
 8018f28:	4a29      	ldr	r2, [pc, #164]	; (8018fd0 <dhcp_rebind+0x128>)
 8018f2a:	5cd3      	ldrb	r3, [r2, r3]
 8018f2c:	461a      	mov	r2, r3
 8018f2e:	f000 f9f5 	bl	801931c <dhcp_option_byte>
 8018f32:	4603      	mov	r3, r0
 8018f34:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018f36:	7fbb      	ldrb	r3, [r7, #30]
 8018f38:	3301      	adds	r3, #1
 8018f3a:	77bb      	strb	r3, [r7, #30]
 8018f3c:	7fbb      	ldrb	r3, [r7, #30]
 8018f3e:	2b03      	cmp	r3, #3
 8018f40:	d9ed      	bls.n	8018f1e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018f42:	89b8      	ldrh	r0, [r7, #12]
 8018f44:	693b      	ldr	r3, [r7, #16]
 8018f46:	33f0      	adds	r3, #240	; 0xf0
 8018f48:	697a      	ldr	r2, [r7, #20]
 8018f4a:	4619      	mov	r1, r3
 8018f4c:	f000 ff2a 	bl	8019da4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8018f50:	4b20      	ldr	r3, [pc, #128]	; (8018fd4 <dhcp_rebind+0x12c>)
 8018f52:	6818      	ldr	r0, [r3, #0]
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	9300      	str	r3, [sp, #0]
 8018f58:	2343      	movs	r3, #67	; 0x43
 8018f5a:	4a1f      	ldr	r2, [pc, #124]	; (8018fd8 <dhcp_rebind+0x130>)
 8018f5c:	6979      	ldr	r1, [r7, #20]
 8018f5e:	f7fe fd73 	bl	8017a48 <udp_sendto_if>
 8018f62:	4603      	mov	r3, r0
 8018f64:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8018f66:	6978      	ldr	r0, [r7, #20]
 8018f68:	f7f7 fd02 	bl	8010970 <pbuf_free>
 8018f6c:	e001      	b.n	8018f72 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8018f6e:	23ff      	movs	r3, #255	; 0xff
 8018f70:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8018f72:	69bb      	ldr	r3, [r7, #24]
 8018f74:	799b      	ldrb	r3, [r3, #6]
 8018f76:	2bff      	cmp	r3, #255	; 0xff
 8018f78:	d005      	beq.n	8018f86 <dhcp_rebind+0xde>
    dhcp->tries++;
 8018f7a:	69bb      	ldr	r3, [r7, #24]
 8018f7c:	799b      	ldrb	r3, [r3, #6]
 8018f7e:	3301      	adds	r3, #1
 8018f80:	b2da      	uxtb	r2, r3
 8018f82:	69bb      	ldr	r3, [r7, #24]
 8018f84:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8018f86:	69bb      	ldr	r3, [r7, #24]
 8018f88:	799b      	ldrb	r3, [r3, #6]
 8018f8a:	2b09      	cmp	r3, #9
 8018f8c:	d80a      	bhi.n	8018fa4 <dhcp_rebind+0xfc>
 8018f8e:	69bb      	ldr	r3, [r7, #24]
 8018f90:	799b      	ldrb	r3, [r3, #6]
 8018f92:	b29b      	uxth	r3, r3
 8018f94:	461a      	mov	r2, r3
 8018f96:	0152      	lsls	r2, r2, #5
 8018f98:	1ad2      	subs	r2, r2, r3
 8018f9a:	0092      	lsls	r2, r2, #2
 8018f9c:	4413      	add	r3, r2
 8018f9e:	00db      	lsls	r3, r3, #3
 8018fa0:	b29b      	uxth	r3, r3
 8018fa2:	e001      	b.n	8018fa8 <dhcp_rebind+0x100>
 8018fa4:	f242 7310 	movw	r3, #10000	; 0x2710
 8018fa8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018faa:	89fb      	ldrh	r3, [r7, #14]
 8018fac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8018fb0:	4a0a      	ldr	r2, [pc, #40]	; (8018fdc <dhcp_rebind+0x134>)
 8018fb2:	fb82 1203 	smull	r1, r2, r2, r3
 8018fb6:	1152      	asrs	r2, r2, #5
 8018fb8:	17db      	asrs	r3, r3, #31
 8018fba:	1ad3      	subs	r3, r2, r3
 8018fbc:	b29a      	uxth	r2, r3
 8018fbe:	69bb      	ldr	r3, [r7, #24]
 8018fc0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8018fc2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018fc6:	4618      	mov	r0, r3
 8018fc8:	3720      	adds	r7, #32
 8018fca:	46bd      	mov	sp, r7
 8018fcc:	bd80      	pop	{r7, pc}
 8018fce:	bf00      	nop
 8018fd0:	1000001c 	.word	0x1000001c
 8018fd4:	2000195c 	.word	0x2000195c
 8018fd8:	08025ac8 	.word	0x08025ac8
 8018fdc:	10624dd3 	.word	0x10624dd3

08018fe0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8018fe0:	b5b0      	push	{r4, r5, r7, lr}
 8018fe2:	b08a      	sub	sp, #40	; 0x28
 8018fe4:	af02      	add	r7, sp, #8
 8018fe6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fec:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8018fee:	2103      	movs	r1, #3
 8018ff0:	69b8      	ldr	r0, [r7, #24]
 8018ff2:	f000 f945 	bl	8019280 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8018ff6:	f107 030c 	add.w	r3, r7, #12
 8018ffa:	2203      	movs	r2, #3
 8018ffc:	69b9      	ldr	r1, [r7, #24]
 8018ffe:	6878      	ldr	r0, [r7, #4]
 8019000:	f000 fdfa 	bl	8019bf8 <dhcp_create_msg>
 8019004:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8019006:	697b      	ldr	r3, [r7, #20]
 8019008:	2b00      	cmp	r3, #0
 801900a:	d066      	beq.n	80190da <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801900c:	697b      	ldr	r3, [r7, #20]
 801900e:	685b      	ldr	r3, [r3, #4]
 8019010:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019012:	89b8      	ldrh	r0, [r7, #12]
 8019014:	693b      	ldr	r3, [r7, #16]
 8019016:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801901a:	2302      	movs	r3, #2
 801901c:	2239      	movs	r2, #57	; 0x39
 801901e:	f000 f949 	bl	80192b4 <dhcp_option>
 8019022:	4603      	mov	r3, r0
 8019024:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8019026:	89b8      	ldrh	r0, [r7, #12]
 8019028:	693b      	ldr	r3, [r7, #16]
 801902a:	33f0      	adds	r3, #240	; 0xf0
 801902c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8019030:	4619      	mov	r1, r3
 8019032:	f000 f999 	bl	8019368 <dhcp_option_short>
 8019036:	4603      	mov	r3, r0
 8019038:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801903a:	89b8      	ldrh	r0, [r7, #12]
 801903c:	693b      	ldr	r3, [r7, #16]
 801903e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019042:	2304      	movs	r3, #4
 8019044:	2232      	movs	r2, #50	; 0x32
 8019046:	f000 f935 	bl	80192b4 <dhcp_option>
 801904a:	4603      	mov	r3, r0
 801904c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801904e:	89bc      	ldrh	r4, [r7, #12]
 8019050:	693b      	ldr	r3, [r7, #16]
 8019052:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8019056:	69bb      	ldr	r3, [r7, #24]
 8019058:	69db      	ldr	r3, [r3, #28]
 801905a:	4618      	mov	r0, r3
 801905c:	f7f5 fd8d 	bl	800eb7a <lwip_htonl>
 8019060:	4603      	mov	r3, r0
 8019062:	461a      	mov	r2, r3
 8019064:	4629      	mov	r1, r5
 8019066:	4620      	mov	r0, r4
 8019068:	f000 f9b0 	bl	80193cc <dhcp_option_long>
 801906c:	4603      	mov	r3, r0
 801906e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019070:	89b8      	ldrh	r0, [r7, #12]
 8019072:	693b      	ldr	r3, [r7, #16]
 8019074:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019078:	2304      	movs	r3, #4
 801907a:	2237      	movs	r2, #55	; 0x37
 801907c:	f000 f91a 	bl	80192b4 <dhcp_option>
 8019080:	4603      	mov	r3, r0
 8019082:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019084:	2300      	movs	r3, #0
 8019086:	77bb      	strb	r3, [r7, #30]
 8019088:	e00e      	b.n	80190a8 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801908a:	89b8      	ldrh	r0, [r7, #12]
 801908c:	693b      	ldr	r3, [r7, #16]
 801908e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019092:	7fbb      	ldrb	r3, [r7, #30]
 8019094:	4a29      	ldr	r2, [pc, #164]	; (801913c <dhcp_reboot+0x15c>)
 8019096:	5cd3      	ldrb	r3, [r2, r3]
 8019098:	461a      	mov	r2, r3
 801909a:	f000 f93f 	bl	801931c <dhcp_option_byte>
 801909e:	4603      	mov	r3, r0
 80190a0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80190a2:	7fbb      	ldrb	r3, [r7, #30]
 80190a4:	3301      	adds	r3, #1
 80190a6:	77bb      	strb	r3, [r7, #30]
 80190a8:	7fbb      	ldrb	r3, [r7, #30]
 80190aa:	2b03      	cmp	r3, #3
 80190ac:	d9ed      	bls.n	801908a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80190ae:	89b8      	ldrh	r0, [r7, #12]
 80190b0:	693b      	ldr	r3, [r7, #16]
 80190b2:	33f0      	adds	r3, #240	; 0xf0
 80190b4:	697a      	ldr	r2, [r7, #20]
 80190b6:	4619      	mov	r1, r3
 80190b8:	f000 fe74 	bl	8019da4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80190bc:	4b20      	ldr	r3, [pc, #128]	; (8019140 <dhcp_reboot+0x160>)
 80190be:	6818      	ldr	r0, [r3, #0]
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	9300      	str	r3, [sp, #0]
 80190c4:	2343      	movs	r3, #67	; 0x43
 80190c6:	4a1f      	ldr	r2, [pc, #124]	; (8019144 <dhcp_reboot+0x164>)
 80190c8:	6979      	ldr	r1, [r7, #20]
 80190ca:	f7fe fcbd 	bl	8017a48 <udp_sendto_if>
 80190ce:	4603      	mov	r3, r0
 80190d0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80190d2:	6978      	ldr	r0, [r7, #20]
 80190d4:	f7f7 fc4c 	bl	8010970 <pbuf_free>
 80190d8:	e001      	b.n	80190de <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80190da:	23ff      	movs	r3, #255	; 0xff
 80190dc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80190de:	69bb      	ldr	r3, [r7, #24]
 80190e0:	799b      	ldrb	r3, [r3, #6]
 80190e2:	2bff      	cmp	r3, #255	; 0xff
 80190e4:	d005      	beq.n	80190f2 <dhcp_reboot+0x112>
    dhcp->tries++;
 80190e6:	69bb      	ldr	r3, [r7, #24]
 80190e8:	799b      	ldrb	r3, [r3, #6]
 80190ea:	3301      	adds	r3, #1
 80190ec:	b2da      	uxtb	r2, r3
 80190ee:	69bb      	ldr	r3, [r7, #24]
 80190f0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80190f2:	69bb      	ldr	r3, [r7, #24]
 80190f4:	799b      	ldrb	r3, [r3, #6]
 80190f6:	2b09      	cmp	r3, #9
 80190f8:	d80a      	bhi.n	8019110 <dhcp_reboot+0x130>
 80190fa:	69bb      	ldr	r3, [r7, #24]
 80190fc:	799b      	ldrb	r3, [r3, #6]
 80190fe:	b29b      	uxth	r3, r3
 8019100:	461a      	mov	r2, r3
 8019102:	0152      	lsls	r2, r2, #5
 8019104:	1ad2      	subs	r2, r2, r3
 8019106:	0092      	lsls	r2, r2, #2
 8019108:	4413      	add	r3, r2
 801910a:	00db      	lsls	r3, r3, #3
 801910c:	b29b      	uxth	r3, r3
 801910e:	e001      	b.n	8019114 <dhcp_reboot+0x134>
 8019110:	f242 7310 	movw	r3, #10000	; 0x2710
 8019114:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019116:	89fb      	ldrh	r3, [r7, #14]
 8019118:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801911c:	4a0a      	ldr	r2, [pc, #40]	; (8019148 <dhcp_reboot+0x168>)
 801911e:	fb82 1203 	smull	r1, r2, r2, r3
 8019122:	1152      	asrs	r2, r2, #5
 8019124:	17db      	asrs	r3, r3, #31
 8019126:	1ad3      	subs	r3, r2, r3
 8019128:	b29a      	uxth	r2, r3
 801912a:	69bb      	ldr	r3, [r7, #24]
 801912c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801912e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019132:	4618      	mov	r0, r3
 8019134:	3720      	adds	r7, #32
 8019136:	46bd      	mov	sp, r7
 8019138:	bdb0      	pop	{r4, r5, r7, pc}
 801913a:	bf00      	nop
 801913c:	1000001c 	.word	0x1000001c
 8019140:	2000195c 	.word	0x2000195c
 8019144:	08025ac8 	.word	0x08025ac8
 8019148:	10624dd3 	.word	0x10624dd3

0801914c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801914c:	b5b0      	push	{r4, r5, r7, lr}
 801914e:	b08a      	sub	sp, #40	; 0x28
 8019150:	af02      	add	r7, sp, #8
 8019152:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019158:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801915a:	69fb      	ldr	r3, [r7, #28]
 801915c:	2b00      	cmp	r3, #0
 801915e:	f000 8084 	beq.w	801926a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8019162:	69fb      	ldr	r3, [r7, #28]
 8019164:	795b      	ldrb	r3, [r3, #5]
 8019166:	2b00      	cmp	r3, #0
 8019168:	f000 8081 	beq.w	801926e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801916c:	69fb      	ldr	r3, [r7, #28]
 801916e:	699b      	ldr	r3, [r3, #24]
 8019170:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8019172:	69fb      	ldr	r3, [r7, #28]
 8019174:	2200      	movs	r2, #0
 8019176:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8019178:	69fb      	ldr	r3, [r7, #28]
 801917a:	2200      	movs	r2, #0
 801917c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801917e:	69fb      	ldr	r3, [r7, #28]
 8019180:	2200      	movs	r2, #0
 8019182:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8019184:	69fb      	ldr	r3, [r7, #28]
 8019186:	2200      	movs	r2, #0
 8019188:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801918a:	69fb      	ldr	r3, [r7, #28]
 801918c:	2200      	movs	r2, #0
 801918e:	631a      	str	r2, [r3, #48]	; 0x30
 8019190:	69fb      	ldr	r3, [r7, #28]
 8019192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019194:	69fb      	ldr	r3, [r7, #28]
 8019196:	62da      	str	r2, [r3, #44]	; 0x2c
 8019198:	69fb      	ldr	r3, [r7, #28]
 801919a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801919c:	69fb      	ldr	r3, [r7, #28]
 801919e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80191a0:	69fb      	ldr	r3, [r7, #28]
 80191a2:	2200      	movs	r2, #0
 80191a4:	829a      	strh	r2, [r3, #20]
 80191a6:	69fb      	ldr	r3, [r7, #28]
 80191a8:	8a9a      	ldrh	r2, [r3, #20]
 80191aa:	69fb      	ldr	r3, [r7, #28]
 80191ac:	825a      	strh	r2, [r3, #18]
 80191ae:	69fb      	ldr	r3, [r7, #28]
 80191b0:	8a5a      	ldrh	r2, [r3, #18]
 80191b2:	69fb      	ldr	r3, [r7, #28]
 80191b4:	821a      	strh	r2, [r3, #16]
 80191b6:	69fb      	ldr	r3, [r7, #28]
 80191b8:	8a1a      	ldrh	r2, [r3, #16]
 80191ba:	69fb      	ldr	r3, [r7, #28]
 80191bc:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80191be:	6878      	ldr	r0, [r7, #4]
 80191c0:	f000 fe1e 	bl	8019e00 <dhcp_supplied_address>
 80191c4:	4603      	mov	r3, r0
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	d03b      	beq.n	8019242 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80191ca:	f107 030e 	add.w	r3, r7, #14
 80191ce:	2207      	movs	r2, #7
 80191d0:	69f9      	ldr	r1, [r7, #28]
 80191d2:	6878      	ldr	r0, [r7, #4]
 80191d4:	f000 fd10 	bl	8019bf8 <dhcp_create_msg>
 80191d8:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80191da:	69bb      	ldr	r3, [r7, #24]
 80191dc:	2b00      	cmp	r3, #0
 80191de:	d030      	beq.n	8019242 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80191e0:	69bb      	ldr	r3, [r7, #24]
 80191e2:	685b      	ldr	r3, [r3, #4]
 80191e4:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80191e6:	89f8      	ldrh	r0, [r7, #14]
 80191e8:	697b      	ldr	r3, [r7, #20]
 80191ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80191ee:	2304      	movs	r3, #4
 80191f0:	2236      	movs	r2, #54	; 0x36
 80191f2:	f000 f85f 	bl	80192b4 <dhcp_option>
 80191f6:	4603      	mov	r3, r0
 80191f8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80191fa:	89fc      	ldrh	r4, [r7, #14]
 80191fc:	697b      	ldr	r3, [r7, #20]
 80191fe:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8019202:	693b      	ldr	r3, [r7, #16]
 8019204:	4618      	mov	r0, r3
 8019206:	f7f5 fcb8 	bl	800eb7a <lwip_htonl>
 801920a:	4603      	mov	r3, r0
 801920c:	461a      	mov	r2, r3
 801920e:	4629      	mov	r1, r5
 8019210:	4620      	mov	r0, r4
 8019212:	f000 f8db 	bl	80193cc <dhcp_option_long>
 8019216:	4603      	mov	r3, r0
 8019218:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801921a:	89f8      	ldrh	r0, [r7, #14]
 801921c:	697b      	ldr	r3, [r7, #20]
 801921e:	33f0      	adds	r3, #240	; 0xf0
 8019220:	69ba      	ldr	r2, [r7, #24]
 8019222:	4619      	mov	r1, r3
 8019224:	f000 fdbe 	bl	8019da4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019228:	4b13      	ldr	r3, [pc, #76]	; (8019278 <dhcp_release_and_stop+0x12c>)
 801922a:	6818      	ldr	r0, [r3, #0]
 801922c:	f107 0210 	add.w	r2, r7, #16
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	9300      	str	r3, [sp, #0]
 8019234:	2343      	movs	r3, #67	; 0x43
 8019236:	69b9      	ldr	r1, [r7, #24]
 8019238:	f7fe fc06 	bl	8017a48 <udp_sendto_if>
      pbuf_free(p_out);
 801923c:	69b8      	ldr	r0, [r7, #24]
 801923e:	f7f7 fb97 	bl	8010970 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8019242:	4b0e      	ldr	r3, [pc, #56]	; (801927c <dhcp_release_and_stop+0x130>)
 8019244:	4a0d      	ldr	r2, [pc, #52]	; (801927c <dhcp_release_and_stop+0x130>)
 8019246:	490d      	ldr	r1, [pc, #52]	; (801927c <dhcp_release_and_stop+0x130>)
 8019248:	6878      	ldr	r0, [r7, #4]
 801924a:	f7f6 fe19 	bl	800fe80 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801924e:	2100      	movs	r1, #0
 8019250:	69f8      	ldr	r0, [r7, #28]
 8019252:	f000 f815 	bl	8019280 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8019256:	69fb      	ldr	r3, [r7, #28]
 8019258:	791b      	ldrb	r3, [r3, #4]
 801925a:	2b00      	cmp	r3, #0
 801925c:	d008      	beq.n	8019270 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801925e:	f7fe ff65 	bl	801812c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8019262:	69fb      	ldr	r3, [r7, #28]
 8019264:	2200      	movs	r2, #0
 8019266:	711a      	strb	r2, [r3, #4]
 8019268:	e002      	b.n	8019270 <dhcp_release_and_stop+0x124>
    return;
 801926a:	bf00      	nop
 801926c:	e000      	b.n	8019270 <dhcp_release_and_stop+0x124>
    return;
 801926e:	bf00      	nop
  }
}
 8019270:	3720      	adds	r7, #32
 8019272:	46bd      	mov	sp, r7
 8019274:	bdb0      	pop	{r4, r5, r7, pc}
 8019276:	bf00      	nop
 8019278:	2000195c 	.word	0x2000195c
 801927c:	08025ac4 	.word	0x08025ac4

08019280 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8019280:	b480      	push	{r7}
 8019282:	b083      	sub	sp, #12
 8019284:	af00      	add	r7, sp, #0
 8019286:	6078      	str	r0, [r7, #4]
 8019288:	460b      	mov	r3, r1
 801928a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	795b      	ldrb	r3, [r3, #5]
 8019290:	78fa      	ldrb	r2, [r7, #3]
 8019292:	429a      	cmp	r2, r3
 8019294:	d008      	beq.n	80192a8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	78fa      	ldrb	r2, [r7, #3]
 801929a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	2200      	movs	r2, #0
 80192a0:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	2200      	movs	r2, #0
 80192a6:	811a      	strh	r2, [r3, #8]
  }
}
 80192a8:	bf00      	nop
 80192aa:	370c      	adds	r7, #12
 80192ac:	46bd      	mov	sp, r7
 80192ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192b2:	4770      	bx	lr

080192b4 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80192b4:	b580      	push	{r7, lr}
 80192b6:	b082      	sub	sp, #8
 80192b8:	af00      	add	r7, sp, #0
 80192ba:	6039      	str	r1, [r7, #0]
 80192bc:	4611      	mov	r1, r2
 80192be:	461a      	mov	r2, r3
 80192c0:	4603      	mov	r3, r0
 80192c2:	80fb      	strh	r3, [r7, #6]
 80192c4:	460b      	mov	r3, r1
 80192c6:	717b      	strb	r3, [r7, #5]
 80192c8:	4613      	mov	r3, r2
 80192ca:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80192cc:	88fa      	ldrh	r2, [r7, #6]
 80192ce:	793b      	ldrb	r3, [r7, #4]
 80192d0:	4413      	add	r3, r2
 80192d2:	3302      	adds	r3, #2
 80192d4:	2b44      	cmp	r3, #68	; 0x44
 80192d6:	d906      	bls.n	80192e6 <dhcp_option+0x32>
 80192d8:	4b0d      	ldr	r3, [pc, #52]	; (8019310 <dhcp_option+0x5c>)
 80192da:	f240 529a 	movw	r2, #1434	; 0x59a
 80192de:	490d      	ldr	r1, [pc, #52]	; (8019314 <dhcp_option+0x60>)
 80192e0:	480d      	ldr	r0, [pc, #52]	; (8019318 <dhcp_option+0x64>)
 80192e2:	f006 fac1 	bl	801f868 <iprintf>
  options[options_out_len++] = option_type;
 80192e6:	88fb      	ldrh	r3, [r7, #6]
 80192e8:	1c5a      	adds	r2, r3, #1
 80192ea:	80fa      	strh	r2, [r7, #6]
 80192ec:	461a      	mov	r2, r3
 80192ee:	683b      	ldr	r3, [r7, #0]
 80192f0:	4413      	add	r3, r2
 80192f2:	797a      	ldrb	r2, [r7, #5]
 80192f4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80192f6:	88fb      	ldrh	r3, [r7, #6]
 80192f8:	1c5a      	adds	r2, r3, #1
 80192fa:	80fa      	strh	r2, [r7, #6]
 80192fc:	461a      	mov	r2, r3
 80192fe:	683b      	ldr	r3, [r7, #0]
 8019300:	4413      	add	r3, r2
 8019302:	793a      	ldrb	r2, [r7, #4]
 8019304:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8019306:	88fb      	ldrh	r3, [r7, #6]
}
 8019308:	4618      	mov	r0, r3
 801930a:	3708      	adds	r7, #8
 801930c:	46bd      	mov	sp, r7
 801930e:	bd80      	pop	{r7, pc}
 8019310:	08024cb4 	.word	0x08024cb4
 8019314:	08024e48 	.word	0x08024e48
 8019318:	08024d14 	.word	0x08024d14

0801931c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801931c:	b580      	push	{r7, lr}
 801931e:	b082      	sub	sp, #8
 8019320:	af00      	add	r7, sp, #0
 8019322:	4603      	mov	r3, r0
 8019324:	6039      	str	r1, [r7, #0]
 8019326:	80fb      	strh	r3, [r7, #6]
 8019328:	4613      	mov	r3, r2
 801932a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801932c:	88fb      	ldrh	r3, [r7, #6]
 801932e:	2b43      	cmp	r3, #67	; 0x43
 8019330:	d906      	bls.n	8019340 <dhcp_option_byte+0x24>
 8019332:	4b0a      	ldr	r3, [pc, #40]	; (801935c <dhcp_option_byte+0x40>)
 8019334:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8019338:	4909      	ldr	r1, [pc, #36]	; (8019360 <dhcp_option_byte+0x44>)
 801933a:	480a      	ldr	r0, [pc, #40]	; (8019364 <dhcp_option_byte+0x48>)
 801933c:	f006 fa94 	bl	801f868 <iprintf>
  options[options_out_len++] = value;
 8019340:	88fb      	ldrh	r3, [r7, #6]
 8019342:	1c5a      	adds	r2, r3, #1
 8019344:	80fa      	strh	r2, [r7, #6]
 8019346:	461a      	mov	r2, r3
 8019348:	683b      	ldr	r3, [r7, #0]
 801934a:	4413      	add	r3, r2
 801934c:	797a      	ldrb	r2, [r7, #5]
 801934e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8019350:	88fb      	ldrh	r3, [r7, #6]
}
 8019352:	4618      	mov	r0, r3
 8019354:	3708      	adds	r7, #8
 8019356:	46bd      	mov	sp, r7
 8019358:	bd80      	pop	{r7, pc}
 801935a:	bf00      	nop
 801935c:	08024cb4 	.word	0x08024cb4
 8019360:	08024e8c 	.word	0x08024e8c
 8019364:	08024d14 	.word	0x08024d14

08019368 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8019368:	b580      	push	{r7, lr}
 801936a:	b082      	sub	sp, #8
 801936c:	af00      	add	r7, sp, #0
 801936e:	4603      	mov	r3, r0
 8019370:	6039      	str	r1, [r7, #0]
 8019372:	80fb      	strh	r3, [r7, #6]
 8019374:	4613      	mov	r3, r2
 8019376:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8019378:	88fb      	ldrh	r3, [r7, #6]
 801937a:	3302      	adds	r3, #2
 801937c:	2b44      	cmp	r3, #68	; 0x44
 801937e:	d906      	bls.n	801938e <dhcp_option_short+0x26>
 8019380:	4b0f      	ldr	r3, [pc, #60]	; (80193c0 <dhcp_option_short+0x58>)
 8019382:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8019386:	490f      	ldr	r1, [pc, #60]	; (80193c4 <dhcp_option_short+0x5c>)
 8019388:	480f      	ldr	r0, [pc, #60]	; (80193c8 <dhcp_option_short+0x60>)
 801938a:	f006 fa6d 	bl	801f868 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801938e:	88bb      	ldrh	r3, [r7, #4]
 8019390:	0a1b      	lsrs	r3, r3, #8
 8019392:	b29a      	uxth	r2, r3
 8019394:	88fb      	ldrh	r3, [r7, #6]
 8019396:	1c59      	adds	r1, r3, #1
 8019398:	80f9      	strh	r1, [r7, #6]
 801939a:	4619      	mov	r1, r3
 801939c:	683b      	ldr	r3, [r7, #0]
 801939e:	440b      	add	r3, r1
 80193a0:	b2d2      	uxtb	r2, r2
 80193a2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80193a4:	88fb      	ldrh	r3, [r7, #6]
 80193a6:	1c5a      	adds	r2, r3, #1
 80193a8:	80fa      	strh	r2, [r7, #6]
 80193aa:	461a      	mov	r2, r3
 80193ac:	683b      	ldr	r3, [r7, #0]
 80193ae:	4413      	add	r3, r2
 80193b0:	88ba      	ldrh	r2, [r7, #4]
 80193b2:	b2d2      	uxtb	r2, r2
 80193b4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80193b6:	88fb      	ldrh	r3, [r7, #6]
}
 80193b8:	4618      	mov	r0, r3
 80193ba:	3708      	adds	r7, #8
 80193bc:	46bd      	mov	sp, r7
 80193be:	bd80      	pop	{r7, pc}
 80193c0:	08024cb4 	.word	0x08024cb4
 80193c4:	08024ec4 	.word	0x08024ec4
 80193c8:	08024d14 	.word	0x08024d14

080193cc <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80193cc:	b580      	push	{r7, lr}
 80193ce:	b084      	sub	sp, #16
 80193d0:	af00      	add	r7, sp, #0
 80193d2:	4603      	mov	r3, r0
 80193d4:	60b9      	str	r1, [r7, #8]
 80193d6:	607a      	str	r2, [r7, #4]
 80193d8:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80193da:	89fb      	ldrh	r3, [r7, #14]
 80193dc:	3304      	adds	r3, #4
 80193de:	2b44      	cmp	r3, #68	; 0x44
 80193e0:	d906      	bls.n	80193f0 <dhcp_option_long+0x24>
 80193e2:	4b19      	ldr	r3, [pc, #100]	; (8019448 <dhcp_option_long+0x7c>)
 80193e4:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80193e8:	4918      	ldr	r1, [pc, #96]	; (801944c <dhcp_option_long+0x80>)
 80193ea:	4819      	ldr	r0, [pc, #100]	; (8019450 <dhcp_option_long+0x84>)
 80193ec:	f006 fa3c 	bl	801f868 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	0e1a      	lsrs	r2, r3, #24
 80193f4:	89fb      	ldrh	r3, [r7, #14]
 80193f6:	1c59      	adds	r1, r3, #1
 80193f8:	81f9      	strh	r1, [r7, #14]
 80193fa:	4619      	mov	r1, r3
 80193fc:	68bb      	ldr	r3, [r7, #8]
 80193fe:	440b      	add	r3, r1
 8019400:	b2d2      	uxtb	r2, r2
 8019402:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	0c1a      	lsrs	r2, r3, #16
 8019408:	89fb      	ldrh	r3, [r7, #14]
 801940a:	1c59      	adds	r1, r3, #1
 801940c:	81f9      	strh	r1, [r7, #14]
 801940e:	4619      	mov	r1, r3
 8019410:	68bb      	ldr	r3, [r7, #8]
 8019412:	440b      	add	r3, r1
 8019414:	b2d2      	uxtb	r2, r2
 8019416:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	0a1a      	lsrs	r2, r3, #8
 801941c:	89fb      	ldrh	r3, [r7, #14]
 801941e:	1c59      	adds	r1, r3, #1
 8019420:	81f9      	strh	r1, [r7, #14]
 8019422:	4619      	mov	r1, r3
 8019424:	68bb      	ldr	r3, [r7, #8]
 8019426:	440b      	add	r3, r1
 8019428:	b2d2      	uxtb	r2, r2
 801942a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801942c:	89fb      	ldrh	r3, [r7, #14]
 801942e:	1c5a      	adds	r2, r3, #1
 8019430:	81fa      	strh	r2, [r7, #14]
 8019432:	461a      	mov	r2, r3
 8019434:	68bb      	ldr	r3, [r7, #8]
 8019436:	4413      	add	r3, r2
 8019438:	687a      	ldr	r2, [r7, #4]
 801943a:	b2d2      	uxtb	r2, r2
 801943c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801943e:	89fb      	ldrh	r3, [r7, #14]
}
 8019440:	4618      	mov	r0, r3
 8019442:	3710      	adds	r7, #16
 8019444:	46bd      	mov	sp, r7
 8019446:	bd80      	pop	{r7, pc}
 8019448:	08024cb4 	.word	0x08024cb4
 801944c:	08024f00 	.word	0x08024f00
 8019450:	08024d14 	.word	0x08024d14

08019454 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8019454:	b580      	push	{r7, lr}
 8019456:	b090      	sub	sp, #64	; 0x40
 8019458:	af00      	add	r7, sp, #0
 801945a:	6078      	str	r0, [r7, #4]
 801945c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801945e:	2300      	movs	r3, #0
 8019460:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8019462:	2300      	movs	r3, #0
 8019464:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8019466:	220a      	movs	r2, #10
 8019468:	2100      	movs	r1, #0
 801946a:	48ba      	ldr	r0, [pc, #744]	; (8019754 <dhcp_parse_reply+0x300>)
 801946c:	f005 fb86 	bl	801eb7c <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	895b      	ldrh	r3, [r3, #10]
 8019474:	2b2b      	cmp	r3, #43	; 0x2b
 8019476:	d802      	bhi.n	801947e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8019478:	f06f 0301 	mvn.w	r3, #1
 801947c:	e2e9      	b.n	8019a52 <dhcp_parse_reply+0x5fe>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	685b      	ldr	r3, [r3, #4]
 8019482:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8019484:	23f0      	movs	r3, #240	; 0xf0
 8019486:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	891b      	ldrh	r3, [r3, #8]
 801948c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8019492:	e00c      	b.n	80194ae <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8019494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019496:	895b      	ldrh	r3, [r3, #10]
 8019498:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801949a:	1ad3      	subs	r3, r2, r3
 801949c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801949e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194a0:	895b      	ldrh	r3, [r3, #10]
 80194a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80194a4:	1ad3      	subs	r3, r2, r3
 80194a6:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80194a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194aa:	681b      	ldr	r3, [r3, #0]
 80194ac:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80194ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	d004      	beq.n	80194be <dhcp_parse_reply+0x6a>
 80194b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194b6:	895b      	ldrh	r3, [r3, #10]
 80194b8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80194ba:	429a      	cmp	r2, r3
 80194bc:	d2ea      	bcs.n	8019494 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80194be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	d102      	bne.n	80194ca <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80194c4:	f06f 0301 	mvn.w	r3, #1
 80194c8:	e2c3      	b.n	8019a52 <dhcp_parse_reply+0x5fe>
  }
  offset = options_idx;
 80194ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80194cc:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80194ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80194d0:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80194d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194d4:	685b      	ldr	r3, [r3, #4]
 80194d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80194d8:	e267      	b.n	80199aa <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 80194da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80194dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80194de:	4413      	add	r3, r2
 80194e0:	781b      	ldrb	r3, [r3, #0]
 80194e2:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80194e4:	2300      	movs	r3, #0
 80194e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80194ea:	f04f 33ff 	mov.w	r3, #4294967295
 80194ee:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80194f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80194f2:	3302      	adds	r3, #2
 80194f4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80194f6:	8bfa      	ldrh	r2, [r7, #30]
 80194f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80194fa:	429a      	cmp	r2, r3
 80194fc:	d202      	bcs.n	8019504 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80194fe:	f06f 0301 	mvn.w	r3, #1
 8019502:	e2a6      	b.n	8019a52 <dhcp_parse_reply+0x5fe>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8019504:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019506:	3301      	adds	r3, #1
 8019508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801950a:	8952      	ldrh	r2, [r2, #10]
 801950c:	4293      	cmp	r3, r2
 801950e:	da07      	bge.n	8019520 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8019510:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019512:	3301      	adds	r3, #1
 8019514:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019516:	4413      	add	r3, r2
 8019518:	781b      	ldrb	r3, [r3, #0]
 801951a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801951e:	e00b      	b.n	8019538 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8019520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019522:	681b      	ldr	r3, [r3, #0]
 8019524:	2b00      	cmp	r3, #0
 8019526:	d004      	beq.n	8019532 <dhcp_parse_reply+0xde>
 8019528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	685b      	ldr	r3, [r3, #4]
 801952e:	781b      	ldrb	r3, [r3, #0]
 8019530:	e000      	b.n	8019534 <dhcp_parse_reply+0xe0>
 8019532:	2300      	movs	r3, #0
 8019534:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8019538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801953c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8019540:	7dfb      	ldrb	r3, [r7, #23]
 8019542:	2b3b      	cmp	r3, #59	; 0x3b
 8019544:	f200 815a 	bhi.w	80197fc <dhcp_parse_reply+0x3a8>
 8019548:	a201      	add	r2, pc, #4	; (adr r2, 8019550 <dhcp_parse_reply+0xfc>)
 801954a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801954e:	bf00      	nop
 8019550:	08019641 	.word	0x08019641
 8019554:	08019651 	.word	0x08019651
 8019558:	080197fd 	.word	0x080197fd
 801955c:	08019673 	.word	0x08019673
 8019560:	080197fd 	.word	0x080197fd
 8019564:	080197fd 	.word	0x080197fd
 8019568:	0801969f 	.word	0x0801969f
 801956c:	080197fd 	.word	0x080197fd
 8019570:	080197fd 	.word	0x080197fd
 8019574:	080197fd 	.word	0x080197fd
 8019578:	080197fd 	.word	0x080197fd
 801957c:	080197fd 	.word	0x080197fd
 8019580:	080197fd 	.word	0x080197fd
 8019584:	080197fd 	.word	0x080197fd
 8019588:	080197fd 	.word	0x080197fd
 801958c:	080197fd 	.word	0x080197fd
 8019590:	080197fd 	.word	0x080197fd
 8019594:	080197fd 	.word	0x080197fd
 8019598:	080197fd 	.word	0x080197fd
 801959c:	080197fd 	.word	0x080197fd
 80195a0:	080197fd 	.word	0x080197fd
 80195a4:	080197fd 	.word	0x080197fd
 80195a8:	080197fd 	.word	0x080197fd
 80195ac:	080197fd 	.word	0x080197fd
 80195b0:	080197fd 	.word	0x080197fd
 80195b4:	080197fd 	.word	0x080197fd
 80195b8:	080197fd 	.word	0x080197fd
 80195bc:	080197fd 	.word	0x080197fd
 80195c0:	080197fd 	.word	0x080197fd
 80195c4:	080197fd 	.word	0x080197fd
 80195c8:	080197fd 	.word	0x080197fd
 80195cc:	080197fd 	.word	0x080197fd
 80195d0:	080197fd 	.word	0x080197fd
 80195d4:	080197fd 	.word	0x080197fd
 80195d8:	080197fd 	.word	0x080197fd
 80195dc:	080197fd 	.word	0x080197fd
 80195e0:	080197fd 	.word	0x080197fd
 80195e4:	080197fd 	.word	0x080197fd
 80195e8:	080197fd 	.word	0x080197fd
 80195ec:	080197fd 	.word	0x080197fd
 80195f0:	080197fd 	.word	0x080197fd
 80195f4:	080197fd 	.word	0x080197fd
 80195f8:	080197fd 	.word	0x080197fd
 80195fc:	080197fd 	.word	0x080197fd
 8019600:	080197fd 	.word	0x080197fd
 8019604:	080197fd 	.word	0x080197fd
 8019608:	080197fd 	.word	0x080197fd
 801960c:	080197fd 	.word	0x080197fd
 8019610:	080197fd 	.word	0x080197fd
 8019614:	080197fd 	.word	0x080197fd
 8019618:	080197fd 	.word	0x080197fd
 801961c:	080196f5 	.word	0x080196f5
 8019620:	08019717 	.word	0x08019717
 8019624:	08019775 	.word	0x08019775
 8019628:	08019797 	.word	0x08019797
 801962c:	080197fd 	.word	0x080197fd
 8019630:	080197fd 	.word	0x080197fd
 8019634:	080197fd 	.word	0x080197fd
 8019638:	080197b9 	.word	0x080197b9
 801963c:	080197db 	.word	0x080197db
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8019640:	2300      	movs	r3, #0
 8019642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019646:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801964a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801964e:	e0d9      	b.n	8019804 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019654:	2b04      	cmp	r3, #4
 8019656:	d009      	beq.n	801966c <dhcp_parse_reply+0x218>
 8019658:	4b3f      	ldr	r3, [pc, #252]	; (8019758 <dhcp_parse_reply+0x304>)
 801965a:	f240 622e 	movw	r2, #1582	; 0x62e
 801965e:	493f      	ldr	r1, [pc, #252]	; (801975c <dhcp_parse_reply+0x308>)
 8019660:	483f      	ldr	r0, [pc, #252]	; (8019760 <dhcp_parse_reply+0x30c>)
 8019662:	f006 f901 	bl	801f868 <iprintf>
 8019666:	f06f 0305 	mvn.w	r3, #5
 801966a:	e1f2      	b.n	8019a52 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801966c:	2306      	movs	r3, #6
 801966e:	623b      	str	r3, [r7, #32]
        break;
 8019670:	e0c8      	b.n	8019804 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8019672:	2304      	movs	r3, #4
 8019674:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8019678:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801967c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019680:	429a      	cmp	r2, r3
 8019682:	d209      	bcs.n	8019698 <dhcp_parse_reply+0x244>
 8019684:	4b34      	ldr	r3, [pc, #208]	; (8019758 <dhcp_parse_reply+0x304>)
 8019686:	f240 6233 	movw	r2, #1587	; 0x633
 801968a:	4936      	ldr	r1, [pc, #216]	; (8019764 <dhcp_parse_reply+0x310>)
 801968c:	4834      	ldr	r0, [pc, #208]	; (8019760 <dhcp_parse_reply+0x30c>)
 801968e:	f006 f8eb 	bl	801f868 <iprintf>
 8019692:	f06f 0305 	mvn.w	r3, #5
 8019696:	e1dc      	b.n	8019a52 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8019698:	2307      	movs	r3, #7
 801969a:	623b      	str	r3, [r7, #32]
        break;
 801969c:	e0b2      	b.n	8019804 <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801969e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80196a2:	f003 0303 	and.w	r3, r3, #3
 80196a6:	b2db      	uxtb	r3, r3
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	d009      	beq.n	80196c0 <dhcp_parse_reply+0x26c>
 80196ac:	4b2a      	ldr	r3, [pc, #168]	; (8019758 <dhcp_parse_reply+0x304>)
 80196ae:	f240 6239 	movw	r2, #1593	; 0x639
 80196b2:	492d      	ldr	r1, [pc, #180]	; (8019768 <dhcp_parse_reply+0x314>)
 80196b4:	482a      	ldr	r0, [pc, #168]	; (8019760 <dhcp_parse_reply+0x30c>)
 80196b6:	f006 f8d7 	bl	801f868 <iprintf>
 80196ba:	f06f 0305 	mvn.w	r3, #5
 80196be:	e1c8      	b.n	8019a52 <dhcp_parse_reply+0x5fe>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 80196c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80196c4:	2b08      	cmp	r3, #8
 80196c6:	bf28      	it	cs
 80196c8:	2308      	movcs	r3, #8
 80196ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80196ce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80196d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80196d6:	429a      	cmp	r2, r3
 80196d8:	d209      	bcs.n	80196ee <dhcp_parse_reply+0x29a>
 80196da:	4b1f      	ldr	r3, [pc, #124]	; (8019758 <dhcp_parse_reply+0x304>)
 80196dc:	f240 623c 	movw	r2, #1596	; 0x63c
 80196e0:	4920      	ldr	r1, [pc, #128]	; (8019764 <dhcp_parse_reply+0x310>)
 80196e2:	481f      	ldr	r0, [pc, #124]	; (8019760 <dhcp_parse_reply+0x30c>)
 80196e4:	f006 f8c0 	bl	801f868 <iprintf>
 80196e8:	f06f 0305 	mvn.w	r3, #5
 80196ec:	e1b1      	b.n	8019a52 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 80196ee:	2308      	movs	r3, #8
 80196f0:	623b      	str	r3, [r7, #32]
        break;
 80196f2:	e087      	b.n	8019804 <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80196f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80196f8:	2b04      	cmp	r3, #4
 80196fa:	d009      	beq.n	8019710 <dhcp_parse_reply+0x2bc>
 80196fc:	4b16      	ldr	r3, [pc, #88]	; (8019758 <dhcp_parse_reply+0x304>)
 80196fe:	f240 6241 	movw	r2, #1601	; 0x641
 8019702:	4916      	ldr	r1, [pc, #88]	; (801975c <dhcp_parse_reply+0x308>)
 8019704:	4816      	ldr	r0, [pc, #88]	; (8019760 <dhcp_parse_reply+0x30c>)
 8019706:	f006 f8af 	bl	801f868 <iprintf>
 801970a:	f06f 0305 	mvn.w	r3, #5
 801970e:	e1a0      	b.n	8019a52 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8019710:	2303      	movs	r3, #3
 8019712:	623b      	str	r3, [r7, #32]
        break;
 8019714:	e076      	b.n	8019804 <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8019716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801971a:	2b01      	cmp	r3, #1
 801971c:	d009      	beq.n	8019732 <dhcp_parse_reply+0x2de>
 801971e:	4b0e      	ldr	r3, [pc, #56]	; (8019758 <dhcp_parse_reply+0x304>)
 8019720:	f240 624f 	movw	r2, #1615	; 0x64f
 8019724:	4911      	ldr	r1, [pc, #68]	; (801976c <dhcp_parse_reply+0x318>)
 8019726:	480e      	ldr	r0, [pc, #56]	; (8019760 <dhcp_parse_reply+0x30c>)
 8019728:	f006 f89e 	bl	801f868 <iprintf>
 801972c:	f06f 0305 	mvn.w	r3, #5
 8019730:	e18f      	b.n	8019a52 <dhcp_parse_reply+0x5fe>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8019732:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8019734:	2bf0      	cmp	r3, #240	; 0xf0
 8019736:	d009      	beq.n	801974c <dhcp_parse_reply+0x2f8>
 8019738:	4b07      	ldr	r3, [pc, #28]	; (8019758 <dhcp_parse_reply+0x304>)
 801973a:	f240 6251 	movw	r2, #1617	; 0x651
 801973e:	490c      	ldr	r1, [pc, #48]	; (8019770 <dhcp_parse_reply+0x31c>)
 8019740:	4807      	ldr	r0, [pc, #28]	; (8019760 <dhcp_parse_reply+0x30c>)
 8019742:	f006 f891 	bl	801f868 <iprintf>
 8019746:	f06f 0305 	mvn.w	r3, #5
 801974a:	e182      	b.n	8019a52 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801974c:	2300      	movs	r3, #0
 801974e:	623b      	str	r3, [r7, #32]
        break;
 8019750:	e058      	b.n	8019804 <dhcp_parse_reply+0x3b0>
 8019752:	bf00      	nop
 8019754:	20008958 	.word	0x20008958
 8019758:	08024cb4 	.word	0x08024cb4
 801975c:	08024f3c 	.word	0x08024f3c
 8019760:	08024d14 	.word	0x08024d14
 8019764:	08024f48 	.word	0x08024f48
 8019768:	08024f5c 	.word	0x08024f5c
 801976c:	08024f6c 	.word	0x08024f6c
 8019770:	08024f78 	.word	0x08024f78
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8019774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019778:	2b01      	cmp	r3, #1
 801977a:	d009      	beq.n	8019790 <dhcp_parse_reply+0x33c>
 801977c:	4ba5      	ldr	r3, [pc, #660]	; (8019a14 <dhcp_parse_reply+0x5c0>)
 801977e:	f240 6255 	movw	r2, #1621	; 0x655
 8019782:	49a5      	ldr	r1, [pc, #660]	; (8019a18 <dhcp_parse_reply+0x5c4>)
 8019784:	48a5      	ldr	r0, [pc, #660]	; (8019a1c <dhcp_parse_reply+0x5c8>)
 8019786:	f006 f86f 	bl	801f868 <iprintf>
 801978a:	f06f 0305 	mvn.w	r3, #5
 801978e:	e160      	b.n	8019a52 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8019790:	2301      	movs	r3, #1
 8019792:	623b      	str	r3, [r7, #32]
        break;
 8019794:	e036      	b.n	8019804 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019796:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801979a:	2b04      	cmp	r3, #4
 801979c:	d009      	beq.n	80197b2 <dhcp_parse_reply+0x35e>
 801979e:	4b9d      	ldr	r3, [pc, #628]	; (8019a14 <dhcp_parse_reply+0x5c0>)
 80197a0:	f240 6259 	movw	r2, #1625	; 0x659
 80197a4:	499e      	ldr	r1, [pc, #632]	; (8019a20 <dhcp_parse_reply+0x5cc>)
 80197a6:	489d      	ldr	r0, [pc, #628]	; (8019a1c <dhcp_parse_reply+0x5c8>)
 80197a8:	f006 f85e 	bl	801f868 <iprintf>
 80197ac:	f06f 0305 	mvn.w	r3, #5
 80197b0:	e14f      	b.n	8019a52 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80197b2:	2302      	movs	r3, #2
 80197b4:	623b      	str	r3, [r7, #32]
        break;
 80197b6:	e025      	b.n	8019804 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80197b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80197bc:	2b04      	cmp	r3, #4
 80197be:	d009      	beq.n	80197d4 <dhcp_parse_reply+0x380>
 80197c0:	4b94      	ldr	r3, [pc, #592]	; (8019a14 <dhcp_parse_reply+0x5c0>)
 80197c2:	f240 625d 	movw	r2, #1629	; 0x65d
 80197c6:	4996      	ldr	r1, [pc, #600]	; (8019a20 <dhcp_parse_reply+0x5cc>)
 80197c8:	4894      	ldr	r0, [pc, #592]	; (8019a1c <dhcp_parse_reply+0x5c8>)
 80197ca:	f006 f84d 	bl	801f868 <iprintf>
 80197ce:	f06f 0305 	mvn.w	r3, #5
 80197d2:	e13e      	b.n	8019a52 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_T1;
 80197d4:	2304      	movs	r3, #4
 80197d6:	623b      	str	r3, [r7, #32]
        break;
 80197d8:	e014      	b.n	8019804 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80197da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80197de:	2b04      	cmp	r3, #4
 80197e0:	d009      	beq.n	80197f6 <dhcp_parse_reply+0x3a2>
 80197e2:	4b8c      	ldr	r3, [pc, #560]	; (8019a14 <dhcp_parse_reply+0x5c0>)
 80197e4:	f240 6261 	movw	r2, #1633	; 0x661
 80197e8:	498d      	ldr	r1, [pc, #564]	; (8019a20 <dhcp_parse_reply+0x5cc>)
 80197ea:	488c      	ldr	r0, [pc, #560]	; (8019a1c <dhcp_parse_reply+0x5c8>)
 80197ec:	f006 f83c 	bl	801f868 <iprintf>
 80197f0:	f06f 0305 	mvn.w	r3, #5
 80197f4:	e12d      	b.n	8019a52 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_T2;
 80197f6:	2305      	movs	r3, #5
 80197f8:	623b      	str	r3, [r7, #32]
        break;
 80197fa:	e003      	b.n	8019804 <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 80197fc:	2300      	movs	r3, #0
 80197fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8019802:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8019804:	7dfb      	ldrb	r3, [r7, #23]
 8019806:	2b00      	cmp	r3, #0
 8019808:	d103      	bne.n	8019812 <dhcp_parse_reply+0x3be>
      offset++;
 801980a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801980c:	3301      	adds	r3, #1
 801980e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8019810:	e0a1      	b.n	8019956 <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8019812:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019818:	4413      	add	r3, r2
 801981a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801981e:	4293      	cmp	r3, r2
 8019820:	dd02      	ble.n	8019828 <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 8019822:	f06f 0301 	mvn.w	r3, #1
 8019826:	e114      	b.n	8019a52 <dhcp_parse_reply+0x5fe>
      }
      offset = (u16_t)(offset + len + 2);
 8019828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801982c:	b29a      	uxth	r2, r3
 801982e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019830:	4413      	add	r3, r2
 8019832:	b29b      	uxth	r3, r3
 8019834:	3302      	adds	r3, #2
 8019836:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8019838:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801983c:	2b00      	cmp	r3, #0
 801983e:	f000 808a 	beq.w	8019956 <dhcp_parse_reply+0x502>
        u32_t value = 0;
 8019842:	2300      	movs	r3, #0
 8019844:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8019846:	6a3b      	ldr	r3, [r7, #32]
 8019848:	2b00      	cmp	r3, #0
 801984a:	db02      	blt.n	8019852 <dhcp_parse_reply+0x3fe>
 801984c:	6a3b      	ldr	r3, [r7, #32]
 801984e:	2b09      	cmp	r3, #9
 8019850:	dd06      	ble.n	8019860 <dhcp_parse_reply+0x40c>
 8019852:	4b70      	ldr	r3, [pc, #448]	; (8019a14 <dhcp_parse_reply+0x5c0>)
 8019854:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8019858:	4972      	ldr	r1, [pc, #456]	; (8019a24 <dhcp_parse_reply+0x5d0>)
 801985a:	4870      	ldr	r0, [pc, #448]	; (8019a1c <dhcp_parse_reply+0x5c8>)
 801985c:	f006 f804 	bl	801f868 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8019860:	4a71      	ldr	r2, [pc, #452]	; (8019a28 <dhcp_parse_reply+0x5d4>)
 8019862:	6a3b      	ldr	r3, [r7, #32]
 8019864:	4413      	add	r3, r2
 8019866:	781b      	ldrb	r3, [r3, #0]
 8019868:	2b00      	cmp	r3, #0
 801986a:	d174      	bne.n	8019956 <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 801986c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019870:	2b04      	cmp	r3, #4
 8019872:	bf28      	it	cs
 8019874:	2304      	movcs	r3, #4
 8019876:	b2db      	uxtb	r3, r3
 8019878:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801987a:	8bfb      	ldrh	r3, [r7, #30]
 801987c:	8aba      	ldrh	r2, [r7, #20]
 801987e:	f107 0108 	add.w	r1, r7, #8
 8019882:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019884:	f7f7 fa7a 	bl	8010d7c <pbuf_copy_partial>
 8019888:	4603      	mov	r3, r0
 801988a:	461a      	mov	r2, r3
 801988c:	8abb      	ldrh	r3, [r7, #20]
 801988e:	4293      	cmp	r3, r2
 8019890:	d002      	beq.n	8019898 <dhcp_parse_reply+0x444>
            return ERR_BUF;
 8019892:	f06f 0301 	mvn.w	r3, #1
 8019896:	e0dc      	b.n	8019a52 <dhcp_parse_reply+0x5fe>
          }
          if (decode_len > 4) {
 8019898:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801989c:	2b04      	cmp	r3, #4
 801989e:	d933      	bls.n	8019908 <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80198a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80198a4:	f003 0303 	and.w	r3, r3, #3
 80198a8:	b2db      	uxtb	r3, r3
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	d009      	beq.n	80198c2 <dhcp_parse_reply+0x46e>
 80198ae:	4b59      	ldr	r3, [pc, #356]	; (8019a14 <dhcp_parse_reply+0x5c0>)
 80198b0:	f240 6281 	movw	r2, #1665	; 0x681
 80198b4:	495d      	ldr	r1, [pc, #372]	; (8019a2c <dhcp_parse_reply+0x5d8>)
 80198b6:	4859      	ldr	r0, [pc, #356]	; (8019a1c <dhcp_parse_reply+0x5c8>)
 80198b8:	f005 ffd6 	bl	801f868 <iprintf>
 80198bc:	f06f 0305 	mvn.w	r3, #5
 80198c0:	e0c7      	b.n	8019a52 <dhcp_parse_reply+0x5fe>
            dhcp_got_option(dhcp, decode_idx);
 80198c2:	4a59      	ldr	r2, [pc, #356]	; (8019a28 <dhcp_parse_reply+0x5d4>)
 80198c4:	6a3b      	ldr	r3, [r7, #32]
 80198c6:	4413      	add	r3, r2
 80198c8:	2201      	movs	r2, #1
 80198ca:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80198cc:	68bb      	ldr	r3, [r7, #8]
 80198ce:	4618      	mov	r0, r3
 80198d0:	f7f5 f953 	bl	800eb7a <lwip_htonl>
 80198d4:	4602      	mov	r2, r0
 80198d6:	4956      	ldr	r1, [pc, #344]	; (8019a30 <dhcp_parse_reply+0x5dc>)
 80198d8:	6a3b      	ldr	r3, [r7, #32]
 80198da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80198de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80198e2:	3b04      	subs	r3, #4
 80198e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80198e8:	8bfb      	ldrh	r3, [r7, #30]
 80198ea:	3304      	adds	r3, #4
 80198ec:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80198ee:	8a7a      	ldrh	r2, [r7, #18]
 80198f0:	8bfb      	ldrh	r3, [r7, #30]
 80198f2:	429a      	cmp	r2, r3
 80198f4:	d202      	bcs.n	80198fc <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 80198f6:	f06f 0301 	mvn.w	r3, #1
 80198fa:	e0aa      	b.n	8019a52 <dhcp_parse_reply+0x5fe>
            }
            val_offset = next_val_offset;
 80198fc:	8a7b      	ldrh	r3, [r7, #18]
 80198fe:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8019900:	6a3b      	ldr	r3, [r7, #32]
 8019902:	3301      	adds	r3, #1
 8019904:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8019906:	e79e      	b.n	8019846 <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 8019908:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801990c:	2b04      	cmp	r3, #4
 801990e:	d106      	bne.n	801991e <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 8019910:	68bb      	ldr	r3, [r7, #8]
 8019912:	4618      	mov	r0, r3
 8019914:	f7f5 f931 	bl	800eb7a <lwip_htonl>
 8019918:	4603      	mov	r3, r0
 801991a:	60bb      	str	r3, [r7, #8]
 801991c:	e011      	b.n	8019942 <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801991e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019922:	2b01      	cmp	r3, #1
 8019924:	d009      	beq.n	801993a <dhcp_parse_reply+0x4e6>
 8019926:	4b3b      	ldr	r3, [pc, #236]	; (8019a14 <dhcp_parse_reply+0x5c0>)
 8019928:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801992c:	4941      	ldr	r1, [pc, #260]	; (8019a34 <dhcp_parse_reply+0x5e0>)
 801992e:	483b      	ldr	r0, [pc, #236]	; (8019a1c <dhcp_parse_reply+0x5c8>)
 8019930:	f005 ff9a 	bl	801f868 <iprintf>
 8019934:	f06f 0305 	mvn.w	r3, #5
 8019938:	e08b      	b.n	8019a52 <dhcp_parse_reply+0x5fe>
            value = ((u8_t *)&value)[0];
 801993a:	f107 0308 	add.w	r3, r7, #8
 801993e:	781b      	ldrb	r3, [r3, #0]
 8019940:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8019942:	4a39      	ldr	r2, [pc, #228]	; (8019a28 <dhcp_parse_reply+0x5d4>)
 8019944:	6a3b      	ldr	r3, [r7, #32]
 8019946:	4413      	add	r3, r2
 8019948:	2201      	movs	r2, #1
 801994a:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801994c:	68ba      	ldr	r2, [r7, #8]
 801994e:	4938      	ldr	r1, [pc, #224]	; (8019a30 <dhcp_parse_reply+0x5dc>)
 8019950:	6a3b      	ldr	r3, [r7, #32]
 8019952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8019956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019958:	895b      	ldrh	r3, [r3, #10]
 801995a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801995c:	429a      	cmp	r2, r3
 801995e:	d324      	bcc.n	80199aa <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 8019960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019962:	895b      	ldrh	r3, [r3, #10]
 8019964:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019966:	1ad3      	subs	r3, r2, r3
 8019968:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801996a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801996c:	895b      	ldrh	r3, [r3, #10]
 801996e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8019970:	1ad3      	subs	r3, r2, r3
 8019972:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8019974:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019976:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019978:	429a      	cmp	r2, r3
 801997a:	d213      	bcs.n	80199a4 <dhcp_parse_reply+0x550>
        q = q->next;
 801997c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8019982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019984:	2b00      	cmp	r3, #0
 8019986:	d109      	bne.n	801999c <dhcp_parse_reply+0x548>
 8019988:	4b22      	ldr	r3, [pc, #136]	; (8019a14 <dhcp_parse_reply+0x5c0>)
 801998a:	f240 629d 	movw	r2, #1693	; 0x69d
 801998e:	492a      	ldr	r1, [pc, #168]	; (8019a38 <dhcp_parse_reply+0x5e4>)
 8019990:	4822      	ldr	r0, [pc, #136]	; (8019a1c <dhcp_parse_reply+0x5c8>)
 8019992:	f005 ff69 	bl	801f868 <iprintf>
 8019996:	f06f 0305 	mvn.w	r3, #5
 801999a:	e05a      	b.n	8019a52 <dhcp_parse_reply+0x5fe>
        options = (u8_t *)q->payload;
 801999c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801999e:	685b      	ldr	r3, [r3, #4]
 80199a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80199a2:	e002      	b.n	80199aa <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80199a4:	f06f 0301 	mvn.w	r3, #1
 80199a8:	e053      	b.n	8019a52 <dhcp_parse_reply+0x5fe>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80199aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	d00a      	beq.n	80199c6 <dhcp_parse_reply+0x572>
 80199b0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80199b2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80199b4:	429a      	cmp	r2, r3
 80199b6:	d206      	bcs.n	80199c6 <dhcp_parse_reply+0x572>
 80199b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80199ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80199bc:	4413      	add	r3, r2
 80199be:	781b      	ldrb	r3, [r3, #0]
 80199c0:	2bff      	cmp	r3, #255	; 0xff
 80199c2:	f47f ad8a 	bne.w	80194da <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80199c6:	4b18      	ldr	r3, [pc, #96]	; (8019a28 <dhcp_parse_reply+0x5d4>)
 80199c8:	781b      	ldrb	r3, [r3, #0]
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d018      	beq.n	8019a00 <dhcp_parse_reply+0x5ac>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80199ce:	4b18      	ldr	r3, [pc, #96]	; (8019a30 <dhcp_parse_reply+0x5dc>)
 80199d0:	681b      	ldr	r3, [r3, #0]
 80199d2:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80199d4:	4b14      	ldr	r3, [pc, #80]	; (8019a28 <dhcp_parse_reply+0x5d4>)
 80199d6:	2200      	movs	r2, #0
 80199d8:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80199da:	68fb      	ldr	r3, [r7, #12]
 80199dc:	2b01      	cmp	r3, #1
 80199de:	d102      	bne.n	80199e6 <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 80199e0:	2301      	movs	r3, #1
 80199e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80199e4:	e00c      	b.n	8019a00 <dhcp_parse_reply+0x5ac>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	2b02      	cmp	r3, #2
 80199ea:	d102      	bne.n	80199f2 <dhcp_parse_reply+0x59e>
      parse_sname_as_options = 1;
 80199ec:	2301      	movs	r3, #1
 80199ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80199f0:	e006      	b.n	8019a00 <dhcp_parse_reply+0x5ac>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80199f2:	68fb      	ldr	r3, [r7, #12]
 80199f4:	2b03      	cmp	r3, #3
 80199f6:	d103      	bne.n	8019a00 <dhcp_parse_reply+0x5ac>
      parse_sname_as_options = 1;
 80199f8:	2301      	movs	r3, #1
 80199fa:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80199fc:	2301      	movs	r3, #1
 80199fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8019a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d01a      	beq.n	8019a3c <dhcp_parse_reply+0x5e8>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8019a06:	2300      	movs	r3, #0
 8019a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8019a0a:	236c      	movs	r3, #108	; 0x6c
 8019a0c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8019a0e:	23ec      	movs	r3, #236	; 0xec
 8019a10:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8019a12:	e53c      	b.n	801948e <dhcp_parse_reply+0x3a>
 8019a14:	08024cb4 	.word	0x08024cb4
 8019a18:	08024f6c 	.word	0x08024f6c
 8019a1c:	08024d14 	.word	0x08024d14
 8019a20:	08024f3c 	.word	0x08024f3c
 8019a24:	08024f90 	.word	0x08024f90
 8019a28:	20008958 	.word	0x20008958
 8019a2c:	08024fa4 	.word	0x08024fa4
 8019a30:	20008964 	.word	0x20008964
 8019a34:	08024fbc 	.word	0x08024fbc
 8019a38:	08024fd0 	.word	0x08024fd0
  } else if (parse_sname_as_options) {
 8019a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d006      	beq.n	8019a50 <dhcp_parse_reply+0x5fc>
    parse_sname_as_options = 0;
 8019a42:	2300      	movs	r3, #0
 8019a44:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8019a46:	232c      	movs	r3, #44	; 0x2c
 8019a48:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8019a4a:	236c      	movs	r3, #108	; 0x6c
 8019a4c:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8019a4e:	e51e      	b.n	801948e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8019a50:	2300      	movs	r3, #0
}
 8019a52:	4618      	mov	r0, r3
 8019a54:	3740      	adds	r7, #64	; 0x40
 8019a56:	46bd      	mov	sp, r7
 8019a58:	bd80      	pop	{r7, pc}
 8019a5a:	bf00      	nop

08019a5c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8019a5c:	b580      	push	{r7, lr}
 8019a5e:	b08a      	sub	sp, #40	; 0x28
 8019a60:	af00      	add	r7, sp, #0
 8019a62:	60f8      	str	r0, [r7, #12]
 8019a64:	60b9      	str	r1, [r7, #8]
 8019a66:	607a      	str	r2, [r7, #4]
 8019a68:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8019a6a:	4b60      	ldr	r3, [pc, #384]	; (8019bec <dhcp_recv+0x190>)
 8019a6c:	685b      	ldr	r3, [r3, #4]
 8019a6e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019a70:	6a3b      	ldr	r3, [r7, #32]
 8019a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a74:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	685b      	ldr	r3, [r3, #4]
 8019a7a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8019a7c:	69fb      	ldr	r3, [r7, #28]
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	f000 809d 	beq.w	8019bbe <dhcp_recv+0x162>
 8019a84:	69fb      	ldr	r3, [r7, #28]
 8019a86:	791b      	ldrb	r3, [r3, #4]
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	f000 8098 	beq.w	8019bbe <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8019a8e:	687b      	ldr	r3, [r7, #4]
 8019a90:	895b      	ldrh	r3, [r3, #10]
 8019a92:	2b2b      	cmp	r3, #43	; 0x2b
 8019a94:	f240 8095 	bls.w	8019bc2 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8019a98:	69bb      	ldr	r3, [r7, #24]
 8019a9a:	781b      	ldrb	r3, [r3, #0]
 8019a9c:	2b02      	cmp	r3, #2
 8019a9e:	f040 8092 	bne.w	8019bc6 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8019aa2:	2300      	movs	r3, #0
 8019aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019aa8:	e012      	b.n	8019ad0 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8019aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019aae:	6a3a      	ldr	r2, [r7, #32]
 8019ab0:	4413      	add	r3, r2
 8019ab2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8019ab6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019aba:	69b9      	ldr	r1, [r7, #24]
 8019abc:	440b      	add	r3, r1
 8019abe:	7f1b      	ldrb	r3, [r3, #28]
 8019ac0:	429a      	cmp	r2, r3
 8019ac2:	f040 8082 	bne.w	8019bca <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8019ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019aca:	3301      	adds	r3, #1
 8019acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019ad0:	6a3b      	ldr	r3, [r7, #32]
 8019ad2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019ad6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8019ada:	429a      	cmp	r2, r3
 8019adc:	d203      	bcs.n	8019ae6 <dhcp_recv+0x8a>
 8019ade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019ae2:	2b05      	cmp	r3, #5
 8019ae4:	d9e1      	bls.n	8019aaa <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8019ae6:	69bb      	ldr	r3, [r7, #24]
 8019ae8:	685b      	ldr	r3, [r3, #4]
 8019aea:	4618      	mov	r0, r3
 8019aec:	f7f5 f845 	bl	800eb7a <lwip_htonl>
 8019af0:	4602      	mov	r2, r0
 8019af2:	69fb      	ldr	r3, [r7, #28]
 8019af4:	681b      	ldr	r3, [r3, #0]
 8019af6:	429a      	cmp	r2, r3
 8019af8:	d169      	bne.n	8019bce <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8019afa:	69f9      	ldr	r1, [r7, #28]
 8019afc:	6878      	ldr	r0, [r7, #4]
 8019afe:	f7ff fca9 	bl	8019454 <dhcp_parse_reply>
 8019b02:	4603      	mov	r3, r0
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	d164      	bne.n	8019bd2 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8019b08:	4b39      	ldr	r3, [pc, #228]	; (8019bf0 <dhcp_recv+0x194>)
 8019b0a:	785b      	ldrb	r3, [r3, #1]
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	d062      	beq.n	8019bd6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	685b      	ldr	r3, [r3, #4]
 8019b14:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8019b16:	4b37      	ldr	r3, [pc, #220]	; (8019bf4 <dhcp_recv+0x198>)
 8019b18:	685b      	ldr	r3, [r3, #4]
 8019b1a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8019b1c:	7cfb      	ldrb	r3, [r7, #19]
 8019b1e:	2b05      	cmp	r3, #5
 8019b20:	d12a      	bne.n	8019b78 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8019b22:	69fb      	ldr	r3, [r7, #28]
 8019b24:	795b      	ldrb	r3, [r3, #5]
 8019b26:	2b01      	cmp	r3, #1
 8019b28:	d112      	bne.n	8019b50 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8019b2a:	6979      	ldr	r1, [r7, #20]
 8019b2c:	6a38      	ldr	r0, [r7, #32]
 8019b2e:	f7fe fdc7 	bl	80186c0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8019b32:	6a3b      	ldr	r3, [r7, #32]
 8019b34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019b38:	f003 0308 	and.w	r3, r3, #8
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	d003      	beq.n	8019b48 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8019b40:	6a38      	ldr	r0, [r7, #32]
 8019b42:	f7fe fb37 	bl	80181b4 <dhcp_check>
 8019b46:	e049      	b.n	8019bdc <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8019b48:	6a38      	ldr	r0, [r7, #32]
 8019b4a:	f7ff f837 	bl	8018bbc <dhcp_bind>
 8019b4e:	e045      	b.n	8019bdc <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8019b50:	69fb      	ldr	r3, [r7, #28]
 8019b52:	795b      	ldrb	r3, [r3, #5]
 8019b54:	2b03      	cmp	r3, #3
 8019b56:	d007      	beq.n	8019b68 <dhcp_recv+0x10c>
 8019b58:	69fb      	ldr	r3, [r7, #28]
 8019b5a:	795b      	ldrb	r3, [r3, #5]
 8019b5c:	2b04      	cmp	r3, #4
 8019b5e:	d003      	beq.n	8019b68 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8019b60:	69fb      	ldr	r3, [r7, #28]
 8019b62:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8019b64:	2b05      	cmp	r3, #5
 8019b66:	d139      	bne.n	8019bdc <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8019b68:	6979      	ldr	r1, [r7, #20]
 8019b6a:	6a38      	ldr	r0, [r7, #32]
 8019b6c:	f7fe fda8 	bl	80186c0 <dhcp_handle_ack>
      dhcp_bind(netif);
 8019b70:	6a38      	ldr	r0, [r7, #32]
 8019b72:	f7ff f823 	bl	8018bbc <dhcp_bind>
 8019b76:	e031      	b.n	8019bdc <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8019b78:	7cfb      	ldrb	r3, [r7, #19]
 8019b7a:	2b06      	cmp	r3, #6
 8019b7c:	d113      	bne.n	8019ba6 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8019b7e:	69fb      	ldr	r3, [r7, #28]
 8019b80:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8019b82:	2b03      	cmp	r3, #3
 8019b84:	d00b      	beq.n	8019b9e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8019b86:	69fb      	ldr	r3, [r7, #28]
 8019b88:	795b      	ldrb	r3, [r3, #5]
 8019b8a:	2b01      	cmp	r3, #1
 8019b8c:	d007      	beq.n	8019b9e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8019b8e:	69fb      	ldr	r3, [r7, #28]
 8019b90:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8019b92:	2b04      	cmp	r3, #4
 8019b94:	d003      	beq.n	8019b9e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8019b96:	69fb      	ldr	r3, [r7, #28]
 8019b98:	795b      	ldrb	r3, [r3, #5]
 8019b9a:	2b05      	cmp	r3, #5
 8019b9c:	d103      	bne.n	8019ba6 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8019b9e:	6a38      	ldr	r0, [r7, #32]
 8019ba0:	f7fe faee 	bl	8018180 <dhcp_handle_nak>
 8019ba4:	e01a      	b.n	8019bdc <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8019ba6:	7cfb      	ldrb	r3, [r7, #19]
 8019ba8:	2b02      	cmp	r3, #2
 8019baa:	d116      	bne.n	8019bda <dhcp_recv+0x17e>
 8019bac:	69fb      	ldr	r3, [r7, #28]
 8019bae:	795b      	ldrb	r3, [r3, #5]
 8019bb0:	2b06      	cmp	r3, #6
 8019bb2:	d112      	bne.n	8019bda <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8019bb4:	6979      	ldr	r1, [r7, #20]
 8019bb6:	6a38      	ldr	r0, [r7, #32]
 8019bb8:	f7fe fb30 	bl	801821c <dhcp_handle_offer>
 8019bbc:	e00e      	b.n	8019bdc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019bbe:	bf00      	nop
 8019bc0:	e00c      	b.n	8019bdc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019bc2:	bf00      	nop
 8019bc4:	e00a      	b.n	8019bdc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019bc6:	bf00      	nop
 8019bc8:	e008      	b.n	8019bdc <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8019bca:	bf00      	nop
 8019bcc:	e006      	b.n	8019bdc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019bce:	bf00      	nop
 8019bd0:	e004      	b.n	8019bdc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019bd2:	bf00      	nop
 8019bd4:	e002      	b.n	8019bdc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019bd6:	bf00      	nop
 8019bd8:	e000      	b.n	8019bdc <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8019bda:	bf00      	nop
  pbuf_free(p);
 8019bdc:	6878      	ldr	r0, [r7, #4]
 8019bde:	f7f6 fec7 	bl	8010970 <pbuf_free>
}
 8019be2:	bf00      	nop
 8019be4:	3728      	adds	r7, #40	; 0x28
 8019be6:	46bd      	mov	sp, r7
 8019be8:	bd80      	pop	{r7, pc}
 8019bea:	bf00      	nop
 8019bec:	200050c0 	.word	0x200050c0
 8019bf0:	20008958 	.word	0x20008958
 8019bf4:	20008964 	.word	0x20008964

08019bf8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8019bf8:	b580      	push	{r7, lr}
 8019bfa:	b088      	sub	sp, #32
 8019bfc:	af00      	add	r7, sp, #0
 8019bfe:	60f8      	str	r0, [r7, #12]
 8019c00:	60b9      	str	r1, [r7, #8]
 8019c02:	603b      	str	r3, [r7, #0]
 8019c04:	4613      	mov	r3, r2
 8019c06:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8019c08:	68fb      	ldr	r3, [r7, #12]
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d108      	bne.n	8019c20 <dhcp_create_msg+0x28>
 8019c0e:	4b5f      	ldr	r3, [pc, #380]	; (8019d8c <dhcp_create_msg+0x194>)
 8019c10:	f240 7269 	movw	r2, #1897	; 0x769
 8019c14:	495e      	ldr	r1, [pc, #376]	; (8019d90 <dhcp_create_msg+0x198>)
 8019c16:	485f      	ldr	r0, [pc, #380]	; (8019d94 <dhcp_create_msg+0x19c>)
 8019c18:	f005 fe26 	bl	801f868 <iprintf>
 8019c1c:	2300      	movs	r3, #0
 8019c1e:	e0b1      	b.n	8019d84 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8019c20:	68bb      	ldr	r3, [r7, #8]
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d108      	bne.n	8019c38 <dhcp_create_msg+0x40>
 8019c26:	4b59      	ldr	r3, [pc, #356]	; (8019d8c <dhcp_create_msg+0x194>)
 8019c28:	f240 726a 	movw	r2, #1898	; 0x76a
 8019c2c:	495a      	ldr	r1, [pc, #360]	; (8019d98 <dhcp_create_msg+0x1a0>)
 8019c2e:	4859      	ldr	r0, [pc, #356]	; (8019d94 <dhcp_create_msg+0x19c>)
 8019c30:	f005 fe1a 	bl	801f868 <iprintf>
 8019c34:	2300      	movs	r3, #0
 8019c36:	e0a5      	b.n	8019d84 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8019c38:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019c3c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8019c40:	2036      	movs	r0, #54	; 0x36
 8019c42:	f7f6 fb7f 	bl	8010344 <pbuf_alloc>
 8019c46:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8019c48:	69bb      	ldr	r3, [r7, #24]
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	d101      	bne.n	8019c52 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8019c4e:	2300      	movs	r3, #0
 8019c50:	e098      	b.n	8019d84 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8019c52:	69bb      	ldr	r3, [r7, #24]
 8019c54:	895b      	ldrh	r3, [r3, #10]
 8019c56:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8019c5a:	d206      	bcs.n	8019c6a <dhcp_create_msg+0x72>
 8019c5c:	4b4b      	ldr	r3, [pc, #300]	; (8019d8c <dhcp_create_msg+0x194>)
 8019c5e:	f240 7271 	movw	r2, #1905	; 0x771
 8019c62:	494e      	ldr	r1, [pc, #312]	; (8019d9c <dhcp_create_msg+0x1a4>)
 8019c64:	484b      	ldr	r0, [pc, #300]	; (8019d94 <dhcp_create_msg+0x19c>)
 8019c66:	f005 fdff 	bl	801f868 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8019c6a:	79fb      	ldrb	r3, [r7, #7]
 8019c6c:	2b03      	cmp	r3, #3
 8019c6e:	d103      	bne.n	8019c78 <dhcp_create_msg+0x80>
 8019c70:	68bb      	ldr	r3, [r7, #8]
 8019c72:	795b      	ldrb	r3, [r3, #5]
 8019c74:	2b03      	cmp	r3, #3
 8019c76:	d10d      	bne.n	8019c94 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8019c78:	68bb      	ldr	r3, [r7, #8]
 8019c7a:	799b      	ldrb	r3, [r3, #6]
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	d105      	bne.n	8019c8c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8019c80:	f005 fe0a 	bl	801f898 <rand>
 8019c84:	4603      	mov	r3, r0
 8019c86:	461a      	mov	r2, r3
 8019c88:	4b45      	ldr	r3, [pc, #276]	; (8019da0 <dhcp_create_msg+0x1a8>)
 8019c8a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8019c8c:	4b44      	ldr	r3, [pc, #272]	; (8019da0 <dhcp_create_msg+0x1a8>)
 8019c8e:	681a      	ldr	r2, [r3, #0]
 8019c90:	68bb      	ldr	r3, [r7, #8]
 8019c92:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8019c94:	69bb      	ldr	r3, [r7, #24]
 8019c96:	685b      	ldr	r3, [r3, #4]
 8019c98:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8019c9a:	f44f 729a 	mov.w	r2, #308	; 0x134
 8019c9e:	2100      	movs	r1, #0
 8019ca0:	6978      	ldr	r0, [r7, #20]
 8019ca2:	f004 ff6b 	bl	801eb7c <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8019ca6:	697b      	ldr	r3, [r7, #20]
 8019ca8:	2201      	movs	r2, #1
 8019caa:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8019cac:	697b      	ldr	r3, [r7, #20]
 8019cae:	2201      	movs	r2, #1
 8019cb0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8019cb2:	68fb      	ldr	r3, [r7, #12]
 8019cb4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8019cb8:	697b      	ldr	r3, [r7, #20]
 8019cba:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8019cbc:	68bb      	ldr	r3, [r7, #8]
 8019cbe:	681b      	ldr	r3, [r3, #0]
 8019cc0:	4618      	mov	r0, r3
 8019cc2:	f7f4 ff5a 	bl	800eb7a <lwip_htonl>
 8019cc6:	4602      	mov	r2, r0
 8019cc8:	697b      	ldr	r3, [r7, #20]
 8019cca:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8019ccc:	79fb      	ldrb	r3, [r7, #7]
 8019cce:	2b08      	cmp	r3, #8
 8019cd0:	d010      	beq.n	8019cf4 <dhcp_create_msg+0xfc>
 8019cd2:	79fb      	ldrb	r3, [r7, #7]
 8019cd4:	2b04      	cmp	r3, #4
 8019cd6:	d00d      	beq.n	8019cf4 <dhcp_create_msg+0xfc>
 8019cd8:	79fb      	ldrb	r3, [r7, #7]
 8019cda:	2b07      	cmp	r3, #7
 8019cdc:	d00a      	beq.n	8019cf4 <dhcp_create_msg+0xfc>
 8019cde:	79fb      	ldrb	r3, [r7, #7]
 8019ce0:	2b03      	cmp	r3, #3
 8019ce2:	d10c      	bne.n	8019cfe <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8019ce4:	68bb      	ldr	r3, [r7, #8]
 8019ce6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8019ce8:	2b05      	cmp	r3, #5
 8019cea:	d003      	beq.n	8019cf4 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8019cec:	68bb      	ldr	r3, [r7, #8]
 8019cee:	795b      	ldrb	r3, [r3, #5]
 8019cf0:	2b04      	cmp	r3, #4
 8019cf2:	d104      	bne.n	8019cfe <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8019cf4:	68fb      	ldr	r3, [r7, #12]
 8019cf6:	3304      	adds	r3, #4
 8019cf8:	681a      	ldr	r2, [r3, #0]
 8019cfa:	697b      	ldr	r3, [r7, #20]
 8019cfc:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8019cfe:	2300      	movs	r3, #0
 8019d00:	83fb      	strh	r3, [r7, #30]
 8019d02:	e00c      	b.n	8019d1e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8019d04:	8bfa      	ldrh	r2, [r7, #30]
 8019d06:	8bfb      	ldrh	r3, [r7, #30]
 8019d08:	68f9      	ldr	r1, [r7, #12]
 8019d0a:	440a      	add	r2, r1
 8019d0c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8019d10:	697a      	ldr	r2, [r7, #20]
 8019d12:	4413      	add	r3, r2
 8019d14:	460a      	mov	r2, r1
 8019d16:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8019d18:	8bfb      	ldrh	r3, [r7, #30]
 8019d1a:	3301      	adds	r3, #1
 8019d1c:	83fb      	strh	r3, [r7, #30]
 8019d1e:	8bfb      	ldrh	r3, [r7, #30]
 8019d20:	2b05      	cmp	r3, #5
 8019d22:	d9ef      	bls.n	8019d04 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8019d24:	697b      	ldr	r3, [r7, #20]
 8019d26:	2200      	movs	r2, #0
 8019d28:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8019d2c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8019d30:	2200      	movs	r2, #0
 8019d32:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8019d36:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8019d3a:	2200      	movs	r2, #0
 8019d3c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8019d40:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8019d44:	2200      	movs	r2, #0
 8019d46:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8019d4a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8019d4e:	697b      	ldr	r3, [r7, #20]
 8019d50:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019d54:	2301      	movs	r3, #1
 8019d56:	2235      	movs	r2, #53	; 0x35
 8019d58:	2000      	movs	r0, #0
 8019d5a:	f7ff faab 	bl	80192b4 <dhcp_option>
 8019d5e:	4603      	mov	r3, r0
 8019d60:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8019d62:	697b      	ldr	r3, [r7, #20]
 8019d64:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019d68:	79fa      	ldrb	r2, [r7, #7]
 8019d6a:	8a7b      	ldrh	r3, [r7, #18]
 8019d6c:	4618      	mov	r0, r3
 8019d6e:	f7ff fad5 	bl	801931c <dhcp_option_byte>
 8019d72:	4603      	mov	r3, r0
 8019d74:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8019d76:	683b      	ldr	r3, [r7, #0]
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d002      	beq.n	8019d82 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8019d7c:	683b      	ldr	r3, [r7, #0]
 8019d7e:	8a7a      	ldrh	r2, [r7, #18]
 8019d80:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8019d82:	69bb      	ldr	r3, [r7, #24]
}
 8019d84:	4618      	mov	r0, r3
 8019d86:	3720      	adds	r7, #32
 8019d88:	46bd      	mov	sp, r7
 8019d8a:	bd80      	pop	{r7, pc}
 8019d8c:	08024cb4 	.word	0x08024cb4
 8019d90:	08024fe4 	.word	0x08024fe4
 8019d94:	08024d14 	.word	0x08024d14
 8019d98:	08025004 	.word	0x08025004
 8019d9c:	08025024 	.word	0x08025024
 8019da0:	20001964 	.word	0x20001964

08019da4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8019da4:	b580      	push	{r7, lr}
 8019da6:	b084      	sub	sp, #16
 8019da8:	af00      	add	r7, sp, #0
 8019daa:	4603      	mov	r3, r0
 8019dac:	60b9      	str	r1, [r7, #8]
 8019dae:	607a      	str	r2, [r7, #4]
 8019db0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8019db2:	89fb      	ldrh	r3, [r7, #14]
 8019db4:	1c5a      	adds	r2, r3, #1
 8019db6:	81fa      	strh	r2, [r7, #14]
 8019db8:	461a      	mov	r2, r3
 8019dba:	68bb      	ldr	r3, [r7, #8]
 8019dbc:	4413      	add	r3, r2
 8019dbe:	22ff      	movs	r2, #255	; 0xff
 8019dc0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8019dc2:	e007      	b.n	8019dd4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8019dc4:	89fb      	ldrh	r3, [r7, #14]
 8019dc6:	1c5a      	adds	r2, r3, #1
 8019dc8:	81fa      	strh	r2, [r7, #14]
 8019dca:	461a      	mov	r2, r3
 8019dcc:	68bb      	ldr	r3, [r7, #8]
 8019dce:	4413      	add	r3, r2
 8019dd0:	2200      	movs	r2, #0
 8019dd2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8019dd4:	89fb      	ldrh	r3, [r7, #14]
 8019dd6:	2b43      	cmp	r3, #67	; 0x43
 8019dd8:	d904      	bls.n	8019de4 <dhcp_option_trailer+0x40>
 8019dda:	89fb      	ldrh	r3, [r7, #14]
 8019ddc:	f003 0303 	and.w	r3, r3, #3
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	d002      	beq.n	8019dea <dhcp_option_trailer+0x46>
 8019de4:	89fb      	ldrh	r3, [r7, #14]
 8019de6:	2b43      	cmp	r3, #67	; 0x43
 8019de8:	d9ec      	bls.n	8019dc4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8019dea:	89fb      	ldrh	r3, [r7, #14]
 8019dec:	33f0      	adds	r3, #240	; 0xf0
 8019dee:	b29b      	uxth	r3, r3
 8019df0:	4619      	mov	r1, r3
 8019df2:	6878      	ldr	r0, [r7, #4]
 8019df4:	f7f6 fc04 	bl	8010600 <pbuf_realloc>
}
 8019df8:	bf00      	nop
 8019dfa:	3710      	adds	r7, #16
 8019dfc:	46bd      	mov	sp, r7
 8019dfe:	bd80      	pop	{r7, pc}

08019e00 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8019e00:	b480      	push	{r7}
 8019e02:	b085      	sub	sp, #20
 8019e04:	af00      	add	r7, sp, #0
 8019e06:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	d017      	beq.n	8019e3e <dhcp_supplied_address+0x3e>
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	d013      	beq.n	8019e3e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e1a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8019e1c:	68fb      	ldr	r3, [r7, #12]
 8019e1e:	795b      	ldrb	r3, [r3, #5]
 8019e20:	2b0a      	cmp	r3, #10
 8019e22:	d007      	beq.n	8019e34 <dhcp_supplied_address+0x34>
 8019e24:	68fb      	ldr	r3, [r7, #12]
 8019e26:	795b      	ldrb	r3, [r3, #5]
 8019e28:	2b05      	cmp	r3, #5
 8019e2a:	d003      	beq.n	8019e34 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8019e2c:	68fb      	ldr	r3, [r7, #12]
 8019e2e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8019e30:	2b04      	cmp	r3, #4
 8019e32:	d101      	bne.n	8019e38 <dhcp_supplied_address+0x38>
 8019e34:	2301      	movs	r3, #1
 8019e36:	e000      	b.n	8019e3a <dhcp_supplied_address+0x3a>
 8019e38:	2300      	movs	r3, #0
 8019e3a:	b2db      	uxtb	r3, r3
 8019e3c:	e000      	b.n	8019e40 <dhcp_supplied_address+0x40>
  }
  return 0;
 8019e3e:	2300      	movs	r3, #0
}
 8019e40:	4618      	mov	r0, r3
 8019e42:	3714      	adds	r7, #20
 8019e44:	46bd      	mov	sp, r7
 8019e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e4a:	4770      	bx	lr

08019e4c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8019e4c:	b580      	push	{r7, lr}
 8019e4e:	b082      	sub	sp, #8
 8019e50:	af00      	add	r7, sp, #0
 8019e52:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8019e54:	4915      	ldr	r1, [pc, #84]	; (8019eac <etharp_free_entry+0x60>)
 8019e56:	687a      	ldr	r2, [r7, #4]
 8019e58:	4613      	mov	r3, r2
 8019e5a:	005b      	lsls	r3, r3, #1
 8019e5c:	4413      	add	r3, r2
 8019e5e:	00db      	lsls	r3, r3, #3
 8019e60:	440b      	add	r3, r1
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d013      	beq.n	8019e90 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8019e68:	4910      	ldr	r1, [pc, #64]	; (8019eac <etharp_free_entry+0x60>)
 8019e6a:	687a      	ldr	r2, [r7, #4]
 8019e6c:	4613      	mov	r3, r2
 8019e6e:	005b      	lsls	r3, r3, #1
 8019e70:	4413      	add	r3, r2
 8019e72:	00db      	lsls	r3, r3, #3
 8019e74:	440b      	add	r3, r1
 8019e76:	681b      	ldr	r3, [r3, #0]
 8019e78:	4618      	mov	r0, r3
 8019e7a:	f7f6 fd79 	bl	8010970 <pbuf_free>
    arp_table[i].q = NULL;
 8019e7e:	490b      	ldr	r1, [pc, #44]	; (8019eac <etharp_free_entry+0x60>)
 8019e80:	687a      	ldr	r2, [r7, #4]
 8019e82:	4613      	mov	r3, r2
 8019e84:	005b      	lsls	r3, r3, #1
 8019e86:	4413      	add	r3, r2
 8019e88:	00db      	lsls	r3, r3, #3
 8019e8a:	440b      	add	r3, r1
 8019e8c:	2200      	movs	r2, #0
 8019e8e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8019e90:	4906      	ldr	r1, [pc, #24]	; (8019eac <etharp_free_entry+0x60>)
 8019e92:	687a      	ldr	r2, [r7, #4]
 8019e94:	4613      	mov	r3, r2
 8019e96:	005b      	lsls	r3, r3, #1
 8019e98:	4413      	add	r3, r2
 8019e9a:	00db      	lsls	r3, r3, #3
 8019e9c:	440b      	add	r3, r1
 8019e9e:	3314      	adds	r3, #20
 8019ea0:	2200      	movs	r2, #0
 8019ea2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8019ea4:	bf00      	nop
 8019ea6:	3708      	adds	r7, #8
 8019ea8:	46bd      	mov	sp, r7
 8019eaa:	bd80      	pop	{r7, pc}
 8019eac:	20001968 	.word	0x20001968

08019eb0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8019eb0:	b580      	push	{r7, lr}
 8019eb2:	b082      	sub	sp, #8
 8019eb4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019eb6:	2300      	movs	r3, #0
 8019eb8:	607b      	str	r3, [r7, #4]
 8019eba:	e096      	b.n	8019fea <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8019ebc:	494f      	ldr	r1, [pc, #316]	; (8019ffc <etharp_tmr+0x14c>)
 8019ebe:	687a      	ldr	r2, [r7, #4]
 8019ec0:	4613      	mov	r3, r2
 8019ec2:	005b      	lsls	r3, r3, #1
 8019ec4:	4413      	add	r3, r2
 8019ec6:	00db      	lsls	r3, r3, #3
 8019ec8:	440b      	add	r3, r1
 8019eca:	3314      	adds	r3, #20
 8019ecc:	781b      	ldrb	r3, [r3, #0]
 8019ece:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8019ed0:	78fb      	ldrb	r3, [r7, #3]
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	f000 8086 	beq.w	8019fe4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8019ed8:	4948      	ldr	r1, [pc, #288]	; (8019ffc <etharp_tmr+0x14c>)
 8019eda:	687a      	ldr	r2, [r7, #4]
 8019edc:	4613      	mov	r3, r2
 8019ede:	005b      	lsls	r3, r3, #1
 8019ee0:	4413      	add	r3, r2
 8019ee2:	00db      	lsls	r3, r3, #3
 8019ee4:	440b      	add	r3, r1
 8019ee6:	3312      	adds	r3, #18
 8019ee8:	881b      	ldrh	r3, [r3, #0]
 8019eea:	3301      	adds	r3, #1
 8019eec:	b298      	uxth	r0, r3
 8019eee:	4943      	ldr	r1, [pc, #268]	; (8019ffc <etharp_tmr+0x14c>)
 8019ef0:	687a      	ldr	r2, [r7, #4]
 8019ef2:	4613      	mov	r3, r2
 8019ef4:	005b      	lsls	r3, r3, #1
 8019ef6:	4413      	add	r3, r2
 8019ef8:	00db      	lsls	r3, r3, #3
 8019efa:	440b      	add	r3, r1
 8019efc:	3312      	adds	r3, #18
 8019efe:	4602      	mov	r2, r0
 8019f00:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019f02:	493e      	ldr	r1, [pc, #248]	; (8019ffc <etharp_tmr+0x14c>)
 8019f04:	687a      	ldr	r2, [r7, #4]
 8019f06:	4613      	mov	r3, r2
 8019f08:	005b      	lsls	r3, r3, #1
 8019f0a:	4413      	add	r3, r2
 8019f0c:	00db      	lsls	r3, r3, #3
 8019f0e:	440b      	add	r3, r1
 8019f10:	3312      	adds	r3, #18
 8019f12:	881b      	ldrh	r3, [r3, #0]
 8019f14:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8019f18:	d215      	bcs.n	8019f46 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019f1a:	4938      	ldr	r1, [pc, #224]	; (8019ffc <etharp_tmr+0x14c>)
 8019f1c:	687a      	ldr	r2, [r7, #4]
 8019f1e:	4613      	mov	r3, r2
 8019f20:	005b      	lsls	r3, r3, #1
 8019f22:	4413      	add	r3, r2
 8019f24:	00db      	lsls	r3, r3, #3
 8019f26:	440b      	add	r3, r1
 8019f28:	3314      	adds	r3, #20
 8019f2a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019f2c:	2b01      	cmp	r3, #1
 8019f2e:	d10e      	bne.n	8019f4e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8019f30:	4932      	ldr	r1, [pc, #200]	; (8019ffc <etharp_tmr+0x14c>)
 8019f32:	687a      	ldr	r2, [r7, #4]
 8019f34:	4613      	mov	r3, r2
 8019f36:	005b      	lsls	r3, r3, #1
 8019f38:	4413      	add	r3, r2
 8019f3a:	00db      	lsls	r3, r3, #3
 8019f3c:	440b      	add	r3, r1
 8019f3e:	3312      	adds	r3, #18
 8019f40:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019f42:	2b04      	cmp	r3, #4
 8019f44:	d903      	bls.n	8019f4e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8019f46:	6878      	ldr	r0, [r7, #4]
 8019f48:	f7ff ff80 	bl	8019e4c <etharp_free_entry>
 8019f4c:	e04a      	b.n	8019fe4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8019f4e:	492b      	ldr	r1, [pc, #172]	; (8019ffc <etharp_tmr+0x14c>)
 8019f50:	687a      	ldr	r2, [r7, #4]
 8019f52:	4613      	mov	r3, r2
 8019f54:	005b      	lsls	r3, r3, #1
 8019f56:	4413      	add	r3, r2
 8019f58:	00db      	lsls	r3, r3, #3
 8019f5a:	440b      	add	r3, r1
 8019f5c:	3314      	adds	r3, #20
 8019f5e:	781b      	ldrb	r3, [r3, #0]
 8019f60:	2b03      	cmp	r3, #3
 8019f62:	d10a      	bne.n	8019f7a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8019f64:	4925      	ldr	r1, [pc, #148]	; (8019ffc <etharp_tmr+0x14c>)
 8019f66:	687a      	ldr	r2, [r7, #4]
 8019f68:	4613      	mov	r3, r2
 8019f6a:	005b      	lsls	r3, r3, #1
 8019f6c:	4413      	add	r3, r2
 8019f6e:	00db      	lsls	r3, r3, #3
 8019f70:	440b      	add	r3, r1
 8019f72:	3314      	adds	r3, #20
 8019f74:	2204      	movs	r2, #4
 8019f76:	701a      	strb	r2, [r3, #0]
 8019f78:	e034      	b.n	8019fe4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8019f7a:	4920      	ldr	r1, [pc, #128]	; (8019ffc <etharp_tmr+0x14c>)
 8019f7c:	687a      	ldr	r2, [r7, #4]
 8019f7e:	4613      	mov	r3, r2
 8019f80:	005b      	lsls	r3, r3, #1
 8019f82:	4413      	add	r3, r2
 8019f84:	00db      	lsls	r3, r3, #3
 8019f86:	440b      	add	r3, r1
 8019f88:	3314      	adds	r3, #20
 8019f8a:	781b      	ldrb	r3, [r3, #0]
 8019f8c:	2b04      	cmp	r3, #4
 8019f8e:	d10a      	bne.n	8019fa6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8019f90:	491a      	ldr	r1, [pc, #104]	; (8019ffc <etharp_tmr+0x14c>)
 8019f92:	687a      	ldr	r2, [r7, #4]
 8019f94:	4613      	mov	r3, r2
 8019f96:	005b      	lsls	r3, r3, #1
 8019f98:	4413      	add	r3, r2
 8019f9a:	00db      	lsls	r3, r3, #3
 8019f9c:	440b      	add	r3, r1
 8019f9e:	3314      	adds	r3, #20
 8019fa0:	2202      	movs	r2, #2
 8019fa2:	701a      	strb	r2, [r3, #0]
 8019fa4:	e01e      	b.n	8019fe4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019fa6:	4915      	ldr	r1, [pc, #84]	; (8019ffc <etharp_tmr+0x14c>)
 8019fa8:	687a      	ldr	r2, [r7, #4]
 8019faa:	4613      	mov	r3, r2
 8019fac:	005b      	lsls	r3, r3, #1
 8019fae:	4413      	add	r3, r2
 8019fb0:	00db      	lsls	r3, r3, #3
 8019fb2:	440b      	add	r3, r1
 8019fb4:	3314      	adds	r3, #20
 8019fb6:	781b      	ldrb	r3, [r3, #0]
 8019fb8:	2b01      	cmp	r3, #1
 8019fba:	d113      	bne.n	8019fe4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8019fbc:	490f      	ldr	r1, [pc, #60]	; (8019ffc <etharp_tmr+0x14c>)
 8019fbe:	687a      	ldr	r2, [r7, #4]
 8019fc0:	4613      	mov	r3, r2
 8019fc2:	005b      	lsls	r3, r3, #1
 8019fc4:	4413      	add	r3, r2
 8019fc6:	00db      	lsls	r3, r3, #3
 8019fc8:	440b      	add	r3, r1
 8019fca:	3308      	adds	r3, #8
 8019fcc:	6818      	ldr	r0, [r3, #0]
 8019fce:	687a      	ldr	r2, [r7, #4]
 8019fd0:	4613      	mov	r3, r2
 8019fd2:	005b      	lsls	r3, r3, #1
 8019fd4:	4413      	add	r3, r2
 8019fd6:	00db      	lsls	r3, r3, #3
 8019fd8:	4a08      	ldr	r2, [pc, #32]	; (8019ffc <etharp_tmr+0x14c>)
 8019fda:	4413      	add	r3, r2
 8019fdc:	3304      	adds	r3, #4
 8019fde:	4619      	mov	r1, r3
 8019fe0:	f000 fe72 	bl	801acc8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	3301      	adds	r3, #1
 8019fe8:	607b      	str	r3, [r7, #4]
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	2b09      	cmp	r3, #9
 8019fee:	f77f af65 	ble.w	8019ebc <etharp_tmr+0xc>
      }
    }
  }
}
 8019ff2:	bf00      	nop
 8019ff4:	bf00      	nop
 8019ff6:	3708      	adds	r7, #8
 8019ff8:	46bd      	mov	sp, r7
 8019ffa:	bd80      	pop	{r7, pc}
 8019ffc:	20001968 	.word	0x20001968

0801a000 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801a000:	b580      	push	{r7, lr}
 801a002:	b08a      	sub	sp, #40	; 0x28
 801a004:	af00      	add	r7, sp, #0
 801a006:	60f8      	str	r0, [r7, #12]
 801a008:	460b      	mov	r3, r1
 801a00a:	607a      	str	r2, [r7, #4]
 801a00c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801a00e:	230a      	movs	r3, #10
 801a010:	84fb      	strh	r3, [r7, #38]	; 0x26
 801a012:	230a      	movs	r3, #10
 801a014:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801a016:	230a      	movs	r3, #10
 801a018:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801a01a:	2300      	movs	r3, #0
 801a01c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801a01e:	230a      	movs	r3, #10
 801a020:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801a022:	2300      	movs	r3, #0
 801a024:	83bb      	strh	r3, [r7, #28]
 801a026:	2300      	movs	r3, #0
 801a028:	837b      	strh	r3, [r7, #26]
 801a02a:	2300      	movs	r3, #0
 801a02c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a02e:	2300      	movs	r3, #0
 801a030:	843b      	strh	r3, [r7, #32]
 801a032:	e0ae      	b.n	801a192 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801a034:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a038:	49a6      	ldr	r1, [pc, #664]	; (801a2d4 <etharp_find_entry+0x2d4>)
 801a03a:	4613      	mov	r3, r2
 801a03c:	005b      	lsls	r3, r3, #1
 801a03e:	4413      	add	r3, r2
 801a040:	00db      	lsls	r3, r3, #3
 801a042:	440b      	add	r3, r1
 801a044:	3314      	adds	r3, #20
 801a046:	781b      	ldrb	r3, [r3, #0]
 801a048:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801a04a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801a04e:	2b0a      	cmp	r3, #10
 801a050:	d105      	bne.n	801a05e <etharp_find_entry+0x5e>
 801a052:	7dfb      	ldrb	r3, [r7, #23]
 801a054:	2b00      	cmp	r3, #0
 801a056:	d102      	bne.n	801a05e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801a058:	8c3b      	ldrh	r3, [r7, #32]
 801a05a:	847b      	strh	r3, [r7, #34]	; 0x22
 801a05c:	e095      	b.n	801a18a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801a05e:	7dfb      	ldrb	r3, [r7, #23]
 801a060:	2b00      	cmp	r3, #0
 801a062:	f000 8092 	beq.w	801a18a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801a066:	7dfb      	ldrb	r3, [r7, #23]
 801a068:	2b01      	cmp	r3, #1
 801a06a:	d009      	beq.n	801a080 <etharp_find_entry+0x80>
 801a06c:	7dfb      	ldrb	r3, [r7, #23]
 801a06e:	2b01      	cmp	r3, #1
 801a070:	d806      	bhi.n	801a080 <etharp_find_entry+0x80>
 801a072:	4b99      	ldr	r3, [pc, #612]	; (801a2d8 <etharp_find_entry+0x2d8>)
 801a074:	f240 1223 	movw	r2, #291	; 0x123
 801a078:	4998      	ldr	r1, [pc, #608]	; (801a2dc <etharp_find_entry+0x2dc>)
 801a07a:	4899      	ldr	r0, [pc, #612]	; (801a2e0 <etharp_find_entry+0x2e0>)
 801a07c:	f005 fbf4 	bl	801f868 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801a080:	68fb      	ldr	r3, [r7, #12]
 801a082:	2b00      	cmp	r3, #0
 801a084:	d020      	beq.n	801a0c8 <etharp_find_entry+0xc8>
 801a086:	68fb      	ldr	r3, [r7, #12]
 801a088:	6819      	ldr	r1, [r3, #0]
 801a08a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a08e:	4891      	ldr	r0, [pc, #580]	; (801a2d4 <etharp_find_entry+0x2d4>)
 801a090:	4613      	mov	r3, r2
 801a092:	005b      	lsls	r3, r3, #1
 801a094:	4413      	add	r3, r2
 801a096:	00db      	lsls	r3, r3, #3
 801a098:	4403      	add	r3, r0
 801a09a:	3304      	adds	r3, #4
 801a09c:	681b      	ldr	r3, [r3, #0]
 801a09e:	4299      	cmp	r1, r3
 801a0a0:	d112      	bne.n	801a0c8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801a0a2:	687b      	ldr	r3, [r7, #4]
 801a0a4:	2b00      	cmp	r3, #0
 801a0a6:	d00c      	beq.n	801a0c2 <etharp_find_entry+0xc2>
 801a0a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a0ac:	4989      	ldr	r1, [pc, #548]	; (801a2d4 <etharp_find_entry+0x2d4>)
 801a0ae:	4613      	mov	r3, r2
 801a0b0:	005b      	lsls	r3, r3, #1
 801a0b2:	4413      	add	r3, r2
 801a0b4:	00db      	lsls	r3, r3, #3
 801a0b6:	440b      	add	r3, r1
 801a0b8:	3308      	adds	r3, #8
 801a0ba:	681b      	ldr	r3, [r3, #0]
 801a0bc:	687a      	ldr	r2, [r7, #4]
 801a0be:	429a      	cmp	r2, r3
 801a0c0:	d102      	bne.n	801a0c8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801a0c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a0c6:	e100      	b.n	801a2ca <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801a0c8:	7dfb      	ldrb	r3, [r7, #23]
 801a0ca:	2b01      	cmp	r3, #1
 801a0cc:	d140      	bne.n	801a150 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801a0ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a0d2:	4980      	ldr	r1, [pc, #512]	; (801a2d4 <etharp_find_entry+0x2d4>)
 801a0d4:	4613      	mov	r3, r2
 801a0d6:	005b      	lsls	r3, r3, #1
 801a0d8:	4413      	add	r3, r2
 801a0da:	00db      	lsls	r3, r3, #3
 801a0dc:	440b      	add	r3, r1
 801a0de:	681b      	ldr	r3, [r3, #0]
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	d01a      	beq.n	801a11a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801a0e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a0e8:	497a      	ldr	r1, [pc, #488]	; (801a2d4 <etharp_find_entry+0x2d4>)
 801a0ea:	4613      	mov	r3, r2
 801a0ec:	005b      	lsls	r3, r3, #1
 801a0ee:	4413      	add	r3, r2
 801a0f0:	00db      	lsls	r3, r3, #3
 801a0f2:	440b      	add	r3, r1
 801a0f4:	3312      	adds	r3, #18
 801a0f6:	881b      	ldrh	r3, [r3, #0]
 801a0f8:	8bba      	ldrh	r2, [r7, #28]
 801a0fa:	429a      	cmp	r2, r3
 801a0fc:	d845      	bhi.n	801a18a <etharp_find_entry+0x18a>
            old_queue = i;
 801a0fe:	8c3b      	ldrh	r3, [r7, #32]
 801a100:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801a102:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a106:	4973      	ldr	r1, [pc, #460]	; (801a2d4 <etharp_find_entry+0x2d4>)
 801a108:	4613      	mov	r3, r2
 801a10a:	005b      	lsls	r3, r3, #1
 801a10c:	4413      	add	r3, r2
 801a10e:	00db      	lsls	r3, r3, #3
 801a110:	440b      	add	r3, r1
 801a112:	3312      	adds	r3, #18
 801a114:	881b      	ldrh	r3, [r3, #0]
 801a116:	83bb      	strh	r3, [r7, #28]
 801a118:	e037      	b.n	801a18a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801a11a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a11e:	496d      	ldr	r1, [pc, #436]	; (801a2d4 <etharp_find_entry+0x2d4>)
 801a120:	4613      	mov	r3, r2
 801a122:	005b      	lsls	r3, r3, #1
 801a124:	4413      	add	r3, r2
 801a126:	00db      	lsls	r3, r3, #3
 801a128:	440b      	add	r3, r1
 801a12a:	3312      	adds	r3, #18
 801a12c:	881b      	ldrh	r3, [r3, #0]
 801a12e:	8b7a      	ldrh	r2, [r7, #26]
 801a130:	429a      	cmp	r2, r3
 801a132:	d82a      	bhi.n	801a18a <etharp_find_entry+0x18a>
            old_pending = i;
 801a134:	8c3b      	ldrh	r3, [r7, #32]
 801a136:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801a138:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a13c:	4965      	ldr	r1, [pc, #404]	; (801a2d4 <etharp_find_entry+0x2d4>)
 801a13e:	4613      	mov	r3, r2
 801a140:	005b      	lsls	r3, r3, #1
 801a142:	4413      	add	r3, r2
 801a144:	00db      	lsls	r3, r3, #3
 801a146:	440b      	add	r3, r1
 801a148:	3312      	adds	r3, #18
 801a14a:	881b      	ldrh	r3, [r3, #0]
 801a14c:	837b      	strh	r3, [r7, #26]
 801a14e:	e01c      	b.n	801a18a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801a150:	7dfb      	ldrb	r3, [r7, #23]
 801a152:	2b01      	cmp	r3, #1
 801a154:	d919      	bls.n	801a18a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801a156:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a15a:	495e      	ldr	r1, [pc, #376]	; (801a2d4 <etharp_find_entry+0x2d4>)
 801a15c:	4613      	mov	r3, r2
 801a15e:	005b      	lsls	r3, r3, #1
 801a160:	4413      	add	r3, r2
 801a162:	00db      	lsls	r3, r3, #3
 801a164:	440b      	add	r3, r1
 801a166:	3312      	adds	r3, #18
 801a168:	881b      	ldrh	r3, [r3, #0]
 801a16a:	8b3a      	ldrh	r2, [r7, #24]
 801a16c:	429a      	cmp	r2, r3
 801a16e:	d80c      	bhi.n	801a18a <etharp_find_entry+0x18a>
            old_stable = i;
 801a170:	8c3b      	ldrh	r3, [r7, #32]
 801a172:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801a174:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a178:	4956      	ldr	r1, [pc, #344]	; (801a2d4 <etharp_find_entry+0x2d4>)
 801a17a:	4613      	mov	r3, r2
 801a17c:	005b      	lsls	r3, r3, #1
 801a17e:	4413      	add	r3, r2
 801a180:	00db      	lsls	r3, r3, #3
 801a182:	440b      	add	r3, r1
 801a184:	3312      	adds	r3, #18
 801a186:	881b      	ldrh	r3, [r3, #0]
 801a188:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a18a:	8c3b      	ldrh	r3, [r7, #32]
 801a18c:	3301      	adds	r3, #1
 801a18e:	b29b      	uxth	r3, r3
 801a190:	843b      	strh	r3, [r7, #32]
 801a192:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a196:	2b09      	cmp	r3, #9
 801a198:	f77f af4c 	ble.w	801a034 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801a19c:	7afb      	ldrb	r3, [r7, #11]
 801a19e:	f003 0302 	and.w	r3, r3, #2
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	d108      	bne.n	801a1b8 <etharp_find_entry+0x1b8>
 801a1a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801a1aa:	2b0a      	cmp	r3, #10
 801a1ac:	d107      	bne.n	801a1be <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801a1ae:	7afb      	ldrb	r3, [r7, #11]
 801a1b0:	f003 0301 	and.w	r3, r3, #1
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d102      	bne.n	801a1be <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801a1b8:	f04f 33ff 	mov.w	r3, #4294967295
 801a1bc:	e085      	b.n	801a2ca <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801a1be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801a1c2:	2b09      	cmp	r3, #9
 801a1c4:	dc02      	bgt.n	801a1cc <etharp_find_entry+0x1cc>
    i = empty;
 801a1c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a1c8:	843b      	strh	r3, [r7, #32]
 801a1ca:	e039      	b.n	801a240 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801a1cc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801a1d0:	2b09      	cmp	r3, #9
 801a1d2:	dc14      	bgt.n	801a1fe <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801a1d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a1d6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801a1d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a1dc:	493d      	ldr	r1, [pc, #244]	; (801a2d4 <etharp_find_entry+0x2d4>)
 801a1de:	4613      	mov	r3, r2
 801a1e0:	005b      	lsls	r3, r3, #1
 801a1e2:	4413      	add	r3, r2
 801a1e4:	00db      	lsls	r3, r3, #3
 801a1e6:	440b      	add	r3, r1
 801a1e8:	681b      	ldr	r3, [r3, #0]
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d018      	beq.n	801a220 <etharp_find_entry+0x220>
 801a1ee:	4b3a      	ldr	r3, [pc, #232]	; (801a2d8 <etharp_find_entry+0x2d8>)
 801a1f0:	f240 126d 	movw	r2, #365	; 0x16d
 801a1f4:	493b      	ldr	r1, [pc, #236]	; (801a2e4 <etharp_find_entry+0x2e4>)
 801a1f6:	483a      	ldr	r0, [pc, #232]	; (801a2e0 <etharp_find_entry+0x2e0>)
 801a1f8:	f005 fb36 	bl	801f868 <iprintf>
 801a1fc:	e010      	b.n	801a220 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801a1fe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801a202:	2b09      	cmp	r3, #9
 801a204:	dc02      	bgt.n	801a20c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801a206:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a208:	843b      	strh	r3, [r7, #32]
 801a20a:	e009      	b.n	801a220 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801a20c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a210:	2b09      	cmp	r3, #9
 801a212:	dc02      	bgt.n	801a21a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801a214:	8bfb      	ldrh	r3, [r7, #30]
 801a216:	843b      	strh	r3, [r7, #32]
 801a218:	e002      	b.n	801a220 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801a21a:	f04f 33ff 	mov.w	r3, #4294967295
 801a21e:	e054      	b.n	801a2ca <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a220:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a224:	2b09      	cmp	r3, #9
 801a226:	dd06      	ble.n	801a236 <etharp_find_entry+0x236>
 801a228:	4b2b      	ldr	r3, [pc, #172]	; (801a2d8 <etharp_find_entry+0x2d8>)
 801a22a:	f240 127f 	movw	r2, #383	; 0x17f
 801a22e:	492e      	ldr	r1, [pc, #184]	; (801a2e8 <etharp_find_entry+0x2e8>)
 801a230:	482b      	ldr	r0, [pc, #172]	; (801a2e0 <etharp_find_entry+0x2e0>)
 801a232:	f005 fb19 	bl	801f868 <iprintf>
    etharp_free_entry(i);
 801a236:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a23a:	4618      	mov	r0, r3
 801a23c:	f7ff fe06 	bl	8019e4c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a240:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a244:	2b09      	cmp	r3, #9
 801a246:	dd06      	ble.n	801a256 <etharp_find_entry+0x256>
 801a248:	4b23      	ldr	r3, [pc, #140]	; (801a2d8 <etharp_find_entry+0x2d8>)
 801a24a:	f240 1283 	movw	r2, #387	; 0x183
 801a24e:	4926      	ldr	r1, [pc, #152]	; (801a2e8 <etharp_find_entry+0x2e8>)
 801a250:	4823      	ldr	r0, [pc, #140]	; (801a2e0 <etharp_find_entry+0x2e0>)
 801a252:	f005 fb09 	bl	801f868 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801a256:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a25a:	491e      	ldr	r1, [pc, #120]	; (801a2d4 <etharp_find_entry+0x2d4>)
 801a25c:	4613      	mov	r3, r2
 801a25e:	005b      	lsls	r3, r3, #1
 801a260:	4413      	add	r3, r2
 801a262:	00db      	lsls	r3, r3, #3
 801a264:	440b      	add	r3, r1
 801a266:	3314      	adds	r3, #20
 801a268:	781b      	ldrb	r3, [r3, #0]
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	d006      	beq.n	801a27c <etharp_find_entry+0x27c>
 801a26e:	4b1a      	ldr	r3, [pc, #104]	; (801a2d8 <etharp_find_entry+0x2d8>)
 801a270:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801a274:	491d      	ldr	r1, [pc, #116]	; (801a2ec <etharp_find_entry+0x2ec>)
 801a276:	481a      	ldr	r0, [pc, #104]	; (801a2e0 <etharp_find_entry+0x2e0>)
 801a278:	f005 faf6 	bl	801f868 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801a27c:	68fb      	ldr	r3, [r7, #12]
 801a27e:	2b00      	cmp	r3, #0
 801a280:	d00b      	beq.n	801a29a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801a282:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a286:	68fb      	ldr	r3, [r7, #12]
 801a288:	6819      	ldr	r1, [r3, #0]
 801a28a:	4812      	ldr	r0, [pc, #72]	; (801a2d4 <etharp_find_entry+0x2d4>)
 801a28c:	4613      	mov	r3, r2
 801a28e:	005b      	lsls	r3, r3, #1
 801a290:	4413      	add	r3, r2
 801a292:	00db      	lsls	r3, r3, #3
 801a294:	4403      	add	r3, r0
 801a296:	3304      	adds	r3, #4
 801a298:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801a29a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a29e:	490d      	ldr	r1, [pc, #52]	; (801a2d4 <etharp_find_entry+0x2d4>)
 801a2a0:	4613      	mov	r3, r2
 801a2a2:	005b      	lsls	r3, r3, #1
 801a2a4:	4413      	add	r3, r2
 801a2a6:	00db      	lsls	r3, r3, #3
 801a2a8:	440b      	add	r3, r1
 801a2aa:	3312      	adds	r3, #18
 801a2ac:	2200      	movs	r2, #0
 801a2ae:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801a2b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a2b4:	4907      	ldr	r1, [pc, #28]	; (801a2d4 <etharp_find_entry+0x2d4>)
 801a2b6:	4613      	mov	r3, r2
 801a2b8:	005b      	lsls	r3, r3, #1
 801a2ba:	4413      	add	r3, r2
 801a2bc:	00db      	lsls	r3, r3, #3
 801a2be:	440b      	add	r3, r1
 801a2c0:	3308      	adds	r3, #8
 801a2c2:	687a      	ldr	r2, [r7, #4]
 801a2c4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801a2c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801a2ca:	4618      	mov	r0, r3
 801a2cc:	3728      	adds	r7, #40	; 0x28
 801a2ce:	46bd      	mov	sp, r7
 801a2d0:	bd80      	pop	{r7, pc}
 801a2d2:	bf00      	nop
 801a2d4:	20001968 	.word	0x20001968
 801a2d8:	08025064 	.word	0x08025064
 801a2dc:	0802509c 	.word	0x0802509c
 801a2e0:	080250dc 	.word	0x080250dc
 801a2e4:	08025104 	.word	0x08025104
 801a2e8:	0802511c 	.word	0x0802511c
 801a2ec:	08025130 	.word	0x08025130

0801a2f0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801a2f0:	b580      	push	{r7, lr}
 801a2f2:	b088      	sub	sp, #32
 801a2f4:	af02      	add	r7, sp, #8
 801a2f6:	60f8      	str	r0, [r7, #12]
 801a2f8:	60b9      	str	r1, [r7, #8]
 801a2fa:	607a      	str	r2, [r7, #4]
 801a2fc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801a2fe:	68fb      	ldr	r3, [r7, #12]
 801a300:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a304:	2b06      	cmp	r3, #6
 801a306:	d006      	beq.n	801a316 <etharp_update_arp_entry+0x26>
 801a308:	4b48      	ldr	r3, [pc, #288]	; (801a42c <etharp_update_arp_entry+0x13c>)
 801a30a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801a30e:	4948      	ldr	r1, [pc, #288]	; (801a430 <etharp_update_arp_entry+0x140>)
 801a310:	4848      	ldr	r0, [pc, #288]	; (801a434 <etharp_update_arp_entry+0x144>)
 801a312:	f005 faa9 	bl	801f868 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801a316:	68bb      	ldr	r3, [r7, #8]
 801a318:	2b00      	cmp	r3, #0
 801a31a:	d012      	beq.n	801a342 <etharp_update_arp_entry+0x52>
 801a31c:	68bb      	ldr	r3, [r7, #8]
 801a31e:	681b      	ldr	r3, [r3, #0]
 801a320:	2b00      	cmp	r3, #0
 801a322:	d00e      	beq.n	801a342 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a324:	68bb      	ldr	r3, [r7, #8]
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	68f9      	ldr	r1, [r7, #12]
 801a32a:	4618      	mov	r0, r3
 801a32c:	f001 f920 	bl	801b570 <ip4_addr_isbroadcast_u32>
 801a330:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801a332:	2b00      	cmp	r3, #0
 801a334:	d105      	bne.n	801a342 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801a336:	68bb      	ldr	r3, [r7, #8]
 801a338:	681b      	ldr	r3, [r3, #0]
 801a33a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a33e:	2be0      	cmp	r3, #224	; 0xe0
 801a340:	d102      	bne.n	801a348 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a342:	f06f 030f 	mvn.w	r3, #15
 801a346:	e06c      	b.n	801a422 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801a348:	78fb      	ldrb	r3, [r7, #3]
 801a34a:	68fa      	ldr	r2, [r7, #12]
 801a34c:	4619      	mov	r1, r3
 801a34e:	68b8      	ldr	r0, [r7, #8]
 801a350:	f7ff fe56 	bl	801a000 <etharp_find_entry>
 801a354:	4603      	mov	r3, r0
 801a356:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801a358:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a35c:	2b00      	cmp	r3, #0
 801a35e:	da02      	bge.n	801a366 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801a360:	8afb      	ldrh	r3, [r7, #22]
 801a362:	b25b      	sxtb	r3, r3
 801a364:	e05d      	b.n	801a422 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801a366:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a36a:	4933      	ldr	r1, [pc, #204]	; (801a438 <etharp_update_arp_entry+0x148>)
 801a36c:	4613      	mov	r3, r2
 801a36e:	005b      	lsls	r3, r3, #1
 801a370:	4413      	add	r3, r2
 801a372:	00db      	lsls	r3, r3, #3
 801a374:	440b      	add	r3, r1
 801a376:	3314      	adds	r3, #20
 801a378:	2202      	movs	r2, #2
 801a37a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801a37c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a380:	492d      	ldr	r1, [pc, #180]	; (801a438 <etharp_update_arp_entry+0x148>)
 801a382:	4613      	mov	r3, r2
 801a384:	005b      	lsls	r3, r3, #1
 801a386:	4413      	add	r3, r2
 801a388:	00db      	lsls	r3, r3, #3
 801a38a:	440b      	add	r3, r1
 801a38c:	3308      	adds	r3, #8
 801a38e:	68fa      	ldr	r2, [r7, #12]
 801a390:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801a392:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a396:	4613      	mov	r3, r2
 801a398:	005b      	lsls	r3, r3, #1
 801a39a:	4413      	add	r3, r2
 801a39c:	00db      	lsls	r3, r3, #3
 801a39e:	3308      	adds	r3, #8
 801a3a0:	4a25      	ldr	r2, [pc, #148]	; (801a438 <etharp_update_arp_entry+0x148>)
 801a3a2:	4413      	add	r3, r2
 801a3a4:	3304      	adds	r3, #4
 801a3a6:	2206      	movs	r2, #6
 801a3a8:	6879      	ldr	r1, [r7, #4]
 801a3aa:	4618      	mov	r0, r3
 801a3ac:	f004 fbbe 	bl	801eb2c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801a3b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a3b4:	4920      	ldr	r1, [pc, #128]	; (801a438 <etharp_update_arp_entry+0x148>)
 801a3b6:	4613      	mov	r3, r2
 801a3b8:	005b      	lsls	r3, r3, #1
 801a3ba:	4413      	add	r3, r2
 801a3bc:	00db      	lsls	r3, r3, #3
 801a3be:	440b      	add	r3, r1
 801a3c0:	3312      	adds	r3, #18
 801a3c2:	2200      	movs	r2, #0
 801a3c4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801a3c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a3ca:	491b      	ldr	r1, [pc, #108]	; (801a438 <etharp_update_arp_entry+0x148>)
 801a3cc:	4613      	mov	r3, r2
 801a3ce:	005b      	lsls	r3, r3, #1
 801a3d0:	4413      	add	r3, r2
 801a3d2:	00db      	lsls	r3, r3, #3
 801a3d4:	440b      	add	r3, r1
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d021      	beq.n	801a420 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801a3dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a3e0:	4915      	ldr	r1, [pc, #84]	; (801a438 <etharp_update_arp_entry+0x148>)
 801a3e2:	4613      	mov	r3, r2
 801a3e4:	005b      	lsls	r3, r3, #1
 801a3e6:	4413      	add	r3, r2
 801a3e8:	00db      	lsls	r3, r3, #3
 801a3ea:	440b      	add	r3, r1
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801a3f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a3f4:	4910      	ldr	r1, [pc, #64]	; (801a438 <etharp_update_arp_entry+0x148>)
 801a3f6:	4613      	mov	r3, r2
 801a3f8:	005b      	lsls	r3, r3, #1
 801a3fa:	4413      	add	r3, r2
 801a3fc:	00db      	lsls	r3, r3, #3
 801a3fe:	440b      	add	r3, r1
 801a400:	2200      	movs	r2, #0
 801a402:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801a404:	68fb      	ldr	r3, [r7, #12]
 801a406:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801a40a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a40e:	9300      	str	r3, [sp, #0]
 801a410:	687b      	ldr	r3, [r7, #4]
 801a412:	6939      	ldr	r1, [r7, #16]
 801a414:	68f8      	ldr	r0, [r7, #12]
 801a416:	f002 f835 	bl	801c484 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801a41a:	6938      	ldr	r0, [r7, #16]
 801a41c:	f7f6 faa8 	bl	8010970 <pbuf_free>
  }
  return ERR_OK;
 801a420:	2300      	movs	r3, #0
}
 801a422:	4618      	mov	r0, r3
 801a424:	3718      	adds	r7, #24
 801a426:	46bd      	mov	sp, r7
 801a428:	bd80      	pop	{r7, pc}
 801a42a:	bf00      	nop
 801a42c:	08025064 	.word	0x08025064
 801a430:	0802515c 	.word	0x0802515c
 801a434:	080250dc 	.word	0x080250dc
 801a438:	20001968 	.word	0x20001968

0801a43c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801a43c:	b580      	push	{r7, lr}
 801a43e:	b084      	sub	sp, #16
 801a440:	af00      	add	r7, sp, #0
 801a442:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a444:	2300      	movs	r3, #0
 801a446:	60fb      	str	r3, [r7, #12]
 801a448:	e01e      	b.n	801a488 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801a44a:	4913      	ldr	r1, [pc, #76]	; (801a498 <etharp_cleanup_netif+0x5c>)
 801a44c:	68fa      	ldr	r2, [r7, #12]
 801a44e:	4613      	mov	r3, r2
 801a450:	005b      	lsls	r3, r3, #1
 801a452:	4413      	add	r3, r2
 801a454:	00db      	lsls	r3, r3, #3
 801a456:	440b      	add	r3, r1
 801a458:	3314      	adds	r3, #20
 801a45a:	781b      	ldrb	r3, [r3, #0]
 801a45c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801a45e:	7afb      	ldrb	r3, [r7, #11]
 801a460:	2b00      	cmp	r3, #0
 801a462:	d00e      	beq.n	801a482 <etharp_cleanup_netif+0x46>
 801a464:	490c      	ldr	r1, [pc, #48]	; (801a498 <etharp_cleanup_netif+0x5c>)
 801a466:	68fa      	ldr	r2, [r7, #12]
 801a468:	4613      	mov	r3, r2
 801a46a:	005b      	lsls	r3, r3, #1
 801a46c:	4413      	add	r3, r2
 801a46e:	00db      	lsls	r3, r3, #3
 801a470:	440b      	add	r3, r1
 801a472:	3308      	adds	r3, #8
 801a474:	681b      	ldr	r3, [r3, #0]
 801a476:	687a      	ldr	r2, [r7, #4]
 801a478:	429a      	cmp	r2, r3
 801a47a:	d102      	bne.n	801a482 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801a47c:	68f8      	ldr	r0, [r7, #12]
 801a47e:	f7ff fce5 	bl	8019e4c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a482:	68fb      	ldr	r3, [r7, #12]
 801a484:	3301      	adds	r3, #1
 801a486:	60fb      	str	r3, [r7, #12]
 801a488:	68fb      	ldr	r3, [r7, #12]
 801a48a:	2b09      	cmp	r3, #9
 801a48c:	dddd      	ble.n	801a44a <etharp_cleanup_netif+0xe>
    }
  }
}
 801a48e:	bf00      	nop
 801a490:	bf00      	nop
 801a492:	3710      	adds	r7, #16
 801a494:	46bd      	mov	sp, r7
 801a496:	bd80      	pop	{r7, pc}
 801a498:	20001968 	.word	0x20001968

0801a49c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801a49c:	b5b0      	push	{r4, r5, r7, lr}
 801a49e:	b08a      	sub	sp, #40	; 0x28
 801a4a0:	af04      	add	r7, sp, #16
 801a4a2:	6078      	str	r0, [r7, #4]
 801a4a4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a4a6:	683b      	ldr	r3, [r7, #0]
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	d107      	bne.n	801a4bc <etharp_input+0x20>
 801a4ac:	4b3f      	ldr	r3, [pc, #252]	; (801a5ac <etharp_input+0x110>)
 801a4ae:	f240 228a 	movw	r2, #650	; 0x28a
 801a4b2:	493f      	ldr	r1, [pc, #252]	; (801a5b0 <etharp_input+0x114>)
 801a4b4:	483f      	ldr	r0, [pc, #252]	; (801a5b4 <etharp_input+0x118>)
 801a4b6:	f005 f9d7 	bl	801f868 <iprintf>
 801a4ba:	e074      	b.n	801a5a6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	685b      	ldr	r3, [r3, #4]
 801a4c0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a4c2:	693b      	ldr	r3, [r7, #16]
 801a4c4:	881b      	ldrh	r3, [r3, #0]
 801a4c6:	b29b      	uxth	r3, r3
 801a4c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a4cc:	d10c      	bne.n	801a4e8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a4ce:	693b      	ldr	r3, [r7, #16]
 801a4d0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a4d2:	2b06      	cmp	r3, #6
 801a4d4:	d108      	bne.n	801a4e8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a4d6:	693b      	ldr	r3, [r7, #16]
 801a4d8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a4da:	2b04      	cmp	r3, #4
 801a4dc:	d104      	bne.n	801a4e8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801a4de:	693b      	ldr	r3, [r7, #16]
 801a4e0:	885b      	ldrh	r3, [r3, #2]
 801a4e2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a4e4:	2b08      	cmp	r3, #8
 801a4e6:	d003      	beq.n	801a4f0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801a4e8:	6878      	ldr	r0, [r7, #4]
 801a4ea:	f7f6 fa41 	bl	8010970 <pbuf_free>
    return;
 801a4ee:	e05a      	b.n	801a5a6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801a4f0:	693b      	ldr	r3, [r7, #16]
 801a4f2:	330e      	adds	r3, #14
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801a4f8:	693b      	ldr	r3, [r7, #16]
 801a4fa:	3318      	adds	r3, #24
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a500:	683b      	ldr	r3, [r7, #0]
 801a502:	3304      	adds	r3, #4
 801a504:	681b      	ldr	r3, [r3, #0]
 801a506:	2b00      	cmp	r3, #0
 801a508:	d102      	bne.n	801a510 <etharp_input+0x74>
    for_us = 0;
 801a50a:	2300      	movs	r3, #0
 801a50c:	75fb      	strb	r3, [r7, #23]
 801a50e:	e009      	b.n	801a524 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801a510:	68ba      	ldr	r2, [r7, #8]
 801a512:	683b      	ldr	r3, [r7, #0]
 801a514:	3304      	adds	r3, #4
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	429a      	cmp	r2, r3
 801a51a:	bf0c      	ite	eq
 801a51c:	2301      	moveq	r3, #1
 801a51e:	2300      	movne	r3, #0
 801a520:	b2db      	uxtb	r3, r3
 801a522:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801a524:	693b      	ldr	r3, [r7, #16]
 801a526:	f103 0208 	add.w	r2, r3, #8
 801a52a:	7dfb      	ldrb	r3, [r7, #23]
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	d001      	beq.n	801a534 <etharp_input+0x98>
 801a530:	2301      	movs	r3, #1
 801a532:	e000      	b.n	801a536 <etharp_input+0x9a>
 801a534:	2302      	movs	r3, #2
 801a536:	f107 010c 	add.w	r1, r7, #12
 801a53a:	6838      	ldr	r0, [r7, #0]
 801a53c:	f7ff fed8 	bl	801a2f0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801a540:	693b      	ldr	r3, [r7, #16]
 801a542:	88db      	ldrh	r3, [r3, #6]
 801a544:	b29b      	uxth	r3, r3
 801a546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a54a:	d003      	beq.n	801a554 <etharp_input+0xb8>
 801a54c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a550:	d01e      	beq.n	801a590 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801a552:	e025      	b.n	801a5a0 <etharp_input+0x104>
      if (for_us) {
 801a554:	7dfb      	ldrb	r3, [r7, #23]
 801a556:	2b00      	cmp	r3, #0
 801a558:	d021      	beq.n	801a59e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801a55a:	683b      	ldr	r3, [r7, #0]
 801a55c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801a560:	693b      	ldr	r3, [r7, #16]
 801a562:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801a566:	683b      	ldr	r3, [r7, #0]
 801a568:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801a56c:	683b      	ldr	r3, [r7, #0]
 801a56e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801a570:	693a      	ldr	r2, [r7, #16]
 801a572:	3208      	adds	r2, #8
        etharp_raw(netif,
 801a574:	2102      	movs	r1, #2
 801a576:	9103      	str	r1, [sp, #12]
 801a578:	f107 010c 	add.w	r1, r7, #12
 801a57c:	9102      	str	r1, [sp, #8]
 801a57e:	9201      	str	r2, [sp, #4]
 801a580:	9300      	str	r3, [sp, #0]
 801a582:	462b      	mov	r3, r5
 801a584:	4622      	mov	r2, r4
 801a586:	4601      	mov	r1, r0
 801a588:	6838      	ldr	r0, [r7, #0]
 801a58a:	f000 faef 	bl	801ab6c <etharp_raw>
      break;
 801a58e:	e006      	b.n	801a59e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801a590:	f107 030c 	add.w	r3, r7, #12
 801a594:	4619      	mov	r1, r3
 801a596:	6838      	ldr	r0, [r7, #0]
 801a598:	f7fe f9cc 	bl	8018934 <dhcp_arp_reply>
      break;
 801a59c:	e000      	b.n	801a5a0 <etharp_input+0x104>
      break;
 801a59e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801a5a0:	6878      	ldr	r0, [r7, #4]
 801a5a2:	f7f6 f9e5 	bl	8010970 <pbuf_free>
}
 801a5a6:	3718      	adds	r7, #24
 801a5a8:	46bd      	mov	sp, r7
 801a5aa:	bdb0      	pop	{r4, r5, r7, pc}
 801a5ac:	08025064 	.word	0x08025064
 801a5b0:	080251b4 	.word	0x080251b4
 801a5b4:	080250dc 	.word	0x080250dc

0801a5b8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801a5b8:	b580      	push	{r7, lr}
 801a5ba:	b086      	sub	sp, #24
 801a5bc:	af02      	add	r7, sp, #8
 801a5be:	60f8      	str	r0, [r7, #12]
 801a5c0:	60b9      	str	r1, [r7, #8]
 801a5c2:	4613      	mov	r3, r2
 801a5c4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801a5c6:	79fa      	ldrb	r2, [r7, #7]
 801a5c8:	4944      	ldr	r1, [pc, #272]	; (801a6dc <etharp_output_to_arp_index+0x124>)
 801a5ca:	4613      	mov	r3, r2
 801a5cc:	005b      	lsls	r3, r3, #1
 801a5ce:	4413      	add	r3, r2
 801a5d0:	00db      	lsls	r3, r3, #3
 801a5d2:	440b      	add	r3, r1
 801a5d4:	3314      	adds	r3, #20
 801a5d6:	781b      	ldrb	r3, [r3, #0]
 801a5d8:	2b01      	cmp	r3, #1
 801a5da:	d806      	bhi.n	801a5ea <etharp_output_to_arp_index+0x32>
 801a5dc:	4b40      	ldr	r3, [pc, #256]	; (801a6e0 <etharp_output_to_arp_index+0x128>)
 801a5de:	f240 22ee 	movw	r2, #750	; 0x2ee
 801a5e2:	4940      	ldr	r1, [pc, #256]	; (801a6e4 <etharp_output_to_arp_index+0x12c>)
 801a5e4:	4840      	ldr	r0, [pc, #256]	; (801a6e8 <etharp_output_to_arp_index+0x130>)
 801a5e6:	f005 f93f 	bl	801f868 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801a5ea:	79fa      	ldrb	r2, [r7, #7]
 801a5ec:	493b      	ldr	r1, [pc, #236]	; (801a6dc <etharp_output_to_arp_index+0x124>)
 801a5ee:	4613      	mov	r3, r2
 801a5f0:	005b      	lsls	r3, r3, #1
 801a5f2:	4413      	add	r3, r2
 801a5f4:	00db      	lsls	r3, r3, #3
 801a5f6:	440b      	add	r3, r1
 801a5f8:	3314      	adds	r3, #20
 801a5fa:	781b      	ldrb	r3, [r3, #0]
 801a5fc:	2b02      	cmp	r3, #2
 801a5fe:	d153      	bne.n	801a6a8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801a600:	79fa      	ldrb	r2, [r7, #7]
 801a602:	4936      	ldr	r1, [pc, #216]	; (801a6dc <etharp_output_to_arp_index+0x124>)
 801a604:	4613      	mov	r3, r2
 801a606:	005b      	lsls	r3, r3, #1
 801a608:	4413      	add	r3, r2
 801a60a:	00db      	lsls	r3, r3, #3
 801a60c:	440b      	add	r3, r1
 801a60e:	3312      	adds	r3, #18
 801a610:	881b      	ldrh	r3, [r3, #0]
 801a612:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801a616:	d919      	bls.n	801a64c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801a618:	79fa      	ldrb	r2, [r7, #7]
 801a61a:	4613      	mov	r3, r2
 801a61c:	005b      	lsls	r3, r3, #1
 801a61e:	4413      	add	r3, r2
 801a620:	00db      	lsls	r3, r3, #3
 801a622:	4a2e      	ldr	r2, [pc, #184]	; (801a6dc <etharp_output_to_arp_index+0x124>)
 801a624:	4413      	add	r3, r2
 801a626:	3304      	adds	r3, #4
 801a628:	4619      	mov	r1, r3
 801a62a:	68f8      	ldr	r0, [r7, #12]
 801a62c:	f000 fb4c 	bl	801acc8 <etharp_request>
 801a630:	4603      	mov	r3, r0
 801a632:	2b00      	cmp	r3, #0
 801a634:	d138      	bne.n	801a6a8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a636:	79fa      	ldrb	r2, [r7, #7]
 801a638:	4928      	ldr	r1, [pc, #160]	; (801a6dc <etharp_output_to_arp_index+0x124>)
 801a63a:	4613      	mov	r3, r2
 801a63c:	005b      	lsls	r3, r3, #1
 801a63e:	4413      	add	r3, r2
 801a640:	00db      	lsls	r3, r3, #3
 801a642:	440b      	add	r3, r1
 801a644:	3314      	adds	r3, #20
 801a646:	2203      	movs	r2, #3
 801a648:	701a      	strb	r2, [r3, #0]
 801a64a:	e02d      	b.n	801a6a8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801a64c:	79fa      	ldrb	r2, [r7, #7]
 801a64e:	4923      	ldr	r1, [pc, #140]	; (801a6dc <etharp_output_to_arp_index+0x124>)
 801a650:	4613      	mov	r3, r2
 801a652:	005b      	lsls	r3, r3, #1
 801a654:	4413      	add	r3, r2
 801a656:	00db      	lsls	r3, r3, #3
 801a658:	440b      	add	r3, r1
 801a65a:	3312      	adds	r3, #18
 801a65c:	881b      	ldrh	r3, [r3, #0]
 801a65e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801a662:	d321      	bcc.n	801a6a8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801a664:	79fa      	ldrb	r2, [r7, #7]
 801a666:	4613      	mov	r3, r2
 801a668:	005b      	lsls	r3, r3, #1
 801a66a:	4413      	add	r3, r2
 801a66c:	00db      	lsls	r3, r3, #3
 801a66e:	4a1b      	ldr	r2, [pc, #108]	; (801a6dc <etharp_output_to_arp_index+0x124>)
 801a670:	4413      	add	r3, r2
 801a672:	1d19      	adds	r1, r3, #4
 801a674:	79fa      	ldrb	r2, [r7, #7]
 801a676:	4613      	mov	r3, r2
 801a678:	005b      	lsls	r3, r3, #1
 801a67a:	4413      	add	r3, r2
 801a67c:	00db      	lsls	r3, r3, #3
 801a67e:	3308      	adds	r3, #8
 801a680:	4a16      	ldr	r2, [pc, #88]	; (801a6dc <etharp_output_to_arp_index+0x124>)
 801a682:	4413      	add	r3, r2
 801a684:	3304      	adds	r3, #4
 801a686:	461a      	mov	r2, r3
 801a688:	68f8      	ldr	r0, [r7, #12]
 801a68a:	f000 fafb 	bl	801ac84 <etharp_request_dst>
 801a68e:	4603      	mov	r3, r0
 801a690:	2b00      	cmp	r3, #0
 801a692:	d109      	bne.n	801a6a8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a694:	79fa      	ldrb	r2, [r7, #7]
 801a696:	4911      	ldr	r1, [pc, #68]	; (801a6dc <etharp_output_to_arp_index+0x124>)
 801a698:	4613      	mov	r3, r2
 801a69a:	005b      	lsls	r3, r3, #1
 801a69c:	4413      	add	r3, r2
 801a69e:	00db      	lsls	r3, r3, #3
 801a6a0:	440b      	add	r3, r1
 801a6a2:	3314      	adds	r3, #20
 801a6a4:	2203      	movs	r2, #3
 801a6a6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801a6a8:	68fb      	ldr	r3, [r7, #12]
 801a6aa:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801a6ae:	79fa      	ldrb	r2, [r7, #7]
 801a6b0:	4613      	mov	r3, r2
 801a6b2:	005b      	lsls	r3, r3, #1
 801a6b4:	4413      	add	r3, r2
 801a6b6:	00db      	lsls	r3, r3, #3
 801a6b8:	3308      	adds	r3, #8
 801a6ba:	4a08      	ldr	r2, [pc, #32]	; (801a6dc <etharp_output_to_arp_index+0x124>)
 801a6bc:	4413      	add	r3, r2
 801a6be:	3304      	adds	r3, #4
 801a6c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a6c4:	9200      	str	r2, [sp, #0]
 801a6c6:	460a      	mov	r2, r1
 801a6c8:	68b9      	ldr	r1, [r7, #8]
 801a6ca:	68f8      	ldr	r0, [r7, #12]
 801a6cc:	f001 feda 	bl	801c484 <ethernet_output>
 801a6d0:	4603      	mov	r3, r0
}
 801a6d2:	4618      	mov	r0, r3
 801a6d4:	3710      	adds	r7, #16
 801a6d6:	46bd      	mov	sp, r7
 801a6d8:	bd80      	pop	{r7, pc}
 801a6da:	bf00      	nop
 801a6dc:	20001968 	.word	0x20001968
 801a6e0:	08025064 	.word	0x08025064
 801a6e4:	080251d4 	.word	0x080251d4
 801a6e8:	080250dc 	.word	0x080250dc

0801a6ec <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801a6ec:	b580      	push	{r7, lr}
 801a6ee:	b08a      	sub	sp, #40	; 0x28
 801a6f0:	af02      	add	r7, sp, #8
 801a6f2:	60f8      	str	r0, [r7, #12]
 801a6f4:	60b9      	str	r1, [r7, #8]
 801a6f6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a6fc:	68fb      	ldr	r3, [r7, #12]
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	d106      	bne.n	801a710 <etharp_output+0x24>
 801a702:	4b73      	ldr	r3, [pc, #460]	; (801a8d0 <etharp_output+0x1e4>)
 801a704:	f240 321e 	movw	r2, #798	; 0x31e
 801a708:	4972      	ldr	r1, [pc, #456]	; (801a8d4 <etharp_output+0x1e8>)
 801a70a:	4873      	ldr	r0, [pc, #460]	; (801a8d8 <etharp_output+0x1ec>)
 801a70c:	f005 f8ac 	bl	801f868 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801a710:	68bb      	ldr	r3, [r7, #8]
 801a712:	2b00      	cmp	r3, #0
 801a714:	d106      	bne.n	801a724 <etharp_output+0x38>
 801a716:	4b6e      	ldr	r3, [pc, #440]	; (801a8d0 <etharp_output+0x1e4>)
 801a718:	f240 321f 	movw	r2, #799	; 0x31f
 801a71c:	496f      	ldr	r1, [pc, #444]	; (801a8dc <etharp_output+0x1f0>)
 801a71e:	486e      	ldr	r0, [pc, #440]	; (801a8d8 <etharp_output+0x1ec>)
 801a720:	f005 f8a2 	bl	801f868 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	2b00      	cmp	r3, #0
 801a728:	d106      	bne.n	801a738 <etharp_output+0x4c>
 801a72a:	4b69      	ldr	r3, [pc, #420]	; (801a8d0 <etharp_output+0x1e4>)
 801a72c:	f44f 7248 	mov.w	r2, #800	; 0x320
 801a730:	496b      	ldr	r1, [pc, #428]	; (801a8e0 <etharp_output+0x1f4>)
 801a732:	4869      	ldr	r0, [pc, #420]	; (801a8d8 <etharp_output+0x1ec>)
 801a734:	f005 f898 	bl	801f868 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	681b      	ldr	r3, [r3, #0]
 801a73c:	68f9      	ldr	r1, [r7, #12]
 801a73e:	4618      	mov	r0, r3
 801a740:	f000 ff16 	bl	801b570 <ip4_addr_isbroadcast_u32>
 801a744:	4603      	mov	r3, r0
 801a746:	2b00      	cmp	r3, #0
 801a748:	d002      	beq.n	801a750 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801a74a:	4b66      	ldr	r3, [pc, #408]	; (801a8e4 <etharp_output+0x1f8>)
 801a74c:	61fb      	str	r3, [r7, #28]
 801a74e:	e0af      	b.n	801a8b0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801a750:	687b      	ldr	r3, [r7, #4]
 801a752:	681b      	ldr	r3, [r3, #0]
 801a754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a758:	2be0      	cmp	r3, #224	; 0xe0
 801a75a:	d118      	bne.n	801a78e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801a75c:	2301      	movs	r3, #1
 801a75e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801a760:	2300      	movs	r3, #0
 801a762:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801a764:	235e      	movs	r3, #94	; 0x5e
 801a766:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801a768:	687b      	ldr	r3, [r7, #4]
 801a76a:	3301      	adds	r3, #1
 801a76c:	781b      	ldrb	r3, [r3, #0]
 801a76e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a772:	b2db      	uxtb	r3, r3
 801a774:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801a776:	687b      	ldr	r3, [r7, #4]
 801a778:	3302      	adds	r3, #2
 801a77a:	781b      	ldrb	r3, [r3, #0]
 801a77c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	3303      	adds	r3, #3
 801a782:	781b      	ldrb	r3, [r3, #0]
 801a784:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801a786:	f107 0310 	add.w	r3, r7, #16
 801a78a:	61fb      	str	r3, [r7, #28]
 801a78c:	e090      	b.n	801a8b0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a78e:	687b      	ldr	r3, [r7, #4]
 801a790:	681a      	ldr	r2, [r3, #0]
 801a792:	68fb      	ldr	r3, [r7, #12]
 801a794:	3304      	adds	r3, #4
 801a796:	681b      	ldr	r3, [r3, #0]
 801a798:	405a      	eors	r2, r3
 801a79a:	68fb      	ldr	r3, [r7, #12]
 801a79c:	3308      	adds	r3, #8
 801a79e:	681b      	ldr	r3, [r3, #0]
 801a7a0:	4013      	ands	r3, r2
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	d012      	beq.n	801a7cc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	681b      	ldr	r3, [r3, #0]
 801a7aa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a7ac:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801a7b0:	4293      	cmp	r3, r2
 801a7b2:	d00b      	beq.n	801a7cc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801a7b4:	68fb      	ldr	r3, [r7, #12]
 801a7b6:	330c      	adds	r3, #12
 801a7b8:	681b      	ldr	r3, [r3, #0]
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d003      	beq.n	801a7c6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801a7be:	68fb      	ldr	r3, [r7, #12]
 801a7c0:	330c      	adds	r3, #12
 801a7c2:	61bb      	str	r3, [r7, #24]
 801a7c4:	e002      	b.n	801a7cc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801a7c6:	f06f 0303 	mvn.w	r3, #3
 801a7ca:	e07d      	b.n	801a8c8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a7cc:	4b46      	ldr	r3, [pc, #280]	; (801a8e8 <etharp_output+0x1fc>)
 801a7ce:	781b      	ldrb	r3, [r3, #0]
 801a7d0:	4619      	mov	r1, r3
 801a7d2:	4a46      	ldr	r2, [pc, #280]	; (801a8ec <etharp_output+0x200>)
 801a7d4:	460b      	mov	r3, r1
 801a7d6:	005b      	lsls	r3, r3, #1
 801a7d8:	440b      	add	r3, r1
 801a7da:	00db      	lsls	r3, r3, #3
 801a7dc:	4413      	add	r3, r2
 801a7de:	3314      	adds	r3, #20
 801a7e0:	781b      	ldrb	r3, [r3, #0]
 801a7e2:	2b01      	cmp	r3, #1
 801a7e4:	d925      	bls.n	801a832 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a7e6:	4b40      	ldr	r3, [pc, #256]	; (801a8e8 <etharp_output+0x1fc>)
 801a7e8:	781b      	ldrb	r3, [r3, #0]
 801a7ea:	4619      	mov	r1, r3
 801a7ec:	4a3f      	ldr	r2, [pc, #252]	; (801a8ec <etharp_output+0x200>)
 801a7ee:	460b      	mov	r3, r1
 801a7f0:	005b      	lsls	r3, r3, #1
 801a7f2:	440b      	add	r3, r1
 801a7f4:	00db      	lsls	r3, r3, #3
 801a7f6:	4413      	add	r3, r2
 801a7f8:	3308      	adds	r3, #8
 801a7fa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a7fc:	68fa      	ldr	r2, [r7, #12]
 801a7fe:	429a      	cmp	r2, r3
 801a800:	d117      	bne.n	801a832 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801a802:	69bb      	ldr	r3, [r7, #24]
 801a804:	681a      	ldr	r2, [r3, #0]
 801a806:	4b38      	ldr	r3, [pc, #224]	; (801a8e8 <etharp_output+0x1fc>)
 801a808:	781b      	ldrb	r3, [r3, #0]
 801a80a:	4618      	mov	r0, r3
 801a80c:	4937      	ldr	r1, [pc, #220]	; (801a8ec <etharp_output+0x200>)
 801a80e:	4603      	mov	r3, r0
 801a810:	005b      	lsls	r3, r3, #1
 801a812:	4403      	add	r3, r0
 801a814:	00db      	lsls	r3, r3, #3
 801a816:	440b      	add	r3, r1
 801a818:	3304      	adds	r3, #4
 801a81a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a81c:	429a      	cmp	r2, r3
 801a81e:	d108      	bne.n	801a832 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801a820:	4b31      	ldr	r3, [pc, #196]	; (801a8e8 <etharp_output+0x1fc>)
 801a822:	781b      	ldrb	r3, [r3, #0]
 801a824:	461a      	mov	r2, r3
 801a826:	68b9      	ldr	r1, [r7, #8]
 801a828:	68f8      	ldr	r0, [r7, #12]
 801a82a:	f7ff fec5 	bl	801a5b8 <etharp_output_to_arp_index>
 801a82e:	4603      	mov	r3, r0
 801a830:	e04a      	b.n	801a8c8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801a832:	2300      	movs	r3, #0
 801a834:	75fb      	strb	r3, [r7, #23]
 801a836:	e031      	b.n	801a89c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801a838:	7dfa      	ldrb	r2, [r7, #23]
 801a83a:	492c      	ldr	r1, [pc, #176]	; (801a8ec <etharp_output+0x200>)
 801a83c:	4613      	mov	r3, r2
 801a83e:	005b      	lsls	r3, r3, #1
 801a840:	4413      	add	r3, r2
 801a842:	00db      	lsls	r3, r3, #3
 801a844:	440b      	add	r3, r1
 801a846:	3314      	adds	r3, #20
 801a848:	781b      	ldrb	r3, [r3, #0]
 801a84a:	2b01      	cmp	r3, #1
 801a84c:	d923      	bls.n	801a896 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801a84e:	7dfa      	ldrb	r2, [r7, #23]
 801a850:	4926      	ldr	r1, [pc, #152]	; (801a8ec <etharp_output+0x200>)
 801a852:	4613      	mov	r3, r2
 801a854:	005b      	lsls	r3, r3, #1
 801a856:	4413      	add	r3, r2
 801a858:	00db      	lsls	r3, r3, #3
 801a85a:	440b      	add	r3, r1
 801a85c:	3308      	adds	r3, #8
 801a85e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801a860:	68fa      	ldr	r2, [r7, #12]
 801a862:	429a      	cmp	r2, r3
 801a864:	d117      	bne.n	801a896 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801a866:	69bb      	ldr	r3, [r7, #24]
 801a868:	6819      	ldr	r1, [r3, #0]
 801a86a:	7dfa      	ldrb	r2, [r7, #23]
 801a86c:	481f      	ldr	r0, [pc, #124]	; (801a8ec <etharp_output+0x200>)
 801a86e:	4613      	mov	r3, r2
 801a870:	005b      	lsls	r3, r3, #1
 801a872:	4413      	add	r3, r2
 801a874:	00db      	lsls	r3, r3, #3
 801a876:	4403      	add	r3, r0
 801a878:	3304      	adds	r3, #4
 801a87a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801a87c:	4299      	cmp	r1, r3
 801a87e:	d10a      	bne.n	801a896 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801a880:	4a19      	ldr	r2, [pc, #100]	; (801a8e8 <etharp_output+0x1fc>)
 801a882:	7dfb      	ldrb	r3, [r7, #23]
 801a884:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801a886:	7dfb      	ldrb	r3, [r7, #23]
 801a888:	461a      	mov	r2, r3
 801a88a:	68b9      	ldr	r1, [r7, #8]
 801a88c:	68f8      	ldr	r0, [r7, #12]
 801a88e:	f7ff fe93 	bl	801a5b8 <etharp_output_to_arp_index>
 801a892:	4603      	mov	r3, r0
 801a894:	e018      	b.n	801a8c8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801a896:	7dfb      	ldrb	r3, [r7, #23]
 801a898:	3301      	adds	r3, #1
 801a89a:	75fb      	strb	r3, [r7, #23]
 801a89c:	7dfb      	ldrb	r3, [r7, #23]
 801a89e:	2b09      	cmp	r3, #9
 801a8a0:	d9ca      	bls.n	801a838 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801a8a2:	68ba      	ldr	r2, [r7, #8]
 801a8a4:	69b9      	ldr	r1, [r7, #24]
 801a8a6:	68f8      	ldr	r0, [r7, #12]
 801a8a8:	f000 f822 	bl	801a8f0 <etharp_query>
 801a8ac:	4603      	mov	r3, r0
 801a8ae:	e00b      	b.n	801a8c8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801a8b0:	68fb      	ldr	r3, [r7, #12]
 801a8b2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801a8b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a8ba:	9300      	str	r3, [sp, #0]
 801a8bc:	69fb      	ldr	r3, [r7, #28]
 801a8be:	68b9      	ldr	r1, [r7, #8]
 801a8c0:	68f8      	ldr	r0, [r7, #12]
 801a8c2:	f001 fddf 	bl	801c484 <ethernet_output>
 801a8c6:	4603      	mov	r3, r0
}
 801a8c8:	4618      	mov	r0, r3
 801a8ca:	3720      	adds	r7, #32
 801a8cc:	46bd      	mov	sp, r7
 801a8ce:	bd80      	pop	{r7, pc}
 801a8d0:	08025064 	.word	0x08025064
 801a8d4:	080251b4 	.word	0x080251b4
 801a8d8:	080250dc 	.word	0x080250dc
 801a8dc:	08025204 	.word	0x08025204
 801a8e0:	080251a4 	.word	0x080251a4
 801a8e4:	08025acc 	.word	0x08025acc
 801a8e8:	20001a58 	.word	0x20001a58
 801a8ec:	20001968 	.word	0x20001968

0801a8f0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801a8f0:	b580      	push	{r7, lr}
 801a8f2:	b08c      	sub	sp, #48	; 0x30
 801a8f4:	af02      	add	r7, sp, #8
 801a8f6:	60f8      	str	r0, [r7, #12]
 801a8f8:	60b9      	str	r1, [r7, #8]
 801a8fa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801a8fc:	68fb      	ldr	r3, [r7, #12]
 801a8fe:	332a      	adds	r3, #42	; 0x2a
 801a900:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801a902:	23ff      	movs	r3, #255	; 0xff
 801a904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801a908:	2300      	movs	r3, #0
 801a90a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a90c:	68bb      	ldr	r3, [r7, #8]
 801a90e:	681b      	ldr	r3, [r3, #0]
 801a910:	68f9      	ldr	r1, [r7, #12]
 801a912:	4618      	mov	r0, r3
 801a914:	f000 fe2c 	bl	801b570 <ip4_addr_isbroadcast_u32>
 801a918:	4603      	mov	r3, r0
 801a91a:	2b00      	cmp	r3, #0
 801a91c:	d10c      	bne.n	801a938 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801a91e:	68bb      	ldr	r3, [r7, #8]
 801a920:	681b      	ldr	r3, [r3, #0]
 801a922:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a926:	2be0      	cmp	r3, #224	; 0xe0
 801a928:	d006      	beq.n	801a938 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801a92a:	68bb      	ldr	r3, [r7, #8]
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	d003      	beq.n	801a938 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801a930:	68bb      	ldr	r3, [r7, #8]
 801a932:	681b      	ldr	r3, [r3, #0]
 801a934:	2b00      	cmp	r3, #0
 801a936:	d102      	bne.n	801a93e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a938:	f06f 030f 	mvn.w	r3, #15
 801a93c:	e101      	b.n	801ab42 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801a93e:	68fa      	ldr	r2, [r7, #12]
 801a940:	2101      	movs	r1, #1
 801a942:	68b8      	ldr	r0, [r7, #8]
 801a944:	f7ff fb5c 	bl	801a000 <etharp_find_entry>
 801a948:	4603      	mov	r3, r0
 801a94a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801a94c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a950:	2b00      	cmp	r3, #0
 801a952:	da02      	bge.n	801a95a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801a954:	8a7b      	ldrh	r3, [r7, #18]
 801a956:	b25b      	sxtb	r3, r3
 801a958:	e0f3      	b.n	801ab42 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801a95a:	8a7b      	ldrh	r3, [r7, #18]
 801a95c:	2b7e      	cmp	r3, #126	; 0x7e
 801a95e:	d906      	bls.n	801a96e <etharp_query+0x7e>
 801a960:	4b7a      	ldr	r3, [pc, #488]	; (801ab4c <etharp_query+0x25c>)
 801a962:	f240 32c1 	movw	r2, #961	; 0x3c1
 801a966:	497a      	ldr	r1, [pc, #488]	; (801ab50 <etharp_query+0x260>)
 801a968:	487a      	ldr	r0, [pc, #488]	; (801ab54 <etharp_query+0x264>)
 801a96a:	f004 ff7d 	bl	801f868 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801a96e:	8a7b      	ldrh	r3, [r7, #18]
 801a970:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801a972:	7c7a      	ldrb	r2, [r7, #17]
 801a974:	4978      	ldr	r1, [pc, #480]	; (801ab58 <etharp_query+0x268>)
 801a976:	4613      	mov	r3, r2
 801a978:	005b      	lsls	r3, r3, #1
 801a97a:	4413      	add	r3, r2
 801a97c:	00db      	lsls	r3, r3, #3
 801a97e:	440b      	add	r3, r1
 801a980:	3314      	adds	r3, #20
 801a982:	781b      	ldrb	r3, [r3, #0]
 801a984:	2b00      	cmp	r3, #0
 801a986:	d115      	bne.n	801a9b4 <etharp_query+0xc4>
    is_new_entry = 1;
 801a988:	2301      	movs	r3, #1
 801a98a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801a98c:	7c7a      	ldrb	r2, [r7, #17]
 801a98e:	4972      	ldr	r1, [pc, #456]	; (801ab58 <etharp_query+0x268>)
 801a990:	4613      	mov	r3, r2
 801a992:	005b      	lsls	r3, r3, #1
 801a994:	4413      	add	r3, r2
 801a996:	00db      	lsls	r3, r3, #3
 801a998:	440b      	add	r3, r1
 801a99a:	3314      	adds	r3, #20
 801a99c:	2201      	movs	r2, #1
 801a99e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801a9a0:	7c7a      	ldrb	r2, [r7, #17]
 801a9a2:	496d      	ldr	r1, [pc, #436]	; (801ab58 <etharp_query+0x268>)
 801a9a4:	4613      	mov	r3, r2
 801a9a6:	005b      	lsls	r3, r3, #1
 801a9a8:	4413      	add	r3, r2
 801a9aa:	00db      	lsls	r3, r3, #3
 801a9ac:	440b      	add	r3, r1
 801a9ae:	3308      	adds	r3, #8
 801a9b0:	68fa      	ldr	r2, [r7, #12]
 801a9b2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801a9b4:	7c7a      	ldrb	r2, [r7, #17]
 801a9b6:	4968      	ldr	r1, [pc, #416]	; (801ab58 <etharp_query+0x268>)
 801a9b8:	4613      	mov	r3, r2
 801a9ba:	005b      	lsls	r3, r3, #1
 801a9bc:	4413      	add	r3, r2
 801a9be:	00db      	lsls	r3, r3, #3
 801a9c0:	440b      	add	r3, r1
 801a9c2:	3314      	adds	r3, #20
 801a9c4:	781b      	ldrb	r3, [r3, #0]
 801a9c6:	2b01      	cmp	r3, #1
 801a9c8:	d011      	beq.n	801a9ee <etharp_query+0xfe>
 801a9ca:	7c7a      	ldrb	r2, [r7, #17]
 801a9cc:	4962      	ldr	r1, [pc, #392]	; (801ab58 <etharp_query+0x268>)
 801a9ce:	4613      	mov	r3, r2
 801a9d0:	005b      	lsls	r3, r3, #1
 801a9d2:	4413      	add	r3, r2
 801a9d4:	00db      	lsls	r3, r3, #3
 801a9d6:	440b      	add	r3, r1
 801a9d8:	3314      	adds	r3, #20
 801a9da:	781b      	ldrb	r3, [r3, #0]
 801a9dc:	2b01      	cmp	r3, #1
 801a9de:	d806      	bhi.n	801a9ee <etharp_query+0xfe>
 801a9e0:	4b5a      	ldr	r3, [pc, #360]	; (801ab4c <etharp_query+0x25c>)
 801a9e2:	f240 32cd 	movw	r2, #973	; 0x3cd
 801a9e6:	495d      	ldr	r1, [pc, #372]	; (801ab5c <etharp_query+0x26c>)
 801a9e8:	485a      	ldr	r0, [pc, #360]	; (801ab54 <etharp_query+0x264>)
 801a9ea:	f004 ff3d 	bl	801f868 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801a9ee:	6a3b      	ldr	r3, [r7, #32]
 801a9f0:	2b00      	cmp	r3, #0
 801a9f2:	d102      	bne.n	801a9fa <etharp_query+0x10a>
 801a9f4:	687b      	ldr	r3, [r7, #4]
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	d10c      	bne.n	801aa14 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801a9fa:	68b9      	ldr	r1, [r7, #8]
 801a9fc:	68f8      	ldr	r0, [r7, #12]
 801a9fe:	f000 f963 	bl	801acc8 <etharp_request>
 801aa02:	4603      	mov	r3, r0
 801aa04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	d102      	bne.n	801aa14 <etharp_query+0x124>
      return result;
 801aa0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801aa12:	e096      	b.n	801ab42 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	d106      	bne.n	801aa28 <etharp_query+0x138>
 801aa1a:	4b4c      	ldr	r3, [pc, #304]	; (801ab4c <etharp_query+0x25c>)
 801aa1c:	f240 32e1 	movw	r2, #993	; 0x3e1
 801aa20:	494f      	ldr	r1, [pc, #316]	; (801ab60 <etharp_query+0x270>)
 801aa22:	484c      	ldr	r0, [pc, #304]	; (801ab54 <etharp_query+0x264>)
 801aa24:	f004 ff20 	bl	801f868 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801aa28:	7c7a      	ldrb	r2, [r7, #17]
 801aa2a:	494b      	ldr	r1, [pc, #300]	; (801ab58 <etharp_query+0x268>)
 801aa2c:	4613      	mov	r3, r2
 801aa2e:	005b      	lsls	r3, r3, #1
 801aa30:	4413      	add	r3, r2
 801aa32:	00db      	lsls	r3, r3, #3
 801aa34:	440b      	add	r3, r1
 801aa36:	3314      	adds	r3, #20
 801aa38:	781b      	ldrb	r3, [r3, #0]
 801aa3a:	2b01      	cmp	r3, #1
 801aa3c:	d917      	bls.n	801aa6e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801aa3e:	4a49      	ldr	r2, [pc, #292]	; (801ab64 <etharp_query+0x274>)
 801aa40:	7c7b      	ldrb	r3, [r7, #17]
 801aa42:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801aa44:	7c7a      	ldrb	r2, [r7, #17]
 801aa46:	4613      	mov	r3, r2
 801aa48:	005b      	lsls	r3, r3, #1
 801aa4a:	4413      	add	r3, r2
 801aa4c:	00db      	lsls	r3, r3, #3
 801aa4e:	3308      	adds	r3, #8
 801aa50:	4a41      	ldr	r2, [pc, #260]	; (801ab58 <etharp_query+0x268>)
 801aa52:	4413      	add	r3, r2
 801aa54:	3304      	adds	r3, #4
 801aa56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801aa5a:	9200      	str	r2, [sp, #0]
 801aa5c:	697a      	ldr	r2, [r7, #20]
 801aa5e:	6879      	ldr	r1, [r7, #4]
 801aa60:	68f8      	ldr	r0, [r7, #12]
 801aa62:	f001 fd0f 	bl	801c484 <ethernet_output>
 801aa66:	4603      	mov	r3, r0
 801aa68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801aa6c:	e067      	b.n	801ab3e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801aa6e:	7c7a      	ldrb	r2, [r7, #17]
 801aa70:	4939      	ldr	r1, [pc, #228]	; (801ab58 <etharp_query+0x268>)
 801aa72:	4613      	mov	r3, r2
 801aa74:	005b      	lsls	r3, r3, #1
 801aa76:	4413      	add	r3, r2
 801aa78:	00db      	lsls	r3, r3, #3
 801aa7a:	440b      	add	r3, r1
 801aa7c:	3314      	adds	r3, #20
 801aa7e:	781b      	ldrb	r3, [r3, #0]
 801aa80:	2b01      	cmp	r3, #1
 801aa82:	d15c      	bne.n	801ab3e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801aa84:	2300      	movs	r3, #0
 801aa86:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801aa8c:	e01c      	b.n	801aac8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801aa8e:	69fb      	ldr	r3, [r7, #28]
 801aa90:	895a      	ldrh	r2, [r3, #10]
 801aa92:	69fb      	ldr	r3, [r7, #28]
 801aa94:	891b      	ldrh	r3, [r3, #8]
 801aa96:	429a      	cmp	r2, r3
 801aa98:	d10a      	bne.n	801aab0 <etharp_query+0x1c0>
 801aa9a:	69fb      	ldr	r3, [r7, #28]
 801aa9c:	681b      	ldr	r3, [r3, #0]
 801aa9e:	2b00      	cmp	r3, #0
 801aaa0:	d006      	beq.n	801aab0 <etharp_query+0x1c0>
 801aaa2:	4b2a      	ldr	r3, [pc, #168]	; (801ab4c <etharp_query+0x25c>)
 801aaa4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801aaa8:	492f      	ldr	r1, [pc, #188]	; (801ab68 <etharp_query+0x278>)
 801aaaa:	482a      	ldr	r0, [pc, #168]	; (801ab54 <etharp_query+0x264>)
 801aaac:	f004 fedc 	bl	801f868 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801aab0:	69fb      	ldr	r3, [r7, #28]
 801aab2:	7b1b      	ldrb	r3, [r3, #12]
 801aab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	d002      	beq.n	801aac2 <etharp_query+0x1d2>
        copy_needed = 1;
 801aabc:	2301      	movs	r3, #1
 801aabe:	61bb      	str	r3, [r7, #24]
        break;
 801aac0:	e005      	b.n	801aace <etharp_query+0x1de>
      }
      p = p->next;
 801aac2:	69fb      	ldr	r3, [r7, #28]
 801aac4:	681b      	ldr	r3, [r3, #0]
 801aac6:	61fb      	str	r3, [r7, #28]
    while (p) {
 801aac8:	69fb      	ldr	r3, [r7, #28]
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d1df      	bne.n	801aa8e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801aace:	69bb      	ldr	r3, [r7, #24]
 801aad0:	2b00      	cmp	r3, #0
 801aad2:	d007      	beq.n	801aae4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801aad4:	687a      	ldr	r2, [r7, #4]
 801aad6:	f44f 7120 	mov.w	r1, #640	; 0x280
 801aada:	200e      	movs	r0, #14
 801aadc:	f7f6 faf8 	bl	80110d0 <pbuf_clone>
 801aae0:	61f8      	str	r0, [r7, #28]
 801aae2:	e004      	b.n	801aaee <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801aae8:	69f8      	ldr	r0, [r7, #28]
 801aaea:	f7f5 ffe7 	bl	8010abc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801aaee:	69fb      	ldr	r3, [r7, #28]
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	d021      	beq.n	801ab38 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801aaf4:	7c7a      	ldrb	r2, [r7, #17]
 801aaf6:	4918      	ldr	r1, [pc, #96]	; (801ab58 <etharp_query+0x268>)
 801aaf8:	4613      	mov	r3, r2
 801aafa:	005b      	lsls	r3, r3, #1
 801aafc:	4413      	add	r3, r2
 801aafe:	00db      	lsls	r3, r3, #3
 801ab00:	440b      	add	r3, r1
 801ab02:	681b      	ldr	r3, [r3, #0]
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	d00a      	beq.n	801ab1e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801ab08:	7c7a      	ldrb	r2, [r7, #17]
 801ab0a:	4913      	ldr	r1, [pc, #76]	; (801ab58 <etharp_query+0x268>)
 801ab0c:	4613      	mov	r3, r2
 801ab0e:	005b      	lsls	r3, r3, #1
 801ab10:	4413      	add	r3, r2
 801ab12:	00db      	lsls	r3, r3, #3
 801ab14:	440b      	add	r3, r1
 801ab16:	681b      	ldr	r3, [r3, #0]
 801ab18:	4618      	mov	r0, r3
 801ab1a:	f7f5 ff29 	bl	8010970 <pbuf_free>
      }
      arp_table[i].q = p;
 801ab1e:	7c7a      	ldrb	r2, [r7, #17]
 801ab20:	490d      	ldr	r1, [pc, #52]	; (801ab58 <etharp_query+0x268>)
 801ab22:	4613      	mov	r3, r2
 801ab24:	005b      	lsls	r3, r3, #1
 801ab26:	4413      	add	r3, r2
 801ab28:	00db      	lsls	r3, r3, #3
 801ab2a:	440b      	add	r3, r1
 801ab2c:	69fa      	ldr	r2, [r7, #28]
 801ab2e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801ab30:	2300      	movs	r3, #0
 801ab32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ab36:	e002      	b.n	801ab3e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801ab38:	23ff      	movs	r3, #255	; 0xff
 801ab3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801ab3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801ab42:	4618      	mov	r0, r3
 801ab44:	3728      	adds	r7, #40	; 0x28
 801ab46:	46bd      	mov	sp, r7
 801ab48:	bd80      	pop	{r7, pc}
 801ab4a:	bf00      	nop
 801ab4c:	08025064 	.word	0x08025064
 801ab50:	08025210 	.word	0x08025210
 801ab54:	080250dc 	.word	0x080250dc
 801ab58:	20001968 	.word	0x20001968
 801ab5c:	08025220 	.word	0x08025220
 801ab60:	08025204 	.word	0x08025204
 801ab64:	20001a58 	.word	0x20001a58
 801ab68:	08025248 	.word	0x08025248

0801ab6c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801ab6c:	b580      	push	{r7, lr}
 801ab6e:	b08a      	sub	sp, #40	; 0x28
 801ab70:	af02      	add	r7, sp, #8
 801ab72:	60f8      	str	r0, [r7, #12]
 801ab74:	60b9      	str	r1, [r7, #8]
 801ab76:	607a      	str	r2, [r7, #4]
 801ab78:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801ab7a:	2300      	movs	r3, #0
 801ab7c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ab7e:	68fb      	ldr	r3, [r7, #12]
 801ab80:	2b00      	cmp	r3, #0
 801ab82:	d106      	bne.n	801ab92 <etharp_raw+0x26>
 801ab84:	4b3a      	ldr	r3, [pc, #232]	; (801ac70 <etharp_raw+0x104>)
 801ab86:	f240 4257 	movw	r2, #1111	; 0x457
 801ab8a:	493a      	ldr	r1, [pc, #232]	; (801ac74 <etharp_raw+0x108>)
 801ab8c:	483a      	ldr	r0, [pc, #232]	; (801ac78 <etharp_raw+0x10c>)
 801ab8e:	f004 fe6b 	bl	801f868 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801ab92:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ab96:	211c      	movs	r1, #28
 801ab98:	200e      	movs	r0, #14
 801ab9a:	f7f5 fbd3 	bl	8010344 <pbuf_alloc>
 801ab9e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801aba0:	69bb      	ldr	r3, [r7, #24]
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	d102      	bne.n	801abac <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801aba6:	f04f 33ff 	mov.w	r3, #4294967295
 801abaa:	e05d      	b.n	801ac68 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801abac:	69bb      	ldr	r3, [r7, #24]
 801abae:	895b      	ldrh	r3, [r3, #10]
 801abb0:	2b1b      	cmp	r3, #27
 801abb2:	d806      	bhi.n	801abc2 <etharp_raw+0x56>
 801abb4:	4b2e      	ldr	r3, [pc, #184]	; (801ac70 <etharp_raw+0x104>)
 801abb6:	f240 4262 	movw	r2, #1122	; 0x462
 801abba:	4930      	ldr	r1, [pc, #192]	; (801ac7c <etharp_raw+0x110>)
 801abbc:	482e      	ldr	r0, [pc, #184]	; (801ac78 <etharp_raw+0x10c>)
 801abbe:	f004 fe53 	bl	801f868 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801abc2:	69bb      	ldr	r3, [r7, #24]
 801abc4:	685b      	ldr	r3, [r3, #4]
 801abc6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801abc8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801abca:	4618      	mov	r0, r3
 801abcc:	f7f3 ffc0 	bl	800eb50 <lwip_htons>
 801abd0:	4603      	mov	r3, r0
 801abd2:	461a      	mov	r2, r3
 801abd4:	697b      	ldr	r3, [r7, #20]
 801abd6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801abd8:	68fb      	ldr	r3, [r7, #12]
 801abda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801abde:	2b06      	cmp	r3, #6
 801abe0:	d006      	beq.n	801abf0 <etharp_raw+0x84>
 801abe2:	4b23      	ldr	r3, [pc, #140]	; (801ac70 <etharp_raw+0x104>)
 801abe4:	f240 4269 	movw	r2, #1129	; 0x469
 801abe8:	4925      	ldr	r1, [pc, #148]	; (801ac80 <etharp_raw+0x114>)
 801abea:	4823      	ldr	r0, [pc, #140]	; (801ac78 <etharp_raw+0x10c>)
 801abec:	f004 fe3c 	bl	801f868 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801abf0:	697b      	ldr	r3, [r7, #20]
 801abf2:	3308      	adds	r3, #8
 801abf4:	2206      	movs	r2, #6
 801abf6:	6839      	ldr	r1, [r7, #0]
 801abf8:	4618      	mov	r0, r3
 801abfa:	f003 ff97 	bl	801eb2c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801abfe:	697b      	ldr	r3, [r7, #20]
 801ac00:	3312      	adds	r3, #18
 801ac02:	2206      	movs	r2, #6
 801ac04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ac06:	4618      	mov	r0, r3
 801ac08:	f003 ff90 	bl	801eb2c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801ac0c:	697b      	ldr	r3, [r7, #20]
 801ac0e:	330e      	adds	r3, #14
 801ac10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ac12:	6812      	ldr	r2, [r2, #0]
 801ac14:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801ac16:	697b      	ldr	r3, [r7, #20]
 801ac18:	3318      	adds	r3, #24
 801ac1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ac1c:	6812      	ldr	r2, [r2, #0]
 801ac1e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801ac20:	697b      	ldr	r3, [r7, #20]
 801ac22:	2200      	movs	r2, #0
 801ac24:	701a      	strb	r2, [r3, #0]
 801ac26:	2200      	movs	r2, #0
 801ac28:	f042 0201 	orr.w	r2, r2, #1
 801ac2c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801ac2e:	697b      	ldr	r3, [r7, #20]
 801ac30:	2200      	movs	r2, #0
 801ac32:	f042 0208 	orr.w	r2, r2, #8
 801ac36:	709a      	strb	r2, [r3, #2]
 801ac38:	2200      	movs	r2, #0
 801ac3a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801ac3c:	697b      	ldr	r3, [r7, #20]
 801ac3e:	2206      	movs	r2, #6
 801ac40:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801ac42:	697b      	ldr	r3, [r7, #20]
 801ac44:	2204      	movs	r2, #4
 801ac46:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801ac48:	f640 0306 	movw	r3, #2054	; 0x806
 801ac4c:	9300      	str	r3, [sp, #0]
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	68ba      	ldr	r2, [r7, #8]
 801ac52:	69b9      	ldr	r1, [r7, #24]
 801ac54:	68f8      	ldr	r0, [r7, #12]
 801ac56:	f001 fc15 	bl	801c484 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801ac5a:	69b8      	ldr	r0, [r7, #24]
 801ac5c:	f7f5 fe88 	bl	8010970 <pbuf_free>
  p = NULL;
 801ac60:	2300      	movs	r3, #0
 801ac62:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801ac64:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ac68:	4618      	mov	r0, r3
 801ac6a:	3720      	adds	r7, #32
 801ac6c:	46bd      	mov	sp, r7
 801ac6e:	bd80      	pop	{r7, pc}
 801ac70:	08025064 	.word	0x08025064
 801ac74:	080251b4 	.word	0x080251b4
 801ac78:	080250dc 	.word	0x080250dc
 801ac7c:	08025264 	.word	0x08025264
 801ac80:	08025298 	.word	0x08025298

0801ac84 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801ac84:	b580      	push	{r7, lr}
 801ac86:	b088      	sub	sp, #32
 801ac88:	af04      	add	r7, sp, #16
 801ac8a:	60f8      	str	r0, [r7, #12]
 801ac8c:	60b9      	str	r1, [r7, #8]
 801ac8e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ac90:	68fb      	ldr	r3, [r7, #12]
 801ac92:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801ac96:	68fb      	ldr	r3, [r7, #12]
 801ac98:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801ac9c:	68fb      	ldr	r3, [r7, #12]
 801ac9e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801aca0:	2201      	movs	r2, #1
 801aca2:	9203      	str	r2, [sp, #12]
 801aca4:	68ba      	ldr	r2, [r7, #8]
 801aca6:	9202      	str	r2, [sp, #8]
 801aca8:	4a06      	ldr	r2, [pc, #24]	; (801acc4 <etharp_request_dst+0x40>)
 801acaa:	9201      	str	r2, [sp, #4]
 801acac:	9300      	str	r3, [sp, #0]
 801acae:	4603      	mov	r3, r0
 801acb0:	687a      	ldr	r2, [r7, #4]
 801acb2:	68f8      	ldr	r0, [r7, #12]
 801acb4:	f7ff ff5a 	bl	801ab6c <etharp_raw>
 801acb8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801acba:	4618      	mov	r0, r3
 801acbc:	3710      	adds	r7, #16
 801acbe:	46bd      	mov	sp, r7
 801acc0:	bd80      	pop	{r7, pc}
 801acc2:	bf00      	nop
 801acc4:	08025ad4 	.word	0x08025ad4

0801acc8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801acc8:	b580      	push	{r7, lr}
 801acca:	b082      	sub	sp, #8
 801accc:	af00      	add	r7, sp, #0
 801acce:	6078      	str	r0, [r7, #4]
 801acd0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801acd2:	4a05      	ldr	r2, [pc, #20]	; (801ace8 <etharp_request+0x20>)
 801acd4:	6839      	ldr	r1, [r7, #0]
 801acd6:	6878      	ldr	r0, [r7, #4]
 801acd8:	f7ff ffd4 	bl	801ac84 <etharp_request_dst>
 801acdc:	4603      	mov	r3, r0
}
 801acde:	4618      	mov	r0, r3
 801ace0:	3708      	adds	r7, #8
 801ace2:	46bd      	mov	sp, r7
 801ace4:	bd80      	pop	{r7, pc}
 801ace6:	bf00      	nop
 801ace8:	08025acc 	.word	0x08025acc

0801acec <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801acec:	b580      	push	{r7, lr}
 801acee:	b08e      	sub	sp, #56	; 0x38
 801acf0:	af04      	add	r7, sp, #16
 801acf2:	6078      	str	r0, [r7, #4]
 801acf4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801acf6:	4b79      	ldr	r3, [pc, #484]	; (801aedc <icmp_input+0x1f0>)
 801acf8:	689b      	ldr	r3, [r3, #8]
 801acfa:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801acfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acfe:	781b      	ldrb	r3, [r3, #0]
 801ad00:	f003 030f 	and.w	r3, r3, #15
 801ad04:	b2db      	uxtb	r3, r3
 801ad06:	009b      	lsls	r3, r3, #2
 801ad08:	b2db      	uxtb	r3, r3
 801ad0a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801ad0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ad0e:	2b13      	cmp	r3, #19
 801ad10:	f240 80cd 	bls.w	801aeae <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	895b      	ldrh	r3, [r3, #10]
 801ad18:	2b03      	cmp	r3, #3
 801ad1a:	f240 80ca 	bls.w	801aeb2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	685b      	ldr	r3, [r3, #4]
 801ad22:	781b      	ldrb	r3, [r3, #0]
 801ad24:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801ad28:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	f000 80b7 	beq.w	801aea0 <icmp_input+0x1b4>
 801ad32:	2b08      	cmp	r3, #8
 801ad34:	f040 80b7 	bne.w	801aea6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801ad38:	4b69      	ldr	r3, [pc, #420]	; (801aee0 <icmp_input+0x1f4>)
 801ad3a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ad3c:	4b67      	ldr	r3, [pc, #412]	; (801aedc <icmp_input+0x1f0>)
 801ad3e:	695b      	ldr	r3, [r3, #20]
 801ad40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ad44:	2be0      	cmp	r3, #224	; 0xe0
 801ad46:	f000 80bb 	beq.w	801aec0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801ad4a:	4b64      	ldr	r3, [pc, #400]	; (801aedc <icmp_input+0x1f0>)
 801ad4c:	695b      	ldr	r3, [r3, #20]
 801ad4e:	4a63      	ldr	r2, [pc, #396]	; (801aedc <icmp_input+0x1f0>)
 801ad50:	6812      	ldr	r2, [r2, #0]
 801ad52:	4611      	mov	r1, r2
 801ad54:	4618      	mov	r0, r3
 801ad56:	f000 fc0b 	bl	801b570 <ip4_addr_isbroadcast_u32>
 801ad5a:	4603      	mov	r3, r0
 801ad5c:	2b00      	cmp	r3, #0
 801ad5e:	f040 80b1 	bne.w	801aec4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	891b      	ldrh	r3, [r3, #8]
 801ad66:	2b07      	cmp	r3, #7
 801ad68:	f240 80a5 	bls.w	801aeb6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801ad6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ad6e:	330e      	adds	r3, #14
 801ad70:	4619      	mov	r1, r3
 801ad72:	6878      	ldr	r0, [r7, #4]
 801ad74:	f7f5 fd34 	bl	80107e0 <pbuf_add_header>
 801ad78:	4603      	mov	r3, r0
 801ad7a:	2b00      	cmp	r3, #0
 801ad7c:	d04b      	beq.n	801ae16 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	891a      	ldrh	r2, [r3, #8]
 801ad82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ad84:	4413      	add	r3, r2
 801ad86:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	891b      	ldrh	r3, [r3, #8]
 801ad8c:	8b7a      	ldrh	r2, [r7, #26]
 801ad8e:	429a      	cmp	r2, r3
 801ad90:	f0c0 809a 	bcc.w	801aec8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801ad94:	8b7b      	ldrh	r3, [r7, #26]
 801ad96:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ad9a:	4619      	mov	r1, r3
 801ad9c:	200e      	movs	r0, #14
 801ad9e:	f7f5 fad1 	bl	8010344 <pbuf_alloc>
 801ada2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801ada4:	697b      	ldr	r3, [r7, #20]
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	f000 8090 	beq.w	801aecc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801adac:	697b      	ldr	r3, [r7, #20]
 801adae:	895b      	ldrh	r3, [r3, #10]
 801adb0:	461a      	mov	r2, r3
 801adb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801adb4:	3308      	adds	r3, #8
 801adb6:	429a      	cmp	r2, r3
 801adb8:	d203      	bcs.n	801adc2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801adba:	6978      	ldr	r0, [r7, #20]
 801adbc:	f7f5 fdd8 	bl	8010970 <pbuf_free>
          goto icmperr;
 801adc0:	e085      	b.n	801aece <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801adc2:	697b      	ldr	r3, [r7, #20]
 801adc4:	685b      	ldr	r3, [r3, #4]
 801adc6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801adc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801adca:	4618      	mov	r0, r3
 801adcc:	f003 feae 	bl	801eb2c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801add0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801add2:	4619      	mov	r1, r3
 801add4:	6978      	ldr	r0, [r7, #20]
 801add6:	f7f5 fd13 	bl	8010800 <pbuf_remove_header>
 801adda:	4603      	mov	r3, r0
 801addc:	2b00      	cmp	r3, #0
 801adde:	d009      	beq.n	801adf4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801ade0:	4b40      	ldr	r3, [pc, #256]	; (801aee4 <icmp_input+0x1f8>)
 801ade2:	22b6      	movs	r2, #182	; 0xb6
 801ade4:	4940      	ldr	r1, [pc, #256]	; (801aee8 <icmp_input+0x1fc>)
 801ade6:	4841      	ldr	r0, [pc, #260]	; (801aeec <icmp_input+0x200>)
 801ade8:	f004 fd3e 	bl	801f868 <iprintf>
          pbuf_free(r);
 801adec:	6978      	ldr	r0, [r7, #20]
 801adee:	f7f5 fdbf 	bl	8010970 <pbuf_free>
          goto icmperr;
 801adf2:	e06c      	b.n	801aece <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801adf4:	6879      	ldr	r1, [r7, #4]
 801adf6:	6978      	ldr	r0, [r7, #20]
 801adf8:	f7f5 feee 	bl	8010bd8 <pbuf_copy>
 801adfc:	4603      	mov	r3, r0
 801adfe:	2b00      	cmp	r3, #0
 801ae00:	d003      	beq.n	801ae0a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801ae02:	6978      	ldr	r0, [r7, #20]
 801ae04:	f7f5 fdb4 	bl	8010970 <pbuf_free>
          goto icmperr;
 801ae08:	e061      	b.n	801aece <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801ae0a:	6878      	ldr	r0, [r7, #4]
 801ae0c:	f7f5 fdb0 	bl	8010970 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801ae10:	697b      	ldr	r3, [r7, #20]
 801ae12:	607b      	str	r3, [r7, #4]
 801ae14:	e00f      	b.n	801ae36 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801ae16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ae18:	330e      	adds	r3, #14
 801ae1a:	4619      	mov	r1, r3
 801ae1c:	6878      	ldr	r0, [r7, #4]
 801ae1e:	f7f5 fcef 	bl	8010800 <pbuf_remove_header>
 801ae22:	4603      	mov	r3, r0
 801ae24:	2b00      	cmp	r3, #0
 801ae26:	d006      	beq.n	801ae36 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801ae28:	4b2e      	ldr	r3, [pc, #184]	; (801aee4 <icmp_input+0x1f8>)
 801ae2a:	22c7      	movs	r2, #199	; 0xc7
 801ae2c:	4930      	ldr	r1, [pc, #192]	; (801aef0 <icmp_input+0x204>)
 801ae2e:	482f      	ldr	r0, [pc, #188]	; (801aeec <icmp_input+0x200>)
 801ae30:	f004 fd1a 	bl	801f868 <iprintf>
          goto icmperr;
 801ae34:	e04b      	b.n	801aece <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	685b      	ldr	r3, [r3, #4]
 801ae3a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801ae3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ae3e:	4619      	mov	r1, r3
 801ae40:	6878      	ldr	r0, [r7, #4]
 801ae42:	f7f5 fccd 	bl	80107e0 <pbuf_add_header>
 801ae46:	4603      	mov	r3, r0
 801ae48:	2b00      	cmp	r3, #0
 801ae4a:	d12b      	bne.n	801aea4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	685b      	ldr	r3, [r3, #4]
 801ae50:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801ae52:	69fb      	ldr	r3, [r7, #28]
 801ae54:	681a      	ldr	r2, [r3, #0]
 801ae56:	68fb      	ldr	r3, [r7, #12]
 801ae58:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801ae5a:	4b20      	ldr	r3, [pc, #128]	; (801aedc <icmp_input+0x1f0>)
 801ae5c:	691a      	ldr	r2, [r3, #16]
 801ae5e:	68fb      	ldr	r3, [r7, #12]
 801ae60:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801ae62:	693b      	ldr	r3, [r7, #16]
 801ae64:	2200      	movs	r2, #0
 801ae66:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801ae68:	693b      	ldr	r3, [r7, #16]
 801ae6a:	2200      	movs	r2, #0
 801ae6c:	709a      	strb	r2, [r3, #2]
 801ae6e:	2200      	movs	r2, #0
 801ae70:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801ae72:	68fb      	ldr	r3, [r7, #12]
 801ae74:	22ff      	movs	r2, #255	; 0xff
 801ae76:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801ae78:	68fb      	ldr	r3, [r7, #12]
 801ae7a:	2200      	movs	r2, #0
 801ae7c:	729a      	strb	r2, [r3, #10]
 801ae7e:	2200      	movs	r2, #0
 801ae80:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801ae82:	683b      	ldr	r3, [r7, #0]
 801ae84:	9302      	str	r3, [sp, #8]
 801ae86:	2301      	movs	r3, #1
 801ae88:	9301      	str	r3, [sp, #4]
 801ae8a:	2300      	movs	r3, #0
 801ae8c:	9300      	str	r3, [sp, #0]
 801ae8e:	23ff      	movs	r3, #255	; 0xff
 801ae90:	2200      	movs	r2, #0
 801ae92:	69f9      	ldr	r1, [r7, #28]
 801ae94:	6878      	ldr	r0, [r7, #4]
 801ae96:	f000 fa93 	bl	801b3c0 <ip4_output_if>
 801ae9a:	4603      	mov	r3, r0
 801ae9c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801ae9e:	e001      	b.n	801aea4 <icmp_input+0x1b8>
      break;
 801aea0:	bf00      	nop
 801aea2:	e000      	b.n	801aea6 <icmp_input+0x1ba>
      break;
 801aea4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801aea6:	6878      	ldr	r0, [r7, #4]
 801aea8:	f7f5 fd62 	bl	8010970 <pbuf_free>
  return;
 801aeac:	e013      	b.n	801aed6 <icmp_input+0x1ea>
    goto lenerr;
 801aeae:	bf00      	nop
 801aeb0:	e002      	b.n	801aeb8 <icmp_input+0x1cc>
    goto lenerr;
 801aeb2:	bf00      	nop
 801aeb4:	e000      	b.n	801aeb8 <icmp_input+0x1cc>
        goto lenerr;
 801aeb6:	bf00      	nop
lenerr:
  pbuf_free(p);
 801aeb8:	6878      	ldr	r0, [r7, #4]
 801aeba:	f7f5 fd59 	bl	8010970 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801aebe:	e00a      	b.n	801aed6 <icmp_input+0x1ea>
        goto icmperr;
 801aec0:	bf00      	nop
 801aec2:	e004      	b.n	801aece <icmp_input+0x1e2>
        goto icmperr;
 801aec4:	bf00      	nop
 801aec6:	e002      	b.n	801aece <icmp_input+0x1e2>
          goto icmperr;
 801aec8:	bf00      	nop
 801aeca:	e000      	b.n	801aece <icmp_input+0x1e2>
          goto icmperr;
 801aecc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801aece:	6878      	ldr	r0, [r7, #4]
 801aed0:	f7f5 fd4e 	bl	8010970 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801aed4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801aed6:	3728      	adds	r7, #40	; 0x28
 801aed8:	46bd      	mov	sp, r7
 801aeda:	bd80      	pop	{r7, pc}
 801aedc:	200050c0 	.word	0x200050c0
 801aee0:	200050d4 	.word	0x200050d4
 801aee4:	080252dc 	.word	0x080252dc
 801aee8:	08025314 	.word	0x08025314
 801aeec:	0802534c 	.word	0x0802534c
 801aef0:	08025374 	.word	0x08025374

0801aef4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801aef4:	b580      	push	{r7, lr}
 801aef6:	b082      	sub	sp, #8
 801aef8:	af00      	add	r7, sp, #0
 801aefa:	6078      	str	r0, [r7, #4]
 801aefc:	460b      	mov	r3, r1
 801aefe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801af00:	78fb      	ldrb	r3, [r7, #3]
 801af02:	461a      	mov	r2, r3
 801af04:	2103      	movs	r1, #3
 801af06:	6878      	ldr	r0, [r7, #4]
 801af08:	f000 f814 	bl	801af34 <icmp_send_response>
}
 801af0c:	bf00      	nop
 801af0e:	3708      	adds	r7, #8
 801af10:	46bd      	mov	sp, r7
 801af12:	bd80      	pop	{r7, pc}

0801af14 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801af14:	b580      	push	{r7, lr}
 801af16:	b082      	sub	sp, #8
 801af18:	af00      	add	r7, sp, #0
 801af1a:	6078      	str	r0, [r7, #4]
 801af1c:	460b      	mov	r3, r1
 801af1e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801af20:	78fb      	ldrb	r3, [r7, #3]
 801af22:	461a      	mov	r2, r3
 801af24:	210b      	movs	r1, #11
 801af26:	6878      	ldr	r0, [r7, #4]
 801af28:	f000 f804 	bl	801af34 <icmp_send_response>
}
 801af2c:	bf00      	nop
 801af2e:	3708      	adds	r7, #8
 801af30:	46bd      	mov	sp, r7
 801af32:	bd80      	pop	{r7, pc}

0801af34 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801af34:	b580      	push	{r7, lr}
 801af36:	b08c      	sub	sp, #48	; 0x30
 801af38:	af04      	add	r7, sp, #16
 801af3a:	6078      	str	r0, [r7, #4]
 801af3c:	460b      	mov	r3, r1
 801af3e:	70fb      	strb	r3, [r7, #3]
 801af40:	4613      	mov	r3, r2
 801af42:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801af44:	f44f 7220 	mov.w	r2, #640	; 0x280
 801af48:	2124      	movs	r1, #36	; 0x24
 801af4a:	2022      	movs	r0, #34	; 0x22
 801af4c:	f7f5 f9fa 	bl	8010344 <pbuf_alloc>
 801af50:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801af52:	69fb      	ldr	r3, [r7, #28]
 801af54:	2b00      	cmp	r3, #0
 801af56:	d04c      	beq.n	801aff2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801af58:	69fb      	ldr	r3, [r7, #28]
 801af5a:	895b      	ldrh	r3, [r3, #10]
 801af5c:	2b23      	cmp	r3, #35	; 0x23
 801af5e:	d806      	bhi.n	801af6e <icmp_send_response+0x3a>
 801af60:	4b26      	ldr	r3, [pc, #152]	; (801affc <icmp_send_response+0xc8>)
 801af62:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801af66:	4926      	ldr	r1, [pc, #152]	; (801b000 <icmp_send_response+0xcc>)
 801af68:	4826      	ldr	r0, [pc, #152]	; (801b004 <icmp_send_response+0xd0>)
 801af6a:	f004 fc7d 	bl	801f868 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	685b      	ldr	r3, [r3, #4]
 801af72:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801af74:	69fb      	ldr	r3, [r7, #28]
 801af76:	685b      	ldr	r3, [r3, #4]
 801af78:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801af7a:	697b      	ldr	r3, [r7, #20]
 801af7c:	78fa      	ldrb	r2, [r7, #3]
 801af7e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801af80:	697b      	ldr	r3, [r7, #20]
 801af82:	78ba      	ldrb	r2, [r7, #2]
 801af84:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801af86:	697b      	ldr	r3, [r7, #20]
 801af88:	2200      	movs	r2, #0
 801af8a:	711a      	strb	r2, [r3, #4]
 801af8c:	2200      	movs	r2, #0
 801af8e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801af90:	697b      	ldr	r3, [r7, #20]
 801af92:	2200      	movs	r2, #0
 801af94:	719a      	strb	r2, [r3, #6]
 801af96:	2200      	movs	r2, #0
 801af98:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801af9a:	69fb      	ldr	r3, [r7, #28]
 801af9c:	685b      	ldr	r3, [r3, #4]
 801af9e:	f103 0008 	add.w	r0, r3, #8
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	685b      	ldr	r3, [r3, #4]
 801afa6:	221c      	movs	r2, #28
 801afa8:	4619      	mov	r1, r3
 801afaa:	f003 fdbf 	bl	801eb2c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801afae:	69bb      	ldr	r3, [r7, #24]
 801afb0:	68db      	ldr	r3, [r3, #12]
 801afb2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801afb4:	f107 030c 	add.w	r3, r7, #12
 801afb8:	4618      	mov	r0, r3
 801afba:	f000 f825 	bl	801b008 <ip4_route>
 801afbe:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801afc0:	693b      	ldr	r3, [r7, #16]
 801afc2:	2b00      	cmp	r3, #0
 801afc4:	d011      	beq.n	801afea <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801afc6:	697b      	ldr	r3, [r7, #20]
 801afc8:	2200      	movs	r2, #0
 801afca:	709a      	strb	r2, [r3, #2]
 801afcc:	2200      	movs	r2, #0
 801afce:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801afd0:	f107 020c 	add.w	r2, r7, #12
 801afd4:	693b      	ldr	r3, [r7, #16]
 801afd6:	9302      	str	r3, [sp, #8]
 801afd8:	2301      	movs	r3, #1
 801afda:	9301      	str	r3, [sp, #4]
 801afdc:	2300      	movs	r3, #0
 801afde:	9300      	str	r3, [sp, #0]
 801afe0:	23ff      	movs	r3, #255	; 0xff
 801afe2:	2100      	movs	r1, #0
 801afe4:	69f8      	ldr	r0, [r7, #28]
 801afe6:	f000 f9eb 	bl	801b3c0 <ip4_output_if>
  }
  pbuf_free(q);
 801afea:	69f8      	ldr	r0, [r7, #28]
 801afec:	f7f5 fcc0 	bl	8010970 <pbuf_free>
 801aff0:	e000      	b.n	801aff4 <icmp_send_response+0xc0>
    return;
 801aff2:	bf00      	nop
}
 801aff4:	3720      	adds	r7, #32
 801aff6:	46bd      	mov	sp, r7
 801aff8:	bd80      	pop	{r7, pc}
 801affa:	bf00      	nop
 801affc:	080252dc 	.word	0x080252dc
 801b000:	080253a8 	.word	0x080253a8
 801b004:	0802534c 	.word	0x0802534c

0801b008 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801b008:	b480      	push	{r7}
 801b00a:	b085      	sub	sp, #20
 801b00c:	af00      	add	r7, sp, #0
 801b00e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801b010:	4b33      	ldr	r3, [pc, #204]	; (801b0e0 <ip4_route+0xd8>)
 801b012:	681b      	ldr	r3, [r3, #0]
 801b014:	60fb      	str	r3, [r7, #12]
 801b016:	e036      	b.n	801b086 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b018:	68fb      	ldr	r3, [r7, #12]
 801b01a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b01e:	f003 0301 	and.w	r3, r3, #1
 801b022:	b2db      	uxtb	r3, r3
 801b024:	2b00      	cmp	r3, #0
 801b026:	d02b      	beq.n	801b080 <ip4_route+0x78>
 801b028:	68fb      	ldr	r3, [r7, #12]
 801b02a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b02e:	089b      	lsrs	r3, r3, #2
 801b030:	f003 0301 	and.w	r3, r3, #1
 801b034:	b2db      	uxtb	r3, r3
 801b036:	2b00      	cmp	r3, #0
 801b038:	d022      	beq.n	801b080 <ip4_route+0x78>
 801b03a:	68fb      	ldr	r3, [r7, #12]
 801b03c:	3304      	adds	r3, #4
 801b03e:	681b      	ldr	r3, [r3, #0]
 801b040:	2b00      	cmp	r3, #0
 801b042:	d01d      	beq.n	801b080 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	681a      	ldr	r2, [r3, #0]
 801b048:	68fb      	ldr	r3, [r7, #12]
 801b04a:	3304      	adds	r3, #4
 801b04c:	681b      	ldr	r3, [r3, #0]
 801b04e:	405a      	eors	r2, r3
 801b050:	68fb      	ldr	r3, [r7, #12]
 801b052:	3308      	adds	r3, #8
 801b054:	681b      	ldr	r3, [r3, #0]
 801b056:	4013      	ands	r3, r2
 801b058:	2b00      	cmp	r3, #0
 801b05a:	d101      	bne.n	801b060 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801b05c:	68fb      	ldr	r3, [r7, #12]
 801b05e:	e038      	b.n	801b0d2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801b060:	68fb      	ldr	r3, [r7, #12]
 801b062:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b066:	f003 0302 	and.w	r3, r3, #2
 801b06a:	2b00      	cmp	r3, #0
 801b06c:	d108      	bne.n	801b080 <ip4_route+0x78>
 801b06e:	687b      	ldr	r3, [r7, #4]
 801b070:	681a      	ldr	r2, [r3, #0]
 801b072:	68fb      	ldr	r3, [r7, #12]
 801b074:	330c      	adds	r3, #12
 801b076:	681b      	ldr	r3, [r3, #0]
 801b078:	429a      	cmp	r2, r3
 801b07a:	d101      	bne.n	801b080 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801b07c:	68fb      	ldr	r3, [r7, #12]
 801b07e:	e028      	b.n	801b0d2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801b080:	68fb      	ldr	r3, [r7, #12]
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	60fb      	str	r3, [r7, #12]
 801b086:	68fb      	ldr	r3, [r7, #12]
 801b088:	2b00      	cmp	r3, #0
 801b08a:	d1c5      	bne.n	801b018 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b08c:	4b15      	ldr	r3, [pc, #84]	; (801b0e4 <ip4_route+0xdc>)
 801b08e:	681b      	ldr	r3, [r3, #0]
 801b090:	2b00      	cmp	r3, #0
 801b092:	d01a      	beq.n	801b0ca <ip4_route+0xc2>
 801b094:	4b13      	ldr	r3, [pc, #76]	; (801b0e4 <ip4_route+0xdc>)
 801b096:	681b      	ldr	r3, [r3, #0]
 801b098:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b09c:	f003 0301 	and.w	r3, r3, #1
 801b0a0:	2b00      	cmp	r3, #0
 801b0a2:	d012      	beq.n	801b0ca <ip4_route+0xc2>
 801b0a4:	4b0f      	ldr	r3, [pc, #60]	; (801b0e4 <ip4_route+0xdc>)
 801b0a6:	681b      	ldr	r3, [r3, #0]
 801b0a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b0ac:	f003 0304 	and.w	r3, r3, #4
 801b0b0:	2b00      	cmp	r3, #0
 801b0b2:	d00a      	beq.n	801b0ca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b0b4:	4b0b      	ldr	r3, [pc, #44]	; (801b0e4 <ip4_route+0xdc>)
 801b0b6:	681b      	ldr	r3, [r3, #0]
 801b0b8:	3304      	adds	r3, #4
 801b0ba:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b0bc:	2b00      	cmp	r3, #0
 801b0be:	d004      	beq.n	801b0ca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	681b      	ldr	r3, [r3, #0]
 801b0c4:	b2db      	uxtb	r3, r3
 801b0c6:	2b7f      	cmp	r3, #127	; 0x7f
 801b0c8:	d101      	bne.n	801b0ce <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801b0ca:	2300      	movs	r3, #0
 801b0cc:	e001      	b.n	801b0d2 <ip4_route+0xca>
  }

  return netif_default;
 801b0ce:	4b05      	ldr	r3, [pc, #20]	; (801b0e4 <ip4_route+0xdc>)
 801b0d0:	681b      	ldr	r3, [r3, #0]
}
 801b0d2:	4618      	mov	r0, r3
 801b0d4:	3714      	adds	r7, #20
 801b0d6:	46bd      	mov	sp, r7
 801b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0dc:	4770      	bx	lr
 801b0de:	bf00      	nop
 801b0e0:	2000892c 	.word	0x2000892c
 801b0e4:	20008930 	.word	0x20008930

0801b0e8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801b0e8:	b580      	push	{r7, lr}
 801b0ea:	b082      	sub	sp, #8
 801b0ec:	af00      	add	r7, sp, #0
 801b0ee:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801b0f0:	687b      	ldr	r3, [r7, #4]
 801b0f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b0f6:	f003 0301 	and.w	r3, r3, #1
 801b0fa:	b2db      	uxtb	r3, r3
 801b0fc:	2b00      	cmp	r3, #0
 801b0fe:	d016      	beq.n	801b12e <ip4_input_accept+0x46>
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	3304      	adds	r3, #4
 801b104:	681b      	ldr	r3, [r3, #0]
 801b106:	2b00      	cmp	r3, #0
 801b108:	d011      	beq.n	801b12e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b10a:	4b0b      	ldr	r3, [pc, #44]	; (801b138 <ip4_input_accept+0x50>)
 801b10c:	695a      	ldr	r2, [r3, #20]
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	3304      	adds	r3, #4
 801b112:	681b      	ldr	r3, [r3, #0]
 801b114:	429a      	cmp	r2, r3
 801b116:	d008      	beq.n	801b12a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801b118:	4b07      	ldr	r3, [pc, #28]	; (801b138 <ip4_input_accept+0x50>)
 801b11a:	695b      	ldr	r3, [r3, #20]
 801b11c:	6879      	ldr	r1, [r7, #4]
 801b11e:	4618      	mov	r0, r3
 801b120:	f000 fa26 	bl	801b570 <ip4_addr_isbroadcast_u32>
 801b124:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b126:	2b00      	cmp	r3, #0
 801b128:	d001      	beq.n	801b12e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801b12a:	2301      	movs	r3, #1
 801b12c:	e000      	b.n	801b130 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801b12e:	2300      	movs	r3, #0
}
 801b130:	4618      	mov	r0, r3
 801b132:	3708      	adds	r7, #8
 801b134:	46bd      	mov	sp, r7
 801b136:	bd80      	pop	{r7, pc}
 801b138:	200050c0 	.word	0x200050c0

0801b13c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801b13c:	b580      	push	{r7, lr}
 801b13e:	b088      	sub	sp, #32
 801b140:	af00      	add	r7, sp, #0
 801b142:	6078      	str	r0, [r7, #4]
 801b144:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801b146:	2301      	movs	r3, #1
 801b148:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801b14a:	687b      	ldr	r3, [r7, #4]
 801b14c:	685b      	ldr	r3, [r3, #4]
 801b14e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801b150:	69fb      	ldr	r3, [r7, #28]
 801b152:	781b      	ldrb	r3, [r3, #0]
 801b154:	091b      	lsrs	r3, r3, #4
 801b156:	b2db      	uxtb	r3, r3
 801b158:	2b04      	cmp	r3, #4
 801b15a:	d004      	beq.n	801b166 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801b15c:	6878      	ldr	r0, [r7, #4]
 801b15e:	f7f5 fc07 	bl	8010970 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801b162:	2300      	movs	r3, #0
 801b164:	e123      	b.n	801b3ae <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801b166:	69fb      	ldr	r3, [r7, #28]
 801b168:	781b      	ldrb	r3, [r3, #0]
 801b16a:	f003 030f 	and.w	r3, r3, #15
 801b16e:	b2db      	uxtb	r3, r3
 801b170:	009b      	lsls	r3, r3, #2
 801b172:	b2db      	uxtb	r3, r3
 801b174:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801b176:	69fb      	ldr	r3, [r7, #28]
 801b178:	885b      	ldrh	r3, [r3, #2]
 801b17a:	b29b      	uxth	r3, r3
 801b17c:	4618      	mov	r0, r3
 801b17e:	f7f3 fce7 	bl	800eb50 <lwip_htons>
 801b182:	4603      	mov	r3, r0
 801b184:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801b186:	687b      	ldr	r3, [r7, #4]
 801b188:	891b      	ldrh	r3, [r3, #8]
 801b18a:	8a3a      	ldrh	r2, [r7, #16]
 801b18c:	429a      	cmp	r2, r3
 801b18e:	d204      	bcs.n	801b19a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801b190:	8a3b      	ldrh	r3, [r7, #16]
 801b192:	4619      	mov	r1, r3
 801b194:	6878      	ldr	r0, [r7, #4]
 801b196:	f7f5 fa33 	bl	8010600 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	895b      	ldrh	r3, [r3, #10]
 801b19e:	8a7a      	ldrh	r2, [r7, #18]
 801b1a0:	429a      	cmp	r2, r3
 801b1a2:	d807      	bhi.n	801b1b4 <ip4_input+0x78>
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	891b      	ldrh	r3, [r3, #8]
 801b1a8:	8a3a      	ldrh	r2, [r7, #16]
 801b1aa:	429a      	cmp	r2, r3
 801b1ac:	d802      	bhi.n	801b1b4 <ip4_input+0x78>
 801b1ae:	8a7b      	ldrh	r3, [r7, #18]
 801b1b0:	2b13      	cmp	r3, #19
 801b1b2:	d804      	bhi.n	801b1be <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801b1b4:	6878      	ldr	r0, [r7, #4]
 801b1b6:	f7f5 fbdb 	bl	8010970 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801b1ba:	2300      	movs	r3, #0
 801b1bc:	e0f7      	b.n	801b3ae <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801b1be:	69fb      	ldr	r3, [r7, #28]
 801b1c0:	691b      	ldr	r3, [r3, #16]
 801b1c2:	4a7d      	ldr	r2, [pc, #500]	; (801b3b8 <ip4_input+0x27c>)
 801b1c4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801b1c6:	69fb      	ldr	r3, [r7, #28]
 801b1c8:	68db      	ldr	r3, [r3, #12]
 801b1ca:	4a7b      	ldr	r2, [pc, #492]	; (801b3b8 <ip4_input+0x27c>)
 801b1cc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b1ce:	4b7a      	ldr	r3, [pc, #488]	; (801b3b8 <ip4_input+0x27c>)
 801b1d0:	695b      	ldr	r3, [r3, #20]
 801b1d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b1d6:	2be0      	cmp	r3, #224	; 0xe0
 801b1d8:	d112      	bne.n	801b200 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801b1da:	683b      	ldr	r3, [r7, #0]
 801b1dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b1e0:	f003 0301 	and.w	r3, r3, #1
 801b1e4:	b2db      	uxtb	r3, r3
 801b1e6:	2b00      	cmp	r3, #0
 801b1e8:	d007      	beq.n	801b1fa <ip4_input+0xbe>
 801b1ea:	683b      	ldr	r3, [r7, #0]
 801b1ec:	3304      	adds	r3, #4
 801b1ee:	681b      	ldr	r3, [r3, #0]
 801b1f0:	2b00      	cmp	r3, #0
 801b1f2:	d002      	beq.n	801b1fa <ip4_input+0xbe>
      netif = inp;
 801b1f4:	683b      	ldr	r3, [r7, #0]
 801b1f6:	61bb      	str	r3, [r7, #24]
 801b1f8:	e02a      	b.n	801b250 <ip4_input+0x114>
    } else {
      netif = NULL;
 801b1fa:	2300      	movs	r3, #0
 801b1fc:	61bb      	str	r3, [r7, #24]
 801b1fe:	e027      	b.n	801b250 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801b200:	6838      	ldr	r0, [r7, #0]
 801b202:	f7ff ff71 	bl	801b0e8 <ip4_input_accept>
 801b206:	4603      	mov	r3, r0
 801b208:	2b00      	cmp	r3, #0
 801b20a:	d002      	beq.n	801b212 <ip4_input+0xd6>
      netif = inp;
 801b20c:	683b      	ldr	r3, [r7, #0]
 801b20e:	61bb      	str	r3, [r7, #24]
 801b210:	e01e      	b.n	801b250 <ip4_input+0x114>
    } else {
      netif = NULL;
 801b212:	2300      	movs	r3, #0
 801b214:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801b216:	4b68      	ldr	r3, [pc, #416]	; (801b3b8 <ip4_input+0x27c>)
 801b218:	695b      	ldr	r3, [r3, #20]
 801b21a:	b2db      	uxtb	r3, r3
 801b21c:	2b7f      	cmp	r3, #127	; 0x7f
 801b21e:	d017      	beq.n	801b250 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801b220:	4b66      	ldr	r3, [pc, #408]	; (801b3bc <ip4_input+0x280>)
 801b222:	681b      	ldr	r3, [r3, #0]
 801b224:	61bb      	str	r3, [r7, #24]
 801b226:	e00e      	b.n	801b246 <ip4_input+0x10a>
          if (netif == inp) {
 801b228:	69ba      	ldr	r2, [r7, #24]
 801b22a:	683b      	ldr	r3, [r7, #0]
 801b22c:	429a      	cmp	r2, r3
 801b22e:	d006      	beq.n	801b23e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801b230:	69b8      	ldr	r0, [r7, #24]
 801b232:	f7ff ff59 	bl	801b0e8 <ip4_input_accept>
 801b236:	4603      	mov	r3, r0
 801b238:	2b00      	cmp	r3, #0
 801b23a:	d108      	bne.n	801b24e <ip4_input+0x112>
 801b23c:	e000      	b.n	801b240 <ip4_input+0x104>
            continue;
 801b23e:	bf00      	nop
        NETIF_FOREACH(netif) {
 801b240:	69bb      	ldr	r3, [r7, #24]
 801b242:	681b      	ldr	r3, [r3, #0]
 801b244:	61bb      	str	r3, [r7, #24]
 801b246:	69bb      	ldr	r3, [r7, #24]
 801b248:	2b00      	cmp	r3, #0
 801b24a:	d1ed      	bne.n	801b228 <ip4_input+0xec>
 801b24c:	e000      	b.n	801b250 <ip4_input+0x114>
            break;
 801b24e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801b250:	69bb      	ldr	r3, [r7, #24]
 801b252:	2b00      	cmp	r3, #0
 801b254:	d111      	bne.n	801b27a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801b256:	69fb      	ldr	r3, [r7, #28]
 801b258:	7a5b      	ldrb	r3, [r3, #9]
 801b25a:	2b11      	cmp	r3, #17
 801b25c:	d10d      	bne.n	801b27a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801b25e:	8a7b      	ldrh	r3, [r7, #18]
 801b260:	69fa      	ldr	r2, [r7, #28]
 801b262:	4413      	add	r3, r2
 801b264:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801b266:	68fb      	ldr	r3, [r7, #12]
 801b268:	885b      	ldrh	r3, [r3, #2]
 801b26a:	b29b      	uxth	r3, r3
 801b26c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801b270:	d103      	bne.n	801b27a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801b272:	683b      	ldr	r3, [r7, #0]
 801b274:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801b276:	2300      	movs	r3, #0
 801b278:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801b27a:	697b      	ldr	r3, [r7, #20]
 801b27c:	2b00      	cmp	r3, #0
 801b27e:	d017      	beq.n	801b2b0 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801b280:	4b4d      	ldr	r3, [pc, #308]	; (801b3b8 <ip4_input+0x27c>)
 801b282:	691b      	ldr	r3, [r3, #16]
 801b284:	2b00      	cmp	r3, #0
 801b286:	d013      	beq.n	801b2b0 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b288:	4b4b      	ldr	r3, [pc, #300]	; (801b3b8 <ip4_input+0x27c>)
 801b28a:	691b      	ldr	r3, [r3, #16]
 801b28c:	6839      	ldr	r1, [r7, #0]
 801b28e:	4618      	mov	r0, r3
 801b290:	f000 f96e 	bl	801b570 <ip4_addr_isbroadcast_u32>
 801b294:	4603      	mov	r3, r0
 801b296:	2b00      	cmp	r3, #0
 801b298:	d105      	bne.n	801b2a6 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801b29a:	4b47      	ldr	r3, [pc, #284]	; (801b3b8 <ip4_input+0x27c>)
 801b29c:	691b      	ldr	r3, [r3, #16]
 801b29e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b2a2:	2be0      	cmp	r3, #224	; 0xe0
 801b2a4:	d104      	bne.n	801b2b0 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801b2a6:	6878      	ldr	r0, [r7, #4]
 801b2a8:	f7f5 fb62 	bl	8010970 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801b2ac:	2300      	movs	r3, #0
 801b2ae:	e07e      	b.n	801b3ae <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801b2b0:	69bb      	ldr	r3, [r7, #24]
 801b2b2:	2b00      	cmp	r3, #0
 801b2b4:	d104      	bne.n	801b2c0 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801b2b6:	6878      	ldr	r0, [r7, #4]
 801b2b8:	f7f5 fb5a 	bl	8010970 <pbuf_free>
    return ERR_OK;
 801b2bc:	2300      	movs	r3, #0
 801b2be:	e076      	b.n	801b3ae <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801b2c0:	69fb      	ldr	r3, [r7, #28]
 801b2c2:	88db      	ldrh	r3, [r3, #6]
 801b2c4:	b29b      	uxth	r3, r3
 801b2c6:	461a      	mov	r2, r3
 801b2c8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801b2cc:	4013      	ands	r3, r2
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	d00b      	beq.n	801b2ea <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801b2d2:	6878      	ldr	r0, [r7, #4]
 801b2d4:	f000 fd14 	bl	801bd00 <ip4_reass>
 801b2d8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801b2da:	687b      	ldr	r3, [r7, #4]
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	d101      	bne.n	801b2e4 <ip4_input+0x1a8>
      return ERR_OK;
 801b2e0:	2300      	movs	r3, #0
 801b2e2:	e064      	b.n	801b3ae <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	685b      	ldr	r3, [r3, #4]
 801b2e8:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801b2ea:	4a33      	ldr	r2, [pc, #204]	; (801b3b8 <ip4_input+0x27c>)
 801b2ec:	69bb      	ldr	r3, [r7, #24]
 801b2ee:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801b2f0:	4a31      	ldr	r2, [pc, #196]	; (801b3b8 <ip4_input+0x27c>)
 801b2f2:	683b      	ldr	r3, [r7, #0]
 801b2f4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801b2f6:	4a30      	ldr	r2, [pc, #192]	; (801b3b8 <ip4_input+0x27c>)
 801b2f8:	69fb      	ldr	r3, [r7, #28]
 801b2fa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801b2fc:	69fb      	ldr	r3, [r7, #28]
 801b2fe:	781b      	ldrb	r3, [r3, #0]
 801b300:	f003 030f 	and.w	r3, r3, #15
 801b304:	b2db      	uxtb	r3, r3
 801b306:	009b      	lsls	r3, r3, #2
 801b308:	b2db      	uxtb	r3, r3
 801b30a:	b29a      	uxth	r2, r3
 801b30c:	4b2a      	ldr	r3, [pc, #168]	; (801b3b8 <ip4_input+0x27c>)
 801b30e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801b310:	8a7b      	ldrh	r3, [r7, #18]
 801b312:	4619      	mov	r1, r3
 801b314:	6878      	ldr	r0, [r7, #4]
 801b316:	f7f5 fa73 	bl	8010800 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801b31a:	69fb      	ldr	r3, [r7, #28]
 801b31c:	7a5b      	ldrb	r3, [r3, #9]
 801b31e:	2b11      	cmp	r3, #17
 801b320:	d006      	beq.n	801b330 <ip4_input+0x1f4>
 801b322:	2b11      	cmp	r3, #17
 801b324:	dc13      	bgt.n	801b34e <ip4_input+0x212>
 801b326:	2b01      	cmp	r3, #1
 801b328:	d00c      	beq.n	801b344 <ip4_input+0x208>
 801b32a:	2b06      	cmp	r3, #6
 801b32c:	d005      	beq.n	801b33a <ip4_input+0x1fe>
 801b32e:	e00e      	b.n	801b34e <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801b330:	6839      	ldr	r1, [r7, #0]
 801b332:	6878      	ldr	r0, [r7, #4]
 801b334:	f7fc f9e4 	bl	8017700 <udp_input>
        break;
 801b338:	e026      	b.n	801b388 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801b33a:	6839      	ldr	r1, [r7, #0]
 801b33c:	6878      	ldr	r0, [r7, #4]
 801b33e:	f7f7 fda1 	bl	8012e84 <tcp_input>
        break;
 801b342:	e021      	b.n	801b388 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801b344:	6839      	ldr	r1, [r7, #0]
 801b346:	6878      	ldr	r0, [r7, #4]
 801b348:	f7ff fcd0 	bl	801acec <icmp_input>
        break;
 801b34c:	e01c      	b.n	801b388 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b34e:	4b1a      	ldr	r3, [pc, #104]	; (801b3b8 <ip4_input+0x27c>)
 801b350:	695b      	ldr	r3, [r3, #20]
 801b352:	69b9      	ldr	r1, [r7, #24]
 801b354:	4618      	mov	r0, r3
 801b356:	f000 f90b 	bl	801b570 <ip4_addr_isbroadcast_u32>
 801b35a:	4603      	mov	r3, r0
 801b35c:	2b00      	cmp	r3, #0
 801b35e:	d10f      	bne.n	801b380 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b360:	4b15      	ldr	r3, [pc, #84]	; (801b3b8 <ip4_input+0x27c>)
 801b362:	695b      	ldr	r3, [r3, #20]
 801b364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b368:	2be0      	cmp	r3, #224	; 0xe0
 801b36a:	d009      	beq.n	801b380 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801b36c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b370:	4619      	mov	r1, r3
 801b372:	6878      	ldr	r0, [r7, #4]
 801b374:	f7f5 fab7 	bl	80108e6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801b378:	2102      	movs	r1, #2
 801b37a:	6878      	ldr	r0, [r7, #4]
 801b37c:	f7ff fdba 	bl	801aef4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801b380:	6878      	ldr	r0, [r7, #4]
 801b382:	f7f5 faf5 	bl	8010970 <pbuf_free>
        break;
 801b386:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801b388:	4b0b      	ldr	r3, [pc, #44]	; (801b3b8 <ip4_input+0x27c>)
 801b38a:	2200      	movs	r2, #0
 801b38c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801b38e:	4b0a      	ldr	r3, [pc, #40]	; (801b3b8 <ip4_input+0x27c>)
 801b390:	2200      	movs	r2, #0
 801b392:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801b394:	4b08      	ldr	r3, [pc, #32]	; (801b3b8 <ip4_input+0x27c>)
 801b396:	2200      	movs	r2, #0
 801b398:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801b39a:	4b07      	ldr	r3, [pc, #28]	; (801b3b8 <ip4_input+0x27c>)
 801b39c:	2200      	movs	r2, #0
 801b39e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801b3a0:	4b05      	ldr	r3, [pc, #20]	; (801b3b8 <ip4_input+0x27c>)
 801b3a2:	2200      	movs	r2, #0
 801b3a4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801b3a6:	4b04      	ldr	r3, [pc, #16]	; (801b3b8 <ip4_input+0x27c>)
 801b3a8:	2200      	movs	r2, #0
 801b3aa:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801b3ac:	2300      	movs	r3, #0
}
 801b3ae:	4618      	mov	r0, r3
 801b3b0:	3720      	adds	r7, #32
 801b3b2:	46bd      	mov	sp, r7
 801b3b4:	bd80      	pop	{r7, pc}
 801b3b6:	bf00      	nop
 801b3b8:	200050c0 	.word	0x200050c0
 801b3bc:	2000892c 	.word	0x2000892c

0801b3c0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801b3c0:	b580      	push	{r7, lr}
 801b3c2:	b08a      	sub	sp, #40	; 0x28
 801b3c4:	af04      	add	r7, sp, #16
 801b3c6:	60f8      	str	r0, [r7, #12]
 801b3c8:	60b9      	str	r1, [r7, #8]
 801b3ca:	607a      	str	r2, [r7, #4]
 801b3cc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801b3ce:	68bb      	ldr	r3, [r7, #8]
 801b3d0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	2b00      	cmp	r3, #0
 801b3d6:	d009      	beq.n	801b3ec <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801b3d8:	68bb      	ldr	r3, [r7, #8]
 801b3da:	2b00      	cmp	r3, #0
 801b3dc:	d003      	beq.n	801b3e6 <ip4_output_if+0x26>
 801b3de:	68bb      	ldr	r3, [r7, #8]
 801b3e0:	681b      	ldr	r3, [r3, #0]
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	d102      	bne.n	801b3ec <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801b3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b3e8:	3304      	adds	r3, #4
 801b3ea:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801b3ec:	78fa      	ldrb	r2, [r7, #3]
 801b3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b3f0:	9302      	str	r3, [sp, #8]
 801b3f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b3f6:	9301      	str	r3, [sp, #4]
 801b3f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 801b3fc:	9300      	str	r3, [sp, #0]
 801b3fe:	4613      	mov	r3, r2
 801b400:	687a      	ldr	r2, [r7, #4]
 801b402:	6979      	ldr	r1, [r7, #20]
 801b404:	68f8      	ldr	r0, [r7, #12]
 801b406:	f000 f805 	bl	801b414 <ip4_output_if_src>
 801b40a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801b40c:	4618      	mov	r0, r3
 801b40e:	3718      	adds	r7, #24
 801b410:	46bd      	mov	sp, r7
 801b412:	bd80      	pop	{r7, pc}

0801b414 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801b414:	b580      	push	{r7, lr}
 801b416:	b088      	sub	sp, #32
 801b418:	af00      	add	r7, sp, #0
 801b41a:	60f8      	str	r0, [r7, #12]
 801b41c:	60b9      	str	r1, [r7, #8]
 801b41e:	607a      	str	r2, [r7, #4]
 801b420:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801b422:	68fb      	ldr	r3, [r7, #12]
 801b424:	7b9b      	ldrb	r3, [r3, #14]
 801b426:	2b01      	cmp	r3, #1
 801b428:	d006      	beq.n	801b438 <ip4_output_if_src+0x24>
 801b42a:	4b4b      	ldr	r3, [pc, #300]	; (801b558 <ip4_output_if_src+0x144>)
 801b42c:	f44f 7255 	mov.w	r2, #852	; 0x354
 801b430:	494a      	ldr	r1, [pc, #296]	; (801b55c <ip4_output_if_src+0x148>)
 801b432:	484b      	ldr	r0, [pc, #300]	; (801b560 <ip4_output_if_src+0x14c>)
 801b434:	f004 fa18 	bl	801f868 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	2b00      	cmp	r3, #0
 801b43c:	d060      	beq.n	801b500 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801b43e:	2314      	movs	r3, #20
 801b440:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801b442:	2114      	movs	r1, #20
 801b444:	68f8      	ldr	r0, [r7, #12]
 801b446:	f7f5 f9cb 	bl	80107e0 <pbuf_add_header>
 801b44a:	4603      	mov	r3, r0
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	d002      	beq.n	801b456 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b450:	f06f 0301 	mvn.w	r3, #1
 801b454:	e07c      	b.n	801b550 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801b456:	68fb      	ldr	r3, [r7, #12]
 801b458:	685b      	ldr	r3, [r3, #4]
 801b45a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801b45c:	68fb      	ldr	r3, [r7, #12]
 801b45e:	895b      	ldrh	r3, [r3, #10]
 801b460:	2b13      	cmp	r3, #19
 801b462:	d806      	bhi.n	801b472 <ip4_output_if_src+0x5e>
 801b464:	4b3c      	ldr	r3, [pc, #240]	; (801b558 <ip4_output_if_src+0x144>)
 801b466:	f44f 7262 	mov.w	r2, #904	; 0x388
 801b46a:	493e      	ldr	r1, [pc, #248]	; (801b564 <ip4_output_if_src+0x150>)
 801b46c:	483c      	ldr	r0, [pc, #240]	; (801b560 <ip4_output_if_src+0x14c>)
 801b46e:	f004 f9fb 	bl	801f868 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801b472:	69fb      	ldr	r3, [r7, #28]
 801b474:	78fa      	ldrb	r2, [r7, #3]
 801b476:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801b478:	69fb      	ldr	r3, [r7, #28]
 801b47a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801b47e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801b480:	687b      	ldr	r3, [r7, #4]
 801b482:	681a      	ldr	r2, [r3, #0]
 801b484:	69fb      	ldr	r3, [r7, #28]
 801b486:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801b488:	8b7b      	ldrh	r3, [r7, #26]
 801b48a:	089b      	lsrs	r3, r3, #2
 801b48c:	b29b      	uxth	r3, r3
 801b48e:	b2db      	uxtb	r3, r3
 801b490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b494:	b2da      	uxtb	r2, r3
 801b496:	69fb      	ldr	r3, [r7, #28]
 801b498:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801b49a:	69fb      	ldr	r3, [r7, #28]
 801b49c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801b4a0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801b4a2:	68fb      	ldr	r3, [r7, #12]
 801b4a4:	891b      	ldrh	r3, [r3, #8]
 801b4a6:	4618      	mov	r0, r3
 801b4a8:	f7f3 fb52 	bl	800eb50 <lwip_htons>
 801b4ac:	4603      	mov	r3, r0
 801b4ae:	461a      	mov	r2, r3
 801b4b0:	69fb      	ldr	r3, [r7, #28]
 801b4b2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801b4b4:	69fb      	ldr	r3, [r7, #28]
 801b4b6:	2200      	movs	r2, #0
 801b4b8:	719a      	strb	r2, [r3, #6]
 801b4ba:	2200      	movs	r2, #0
 801b4bc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801b4be:	4b2a      	ldr	r3, [pc, #168]	; (801b568 <ip4_output_if_src+0x154>)
 801b4c0:	881b      	ldrh	r3, [r3, #0]
 801b4c2:	4618      	mov	r0, r3
 801b4c4:	f7f3 fb44 	bl	800eb50 <lwip_htons>
 801b4c8:	4603      	mov	r3, r0
 801b4ca:	461a      	mov	r2, r3
 801b4cc:	69fb      	ldr	r3, [r7, #28]
 801b4ce:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801b4d0:	4b25      	ldr	r3, [pc, #148]	; (801b568 <ip4_output_if_src+0x154>)
 801b4d2:	881b      	ldrh	r3, [r3, #0]
 801b4d4:	3301      	adds	r3, #1
 801b4d6:	b29a      	uxth	r2, r3
 801b4d8:	4b23      	ldr	r3, [pc, #140]	; (801b568 <ip4_output_if_src+0x154>)
 801b4da:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801b4dc:	68bb      	ldr	r3, [r7, #8]
 801b4de:	2b00      	cmp	r3, #0
 801b4e0:	d104      	bne.n	801b4ec <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801b4e2:	4b22      	ldr	r3, [pc, #136]	; (801b56c <ip4_output_if_src+0x158>)
 801b4e4:	681a      	ldr	r2, [r3, #0]
 801b4e6:	69fb      	ldr	r3, [r7, #28]
 801b4e8:	60da      	str	r2, [r3, #12]
 801b4ea:	e003      	b.n	801b4f4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801b4ec:	68bb      	ldr	r3, [r7, #8]
 801b4ee:	681a      	ldr	r2, [r3, #0]
 801b4f0:	69fb      	ldr	r3, [r7, #28]
 801b4f2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801b4f4:	69fb      	ldr	r3, [r7, #28]
 801b4f6:	2200      	movs	r2, #0
 801b4f8:	729a      	strb	r2, [r3, #10]
 801b4fa:	2200      	movs	r2, #0
 801b4fc:	72da      	strb	r2, [r3, #11]
 801b4fe:	e00f      	b.n	801b520 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801b500:	68fb      	ldr	r3, [r7, #12]
 801b502:	895b      	ldrh	r3, [r3, #10]
 801b504:	2b13      	cmp	r3, #19
 801b506:	d802      	bhi.n	801b50e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b508:	f06f 0301 	mvn.w	r3, #1
 801b50c:	e020      	b.n	801b550 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801b50e:	68fb      	ldr	r3, [r7, #12]
 801b510:	685b      	ldr	r3, [r3, #4]
 801b512:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801b514:	69fb      	ldr	r3, [r7, #28]
 801b516:	691b      	ldr	r3, [r3, #16]
 801b518:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801b51a:	f107 0314 	add.w	r3, r7, #20
 801b51e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801b520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b524:	2b00      	cmp	r3, #0
 801b526:	d00c      	beq.n	801b542 <ip4_output_if_src+0x12e>
 801b528:	68fb      	ldr	r3, [r7, #12]
 801b52a:	891a      	ldrh	r2, [r3, #8]
 801b52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b52e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b530:	429a      	cmp	r2, r3
 801b532:	d906      	bls.n	801b542 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801b534:	687a      	ldr	r2, [r7, #4]
 801b536:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b538:	68f8      	ldr	r0, [r7, #12]
 801b53a:	f000 fdcf 	bl	801c0dc <ip4_frag>
 801b53e:	4603      	mov	r3, r0
 801b540:	e006      	b.n	801b550 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801b542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b544:	695b      	ldr	r3, [r3, #20]
 801b546:	687a      	ldr	r2, [r7, #4]
 801b548:	68f9      	ldr	r1, [r7, #12]
 801b54a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b54c:	4798      	blx	r3
 801b54e:	4603      	mov	r3, r0
}
 801b550:	4618      	mov	r0, r3
 801b552:	3720      	adds	r7, #32
 801b554:	46bd      	mov	sp, r7
 801b556:	bd80      	pop	{r7, pc}
 801b558:	080253d4 	.word	0x080253d4
 801b55c:	08025408 	.word	0x08025408
 801b560:	08025414 	.word	0x08025414
 801b564:	0802543c 	.word	0x0802543c
 801b568:	20001a5a 	.word	0x20001a5a
 801b56c:	08025ac4 	.word	0x08025ac4

0801b570 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801b570:	b480      	push	{r7}
 801b572:	b085      	sub	sp, #20
 801b574:	af00      	add	r7, sp, #0
 801b576:	6078      	str	r0, [r7, #4]
 801b578:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801b57a:	687b      	ldr	r3, [r7, #4]
 801b57c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801b57e:	687b      	ldr	r3, [r7, #4]
 801b580:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b584:	d002      	beq.n	801b58c <ip4_addr_isbroadcast_u32+0x1c>
 801b586:	687b      	ldr	r3, [r7, #4]
 801b588:	2b00      	cmp	r3, #0
 801b58a:	d101      	bne.n	801b590 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801b58c:	2301      	movs	r3, #1
 801b58e:	e02a      	b.n	801b5e6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801b590:	683b      	ldr	r3, [r7, #0]
 801b592:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b596:	f003 0302 	and.w	r3, r3, #2
 801b59a:	2b00      	cmp	r3, #0
 801b59c:	d101      	bne.n	801b5a2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801b59e:	2300      	movs	r3, #0
 801b5a0:	e021      	b.n	801b5e6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801b5a2:	683b      	ldr	r3, [r7, #0]
 801b5a4:	3304      	adds	r3, #4
 801b5a6:	681b      	ldr	r3, [r3, #0]
 801b5a8:	687a      	ldr	r2, [r7, #4]
 801b5aa:	429a      	cmp	r2, r3
 801b5ac:	d101      	bne.n	801b5b2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801b5ae:	2300      	movs	r3, #0
 801b5b0:	e019      	b.n	801b5e6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801b5b2:	68fa      	ldr	r2, [r7, #12]
 801b5b4:	683b      	ldr	r3, [r7, #0]
 801b5b6:	3304      	adds	r3, #4
 801b5b8:	681b      	ldr	r3, [r3, #0]
 801b5ba:	405a      	eors	r2, r3
 801b5bc:	683b      	ldr	r3, [r7, #0]
 801b5be:	3308      	adds	r3, #8
 801b5c0:	681b      	ldr	r3, [r3, #0]
 801b5c2:	4013      	ands	r3, r2
 801b5c4:	2b00      	cmp	r3, #0
 801b5c6:	d10d      	bne.n	801b5e4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b5c8:	683b      	ldr	r3, [r7, #0]
 801b5ca:	3308      	adds	r3, #8
 801b5cc:	681b      	ldr	r3, [r3, #0]
 801b5ce:	43da      	mvns	r2, r3
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801b5d4:	683b      	ldr	r3, [r7, #0]
 801b5d6:	3308      	adds	r3, #8
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b5dc:	429a      	cmp	r2, r3
 801b5de:	d101      	bne.n	801b5e4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801b5e0:	2301      	movs	r3, #1
 801b5e2:	e000      	b.n	801b5e6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801b5e4:	2300      	movs	r3, #0
  }
}
 801b5e6:	4618      	mov	r0, r3
 801b5e8:	3714      	adds	r7, #20
 801b5ea:	46bd      	mov	sp, r7
 801b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5f0:	4770      	bx	lr
	...

0801b5f4 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 801b5f4:	b480      	push	{r7}
 801b5f6:	b08d      	sub	sp, #52	; 0x34
 801b5f8:	af00      	add	r7, sp, #0
 801b5fa:	60f8      	str	r0, [r7, #12]
 801b5fc:	60b9      	str	r1, [r7, #8]
 801b5fe:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801b600:	2300      	movs	r3, #0
 801b602:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 801b604:	68fb      	ldr	r3, [r7, #12]
 801b606:	681b      	ldr	r3, [r3, #0]
 801b608:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801b60a:	68bb      	ldr	r3, [r7, #8]
 801b60c:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 801b60e:	f107 0318 	add.w	r3, r7, #24
 801b612:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801b614:	2300      	movs	r3, #0
 801b616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b61a:	e059      	b.n	801b6d0 <ip4addr_ntoa_r+0xdc>
    i = 0;
 801b61c:	2300      	movs	r3, #0
 801b61e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 801b622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b624:	781a      	ldrb	r2, [r3, #0]
 801b626:	4b33      	ldr	r3, [pc, #204]	; (801b6f4 <ip4addr_ntoa_r+0x100>)
 801b628:	fba3 1302 	umull	r1, r3, r3, r2
 801b62c:	08d9      	lsrs	r1, r3, #3
 801b62e:	460b      	mov	r3, r1
 801b630:	009b      	lsls	r3, r3, #2
 801b632:	440b      	add	r3, r1
 801b634:	005b      	lsls	r3, r3, #1
 801b636:	1ad3      	subs	r3, r2, r3
 801b638:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801b63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b63c:	781b      	ldrb	r3, [r3, #0]
 801b63e:	4a2d      	ldr	r2, [pc, #180]	; (801b6f4 <ip4addr_ntoa_r+0x100>)
 801b640:	fba2 2303 	umull	r2, r3, r2, r3
 801b644:	08db      	lsrs	r3, r3, #3
 801b646:	b2da      	uxtb	r2, r3
 801b648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b64a:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 801b64c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b650:	1c5a      	adds	r2, r3, #1
 801b652:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801b656:	4619      	mov	r1, r3
 801b658:	7ffb      	ldrb	r3, [r7, #31]
 801b65a:	3330      	adds	r3, #48	; 0x30
 801b65c:	b2da      	uxtb	r2, r3
 801b65e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b662:	440b      	add	r3, r1
 801b664:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801b668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b66a:	781b      	ldrb	r3, [r3, #0]
 801b66c:	2b00      	cmp	r3, #0
 801b66e:	d1d8      	bne.n	801b622 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 801b670:	e012      	b.n	801b698 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 801b672:	6a3b      	ldr	r3, [r7, #32]
 801b674:	1c5a      	adds	r2, r3, #1
 801b676:	623a      	str	r2, [r7, #32]
 801b678:	687a      	ldr	r2, [r7, #4]
 801b67a:	429a      	cmp	r2, r3
 801b67c:	dc01      	bgt.n	801b682 <ip4addr_ntoa_r+0x8e>
        return NULL;
 801b67e:	2300      	movs	r3, #0
 801b680:	e031      	b.n	801b6e6 <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 801b682:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801b686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b688:	1c59      	adds	r1, r3, #1
 801b68a:	62f9      	str	r1, [r7, #44]	; 0x2c
 801b68c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801b690:	440a      	add	r2, r1
 801b692:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801b696:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801b698:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b69c:	1e5a      	subs	r2, r3, #1
 801b69e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	d1e5      	bne.n	801b672 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801b6a6:	6a3b      	ldr	r3, [r7, #32]
 801b6a8:	1c5a      	adds	r2, r3, #1
 801b6aa:	623a      	str	r2, [r7, #32]
 801b6ac:	687a      	ldr	r2, [r7, #4]
 801b6ae:	429a      	cmp	r2, r3
 801b6b0:	dc01      	bgt.n	801b6b6 <ip4addr_ntoa_r+0xc2>
      return NULL;
 801b6b2:	2300      	movs	r3, #0
 801b6b4:	e017      	b.n	801b6e6 <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 801b6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6b8:	1c5a      	adds	r2, r3, #1
 801b6ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 801b6bc:	222e      	movs	r2, #46	; 0x2e
 801b6be:	701a      	strb	r2, [r3, #0]
    ap++;
 801b6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6c2:	3301      	adds	r3, #1
 801b6c4:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801b6c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b6ca:	3301      	adds	r3, #1
 801b6cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b6d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b6d4:	2b03      	cmp	r3, #3
 801b6d6:	d9a1      	bls.n	801b61c <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801b6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6da:	3b01      	subs	r3, #1
 801b6dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6e0:	2200      	movs	r2, #0
 801b6e2:	701a      	strb	r2, [r3, #0]
  return buf;
 801b6e4:	68bb      	ldr	r3, [r7, #8]
}
 801b6e6:	4618      	mov	r0, r3
 801b6e8:	3734      	adds	r7, #52	; 0x34
 801b6ea:	46bd      	mov	sp, r7
 801b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6f0:	4770      	bx	lr
 801b6f2:	bf00      	nop
 801b6f4:	cccccccd 	.word	0xcccccccd

0801b6f8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801b6f8:	b580      	push	{r7, lr}
 801b6fa:	b084      	sub	sp, #16
 801b6fc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801b6fe:	2300      	movs	r3, #0
 801b700:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801b702:	4b12      	ldr	r3, [pc, #72]	; (801b74c <ip_reass_tmr+0x54>)
 801b704:	681b      	ldr	r3, [r3, #0]
 801b706:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801b708:	e018      	b.n	801b73c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801b70a:	68fb      	ldr	r3, [r7, #12]
 801b70c:	7fdb      	ldrb	r3, [r3, #31]
 801b70e:	2b00      	cmp	r3, #0
 801b710:	d00b      	beq.n	801b72a <ip_reass_tmr+0x32>
      r->timer--;
 801b712:	68fb      	ldr	r3, [r7, #12]
 801b714:	7fdb      	ldrb	r3, [r3, #31]
 801b716:	3b01      	subs	r3, #1
 801b718:	b2da      	uxtb	r2, r3
 801b71a:	68fb      	ldr	r3, [r7, #12]
 801b71c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801b71e:	68fb      	ldr	r3, [r7, #12]
 801b720:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801b722:	68fb      	ldr	r3, [r7, #12]
 801b724:	681b      	ldr	r3, [r3, #0]
 801b726:	60fb      	str	r3, [r7, #12]
 801b728:	e008      	b.n	801b73c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801b72a:	68fb      	ldr	r3, [r7, #12]
 801b72c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801b72e:	68fb      	ldr	r3, [r7, #12]
 801b730:	681b      	ldr	r3, [r3, #0]
 801b732:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801b734:	68b9      	ldr	r1, [r7, #8]
 801b736:	6878      	ldr	r0, [r7, #4]
 801b738:	f000 f80a 	bl	801b750 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801b73c:	68fb      	ldr	r3, [r7, #12]
 801b73e:	2b00      	cmp	r3, #0
 801b740:	d1e3      	bne.n	801b70a <ip_reass_tmr+0x12>
    }
  }
}
 801b742:	bf00      	nop
 801b744:	bf00      	nop
 801b746:	3710      	adds	r7, #16
 801b748:	46bd      	mov	sp, r7
 801b74a:	bd80      	pop	{r7, pc}
 801b74c:	20001a5c 	.word	0x20001a5c

0801b750 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b750:	b580      	push	{r7, lr}
 801b752:	b088      	sub	sp, #32
 801b754:	af00      	add	r7, sp, #0
 801b756:	6078      	str	r0, [r7, #4]
 801b758:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801b75a:	2300      	movs	r3, #0
 801b75c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801b75e:	683a      	ldr	r2, [r7, #0]
 801b760:	687b      	ldr	r3, [r7, #4]
 801b762:	429a      	cmp	r2, r3
 801b764:	d105      	bne.n	801b772 <ip_reass_free_complete_datagram+0x22>
 801b766:	4b45      	ldr	r3, [pc, #276]	; (801b87c <ip_reass_free_complete_datagram+0x12c>)
 801b768:	22ab      	movs	r2, #171	; 0xab
 801b76a:	4945      	ldr	r1, [pc, #276]	; (801b880 <ip_reass_free_complete_datagram+0x130>)
 801b76c:	4845      	ldr	r0, [pc, #276]	; (801b884 <ip_reass_free_complete_datagram+0x134>)
 801b76e:	f004 f87b 	bl	801f868 <iprintf>
  if (prev != NULL) {
 801b772:	683b      	ldr	r3, [r7, #0]
 801b774:	2b00      	cmp	r3, #0
 801b776:	d00a      	beq.n	801b78e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801b778:	683b      	ldr	r3, [r7, #0]
 801b77a:	681b      	ldr	r3, [r3, #0]
 801b77c:	687a      	ldr	r2, [r7, #4]
 801b77e:	429a      	cmp	r2, r3
 801b780:	d005      	beq.n	801b78e <ip_reass_free_complete_datagram+0x3e>
 801b782:	4b3e      	ldr	r3, [pc, #248]	; (801b87c <ip_reass_free_complete_datagram+0x12c>)
 801b784:	22ad      	movs	r2, #173	; 0xad
 801b786:	4940      	ldr	r1, [pc, #256]	; (801b888 <ip_reass_free_complete_datagram+0x138>)
 801b788:	483e      	ldr	r0, [pc, #248]	; (801b884 <ip_reass_free_complete_datagram+0x134>)
 801b78a:	f004 f86d 	bl	801f868 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	685b      	ldr	r3, [r3, #4]
 801b792:	685b      	ldr	r3, [r3, #4]
 801b794:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801b796:	697b      	ldr	r3, [r7, #20]
 801b798:	889b      	ldrh	r3, [r3, #4]
 801b79a:	b29b      	uxth	r3, r3
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	d12a      	bne.n	801b7f6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801b7a0:	687b      	ldr	r3, [r7, #4]
 801b7a2:	685b      	ldr	r3, [r3, #4]
 801b7a4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801b7a6:	697b      	ldr	r3, [r7, #20]
 801b7a8:	681a      	ldr	r2, [r3, #0]
 801b7aa:	687b      	ldr	r3, [r7, #4]
 801b7ac:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801b7ae:	69bb      	ldr	r3, [r7, #24]
 801b7b0:	6858      	ldr	r0, [r3, #4]
 801b7b2:	687b      	ldr	r3, [r7, #4]
 801b7b4:	3308      	adds	r3, #8
 801b7b6:	2214      	movs	r2, #20
 801b7b8:	4619      	mov	r1, r3
 801b7ba:	f003 f9b7 	bl	801eb2c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801b7be:	2101      	movs	r1, #1
 801b7c0:	69b8      	ldr	r0, [r7, #24]
 801b7c2:	f7ff fba7 	bl	801af14 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801b7c6:	69b8      	ldr	r0, [r7, #24]
 801b7c8:	f7f5 f960 	bl	8010a8c <pbuf_clen>
 801b7cc:	4603      	mov	r3, r0
 801b7ce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b7d0:	8bfa      	ldrh	r2, [r7, #30]
 801b7d2:	8a7b      	ldrh	r3, [r7, #18]
 801b7d4:	4413      	add	r3, r2
 801b7d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b7da:	db05      	blt.n	801b7e8 <ip_reass_free_complete_datagram+0x98>
 801b7dc:	4b27      	ldr	r3, [pc, #156]	; (801b87c <ip_reass_free_complete_datagram+0x12c>)
 801b7de:	22bc      	movs	r2, #188	; 0xbc
 801b7e0:	492a      	ldr	r1, [pc, #168]	; (801b88c <ip_reass_free_complete_datagram+0x13c>)
 801b7e2:	4828      	ldr	r0, [pc, #160]	; (801b884 <ip_reass_free_complete_datagram+0x134>)
 801b7e4:	f004 f840 	bl	801f868 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b7e8:	8bfa      	ldrh	r2, [r7, #30]
 801b7ea:	8a7b      	ldrh	r3, [r7, #18]
 801b7ec:	4413      	add	r3, r2
 801b7ee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801b7f0:	69b8      	ldr	r0, [r7, #24]
 801b7f2:	f7f5 f8bd 	bl	8010970 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801b7f6:	687b      	ldr	r3, [r7, #4]
 801b7f8:	685b      	ldr	r3, [r3, #4]
 801b7fa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801b7fc:	e01f      	b.n	801b83e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801b7fe:	69bb      	ldr	r3, [r7, #24]
 801b800:	685b      	ldr	r3, [r3, #4]
 801b802:	617b      	str	r3, [r7, #20]
    pcur = p;
 801b804:	69bb      	ldr	r3, [r7, #24]
 801b806:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801b808:	697b      	ldr	r3, [r7, #20]
 801b80a:	681b      	ldr	r3, [r3, #0]
 801b80c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801b80e:	68f8      	ldr	r0, [r7, #12]
 801b810:	f7f5 f93c 	bl	8010a8c <pbuf_clen>
 801b814:	4603      	mov	r3, r0
 801b816:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b818:	8bfa      	ldrh	r2, [r7, #30]
 801b81a:	8a7b      	ldrh	r3, [r7, #18]
 801b81c:	4413      	add	r3, r2
 801b81e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b822:	db05      	blt.n	801b830 <ip_reass_free_complete_datagram+0xe0>
 801b824:	4b15      	ldr	r3, [pc, #84]	; (801b87c <ip_reass_free_complete_datagram+0x12c>)
 801b826:	22cc      	movs	r2, #204	; 0xcc
 801b828:	4918      	ldr	r1, [pc, #96]	; (801b88c <ip_reass_free_complete_datagram+0x13c>)
 801b82a:	4816      	ldr	r0, [pc, #88]	; (801b884 <ip_reass_free_complete_datagram+0x134>)
 801b82c:	f004 f81c 	bl	801f868 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b830:	8bfa      	ldrh	r2, [r7, #30]
 801b832:	8a7b      	ldrh	r3, [r7, #18]
 801b834:	4413      	add	r3, r2
 801b836:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801b838:	68f8      	ldr	r0, [r7, #12]
 801b83a:	f7f5 f899 	bl	8010970 <pbuf_free>
  while (p != NULL) {
 801b83e:	69bb      	ldr	r3, [r7, #24]
 801b840:	2b00      	cmp	r3, #0
 801b842:	d1dc      	bne.n	801b7fe <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801b844:	6839      	ldr	r1, [r7, #0]
 801b846:	6878      	ldr	r0, [r7, #4]
 801b848:	f000 f8c2 	bl	801b9d0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801b84c:	4b10      	ldr	r3, [pc, #64]	; (801b890 <ip_reass_free_complete_datagram+0x140>)
 801b84e:	881b      	ldrh	r3, [r3, #0]
 801b850:	8bfa      	ldrh	r2, [r7, #30]
 801b852:	429a      	cmp	r2, r3
 801b854:	d905      	bls.n	801b862 <ip_reass_free_complete_datagram+0x112>
 801b856:	4b09      	ldr	r3, [pc, #36]	; (801b87c <ip_reass_free_complete_datagram+0x12c>)
 801b858:	22d2      	movs	r2, #210	; 0xd2
 801b85a:	490e      	ldr	r1, [pc, #56]	; (801b894 <ip_reass_free_complete_datagram+0x144>)
 801b85c:	4809      	ldr	r0, [pc, #36]	; (801b884 <ip_reass_free_complete_datagram+0x134>)
 801b85e:	f004 f803 	bl	801f868 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801b862:	4b0b      	ldr	r3, [pc, #44]	; (801b890 <ip_reass_free_complete_datagram+0x140>)
 801b864:	881a      	ldrh	r2, [r3, #0]
 801b866:	8bfb      	ldrh	r3, [r7, #30]
 801b868:	1ad3      	subs	r3, r2, r3
 801b86a:	b29a      	uxth	r2, r3
 801b86c:	4b08      	ldr	r3, [pc, #32]	; (801b890 <ip_reass_free_complete_datagram+0x140>)
 801b86e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801b870:	8bfb      	ldrh	r3, [r7, #30]
}
 801b872:	4618      	mov	r0, r3
 801b874:	3720      	adds	r7, #32
 801b876:	46bd      	mov	sp, r7
 801b878:	bd80      	pop	{r7, pc}
 801b87a:	bf00      	nop
 801b87c:	0802546c 	.word	0x0802546c
 801b880:	080254a8 	.word	0x080254a8
 801b884:	080254b4 	.word	0x080254b4
 801b888:	080254dc 	.word	0x080254dc
 801b88c:	080254f0 	.word	0x080254f0
 801b890:	20001a60 	.word	0x20001a60
 801b894:	08025510 	.word	0x08025510

0801b898 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801b898:	b580      	push	{r7, lr}
 801b89a:	b08a      	sub	sp, #40	; 0x28
 801b89c:	af00      	add	r7, sp, #0
 801b89e:	6078      	str	r0, [r7, #4]
 801b8a0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801b8a2:	2300      	movs	r3, #0
 801b8a4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801b8a6:	2300      	movs	r3, #0
 801b8a8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801b8aa:	2300      	movs	r3, #0
 801b8ac:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801b8ae:	2300      	movs	r3, #0
 801b8b0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801b8b2:	2300      	movs	r3, #0
 801b8b4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801b8b6:	4b28      	ldr	r3, [pc, #160]	; (801b958 <ip_reass_remove_oldest_datagram+0xc0>)
 801b8b8:	681b      	ldr	r3, [r3, #0]
 801b8ba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801b8bc:	e030      	b.n	801b920 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801b8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8c0:	695a      	ldr	r2, [r3, #20]
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	68db      	ldr	r3, [r3, #12]
 801b8c6:	429a      	cmp	r2, r3
 801b8c8:	d10c      	bne.n	801b8e4 <ip_reass_remove_oldest_datagram+0x4c>
 801b8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8cc:	699a      	ldr	r2, [r3, #24]
 801b8ce:	687b      	ldr	r3, [r7, #4]
 801b8d0:	691b      	ldr	r3, [r3, #16]
 801b8d2:	429a      	cmp	r2, r3
 801b8d4:	d106      	bne.n	801b8e4 <ip_reass_remove_oldest_datagram+0x4c>
 801b8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8d8:	899a      	ldrh	r2, [r3, #12]
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	889b      	ldrh	r3, [r3, #4]
 801b8de:	b29b      	uxth	r3, r3
 801b8e0:	429a      	cmp	r2, r3
 801b8e2:	d014      	beq.n	801b90e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801b8e4:	693b      	ldr	r3, [r7, #16]
 801b8e6:	3301      	adds	r3, #1
 801b8e8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801b8ea:	6a3b      	ldr	r3, [r7, #32]
 801b8ec:	2b00      	cmp	r3, #0
 801b8ee:	d104      	bne.n	801b8fa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801b8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8f2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b8f4:	69fb      	ldr	r3, [r7, #28]
 801b8f6:	61bb      	str	r3, [r7, #24]
 801b8f8:	e009      	b.n	801b90e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801b8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8fc:	7fda      	ldrb	r2, [r3, #31]
 801b8fe:	6a3b      	ldr	r3, [r7, #32]
 801b900:	7fdb      	ldrb	r3, [r3, #31]
 801b902:	429a      	cmp	r2, r3
 801b904:	d803      	bhi.n	801b90e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801b906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b908:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b90a:	69fb      	ldr	r3, [r7, #28]
 801b90c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801b90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b910:	681b      	ldr	r3, [r3, #0]
 801b912:	2b00      	cmp	r3, #0
 801b914:	d001      	beq.n	801b91a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801b916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b918:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801b91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b91c:	681b      	ldr	r3, [r3, #0]
 801b91e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801b920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b922:	2b00      	cmp	r3, #0
 801b924:	d1cb      	bne.n	801b8be <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801b926:	6a3b      	ldr	r3, [r7, #32]
 801b928:	2b00      	cmp	r3, #0
 801b92a:	d008      	beq.n	801b93e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801b92c:	69b9      	ldr	r1, [r7, #24]
 801b92e:	6a38      	ldr	r0, [r7, #32]
 801b930:	f7ff ff0e 	bl	801b750 <ip_reass_free_complete_datagram>
 801b934:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801b936:	697a      	ldr	r2, [r7, #20]
 801b938:	68fb      	ldr	r3, [r7, #12]
 801b93a:	4413      	add	r3, r2
 801b93c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801b93e:	697a      	ldr	r2, [r7, #20]
 801b940:	683b      	ldr	r3, [r7, #0]
 801b942:	429a      	cmp	r2, r3
 801b944:	da02      	bge.n	801b94c <ip_reass_remove_oldest_datagram+0xb4>
 801b946:	693b      	ldr	r3, [r7, #16]
 801b948:	2b01      	cmp	r3, #1
 801b94a:	dcac      	bgt.n	801b8a6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801b94c:	697b      	ldr	r3, [r7, #20]
}
 801b94e:	4618      	mov	r0, r3
 801b950:	3728      	adds	r7, #40	; 0x28
 801b952:	46bd      	mov	sp, r7
 801b954:	bd80      	pop	{r7, pc}
 801b956:	bf00      	nop
 801b958:	20001a5c 	.word	0x20001a5c

0801b95c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801b95c:	b580      	push	{r7, lr}
 801b95e:	b084      	sub	sp, #16
 801b960:	af00      	add	r7, sp, #0
 801b962:	6078      	str	r0, [r7, #4]
 801b964:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b966:	2004      	movs	r0, #4
 801b968:	f7f4 f896 	bl	800fa98 <memp_malloc>
 801b96c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801b96e:	68fb      	ldr	r3, [r7, #12]
 801b970:	2b00      	cmp	r3, #0
 801b972:	d110      	bne.n	801b996 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801b974:	6839      	ldr	r1, [r7, #0]
 801b976:	6878      	ldr	r0, [r7, #4]
 801b978:	f7ff ff8e 	bl	801b898 <ip_reass_remove_oldest_datagram>
 801b97c:	4602      	mov	r2, r0
 801b97e:	683b      	ldr	r3, [r7, #0]
 801b980:	4293      	cmp	r3, r2
 801b982:	dc03      	bgt.n	801b98c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b984:	2004      	movs	r0, #4
 801b986:	f7f4 f887 	bl	800fa98 <memp_malloc>
 801b98a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801b98c:	68fb      	ldr	r3, [r7, #12]
 801b98e:	2b00      	cmp	r3, #0
 801b990:	d101      	bne.n	801b996 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801b992:	2300      	movs	r3, #0
 801b994:	e016      	b.n	801b9c4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801b996:	2220      	movs	r2, #32
 801b998:	2100      	movs	r1, #0
 801b99a:	68f8      	ldr	r0, [r7, #12]
 801b99c:	f003 f8ee 	bl	801eb7c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801b9a0:	68fb      	ldr	r3, [r7, #12]
 801b9a2:	220f      	movs	r2, #15
 801b9a4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801b9a6:	4b09      	ldr	r3, [pc, #36]	; (801b9cc <ip_reass_enqueue_new_datagram+0x70>)
 801b9a8:	681a      	ldr	r2, [r3, #0]
 801b9aa:	68fb      	ldr	r3, [r7, #12]
 801b9ac:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801b9ae:	4a07      	ldr	r2, [pc, #28]	; (801b9cc <ip_reass_enqueue_new_datagram+0x70>)
 801b9b0:	68fb      	ldr	r3, [r7, #12]
 801b9b2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801b9b4:	68fb      	ldr	r3, [r7, #12]
 801b9b6:	3308      	adds	r3, #8
 801b9b8:	2214      	movs	r2, #20
 801b9ba:	6879      	ldr	r1, [r7, #4]
 801b9bc:	4618      	mov	r0, r3
 801b9be:	f003 f8b5 	bl	801eb2c <memcpy>
  return ipr;
 801b9c2:	68fb      	ldr	r3, [r7, #12]
}
 801b9c4:	4618      	mov	r0, r3
 801b9c6:	3710      	adds	r7, #16
 801b9c8:	46bd      	mov	sp, r7
 801b9ca:	bd80      	pop	{r7, pc}
 801b9cc:	20001a5c 	.word	0x20001a5c

0801b9d0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b9d0:	b580      	push	{r7, lr}
 801b9d2:	b082      	sub	sp, #8
 801b9d4:	af00      	add	r7, sp, #0
 801b9d6:	6078      	str	r0, [r7, #4]
 801b9d8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801b9da:	4b10      	ldr	r3, [pc, #64]	; (801ba1c <ip_reass_dequeue_datagram+0x4c>)
 801b9dc:	681b      	ldr	r3, [r3, #0]
 801b9de:	687a      	ldr	r2, [r7, #4]
 801b9e0:	429a      	cmp	r2, r3
 801b9e2:	d104      	bne.n	801b9ee <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801b9e4:	687b      	ldr	r3, [r7, #4]
 801b9e6:	681b      	ldr	r3, [r3, #0]
 801b9e8:	4a0c      	ldr	r2, [pc, #48]	; (801ba1c <ip_reass_dequeue_datagram+0x4c>)
 801b9ea:	6013      	str	r3, [r2, #0]
 801b9ec:	e00d      	b.n	801ba0a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801b9ee:	683b      	ldr	r3, [r7, #0]
 801b9f0:	2b00      	cmp	r3, #0
 801b9f2:	d106      	bne.n	801ba02 <ip_reass_dequeue_datagram+0x32>
 801b9f4:	4b0a      	ldr	r3, [pc, #40]	; (801ba20 <ip_reass_dequeue_datagram+0x50>)
 801b9f6:	f240 1245 	movw	r2, #325	; 0x145
 801b9fa:	490a      	ldr	r1, [pc, #40]	; (801ba24 <ip_reass_dequeue_datagram+0x54>)
 801b9fc:	480a      	ldr	r0, [pc, #40]	; (801ba28 <ip_reass_dequeue_datagram+0x58>)
 801b9fe:	f003 ff33 	bl	801f868 <iprintf>
    prev->next = ipr->next;
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	681a      	ldr	r2, [r3, #0]
 801ba06:	683b      	ldr	r3, [r7, #0]
 801ba08:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801ba0a:	6879      	ldr	r1, [r7, #4]
 801ba0c:	2004      	movs	r0, #4
 801ba0e:	f7f4 f895 	bl	800fb3c <memp_free>
}
 801ba12:	bf00      	nop
 801ba14:	3708      	adds	r7, #8
 801ba16:	46bd      	mov	sp, r7
 801ba18:	bd80      	pop	{r7, pc}
 801ba1a:	bf00      	nop
 801ba1c:	20001a5c 	.word	0x20001a5c
 801ba20:	0802546c 	.word	0x0802546c
 801ba24:	08025534 	.word	0x08025534
 801ba28:	080254b4 	.word	0x080254b4

0801ba2c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801ba2c:	b580      	push	{r7, lr}
 801ba2e:	b08c      	sub	sp, #48	; 0x30
 801ba30:	af00      	add	r7, sp, #0
 801ba32:	60f8      	str	r0, [r7, #12]
 801ba34:	60b9      	str	r1, [r7, #8]
 801ba36:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801ba38:	2300      	movs	r3, #0
 801ba3a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801ba3c:	2301      	movs	r3, #1
 801ba3e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801ba40:	68bb      	ldr	r3, [r7, #8]
 801ba42:	685b      	ldr	r3, [r3, #4]
 801ba44:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801ba46:	69fb      	ldr	r3, [r7, #28]
 801ba48:	885b      	ldrh	r3, [r3, #2]
 801ba4a:	b29b      	uxth	r3, r3
 801ba4c:	4618      	mov	r0, r3
 801ba4e:	f7f3 f87f 	bl	800eb50 <lwip_htons>
 801ba52:	4603      	mov	r3, r0
 801ba54:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801ba56:	69fb      	ldr	r3, [r7, #28]
 801ba58:	781b      	ldrb	r3, [r3, #0]
 801ba5a:	f003 030f 	and.w	r3, r3, #15
 801ba5e:	b2db      	uxtb	r3, r3
 801ba60:	009b      	lsls	r3, r3, #2
 801ba62:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801ba64:	7e7b      	ldrb	r3, [r7, #25]
 801ba66:	b29b      	uxth	r3, r3
 801ba68:	8b7a      	ldrh	r2, [r7, #26]
 801ba6a:	429a      	cmp	r2, r3
 801ba6c:	d202      	bcs.n	801ba74 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ba6e:	f04f 33ff 	mov.w	r3, #4294967295
 801ba72:	e135      	b.n	801bce0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801ba74:	7e7b      	ldrb	r3, [r7, #25]
 801ba76:	b29b      	uxth	r3, r3
 801ba78:	8b7a      	ldrh	r2, [r7, #26]
 801ba7a:	1ad3      	subs	r3, r2, r3
 801ba7c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801ba7e:	69fb      	ldr	r3, [r7, #28]
 801ba80:	88db      	ldrh	r3, [r3, #6]
 801ba82:	b29b      	uxth	r3, r3
 801ba84:	4618      	mov	r0, r3
 801ba86:	f7f3 f863 	bl	800eb50 <lwip_htons>
 801ba8a:	4603      	mov	r3, r0
 801ba8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ba90:	b29b      	uxth	r3, r3
 801ba92:	00db      	lsls	r3, r3, #3
 801ba94:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801ba96:	68bb      	ldr	r3, [r7, #8]
 801ba98:	685b      	ldr	r3, [r3, #4]
 801ba9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801ba9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba9e:	2200      	movs	r2, #0
 801baa0:	701a      	strb	r2, [r3, #0]
 801baa2:	2200      	movs	r2, #0
 801baa4:	705a      	strb	r2, [r3, #1]
 801baa6:	2200      	movs	r2, #0
 801baa8:	709a      	strb	r2, [r3, #2]
 801baaa:	2200      	movs	r2, #0
 801baac:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801baae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bab0:	8afa      	ldrh	r2, [r7, #22]
 801bab2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801bab4:	8afa      	ldrh	r2, [r7, #22]
 801bab6:	8b7b      	ldrh	r3, [r7, #26]
 801bab8:	4413      	add	r3, r2
 801baba:	b29a      	uxth	r2, r3
 801babc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801babe:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801bac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bac2:	88db      	ldrh	r3, [r3, #6]
 801bac4:	b29b      	uxth	r3, r3
 801bac6:	8afa      	ldrh	r2, [r7, #22]
 801bac8:	429a      	cmp	r2, r3
 801baca:	d902      	bls.n	801bad2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bacc:	f04f 33ff 	mov.w	r3, #4294967295
 801bad0:	e106      	b.n	801bce0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801bad2:	68fb      	ldr	r3, [r7, #12]
 801bad4:	685b      	ldr	r3, [r3, #4]
 801bad6:	627b      	str	r3, [r7, #36]	; 0x24
 801bad8:	e068      	b.n	801bbac <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801bada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801badc:	685b      	ldr	r3, [r3, #4]
 801bade:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801bae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bae2:	889b      	ldrh	r3, [r3, #4]
 801bae4:	b29a      	uxth	r2, r3
 801bae6:	693b      	ldr	r3, [r7, #16]
 801bae8:	889b      	ldrh	r3, [r3, #4]
 801baea:	b29b      	uxth	r3, r3
 801baec:	429a      	cmp	r2, r3
 801baee:	d235      	bcs.n	801bb5c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801baf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801baf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801baf4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801baf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801baf8:	2b00      	cmp	r3, #0
 801bafa:	d020      	beq.n	801bb3e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801bafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bafe:	889b      	ldrh	r3, [r3, #4]
 801bb00:	b29a      	uxth	r2, r3
 801bb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb04:	88db      	ldrh	r3, [r3, #6]
 801bb06:	b29b      	uxth	r3, r3
 801bb08:	429a      	cmp	r2, r3
 801bb0a:	d307      	bcc.n	801bb1c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801bb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bb0e:	88db      	ldrh	r3, [r3, #6]
 801bb10:	b29a      	uxth	r2, r3
 801bb12:	693b      	ldr	r3, [r7, #16]
 801bb14:	889b      	ldrh	r3, [r3, #4]
 801bb16:	b29b      	uxth	r3, r3
 801bb18:	429a      	cmp	r2, r3
 801bb1a:	d902      	bls.n	801bb22 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bb1c:	f04f 33ff 	mov.w	r3, #4294967295
 801bb20:	e0de      	b.n	801bce0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801bb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb24:	68ba      	ldr	r2, [r7, #8]
 801bb26:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801bb28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb2a:	88db      	ldrh	r3, [r3, #6]
 801bb2c:	b29a      	uxth	r2, r3
 801bb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bb30:	889b      	ldrh	r3, [r3, #4]
 801bb32:	b29b      	uxth	r3, r3
 801bb34:	429a      	cmp	r2, r3
 801bb36:	d03d      	beq.n	801bbb4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801bb38:	2300      	movs	r3, #0
 801bb3a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801bb3c:	e03a      	b.n	801bbb4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801bb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bb40:	88db      	ldrh	r3, [r3, #6]
 801bb42:	b29a      	uxth	r2, r3
 801bb44:	693b      	ldr	r3, [r7, #16]
 801bb46:	889b      	ldrh	r3, [r3, #4]
 801bb48:	b29b      	uxth	r3, r3
 801bb4a:	429a      	cmp	r2, r3
 801bb4c:	d902      	bls.n	801bb54 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bb4e:	f04f 33ff 	mov.w	r3, #4294967295
 801bb52:	e0c5      	b.n	801bce0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801bb54:	68fb      	ldr	r3, [r7, #12]
 801bb56:	68ba      	ldr	r2, [r7, #8]
 801bb58:	605a      	str	r2, [r3, #4]
      break;
 801bb5a:	e02b      	b.n	801bbb4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801bb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bb5e:	889b      	ldrh	r3, [r3, #4]
 801bb60:	b29a      	uxth	r2, r3
 801bb62:	693b      	ldr	r3, [r7, #16]
 801bb64:	889b      	ldrh	r3, [r3, #4]
 801bb66:	b29b      	uxth	r3, r3
 801bb68:	429a      	cmp	r2, r3
 801bb6a:	d102      	bne.n	801bb72 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bb6c:	f04f 33ff 	mov.w	r3, #4294967295
 801bb70:	e0b6      	b.n	801bce0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801bb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bb74:	889b      	ldrh	r3, [r3, #4]
 801bb76:	b29a      	uxth	r2, r3
 801bb78:	693b      	ldr	r3, [r7, #16]
 801bb7a:	88db      	ldrh	r3, [r3, #6]
 801bb7c:	b29b      	uxth	r3, r3
 801bb7e:	429a      	cmp	r2, r3
 801bb80:	d202      	bcs.n	801bb88 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bb82:	f04f 33ff 	mov.w	r3, #4294967295
 801bb86:	e0ab      	b.n	801bce0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801bb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb8a:	2b00      	cmp	r3, #0
 801bb8c:	d009      	beq.n	801bba2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801bb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb90:	88db      	ldrh	r3, [r3, #6]
 801bb92:	b29a      	uxth	r2, r3
 801bb94:	693b      	ldr	r3, [r7, #16]
 801bb96:	889b      	ldrh	r3, [r3, #4]
 801bb98:	b29b      	uxth	r3, r3
 801bb9a:	429a      	cmp	r2, r3
 801bb9c:	d001      	beq.n	801bba2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801bb9e:	2300      	movs	r3, #0
 801bba0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801bba2:	693b      	ldr	r3, [r7, #16]
 801bba4:	681b      	ldr	r3, [r3, #0]
 801bba6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801bba8:	693b      	ldr	r3, [r7, #16]
 801bbaa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801bbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbae:	2b00      	cmp	r3, #0
 801bbb0:	d193      	bne.n	801bada <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801bbb2:	e000      	b.n	801bbb6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801bbb4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801bbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbb8:	2b00      	cmp	r3, #0
 801bbba:	d12d      	bne.n	801bc18 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801bbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bbbe:	2b00      	cmp	r3, #0
 801bbc0:	d01c      	beq.n	801bbfc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801bbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bbc4:	88db      	ldrh	r3, [r3, #6]
 801bbc6:	b29a      	uxth	r2, r3
 801bbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bbca:	889b      	ldrh	r3, [r3, #4]
 801bbcc:	b29b      	uxth	r3, r3
 801bbce:	429a      	cmp	r2, r3
 801bbd0:	d906      	bls.n	801bbe0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801bbd2:	4b45      	ldr	r3, [pc, #276]	; (801bce8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bbd4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801bbd8:	4944      	ldr	r1, [pc, #272]	; (801bcec <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801bbda:	4845      	ldr	r0, [pc, #276]	; (801bcf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bbdc:	f003 fe44 	bl	801f868 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801bbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bbe2:	68ba      	ldr	r2, [r7, #8]
 801bbe4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801bbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bbe8:	88db      	ldrh	r3, [r3, #6]
 801bbea:	b29a      	uxth	r2, r3
 801bbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bbee:	889b      	ldrh	r3, [r3, #4]
 801bbf0:	b29b      	uxth	r3, r3
 801bbf2:	429a      	cmp	r2, r3
 801bbf4:	d010      	beq.n	801bc18 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801bbf6:	2300      	movs	r3, #0
 801bbf8:	623b      	str	r3, [r7, #32]
 801bbfa:	e00d      	b.n	801bc18 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801bbfc:	68fb      	ldr	r3, [r7, #12]
 801bbfe:	685b      	ldr	r3, [r3, #4]
 801bc00:	2b00      	cmp	r3, #0
 801bc02:	d006      	beq.n	801bc12 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801bc04:	4b38      	ldr	r3, [pc, #224]	; (801bce8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bc06:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801bc0a:	493a      	ldr	r1, [pc, #232]	; (801bcf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801bc0c:	4838      	ldr	r0, [pc, #224]	; (801bcf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bc0e:	f003 fe2b 	bl	801f868 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801bc12:	68fb      	ldr	r3, [r7, #12]
 801bc14:	68ba      	ldr	r2, [r7, #8]
 801bc16:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801bc18:	687b      	ldr	r3, [r7, #4]
 801bc1a:	2b00      	cmp	r3, #0
 801bc1c:	d105      	bne.n	801bc2a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801bc1e:	68fb      	ldr	r3, [r7, #12]
 801bc20:	7f9b      	ldrb	r3, [r3, #30]
 801bc22:	f003 0301 	and.w	r3, r3, #1
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	d059      	beq.n	801bcde <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801bc2a:	6a3b      	ldr	r3, [r7, #32]
 801bc2c:	2b00      	cmp	r3, #0
 801bc2e:	d04f      	beq.n	801bcd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801bc30:	68fb      	ldr	r3, [r7, #12]
 801bc32:	685b      	ldr	r3, [r3, #4]
 801bc34:	2b00      	cmp	r3, #0
 801bc36:	d006      	beq.n	801bc46 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801bc38:	68fb      	ldr	r3, [r7, #12]
 801bc3a:	685b      	ldr	r3, [r3, #4]
 801bc3c:	685b      	ldr	r3, [r3, #4]
 801bc3e:	889b      	ldrh	r3, [r3, #4]
 801bc40:	b29b      	uxth	r3, r3
 801bc42:	2b00      	cmp	r3, #0
 801bc44:	d002      	beq.n	801bc4c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801bc46:	2300      	movs	r3, #0
 801bc48:	623b      	str	r3, [r7, #32]
 801bc4a:	e041      	b.n	801bcd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801bc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc4e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801bc50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc52:	681b      	ldr	r3, [r3, #0]
 801bc54:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801bc56:	e012      	b.n	801bc7e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801bc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc5a:	685b      	ldr	r3, [r3, #4]
 801bc5c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801bc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc60:	88db      	ldrh	r3, [r3, #6]
 801bc62:	b29a      	uxth	r2, r3
 801bc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc66:	889b      	ldrh	r3, [r3, #4]
 801bc68:	b29b      	uxth	r3, r3
 801bc6a:	429a      	cmp	r2, r3
 801bc6c:	d002      	beq.n	801bc74 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801bc6e:	2300      	movs	r3, #0
 801bc70:	623b      	str	r3, [r7, #32]
            break;
 801bc72:	e007      	b.n	801bc84 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801bc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc76:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801bc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc7a:	681b      	ldr	r3, [r3, #0]
 801bc7c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801bc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc80:	2b00      	cmp	r3, #0
 801bc82:	d1e9      	bne.n	801bc58 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801bc84:	6a3b      	ldr	r3, [r7, #32]
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d022      	beq.n	801bcd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801bc8a:	68fb      	ldr	r3, [r7, #12]
 801bc8c:	685b      	ldr	r3, [r3, #4]
 801bc8e:	2b00      	cmp	r3, #0
 801bc90:	d106      	bne.n	801bca0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801bc92:	4b15      	ldr	r3, [pc, #84]	; (801bce8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bc94:	f240 12df 	movw	r2, #479	; 0x1df
 801bc98:	4917      	ldr	r1, [pc, #92]	; (801bcf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801bc9a:	4815      	ldr	r0, [pc, #84]	; (801bcf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bc9c:	f003 fde4 	bl	801f868 <iprintf>
          LWIP_ASSERT("sanity check",
 801bca0:	68fb      	ldr	r3, [r7, #12]
 801bca2:	685b      	ldr	r3, [r3, #4]
 801bca4:	685b      	ldr	r3, [r3, #4]
 801bca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bca8:	429a      	cmp	r2, r3
 801bcaa:	d106      	bne.n	801bcba <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801bcac:	4b0e      	ldr	r3, [pc, #56]	; (801bce8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bcae:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801bcb2:	4911      	ldr	r1, [pc, #68]	; (801bcf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801bcb4:	480e      	ldr	r0, [pc, #56]	; (801bcf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bcb6:	f003 fdd7 	bl	801f868 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801bcba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bcbc:	681b      	ldr	r3, [r3, #0]
 801bcbe:	2b00      	cmp	r3, #0
 801bcc0:	d006      	beq.n	801bcd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801bcc2:	4b09      	ldr	r3, [pc, #36]	; (801bce8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bcc4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801bcc8:	490c      	ldr	r1, [pc, #48]	; (801bcfc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801bcca:	4809      	ldr	r0, [pc, #36]	; (801bcf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bccc:	f003 fdcc 	bl	801f868 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801bcd0:	6a3b      	ldr	r3, [r7, #32]
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	bf14      	ite	ne
 801bcd6:	2301      	movne	r3, #1
 801bcd8:	2300      	moveq	r3, #0
 801bcda:	b2db      	uxtb	r3, r3
 801bcdc:	e000      	b.n	801bce0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801bcde:	2300      	movs	r3, #0
}
 801bce0:	4618      	mov	r0, r3
 801bce2:	3730      	adds	r7, #48	; 0x30
 801bce4:	46bd      	mov	sp, r7
 801bce6:	bd80      	pop	{r7, pc}
 801bce8:	0802546c 	.word	0x0802546c
 801bcec:	08025550 	.word	0x08025550
 801bcf0:	080254b4 	.word	0x080254b4
 801bcf4:	08025570 	.word	0x08025570
 801bcf8:	080255a8 	.word	0x080255a8
 801bcfc:	080255b8 	.word	0x080255b8

0801bd00 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801bd00:	b580      	push	{r7, lr}
 801bd02:	b08e      	sub	sp, #56	; 0x38
 801bd04:	af00      	add	r7, sp, #0
 801bd06:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	685b      	ldr	r3, [r3, #4]
 801bd0c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801bd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd10:	781b      	ldrb	r3, [r3, #0]
 801bd12:	f003 030f 	and.w	r3, r3, #15
 801bd16:	b2db      	uxtb	r3, r3
 801bd18:	009b      	lsls	r3, r3, #2
 801bd1a:	b2db      	uxtb	r3, r3
 801bd1c:	2b14      	cmp	r3, #20
 801bd1e:	f040 8167 	bne.w	801bff0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801bd22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd24:	88db      	ldrh	r3, [r3, #6]
 801bd26:	b29b      	uxth	r3, r3
 801bd28:	4618      	mov	r0, r3
 801bd2a:	f7f2 ff11 	bl	800eb50 <lwip_htons>
 801bd2e:	4603      	mov	r3, r0
 801bd30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bd34:	b29b      	uxth	r3, r3
 801bd36:	00db      	lsls	r3, r3, #3
 801bd38:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801bd3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd3c:	885b      	ldrh	r3, [r3, #2]
 801bd3e:	b29b      	uxth	r3, r3
 801bd40:	4618      	mov	r0, r3
 801bd42:	f7f2 ff05 	bl	800eb50 <lwip_htons>
 801bd46:	4603      	mov	r3, r0
 801bd48:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801bd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd4c:	781b      	ldrb	r3, [r3, #0]
 801bd4e:	f003 030f 	and.w	r3, r3, #15
 801bd52:	b2db      	uxtb	r3, r3
 801bd54:	009b      	lsls	r3, r3, #2
 801bd56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801bd5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801bd5e:	b29b      	uxth	r3, r3
 801bd60:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801bd62:	429a      	cmp	r2, r3
 801bd64:	f0c0 8146 	bcc.w	801bff4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801bd68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801bd6c:	b29b      	uxth	r3, r3
 801bd6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801bd70:	1ad3      	subs	r3, r2, r3
 801bd72:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801bd74:	6878      	ldr	r0, [r7, #4]
 801bd76:	f7f4 fe89 	bl	8010a8c <pbuf_clen>
 801bd7a:	4603      	mov	r3, r0
 801bd7c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801bd7e:	4b9f      	ldr	r3, [pc, #636]	; (801bffc <ip4_reass+0x2fc>)
 801bd80:	881b      	ldrh	r3, [r3, #0]
 801bd82:	461a      	mov	r2, r3
 801bd84:	8c3b      	ldrh	r3, [r7, #32]
 801bd86:	4413      	add	r3, r2
 801bd88:	2b0a      	cmp	r3, #10
 801bd8a:	dd10      	ble.n	801bdae <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801bd8c:	8c3b      	ldrh	r3, [r7, #32]
 801bd8e:	4619      	mov	r1, r3
 801bd90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bd92:	f7ff fd81 	bl	801b898 <ip_reass_remove_oldest_datagram>
 801bd96:	4603      	mov	r3, r0
 801bd98:	2b00      	cmp	r3, #0
 801bd9a:	f000 812d 	beq.w	801bff8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801bd9e:	4b97      	ldr	r3, [pc, #604]	; (801bffc <ip4_reass+0x2fc>)
 801bda0:	881b      	ldrh	r3, [r3, #0]
 801bda2:	461a      	mov	r2, r3
 801bda4:	8c3b      	ldrh	r3, [r7, #32]
 801bda6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801bda8:	2b0a      	cmp	r3, #10
 801bdaa:	f300 8125 	bgt.w	801bff8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801bdae:	4b94      	ldr	r3, [pc, #592]	; (801c000 <ip4_reass+0x300>)
 801bdb0:	681b      	ldr	r3, [r3, #0]
 801bdb2:	633b      	str	r3, [r7, #48]	; 0x30
 801bdb4:	e015      	b.n	801bde2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801bdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bdb8:	695a      	ldr	r2, [r3, #20]
 801bdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdbc:	68db      	ldr	r3, [r3, #12]
 801bdbe:	429a      	cmp	r2, r3
 801bdc0:	d10c      	bne.n	801bddc <ip4_reass+0xdc>
 801bdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bdc4:	699a      	ldr	r2, [r3, #24]
 801bdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdc8:	691b      	ldr	r3, [r3, #16]
 801bdca:	429a      	cmp	r2, r3
 801bdcc:	d106      	bne.n	801bddc <ip4_reass+0xdc>
 801bdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bdd0:	899a      	ldrh	r2, [r3, #12]
 801bdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdd4:	889b      	ldrh	r3, [r3, #4]
 801bdd6:	b29b      	uxth	r3, r3
 801bdd8:	429a      	cmp	r2, r3
 801bdda:	d006      	beq.n	801bdea <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801bddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bdde:	681b      	ldr	r3, [r3, #0]
 801bde0:	633b      	str	r3, [r7, #48]	; 0x30
 801bde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bde4:	2b00      	cmp	r3, #0
 801bde6:	d1e6      	bne.n	801bdb6 <ip4_reass+0xb6>
 801bde8:	e000      	b.n	801bdec <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801bdea:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801bdec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bdee:	2b00      	cmp	r3, #0
 801bdf0:	d109      	bne.n	801be06 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801bdf2:	8c3b      	ldrh	r3, [r7, #32]
 801bdf4:	4619      	mov	r1, r3
 801bdf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bdf8:	f7ff fdb0 	bl	801b95c <ip_reass_enqueue_new_datagram>
 801bdfc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801bdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be00:	2b00      	cmp	r3, #0
 801be02:	d11c      	bne.n	801be3e <ip4_reass+0x13e>
      goto nullreturn;
 801be04:	e109      	b.n	801c01a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801be06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be08:	88db      	ldrh	r3, [r3, #6]
 801be0a:	b29b      	uxth	r3, r3
 801be0c:	4618      	mov	r0, r3
 801be0e:	f7f2 fe9f 	bl	800eb50 <lwip_htons>
 801be12:	4603      	mov	r3, r0
 801be14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801be18:	2b00      	cmp	r3, #0
 801be1a:	d110      	bne.n	801be3e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801be1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be1e:	89db      	ldrh	r3, [r3, #14]
 801be20:	4618      	mov	r0, r3
 801be22:	f7f2 fe95 	bl	800eb50 <lwip_htons>
 801be26:	4603      	mov	r3, r0
 801be28:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801be2c:	2b00      	cmp	r3, #0
 801be2e:	d006      	beq.n	801be3e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801be30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be32:	3308      	adds	r3, #8
 801be34:	2214      	movs	r2, #20
 801be36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801be38:	4618      	mov	r0, r3
 801be3a:	f002 fe77 	bl	801eb2c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801be3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be40:	88db      	ldrh	r3, [r3, #6]
 801be42:	b29b      	uxth	r3, r3
 801be44:	f003 0320 	and.w	r3, r3, #32
 801be48:	2b00      	cmp	r3, #0
 801be4a:	bf0c      	ite	eq
 801be4c:	2301      	moveq	r3, #1
 801be4e:	2300      	movne	r3, #0
 801be50:	b2db      	uxtb	r3, r3
 801be52:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801be54:	69fb      	ldr	r3, [r7, #28]
 801be56:	2b00      	cmp	r3, #0
 801be58:	d00e      	beq.n	801be78 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801be5a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801be5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801be5e:	4413      	add	r3, r2
 801be60:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801be62:	8b7a      	ldrh	r2, [r7, #26]
 801be64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801be66:	429a      	cmp	r2, r3
 801be68:	f0c0 80a0 	bcc.w	801bfac <ip4_reass+0x2ac>
 801be6c:	8b7b      	ldrh	r3, [r7, #26]
 801be6e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801be72:	4293      	cmp	r3, r2
 801be74:	f200 809a 	bhi.w	801bfac <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801be78:	69fa      	ldr	r2, [r7, #28]
 801be7a:	6879      	ldr	r1, [r7, #4]
 801be7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801be7e:	f7ff fdd5 	bl	801ba2c <ip_reass_chain_frag_into_datagram_and_validate>
 801be82:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801be84:	697b      	ldr	r3, [r7, #20]
 801be86:	f1b3 3fff 	cmp.w	r3, #4294967295
 801be8a:	f000 8091 	beq.w	801bfb0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801be8e:	4b5b      	ldr	r3, [pc, #364]	; (801bffc <ip4_reass+0x2fc>)
 801be90:	881a      	ldrh	r2, [r3, #0]
 801be92:	8c3b      	ldrh	r3, [r7, #32]
 801be94:	4413      	add	r3, r2
 801be96:	b29a      	uxth	r2, r3
 801be98:	4b58      	ldr	r3, [pc, #352]	; (801bffc <ip4_reass+0x2fc>)
 801be9a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801be9c:	69fb      	ldr	r3, [r7, #28]
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	d00d      	beq.n	801bebe <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801bea2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801bea4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bea6:	4413      	add	r3, r2
 801bea8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801beaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801beac:	8a7a      	ldrh	r2, [r7, #18]
 801beae:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801beb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801beb2:	7f9b      	ldrb	r3, [r3, #30]
 801beb4:	f043 0301 	orr.w	r3, r3, #1
 801beb8:	b2da      	uxtb	r2, r3
 801beba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bebc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801bebe:	697b      	ldr	r3, [r7, #20]
 801bec0:	2b01      	cmp	r3, #1
 801bec2:	d171      	bne.n	801bfa8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801bec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bec6:	8b9b      	ldrh	r3, [r3, #28]
 801bec8:	3314      	adds	r3, #20
 801beca:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801becc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bece:	685b      	ldr	r3, [r3, #4]
 801bed0:	685b      	ldr	r3, [r3, #4]
 801bed2:	681b      	ldr	r3, [r3, #0]
 801bed4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801bed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bed8:	685b      	ldr	r3, [r3, #4]
 801beda:	685b      	ldr	r3, [r3, #4]
 801bedc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801bede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bee0:	3308      	adds	r3, #8
 801bee2:	2214      	movs	r2, #20
 801bee4:	4619      	mov	r1, r3
 801bee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bee8:	f002 fe20 	bl	801eb2c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801beec:	8a3b      	ldrh	r3, [r7, #16]
 801beee:	4618      	mov	r0, r3
 801bef0:	f7f2 fe2e 	bl	800eb50 <lwip_htons>
 801bef4:	4603      	mov	r3, r0
 801bef6:	461a      	mov	r2, r3
 801bef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801befa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801befc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801befe:	2200      	movs	r2, #0
 801bf00:	719a      	strb	r2, [r3, #6]
 801bf02:	2200      	movs	r2, #0
 801bf04:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801bf06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf08:	2200      	movs	r2, #0
 801bf0a:	729a      	strb	r2, [r3, #10]
 801bf0c:	2200      	movs	r2, #0
 801bf0e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801bf10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf12:	685b      	ldr	r3, [r3, #4]
 801bf14:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801bf16:	e00d      	b.n	801bf34 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801bf18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf1a:	685b      	ldr	r3, [r3, #4]
 801bf1c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801bf1e:	2114      	movs	r1, #20
 801bf20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801bf22:	f7f4 fc6d 	bl	8010800 <pbuf_remove_header>
      pbuf_cat(p, r);
 801bf26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801bf28:	6878      	ldr	r0, [r7, #4]
 801bf2a:	f7f4 fdef 	bl	8010b0c <pbuf_cat>
      r = iprh->next_pbuf;
 801bf2e:	68fb      	ldr	r3, [r7, #12]
 801bf30:	681b      	ldr	r3, [r3, #0]
 801bf32:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801bf34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf36:	2b00      	cmp	r3, #0
 801bf38:	d1ee      	bne.n	801bf18 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801bf3a:	4b31      	ldr	r3, [pc, #196]	; (801c000 <ip4_reass+0x300>)
 801bf3c:	681b      	ldr	r3, [r3, #0]
 801bf3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bf40:	429a      	cmp	r2, r3
 801bf42:	d102      	bne.n	801bf4a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801bf44:	2300      	movs	r3, #0
 801bf46:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bf48:	e010      	b.n	801bf6c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801bf4a:	4b2d      	ldr	r3, [pc, #180]	; (801c000 <ip4_reass+0x300>)
 801bf4c:	681b      	ldr	r3, [r3, #0]
 801bf4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bf50:	e007      	b.n	801bf62 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801bf52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf54:	681b      	ldr	r3, [r3, #0]
 801bf56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bf58:	429a      	cmp	r2, r3
 801bf5a:	d006      	beq.n	801bf6a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801bf5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf5e:	681b      	ldr	r3, [r3, #0]
 801bf60:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bf62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf64:	2b00      	cmp	r3, #0
 801bf66:	d1f4      	bne.n	801bf52 <ip4_reass+0x252>
 801bf68:	e000      	b.n	801bf6c <ip4_reass+0x26c>
          break;
 801bf6a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801bf6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801bf6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bf70:	f7ff fd2e 	bl	801b9d0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801bf74:	6878      	ldr	r0, [r7, #4]
 801bf76:	f7f4 fd89 	bl	8010a8c <pbuf_clen>
 801bf7a:	4603      	mov	r3, r0
 801bf7c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801bf7e:	4b1f      	ldr	r3, [pc, #124]	; (801bffc <ip4_reass+0x2fc>)
 801bf80:	881b      	ldrh	r3, [r3, #0]
 801bf82:	8c3a      	ldrh	r2, [r7, #32]
 801bf84:	429a      	cmp	r2, r3
 801bf86:	d906      	bls.n	801bf96 <ip4_reass+0x296>
 801bf88:	4b1e      	ldr	r3, [pc, #120]	; (801c004 <ip4_reass+0x304>)
 801bf8a:	f240 229b 	movw	r2, #667	; 0x29b
 801bf8e:	491e      	ldr	r1, [pc, #120]	; (801c008 <ip4_reass+0x308>)
 801bf90:	481e      	ldr	r0, [pc, #120]	; (801c00c <ip4_reass+0x30c>)
 801bf92:	f003 fc69 	bl	801f868 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801bf96:	4b19      	ldr	r3, [pc, #100]	; (801bffc <ip4_reass+0x2fc>)
 801bf98:	881a      	ldrh	r2, [r3, #0]
 801bf9a:	8c3b      	ldrh	r3, [r7, #32]
 801bf9c:	1ad3      	subs	r3, r2, r3
 801bf9e:	b29a      	uxth	r2, r3
 801bfa0:	4b16      	ldr	r3, [pc, #88]	; (801bffc <ip4_reass+0x2fc>)
 801bfa2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801bfa4:	687b      	ldr	r3, [r7, #4]
 801bfa6:	e03c      	b.n	801c022 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801bfa8:	2300      	movs	r3, #0
 801bfaa:	e03a      	b.n	801c022 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801bfac:	bf00      	nop
 801bfae:	e000      	b.n	801bfb2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801bfb0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801bfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bfb4:	2b00      	cmp	r3, #0
 801bfb6:	d106      	bne.n	801bfc6 <ip4_reass+0x2c6>
 801bfb8:	4b12      	ldr	r3, [pc, #72]	; (801c004 <ip4_reass+0x304>)
 801bfba:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801bfbe:	4914      	ldr	r1, [pc, #80]	; (801c010 <ip4_reass+0x310>)
 801bfc0:	4812      	ldr	r0, [pc, #72]	; (801c00c <ip4_reass+0x30c>)
 801bfc2:	f003 fc51 	bl	801f868 <iprintf>
  if (ipr->p == NULL) {
 801bfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bfc8:	685b      	ldr	r3, [r3, #4]
 801bfca:	2b00      	cmp	r3, #0
 801bfcc:	d124      	bne.n	801c018 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801bfce:	4b0c      	ldr	r3, [pc, #48]	; (801c000 <ip4_reass+0x300>)
 801bfd0:	681b      	ldr	r3, [r3, #0]
 801bfd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bfd4:	429a      	cmp	r2, r3
 801bfd6:	d006      	beq.n	801bfe6 <ip4_reass+0x2e6>
 801bfd8:	4b0a      	ldr	r3, [pc, #40]	; (801c004 <ip4_reass+0x304>)
 801bfda:	f240 22ab 	movw	r2, #683	; 0x2ab
 801bfde:	490d      	ldr	r1, [pc, #52]	; (801c014 <ip4_reass+0x314>)
 801bfe0:	480a      	ldr	r0, [pc, #40]	; (801c00c <ip4_reass+0x30c>)
 801bfe2:	f003 fc41 	bl	801f868 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801bfe6:	2100      	movs	r1, #0
 801bfe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bfea:	f7ff fcf1 	bl	801b9d0 <ip_reass_dequeue_datagram>
 801bfee:	e014      	b.n	801c01a <ip4_reass+0x31a>
    goto nullreturn;
 801bff0:	bf00      	nop
 801bff2:	e012      	b.n	801c01a <ip4_reass+0x31a>
    goto nullreturn;
 801bff4:	bf00      	nop
 801bff6:	e010      	b.n	801c01a <ip4_reass+0x31a>
      goto nullreturn;
 801bff8:	bf00      	nop
 801bffa:	e00e      	b.n	801c01a <ip4_reass+0x31a>
 801bffc:	20001a60 	.word	0x20001a60
 801c000:	20001a5c 	.word	0x20001a5c
 801c004:	0802546c 	.word	0x0802546c
 801c008:	080255dc 	.word	0x080255dc
 801c00c:	080254b4 	.word	0x080254b4
 801c010:	080255f8 	.word	0x080255f8
 801c014:	08025604 	.word	0x08025604
  }

nullreturn:
 801c018:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801c01a:	6878      	ldr	r0, [r7, #4]
 801c01c:	f7f4 fca8 	bl	8010970 <pbuf_free>
  return NULL;
 801c020:	2300      	movs	r3, #0
}
 801c022:	4618      	mov	r0, r3
 801c024:	3738      	adds	r7, #56	; 0x38
 801c026:	46bd      	mov	sp, r7
 801c028:	bd80      	pop	{r7, pc}
 801c02a:	bf00      	nop

0801c02c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801c02c:	b580      	push	{r7, lr}
 801c02e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801c030:	2005      	movs	r0, #5
 801c032:	f7f3 fd31 	bl	800fa98 <memp_malloc>
 801c036:	4603      	mov	r3, r0
}
 801c038:	4618      	mov	r0, r3
 801c03a:	bd80      	pop	{r7, pc}

0801c03c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801c03c:	b580      	push	{r7, lr}
 801c03e:	b082      	sub	sp, #8
 801c040:	af00      	add	r7, sp, #0
 801c042:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801c044:	687b      	ldr	r3, [r7, #4]
 801c046:	2b00      	cmp	r3, #0
 801c048:	d106      	bne.n	801c058 <ip_frag_free_pbuf_custom_ref+0x1c>
 801c04a:	4b07      	ldr	r3, [pc, #28]	; (801c068 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801c04c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801c050:	4906      	ldr	r1, [pc, #24]	; (801c06c <ip_frag_free_pbuf_custom_ref+0x30>)
 801c052:	4807      	ldr	r0, [pc, #28]	; (801c070 <ip_frag_free_pbuf_custom_ref+0x34>)
 801c054:	f003 fc08 	bl	801f868 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801c058:	6879      	ldr	r1, [r7, #4]
 801c05a:	2005      	movs	r0, #5
 801c05c:	f7f3 fd6e 	bl	800fb3c <memp_free>
}
 801c060:	bf00      	nop
 801c062:	3708      	adds	r7, #8
 801c064:	46bd      	mov	sp, r7
 801c066:	bd80      	pop	{r7, pc}
 801c068:	0802546c 	.word	0x0802546c
 801c06c:	08025624 	.word	0x08025624
 801c070:	080254b4 	.word	0x080254b4

0801c074 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801c074:	b580      	push	{r7, lr}
 801c076:	b084      	sub	sp, #16
 801c078:	af00      	add	r7, sp, #0
 801c07a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801c080:	68fb      	ldr	r3, [r7, #12]
 801c082:	2b00      	cmp	r3, #0
 801c084:	d106      	bne.n	801c094 <ipfrag_free_pbuf_custom+0x20>
 801c086:	4b11      	ldr	r3, [pc, #68]	; (801c0cc <ipfrag_free_pbuf_custom+0x58>)
 801c088:	f240 22ce 	movw	r2, #718	; 0x2ce
 801c08c:	4910      	ldr	r1, [pc, #64]	; (801c0d0 <ipfrag_free_pbuf_custom+0x5c>)
 801c08e:	4811      	ldr	r0, [pc, #68]	; (801c0d4 <ipfrag_free_pbuf_custom+0x60>)
 801c090:	f003 fbea 	bl	801f868 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801c094:	68fa      	ldr	r2, [r7, #12]
 801c096:	687b      	ldr	r3, [r7, #4]
 801c098:	429a      	cmp	r2, r3
 801c09a:	d006      	beq.n	801c0aa <ipfrag_free_pbuf_custom+0x36>
 801c09c:	4b0b      	ldr	r3, [pc, #44]	; (801c0cc <ipfrag_free_pbuf_custom+0x58>)
 801c09e:	f240 22cf 	movw	r2, #719	; 0x2cf
 801c0a2:	490d      	ldr	r1, [pc, #52]	; (801c0d8 <ipfrag_free_pbuf_custom+0x64>)
 801c0a4:	480b      	ldr	r0, [pc, #44]	; (801c0d4 <ipfrag_free_pbuf_custom+0x60>)
 801c0a6:	f003 fbdf 	bl	801f868 <iprintf>
  if (pcr->original != NULL) {
 801c0aa:	68fb      	ldr	r3, [r7, #12]
 801c0ac:	695b      	ldr	r3, [r3, #20]
 801c0ae:	2b00      	cmp	r3, #0
 801c0b0:	d004      	beq.n	801c0bc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801c0b2:	68fb      	ldr	r3, [r7, #12]
 801c0b4:	695b      	ldr	r3, [r3, #20]
 801c0b6:	4618      	mov	r0, r3
 801c0b8:	f7f4 fc5a 	bl	8010970 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801c0bc:	68f8      	ldr	r0, [r7, #12]
 801c0be:	f7ff ffbd 	bl	801c03c <ip_frag_free_pbuf_custom_ref>
}
 801c0c2:	bf00      	nop
 801c0c4:	3710      	adds	r7, #16
 801c0c6:	46bd      	mov	sp, r7
 801c0c8:	bd80      	pop	{r7, pc}
 801c0ca:	bf00      	nop
 801c0cc:	0802546c 	.word	0x0802546c
 801c0d0:	08025630 	.word	0x08025630
 801c0d4:	080254b4 	.word	0x080254b4
 801c0d8:	0802563c 	.word	0x0802563c

0801c0dc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801c0dc:	b580      	push	{r7, lr}
 801c0de:	b094      	sub	sp, #80	; 0x50
 801c0e0:	af02      	add	r7, sp, #8
 801c0e2:	60f8      	str	r0, [r7, #12]
 801c0e4:	60b9      	str	r1, [r7, #8]
 801c0e6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801c0e8:	2300      	movs	r3, #0
 801c0ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801c0ee:	68bb      	ldr	r3, [r7, #8]
 801c0f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c0f2:	3b14      	subs	r3, #20
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	da00      	bge.n	801c0fa <ip4_frag+0x1e>
 801c0f8:	3307      	adds	r3, #7
 801c0fa:	10db      	asrs	r3, r3, #3
 801c0fc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801c0fe:	2314      	movs	r3, #20
 801c100:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801c102:	68fb      	ldr	r3, [r7, #12]
 801c104:	685b      	ldr	r3, [r3, #4]
 801c106:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801c108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c10a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801c10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c10e:	781b      	ldrb	r3, [r3, #0]
 801c110:	f003 030f 	and.w	r3, r3, #15
 801c114:	b2db      	uxtb	r3, r3
 801c116:	009b      	lsls	r3, r3, #2
 801c118:	b2db      	uxtb	r3, r3
 801c11a:	2b14      	cmp	r3, #20
 801c11c:	d002      	beq.n	801c124 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801c11e:	f06f 0305 	mvn.w	r3, #5
 801c122:	e110      	b.n	801c346 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801c124:	68fb      	ldr	r3, [r7, #12]
 801c126:	895b      	ldrh	r3, [r3, #10]
 801c128:	2b13      	cmp	r3, #19
 801c12a:	d809      	bhi.n	801c140 <ip4_frag+0x64>
 801c12c:	4b88      	ldr	r3, [pc, #544]	; (801c350 <ip4_frag+0x274>)
 801c12e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801c132:	4988      	ldr	r1, [pc, #544]	; (801c354 <ip4_frag+0x278>)
 801c134:	4888      	ldr	r0, [pc, #544]	; (801c358 <ip4_frag+0x27c>)
 801c136:	f003 fb97 	bl	801f868 <iprintf>
 801c13a:	f06f 0305 	mvn.w	r3, #5
 801c13e:	e102      	b.n	801c346 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801c140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c142:	88db      	ldrh	r3, [r3, #6]
 801c144:	b29b      	uxth	r3, r3
 801c146:	4618      	mov	r0, r3
 801c148:	f7f2 fd02 	bl	800eb50 <lwip_htons>
 801c14c:	4603      	mov	r3, r0
 801c14e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801c150:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c152:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c156:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801c15a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c15c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801c160:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801c162:	68fb      	ldr	r3, [r7, #12]
 801c164:	891b      	ldrh	r3, [r3, #8]
 801c166:	3b14      	subs	r3, #20
 801c168:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801c16c:	e0e1      	b.n	801c332 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801c16e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c170:	00db      	lsls	r3, r3, #3
 801c172:	b29b      	uxth	r3, r3
 801c174:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c178:	4293      	cmp	r3, r2
 801c17a:	bf28      	it	cs
 801c17c:	4613      	movcs	r3, r2
 801c17e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801c180:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c184:	2114      	movs	r1, #20
 801c186:	200e      	movs	r0, #14
 801c188:	f7f4 f8dc 	bl	8010344 <pbuf_alloc>
 801c18c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801c18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c190:	2b00      	cmp	r3, #0
 801c192:	f000 80d5 	beq.w	801c340 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801c196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c198:	895b      	ldrh	r3, [r3, #10]
 801c19a:	2b13      	cmp	r3, #19
 801c19c:	d806      	bhi.n	801c1ac <ip4_frag+0xd0>
 801c19e:	4b6c      	ldr	r3, [pc, #432]	; (801c350 <ip4_frag+0x274>)
 801c1a0:	f44f 7249 	mov.w	r2, #804	; 0x324
 801c1a4:	496d      	ldr	r1, [pc, #436]	; (801c35c <ip4_frag+0x280>)
 801c1a6:	486c      	ldr	r0, [pc, #432]	; (801c358 <ip4_frag+0x27c>)
 801c1a8:	f003 fb5e 	bl	801f868 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801c1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1ae:	685b      	ldr	r3, [r3, #4]
 801c1b0:	2214      	movs	r2, #20
 801c1b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c1b4:	4618      	mov	r0, r3
 801c1b6:	f002 fcb9 	bl	801eb2c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801c1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1bc:	685b      	ldr	r3, [r3, #4]
 801c1be:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801c1c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c1c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801c1c6:	e064      	b.n	801c292 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801c1c8:	68fb      	ldr	r3, [r7, #12]
 801c1ca:	895a      	ldrh	r2, [r3, #10]
 801c1cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c1ce:	1ad3      	subs	r3, r2, r3
 801c1d0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801c1d2:	68fb      	ldr	r3, [r7, #12]
 801c1d4:	895b      	ldrh	r3, [r3, #10]
 801c1d6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801c1d8:	429a      	cmp	r2, r3
 801c1da:	d906      	bls.n	801c1ea <ip4_frag+0x10e>
 801c1dc:	4b5c      	ldr	r3, [pc, #368]	; (801c350 <ip4_frag+0x274>)
 801c1de:	f240 322d 	movw	r2, #813	; 0x32d
 801c1e2:	495f      	ldr	r1, [pc, #380]	; (801c360 <ip4_frag+0x284>)
 801c1e4:	485c      	ldr	r0, [pc, #368]	; (801c358 <ip4_frag+0x27c>)
 801c1e6:	f003 fb3f 	bl	801f868 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801c1ea:	8bfa      	ldrh	r2, [r7, #30]
 801c1ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801c1f0:	4293      	cmp	r3, r2
 801c1f2:	bf28      	it	cs
 801c1f4:	4613      	movcs	r3, r2
 801c1f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801c1fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	d105      	bne.n	801c20e <ip4_frag+0x132>
        poff = 0;
 801c202:	2300      	movs	r3, #0
 801c204:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801c206:	68fb      	ldr	r3, [r7, #12]
 801c208:	681b      	ldr	r3, [r3, #0]
 801c20a:	60fb      	str	r3, [r7, #12]
        continue;
 801c20c:	e041      	b.n	801c292 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801c20e:	f7ff ff0d 	bl	801c02c <ip_frag_alloc_pbuf_custom_ref>
 801c212:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801c214:	69bb      	ldr	r3, [r7, #24]
 801c216:	2b00      	cmp	r3, #0
 801c218:	d103      	bne.n	801c222 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801c21a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c21c:	f7f4 fba8 	bl	8010970 <pbuf_free>
        goto memerr;
 801c220:	e08f      	b.n	801c342 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c222:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801c224:	68fb      	ldr	r3, [r7, #12]
 801c226:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c228:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c22a:	4413      	add	r3, r2
 801c22c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801c230:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801c234:	9201      	str	r2, [sp, #4]
 801c236:	9300      	str	r3, [sp, #0]
 801c238:	4603      	mov	r3, r0
 801c23a:	2241      	movs	r2, #65	; 0x41
 801c23c:	2000      	movs	r0, #0
 801c23e:	f7f4 f9ab 	bl	8010598 <pbuf_alloced_custom>
 801c242:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801c244:	697b      	ldr	r3, [r7, #20]
 801c246:	2b00      	cmp	r3, #0
 801c248:	d106      	bne.n	801c258 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801c24a:	69b8      	ldr	r0, [r7, #24]
 801c24c:	f7ff fef6 	bl	801c03c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801c250:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c252:	f7f4 fb8d 	bl	8010970 <pbuf_free>
        goto memerr;
 801c256:	e074      	b.n	801c342 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801c258:	68f8      	ldr	r0, [r7, #12]
 801c25a:	f7f4 fc2f 	bl	8010abc <pbuf_ref>
      pcr->original = p;
 801c25e:	69bb      	ldr	r3, [r7, #24]
 801c260:	68fa      	ldr	r2, [r7, #12]
 801c262:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801c264:	69bb      	ldr	r3, [r7, #24]
 801c266:	4a3f      	ldr	r2, [pc, #252]	; (801c364 <ip4_frag+0x288>)
 801c268:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801c26a:	6979      	ldr	r1, [r7, #20]
 801c26c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c26e:	f7f4 fc4d 	bl	8010b0c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801c272:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801c276:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801c27a:	1ad3      	subs	r3, r2, r3
 801c27c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801c280:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801c284:	2b00      	cmp	r3, #0
 801c286:	d004      	beq.n	801c292 <ip4_frag+0x1b6>
        poff = 0;
 801c288:	2300      	movs	r3, #0
 801c28a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801c28c:	68fb      	ldr	r3, [r7, #12]
 801c28e:	681b      	ldr	r3, [r3, #0]
 801c290:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801c292:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801c296:	2b00      	cmp	r3, #0
 801c298:	d196      	bne.n	801c1c8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801c29a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801c29c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801c2a0:	4413      	add	r3, r2
 801c2a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801c2a4:	68bb      	ldr	r3, [r7, #8]
 801c2a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c2a8:	f1a3 0213 	sub.w	r2, r3, #19
 801c2ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c2b0:	429a      	cmp	r2, r3
 801c2b2:	bfcc      	ite	gt
 801c2b4:	2301      	movgt	r3, #1
 801c2b6:	2300      	movle	r3, #0
 801c2b8:	b2db      	uxtb	r3, r3
 801c2ba:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801c2bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801c2c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c2c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801c2c6:	6a3b      	ldr	r3, [r7, #32]
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	d002      	beq.n	801c2d2 <ip4_frag+0x1f6>
 801c2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	d003      	beq.n	801c2da <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801c2d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c2d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801c2d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801c2da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c2dc:	4618      	mov	r0, r3
 801c2de:	f7f2 fc37 	bl	800eb50 <lwip_htons>
 801c2e2:	4603      	mov	r3, r0
 801c2e4:	461a      	mov	r2, r3
 801c2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c2e8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801c2ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c2ec:	3314      	adds	r3, #20
 801c2ee:	b29b      	uxth	r3, r3
 801c2f0:	4618      	mov	r0, r3
 801c2f2:	f7f2 fc2d 	bl	800eb50 <lwip_htons>
 801c2f6:	4603      	mov	r3, r0
 801c2f8:	461a      	mov	r2, r3
 801c2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c2fc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801c2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c300:	2200      	movs	r2, #0
 801c302:	729a      	strb	r2, [r3, #10]
 801c304:	2200      	movs	r2, #0
 801c306:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801c308:	68bb      	ldr	r3, [r7, #8]
 801c30a:	695b      	ldr	r3, [r3, #20]
 801c30c:	687a      	ldr	r2, [r7, #4]
 801c30e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c310:	68b8      	ldr	r0, [r7, #8]
 801c312:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801c314:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c316:	f7f4 fb2b 	bl	8010970 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801c31a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c31e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c320:	1ad3      	subs	r3, r2, r3
 801c322:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801c326:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801c32a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c32c:	4413      	add	r3, r2
 801c32e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801c332:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c336:	2b00      	cmp	r3, #0
 801c338:	f47f af19 	bne.w	801c16e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801c33c:	2300      	movs	r3, #0
 801c33e:	e002      	b.n	801c346 <ip4_frag+0x26a>
      goto memerr;
 801c340:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801c342:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c346:	4618      	mov	r0, r3
 801c348:	3748      	adds	r7, #72	; 0x48
 801c34a:	46bd      	mov	sp, r7
 801c34c:	bd80      	pop	{r7, pc}
 801c34e:	bf00      	nop
 801c350:	0802546c 	.word	0x0802546c
 801c354:	08025648 	.word	0x08025648
 801c358:	080254b4 	.word	0x080254b4
 801c35c:	08025664 	.word	0x08025664
 801c360:	08025684 	.word	0x08025684
 801c364:	0801c075 	.word	0x0801c075

0801c368 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801c368:	b580      	push	{r7, lr}
 801c36a:	b086      	sub	sp, #24
 801c36c:	af00      	add	r7, sp, #0
 801c36e:	6078      	str	r0, [r7, #4]
 801c370:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801c372:	230e      	movs	r3, #14
 801c374:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801c376:	687b      	ldr	r3, [r7, #4]
 801c378:	895b      	ldrh	r3, [r3, #10]
 801c37a:	2b0e      	cmp	r3, #14
 801c37c:	d96e      	bls.n	801c45c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801c37e:	687b      	ldr	r3, [r7, #4]
 801c380:	7bdb      	ldrb	r3, [r3, #15]
 801c382:	2b00      	cmp	r3, #0
 801c384:	d106      	bne.n	801c394 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801c386:	683b      	ldr	r3, [r7, #0]
 801c388:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801c38c:	3301      	adds	r3, #1
 801c38e:	b2da      	uxtb	r2, r3
 801c390:	687b      	ldr	r3, [r7, #4]
 801c392:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801c394:	687b      	ldr	r3, [r7, #4]
 801c396:	685b      	ldr	r3, [r3, #4]
 801c398:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801c39a:	693b      	ldr	r3, [r7, #16]
 801c39c:	7b1a      	ldrb	r2, [r3, #12]
 801c39e:	7b5b      	ldrb	r3, [r3, #13]
 801c3a0:	021b      	lsls	r3, r3, #8
 801c3a2:	4313      	orrs	r3, r2
 801c3a4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801c3a6:	693b      	ldr	r3, [r7, #16]
 801c3a8:	781b      	ldrb	r3, [r3, #0]
 801c3aa:	f003 0301 	and.w	r3, r3, #1
 801c3ae:	2b00      	cmp	r3, #0
 801c3b0:	d023      	beq.n	801c3fa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801c3b2:	693b      	ldr	r3, [r7, #16]
 801c3b4:	781b      	ldrb	r3, [r3, #0]
 801c3b6:	2b01      	cmp	r3, #1
 801c3b8:	d10f      	bne.n	801c3da <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c3ba:	693b      	ldr	r3, [r7, #16]
 801c3bc:	785b      	ldrb	r3, [r3, #1]
 801c3be:	2b00      	cmp	r3, #0
 801c3c0:	d11b      	bne.n	801c3fa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801c3c2:	693b      	ldr	r3, [r7, #16]
 801c3c4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c3c6:	2b5e      	cmp	r3, #94	; 0x5e
 801c3c8:	d117      	bne.n	801c3fa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801c3ca:	687b      	ldr	r3, [r7, #4]
 801c3cc:	7b5b      	ldrb	r3, [r3, #13]
 801c3ce:	f043 0310 	orr.w	r3, r3, #16
 801c3d2:	b2da      	uxtb	r2, r3
 801c3d4:	687b      	ldr	r3, [r7, #4]
 801c3d6:	735a      	strb	r2, [r3, #13]
 801c3d8:	e00f      	b.n	801c3fa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801c3da:	693b      	ldr	r3, [r7, #16]
 801c3dc:	2206      	movs	r2, #6
 801c3de:	4928      	ldr	r1, [pc, #160]	; (801c480 <ethernet_input+0x118>)
 801c3e0:	4618      	mov	r0, r3
 801c3e2:	f002 fb95 	bl	801eb10 <memcmp>
 801c3e6:	4603      	mov	r3, r0
 801c3e8:	2b00      	cmp	r3, #0
 801c3ea:	d106      	bne.n	801c3fa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801c3ec:	687b      	ldr	r3, [r7, #4]
 801c3ee:	7b5b      	ldrb	r3, [r3, #13]
 801c3f0:	f043 0308 	orr.w	r3, r3, #8
 801c3f4:	b2da      	uxtb	r2, r3
 801c3f6:	687b      	ldr	r3, [r7, #4]
 801c3f8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801c3fa:	89fb      	ldrh	r3, [r7, #14]
 801c3fc:	2b08      	cmp	r3, #8
 801c3fe:	d003      	beq.n	801c408 <ethernet_input+0xa0>
 801c400:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801c404:	d014      	beq.n	801c430 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801c406:	e032      	b.n	801c46e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c408:	683b      	ldr	r3, [r7, #0]
 801c40a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c40e:	f003 0308 	and.w	r3, r3, #8
 801c412:	2b00      	cmp	r3, #0
 801c414:	d024      	beq.n	801c460 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c416:	8afb      	ldrh	r3, [r7, #22]
 801c418:	4619      	mov	r1, r3
 801c41a:	6878      	ldr	r0, [r7, #4]
 801c41c:	f7f4 f9f0 	bl	8010800 <pbuf_remove_header>
 801c420:	4603      	mov	r3, r0
 801c422:	2b00      	cmp	r3, #0
 801c424:	d11e      	bne.n	801c464 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801c426:	6839      	ldr	r1, [r7, #0]
 801c428:	6878      	ldr	r0, [r7, #4]
 801c42a:	f7fe fe87 	bl	801b13c <ip4_input>
      break;
 801c42e:	e013      	b.n	801c458 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c430:	683b      	ldr	r3, [r7, #0]
 801c432:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c436:	f003 0308 	and.w	r3, r3, #8
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d014      	beq.n	801c468 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c43e:	8afb      	ldrh	r3, [r7, #22]
 801c440:	4619      	mov	r1, r3
 801c442:	6878      	ldr	r0, [r7, #4]
 801c444:	f7f4 f9dc 	bl	8010800 <pbuf_remove_header>
 801c448:	4603      	mov	r3, r0
 801c44a:	2b00      	cmp	r3, #0
 801c44c:	d10e      	bne.n	801c46c <ethernet_input+0x104>
        etharp_input(p, netif);
 801c44e:	6839      	ldr	r1, [r7, #0]
 801c450:	6878      	ldr	r0, [r7, #4]
 801c452:	f7fe f823 	bl	801a49c <etharp_input>
      break;
 801c456:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801c458:	2300      	movs	r3, #0
 801c45a:	e00c      	b.n	801c476 <ethernet_input+0x10e>
    goto free_and_return;
 801c45c:	bf00      	nop
 801c45e:	e006      	b.n	801c46e <ethernet_input+0x106>
        goto free_and_return;
 801c460:	bf00      	nop
 801c462:	e004      	b.n	801c46e <ethernet_input+0x106>
        goto free_and_return;
 801c464:	bf00      	nop
 801c466:	e002      	b.n	801c46e <ethernet_input+0x106>
        goto free_and_return;
 801c468:	bf00      	nop
 801c46a:	e000      	b.n	801c46e <ethernet_input+0x106>
        goto free_and_return;
 801c46c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801c46e:	6878      	ldr	r0, [r7, #4]
 801c470:	f7f4 fa7e 	bl	8010970 <pbuf_free>
  return ERR_OK;
 801c474:	2300      	movs	r3, #0
}
 801c476:	4618      	mov	r0, r3
 801c478:	3718      	adds	r7, #24
 801c47a:	46bd      	mov	sp, r7
 801c47c:	bd80      	pop	{r7, pc}
 801c47e:	bf00      	nop
 801c480:	08025acc 	.word	0x08025acc

0801c484 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801c484:	b580      	push	{r7, lr}
 801c486:	b086      	sub	sp, #24
 801c488:	af00      	add	r7, sp, #0
 801c48a:	60f8      	str	r0, [r7, #12]
 801c48c:	60b9      	str	r1, [r7, #8]
 801c48e:	607a      	str	r2, [r7, #4]
 801c490:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801c492:	8c3b      	ldrh	r3, [r7, #32]
 801c494:	4618      	mov	r0, r3
 801c496:	f7f2 fb5b 	bl	800eb50 <lwip_htons>
 801c49a:	4603      	mov	r3, r0
 801c49c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801c49e:	210e      	movs	r1, #14
 801c4a0:	68b8      	ldr	r0, [r7, #8]
 801c4a2:	f7f4 f99d 	bl	80107e0 <pbuf_add_header>
 801c4a6:	4603      	mov	r3, r0
 801c4a8:	2b00      	cmp	r3, #0
 801c4aa:	d125      	bne.n	801c4f8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801c4ac:	68bb      	ldr	r3, [r7, #8]
 801c4ae:	685b      	ldr	r3, [r3, #4]
 801c4b0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801c4b2:	693b      	ldr	r3, [r7, #16]
 801c4b4:	8afa      	ldrh	r2, [r7, #22]
 801c4b6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801c4b8:	693b      	ldr	r3, [r7, #16]
 801c4ba:	2206      	movs	r2, #6
 801c4bc:	6839      	ldr	r1, [r7, #0]
 801c4be:	4618      	mov	r0, r3
 801c4c0:	f002 fb34 	bl	801eb2c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801c4c4:	693b      	ldr	r3, [r7, #16]
 801c4c6:	3306      	adds	r3, #6
 801c4c8:	2206      	movs	r2, #6
 801c4ca:	6879      	ldr	r1, [r7, #4]
 801c4cc:	4618      	mov	r0, r3
 801c4ce:	f002 fb2d 	bl	801eb2c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801c4d2:	68fb      	ldr	r3, [r7, #12]
 801c4d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c4d8:	2b06      	cmp	r3, #6
 801c4da:	d006      	beq.n	801c4ea <ethernet_output+0x66>
 801c4dc:	4b0a      	ldr	r3, [pc, #40]	; (801c508 <ethernet_output+0x84>)
 801c4de:	f44f 7299 	mov.w	r2, #306	; 0x132
 801c4e2:	490a      	ldr	r1, [pc, #40]	; (801c50c <ethernet_output+0x88>)
 801c4e4:	480a      	ldr	r0, [pc, #40]	; (801c510 <ethernet_output+0x8c>)
 801c4e6:	f003 f9bf 	bl	801f868 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801c4ea:	68fb      	ldr	r3, [r7, #12]
 801c4ec:	699b      	ldr	r3, [r3, #24]
 801c4ee:	68b9      	ldr	r1, [r7, #8]
 801c4f0:	68f8      	ldr	r0, [r7, #12]
 801c4f2:	4798      	blx	r3
 801c4f4:	4603      	mov	r3, r0
 801c4f6:	e002      	b.n	801c4fe <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801c4f8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801c4fa:	f06f 0301 	mvn.w	r3, #1
}
 801c4fe:	4618      	mov	r0, r3
 801c500:	3718      	adds	r7, #24
 801c502:	46bd      	mov	sp, r7
 801c504:	bd80      	pop	{r7, pc}
 801c506:	bf00      	nop
 801c508:	08025694 	.word	0x08025694
 801c50c:	080256cc 	.word	0x080256cc
 801c510:	08025700 	.word	0x08025700

0801c514 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801c514:	b580      	push	{r7, lr}
 801c516:	b082      	sub	sp, #8
 801c518:	af00      	add	r7, sp, #0
 801c51a:	6078      	str	r0, [r7, #4]
 801c51c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801c51e:	683b      	ldr	r3, [r7, #0]
 801c520:	2200      	movs	r2, #0
 801c522:	2104      	movs	r1, #4
 801c524:	4618      	mov	r0, r3
 801c526:	f7ea ff63 	bl	80073f0 <osMessageQueueNew>
 801c52a:	4602      	mov	r2, r0
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	681b      	ldr	r3, [r3, #0]
 801c534:	2b00      	cmp	r3, #0
 801c536:	d102      	bne.n	801c53e <sys_mbox_new+0x2a>
    return ERR_MEM;
 801c538:	f04f 33ff 	mov.w	r3, #4294967295
 801c53c:	e000      	b.n	801c540 <sys_mbox_new+0x2c>

  return ERR_OK;
 801c53e:	2300      	movs	r3, #0
}
 801c540:	4618      	mov	r0, r3
 801c542:	3708      	adds	r7, #8
 801c544:	46bd      	mov	sp, r7
 801c546:	bd80      	pop	{r7, pc}

0801c548 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801c548:	b580      	push	{r7, lr}
 801c54a:	b082      	sub	sp, #8
 801c54c:	af00      	add	r7, sp, #0
 801c54e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801c550:	687b      	ldr	r3, [r7, #4]
 801c552:	681b      	ldr	r3, [r3, #0]
 801c554:	4618      	mov	r0, r3
 801c556:	f7eb f87d 	bl	8007654 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	681b      	ldr	r3, [r3, #0]
 801c55e:	4618      	mov	r0, r3
 801c560:	f7eb f898 	bl	8007694 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801c564:	bf00      	nop
 801c566:	3708      	adds	r7, #8
 801c568:	46bd      	mov	sp, r7
 801c56a:	bd80      	pop	{r7, pc}

0801c56c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801c56c:	b580      	push	{r7, lr}
 801c56e:	b084      	sub	sp, #16
 801c570:	af00      	add	r7, sp, #0
 801c572:	6078      	str	r0, [r7, #4]
 801c574:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801c576:	687b      	ldr	r3, [r7, #4]
 801c578:	6818      	ldr	r0, [r3, #0]
 801c57a:	4639      	mov	r1, r7
 801c57c:	2300      	movs	r3, #0
 801c57e:	2200      	movs	r2, #0
 801c580:	f7ea ffaa 	bl	80074d8 <osMessageQueuePut>
 801c584:	4603      	mov	r3, r0
 801c586:	2b00      	cmp	r3, #0
 801c588:	d102      	bne.n	801c590 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801c58a:	2300      	movs	r3, #0
 801c58c:	73fb      	strb	r3, [r7, #15]
 801c58e:	e001      	b.n	801c594 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801c590:	23ff      	movs	r3, #255	; 0xff
 801c592:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801c594:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c598:	4618      	mov	r0, r3
 801c59a:	3710      	adds	r7, #16
 801c59c:	46bd      	mov	sp, r7
 801c59e:	bd80      	pop	{r7, pc}

0801c5a0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801c5a0:	b580      	push	{r7, lr}
 801c5a2:	b086      	sub	sp, #24
 801c5a4:	af00      	add	r7, sp, #0
 801c5a6:	60f8      	str	r0, [r7, #12]
 801c5a8:	60b9      	str	r1, [r7, #8]
 801c5aa:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801c5ac:	f7ea fc06 	bl	8006dbc <osKernelGetTickCount>
 801c5b0:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801c5b2:	687b      	ldr	r3, [r7, #4]
 801c5b4:	2b00      	cmp	r3, #0
 801c5b6:	d013      	beq.n	801c5e0 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801c5b8:	68fb      	ldr	r3, [r7, #12]
 801c5ba:	6818      	ldr	r0, [r3, #0]
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	2200      	movs	r2, #0
 801c5c0:	68b9      	ldr	r1, [r7, #8]
 801c5c2:	f7ea ffe9 	bl	8007598 <osMessageQueueGet>
 801c5c6:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801c5c8:	693b      	ldr	r3, [r7, #16]
 801c5ca:	2b00      	cmp	r3, #0
 801c5cc:	d105      	bne.n	801c5da <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801c5ce:	f7ea fbf5 	bl	8006dbc <osKernelGetTickCount>
 801c5d2:	4602      	mov	r2, r0
 801c5d4:	697b      	ldr	r3, [r7, #20]
 801c5d6:	1ad3      	subs	r3, r2, r3
 801c5d8:	e00f      	b.n	801c5fa <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c5da:	f04f 33ff 	mov.w	r3, #4294967295
 801c5de:	e00c      	b.n	801c5fa <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801c5e0:	68fb      	ldr	r3, [r7, #12]
 801c5e2:	6818      	ldr	r0, [r3, #0]
 801c5e4:	f04f 33ff 	mov.w	r3, #4294967295
 801c5e8:	2200      	movs	r2, #0
 801c5ea:	68b9      	ldr	r1, [r7, #8]
 801c5ec:	f7ea ffd4 	bl	8007598 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801c5f0:	f7ea fbe4 	bl	8006dbc <osKernelGetTickCount>
 801c5f4:	4602      	mov	r2, r0
 801c5f6:	697b      	ldr	r3, [r7, #20]
 801c5f8:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801c5fa:	4618      	mov	r0, r3
 801c5fc:	3718      	adds	r7, #24
 801c5fe:	46bd      	mov	sp, r7
 801c600:	bd80      	pop	{r7, pc}

0801c602 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801c602:	b580      	push	{r7, lr}
 801c604:	b082      	sub	sp, #8
 801c606:	af00      	add	r7, sp, #0
 801c608:	6078      	str	r0, [r7, #4]
 801c60a:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801c60c:	687b      	ldr	r3, [r7, #4]
 801c60e:	6818      	ldr	r0, [r3, #0]
 801c610:	2300      	movs	r3, #0
 801c612:	2200      	movs	r2, #0
 801c614:	6839      	ldr	r1, [r7, #0]
 801c616:	f7ea ffbf 	bl	8007598 <osMessageQueueGet>
 801c61a:	4603      	mov	r3, r0
 801c61c:	2b00      	cmp	r3, #0
 801c61e:	d101      	bne.n	801c624 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801c620:	2300      	movs	r3, #0
 801c622:	e001      	b.n	801c628 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801c624:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801c628:	4618      	mov	r0, r3
 801c62a:	3708      	adds	r7, #8
 801c62c:	46bd      	mov	sp, r7
 801c62e:	bd80      	pop	{r7, pc}

0801c630 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801c630:	b480      	push	{r7}
 801c632:	b083      	sub	sp, #12
 801c634:	af00      	add	r7, sp, #0
 801c636:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801c638:	687b      	ldr	r3, [r7, #4]
 801c63a:	681b      	ldr	r3, [r3, #0]
 801c63c:	2b00      	cmp	r3, #0
 801c63e:	d101      	bne.n	801c644 <sys_mbox_valid+0x14>
    return 0;
 801c640:	2300      	movs	r3, #0
 801c642:	e000      	b.n	801c646 <sys_mbox_valid+0x16>
  else
    return 1;
 801c644:	2301      	movs	r3, #1
}
 801c646:	4618      	mov	r0, r3
 801c648:	370c      	adds	r7, #12
 801c64a:	46bd      	mov	sp, r7
 801c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c650:	4770      	bx	lr

0801c652 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801c652:	b480      	push	{r7}
 801c654:	b083      	sub	sp, #12
 801c656:	af00      	add	r7, sp, #0
 801c658:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801c65a:	687b      	ldr	r3, [r7, #4]
 801c65c:	2200      	movs	r2, #0
 801c65e:	601a      	str	r2, [r3, #0]
}
 801c660:	bf00      	nop
 801c662:	370c      	adds	r7, #12
 801c664:	46bd      	mov	sp, r7
 801c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c66a:	4770      	bx	lr

0801c66c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801c66c:	b580      	push	{r7, lr}
 801c66e:	b082      	sub	sp, #8
 801c670:	af00      	add	r7, sp, #0
 801c672:	6078      	str	r0, [r7, #4]
 801c674:	460b      	mov	r3, r1
 801c676:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801c678:	78fb      	ldrb	r3, [r7, #3]
 801c67a:	2200      	movs	r2, #0
 801c67c:	4619      	mov	r1, r3
 801c67e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801c682:	f7ea fd72 	bl	800716a <osSemaphoreNew>
 801c686:	4602      	mov	r2, r0
 801c688:	687b      	ldr	r3, [r7, #4]
 801c68a:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801c68c:	687b      	ldr	r3, [r7, #4]
 801c68e:	681b      	ldr	r3, [r3, #0]
 801c690:	2b00      	cmp	r3, #0
 801c692:	d102      	bne.n	801c69a <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c694:	f04f 33ff 	mov.w	r3, #4294967295
 801c698:	e009      	b.n	801c6ae <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801c69a:	78fb      	ldrb	r3, [r7, #3]
 801c69c:	2b00      	cmp	r3, #0
 801c69e:	d105      	bne.n	801c6ac <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801c6a0:	687b      	ldr	r3, [r7, #4]
 801c6a2:	681b      	ldr	r3, [r3, #0]
 801c6a4:	2100      	movs	r1, #0
 801c6a6:	4618      	mov	r0, r3
 801c6a8:	f7ea fde8 	bl	800727c <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801c6ac:	2300      	movs	r3, #0
}
 801c6ae:	4618      	mov	r0, r3
 801c6b0:	3708      	adds	r7, #8
 801c6b2:	46bd      	mov	sp, r7
 801c6b4:	bd80      	pop	{r7, pc}

0801c6b6 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801c6b6:	b580      	push	{r7, lr}
 801c6b8:	b084      	sub	sp, #16
 801c6ba:	af00      	add	r7, sp, #0
 801c6bc:	6078      	str	r0, [r7, #4]
 801c6be:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801c6c0:	f7ea fb7c 	bl	8006dbc <osKernelGetTickCount>
 801c6c4:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801c6c6:	683b      	ldr	r3, [r7, #0]
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	d011      	beq.n	801c6f0 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	681b      	ldr	r3, [r3, #0]
 801c6d0:	6839      	ldr	r1, [r7, #0]
 801c6d2:	4618      	mov	r0, r3
 801c6d4:	f7ea fdd2 	bl	800727c <osSemaphoreAcquire>
 801c6d8:	4603      	mov	r3, r0
 801c6da:	2b00      	cmp	r3, #0
 801c6dc:	d105      	bne.n	801c6ea <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801c6de:	f7ea fb6d 	bl	8006dbc <osKernelGetTickCount>
 801c6e2:	4602      	mov	r2, r0
 801c6e4:	68fb      	ldr	r3, [r7, #12]
 801c6e6:	1ad3      	subs	r3, r2, r3
 801c6e8:	e012      	b.n	801c710 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c6ea:	f04f 33ff 	mov.w	r3, #4294967295
 801c6ee:	e00f      	b.n	801c710 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801c6f0:	bf00      	nop
 801c6f2:	687b      	ldr	r3, [r7, #4]
 801c6f4:	681b      	ldr	r3, [r3, #0]
 801c6f6:	f04f 31ff 	mov.w	r1, #4294967295
 801c6fa:	4618      	mov	r0, r3
 801c6fc:	f7ea fdbe 	bl	800727c <osSemaphoreAcquire>
 801c700:	4603      	mov	r3, r0
 801c702:	2b00      	cmp	r3, #0
 801c704:	d1f5      	bne.n	801c6f2 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801c706:	f7ea fb59 	bl	8006dbc <osKernelGetTickCount>
 801c70a:	4602      	mov	r2, r0
 801c70c:	68fb      	ldr	r3, [r7, #12]
 801c70e:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801c710:	4618      	mov	r0, r3
 801c712:	3710      	adds	r7, #16
 801c714:	46bd      	mov	sp, r7
 801c716:	bd80      	pop	{r7, pc}

0801c718 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801c718:	b580      	push	{r7, lr}
 801c71a:	b082      	sub	sp, #8
 801c71c:	af00      	add	r7, sp, #0
 801c71e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801c720:	687b      	ldr	r3, [r7, #4]
 801c722:	681b      	ldr	r3, [r3, #0]
 801c724:	4618      	mov	r0, r3
 801c726:	f7ea fdfb 	bl	8007320 <osSemaphoreRelease>
}
 801c72a:	bf00      	nop
 801c72c:	3708      	adds	r7, #8
 801c72e:	46bd      	mov	sp, r7
 801c730:	bd80      	pop	{r7, pc}

0801c732 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801c732:	b580      	push	{r7, lr}
 801c734:	b082      	sub	sp, #8
 801c736:	af00      	add	r7, sp, #0
 801c738:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801c73a:	687b      	ldr	r3, [r7, #4]
 801c73c:	681b      	ldr	r3, [r3, #0]
 801c73e:	4618      	mov	r0, r3
 801c740:	f7ea fe32 	bl	80073a8 <osSemaphoreDelete>
}
 801c744:	bf00      	nop
 801c746:	3708      	adds	r7, #8
 801c748:	46bd      	mov	sp, r7
 801c74a:	bd80      	pop	{r7, pc}

0801c74c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801c74c:	b480      	push	{r7}
 801c74e:	b083      	sub	sp, #12
 801c750:	af00      	add	r7, sp, #0
 801c752:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801c754:	687b      	ldr	r3, [r7, #4]
 801c756:	681b      	ldr	r3, [r3, #0]
 801c758:	2b00      	cmp	r3, #0
 801c75a:	d101      	bne.n	801c760 <sys_sem_valid+0x14>
    return 0;
 801c75c:	2300      	movs	r3, #0
 801c75e:	e000      	b.n	801c762 <sys_sem_valid+0x16>
  else
    return 1;
 801c760:	2301      	movs	r3, #1
}
 801c762:	4618      	mov	r0, r3
 801c764:	370c      	adds	r7, #12
 801c766:	46bd      	mov	sp, r7
 801c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c76c:	4770      	bx	lr

0801c76e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801c76e:	b480      	push	{r7}
 801c770:	b083      	sub	sp, #12
 801c772:	af00      	add	r7, sp, #0
 801c774:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801c776:	687b      	ldr	r3, [r7, #4]
 801c778:	2200      	movs	r2, #0
 801c77a:	601a      	str	r2, [r3, #0]
}
 801c77c:	bf00      	nop
 801c77e:	370c      	adds	r7, #12
 801c780:	46bd      	mov	sp, r7
 801c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c786:	4770      	bx	lr

0801c788 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801c788:	b580      	push	{r7, lr}
 801c78a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801c78c:	2000      	movs	r0, #0
 801c78e:	f7ea fbde 	bl	8006f4e <osMutexNew>
 801c792:	4603      	mov	r3, r0
 801c794:	4a01      	ldr	r2, [pc, #4]	; (801c79c <sys_init+0x14>)
 801c796:	6013      	str	r3, [r2, #0]
#endif
}
 801c798:	bf00      	nop
 801c79a:	bd80      	pop	{r7, pc}
 801c79c:	20008990 	.word	0x20008990

0801c7a0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801c7a0:	b580      	push	{r7, lr}
 801c7a2:	b082      	sub	sp, #8
 801c7a4:	af00      	add	r7, sp, #0
 801c7a6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801c7a8:	2000      	movs	r0, #0
 801c7aa:	f7ea fbd0 	bl	8006f4e <osMutexNew>
 801c7ae:	4602      	mov	r2, r0
 801c7b0:	687b      	ldr	r3, [r7, #4]
 801c7b2:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801c7b4:	687b      	ldr	r3, [r7, #4]
 801c7b6:	681b      	ldr	r3, [r3, #0]
 801c7b8:	2b00      	cmp	r3, #0
 801c7ba:	d102      	bne.n	801c7c2 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c7bc:	f04f 33ff 	mov.w	r3, #4294967295
 801c7c0:	e000      	b.n	801c7c4 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801c7c2:	2300      	movs	r3, #0
}
 801c7c4:	4618      	mov	r0, r3
 801c7c6:	3708      	adds	r7, #8
 801c7c8:	46bd      	mov	sp, r7
 801c7ca:	bd80      	pop	{r7, pc}

0801c7cc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801c7cc:	b580      	push	{r7, lr}
 801c7ce:	b082      	sub	sp, #8
 801c7d0:	af00      	add	r7, sp, #0
 801c7d2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801c7d4:	687b      	ldr	r3, [r7, #4]
 801c7d6:	681b      	ldr	r3, [r3, #0]
 801c7d8:	f04f 31ff 	mov.w	r1, #4294967295
 801c7dc:	4618      	mov	r0, r3
 801c7de:	f7ea fc3c 	bl	800705a <osMutexAcquire>
#endif
}
 801c7e2:	bf00      	nop
 801c7e4:	3708      	adds	r7, #8
 801c7e6:	46bd      	mov	sp, r7
 801c7e8:	bd80      	pop	{r7, pc}

0801c7ea <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801c7ea:	b580      	push	{r7, lr}
 801c7ec:	b082      	sub	sp, #8
 801c7ee:	af00      	add	r7, sp, #0
 801c7f0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801c7f2:	687b      	ldr	r3, [r7, #4]
 801c7f4:	681b      	ldr	r3, [r3, #0]
 801c7f6:	4618      	mov	r0, r3
 801c7f8:	f7ea fc7a 	bl	80070f0 <osMutexRelease>
}
 801c7fc:	bf00      	nop
 801c7fe:	3708      	adds	r7, #8
 801c800:	46bd      	mov	sp, r7
 801c802:	bd80      	pop	{r7, pc}

0801c804 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801c804:	b580      	push	{r7, lr}
 801c806:	b08e      	sub	sp, #56	; 0x38
 801c808:	af00      	add	r7, sp, #0
 801c80a:	60f8      	str	r0, [r7, #12]
 801c80c:	60b9      	str	r1, [r7, #8]
 801c80e:	607a      	str	r2, [r7, #4]
 801c810:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801c812:	f107 0314 	add.w	r3, r7, #20
 801c816:	2224      	movs	r2, #36	; 0x24
 801c818:	2100      	movs	r1, #0
 801c81a:	4618      	mov	r0, r3
 801c81c:	f002 f9ae 	bl	801eb7c <memset>
 801c820:	68fb      	ldr	r3, [r7, #12]
 801c822:	617b      	str	r3, [r7, #20]
 801c824:	683b      	ldr	r3, [r7, #0]
 801c826:	62bb      	str	r3, [r7, #40]	; 0x28
 801c828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c82a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801c82c:	f107 0314 	add.w	r3, r7, #20
 801c830:	461a      	mov	r2, r3
 801c832:	6879      	ldr	r1, [r7, #4]
 801c834:	68b8      	ldr	r0, [r7, #8]
 801c836:	f7ea fad6 	bl	8006de6 <osThreadNew>
 801c83a:	4603      	mov	r3, r0
#endif
}
 801c83c:	4618      	mov	r0, r3
 801c83e:	3738      	adds	r7, #56	; 0x38
 801c840:	46bd      	mov	sp, r7
 801c842:	bd80      	pop	{r7, pc}

0801c844 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801c844:	b580      	push	{r7, lr}
 801c846:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801c848:	4b04      	ldr	r3, [pc, #16]	; (801c85c <sys_arch_protect+0x18>)
 801c84a:	681b      	ldr	r3, [r3, #0]
 801c84c:	f04f 31ff 	mov.w	r1, #4294967295
 801c850:	4618      	mov	r0, r3
 801c852:	f7ea fc02 	bl	800705a <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801c856:	2301      	movs	r3, #1
}
 801c858:	4618      	mov	r0, r3
 801c85a:	bd80      	pop	{r7, pc}
 801c85c:	20008990 	.word	0x20008990

0801c860 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801c860:	b580      	push	{r7, lr}
 801c862:	b082      	sub	sp, #8
 801c864:	af00      	add	r7, sp, #0
 801c866:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801c868:	4b04      	ldr	r3, [pc, #16]	; (801c87c <sys_arch_unprotect+0x1c>)
 801c86a:	681b      	ldr	r3, [r3, #0]
 801c86c:	4618      	mov	r0, r3
 801c86e:	f7ea fc3f 	bl	80070f0 <osMutexRelease>
}
 801c872:	bf00      	nop
 801c874:	3708      	adds	r7, #8
 801c876:	46bd      	mov	sp, r7
 801c878:	bd80      	pop	{r7, pc}
 801c87a:	bf00      	nop
 801c87c:	20008990 	.word	0x20008990

0801c880 <afe_app_init>:
AFE ltc2335_1 = {.busy = &adc_busy1,.cnv = &adc_cnv1,.p_driver = &spi1,.pd = &adc_rs1,.softSpan = _111};
AFE ltc2335_2 = {.busy = &adc_busy2,.cnv = &adc_cnv2,.p_driver = &spi2,.pd = &adc_rs2,.softSpan = _111};



void afe_app_init(){
 801c880:	b580      	push	{r7, lr}
 801c882:	af00      	add	r7, sp, #0
	afe_init(&ltc2335_1);
 801c884:	4803      	ldr	r0, [pc, #12]	; (801c894 <afe_app_init+0x14>)
 801c886:	f000 ff79 	bl	801d77c <afe_init>
	afe_init(&ltc2335_2);
 801c88a:	4803      	ldr	r0, [pc, #12]	; (801c898 <afe_app_init+0x18>)
 801c88c:	f000 ff76 	bl	801d77c <afe_init>
}
 801c890:	bf00      	nop
 801c892:	bd80      	pop	{r7, pc}
 801c894:	10000020 	.word	0x10000020
 801c898:	10000084 	.word	0x10000084

0801c89c <app_init>:
static void ev_read_sensor_task(void *arg);
static void ev_tcp_server_data_task(void *arg);
static void do_send_data(const int sock);

void app_init(void)
{
 801c89c:	b580      	push	{r7, lr}
 801c89e:	b082      	sub	sp, #8
 801c8a0:	af02      	add	r7, sp, #8
	cJSON_InitHooks(NULL);
 801c8a2:	2000      	movs	r0, #0
 801c8a4:	f001 ff8e 	bl	801e7c4 <cJSON_InitHooks>
	setting_app();
 801c8a8:	f000 fb32 	bl	801cf10 <setting_app>
//	ota_app_init();
	xTaskCreate(ev_tcp_server_data_task, "tcp server_dt", 1024 * 2, NULL,
 801c8ac:	4b06      	ldr	r3, [pc, #24]	; (801c8c8 <app_init+0x2c>)
 801c8ae:	9301      	str	r3, [sp, #4]
 801c8b0:	2337      	movs	r3, #55	; 0x37
 801c8b2:	9300      	str	r3, [sp, #0]
 801c8b4:	2300      	movs	r3, #0
 801c8b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c8ba:	4904      	ldr	r1, [pc, #16]	; (801c8cc <app_init+0x30>)
 801c8bc:	4804      	ldr	r0, [pc, #16]	; (801c8d0 <app_init+0x34>)
 801c8be:	f7ec f952 	bl	8008b66 <xTaskCreate>
				configMAX_PRIORITIES - 1, &ev_tcp_server_data_handle);
}
 801c8c2:	bf00      	nop
 801c8c4:	46bd      	mov	sp, r7
 801c8c6:	bd80      	pop	{r7, pc}
 801c8c8:	20008998 	.word	0x20008998
 801c8cc:	08025728 	.word	0x08025728
 801c8d0:	0801cbb1 	.word	0x0801cbb1

0801c8d4 <do_send_data>:
char json_buff[8192];
char array[MAX_CHANNEL][1024];
#define MAX_POINT 50

static void do_send_data(const int sock)
{
 801c8d4:	b590      	push	{r4, r7, lr}
 801c8d6:	f2ad 4df4 	subw	sp, sp, #1268	; 0x4f4
 801c8da:	af02      	add	r7, sp, #8
 801c8dc:	1d3b      	adds	r3, r7, #4
 801c8de:	6018      	str	r0, [r3, #0]
	float buff[MAX_CHANNEL][MAX_POINT];
	uint16_t length = 0;
 801c8e0:	2300      	movs	r3, #0
 801c8e2:	f8a7 34e6 	strh.w	r3, [r7, #1254]	; 0x4e6
	Data_Type_t data_sensor;
	int byte_write = 0;
 801c8e6:	2300      	movs	r3, #0
 801c8e8:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
	//	sprintf(buff,"Hello guy\r\n");
	//	length = strlen(buff);
	ev_data_queue = xQueueCreate(100, sizeof(Data_Type_t));
 801c8ec:	2200      	movs	r2, #0
 801c8ee:	2118      	movs	r1, #24
 801c8f0:	2064      	movs	r0, #100	; 0x64
 801c8f2:	f7eb f8bb 	bl	8007a6c <xQueueGenericCreate>
 801c8f6:	4603      	mov	r3, r0
 801c8f8:	4a70      	ldr	r2, [pc, #448]	; (801cabc <do_send_data+0x1e8>)
 801c8fa:	6013      	str	r3, [r2, #0]
	xTaskCreate(ev_read_sensor_task, "read sensor", 1024 * 2, NULL,
 801c8fc:	4b70      	ldr	r3, [pc, #448]	; (801cac0 <do_send_data+0x1ec>)
 801c8fe:	9301      	str	r3, [sp, #4]
 801c900:	2338      	movs	r3, #56	; 0x38
 801c902:	9300      	str	r3, [sp, #0]
 801c904:	2300      	movs	r3, #0
 801c906:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c90a:	496e      	ldr	r1, [pc, #440]	; (801cac4 <do_send_data+0x1f0>)
 801c90c:	486e      	ldr	r0, [pc, #440]	; (801cac8 <do_send_data+0x1f4>)
 801c90e:	f7ec f92a 	bl	8008b66 <xTaskCreate>
				configMAX_PRIORITIES, &ev_read_sensor_handle);
	while (1)
	{
		// Read Data
		if (xQueueReceive(ev_data_queue, &data_sensor, (TickType_t)1) == pdPASS)
 801c912:	4b6a      	ldr	r3, [pc, #424]	; (801cabc <do_send_data+0x1e8>)
 801c914:	681b      	ldr	r3, [r3, #0]
 801c916:	f107 010c 	add.w	r1, r7, #12
 801c91a:	2201      	movs	r2, #1
 801c91c:	4618      	mov	r0, r3
 801c91e:	f7eb fc49 	bl	80081b4 <xQueueReceive>
 801c922:	4603      	mov	r3, r0
 801c924:	2b01      	cmp	r3, #1
 801c926:	d125      	bne.n	801c974 <do_send_data+0xa0>
		{
			for (uint16_t i = 0; i < 6; i++)
 801c928:	2300      	movs	r3, #0
 801c92a:	f8a7 34de 	strh.w	r3, [r7, #1246]	; 0x4de
 801c92e:	e018      	b.n	801c962 <do_send_data+0x8e>
			{
				buff[i][length] = data_sensor.adc[i];
 801c930:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	; 0x4de
 801c934:	f8b7 04de 	ldrh.w	r0, [r7, #1246]	; 0x4de
 801c938:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	; 0x4e6
 801c93c:	f107 010c 	add.w	r1, r7, #12
 801c940:	0092      	lsls	r2, r2, #2
 801c942:	440a      	add	r2, r1
 801c944:	6812      	ldr	r2, [r2, #0]
 801c946:	f107 0124 	add.w	r1, r7, #36	; 0x24
 801c94a:	2432      	movs	r4, #50	; 0x32
 801c94c:	fb04 f000 	mul.w	r0, r4, r0
 801c950:	4403      	add	r3, r0
 801c952:	009b      	lsls	r3, r3, #2
 801c954:	440b      	add	r3, r1
 801c956:	601a      	str	r2, [r3, #0]
			for (uint16_t i = 0; i < 6; i++)
 801c958:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	; 0x4de
 801c95c:	3301      	adds	r3, #1
 801c95e:	f8a7 34de 	strh.w	r3, [r7, #1246]	; 0x4de
 801c962:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	; 0x4de
 801c966:	2b05      	cmp	r3, #5
 801c968:	d9e2      	bls.n	801c930 <do_send_data+0x5c>
			}
			length += 1;
 801c96a:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	; 0x4e6
 801c96e:	3301      	adds	r3, #1
 801c970:	f8a7 34e6 	strh.w	r3, [r7, #1254]	; 0x4e6
		}
		// Send Data
		if (length == MAX_POINT)
 801c974:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	; 0x4e6
 801c978:	2b32      	cmp	r3, #50	; 0x32
 801c97a:	f040 8088 	bne.w	801ca8e <do_send_data+0x1ba>
		{
			memset(json_buff, 0, 8192);
 801c97e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801c982:	2100      	movs	r1, #0
 801c984:	4851      	ldr	r0, [pc, #324]	; (801cacc <do_send_data+0x1f8>)
 801c986:	f002 f8f9 	bl	801eb7c <memset>
			size_t len = 0;
 801c98a:	2300      	movs	r3, #0
 801c98c:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
			sprintf(json_buff,":|");
 801c990:	494f      	ldr	r1, [pc, #316]	; (801cad0 <do_send_data+0x1fc>)
 801c992:	484e      	ldr	r0, [pc, #312]	; (801cacc <do_send_data+0x1f8>)
 801c994:	f003 f842 	bl	801fa1c <siprintf>
			len = strlen(json_buff);
 801c998:	484c      	ldr	r0, [pc, #304]	; (801cacc <do_send_data+0x1f8>)
 801c99a:	f7e3 fc19 	bl	80001d0 <strlen>
 801c99e:	f8c7 04d8 	str.w	r0, [r7, #1240]	; 0x4d8
			for(uint16_t j = 0;j<6;j++){
 801c9a2:	2300      	movs	r3, #0
 801c9a4:	f8a7 34d6 	strh.w	r3, [r7, #1238]	; 0x4d6
 801c9a8:	e053      	b.n	801ca52 <do_send_data+0x17e>
				for(uint16_t i = 0;i<length-1;i++){
 801c9aa:	2300      	movs	r3, #0
 801c9ac:	f8a7 34d4 	strh.w	r3, [r7, #1236]	; 0x4d4
 801c9b0:	e023      	b.n	801c9fa <do_send_data+0x126>
					sprintf(json_buff+len,"%f,",buff[j][i]);
 801c9b2:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 801c9b6:	4a45      	ldr	r2, [pc, #276]	; (801cacc <do_send_data+0x1f8>)
 801c9b8:	189c      	adds	r4, r3, r2
 801c9ba:	f8b7 14d6 	ldrh.w	r1, [r7, #1238]	; 0x4d6
 801c9be:	f8b7 34d4 	ldrh.w	r3, [r7, #1236]	; 0x4d4
 801c9c2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801c9c6:	2032      	movs	r0, #50	; 0x32
 801c9c8:	fb00 f101 	mul.w	r1, r0, r1
 801c9cc:	440b      	add	r3, r1
 801c9ce:	009b      	lsls	r3, r3, #2
 801c9d0:	4413      	add	r3, r2
 801c9d2:	681b      	ldr	r3, [r3, #0]
 801c9d4:	4618      	mov	r0, r3
 801c9d6:	f7e3 fdb7 	bl	8000548 <__aeabi_f2d>
 801c9da:	4602      	mov	r2, r0
 801c9dc:	460b      	mov	r3, r1
 801c9de:	493d      	ldr	r1, [pc, #244]	; (801cad4 <do_send_data+0x200>)
 801c9e0:	4620      	mov	r0, r4
 801c9e2:	f003 f81b 	bl	801fa1c <siprintf>
					len = strlen(json_buff);
 801c9e6:	4839      	ldr	r0, [pc, #228]	; (801cacc <do_send_data+0x1f8>)
 801c9e8:	f7e3 fbf2 	bl	80001d0 <strlen>
 801c9ec:	f8c7 04d8 	str.w	r0, [r7, #1240]	; 0x4d8
				for(uint16_t i = 0;i<length-1;i++){
 801c9f0:	f8b7 34d4 	ldrh.w	r3, [r7, #1236]	; 0x4d4
 801c9f4:	3301      	adds	r3, #1
 801c9f6:	f8a7 34d4 	strh.w	r3, [r7, #1236]	; 0x4d4
 801c9fa:	f8b7 24d4 	ldrh.w	r2, [r7, #1236]	; 0x4d4
 801c9fe:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	; 0x4e6
 801ca02:	3b01      	subs	r3, #1
 801ca04:	429a      	cmp	r2, r3
 801ca06:	dbd4      	blt.n	801c9b2 <do_send_data+0xde>
				}
				sprintf(json_buff+len,"%f|",buff[j][length-1]);
 801ca08:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 801ca0c:	4a2f      	ldr	r2, [pc, #188]	; (801cacc <do_send_data+0x1f8>)
 801ca0e:	189c      	adds	r4, r3, r2
 801ca10:	f8b7 14d6 	ldrh.w	r1, [r7, #1238]	; 0x4d6
 801ca14:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	; 0x4e6
 801ca18:	3b01      	subs	r3, #1
 801ca1a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801ca1e:	2032      	movs	r0, #50	; 0x32
 801ca20:	fb00 f101 	mul.w	r1, r0, r1
 801ca24:	440b      	add	r3, r1
 801ca26:	009b      	lsls	r3, r3, #2
 801ca28:	4413      	add	r3, r2
 801ca2a:	681b      	ldr	r3, [r3, #0]
 801ca2c:	4618      	mov	r0, r3
 801ca2e:	f7e3 fd8b 	bl	8000548 <__aeabi_f2d>
 801ca32:	4602      	mov	r2, r0
 801ca34:	460b      	mov	r3, r1
 801ca36:	4928      	ldr	r1, [pc, #160]	; (801cad8 <do_send_data+0x204>)
 801ca38:	4620      	mov	r0, r4
 801ca3a:	f002 ffef 	bl	801fa1c <siprintf>
				len = strlen(json_buff);
 801ca3e:	4823      	ldr	r0, [pc, #140]	; (801cacc <do_send_data+0x1f8>)
 801ca40:	f7e3 fbc6 	bl	80001d0 <strlen>
 801ca44:	f8c7 04d8 	str.w	r0, [r7, #1240]	; 0x4d8
			for(uint16_t j = 0;j<6;j++){
 801ca48:	f8b7 34d6 	ldrh.w	r3, [r7, #1238]	; 0x4d6
 801ca4c:	3301      	adds	r3, #1
 801ca4e:	f8a7 34d6 	strh.w	r3, [r7, #1238]	; 0x4d6
 801ca52:	f8b7 34d6 	ldrh.w	r3, [r7, #1238]	; 0x4d6
 801ca56:	2b05      	cmp	r3, #5
 801ca58:	d9a7      	bls.n	801c9aa <do_send_data+0xd6>
			}
			sprintf(json_buff+len,"\r\n");
 801ca5a:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 801ca5e:	4a1b      	ldr	r2, [pc, #108]	; (801cacc <do_send_data+0x1f8>)
 801ca60:	4413      	add	r3, r2
 801ca62:	491e      	ldr	r1, [pc, #120]	; (801cadc <do_send_data+0x208>)
 801ca64:	4618      	mov	r0, r3
 801ca66:	f002 ffd9 	bl	801fa1c <siprintf>
			len = strlen(json_buff);
 801ca6a:	4818      	ldr	r0, [pc, #96]	; (801cacc <do_send_data+0x1f8>)
 801ca6c:	f7e3 fbb0 	bl	80001d0 <strlen>
 801ca70:	f8c7 04d8 	str.w	r0, [r7, #1240]	; 0x4d8
			byte_write = send(sock,(uint8_t*)json_buff,len,0);
 801ca74:	1d38      	adds	r0, r7, #4
 801ca76:	2300      	movs	r3, #0
 801ca78:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 801ca7c:	4913      	ldr	r1, [pc, #76]	; (801cacc <do_send_data+0x1f8>)
 801ca7e:	6800      	ldr	r0, [r0, #0]
 801ca80:	f7f1 f9a4 	bl	800ddcc <lwip_send>
 801ca84:	f8c7 04e0 	str.w	r0, [r7, #1248]	; 0x4e0
			// Reset buff
			length = 0;
 801ca88:	2300      	movs	r3, #0
 801ca8a:	f8a7 34e6 	strh.w	r3, [r7, #1254]	; 0x4e6
		}
		// Check connect
		if (byte_write == -1)
 801ca8e:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 801ca92:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ca96:	d000      	beq.n	801ca9a <do_send_data+0x1c6>
		if (xQueueReceive(ev_data_queue, &data_sensor, (TickType_t)1) == pdPASS)
 801ca98:	e73b      	b.n	801c912 <do_send_data+0x3e>
		{
			break;
 801ca9a:	bf00      	nop
		}
	}
	vTaskDelete(ev_read_sensor_handle);
 801ca9c:	4b08      	ldr	r3, [pc, #32]	; (801cac0 <do_send_data+0x1ec>)
 801ca9e:	681b      	ldr	r3, [r3, #0]
 801caa0:	4618      	mov	r0, r3
 801caa2:	f7ec f9bb 	bl	8008e1c <vTaskDelete>
	vQueueDelete(ev_data_queue);
 801caa6:	4b05      	ldr	r3, [pc, #20]	; (801cabc <do_send_data+0x1e8>)
 801caa8:	681b      	ldr	r3, [r3, #0]
 801caaa:	4618      	mov	r0, r3
 801caac:	f7eb fe2a 	bl	8008704 <vQueueDelete>
	//	byte_write = send(sock,(uint8_t*)buff,length,0);
}
 801cab0:	bf00      	nop
 801cab2:	f207 47ec 	addw	r7, r7, #1260	; 0x4ec
 801cab6:	46bd      	mov	sp, r7
 801cab8:	bd90      	pop	{r4, r7, pc}
 801caba:	bf00      	nop
 801cabc:	20008994 	.word	0x20008994
 801cac0:	2000c19c 	.word	0x2000c19c
 801cac4:	08025738 	.word	0x08025738
 801cac8:	0801cae1 	.word	0x0801cae1
 801cacc:	2000899c 	.word	0x2000899c
 801cad0:	08025744 	.word	0x08025744
 801cad4:	08025748 	.word	0x08025748
 801cad8:	0802574c 	.word	0x0802574c
 801cadc:	08025750 	.word	0x08025750

0801cae0 <ev_read_sensor_task>:

#define NUM_MAX_SEND_QUEUE_FALSE 10
uint32_t tick_us = 0;

static void ev_read_sensor_task(void *arg)
{
 801cae0:	b580      	push	{r7, lr}
 801cae2:	b08c      	sub	sp, #48	; 0x30
 801cae4:	af00      	add	r7, sp, #0
 801cae6:	6078      	str	r0, [r7, #4]
	afe_app_init();
 801cae8:	f7ff feca 	bl	801c880 <afe_app_init>
	Data_Type_t data_adc;
	while (1)
	{
		for (uint8_t i = 0; i < 3; i++)
 801caec:	2300      	movs	r3, #0
 801caee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801caf2:	e049      	b.n	801cb88 <ev_read_sensor_task+0xa8>
		{
			uint8_t data[4] = {0};
 801caf4:	2300      	movs	r3, #0
 801caf6:	613b      	str	r3, [r7, #16]
			uint8_t config = 0;
 801caf8:	2300      	movs	r3, #0
 801cafa:	73fb      	strb	r3, [r7, #15]
			afe_create_config_word(i, _111, &config);
 801cafc:	f107 020f 	add.w	r2, r7, #15
 801cb00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801cb04:	2107      	movs	r1, #7
 801cb06:	4618      	mov	r0, r3
 801cb08:	f000 febb 	bl	801d882 <afe_create_config_word>
			afe_read(&ltc2335_1, config, data);
 801cb0c:	7bfb      	ldrb	r3, [r7, #15]
 801cb0e:	f107 0210 	add.w	r2, r7, #16
 801cb12:	4619      	mov	r1, r3
 801cb14:	4823      	ldr	r0, [pc, #140]	; (801cba4 <ev_read_sensor_task+0xc4>)
 801cb16:	f000 fe8d 	bl	801d834 <afe_read>
			afe_convert(&ltc2335_1, data);
 801cb1a:	f107 0310 	add.w	r3, r7, #16
 801cb1e:	4619      	mov	r1, r3
 801cb20:	4820      	ldr	r0, [pc, #128]	; (801cba4 <ev_read_sensor_task+0xc4>)
 801cb22:	f000 fecb 	bl	801d8bc <afe_convert>
			afe_read(&ltc2335_2, config, data);
 801cb26:	7bfb      	ldrb	r3, [r7, #15]
 801cb28:	f107 0210 	add.w	r2, r7, #16
 801cb2c:	4619      	mov	r1, r3
 801cb2e:	481e      	ldr	r0, [pc, #120]	; (801cba8 <ev_read_sensor_task+0xc8>)
 801cb30:	f000 fe80 	bl	801d834 <afe_read>
			afe_convert(&ltc2335_2, data);
 801cb34:	f107 0310 	add.w	r3, r7, #16
 801cb38:	4619      	mov	r1, r3
 801cb3a:	481b      	ldr	r0, [pc, #108]	; (801cba8 <ev_read_sensor_task+0xc8>)
 801cb3c:	f000 febe 	bl	801d8bc <afe_convert>
			data_adc.adc[i] = ltc2335_1.dataf_channel[i];
 801cb40:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801cb44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801cb48:	4916      	ldr	r1, [pc, #88]	; (801cba4 <ev_read_sensor_task+0xc4>)
 801cb4a:	320c      	adds	r2, #12
 801cb4c:	0092      	lsls	r2, r2, #2
 801cb4e:	440a      	add	r2, r1
 801cb50:	6812      	ldr	r2, [r2, #0]
 801cb52:	009b      	lsls	r3, r3, #2
 801cb54:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801cb58:	440b      	add	r3, r1
 801cb5a:	3b1c      	subs	r3, #28
 801cb5c:	601a      	str	r2, [r3, #0]
			data_adc.adc[i + 3] = ltc2335_2.dataf_channel[i];
 801cb5e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801cb62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801cb66:	3303      	adds	r3, #3
 801cb68:	490f      	ldr	r1, [pc, #60]	; (801cba8 <ev_read_sensor_task+0xc8>)
 801cb6a:	320c      	adds	r2, #12
 801cb6c:	0092      	lsls	r2, r2, #2
 801cb6e:	440a      	add	r2, r1
 801cb70:	6812      	ldr	r2, [r2, #0]
 801cb72:	009b      	lsls	r3, r3, #2
 801cb74:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801cb78:	440b      	add	r3, r1
 801cb7a:	3b1c      	subs	r3, #28
 801cb7c:	601a      	str	r2, [r3, #0]
		for (uint8_t i = 0; i < 3; i++)
 801cb7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801cb82:	3301      	adds	r3, #1
 801cb84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801cb88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801cb8c:	2b02      	cmp	r3, #2
 801cb8e:	d9b1      	bls.n	801caf4 <ev_read_sensor_task+0x14>
		}
		xQueueSend(ev_data_queue, &data_adc,
 801cb90:	4b06      	ldr	r3, [pc, #24]	; (801cbac <ev_read_sensor_task+0xcc>)
 801cb92:	6818      	ldr	r0, [r3, #0]
 801cb94:	f107 0114 	add.w	r1, r7, #20
 801cb98:	2300      	movs	r3, #0
 801cb9a:	2201      	movs	r2, #1
 801cb9c:	f7eb f8e4 	bl	8007d68 <xQueueGenericSend>
		for (uint8_t i = 0; i < 3; i++)
 801cba0:	e7a4      	b.n	801caec <ev_read_sensor_task+0xc>
 801cba2:	bf00      	nop
 801cba4:	10000020 	.word	0x10000020
 801cba8:	10000084 	.word	0x10000084
 801cbac:	20008994 	.word	0x20008994

0801cbb0 <ev_tcp_server_data_task>:
				   1);
	}
}

static void ev_tcp_server_data_task(void *arg)
{
 801cbb0:	b580      	push	{r7, lr}
 801cbb2:	b0b8      	sub	sp, #224	; 0xe0
 801cbb4:	af02      	add	r7, sp, #8
 801cbb6:	6078      	str	r0, [r7, #4]
	char addr_str[128];
	int addr_family = AF_INET;
 801cbb8:	2302      	movs	r3, #2
 801cbba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	int ip_protocol = 0;
 801cbbe:	2300      	movs	r3, #0
 801cbc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	int keepAlive = 1;
 801cbc4:	2301      	movs	r3, #1
 801cbc6:	63fb      	str	r3, [r7, #60]	; 0x3c
	int keepIdle = KEEPALIVE_IDLE;
 801cbc8:	2305      	movs	r3, #5
 801cbca:	63bb      	str	r3, [r7, #56]	; 0x38
	int keepInterval = KEEPALIVE_INTERVAL;
 801cbcc:	2305      	movs	r3, #5
 801cbce:	637b      	str	r3, [r7, #52]	; 0x34
	int keepCount = KEEPALIVE_COUNT;
 801cbd0:	2301      	movs	r3, #1
 801cbd2:	633b      	str	r3, [r7, #48]	; 0x30
	struct sockaddr_storage dest_addr;

	if (addr_family == AF_INET)
 801cbd4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801cbd8:	2b02      	cmp	r3, #2
 801cbda:	d11a      	bne.n	801cc12 <ev_tcp_server_data_task+0x62>
	{
		struct sockaddr_in *dest_addr_ip4 = (struct sockaddr_in *)&dest_addr;
 801cbdc:	f107 0320 	add.w	r3, r7, #32
 801cbe0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		dest_addr_ip4->sin_addr.s_addr = htonl(INADDR_ANY);
 801cbe4:	2000      	movs	r0, #0
 801cbe6:	f7f1 ffc8 	bl	800eb7a <lwip_htonl>
 801cbea:	4602      	mov	r2, r0
 801cbec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801cbf0:	605a      	str	r2, [r3, #4]
		dest_addr_ip4->sin_family = AF_INET;
 801cbf2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801cbf6:	2202      	movs	r2, #2
 801cbf8:	705a      	strb	r2, [r3, #1]
		dest_addr_ip4->sin_port = htons(PORT_DATA);
 801cbfa:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 801cbfe:	f7f1 ffa7 	bl	800eb50 <lwip_htons>
 801cc02:	4603      	mov	r3, r0
 801cc04:	461a      	mov	r2, r3
 801cc06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801cc0a:	805a      	strh	r2, [r3, #2]
		ip_protocol = IPPROTO_IP;
 801cc0c:	2300      	movs	r3, #0
 801cc0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	}

	int listen_sock = socket(addr_family, SOCK_STREAM, ip_protocol);
 801cc12:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801cc16:	2101      	movs	r1, #1
 801cc18:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 801cc1c:	f7f1 f9e6 	bl	800dfec <lwip_socket>
 801cc20:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
	if (listen_sock < 0)
 801cc24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801cc28:	2b00      	cmp	r3, #0
 801cc2a:	da03      	bge.n	801cc34 <ev_tcp_server_data_task+0x84>
	{
		// printf( "Unable to create socket: errno %d", errno);
		vTaskDelete(NULL);
 801cc2c:	2000      	movs	r0, #0
 801cc2e:	f7ec f8f5 	bl	8008e1c <vTaskDelete>
 801cc32:	e083      	b.n	801cd3c <ev_tcp_server_data_task+0x18c>
		return;
	}

	int opt = 1;
 801cc34:	2301      	movs	r3, #1
 801cc36:	61fb      	str	r3, [r7, #28]
	setsockopt(listen_sock, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));
 801cc38:	f107 031c 	add.w	r3, r7, #28
 801cc3c:	2204      	movs	r2, #4
 801cc3e:	9200      	str	r2, [sp, #0]
 801cc40:	2204      	movs	r2, #4
 801cc42:	f640 71ff 	movw	r1, #4095	; 0xfff
 801cc46:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801cc4a:	f7f1 fbdd 	bl	800e408 <lwip_setsockopt>

	int err = bind(listen_sock, (struct sockaddr *)&dest_addr,
 801cc4e:	f107 0320 	add.w	r3, r7, #32
 801cc52:	2210      	movs	r2, #16
 801cc54:	4619      	mov	r1, r3
 801cc56:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801cc5a:	f7f0 fc73 	bl	800d544 <lwip_bind>
 801cc5e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
				   sizeof(dest_addr));
	if (err != 0)
 801cc62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801cc66:	2b00      	cmp	r3, #0
 801cc68:	d15c      	bne.n	801cd24 <ev_tcp_server_data_task+0x174>
		// printf( "IPPROTO: %d", addr_family);
		goto CLEAN_UP;
	}
	// printf( "Socket bound, port %d", PORT_SETTING);

	err = listen(listen_sock, 1);
 801cc6a:	2101      	movs	r1, #1
 801cc6c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801cc70:	f7f0 fd2c 	bl	800d6cc <lwip_listen>
 801cc74:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
	if (err != 0)
 801cc78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801cc7c:	2b00      	cmp	r3, #0
 801cc7e:	d153      	bne.n	801cd28 <ev_tcp_server_data_task+0x178>
	}
	for (;;)
	{
		// printf( "Socket listening");
		struct sockaddr_storage source_addr; // Large enough for both IPv4 or IPv6
		socklen_t addr_len = sizeof(source_addr);
 801cc80:	2310      	movs	r3, #16
 801cc82:	60bb      	str	r3, [r7, #8]
		int sock = accept(listen_sock, (struct sockaddr *)&source_addr,
 801cc84:	f107 0208 	add.w	r2, r7, #8
 801cc88:	f107 030c 	add.w	r3, r7, #12
 801cc8c:	4619      	mov	r1, r3
 801cc8e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801cc92:	f7f0 fb39 	bl	800d308 <lwip_accept>
 801cc96:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
						  &addr_len);
		if (sock < 0)
 801cc9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801cc9e:	2b00      	cmp	r3, #0
 801cca0:	db44      	blt.n	801cd2c <ev_tcp_server_data_task+0x17c>
		{
			// printf( "Unable to accept connection: errno %d", errno);
			break;
		}
		// Set tcp keepalive option
		setsockopt(sock, SOL_SOCKET, SO_KEEPALIVE, &keepAlive, sizeof(int));
 801cca2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801cca6:	2204      	movs	r2, #4
 801cca8:	9200      	str	r2, [sp, #0]
 801ccaa:	2208      	movs	r2, #8
 801ccac:	f640 71ff 	movw	r1, #4095	; 0xfff
 801ccb0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801ccb4:	f7f1 fba8 	bl	800e408 <lwip_setsockopt>
		setsockopt(sock, IPPROTO_TCP, TCP_KEEPIDLE, &keepIdle, sizeof(int));
 801ccb8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ccbc:	2204      	movs	r2, #4
 801ccbe:	9200      	str	r2, [sp, #0]
 801ccc0:	2203      	movs	r2, #3
 801ccc2:	2106      	movs	r1, #6
 801ccc4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801ccc8:	f7f1 fb9e 	bl	800e408 <lwip_setsockopt>
		setsockopt(sock, IPPROTO_TCP, TCP_KEEPINTVL, &keepInterval,
 801cccc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801ccd0:	2204      	movs	r2, #4
 801ccd2:	9200      	str	r2, [sp, #0]
 801ccd4:	2204      	movs	r2, #4
 801ccd6:	2106      	movs	r1, #6
 801ccd8:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801ccdc:	f7f1 fb94 	bl	800e408 <lwip_setsockopt>
				   sizeof(int));
		setsockopt(sock, IPPROTO_TCP, TCP_KEEPCNT, &keepCount, sizeof(int));
 801cce0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cce4:	2204      	movs	r2, #4
 801cce6:	9200      	str	r2, [sp, #0]
 801cce8:	2205      	movs	r2, #5
 801ccea:	2106      	movs	r1, #6
 801ccec:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801ccf0:	f7f1 fb8a 	bl	800e408 <lwip_setsockopt>
		// Convert ip address to string
		if (source_addr.ss_family == PF_INET)
 801ccf4:	7b7b      	ldrb	r3, [r7, #13]
 801ccf6:	2b02      	cmp	r3, #2
 801ccf8:	d108      	bne.n	801cd0c <ev_tcp_server_data_task+0x15c>
		{
			inet_ntoa_r(((struct sockaddr_in *)&source_addr)->sin_addr,
 801ccfa:	f107 030c 	add.w	r3, r7, #12
 801ccfe:	3304      	adds	r3, #4
 801cd00:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801cd04:	227f      	movs	r2, #127	; 0x7f
 801cd06:	4618      	mov	r0, r3
 801cd08:	f7fe fc74 	bl	801b5f4 <ip4addr_ntoa_r>
						addr_str, sizeof(addr_str) - 1);
		}
		// printf( "Socket accepted ip address: %s", addr_str);
		do_send_data(sock);
 801cd0c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801cd10:	f7ff fde0 	bl	801c8d4 <do_send_data>
		close(sock);
 801cd14:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801cd18:	f7f0 fc82 	bl	800d620 <lwip_close>
		vTaskDelay(1);
 801cd1c:	2001      	movs	r0, #1
 801cd1e:	f7ec f8ef 	bl	8008f00 <vTaskDelay>
	{
 801cd22:	e7ad      	b.n	801cc80 <ev_tcp_server_data_task+0xd0>
		goto CLEAN_UP;
 801cd24:	bf00      	nop
 801cd26:	e002      	b.n	801cd2e <ev_tcp_server_data_task+0x17e>
		goto CLEAN_UP;
 801cd28:	bf00      	nop
 801cd2a:	e000      	b.n	801cd2e <ev_tcp_server_data_task+0x17e>
			break;
 801cd2c:	bf00      	nop
	}
CLEAN_UP:
	close(listen_sock);
 801cd2e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801cd32:	f7f0 fc75 	bl	800d620 <lwip_close>
	vTaskDelete(NULL);
 801cd36:	2000      	movs	r0, #0
 801cd38:	f7ec f870 	bl	8008e1c <vTaskDelete>
}
 801cd3c:	37d8      	adds	r7, #216	; 0xd8
 801cd3e:	46bd      	mov	sp, r7
 801cd40:	bd80      	pop	{r7, pc}

0801cd42 <app_read_sensor_task>:

void app_read_sensor_task(void *arg)
{
 801cd42:	b480      	push	{r7}
 801cd44:	b085      	sub	sp, #20
 801cd46:	af00      	add	r7, sp, #0
 801cd48:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)arg;
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	60fb      	str	r3, [r7, #12]
	if (htim->Instance == htim2.Instance)
	{
	}
}
 801cd4e:	bf00      	nop
 801cd50:	3714      	adds	r7, #20
 801cd52:	46bd      	mov	sp, r7
 801cd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd58:	4770      	bx	lr
	...

0801cd5c <__io_putchar>:

/********************** Exported Function Definitions *************************/

QueueHandle_t shell_queue_send;

uint8_t __io_putchar(uint8_t ch){
 801cd5c:	b580      	push	{r7, lr}
 801cd5e:	b082      	sub	sp, #8
 801cd60:	af00      	add	r7, sp, #0
 801cd62:	4603      	mov	r3, r0
 801cd64:	71fb      	strb	r3, [r7, #7]
	xQueueSend(shell_queue_send,&ch,(TickType_t)100);
 801cd66:	4b06      	ldr	r3, [pc, #24]	; (801cd80 <__io_putchar+0x24>)
 801cd68:	6818      	ldr	r0, [r3, #0]
 801cd6a:	1df9      	adds	r1, r7, #7
 801cd6c:	2300      	movs	r3, #0
 801cd6e:	2264      	movs	r2, #100	; 0x64
 801cd70:	f7ea fffa 	bl	8007d68 <xQueueGenericSend>
	return ch;
 801cd74:	79fb      	ldrb	r3, [r7, #7]
}
 801cd76:	4618      	mov	r0, r3
 801cd78:	3708      	adds	r7, #8
 801cd7a:	46bd      	mov	sp, r7
 801cd7c:	bd80      	pop	{r7, pc}
 801cd7e:	bf00      	nop
 801cd80:	2000c2c0 	.word	0x2000c2c0

0801cd84 <shell_printf>:
#define default_buff_size 1024
int shell_printf(const char *format, ...){
 801cd84:	b40f      	push	{r0, r1, r2, r3}
 801cd86:	b580      	push	{r7, lr}
 801cd88:	b084      	sub	sp, #16
 801cd8a:	af00      	add	r7, sp, #0
	va_list args;
	char *buff = (char*) malloc(default_buff_size);
 801cd8c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801cd90:	f001 feae 	bl	801eaf0 <malloc>
 801cd94:	4603      	mov	r3, r0
 801cd96:	60bb      	str	r3, [r7, #8]
	memset(buff, 0, default_buff_size);
 801cd98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801cd9c:	2100      	movs	r1, #0
 801cd9e:	68b8      	ldr	r0, [r7, #8]
 801cda0:	f001 feec 	bl	801eb7c <memset>
	va_start(args, format);
 801cda4:	f107 031c 	add.w	r3, r7, #28
 801cda8:	603b      	str	r3, [r7, #0]
	vsprintf(buff, format, args);
 801cdaa:	683a      	ldr	r2, [r7, #0]
 801cdac:	69b9      	ldr	r1, [r7, #24]
 801cdae:	68b8      	ldr	r0, [r7, #8]
 801cdb0:	f002 ff3c 	bl	801fc2c <vsiprintf>

	int len = strlen(buff);
 801cdb4:	68b8      	ldr	r0, [r7, #8]
 801cdb6:	f7e3 fa0b 	bl	80001d0 <strlen>
 801cdba:	4603      	mov	r3, r0
 801cdbc:	607b      	str	r3, [r7, #4]

	for(uint16_t i = 0;i<len;i++)
 801cdbe:	2300      	movs	r3, #0
 801cdc0:	81fb      	strh	r3, [r7, #14]
 801cdc2:	e009      	b.n	801cdd8 <shell_printf+0x54>
		__io_putchar(buff[i]);
 801cdc4:	89fb      	ldrh	r3, [r7, #14]
 801cdc6:	68ba      	ldr	r2, [r7, #8]
 801cdc8:	4413      	add	r3, r2
 801cdca:	781b      	ldrb	r3, [r3, #0]
 801cdcc:	4618      	mov	r0, r3
 801cdce:	f7ff ffc5 	bl	801cd5c <__io_putchar>
	for(uint16_t i = 0;i<len;i++)
 801cdd2:	89fb      	ldrh	r3, [r7, #14]
 801cdd4:	3301      	adds	r3, #1
 801cdd6:	81fb      	strh	r3, [r7, #14]
 801cdd8:	89fb      	ldrh	r3, [r7, #14]
 801cdda:	687a      	ldr	r2, [r7, #4]
 801cddc:	429a      	cmp	r2, r3
 801cdde:	dcf1      	bgt.n	801cdc4 <shell_printf+0x40>
	free(buff);
 801cde0:	68b8      	ldr	r0, [r7, #8]
 801cde2:	f001 fe8d 	bl	801eb00 <free>
	return len;
 801cde6:	687b      	ldr	r3, [r7, #4]
}
 801cde8:	4618      	mov	r0, r3
 801cdea:	3710      	adds	r7, #16
 801cdec:	46bd      	mov	sp, r7
 801cdee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801cdf2:	b004      	add	sp, #16
 801cdf4:	4770      	bx	lr

0801cdf6 <user_put_char>:
int user_put_char(uint8_t *buf, uint32_t len) {
 801cdf6:	b580      	push	{r7, lr}
 801cdf8:	b082      	sub	sp, #8
 801cdfa:	af00      	add	r7, sp, #0
 801cdfc:	6078      	str	r0, [r7, #4]
 801cdfe:	6039      	str	r1, [r7, #0]
	return __io_putchar(*buf);
 801ce00:	687b      	ldr	r3, [r7, #4]
 801ce02:	781b      	ldrb	r3, [r3, #0]
 801ce04:	4618      	mov	r0, r3
 801ce06:	f7ff ffa9 	bl	801cd5c <__io_putchar>
 801ce0a:	4603      	mov	r3, r0
}
 801ce0c:	4618      	mov	r0, r3
 801ce0e:	3708      	adds	r7, #8
 801ce10:	46bd      	mov	sp, r7
 801ce12:	bd80      	pop	{r7, pc}

0801ce14 <user_get_char>:

int user_get_char(uint8_t *buf, uint32_t len) {
 801ce14:	b580      	push	{r7, lr}
 801ce16:	b084      	sub	sp, #16
 801ce18:	af00      	add	r7, sp, #0
 801ce1a:	6078      	str	r0, [r7, #4]
 801ce1c:	6039      	str	r1, [r7, #0]
	uint8_t ch = __io_getchar();
 801ce1e:	f000 fea7 	bl	801db70 <__io_getchar>
 801ce22:	4603      	mov	r3, r0
 801ce24:	73fb      	strb	r3, [r7, #15]
	*buf = ch;
 801ce26:	687b      	ldr	r3, [r7, #4]
 801ce28:	7bfa      	ldrb	r2, [r7, #15]
 801ce2a:	701a      	strb	r2, [r3, #0]
	return ch;
 801ce2c:	7bfb      	ldrb	r3, [r7, #15]
}
 801ce2e:	4618      	mov	r0, r3
 801ce30:	3710      	adds	r7, #16
 801ce32:	46bd      	mov	sp, r7
 801ce34:	bd80      	pop	{r7, pc}
	...

0801ce38 <cli_app_start>:

void cli_app_start(void) {
 801ce38:	b580      	push	{r7, lr}
 801ce3a:	b084      	sub	sp, #16
 801ce3c:	af02      	add	r7, sp, #8
	retarget_init();
 801ce3e:	f000 fe63 	bl	801db08 <retarget_init>
	shell_queue_send = xQueueCreate(1024,sizeof(uint8_t));
 801ce42:	2200      	movs	r2, #0
 801ce44:	2101      	movs	r1, #1
 801ce46:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801ce4a:	f7ea fe0f 	bl	8007a6c <xQueueGenericCreate>
 801ce4e:	4603      	mov	r3, r0
 801ce50:	4a11      	ldr	r2, [pc, #68]	; (801ce98 <cli_app_start+0x60>)
 801ce52:	6013      	str	r3, [r2, #0]
	if(shell_queue_send == NULL) return;
 801ce54:	4b10      	ldr	r3, [pc, #64]	; (801ce98 <cli_app_start+0x60>)
 801ce56:	681b      	ldr	r3, [r3, #0]
 801ce58:	2b00      	cmp	r3, #0
 801ce5a:	d018      	beq.n	801ce8e <cli_app_start+0x56>

	SHELL_Init(&user_context, user_put_char, user_get_char, shell_printf, ">");
 801ce5c:	4b0f      	ldr	r3, [pc, #60]	; (801ce9c <cli_app_start+0x64>)
 801ce5e:	9300      	str	r3, [sp, #0]
 801ce60:	4b0f      	ldr	r3, [pc, #60]	; (801cea0 <cli_app_start+0x68>)
 801ce62:	4a10      	ldr	r2, [pc, #64]	; (801cea4 <cli_app_start+0x6c>)
 801ce64:	4910      	ldr	r1, [pc, #64]	; (801cea8 <cli_app_start+0x70>)
 801ce66:	4811      	ldr	r0, [pc, #68]	; (801ceac <cli_app_start+0x74>)
 801ce68:	f000 fedc 	bl	801dc24 <SHELL_Init>

	/* Register CLI commands */
	for (int i = 0;
 801ce6c:	2300      	movs	r3, #0
 801ce6e:	607b      	str	r3, [r7, #4]
 801ce70:	e009      	b.n	801ce86 <cli_app_start+0x4e>
			i < sizeof(cli_command_table) / sizeof(shell_command_context_t);
			i++) {
		SHELL_RegisterCommand(&cli_command_table[i]);
 801ce72:	687b      	ldr	r3, [r7, #4]
 801ce74:	011b      	lsls	r3, r3, #4
 801ce76:	4a0e      	ldr	r2, [pc, #56]	; (801ceb0 <cli_app_start+0x78>)
 801ce78:	4413      	add	r3, r2
 801ce7a:	4618      	mov	r0, r3
 801ce7c:	f001 fc6c 	bl	801e758 <SHELL_RegisterCommand>
			i++) {
 801ce80:	687b      	ldr	r3, [r7, #4]
 801ce82:	3301      	adds	r3, #1
 801ce84:	607b      	str	r3, [r7, #4]
	for (int i = 0;
 801ce86:	687b      	ldr	r3, [r7, #4]
 801ce88:	2b00      	cmp	r3, #0
 801ce8a:	d0f2      	beq.n	801ce72 <cli_app_start+0x3a>
 801ce8c:	e000      	b.n	801ce90 <cli_app_start+0x58>
	if(shell_queue_send == NULL) return;
 801ce8e:	bf00      	nop
	}
}
 801ce90:	3708      	adds	r7, #8
 801ce92:	46bd      	mov	sp, r7
 801ce94:	bd80      	pop	{r7, pc}
 801ce96:	bf00      	nop
 801ce98:	2000c2c0 	.word	0x2000c2c0
 801ce9c:	08025774 	.word	0x08025774
 801cea0:	0801cd85 	.word	0x0801cd85
 801cea4:	0801ce15 	.word	0x0801ce15
 801cea8:	0801cdf7 	.word	0x0801cdf7
 801ceac:	2000c1a4 	.word	0x2000c1a4
 801ceb0:	08025adc 	.word	0x08025adc

0801ceb4 <cli_app_main_loop>:

void cli_app_main_loop(void *pvParameters) {
 801ceb4:	b580      	push	{r7, lr}
 801ceb6:	b082      	sub	sp, #8
 801ceb8:	af00      	add	r7, sp, #0
 801ceba:	6078      	str	r0, [r7, #4]
	SHELL_Process(&user_context);
 801cebc:	4803      	ldr	r0, [pc, #12]	; (801cecc <cli_app_main_loop+0x18>)
 801cebe:	f000 ff03 	bl	801dcc8 <SHELL_Process>
}
 801cec2:	bf00      	nop
 801cec4:	3708      	adds	r7, #8
 801cec6:	46bd      	mov	sp, r7
 801cec8:	bd80      	pop	{r7, pc}
 801ceca:	bf00      	nop
 801cecc:	2000c1a4 	.word	0x2000c1a4

0801ced0 <cli_app_on_data_received>:

void cli_app_on_data_received(uint8_t ch) {
 801ced0:	b580      	push	{r7, lr}
 801ced2:	b082      	sub	sp, #8
 801ced4:	af00      	add	r7, sp, #0
 801ced6:	4603      	mov	r3, r0
 801ced8:	71fb      	strb	r3, [r7, #7]
	on_uart_data_received(ch);
 801ceda:	79fb      	ldrb	r3, [r7, #7]
 801cedc:	4618      	mov	r0, r3
 801cede:	f000 fe59 	bl	801db94 <on_uart_data_received>
}
 801cee2:	bf00      	nop
 801cee4:	3708      	adds	r7, #8
 801cee6:	46bd      	mov	sp, r7
 801cee8:	bd80      	pop	{r7, pc}

0801ceea <cli_reset_system>:

/********************** Internal Function Definitions *************************/

/* Reset System */
static int32_t cli_reset_system(p_shell_context_t context, int32_t argc,
		char **argv) {
 801ceea:	b480      	push	{r7}
 801ceec:	b085      	sub	sp, #20
 801ceee:	af00      	add	r7, sp, #0
 801cef0:	60f8      	str	r0, [r7, #12]
 801cef2:	60b9      	str	r1, [r7, #8]
 801cef4:	607a      	str	r2, [r7, #4]
	if (argc < 1) {
 801cef6:	68bb      	ldr	r3, [r7, #8]
 801cef8:	2b00      	cmp	r3, #0
 801cefa:	dc02      	bgt.n	801cf02 <cli_reset_system+0x18>
		//printf("Missing parameter\r\n");
		return -1;
 801cefc:	f04f 33ff 	mov.w	r3, #4294967295
 801cf00:	e000      	b.n	801cf04 <cli_reset_system+0x1a>
	}
	//printf("sys reset\r\n");
	return 0;
 801cf02:	2300      	movs	r3, #0
}
 801cf04:	4618      	mov	r0, r3
 801cf06:	3714      	adds	r7, #20
 801cf08:	46bd      	mov	sp, r7
 801cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf0e:	4770      	bx	lr

0801cf10 <setting_app>:

static void ev_tcp_server_config_task(void *arg);
static void do_retransmit(const int sock);
static void transmit_data(void* arg);
static void send_tcp(const int sock,char* buff,uint16_t len);
void setting_app(){
 801cf10:	b580      	push	{r7, lr}
 801cf12:	b082      	sub	sp, #8
 801cf14:	af02      	add	r7, sp, #8

	tranmiter_semphr = xSemaphoreCreateMutex();
 801cf16:	2001      	movs	r0, #1
 801cf18:	f7ea fe1f 	bl	8007b5a <xQueueCreateMutex>
 801cf1c:	4603      	mov	r3, r0
 801cf1e:	4a08      	ldr	r2, [pc, #32]	; (801cf40 <setting_app+0x30>)
 801cf20:	6013      	str	r3, [r2, #0]

	xTaskCreate(ev_tcp_server_config_task, "tcp server_st", 1024, NULL,
 801cf22:	4b08      	ldr	r3, [pc, #32]	; (801cf44 <setting_app+0x34>)
 801cf24:	9301      	str	r3, [sp, #4]
 801cf26:	2337      	movs	r3, #55	; 0x37
 801cf28:	9300      	str	r3, [sp, #0]
 801cf2a:	2300      	movs	r3, #0
 801cf2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801cf30:	4905      	ldr	r1, [pc, #20]	; (801cf48 <setting_app+0x38>)
 801cf32:	4806      	ldr	r0, [pc, #24]	; (801cf4c <setting_app+0x3c>)
 801cf34:	f7eb fe17 	bl	8008b66 <xTaskCreate>
			configMAX_PRIORITIES - 1, &ev_tcp_server_setting_handle);
}
 801cf38:	bf00      	nop
 801cf3a:	46bd      	mov	sp, r7
 801cf3c:	bd80      	pop	{r7, pc}
 801cf3e:	bf00      	nop
 801cf40:	2000c2c4 	.word	0x2000c2c4
 801cf44:	2000c2c8 	.word	0x2000c2c8
 801cf48:	08025778 	.word	0x08025778
 801cf4c:	0801d049 	.word	0x0801d049

0801cf50 <do_retransmit>:

static void do_retransmit(const int sock)
{
 801cf50:	b580      	push	{r7, lr}
 801cf52:	b0a8      	sub	sp, #160	; 0xa0
 801cf54:	af02      	add	r7, sp, #8
 801cf56:	6078      	str	r0, [r7, #4]

    int len;
    char rx_buffer[128];
    int p_sock = sock;
 801cf58:	687b      	ldr	r3, [r7, #4]
 801cf5a:	60bb      	str	r3, [r7, #8]
    xTaskCreate(transmit_data,"transmit", 1024,(void*)&p_sock,configMAX_PRIORITIES, &tranmiter_handle);
 801cf5c:	f107 0308 	add.w	r3, r7, #8
 801cf60:	4a32      	ldr	r2, [pc, #200]	; (801d02c <do_retransmit+0xdc>)
 801cf62:	9201      	str	r2, [sp, #4]
 801cf64:	2238      	movs	r2, #56	; 0x38
 801cf66:	9200      	str	r2, [sp, #0]
 801cf68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801cf6c:	4930      	ldr	r1, [pc, #192]	; (801d030 <do_retransmit+0xe0>)
 801cf6e:	4831      	ldr	r0, [pc, #196]	; (801d034 <do_retransmit+0xe4>)
 801cf70:	f7eb fdf9 	bl	8008b66 <xTaskCreate>

    shell_context_struct *context = &user_context;
 801cf74:	4b30      	ldr	r3, [pc, #192]	; (801d038 <do_retransmit+0xe8>)
 801cf76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    context->exit = false;
 801cf7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cf7e:	2200      	movs	r2, #0
 801cf80:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    context->printf_data_func("\r\nSHELL (build: %s)\r\n", __DATE__);
 801cf84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cf88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cf8a:	492c      	ldr	r1, [pc, #176]	; (801d03c <do_retransmit+0xec>)
 801cf8c:	482c      	ldr	r0, [pc, #176]	; (801d040 <do_retransmit+0xf0>)
 801cf8e:	4798      	blx	r3
    context->printf_data_func("Copyright (c) 2022 Technology\r\n");
 801cf90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cf94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cf96:	482b      	ldr	r0, [pc, #172]	; (801d044 <do_retransmit+0xf4>)
 801cf98:	4798      	blx	r3
    context->printf_data_func(context->prompt);
 801cf9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cf9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cfa0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801cfa4:	6812      	ldr	r2, [r2, #0]
 801cfa6:	4610      	mov	r0, r2
 801cfa8:	4798      	blx	r3

    do {
        len = recv(sock, rx_buffer, sizeof(rx_buffer) - 1, 0);
 801cfaa:	f107 010c 	add.w	r1, r7, #12
 801cfae:	2300      	movs	r3, #0
 801cfb0:	227f      	movs	r2, #127	; 0x7f
 801cfb2:	6878      	ldr	r0, [r7, #4]
 801cfb4:	f7f0 fef4 	bl	800dda0 <lwip_recv>
 801cfb8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        if (len < 0) {
 801cfbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801cfc0:	2b00      	cmp	r3, #0
 801cfc2:	db26      	blt.n	801d012 <do_retransmit+0xc2>
            //printf( "Error occurred during receiving: errno %d", errno);
        } else if (len == 0) {
 801cfc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801cfc8:	2b00      	cmp	r3, #0
 801cfca:	d022      	beq.n	801d012 <do_retransmit+0xc2>
            //printf( "Connection closed");
        } else {
            rx_buffer[len] = 0; // Null-terminate whatever is received and treat it like a string
 801cfcc:	f107 020c 	add.w	r2, r7, #12
 801cfd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801cfd4:	4413      	add	r3, r2
 801cfd6:	2200      	movs	r2, #0
 801cfd8:	701a      	strb	r2, [r3, #0]
            //printf( "Received %d bytes: %s", len, rx_buffer);
            // send() can return less bytes than supplied length.
            // Walk-around for robust implementation.
//            send_tcp(sock, rx_buffer, len);
            for(uint16_t i =0;i<len;i++){
 801cfda:	2300      	movs	r3, #0
 801cfdc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 801cfe0:	e011      	b.n	801d006 <do_retransmit+0xb6>
            	cli_app_on_data_received(rx_buffer[i]);
 801cfe2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801cfe6:	f107 0298 	add.w	r2, r7, #152	; 0x98
 801cfea:	4413      	add	r3, r2
 801cfec:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 801cff0:	4618      	mov	r0, r3
 801cff2:	f7ff ff6d 	bl	801ced0 <cli_app_on_data_received>
            	cli_app_main_loop(NULL);
 801cff6:	2000      	movs	r0, #0
 801cff8:	f7ff ff5c 	bl	801ceb4 <cli_app_main_loop>
            for(uint16_t i =0;i<len;i++){
 801cffc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801d000:	3301      	adds	r3, #1
 801d002:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 801d006:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801d00a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801d00e:	429a      	cmp	r2, r3
 801d010:	dce7      	bgt.n	801cfe2 <do_retransmit+0x92>
            }
        }
    } while (len > 0);
 801d012:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801d016:	2b00      	cmp	r3, #0
 801d018:	dcc7      	bgt.n	801cfaa <do_retransmit+0x5a>
    vTaskDelete(tranmiter_handle);
 801d01a:	4b04      	ldr	r3, [pc, #16]	; (801d02c <do_retransmit+0xdc>)
 801d01c:	681b      	ldr	r3, [r3, #0]
 801d01e:	4618      	mov	r0, r3
 801d020:	f7eb fefc 	bl	8008e1c <vTaskDelete>
}
 801d024:	bf00      	nop
 801d026:	3798      	adds	r7, #152	; 0x98
 801d028:	46bd      	mov	sp, r7
 801d02a:	bd80      	pop	{r7, pc}
 801d02c:	2000c2cc 	.word	0x2000c2cc
 801d030:	08025788 	.word	0x08025788
 801d034:	0801d1e1 	.word	0x0801d1e1
 801d038:	2000c1a4 	.word	0x2000c1a4
 801d03c:	08025794 	.word	0x08025794
 801d040:	080257a0 	.word	0x080257a0
 801d044:	080257b8 	.word	0x080257b8

0801d048 <ev_tcp_server_config_task>:

static void ev_tcp_server_config_task(void *arg) {
 801d048:	b580      	push	{r7, lr}
 801d04a:	b0b8      	sub	sp, #224	; 0xe0
 801d04c:	af02      	add	r7, sp, #8
 801d04e:	6078      	str	r0, [r7, #4]

	cli_app_start();
 801d050:	f7ff fef2 	bl	801ce38 <cli_app_start>
    char addr_str[128];
    int addr_family = (int)AF_INET;
 801d054:	2302      	movs	r3, #2
 801d056:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    int ip_protocol = 0;
 801d05a:	2300      	movs	r3, #0
 801d05c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    int keepAlive = 1;
 801d060:	2301      	movs	r3, #1
 801d062:	63fb      	str	r3, [r7, #60]	; 0x3c
    int keepIdle = KEEPALIVE_IDLE;
 801d064:	2305      	movs	r3, #5
 801d066:	63bb      	str	r3, [r7, #56]	; 0x38
    int keepInterval = KEEPALIVE_INTERVAL;
 801d068:	2305      	movs	r3, #5
 801d06a:	637b      	str	r3, [r7, #52]	; 0x34
    int keepCount = KEEPALIVE_COUNT;
 801d06c:	2301      	movs	r3, #1
 801d06e:	633b      	str	r3, [r7, #48]	; 0x30
    struct sockaddr_storage dest_addr;

    if (addr_family == AF_INET) {
 801d070:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801d074:	2b02      	cmp	r3, #2
 801d076:	d11a      	bne.n	801d0ae <ev_tcp_server_config_task+0x66>
        struct sockaddr_in *dest_addr_ip4 = (struct sockaddr_in *)&dest_addr;
 801d078:	f107 0320 	add.w	r3, r7, #32
 801d07c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        dest_addr_ip4->sin_addr.s_addr = htonl(INADDR_ANY);
 801d080:	2000      	movs	r0, #0
 801d082:	f7f1 fd7a 	bl	800eb7a <lwip_htonl>
 801d086:	4602      	mov	r2, r0
 801d088:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801d08c:	605a      	str	r2, [r3, #4]
        dest_addr_ip4->sin_family = AF_INET;
 801d08e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801d092:	2202      	movs	r2, #2
 801d094:	705a      	strb	r2, [r3, #1]
        dest_addr_ip4->sin_port = htons(PORT_SETTING);
 801d096:	f240 40d2 	movw	r0, #1234	; 0x4d2
 801d09a:	f7f1 fd59 	bl	800eb50 <lwip_htons>
 801d09e:	4603      	mov	r3, r0
 801d0a0:	461a      	mov	r2, r3
 801d0a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801d0a6:	805a      	strh	r2, [r3, #2]
        ip_protocol = IPPROTO_IP;
 801d0a8:	2300      	movs	r3, #0
 801d0aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }

    int listen_sock = socket(addr_family, SOCK_STREAM, ip_protocol);
 801d0ae:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801d0b2:	2101      	movs	r1, #1
 801d0b4:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 801d0b8:	f7f0 ff98 	bl	800dfec <lwip_socket>
 801d0bc:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if (listen_sock < 0) {
 801d0c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801d0c4:	2b00      	cmp	r3, #0
 801d0c6:	da03      	bge.n	801d0d0 <ev_tcp_server_config_task+0x88>
        //printf( "Unable to create socket: errno %d", errno);
        vTaskDelete(NULL);
 801d0c8:	2000      	movs	r0, #0
 801d0ca:	f7eb fea7 	bl	8008e1c <vTaskDelete>
 801d0ce:	e083      	b.n	801d1d8 <ev_tcp_server_config_task+0x190>
        return;
    }

    int opt = 1;
 801d0d0:	2301      	movs	r3, #1
 801d0d2:	61fb      	str	r3, [r7, #28]
    setsockopt(listen_sock, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));
 801d0d4:	f107 031c 	add.w	r3, r7, #28
 801d0d8:	2204      	movs	r2, #4
 801d0da:	9200      	str	r2, [sp, #0]
 801d0dc:	2204      	movs	r2, #4
 801d0de:	f640 71ff 	movw	r1, #4095	; 0xfff
 801d0e2:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801d0e6:	f7f1 f98f 	bl	800e408 <lwip_setsockopt>

    int err = bind(listen_sock, (struct sockaddr *)&dest_addr, sizeof(dest_addr));
 801d0ea:	f107 0320 	add.w	r3, r7, #32
 801d0ee:	2210      	movs	r2, #16
 801d0f0:	4619      	mov	r1, r3
 801d0f2:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801d0f6:	f7f0 fa25 	bl	800d544 <lwip_bind>
 801d0fa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    if (err != 0) {
 801d0fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801d102:	2b00      	cmp	r3, #0
 801d104:	d15c      	bne.n	801d1c0 <ev_tcp_server_config_task+0x178>
        //printf( "IPPROTO: %d", addr_family);
        goto CLEAN_UP;
    }
    //printf( "Socket bound, port %d", PORT_SETTING);

    err = listen(listen_sock, 1);
 801d106:	2101      	movs	r1, #1
 801d108:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801d10c:	f7f0 fade 	bl	800d6cc <lwip_listen>
 801d110:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    if (err != 0) {
 801d114:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801d118:	2b00      	cmp	r3, #0
 801d11a:	d153      	bne.n	801d1c4 <ev_tcp_server_config_task+0x17c>
        goto CLEAN_UP;
    }
	for (;;) {
        //printf( "Socket listening");
        struct sockaddr_storage source_addr; // Large enough for both IPv4 or IPv6
        socklen_t addr_len = sizeof(source_addr);
 801d11c:	2310      	movs	r3, #16
 801d11e:	60bb      	str	r3, [r7, #8]
        int sock = accept(listen_sock, (struct sockaddr *)&source_addr, &addr_len);
 801d120:	f107 0208 	add.w	r2, r7, #8
 801d124:	f107 030c 	add.w	r3, r7, #12
 801d128:	4619      	mov	r1, r3
 801d12a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801d12e:	f7f0 f8eb 	bl	800d308 <lwip_accept>
 801d132:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
        if (sock < 0) {
 801d136:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801d13a:	2b00      	cmp	r3, #0
 801d13c:	db44      	blt.n	801d1c8 <ev_tcp_server_config_task+0x180>
            //printf( "Unable to accept connection: errno %d", errno);
            break;
        }
        // Set tcp keepalive option
        setsockopt(sock, SOL_SOCKET, SO_KEEPALIVE, &keepAlive, sizeof(int));
 801d13e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801d142:	2204      	movs	r2, #4
 801d144:	9200      	str	r2, [sp, #0]
 801d146:	2208      	movs	r2, #8
 801d148:	f640 71ff 	movw	r1, #4095	; 0xfff
 801d14c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801d150:	f7f1 f95a 	bl	800e408 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPIDLE, &keepIdle, sizeof(int));
 801d154:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d158:	2204      	movs	r2, #4
 801d15a:	9200      	str	r2, [sp, #0]
 801d15c:	2203      	movs	r2, #3
 801d15e:	2106      	movs	r1, #6
 801d160:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801d164:	f7f1 f950 	bl	800e408 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPINTVL, &keepInterval, sizeof(int));
 801d168:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801d16c:	2204      	movs	r2, #4
 801d16e:	9200      	str	r2, [sp, #0]
 801d170:	2204      	movs	r2, #4
 801d172:	2106      	movs	r1, #6
 801d174:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801d178:	f7f1 f946 	bl	800e408 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPCNT, &keepCount, sizeof(int));
 801d17c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d180:	2204      	movs	r2, #4
 801d182:	9200      	str	r2, [sp, #0]
 801d184:	2205      	movs	r2, #5
 801d186:	2106      	movs	r1, #6
 801d188:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801d18c:	f7f1 f93c 	bl	800e408 <lwip_setsockopt>
        // Convert ip address to string
        if (source_addr.ss_family == PF_INET) {
 801d190:	7b7b      	ldrb	r3, [r7, #13]
 801d192:	2b02      	cmp	r3, #2
 801d194:	d108      	bne.n	801d1a8 <ev_tcp_server_config_task+0x160>
            inet_ntoa_r(((struct sockaddr_in *)&source_addr)->sin_addr, addr_str, sizeof(addr_str) - 1);
 801d196:	f107 030c 	add.w	r3, r7, #12
 801d19a:	3304      	adds	r3, #4
 801d19c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801d1a0:	227f      	movs	r2, #127	; 0x7f
 801d1a2:	4618      	mov	r0, r3
 801d1a4:	f7fe fa26 	bl	801b5f4 <ip4addr_ntoa_r>
        }
        //printf( "Socket accepted ip address: %s", addr_str);
        do_retransmit(sock);
 801d1a8:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801d1ac:	f7ff fed0 	bl	801cf50 <do_retransmit>
        close(sock);
 801d1b0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801d1b4:	f7f0 fa34 	bl	800d620 <lwip_close>
		vTaskDelay(1);
 801d1b8:	2001      	movs	r0, #1
 801d1ba:	f7eb fea1 	bl	8008f00 <vTaskDelay>
	for (;;) {
 801d1be:	e7ad      	b.n	801d11c <ev_tcp_server_config_task+0xd4>
        goto CLEAN_UP;
 801d1c0:	bf00      	nop
 801d1c2:	e002      	b.n	801d1ca <ev_tcp_server_config_task+0x182>
        goto CLEAN_UP;
 801d1c4:	bf00      	nop
 801d1c6:	e000      	b.n	801d1ca <ev_tcp_server_config_task+0x182>
            break;
 801d1c8:	bf00      	nop
	}
CLEAN_UP:
    close(listen_sock);
 801d1ca:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801d1ce:	f7f0 fa27 	bl	800d620 <lwip_close>
    vTaskDelete(NULL);
 801d1d2:	2000      	movs	r0, #0
 801d1d4:	f7eb fe22 	bl	8008e1c <vTaskDelete>
}
 801d1d8:	37d8      	adds	r7, #216	; 0xd8
 801d1da:	46bd      	mov	sp, r7
 801d1dc:	bd80      	pop	{r7, pc}
	...

0801d1e0 <transmit_data>:
static void transmit_data(void* arg){
 801d1e0:	b580      	push	{r7, lr}
 801d1e2:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 801d1e6:	af00      	add	r7, sp, #0
 801d1e8:	1d3b      	adds	r3, r7, #4
 801d1ea:	6018      	str	r0, [r3, #0]

	int* sock = (int*)arg;
 801d1ec:	1d3b      	adds	r3, r7, #4
 801d1ee:	681b      	ldr	r3, [r3, #0]
 801d1f0:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	uint8_t buff[1024];
	uint16_t len = 0;
 801d1f4:	2300      	movs	r3, #0
 801d1f6:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	for(;;){
		if(xQueueReceive(shell_queue_send,buff+len,(TickType_t)100) == pdPASS){
 801d1fa:	4b13      	ldr	r3, [pc, #76]	; (801d248 <transmit_data+0x68>)
 801d1fc:	6818      	ldr	r0, [r3, #0]
 801d1fe:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 801d202:	f107 0208 	add.w	r2, r7, #8
 801d206:	4413      	add	r3, r2
 801d208:	2264      	movs	r2, #100	; 0x64
 801d20a:	4619      	mov	r1, r3
 801d20c:	f7ea ffd2 	bl	80081b4 <xQueueReceive>
 801d210:	4603      	mov	r3, r0
 801d212:	2b01      	cmp	r3, #1
 801d214:	d105      	bne.n	801d222 <transmit_data+0x42>
			len++;
 801d216:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 801d21a:	3301      	adds	r3, #1
 801d21c:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
 801d220:	e7eb      	b.n	801d1fa <transmit_data+0x1a>
		}
		else{
			if(len>0){
 801d222:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 801d226:	2b00      	cmp	r3, #0
 801d228:	d0e7      	beq.n	801d1fa <transmit_data+0x1a>
				send_tcp(*sock,(char*)buff,len);
 801d22a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 801d22e:	681b      	ldr	r3, [r3, #0]
 801d230:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 801d234:	f107 0108 	add.w	r1, r7, #8
 801d238:	4618      	mov	r0, r3
 801d23a:	f000 f807 	bl	801d24c <send_tcp>
				len = 0;
 801d23e:	2300      	movs	r3, #0
 801d240:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
		if(xQueueReceive(shell_queue_send,buff+len,(TickType_t)100) == pdPASS){
 801d244:	e7d9      	b.n	801d1fa <transmit_data+0x1a>
 801d246:	bf00      	nop
 801d248:	2000c2c0 	.word	0x2000c2c0

0801d24c <send_tcp>:
			}
		}
	}
}
static void send_tcp(const int sock,char* buff,uint16_t len){
 801d24c:	b580      	push	{r7, lr}
 801d24e:	b084      	sub	sp, #16
 801d250:	af00      	add	r7, sp, #0
 801d252:	60f8      	str	r0, [r7, #12]
 801d254:	60b9      	str	r1, [r7, #8]
 801d256:	4613      	mov	r3, r2
 801d258:	80fb      	strh	r3, [r7, #6]
    xSemaphoreTake(tranmiter_semphr,portMAX_DELAY);
 801d25a:	4b0c      	ldr	r3, [pc, #48]	; (801d28c <send_tcp+0x40>)
 801d25c:	681b      	ldr	r3, [r3, #0]
 801d25e:	f04f 31ff 	mov.w	r1, #4294967295
 801d262:	4618      	mov	r0, r3
 801d264:	f7eb f886 	bl	8008374 <xQueueSemaphoreTake>
    send(sock, buff,len, 0);
 801d268:	88fa      	ldrh	r2, [r7, #6]
 801d26a:	2300      	movs	r3, #0
 801d26c:	68b9      	ldr	r1, [r7, #8]
 801d26e:	68f8      	ldr	r0, [r7, #12]
 801d270:	f7f0 fdac 	bl	800ddcc <lwip_send>
    xSemaphoreGive(tranmiter_semphr);
 801d274:	4b05      	ldr	r3, [pc, #20]	; (801d28c <send_tcp+0x40>)
 801d276:	6818      	ldr	r0, [r3, #0]
 801d278:	2300      	movs	r3, #0
 801d27a:	2200      	movs	r2, #0
 801d27c:	2100      	movs	r1, #0
 801d27e:	f7ea fd73 	bl	8007d68 <xQueueGenericSend>
}
 801d282:	bf00      	nop
 801d284:	3710      	adds	r7, #16
 801d286:	46bd      	mov	sp, r7
 801d288:	bd80      	pop	{r7, pc}
 801d28a:	bf00      	nop
 801d28c:	2000c2c4 	.word	0x2000c2c4

0801d290 <board_init>:
BSP_GPIO mux_a[4];
BSP_GPIO mux_b[4];

extern SPI_HandleTypeDef hspi1;

void board_init(){
 801d290:	b580      	push	{r7, lr}
 801d292:	b082      	sub	sp, #8
 801d294:	af00      	add	r7, sp, #0
	gpio_init(&spi1_cs);
 801d296:	4839      	ldr	r0, [pc, #228]	; (801d37c <board_init+0xec>)
 801d298:	f000 f8a6 	bl	801d3e8 <gpio_init>
	gpio_init(&spi2_cs);
 801d29c:	4838      	ldr	r0, [pc, #224]	; (801d380 <board_init+0xf0>)
 801d29e:	f000 f8a3 	bl	801d3e8 <gpio_init>
	gpio_init(&adc_rs1);
 801d2a2:	4838      	ldr	r0, [pc, #224]	; (801d384 <board_init+0xf4>)
 801d2a4:	f000 f8a0 	bl	801d3e8 <gpio_init>
	gpio_init(&adc_busy1);
 801d2a8:	4837      	ldr	r0, [pc, #220]	; (801d388 <board_init+0xf8>)
 801d2aa:	f000 f89d 	bl	801d3e8 <gpio_init>
	gpio_init(&adc_cnv1);
 801d2ae:	4837      	ldr	r0, [pc, #220]	; (801d38c <board_init+0xfc>)
 801d2b0:	f000 f89a 	bl	801d3e8 <gpio_init>
	gpio_init(&adc_rs2);
 801d2b4:	4836      	ldr	r0, [pc, #216]	; (801d390 <board_init+0x100>)
 801d2b6:	f000 f897 	bl	801d3e8 <gpio_init>
	gpio_init(&adc_busy2);
 801d2ba:	4836      	ldr	r0, [pc, #216]	; (801d394 <board_init+0x104>)
 801d2bc:	f000 f894 	bl	801d3e8 <gpio_init>
	gpio_init(&adc_cnv2);
 801d2c0:	4835      	ldr	r0, [pc, #212]	; (801d398 <board_init+0x108>)
 801d2c2:	f000 f891 	bl	801d3e8 <gpio_init>
	spi_init(&spi1, &hspi1,&spi1_cs);
 801d2c6:	4a2d      	ldr	r2, [pc, #180]	; (801d37c <board_init+0xec>)
 801d2c8:	4934      	ldr	r1, [pc, #208]	; (801d39c <board_init+0x10c>)
 801d2ca:	4835      	ldr	r0, [pc, #212]	; (801d3a0 <board_init+0x110>)
 801d2cc:	f000 f8bd 	bl	801d44a <spi_init>
	spi_init(&spi2, &hspi1,&spi2_cs);
 801d2d0:	4a2b      	ldr	r2, [pc, #172]	; (801d380 <board_init+0xf0>)
 801d2d2:	4932      	ldr	r1, [pc, #200]	; (801d39c <board_init+0x10c>)
 801d2d4:	4833      	ldr	r0, [pc, #204]	; (801d3a4 <board_init+0x114>)
 801d2d6:	f000 f8b8 	bl	801d44a <spi_init>

	mux_a[0].p_driver = MUX_A1_GPIO_Port;
 801d2da:	4b33      	ldr	r3, [pc, #204]	; (801d3a8 <board_init+0x118>)
 801d2dc:	4a33      	ldr	r2, [pc, #204]	; (801d3ac <board_init+0x11c>)
 801d2de:	601a      	str	r2, [r3, #0]
	mux_a[0].pin = MUX_A1_Pin;
 801d2e0:	4b31      	ldr	r3, [pc, #196]	; (801d3a8 <board_init+0x118>)
 801d2e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801d2e6:	809a      	strh	r2, [r3, #4]

	mux_a[1].p_driver = MUX_A2_GPIO_Port;
 801d2e8:	4b2f      	ldr	r3, [pc, #188]	; (801d3a8 <board_init+0x118>)
 801d2ea:	4a30      	ldr	r2, [pc, #192]	; (801d3ac <board_init+0x11c>)
 801d2ec:	609a      	str	r2, [r3, #8]
	mux_a[1].pin = MUX_A2_Pin;
 801d2ee:	4b2e      	ldr	r3, [pc, #184]	; (801d3a8 <board_init+0x118>)
 801d2f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801d2f4:	819a      	strh	r2, [r3, #12]

	mux_a[2].p_driver = MUX_A3_GPIO_Port;
 801d2f6:	4b2c      	ldr	r3, [pc, #176]	; (801d3a8 <board_init+0x118>)
 801d2f8:	4a2d      	ldr	r2, [pc, #180]	; (801d3b0 <board_init+0x120>)
 801d2fa:	611a      	str	r2, [r3, #16]
	mux_a[2].pin = MUX_A3_Pin;
 801d2fc:	4b2a      	ldr	r3, [pc, #168]	; (801d3a8 <board_init+0x118>)
 801d2fe:	2202      	movs	r2, #2
 801d300:	829a      	strh	r2, [r3, #20]

	mux_a[3].p_driver = MUX_A4_GPIO_Port;
 801d302:	4b29      	ldr	r3, [pc, #164]	; (801d3a8 <board_init+0x118>)
 801d304:	4a2b      	ldr	r2, [pc, #172]	; (801d3b4 <board_init+0x124>)
 801d306:	619a      	str	r2, [r3, #24]
	mux_a[3].pin = MUX_A4_Pin;
 801d308:	4b27      	ldr	r3, [pc, #156]	; (801d3a8 <board_init+0x118>)
 801d30a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801d30e:	839a      	strh	r2, [r3, #28]

	mux_b[0].p_driver = MUX_B1_GPIO_Port;
 801d310:	4b29      	ldr	r3, [pc, #164]	; (801d3b8 <board_init+0x128>)
 801d312:	4a26      	ldr	r2, [pc, #152]	; (801d3ac <board_init+0x11c>)
 801d314:	601a      	str	r2, [r3, #0]
	mux_b[0].pin = MUX_B1_Pin;
 801d316:	4b28      	ldr	r3, [pc, #160]	; (801d3b8 <board_init+0x128>)
 801d318:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801d31c:	809a      	strh	r2, [r3, #4]

	mux_b[1].p_driver = MUX_B2_GPIO_Port;
 801d31e:	4b26      	ldr	r3, [pc, #152]	; (801d3b8 <board_init+0x128>)
 801d320:	4a23      	ldr	r2, [pc, #140]	; (801d3b0 <board_init+0x120>)
 801d322:	609a      	str	r2, [r3, #8]
	mux_b[1].pin = MUX_B2_Pin;
 801d324:	4b24      	ldr	r3, [pc, #144]	; (801d3b8 <board_init+0x128>)
 801d326:	2201      	movs	r2, #1
 801d328:	819a      	strh	r2, [r3, #12]

	mux_b[2].p_driver = MUX_B3_GPIO_Port;
 801d32a:	4b23      	ldr	r3, [pc, #140]	; (801d3b8 <board_init+0x128>)
 801d32c:	4a21      	ldr	r2, [pc, #132]	; (801d3b4 <board_init+0x124>)
 801d32e:	611a      	str	r2, [r3, #16]
	mux_b[2].pin = MUX_B3_Pin;
 801d330:	4b21      	ldr	r3, [pc, #132]	; (801d3b8 <board_init+0x128>)
 801d332:	2280      	movs	r2, #128	; 0x80
 801d334:	829a      	strh	r2, [r3, #20]

	mux_b[3].p_driver = MUX_B4_GPIO_Port;
 801d336:	4b20      	ldr	r3, [pc, #128]	; (801d3b8 <board_init+0x128>)
 801d338:	4a1e      	ldr	r2, [pc, #120]	; (801d3b4 <board_init+0x124>)
 801d33a:	619a      	str	r2, [r3, #24]
	mux_b[3].pin = MUX_B4_Pin;
 801d33c:	4b1e      	ldr	r3, [pc, #120]	; (801d3b8 <board_init+0x128>)
 801d33e:	f44f 7200 	mov.w	r2, #512	; 0x200
 801d342:	839a      	strh	r2, [r3, #28]

	for(uint16_t i = 0;i<4;i++){
 801d344:	2300      	movs	r3, #0
 801d346:	80fb      	strh	r3, [r7, #6]
 801d348:	e010      	b.n	801d36c <board_init+0xdc>
		gpio_init(&mux_a[i]);
 801d34a:	88fb      	ldrh	r3, [r7, #6]
 801d34c:	00db      	lsls	r3, r3, #3
 801d34e:	4a16      	ldr	r2, [pc, #88]	; (801d3a8 <board_init+0x118>)
 801d350:	4413      	add	r3, r2
 801d352:	4618      	mov	r0, r3
 801d354:	f000 f848 	bl	801d3e8 <gpio_init>
		gpio_init(&mux_b[i]);
 801d358:	88fb      	ldrh	r3, [r7, #6]
 801d35a:	00db      	lsls	r3, r3, #3
 801d35c:	4a16      	ldr	r2, [pc, #88]	; (801d3b8 <board_init+0x128>)
 801d35e:	4413      	add	r3, r2
 801d360:	4618      	mov	r0, r3
 801d362:	f000 f841 	bl	801d3e8 <gpio_init>
	for(uint16_t i = 0;i<4;i++){
 801d366:	88fb      	ldrh	r3, [r7, #6]
 801d368:	3301      	adds	r3, #1
 801d36a:	80fb      	strh	r3, [r7, #6]
 801d36c:	88fb      	ldrh	r3, [r7, #6]
 801d36e:	2b03      	cmp	r3, #3
 801d370:	d9eb      	bls.n	801d34a <board_init+0xba>
	}
}
 801d372:	bf00      	nop
 801d374:	bf00      	nop
 801d376:	3708      	adds	r7, #8
 801d378:	46bd      	mov	sp, r7
 801d37a:	bd80      	pop	{r7, pc}
 801d37c:	100000e8 	.word	0x100000e8
 801d380:	100000f0 	.word	0x100000f0
 801d384:	100000f8 	.word	0x100000f8
 801d388:	10000100 	.word	0x10000100
 801d38c:	10000108 	.word	0x10000108
 801d390:	10000110 	.word	0x10000110
 801d394:	10000118 	.word	0x10000118
 801d398:	10000120 	.word	0x10000120
 801d39c:	20001d6c 	.word	0x20001d6c
 801d3a0:	2000c318 	.word	0x2000c318
 801d3a4:	2000c2f0 	.word	0x2000c2f0
 801d3a8:	2000c2d0 	.word	0x2000c2d0
 801d3ac:	40021400 	.word	0x40021400
 801d3b0:	40021800 	.word	0x40021800
 801d3b4:	40021000 	.word	0x40021000
 801d3b8:	2000c2f8 	.word	0x2000c2f8

0801d3bc <bsp_delay_ms>:
void board_deinit(){

}
void bsp_delay_ms(unsigned long ms){
 801d3bc:	b580      	push	{r7, lr}
 801d3be:	b082      	sub	sp, #8
 801d3c0:	af00      	add	r7, sp, #0
 801d3c2:	6078      	str	r0, [r7, #4]
#if RTOS
	vTaskDelay(pdMS_TO_TICKS(ms));
 801d3c4:	687b      	ldr	r3, [r7, #4]
 801d3c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d3ca:	fb02 f303 	mul.w	r3, r2, r3
 801d3ce:	4a05      	ldr	r2, [pc, #20]	; (801d3e4 <bsp_delay_ms+0x28>)
 801d3d0:	fba2 2303 	umull	r2, r3, r2, r3
 801d3d4:	099b      	lsrs	r3, r3, #6
 801d3d6:	4618      	mov	r0, r3
 801d3d8:	f7eb fd92 	bl	8008f00 <vTaskDelay>
#else
	__HAL_TIM_SET_COUNTER(&htim1,0);
	while(__HAL_TIM_GET_COUNTER(&htim1) < ms*1000);
#endif
}
 801d3dc:	bf00      	nop
 801d3de:	3708      	adds	r7, #8
 801d3e0:	46bd      	mov	sp, r7
 801d3e2:	bd80      	pop	{r7, pc}
 801d3e4:	10624dd3 	.word	0x10624dd3

0801d3e8 <gpio_init>:


#include "gpio.h"


int gpio_init(BSP_GPIO *p_gpio){
 801d3e8:	b480      	push	{r7}
 801d3ea:	b083      	sub	sp, #12
 801d3ec:	af00      	add	r7, sp, #0
 801d3ee:	6078      	str	r0, [r7, #4]
	return 0;
 801d3f0:	2300      	movs	r3, #0
}
 801d3f2:	4618      	mov	r0, r3
 801d3f4:	370c      	adds	r7, #12
 801d3f6:	46bd      	mov	sp, r7
 801d3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3fc:	4770      	bx	lr

0801d3fe <gpio_write_pin>:
int gpio_write_pin(BSP_GPIO *p_gpio,BSP_GPIO_STATE state){
 801d3fe:	b580      	push	{r7, lr}
 801d400:	b082      	sub	sp, #8
 801d402:	af00      	add	r7, sp, #0
 801d404:	6078      	str	r0, [r7, #4]
 801d406:	460b      	mov	r3, r1
 801d408:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(p_gpio->p_driver,p_gpio->pin,(GPIO_PinState)state);
 801d40a:	687b      	ldr	r3, [r7, #4]
 801d40c:	6818      	ldr	r0, [r3, #0]
 801d40e:	687b      	ldr	r3, [r7, #4]
 801d410:	889b      	ldrh	r3, [r3, #4]
 801d412:	78fa      	ldrb	r2, [r7, #3]
 801d414:	4619      	mov	r1, r3
 801d416:	f7e6 fbcd 	bl	8003bb4 <HAL_GPIO_WritePin>
	return 0;
 801d41a:	2300      	movs	r3, #0
}
 801d41c:	4618      	mov	r0, r3
 801d41e:	3708      	adds	r7, #8
 801d420:	46bd      	mov	sp, r7
 801d422:	bd80      	pop	{r7, pc}

0801d424 <gpio_read_pin>:
BSP_GPIO_STATE gpio_read_pin(BSP_GPIO *p_gpio){
 801d424:	b580      	push	{r7, lr}
 801d426:	b084      	sub	sp, #16
 801d428:	af00      	add	r7, sp, #0
 801d42a:	6078      	str	r0, [r7, #4]
	BSP_GPIO_STATE state = (BSP_GPIO_STATE)HAL_GPIO_ReadPin(p_gpio->p_driver,p_gpio->pin);
 801d42c:	687b      	ldr	r3, [r7, #4]
 801d42e:	681a      	ldr	r2, [r3, #0]
 801d430:	687b      	ldr	r3, [r7, #4]
 801d432:	889b      	ldrh	r3, [r3, #4]
 801d434:	4619      	mov	r1, r3
 801d436:	4610      	mov	r0, r2
 801d438:	f7e6 fba4 	bl	8003b84 <HAL_GPIO_ReadPin>
 801d43c:	4603      	mov	r3, r0
 801d43e:	73fb      	strb	r3, [r7, #15]
	return state;
 801d440:	7bfb      	ldrb	r3, [r7, #15]
}
 801d442:	4618      	mov	r0, r3
 801d444:	3710      	adds	r7, #16
 801d446:	46bd      	mov	sp, r7
 801d448:	bd80      	pop	{r7, pc}

0801d44a <spi_init>:
 */
#include "spi.h"



void spi_init(BSP_SPI *spi, SPI_HandleTypeDef *driver,BSP_GPIO *cs_pin){
 801d44a:	b480      	push	{r7}
 801d44c:	b085      	sub	sp, #20
 801d44e:	af00      	add	r7, sp, #0
 801d450:	60f8      	str	r0, [r7, #12]
 801d452:	60b9      	str	r1, [r7, #8]
 801d454:	607a      	str	r2, [r7, #4]
	spi->p_driver = driver;
 801d456:	68fb      	ldr	r3, [r7, #12]
 801d458:	68ba      	ldr	r2, [r7, #8]
 801d45a:	601a      	str	r2, [r3, #0]
	spi->p_cs = cs_pin;
 801d45c:	68fb      	ldr	r3, [r7, #12]
 801d45e:	687a      	ldr	r2, [r7, #4]
 801d460:	605a      	str	r2, [r3, #4]
}
 801d462:	bf00      	nop
 801d464:	3714      	adds	r7, #20
 801d466:	46bd      	mov	sp, r7
 801d468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d46c:	4770      	bx	lr

0801d46e <spi_write_read>:
void spi_write(BSP_SPI *spi,uint8_t *data,uint16_t len){
	spi_cs_select(spi);
	HAL_SPI_Transmit(spi->p_driver,data, len,1000);
	spi_cs_deselect(spi);
}
uint16_t spi_write_read(BSP_SPI *spi,uint8_t *source,uint8_t *dest,uint16_t len){
 801d46e:	b580      	push	{r7, lr}
 801d470:	b088      	sub	sp, #32
 801d472:	af02      	add	r7, sp, #8
 801d474:	60f8      	str	r0, [r7, #12]
 801d476:	60b9      	str	r1, [r7, #8]
 801d478:	607a      	str	r2, [r7, #4]
 801d47a:	807b      	strh	r3, [r7, #2]
	spi_cs_select(spi);
 801d47c:	68f8      	ldr	r0, [r7, #12]
 801d47e:	f000 f814 	bl	801d4aa <spi_cs_select>
	uint16_t status = HAL_SPI_TransmitReceive(spi->p_driver,source,dest,len,1000);
 801d482:	68fb      	ldr	r3, [r7, #12]
 801d484:	6818      	ldr	r0, [r3, #0]
 801d486:	887b      	ldrh	r3, [r7, #2]
 801d488:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d48c:	9200      	str	r2, [sp, #0]
 801d48e:	687a      	ldr	r2, [r7, #4]
 801d490:	68b9      	ldr	r1, [r7, #8]
 801d492:	f7e7 f8d8 	bl	8004646 <HAL_SPI_TransmitReceive>
 801d496:	4603      	mov	r3, r0
 801d498:	82fb      	strh	r3, [r7, #22]
	spi_cs_deselect(spi);
 801d49a:	68f8      	ldr	r0, [r7, #12]
 801d49c:	f000 f813 	bl	801d4c6 <spi_cs_deselect>
	return status;
 801d4a0:	8afb      	ldrh	r3, [r7, #22]
}
 801d4a2:	4618      	mov	r0, r3
 801d4a4:	3718      	adds	r7, #24
 801d4a6:	46bd      	mov	sp, r7
 801d4a8:	bd80      	pop	{r7, pc}

0801d4aa <spi_cs_select>:

void spi_cs_select(BSP_SPI *spi){
 801d4aa:	b580      	push	{r7, lr}
 801d4ac:	b082      	sub	sp, #8
 801d4ae:	af00      	add	r7, sp, #0
 801d4b0:	6078      	str	r0, [r7, #4]
	gpio_write_pin(spi->p_cs,BSP_GPIO_LOW);
 801d4b2:	687b      	ldr	r3, [r7, #4]
 801d4b4:	685b      	ldr	r3, [r3, #4]
 801d4b6:	2100      	movs	r1, #0
 801d4b8:	4618      	mov	r0, r3
 801d4ba:	f7ff ffa0 	bl	801d3fe <gpio_write_pin>
}
 801d4be:	bf00      	nop
 801d4c0:	3708      	adds	r7, #8
 801d4c2:	46bd      	mov	sp, r7
 801d4c4:	bd80      	pop	{r7, pc}

0801d4c6 <spi_cs_deselect>:
void spi_cs_deselect(BSP_SPI *spi){
 801d4c6:	b580      	push	{r7, lr}
 801d4c8:	b082      	sub	sp, #8
 801d4ca:	af00      	add	r7, sp, #0
 801d4cc:	6078      	str	r0, [r7, #4]
	gpio_write_pin(spi->p_cs,BSP_GPIO_HIGH);
 801d4ce:	687b      	ldr	r3, [r7, #4]
 801d4d0:	685b      	ldr	r3, [r3, #4]
 801d4d2:	2101      	movs	r1, #1
 801d4d4:	4618      	mov	r0, r3
 801d4d6:	f7ff ff92 	bl	801d3fe <gpio_write_pin>
}
 801d4da:	bf00      	nop
 801d4dc:	3708      	adds	r7, #8
 801d4de:	46bd      	mov	sp, r7
 801d4e0:	bd80      	pop	{r7, pc}

0801d4e2 <afe_sign_extend_17>:

#define SOFTSPAN_MASK 0b111 // 0x07
#define CHANNEL_MASK 0b111000 // 0x38
#define DATA_MASK 0b111111111111111111000000 // 0xFFFF00

static int afe_sign_extend_17(uint32_t data){
 801d4e2:	b480      	push	{r7}
 801d4e4:	b087      	sub	sp, #28
 801d4e6:	af00      	add	r7, sp, #0
 801d4e8:	6078      	str	r0, [r7, #4]
	  uint8_t sign;
	  uint32_t mask = 0x20000;
 801d4ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801d4ee:	613b      	str	r3, [r7, #16]
	  int32_t data_signed = data;
 801d4f0:	687b      	ldr	r3, [r7, #4]
 801d4f2:	617b      	str	r3, [r7, #20]
	  sign = (data & mask) >> 17;
 801d4f4:	687a      	ldr	r2, [r7, #4]
 801d4f6:	693b      	ldr	r3, [r7, #16]
 801d4f8:	4013      	ands	r3, r2
 801d4fa:	0c5b      	lsrs	r3, r3, #17
 801d4fc:	73fb      	strb	r3, [r7, #15]
	  if (sign)
 801d4fe:	7bfb      	ldrb	r3, [r7, #15]
 801d500:	2b00      	cmp	r3, #0
 801d502:	d005      	beq.n	801d510 <afe_sign_extend_17+0x2e>
	    data_signed = data_signed | 0xFFFC0000;
 801d504:	697b      	ldr	r3, [r7, #20]
 801d506:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 801d50a:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 801d50e:	617b      	str	r3, [r7, #20]
	  return data_signed;
 801d510:	697b      	ldr	r3, [r7, #20]
}
 801d512:	4618      	mov	r0, r3
 801d514:	371c      	adds	r7, #28
 801d516:	46bd      	mov	sp, r7
 801d518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d51c:	4770      	bx	lr
	...

0801d520 <afe_caculator_vol>:
float afe_caculator_vol(uint32_t data,AFE_SoftSpan_Code_t softspan){
 801d520:	b580      	push	{r7, lr}
 801d522:	b084      	sub	sp, #16
 801d524:	af00      	add	r7, sp, #0
 801d526:	6078      	str	r0, [r7, #4]
 801d528:	460b      	mov	r3, r1
 801d52a:	70fb      	strb	r3, [r7, #3]
	  float voltage;
	  int32_t data_signed;
	  switch (softspan)
 801d52c:	78fb      	ldrb	r3, [r7, #3]
 801d52e:	2b07      	cmp	r3, #7
 801d530:	f200 810c 	bhi.w	801d74c <afe_caculator_vol+0x22c>
 801d534:	a201      	add	r2, pc, #4	; (adr r2, 801d53c <afe_caculator_vol+0x1c>)
 801d536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d53a:	bf00      	nop
 801d53c:	0801d55d 	.word	0x0801d55d
 801d540:	0801d565 	.word	0x0801d565
 801d544:	0801d5a5 	.word	0x0801d5a5
 801d548:	0801d5ef 	.word	0x0801d5ef
 801d54c:	0801d639 	.word	0x0801d639
 801d550:	0801d679 	.word	0x0801d679
 801d554:	0801d6b9 	.word	0x0801d6b9
 801d558:	0801d703 	.word	0x0801d703
	  {
	    case 0:
	      voltage = 0;
 801d55c:	f04f 0300 	mov.w	r3, #0
 801d560:	60fb      	str	r3, [r7, #12]
	      break;   // Disable Channel
 801d562:	e0f3      	b.n	801d74c <afe_caculator_vol+0x22c>
	    case 1:
	      voltage = (float)data * (1.25 * VREF / 1.000) / POW2_18;
 801d564:	687b      	ldr	r3, [r7, #4]
 801d566:	ee07 3a90 	vmov	s15, r3
 801d56a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d56e:	ee17 0a90 	vmov	r0, s15
 801d572:	f7e2 ffe9 	bl	8000548 <__aeabi_f2d>
 801d576:	a37a      	add	r3, pc, #488	; (adr r3, 801d760 <afe_caculator_vol+0x240>)
 801d578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d57c:	f7e3 f83c 	bl	80005f8 <__aeabi_dmul>
 801d580:	4602      	mov	r2, r0
 801d582:	460b      	mov	r3, r1
 801d584:	4610      	mov	r0, r2
 801d586:	4619      	mov	r1, r3
 801d588:	f04f 0200 	mov.w	r2, #0
 801d58c:	4b78      	ldr	r3, [pc, #480]	; (801d770 <afe_caculator_vol+0x250>)
 801d58e:	f7e3 f95d 	bl	800084c <__aeabi_ddiv>
 801d592:	4602      	mov	r2, r0
 801d594:	460b      	mov	r3, r1
 801d596:	4610      	mov	r0, r2
 801d598:	4619      	mov	r1, r3
 801d59a:	f7e3 fb05 	bl	8000ba8 <__aeabi_d2f>
 801d59e:	4603      	mov	r3, r0
 801d5a0:	60fb      	str	r3, [r7, #12]
	      break;
 801d5a2:	e0d3      	b.n	801d74c <afe_caculator_vol+0x22c>
	    case 2:
	      data_signed = afe_sign_extend_17(data);
 801d5a4:	6878      	ldr	r0, [r7, #4]
 801d5a6:	f7ff ff9c 	bl	801d4e2 <afe_sign_extend_17>
 801d5aa:	60b8      	str	r0, [r7, #8]
	      voltage = (float)data_signed * (1.25 * VREF / 1.024) / POW2_17;
 801d5ac:	68bb      	ldr	r3, [r7, #8]
 801d5ae:	ee07 3a90 	vmov	s15, r3
 801d5b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d5b6:	ee17 0a90 	vmov	r0, s15
 801d5ba:	f7e2 ffc5 	bl	8000548 <__aeabi_f2d>
 801d5be:	f04f 0200 	mov.w	r2, #0
 801d5c2:	4b6c      	ldr	r3, [pc, #432]	; (801d774 <afe_caculator_vol+0x254>)
 801d5c4:	f7e3 f818 	bl	80005f8 <__aeabi_dmul>
 801d5c8:	4602      	mov	r2, r0
 801d5ca:	460b      	mov	r3, r1
 801d5cc:	4610      	mov	r0, r2
 801d5ce:	4619      	mov	r1, r3
 801d5d0:	f04f 0200 	mov.w	r2, #0
 801d5d4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 801d5d8:	f7e3 f938 	bl	800084c <__aeabi_ddiv>
 801d5dc:	4602      	mov	r2, r0
 801d5de:	460b      	mov	r3, r1
 801d5e0:	4610      	mov	r0, r2
 801d5e2:	4619      	mov	r1, r3
 801d5e4:	f7e3 fae0 	bl	8000ba8 <__aeabi_d2f>
 801d5e8:	4603      	mov	r3, r0
 801d5ea:	60fb      	str	r3, [r7, #12]
	      break;
 801d5ec:	e0ae      	b.n	801d74c <afe_caculator_vol+0x22c>
	    case 3:
	      data_signed = afe_sign_extend_17(data);
 801d5ee:	6878      	ldr	r0, [r7, #4]
 801d5f0:	f7ff ff77 	bl	801d4e2 <afe_sign_extend_17>
 801d5f4:	60b8      	str	r0, [r7, #8]
	      voltage = (float)data_signed * (1.25 * VREF / 1.000) / POW2_17;
 801d5f6:	68bb      	ldr	r3, [r7, #8]
 801d5f8:	ee07 3a90 	vmov	s15, r3
 801d5fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d600:	ee17 0a90 	vmov	r0, s15
 801d604:	f7e2 ffa0 	bl	8000548 <__aeabi_f2d>
 801d608:	a355      	add	r3, pc, #340	; (adr r3, 801d760 <afe_caculator_vol+0x240>)
 801d60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d60e:	f7e2 fff3 	bl	80005f8 <__aeabi_dmul>
 801d612:	4602      	mov	r2, r0
 801d614:	460b      	mov	r3, r1
 801d616:	4610      	mov	r0, r2
 801d618:	4619      	mov	r1, r3
 801d61a:	f04f 0200 	mov.w	r2, #0
 801d61e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 801d622:	f7e3 f913 	bl	800084c <__aeabi_ddiv>
 801d626:	4602      	mov	r2, r0
 801d628:	460b      	mov	r3, r1
 801d62a:	4610      	mov	r0, r2
 801d62c:	4619      	mov	r1, r3
 801d62e:	f7e3 fabb 	bl	8000ba8 <__aeabi_d2f>
 801d632:	4603      	mov	r3, r0
 801d634:	60fb      	str	r3, [r7, #12]
	      break;
 801d636:	e089      	b.n	801d74c <afe_caculator_vol+0x22c>
	    case 4:
	      voltage = (float)data * (2.50 * VREF / 1.024) / POW2_18;
 801d638:	687b      	ldr	r3, [r7, #4]
 801d63a:	ee07 3a90 	vmov	s15, r3
 801d63e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d642:	ee17 0a90 	vmov	r0, s15
 801d646:	f7e2 ff7f 	bl	8000548 <__aeabi_f2d>
 801d64a:	f04f 0200 	mov.w	r2, #0
 801d64e:	4b4a      	ldr	r3, [pc, #296]	; (801d778 <afe_caculator_vol+0x258>)
 801d650:	f7e2 ffd2 	bl	80005f8 <__aeabi_dmul>
 801d654:	4602      	mov	r2, r0
 801d656:	460b      	mov	r3, r1
 801d658:	4610      	mov	r0, r2
 801d65a:	4619      	mov	r1, r3
 801d65c:	f04f 0200 	mov.w	r2, #0
 801d660:	4b43      	ldr	r3, [pc, #268]	; (801d770 <afe_caculator_vol+0x250>)
 801d662:	f7e3 f8f3 	bl	800084c <__aeabi_ddiv>
 801d666:	4602      	mov	r2, r0
 801d668:	460b      	mov	r3, r1
 801d66a:	4610      	mov	r0, r2
 801d66c:	4619      	mov	r1, r3
 801d66e:	f7e3 fa9b 	bl	8000ba8 <__aeabi_d2f>
 801d672:	4603      	mov	r3, r0
 801d674:	60fb      	str	r3, [r7, #12]
	      break;
 801d676:	e069      	b.n	801d74c <afe_caculator_vol+0x22c>
	    case 5:
	      voltage = (float)data * (2.50 * VREF / 1.000) / POW2_18;
 801d678:	687b      	ldr	r3, [r7, #4]
 801d67a:	ee07 3a90 	vmov	s15, r3
 801d67e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d682:	ee17 0a90 	vmov	r0, s15
 801d686:	f7e2 ff5f 	bl	8000548 <__aeabi_f2d>
 801d68a:	a337      	add	r3, pc, #220	; (adr r3, 801d768 <afe_caculator_vol+0x248>)
 801d68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d690:	f7e2 ffb2 	bl	80005f8 <__aeabi_dmul>
 801d694:	4602      	mov	r2, r0
 801d696:	460b      	mov	r3, r1
 801d698:	4610      	mov	r0, r2
 801d69a:	4619      	mov	r1, r3
 801d69c:	f04f 0200 	mov.w	r2, #0
 801d6a0:	4b33      	ldr	r3, [pc, #204]	; (801d770 <afe_caculator_vol+0x250>)
 801d6a2:	f7e3 f8d3 	bl	800084c <__aeabi_ddiv>
 801d6a6:	4602      	mov	r2, r0
 801d6a8:	460b      	mov	r3, r1
 801d6aa:	4610      	mov	r0, r2
 801d6ac:	4619      	mov	r1, r3
 801d6ae:	f7e3 fa7b 	bl	8000ba8 <__aeabi_d2f>
 801d6b2:	4603      	mov	r3, r0
 801d6b4:	60fb      	str	r3, [r7, #12]
	      break;
 801d6b6:	e049      	b.n	801d74c <afe_caculator_vol+0x22c>
	    case 6:
	      data_signed = afe_sign_extend_17(data);
 801d6b8:	6878      	ldr	r0, [r7, #4]
 801d6ba:	f7ff ff12 	bl	801d4e2 <afe_sign_extend_17>
 801d6be:	60b8      	str	r0, [r7, #8]
	      voltage = (float)data_signed * (2.50 * VREF / 1.024) / POW2_17;
 801d6c0:	68bb      	ldr	r3, [r7, #8]
 801d6c2:	ee07 3a90 	vmov	s15, r3
 801d6c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d6ca:	ee17 0a90 	vmov	r0, s15
 801d6ce:	f7e2 ff3b 	bl	8000548 <__aeabi_f2d>
 801d6d2:	f04f 0200 	mov.w	r2, #0
 801d6d6:	4b28      	ldr	r3, [pc, #160]	; (801d778 <afe_caculator_vol+0x258>)
 801d6d8:	f7e2 ff8e 	bl	80005f8 <__aeabi_dmul>
 801d6dc:	4602      	mov	r2, r0
 801d6de:	460b      	mov	r3, r1
 801d6e0:	4610      	mov	r0, r2
 801d6e2:	4619      	mov	r1, r3
 801d6e4:	f04f 0200 	mov.w	r2, #0
 801d6e8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 801d6ec:	f7e3 f8ae 	bl	800084c <__aeabi_ddiv>
 801d6f0:	4602      	mov	r2, r0
 801d6f2:	460b      	mov	r3, r1
 801d6f4:	4610      	mov	r0, r2
 801d6f6:	4619      	mov	r1, r3
 801d6f8:	f7e3 fa56 	bl	8000ba8 <__aeabi_d2f>
 801d6fc:	4603      	mov	r3, r0
 801d6fe:	60fb      	str	r3, [r7, #12]
	      break;
 801d700:	e024      	b.n	801d74c <afe_caculator_vol+0x22c>
	    case 7:
	      data_signed = afe_sign_extend_17(data);
 801d702:	6878      	ldr	r0, [r7, #4]
 801d704:	f7ff feed 	bl	801d4e2 <afe_sign_extend_17>
 801d708:	60b8      	str	r0, [r7, #8]
	      voltage = (float)data_signed * (2.50 * VREF ) / POW2_17;
 801d70a:	68bb      	ldr	r3, [r7, #8]
 801d70c:	ee07 3a90 	vmov	s15, r3
 801d710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d714:	ee17 0a90 	vmov	r0, s15
 801d718:	f7e2 ff16 	bl	8000548 <__aeabi_f2d>
 801d71c:	a312      	add	r3, pc, #72	; (adr r3, 801d768 <afe_caculator_vol+0x248>)
 801d71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d722:	f7e2 ff69 	bl	80005f8 <__aeabi_dmul>
 801d726:	4602      	mov	r2, r0
 801d728:	460b      	mov	r3, r1
 801d72a:	4610      	mov	r0, r2
 801d72c:	4619      	mov	r1, r3
 801d72e:	f04f 0200 	mov.w	r2, #0
 801d732:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 801d736:	f7e3 f889 	bl	800084c <__aeabi_ddiv>
 801d73a:	4602      	mov	r2, r0
 801d73c:	460b      	mov	r3, r1
 801d73e:	4610      	mov	r0, r2
 801d740:	4619      	mov	r1, r3
 801d742:	f7e3 fa31 	bl	8000ba8 <__aeabi_d2f>
 801d746:	4603      	mov	r3, r0
 801d748:	60fb      	str	r3, [r7, #12]
	      break;
 801d74a:	bf00      	nop
	  }
	  return voltage;
 801d74c:	68fb      	ldr	r3, [r7, #12]
 801d74e:	ee07 3a90 	vmov	s15, r3
}
 801d752:	eeb0 0a67 	vmov.f32	s0, s15
 801d756:	3710      	adds	r7, #16
 801d758:	46bd      	mov	sp, r7
 801d75a:	bd80      	pop	{r7, pc}
 801d75c:	f3af 8000 	nop.w
 801d760:	47ae147b 	.word	0x47ae147b
 801d764:	40147ae1 	.word	0x40147ae1
 801d768:	47ae147b 	.word	0x47ae147b
 801d76c:	40247ae1 	.word	0x40247ae1
 801d770:	41100000 	.word	0x41100000
 801d774:	40140000 	.word	0x40140000
 801d778:	40240000 	.word	0x40240000

0801d77c <afe_init>:
int afe_init(AFE *afe){
 801d77c:	b580      	push	{r7, lr}
 801d77e:	b084      	sub	sp, #16
 801d780:	af00      	add	r7, sp, #0
 801d782:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0;i<8;i++){
 801d784:	2300      	movs	r3, #0
 801d786:	81fb      	strh	r3, [r7, #14]
 801d788:	e00e      	b.n	801d7a8 <afe_init+0x2c>
		afe_create_config_word(i, afe->softSpan, &afe->config_word[i]);
 801d78a:	89fb      	ldrh	r3, [r7, #14]
 801d78c:	b2d8      	uxtb	r0, r3
 801d78e:	687b      	ldr	r3, [r7, #4]
 801d790:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 801d794:	89fb      	ldrh	r3, [r7, #14]
 801d796:	3358      	adds	r3, #88	; 0x58
 801d798:	687a      	ldr	r2, [r7, #4]
 801d79a:	4413      	add	r3, r2
 801d79c:	461a      	mov	r2, r3
 801d79e:	f000 f870 	bl	801d882 <afe_create_config_word>
	for(uint16_t i = 0;i<8;i++){
 801d7a2:	89fb      	ldrh	r3, [r7, #14]
 801d7a4:	3301      	adds	r3, #1
 801d7a6:	81fb      	strh	r3, [r7, #14]
 801d7a8:	89fb      	ldrh	r3, [r7, #14]
 801d7aa:	2b07      	cmp	r3, #7
 801d7ac:	d9ed      	bls.n	801d78a <afe_init+0xe>
	}
	afe_reset(afe);
 801d7ae:	6878      	ldr	r0, [r7, #4]
 801d7b0:	f000 f81a 	bl	801d7e8 <afe_reset>
	return 0;
 801d7b4:	2300      	movs	r3, #0
}
 801d7b6:	4618      	mov	r0, r3
 801d7b8:	3710      	adds	r7, #16
 801d7ba:	46bd      	mov	sp, r7
 801d7bc:	bd80      	pop	{r7, pc}

0801d7be <afe_start_convert>:
int afe_start_convert(AFE *afe){
 801d7be:	b580      	push	{r7, lr}
 801d7c0:	b082      	sub	sp, #8
 801d7c2:	af00      	add	r7, sp, #0
 801d7c4:	6078      	str	r0, [r7, #4]
	gpio_write_pin(afe->cnv,BSP_GPIO_HIGH);
 801d7c6:	687b      	ldr	r3, [r7, #4]
 801d7c8:	689b      	ldr	r3, [r3, #8]
 801d7ca:	2101      	movs	r1, #1
 801d7cc:	4618      	mov	r0, r3
 801d7ce:	f7ff fe16 	bl	801d3fe <gpio_write_pin>
//	bsp_delay_us(1);
	gpio_write_pin(afe->cnv,BSP_GPIO_LOW);
 801d7d2:	687b      	ldr	r3, [r7, #4]
 801d7d4:	689b      	ldr	r3, [r3, #8]
 801d7d6:	2100      	movs	r1, #0
 801d7d8:	4618      	mov	r0, r3
 801d7da:	f7ff fe10 	bl	801d3fe <gpio_write_pin>
	return 0;
 801d7de:	2300      	movs	r3, #0
}
 801d7e0:	4618      	mov	r0, r3
 801d7e2:	3708      	adds	r7, #8
 801d7e4:	46bd      	mov	sp, r7
 801d7e6:	bd80      	pop	{r7, pc}

0801d7e8 <afe_reset>:
int afe_reset(AFE *afe){
 801d7e8:	b580      	push	{r7, lr}
 801d7ea:	b082      	sub	sp, #8
 801d7ec:	af00      	add	r7, sp, #0
 801d7ee:	6078      	str	r0, [r7, #4]
	gpio_write_pin(afe->pd,BSP_GPIO_HIGH);
 801d7f0:	687b      	ldr	r3, [r7, #4]
 801d7f2:	685b      	ldr	r3, [r3, #4]
 801d7f4:	2101      	movs	r1, #1
 801d7f6:	4618      	mov	r0, r3
 801d7f8:	f7ff fe01 	bl	801d3fe <gpio_write_pin>
	bsp_delay_ms(50);
 801d7fc:	2032      	movs	r0, #50	; 0x32
 801d7fe:	f7ff fddd 	bl	801d3bc <bsp_delay_ms>
	gpio_write_pin(afe->pd,BSP_GPIO_LOW);
 801d802:	687b      	ldr	r3, [r7, #4]
 801d804:	685b      	ldr	r3, [r3, #4]
 801d806:	2100      	movs	r1, #0
 801d808:	4618      	mov	r0, r3
 801d80a:	f7ff fdf8 	bl	801d3fe <gpio_write_pin>
	return 0;
 801d80e:	2300      	movs	r3, #0
}
 801d810:	4618      	mov	r0, r3
 801d812:	3708      	adds	r7, #8
 801d814:	46bd      	mov	sp, r7
 801d816:	bd80      	pop	{r7, pc}

0801d818 <afe_busy>:
int afe_power_down(AFE *afe){
	gpio_write_pin(afe->pd,BSP_GPIO_HIGH);
	return 0;
}
int afe_busy(AFE *afe){
 801d818:	b580      	push	{r7, lr}
 801d81a:	b082      	sub	sp, #8
 801d81c:	af00      	add	r7, sp, #0
 801d81e:	6078      	str	r0, [r7, #4]
	return gpio_read_pin(afe->busy);
 801d820:	687b      	ldr	r3, [r7, #4]
 801d822:	68db      	ldr	r3, [r3, #12]
 801d824:	4618      	mov	r0, r3
 801d826:	f7ff fdfd 	bl	801d424 <gpio_read_pin>
 801d82a:	4603      	mov	r3, r0
}
 801d82c:	4618      	mov	r0, r3
 801d82e:	3708      	adds	r7, #8
 801d830:	46bd      	mov	sp, r7
 801d832:	bd80      	pop	{r7, pc}

0801d834 <afe_read>:
int afe_read(AFE *afe,uint8_t config_word,uint8_t data_array[4]){
 801d834:	b580      	push	{r7, lr}
 801d836:	b086      	sub	sp, #24
 801d838:	af00      	add	r7, sp, #0
 801d83a:	60f8      	str	r0, [r7, #12]
 801d83c:	460b      	mov	r3, r1
 801d83e:	607a      	str	r2, [r7, #4]
 801d840:	72fb      	strb	r3, [r7, #11]
	  uint8_t tx_array[4];
	  memset(tx_array,0,4);
 801d842:	f107 0314 	add.w	r3, r7, #20
 801d846:	2204      	movs	r2, #4
 801d848:	2100      	movs	r1, #0
 801d84a:	4618      	mov	r0, r3
 801d84c:	f001 f996 	bl	801eb7c <memset>
	  tx_array[3] = (uint8_t)(config_word);
 801d850:	7afb      	ldrb	r3, [r7, #11]
 801d852:	75fb      	strb	r3, [r7, #23]
	  afe_start_convert(afe);
 801d854:	68f8      	ldr	r0, [r7, #12]
 801d856:	f7ff ffb2 	bl	801d7be <afe_start_convert>
	  while(afe_busy(afe));
 801d85a:	bf00      	nop
 801d85c:	68f8      	ldr	r0, [r7, #12]
 801d85e:	f7ff ffdb 	bl	801d818 <afe_busy>
 801d862:	4603      	mov	r3, r0
 801d864:	2b00      	cmp	r3, #0
 801d866:	d1f9      	bne.n	801d85c <afe_read+0x28>
	  return spi_write_read(afe->p_driver,tx_array, data_array, 4);
 801d868:	68fb      	ldr	r3, [r7, #12]
 801d86a:	6818      	ldr	r0, [r3, #0]
 801d86c:	f107 0114 	add.w	r1, r7, #20
 801d870:	2304      	movs	r3, #4
 801d872:	687a      	ldr	r2, [r7, #4]
 801d874:	f7ff fdfb 	bl	801d46e <spi_write_read>
 801d878:	4603      	mov	r3, r0
}
 801d87a:	4618      	mov	r0, r3
 801d87c:	3718      	adds	r7, #24
 801d87e:	46bd      	mov	sp, r7
 801d880:	bd80      	pop	{r7, pc}

0801d882 <afe_create_config_word>:
		  return 0;
	  }
	  return -1;
}

uint8_t afe_create_config_word(uint8_t channel,AFE_SoftSpan_Code_t softspan,uint8_t *configword){
 801d882:	b480      	push	{r7}
 801d884:	b085      	sub	sp, #20
 801d886:	af00      	add	r7, sp, #0
 801d888:	4603      	mov	r3, r0
 801d88a:	603a      	str	r2, [r7, #0]
 801d88c:	71fb      	strb	r3, [r7, #7]
 801d88e:	460b      	mov	r3, r1
 801d890:	71bb      	strb	r3, [r7, #6]
	*configword = 1<<7  | 0<<6 | channel << 3 | softspan;// ((uint32_t)(config_number & 0x07) << (channel * 3));
 801d892:	79fb      	ldrb	r3, [r7, #7]
 801d894:	00db      	lsls	r3, r3, #3
 801d896:	b2da      	uxtb	r2, r3
 801d898:	79bb      	ldrb	r3, [r7, #6]
 801d89a:	4313      	orrs	r3, r2
 801d89c:	b2db      	uxtb	r3, r3
 801d89e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801d8a2:	b2da      	uxtb	r2, r3
 801d8a4:	683b      	ldr	r3, [r7, #0]
 801d8a6:	701a      	strb	r2, [r3, #0]
	uint8_t res = *configword;
 801d8a8:	683b      	ldr	r3, [r7, #0]
 801d8aa:	781b      	ldrb	r3, [r3, #0]
 801d8ac:	73fb      	strb	r3, [r7, #15]
	return res;
 801d8ae:	7bfb      	ldrb	r3, [r7, #15]
}
 801d8b0:	4618      	mov	r0, r3
 801d8b2:	3714      	adds	r7, #20
 801d8b4:	46bd      	mov	sp, r7
 801d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8ba:	4770      	bx	lr

0801d8bc <afe_convert>:
int afe_convert(AFE *afe,uint8_t data[4]){
 801d8bc:	b590      	push	{r4, r7, lr}
 801d8be:	b085      	sub	sp, #20
 801d8c0:	af00      	add	r7, sp, #0
 801d8c2:	6078      	str	r0, [r7, #4]
 801d8c4:	6039      	str	r1, [r7, #0]
	  uint32_t data32 = (uint32_t)data[0] << 16 | (uint32_t)data[1] << 8 | data[2];
 801d8c6:	683b      	ldr	r3, [r7, #0]
 801d8c8:	781b      	ldrb	r3, [r3, #0]
 801d8ca:	041a      	lsls	r2, r3, #16
 801d8cc:	683b      	ldr	r3, [r7, #0]
 801d8ce:	3301      	adds	r3, #1
 801d8d0:	781b      	ldrb	r3, [r3, #0]
 801d8d2:	021b      	lsls	r3, r3, #8
 801d8d4:	4313      	orrs	r3, r2
 801d8d6:	683a      	ldr	r2, [r7, #0]
 801d8d8:	3202      	adds	r2, #2
 801d8da:	7812      	ldrb	r2, [r2, #0]
 801d8dc:	4313      	orrs	r3, r2
 801d8de:	60fb      	str	r3, [r7, #12]
	  afe->data_type.softSpan = data32 & SOFTSPAN_MASK;
 801d8e0:	68fb      	ldr	r3, [r7, #12]
 801d8e2:	b2db      	uxtb	r3, r3
 801d8e4:	f003 0307 	and.w	r3, r3, #7
 801d8e8:	b2da      	uxtb	r2, r3
 801d8ea:	687b      	ldr	r3, [r7, #4]
 801d8ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	  afe->data_type.channel = (data32 & CHANNEL_MASK) >> 3;
 801d8f0:	68fb      	ldr	r3, [r7, #12]
 801d8f2:	08db      	lsrs	r3, r3, #3
 801d8f4:	b2db      	uxtb	r3, r3
 801d8f6:	f003 0307 	and.w	r3, r3, #7
 801d8fa:	b2da      	uxtb	r2, r3
 801d8fc:	687b      	ldr	r3, [r7, #4]
 801d8fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	  afe->data_type.value = (data32 & DATA_MASK) >> 6;
 801d902:	68fb      	ldr	r3, [r7, #12]
 801d904:	099b      	lsrs	r3, r3, #6
 801d906:	f3c3 0211 	ubfx	r2, r3, #0, #18
 801d90a:	687b      	ldr	r3, [r7, #4]
 801d90c:	655a      	str	r2, [r3, #84]	; 0x54
	  afe->data_channel[afe->data_type.channel] = afe->data_type.value;
 801d90e:	687b      	ldr	r3, [r7, #4]
 801d910:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801d914:	461a      	mov	r2, r3
 801d916:	687b      	ldr	r3, [r7, #4]
 801d918:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801d91a:	687b      	ldr	r3, [r7, #4]
 801d91c:	3204      	adds	r2, #4
 801d91e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  afe->dataf_channel[afe->data_type.channel] = 	  afe_caculator_vol(afe->data_type.value, _111);
 801d922:	687b      	ldr	r3, [r7, #4]
 801d924:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801d926:	687b      	ldr	r3, [r7, #4]
 801d928:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801d92c:	461c      	mov	r4, r3
 801d92e:	2107      	movs	r1, #7
 801d930:	4610      	mov	r0, r2
 801d932:	f7ff fdf5 	bl	801d520 <afe_caculator_vol>
 801d936:	eef0 7a40 	vmov.f32	s15, s0
 801d93a:	687a      	ldr	r2, [r7, #4]
 801d93c:	f104 030c 	add.w	r3, r4, #12
 801d940:	009b      	lsls	r3, r3, #2
 801d942:	4413      	add	r3, r2
 801d944:	edc3 7a00 	vstr	s15, [r3]
	  return 0;
 801d948:	2300      	movs	r3, #0
}
 801d94a:	4618      	mov	r0, r3
 801d94c:	3714      	adds	r7, #20
 801d94e:	46bd      	mov	sp, r7
 801d950:	bd90      	pop	{r4, r7, pc}

0801d952 <fifo_create>:
/************************** Variable Definitions ******************************/

/********************* Exported Function Definitions **************************/

uint8_t fifo_create(fifo_t* p_fifo, void * buf, uint16_t count, size_t size)
{
 801d952:	b480      	push	{r7}
 801d954:	b085      	sub	sp, #20
 801d956:	af00      	add	r7, sp, #0
 801d958:	60f8      	str	r0, [r7, #12]
 801d95a:	60b9      	str	r1, [r7, #8]
 801d95c:	603b      	str	r3, [r7, #0]
 801d95e:	4613      	mov	r3, r2
 801d960:	80fb      	strh	r3, [r7, #6]
    // Sanity check for memory and element sizes
    if (buf != NULL && p_fifo != NULL && count != 0) {
 801d962:	68bb      	ldr	r3, [r7, #8]
 801d964:	2b00      	cmp	r3, #0
 801d966:	d01c      	beq.n	801d9a2 <fifo_create+0x50>
 801d968:	68fb      	ldr	r3, [r7, #12]
 801d96a:	2b00      	cmp	r3, #0
 801d96c:	d019      	beq.n	801d9a2 <fifo_create+0x50>
 801d96e:	88fb      	ldrh	r3, [r7, #6]
 801d970:	2b00      	cmp	r3, #0
 801d972:	d016      	beq.n	801d9a2 <fifo_create+0x50>
        p_fifo->itemspace = buf;
 801d974:	68fb      	ldr	r3, [r7, #12]
 801d976:	68ba      	ldr	r2, [r7, #8]
 801d978:	601a      	str	r2, [r3, #0]
        p_fifo->itemsize = size;
 801d97a:	68fb      	ldr	r3, [r7, #12]
 801d97c:	683a      	ldr	r2, [r7, #0]
 801d97e:	605a      	str	r2, [r3, #4]
        p_fifo->allocatedbytes = count * size;
 801d980:	88fb      	ldrh	r3, [r7, #6]
 801d982:	683a      	ldr	r2, [r7, #0]
 801d984:	fb02 f203 	mul.w	r2, r2, r3
 801d988:	68fb      	ldr	r3, [r7, #12]
 801d98a:	609a      	str	r2, [r3, #8]
        p_fifo->readoffset = 0;
 801d98c:	68fb      	ldr	r3, [r7, #12]
 801d98e:	2200      	movs	r2, #0
 801d990:	819a      	strh	r2, [r3, #12]
        p_fifo->writeoffset = 0;
 801d992:	68fb      	ldr	r3, [r7, #12]
 801d994:	2200      	movs	r2, #0
 801d996:	81da      	strh	r2, [r3, #14]
        p_fifo->storedbytes = 0;
 801d998:	68fb      	ldr	r3, [r7, #12]
 801d99a:	2200      	movs	r2, #0
 801d99c:	611a      	str	r2, [r3, #16]
        return 1;
 801d99e:	2301      	movs	r3, #1
 801d9a0:	e000      	b.n	801d9a4 <fifo_create+0x52>
    }
    return 0;
 801d9a2:	2300      	movs	r3, #0
}
 801d9a4:	4618      	mov	r0, r3
 801d9a6:	3714      	adds	r7, #20
 801d9a8:	46bd      	mov	sp, r7
 801d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9ae:	4770      	bx	lr

0801d9b0 <fifo_add>:

uint8_t fifo_add(fifo_t* p_fifo, const void * item)
{
 801d9b0:	b580      	push	{r7, lr}
 801d9b2:	b082      	sub	sp, #8
 801d9b4:	af00      	add	r7, sp, #0
 801d9b6:	6078      	str	r0, [r7, #4]
 801d9b8:	6039      	str	r1, [r7, #0]
    if (!fifo_is_full(p_fifo)) {
 801d9ba:	6878      	ldr	r0, [r7, #4]
 801d9bc:	f000 f832 	bl	801da24 <fifo_is_full>
 801d9c0:	4603      	mov	r3, r0
 801d9c2:	2b00      	cmp	r3, #0
 801d9c4:	d10c      	bne.n	801d9e0 <fifo_add+0x30>
        fifo_copy_to(p_fifo, item);
 801d9c6:	6839      	ldr	r1, [r7, #0]
 801d9c8:	6878      	ldr	r0, [r7, #4]
 801d9ca:	f000 f876 	bl	801daba <fifo_copy_to>
        p_fifo->storedbytes += p_fifo->itemsize;
 801d9ce:	687b      	ldr	r3, [r7, #4]
 801d9d0:	691a      	ldr	r2, [r3, #16]
 801d9d2:	687b      	ldr	r3, [r7, #4]
 801d9d4:	685b      	ldr	r3, [r3, #4]
 801d9d6:	441a      	add	r2, r3
 801d9d8:	687b      	ldr	r3, [r7, #4]
 801d9da:	611a      	str	r2, [r3, #16]
        return 1;
 801d9dc:	2301      	movs	r3, #1
 801d9de:	e000      	b.n	801d9e2 <fifo_add+0x32>
    } else {
        return 0;
 801d9e0:	2300      	movs	r3, #0
    }
}
 801d9e2:	4618      	mov	r0, r3
 801d9e4:	3708      	adds	r7, #8
 801d9e6:	46bd      	mov	sp, r7
 801d9e8:	bd80      	pop	{r7, pc}

0801d9ea <fifo_get>:

uint8_t fifo_get(fifo_t* p_fifo, void * item)
{
 801d9ea:	b580      	push	{r7, lr}
 801d9ec:	b082      	sub	sp, #8
 801d9ee:	af00      	add	r7, sp, #0
 801d9f0:	6078      	str	r0, [r7, #4]
 801d9f2:	6039      	str	r1, [r7, #0]
    if (!fifo_is_empty(p_fifo)) {
 801d9f4:	6878      	ldr	r0, [r7, #4]
 801d9f6:	f000 f828 	bl	801da4a <fifo_is_empty>
 801d9fa:	4603      	mov	r3, r0
 801d9fc:	2b00      	cmp	r3, #0
 801d9fe:	d10c      	bne.n	801da1a <fifo_get+0x30>
        fifo_copy_from(p_fifo, item);
 801da00:	6839      	ldr	r1, [r7, #0]
 801da02:	6878      	ldr	r0, [r7, #4]
 801da04:	f000 f832 	bl	801da6c <fifo_copy_from>
        p_fifo->storedbytes -= p_fifo->itemsize;
 801da08:	687b      	ldr	r3, [r7, #4]
 801da0a:	691a      	ldr	r2, [r3, #16]
 801da0c:	687b      	ldr	r3, [r7, #4]
 801da0e:	685b      	ldr	r3, [r3, #4]
 801da10:	1ad2      	subs	r2, r2, r3
 801da12:	687b      	ldr	r3, [r7, #4]
 801da14:	611a      	str	r2, [r3, #16]
        return 1;
 801da16:	2301      	movs	r3, #1
 801da18:	e000      	b.n	801da1c <fifo_get+0x32>
    } else {
        return 0;
 801da1a:	2300      	movs	r3, #0
    }
}
 801da1c:	4618      	mov	r0, r3
 801da1e:	3708      	adds	r7, #8
 801da20:	46bd      	mov	sp, r7
 801da22:	bd80      	pop	{r7, pc}

0801da24 <fifo_is_full>:
    }

}

uint8_t fifo_is_full(fifo_t* p_fifo)
{
 801da24:	b480      	push	{r7}
 801da26:	b083      	sub	sp, #12
 801da28:	af00      	add	r7, sp, #0
 801da2a:	6078      	str	r0, [r7, #4]
    if (p_fifo->storedbytes >= p_fifo->allocatedbytes)
 801da2c:	687b      	ldr	r3, [r7, #4]
 801da2e:	691a      	ldr	r2, [r3, #16]
 801da30:	687b      	ldr	r3, [r7, #4]
 801da32:	689b      	ldr	r3, [r3, #8]
 801da34:	429a      	cmp	r2, r3
 801da36:	d301      	bcc.n	801da3c <fifo_is_full+0x18>
        return 1;
 801da38:	2301      	movs	r3, #1
 801da3a:	e000      	b.n	801da3e <fifo_is_full+0x1a>
    else
        return 0;
 801da3c:	2300      	movs	r3, #0
}
 801da3e:	4618      	mov	r0, r3
 801da40:	370c      	adds	r7, #12
 801da42:	46bd      	mov	sp, r7
 801da44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da48:	4770      	bx	lr

0801da4a <fifo_is_empty>:

uint8_t fifo_is_empty(fifo_t* p_fifo)
{
 801da4a:	b480      	push	{r7}
 801da4c:	b083      	sub	sp, #12
 801da4e:	af00      	add	r7, sp, #0
 801da50:	6078      	str	r0, [r7, #4]
    if (p_fifo->storedbytes == 0)
 801da52:	687b      	ldr	r3, [r7, #4]
 801da54:	691b      	ldr	r3, [r3, #16]
 801da56:	2b00      	cmp	r3, #0
 801da58:	d101      	bne.n	801da5e <fifo_is_empty+0x14>
        return 1;
 801da5a:	2301      	movs	r3, #1
 801da5c:	e000      	b.n	801da60 <fifo_is_empty+0x16>
    else
        return 0;
 801da5e:	2300      	movs	r3, #0
}
 801da60:	4618      	mov	r0, r3
 801da62:	370c      	adds	r7, #12
 801da64:	46bd      	mov	sp, r7
 801da66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da6a:	4770      	bx	lr

0801da6c <fifo_copy_from>:
    return 0;
}

/********************* Internal Function Definitions *************************/
static void fifo_copy_from(fifo_t* p_fifo, void * item)
{
 801da6c:	b580      	push	{r7, lr}
 801da6e:	b082      	sub	sp, #8
 801da70:	af00      	add	r7, sp, #0
 801da72:	6078      	str	r0, [r7, #4]
 801da74:	6039      	str	r1, [r7, #0]
    memcpy(item, (uint8_t*)p_fifo->itemspace + p_fifo->readoffset, p_fifo->itemsize);
 801da76:	687b      	ldr	r3, [r7, #4]
 801da78:	681b      	ldr	r3, [r3, #0]
 801da7a:	687a      	ldr	r2, [r7, #4]
 801da7c:	8992      	ldrh	r2, [r2, #12]
 801da7e:	1899      	adds	r1, r3, r2
 801da80:	687b      	ldr	r3, [r7, #4]
 801da82:	685b      	ldr	r3, [r3, #4]
 801da84:	461a      	mov	r2, r3
 801da86:	6838      	ldr	r0, [r7, #0]
 801da88:	f001 f850 	bl	801eb2c <memcpy>
    p_fifo->readoffset += p_fifo->itemsize;
 801da8c:	687b      	ldr	r3, [r7, #4]
 801da8e:	899a      	ldrh	r2, [r3, #12]
 801da90:	687b      	ldr	r3, [r7, #4]
 801da92:	685b      	ldr	r3, [r3, #4]
 801da94:	b29b      	uxth	r3, r3
 801da96:	4413      	add	r3, r2
 801da98:	b29a      	uxth	r2, r3
 801da9a:	687b      	ldr	r3, [r7, #4]
 801da9c:	819a      	strh	r2, [r3, #12]
    if (p_fifo->readoffset >= p_fifo->allocatedbytes) {
 801da9e:	687b      	ldr	r3, [r7, #4]
 801daa0:	899b      	ldrh	r3, [r3, #12]
 801daa2:	461a      	mov	r2, r3
 801daa4:	687b      	ldr	r3, [r7, #4]
 801daa6:	689b      	ldr	r3, [r3, #8]
 801daa8:	429a      	cmp	r2, r3
 801daaa:	d302      	bcc.n	801dab2 <fifo_copy_from+0x46>
        p_fifo->readoffset = 0;
 801daac:	687b      	ldr	r3, [r7, #4]
 801daae:	2200      	movs	r2, #0
 801dab0:	819a      	strh	r2, [r3, #12]
    }
}
 801dab2:	bf00      	nop
 801dab4:	3708      	adds	r7, #8
 801dab6:	46bd      	mov	sp, r7
 801dab8:	bd80      	pop	{r7, pc}

0801daba <fifo_copy_to>:

static void fifo_copy_to(fifo_t* p_fifo, const void *item)
{
 801daba:	b580      	push	{r7, lr}
 801dabc:	b082      	sub	sp, #8
 801dabe:	af00      	add	r7, sp, #0
 801dac0:	6078      	str	r0, [r7, #4]
 801dac2:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)p_fifo->itemspace + p_fifo->writeoffset, item, p_fifo->itemsize);
 801dac4:	687b      	ldr	r3, [r7, #4]
 801dac6:	681b      	ldr	r3, [r3, #0]
 801dac8:	687a      	ldr	r2, [r7, #4]
 801daca:	89d2      	ldrh	r2, [r2, #14]
 801dacc:	1898      	adds	r0, r3, r2
 801dace:	687b      	ldr	r3, [r7, #4]
 801dad0:	685b      	ldr	r3, [r3, #4]
 801dad2:	461a      	mov	r2, r3
 801dad4:	6839      	ldr	r1, [r7, #0]
 801dad6:	f001 f829 	bl	801eb2c <memcpy>
    p_fifo->writeoffset += p_fifo->itemsize;
 801dada:	687b      	ldr	r3, [r7, #4]
 801dadc:	89da      	ldrh	r2, [r3, #14]
 801dade:	687b      	ldr	r3, [r7, #4]
 801dae0:	685b      	ldr	r3, [r3, #4]
 801dae2:	b29b      	uxth	r3, r3
 801dae4:	4413      	add	r3, r2
 801dae6:	b29a      	uxth	r2, r3
 801dae8:	687b      	ldr	r3, [r7, #4]
 801daea:	81da      	strh	r2, [r3, #14]
    if (p_fifo->writeoffset >= p_fifo->allocatedbytes) {
 801daec:	687b      	ldr	r3, [r7, #4]
 801daee:	89db      	ldrh	r3, [r3, #14]
 801daf0:	461a      	mov	r2, r3
 801daf2:	687b      	ldr	r3, [r7, #4]
 801daf4:	689b      	ldr	r3, [r3, #8]
 801daf6:	429a      	cmp	r2, r3
 801daf8:	d302      	bcc.n	801db00 <fifo_copy_to+0x46>
        p_fifo->writeoffset = 0;
 801dafa:	687b      	ldr	r3, [r7, #4]
 801dafc:	2200      	movs	r2, #0
 801dafe:	81da      	strh	r2, [r3, #14]
    }
}
 801db00:	bf00      	nop
 801db02:	3708      	adds	r7, #8
 801db04:	46bd      	mov	sp, r7
 801db06:	bd80      	pop	{r7, pc}

0801db08 <retarget_init>:
/**
 * @brief      Initialize FIFO
 *
 * @return     { description_of_the_return_value }
 */
int retarget_init(void) {
 801db08:	b580      	push	{r7, lr}
 801db0a:	af00      	add	r7, sp, #0
  fifo_create( &shell_fifo,
 801db0c:	2301      	movs	r3, #1
 801db0e:	2280      	movs	r2, #128	; 0x80
 801db10:	4903      	ldr	r1, [pc, #12]	; (801db20 <retarget_init+0x18>)
 801db12:	4804      	ldr	r0, [pc, #16]	; (801db24 <retarget_init+0x1c>)
 801db14:	f7ff ff1d 	bl	801d952 <fifo_create>
               shell_rx_buffer,
               sizeof(shell_rx_buffer)/sizeof(uint8_t),
               sizeof(uint8_t)
             );

  return 0;
 801db18:	2300      	movs	r3, #0
}
 801db1a:	4618      	mov	r0, r3
 801db1c:	bd80      	pop	{r7, pc}
 801db1e:	bf00      	nop
 801db20:	20001a64 	.word	0x20001a64
 801db24:	2000c3f0 	.word	0x2000c3f0

0801db28 <serial_get_char>:


int serial_get_char(uint8_t *c) {
 801db28:	b580      	push	{r7, lr}
 801db2a:	b084      	sub	sp, #16
 801db2c:	af00      	add	r7, sp, #0
 801db2e:	6078      	str	r0, [r7, #4]
  uint8_t item = 0;
 801db30:	2300      	movs	r3, #0
 801db32:	73fb      	strb	r3, [r7, #15]

  if (fifo_is_empty(&shell_fifo) == 1) {
 801db34:	480d      	ldr	r0, [pc, #52]	; (801db6c <serial_get_char+0x44>)
 801db36:	f7ff ff88 	bl	801da4a <fifo_is_empty>
 801db3a:	4603      	mov	r3, r0
 801db3c:	2b01      	cmp	r3, #1
 801db3e:	d101      	bne.n	801db44 <serial_get_char+0x1c>
    return 0;
 801db40:	2300      	movs	r3, #0
 801db42:	e00e      	b.n	801db62 <serial_get_char+0x3a>
  }

  if(fifo_get(&shell_fifo, &item) == 1) {
 801db44:	f107 030f 	add.w	r3, r7, #15
 801db48:	4619      	mov	r1, r3
 801db4a:	4808      	ldr	r0, [pc, #32]	; (801db6c <serial_get_char+0x44>)
 801db4c:	f7ff ff4d 	bl	801d9ea <fifo_get>
 801db50:	4603      	mov	r3, r0
 801db52:	2b01      	cmp	r3, #1
 801db54:	d104      	bne.n	801db60 <serial_get_char+0x38>
    *c = item;
 801db56:	7bfa      	ldrb	r2, [r7, #15]
 801db58:	687b      	ldr	r3, [r7, #4]
 801db5a:	701a      	strb	r2, [r3, #0]
    return 1;
 801db5c:	2301      	movs	r3, #1
 801db5e:	e000      	b.n	801db62 <serial_get_char+0x3a>
  }

  return 0;
 801db60:	2300      	movs	r3, #0
}
 801db62:	4618      	mov	r0, r3
 801db64:	3710      	adds	r7, #16
 801db66:	46bd      	mov	sp, r7
 801db68:	bd80      	pop	{r7, pc}
 801db6a:	bf00      	nop
 801db6c:	2000c3f0 	.word	0x2000c3f0

0801db70 <__io_getchar>:
#endif
	return ch;
}

uint8_t __io_getchar(void)
{
 801db70:	b580      	push	{r7, lr}
 801db72:	b082      	sub	sp, #8
 801db74:	af00      	add	r7, sp, #0
	uint8_t ch;
  int ret = serial_get_char((uint8_t*)&ch);
 801db76:	1cfb      	adds	r3, r7, #3
 801db78:	4618      	mov	r0, r3
 801db7a:	f7ff ffd5 	bl	801db28 <serial_get_char>
 801db7e:	6078      	str	r0, [r7, #4]

  return (ret == 1) ? ch : 0;
 801db80:	687b      	ldr	r3, [r7, #4]
 801db82:	2b01      	cmp	r3, #1
 801db84:	d101      	bne.n	801db8a <__io_getchar+0x1a>
 801db86:	78fb      	ldrb	r3, [r7, #3]
 801db88:	e000      	b.n	801db8c <__io_getchar+0x1c>
 801db8a:	2300      	movs	r3, #0
}
 801db8c:	4618      	mov	r0, r3
 801db8e:	3708      	adds	r7, #8
 801db90:	46bd      	mov	sp, r7
 801db92:	bd80      	pop	{r7, pc}

0801db94 <on_uart_data_received>:

void on_uart_data_received(uint8_t ch) {
 801db94:	b580      	push	{r7, lr}
 801db96:	b082      	sub	sp, #8
 801db98:	af00      	add	r7, sp, #0
 801db9a:	4603      	mov	r3, r0
 801db9c:	71fb      	strb	r3, [r7, #7]
  if(!fifo_add(&shell_fifo, (const void *)&ch)) {
 801db9e:	1dfb      	adds	r3, r7, #7
 801dba0:	4619      	mov	r1, r3
 801dba2:	4803      	ldr	r0, [pc, #12]	; (801dbb0 <on_uart_data_received+0x1c>)
 801dba4:	f7ff ff04 	bl	801d9b0 <fifo_add>
    //printf("err");
  }
}
 801dba8:	bf00      	nop
 801dbaa:	3708      	adds	r7, #8
 801dbac:	46bd      	mov	sp, r7
 801dbae:	bd80      	pop	{r7, pc}
 801dbb0:	2000c3f0 	.word	0x2000c3f0

0801dbb4 <_read>:
    return ch;
}
#elif defined(__GNUC__)

int _read(int file, char *ptr, int len)
{
 801dbb4:	b590      	push	{r4, r7, lr}
 801dbb6:	b087      	sub	sp, #28
 801dbb8:	af00      	add	r7, sp, #0
 801dbba:	60f8      	str	r0, [r7, #12]
 801dbbc:	60b9      	str	r1, [r7, #8]
 801dbbe:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 801dbc0:	2300      	movs	r3, #0
 801dbc2:	617b      	str	r3, [r7, #20]
 801dbc4:	e009      	b.n	801dbda <_read+0x26>
    *ptr++ = __io_getchar();
 801dbc6:	68bc      	ldr	r4, [r7, #8]
 801dbc8:	1c63      	adds	r3, r4, #1
 801dbca:	60bb      	str	r3, [r7, #8]
 801dbcc:	f7ff ffd0 	bl	801db70 <__io_getchar>
 801dbd0:	4603      	mov	r3, r0
 801dbd2:	7023      	strb	r3, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 801dbd4:	697b      	ldr	r3, [r7, #20]
 801dbd6:	3301      	adds	r3, #1
 801dbd8:	617b      	str	r3, [r7, #20]
 801dbda:	697a      	ldr	r2, [r7, #20]
 801dbdc:	687b      	ldr	r3, [r7, #4]
 801dbde:	429a      	cmp	r2, r3
 801dbe0:	dbf1      	blt.n	801dbc6 <_read+0x12>
  }

  return len;
 801dbe2:	687b      	ldr	r3, [r7, #4]
}
 801dbe4:	4618      	mov	r0, r3
 801dbe6:	371c      	adds	r7, #28
 801dbe8:	46bd      	mov	sp, r7
 801dbea:	bd90      	pop	{r4, r7, pc}

0801dbec <_write>:

int _write(int file, char *ptr, int len)
{
 801dbec:	b580      	push	{r7, lr}
 801dbee:	b086      	sub	sp, #24
 801dbf0:	af00      	add	r7, sp, #0
 801dbf2:	60f8      	str	r0, [r7, #12]
 801dbf4:	60b9      	str	r1, [r7, #8]
 801dbf6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801dbf8:	2300      	movs	r3, #0
 801dbfa:	617b      	str	r3, [r7, #20]
 801dbfc:	e009      	b.n	801dc12 <_write+0x26>
	{
		__io_putchar(*ptr++);
 801dbfe:	68bb      	ldr	r3, [r7, #8]
 801dc00:	1c5a      	adds	r2, r3, #1
 801dc02:	60ba      	str	r2, [r7, #8]
 801dc04:	781b      	ldrb	r3, [r3, #0]
 801dc06:	4618      	mov	r0, r3
 801dc08:	f7ff f8a8 	bl	801cd5c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801dc0c:	697b      	ldr	r3, [r7, #20]
 801dc0e:	3301      	adds	r3, #1
 801dc10:	617b      	str	r3, [r7, #20]
 801dc12:	697a      	ldr	r2, [r7, #20]
 801dc14:	687b      	ldr	r3, [r7, #4]
 801dc16:	429a      	cmp	r2, r3
 801dc18:	dbf1      	blt.n	801dbfe <_write+0x12>
	}
  return len;
 801dc1a:	687b      	ldr	r3, [r7, #4]
}
 801dc1c:	4618      	mov	r0, r3
 801dc1e:	3718      	adds	r7, #24
 801dc20:	46bd      	mov	sp, r7
 801dc22:	bd80      	pop	{r7, pc}

0801dc24 <SHELL_Init>:
static char g_paramBuffer[SHELL_BUFFER_SIZE];

/********************** Exported Function Definitions *************************/
void SHELL_Init(
    p_shell_context_t context, send_data_cb_t send_cb, recv_data_cb_t recv_cb, printf_data_t shell_printf, char *prompt)
{
 801dc24:	b580      	push	{r7, lr}
 801dc26:	b084      	sub	sp, #16
 801dc28:	af00      	add	r7, sp, #0
 801dc2a:	60f8      	str	r0, [r7, #12]
 801dc2c:	60b9      	str	r1, [r7, #8]
 801dc2e:	607a      	str	r2, [r7, #4]
 801dc30:	603b      	str	r3, [r7, #0]
    assert(send_cb != NULL);
 801dc32:	68bb      	ldr	r3, [r7, #8]
 801dc34:	2b00      	cmp	r3, #0
 801dc36:	d105      	bne.n	801dc44 <SHELL_Init+0x20>
 801dc38:	4b1c      	ldr	r3, [pc, #112]	; (801dcac <SHELL_Init+0x88>)
 801dc3a:	4a1d      	ldr	r2, [pc, #116]	; (801dcb0 <SHELL_Init+0x8c>)
 801dc3c:	214d      	movs	r1, #77	; 0x4d
 801dc3e:	481d      	ldr	r0, [pc, #116]	; (801dcb4 <SHELL_Init+0x90>)
 801dc40:	f000 fe04 	bl	801e84c <__assert_func>
    assert(recv_cb != NULL);
 801dc44:	687b      	ldr	r3, [r7, #4]
 801dc46:	2b00      	cmp	r3, #0
 801dc48:	d105      	bne.n	801dc56 <SHELL_Init+0x32>
 801dc4a:	4b1b      	ldr	r3, [pc, #108]	; (801dcb8 <SHELL_Init+0x94>)
 801dc4c:	4a18      	ldr	r2, [pc, #96]	; (801dcb0 <SHELL_Init+0x8c>)
 801dc4e:	214e      	movs	r1, #78	; 0x4e
 801dc50:	4818      	ldr	r0, [pc, #96]	; (801dcb4 <SHELL_Init+0x90>)
 801dc52:	f000 fdfb 	bl	801e84c <__assert_func>
    assert(prompt != NULL);
 801dc56:	69bb      	ldr	r3, [r7, #24]
 801dc58:	2b00      	cmp	r3, #0
 801dc5a:	d105      	bne.n	801dc68 <SHELL_Init+0x44>
 801dc5c:	4b17      	ldr	r3, [pc, #92]	; (801dcbc <SHELL_Init+0x98>)
 801dc5e:	4a14      	ldr	r2, [pc, #80]	; (801dcb0 <SHELL_Init+0x8c>)
 801dc60:	214f      	movs	r1, #79	; 0x4f
 801dc62:	4814      	ldr	r0, [pc, #80]	; (801dcb4 <SHELL_Init+0x90>)
 801dc64:	f000 fdf2 	bl	801e84c <__assert_func>
    assert(shell_printf != NULL);
 801dc68:	683b      	ldr	r3, [r7, #0]
 801dc6a:	2b00      	cmp	r3, #0
 801dc6c:	d105      	bne.n	801dc7a <SHELL_Init+0x56>
 801dc6e:	4b14      	ldr	r3, [pc, #80]	; (801dcc0 <SHELL_Init+0x9c>)
 801dc70:	4a0f      	ldr	r2, [pc, #60]	; (801dcb0 <SHELL_Init+0x8c>)
 801dc72:	2150      	movs	r1, #80	; 0x50
 801dc74:	480f      	ldr	r0, [pc, #60]	; (801dcb4 <SHELL_Init+0x90>)
 801dc76:	f000 fde9 	bl	801e84c <__assert_func>

    /* Memset for context */
    memset(context, 0, sizeof(shell_context_struct));
 801dc7a:	f44f 728e 	mov.w	r2, #284	; 0x11c
 801dc7e:	2100      	movs	r1, #0
 801dc80:	68f8      	ldr	r0, [r7, #12]
 801dc82:	f000 ff7b 	bl	801eb7c <memset>
    context->send_data_func = send_cb;
 801dc86:	68fb      	ldr	r3, [r7, #12]
 801dc88:	68ba      	ldr	r2, [r7, #8]
 801dc8a:	649a      	str	r2, [r3, #72]	; 0x48
    context->recv_data_func = recv_cb;
 801dc8c:	68fb      	ldr	r3, [r7, #12]
 801dc8e:	687a      	ldr	r2, [r7, #4]
 801dc90:	64da      	str	r2, [r3, #76]	; 0x4c
    context->printf_data_func = shell_printf;
 801dc92:	68fb      	ldr	r3, [r7, #12]
 801dc94:	683a      	ldr	r2, [r7, #0]
 801dc96:	651a      	str	r2, [r3, #80]	; 0x50
    context->prompt = prompt;
 801dc98:	68fb      	ldr	r3, [r7, #12]
 801dc9a:	69ba      	ldr	r2, [r7, #24]
 801dc9c:	601a      	str	r2, [r3, #0]

    SHELL_RegisterCommand(&xHelpCommand);
 801dc9e:	4809      	ldr	r0, [pc, #36]	; (801dcc4 <SHELL_Init+0xa0>)
 801dca0:	f000 fd5a 	bl	801e758 <SHELL_RegisterCommand>
    // SHELL_RegisterCommand(&xExitCommand);
}
 801dca4:	bf00      	nop
 801dca6:	3710      	adds	r7, #16
 801dca8:	46bd      	mov	sp, r7
 801dcaa:	bd80      	pop	{r7, pc}
 801dcac:	0802580c 	.word	0x0802580c
 801dcb0:	08025afc 	.word	0x08025afc
 801dcb4:	0802581c 	.word	0x0802581c
 801dcb8:	08025840 	.word	0x08025840
 801dcbc:	08025850 	.word	0x08025850
 801dcc0:	08025860 	.word	0x08025860
 801dcc4:	08025aec 	.word	0x08025aec

0801dcc8 <SHELL_Process>:


void SHELL_Process(p_shell_context_t context)
{
 801dcc8:	b580      	push	{r7, lr}
 801dcca:	b084      	sub	sp, #16
 801dccc:	af00      	add	r7, sp, #0
 801dcce:	6078      	str	r0, [r7, #4]

//   static uint32_t tick = 0;
   static uint8_t first_run  = 1;


    if (!context) {
 801dcd0:	687b      	ldr	r3, [r7, #4]
 801dcd2:	2b00      	cmp	r3, #0
 801dcd4:	f000 81ff 	beq.w	801e0d6 <SHELL_Process+0x40e>
        return;
    }

    if(first_run == 1) {
 801dcd8:	4baa      	ldr	r3, [pc, #680]	; (801df84 <SHELL_Process+0x2bc>)
 801dcda:	781b      	ldrb	r3, [r3, #0]
 801dcdc:	2b01      	cmp	r3, #1
 801dcde:	d102      	bne.n	801dce6 <SHELL_Process+0x1e>

        first_run = 0;
 801dce0:	4ba8      	ldr	r3, [pc, #672]	; (801df84 <SHELL_Process+0x2bc>)
 801dce2:	2200      	movs	r2, #0
 801dce4:	701a      	strb	r2, [r3, #0]
    }


     vTaskDelay( 20 / portTICK_PERIOD_MS );  /* sleep a while */
 801dce6:	2014      	movs	r0, #20
 801dce8:	f7eb f90a 	bl	8008f00 <vTaskDelay>
//        return;
//    }

//    tick = xTaskGetTickCount();

    if (context->exit) {
 801dcec:	687b      	ldr	r3, [r7, #4]
 801dcee:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801dcf2:	2b00      	cmp	r3, #0
 801dcf4:	f040 81f1 	bne.w	801e0da <SHELL_Process+0x412>
        return;
    }
    ch = GetChar(context);
 801dcf8:	6878      	ldr	r0, [r7, #4]
 801dcfa:	f000 fd53 	bl	801e7a4 <GetChar>
 801dcfe:	4603      	mov	r3, r0
 801dd00:	72fb      	strb	r3, [r7, #11]
    if(ch == 0) {
 801dd02:	7afb      	ldrb	r3, [r7, #11]
 801dd04:	2b00      	cmp	r3, #0
 801dd06:	f000 81ea 	beq.w	801e0de <SHELL_Process+0x416>
      return;
    }
    /* Special key */
    if (ch == KEY_ESC) {
 801dd0a:	7afb      	ldrb	r3, [r7, #11]
 801dd0c:	2b1b      	cmp	r3, #27
 801dd0e:	d103      	bne.n	801dd18 <SHELL_Process+0x50>
        context->stat = kSHELL_Special;
 801dd10:	687b      	ldr	r3, [r7, #4]
 801dd12:	2201      	movs	r2, #1
 801dd14:	711a      	strb	r2, [r3, #4]
        return;
 801dd16:	e1e5      	b.n	801e0e4 <SHELL_Process+0x41c>
    } else if (context->stat == kSHELL_Special) {
 801dd18:	687b      	ldr	r3, [r7, #4]
 801dd1a:	791b      	ldrb	r3, [r3, #4]
 801dd1c:	2b01      	cmp	r3, #1
 801dd1e:	d10a      	bne.n	801dd36 <SHELL_Process+0x6e>
        /* Function key */
        if (ch == '[') {
 801dd20:	7afb      	ldrb	r3, [r7, #11]
 801dd22:	2b5b      	cmp	r3, #91	; 0x5b
 801dd24:	d103      	bne.n	801dd2e <SHELL_Process+0x66>
            context->stat = kSHELL_Function;
 801dd26:	687b      	ldr	r3, [r7, #4]
 801dd28:	2202      	movs	r2, #2
 801dd2a:	711a      	strb	r2, [r3, #4]
            return;
 801dd2c:	e1da      	b.n	801e0e4 <SHELL_Process+0x41c>
        }
        context->stat = kSHELL_Normal;
 801dd2e:	687b      	ldr	r3, [r7, #4]
 801dd30:	2200      	movs	r2, #0
 801dd32:	711a      	strb	r2, [r3, #4]
 801dd34:	e130      	b.n	801df98 <SHELL_Process+0x2d0>
    } else if (context->stat == kSHELL_Function) {
 801dd36:	687b      	ldr	r3, [r7, #4]
 801dd38:	791b      	ldrb	r3, [r3, #4]
 801dd3a:	2b02      	cmp	r3, #2
 801dd3c:	d17c      	bne.n	801de38 <SHELL_Process+0x170>
        context->stat = kSHELL_Normal;
 801dd3e:	687b      	ldr	r3, [r7, #4]
 801dd40:	2200      	movs	r2, #0
 801dd42:	711a      	strb	r2, [r3, #4]

        switch ((uint8_t)ch) {
 801dd44:	7afb      	ldrb	r3, [r7, #11]
 801dd46:	3b41      	subs	r3, #65	; 0x41
 801dd48:	2b03      	cmp	r3, #3
 801dd4a:	d86b      	bhi.n	801de24 <SHELL_Process+0x15c>
 801dd4c:	a201      	add	r2, pc, #4	; (adr r2, 801dd54 <SHELL_Process+0x8c>)
 801dd4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dd52:	bf00      	nop
 801dd54:	0801dd65 	.word	0x0801dd65
 801dd58:	0801dd9b 	.word	0x0801dd9b
 801dd5c:	0801ddeb 	.word	0x0801ddeb
 801dd60:	0801ddc7 	.word	0x0801ddc7
            /* History operation here */
            case 'A': /* Up key */
                GetHistoryCommand(context, context->hist_current);
 801dd64:	687b      	ldr	r3, [r7, #4]
 801dd66:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801dd6a:	b2db      	uxtb	r3, r3
 801dd6c:	4619      	mov	r1, r3
 801dd6e:	6878      	ldr	r0, [r7, #4]
 801dd70:	f000 fb26 	bl	801e3c0 <GetHistoryCommand>
                if (context->hist_current < (context->hist_count - 1)) {
 801dd74:	687b      	ldr	r3, [r7, #4]
 801dd76:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801dd7a:	461a      	mov	r2, r3
 801dd7c:	687b      	ldr	r3, [r7, #4]
 801dd7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801dd82:	3b01      	subs	r3, #1
 801dd84:	429a      	cmp	r2, r3
 801dd86:	da4f      	bge.n	801de28 <SHELL_Process+0x160>
                    context->hist_current++;
 801dd88:	687b      	ldr	r3, [r7, #4]
 801dd8a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801dd8e:	3301      	adds	r3, #1
 801dd90:	b29a      	uxth	r2, r3
 801dd92:	687b      	ldr	r3, [r7, #4]
 801dd94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                }
                break;
 801dd98:	e046      	b.n	801de28 <SHELL_Process+0x160>
            case 'B': /* Down key */
                GetHistoryCommand(context, context->hist_current);
 801dd9a:	687b      	ldr	r3, [r7, #4]
 801dd9c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801dda0:	b2db      	uxtb	r3, r3
 801dda2:	4619      	mov	r1, r3
 801dda4:	6878      	ldr	r0, [r7, #4]
 801dda6:	f000 fb0b 	bl	801e3c0 <GetHistoryCommand>
                if (context->hist_current > 0) {
 801ddaa:	687b      	ldr	r3, [r7, #4]
 801ddac:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801ddb0:	2b00      	cmp	r3, #0
 801ddb2:	d03b      	beq.n	801de2c <SHELL_Process+0x164>
                    context->hist_current--;
 801ddb4:	687b      	ldr	r3, [r7, #4]
 801ddb6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801ddba:	3b01      	subs	r3, #1
 801ddbc:	b29a      	uxth	r2, r3
 801ddbe:	687b      	ldr	r3, [r7, #4]
 801ddc0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                }
                break;
 801ddc4:	e032      	b.n	801de2c <SHELL_Process+0x164>
            case 'D': /* Left key */
                if (context->c_pos) {
 801ddc6:	687b      	ldr	r3, [r7, #4]
 801ddc8:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801ddcc:	2b00      	cmp	r3, #0
 801ddce:	d02f      	beq.n	801de30 <SHELL_Process+0x168>
                    context->printf_data_func("\b");
 801ddd0:	687b      	ldr	r3, [r7, #4]
 801ddd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ddd4:	486c      	ldr	r0, [pc, #432]	; (801df88 <SHELL_Process+0x2c0>)
 801ddd6:	4798      	blx	r3
                    context->c_pos--;
 801ddd8:	687b      	ldr	r3, [r7, #4]
 801ddda:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801ddde:	3b01      	subs	r3, #1
 801dde0:	b2da      	uxtb	r2, r3
 801dde2:	687b      	ldr	r3, [r7, #4]
 801dde4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                }
                break;
 801dde8:	e022      	b.n	801de30 <SHELL_Process+0x168>
            case 'C': /* Right key */
                if (context->c_pos < context->l_pos) {
 801ddea:	687b      	ldr	r3, [r7, #4]
 801ddec:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 801ddf0:	687b      	ldr	r3, [r7, #4]
 801ddf2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801ddf6:	429a      	cmp	r2, r3
 801ddf8:	d21c      	bcs.n	801de34 <SHELL_Process+0x16c>
                    context->printf_data_func("%c", context->line[context->c_pos]);
 801ddfa:	687b      	ldr	r3, [r7, #4]
 801ddfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ddfe:	687a      	ldr	r2, [r7, #4]
 801de00:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 801de04:	4611      	mov	r1, r2
 801de06:	687a      	ldr	r2, [r7, #4]
 801de08:	440a      	add	r2, r1
 801de0a:	7952      	ldrb	r2, [r2, #5]
 801de0c:	4611      	mov	r1, r2
 801de0e:	485f      	ldr	r0, [pc, #380]	; (801df8c <SHELL_Process+0x2c4>)
 801de10:	4798      	blx	r3
                    context->c_pos++;
 801de12:	687b      	ldr	r3, [r7, #4]
 801de14:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801de18:	3301      	adds	r3, #1
 801de1a:	b2da      	uxtb	r2, r3
 801de1c:	687b      	ldr	r3, [r7, #4]
 801de1e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                }
                break;
 801de22:	e007      	b.n	801de34 <SHELL_Process+0x16c>
            default:
                break;
 801de24:	bf00      	nop
 801de26:	e15d      	b.n	801e0e4 <SHELL_Process+0x41c>
                break;
 801de28:	bf00      	nop
 801de2a:	e15b      	b.n	801e0e4 <SHELL_Process+0x41c>
                break;
 801de2c:	bf00      	nop
 801de2e:	e159      	b.n	801e0e4 <SHELL_Process+0x41c>
                break;
 801de30:	bf00      	nop
 801de32:	e157      	b.n	801e0e4 <SHELL_Process+0x41c>
                break;
 801de34:	bf00      	nop
        }
        return;
 801de36:	e155      	b.n	801e0e4 <SHELL_Process+0x41c>
    }
    /* Handle tab key */
    else if (ch == '\t') {
 801de38:	7afb      	ldrb	r3, [r7, #11]
 801de3a:	2b09      	cmp	r3, #9
 801de3c:	d124      	bne.n	801de88 <SHELL_Process+0x1c0>
#if SHELL_AUTO_COMPLETE
        /* Move the cursor to the beginning of line */
        for (i = 0; i < context->c_pos; i++) {
 801de3e:	2300      	movs	r3, #0
 801de40:	60fb      	str	r3, [r7, #12]
 801de42:	e006      	b.n	801de52 <SHELL_Process+0x18a>
            context->printf_data_func("\b");
 801de44:	687b      	ldr	r3, [r7, #4]
 801de46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801de48:	484f      	ldr	r0, [pc, #316]	; (801df88 <SHELL_Process+0x2c0>)
 801de4a:	4798      	blx	r3
        for (i = 0; i < context->c_pos; i++) {
 801de4c:	68fb      	ldr	r3, [r7, #12]
 801de4e:	3301      	adds	r3, #1
 801de50:	60fb      	str	r3, [r7, #12]
 801de52:	687b      	ldr	r3, [r7, #4]
 801de54:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801de58:	461a      	mov	r2, r3
 801de5a:	68fb      	ldr	r3, [r7, #12]
 801de5c:	4293      	cmp	r3, r2
 801de5e:	dbf1      	blt.n	801de44 <SHELL_Process+0x17c>
        }
        /* Do auto complete */
        AutoComplete(context);
 801de60:	6878      	ldr	r0, [r7, #4]
 801de62:	f000 fb0f 	bl	801e484 <AutoComplete>
        /* Move position to end */
        context->c_pos = context->l_pos = StrLen(context->line);
 801de66:	687b      	ldr	r3, [r7, #4]
 801de68:	3305      	adds	r3, #5
 801de6a:	4618      	mov	r0, r3
 801de6c:	f000 fbb7 	bl	801e5de <StrLen>
 801de70:	4603      	mov	r3, r0
 801de72:	b2da      	uxtb	r2, r3
 801de74:	687b      	ldr	r3, [r7, #4]
 801de76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801de7a:	687b      	ldr	r3, [r7, #4]
 801de7c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 801de80:	687b      	ldr	r3, [r7, #4]
 801de82:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
#endif
        return;
 801de86:	e12d      	b.n	801e0e4 <SHELL_Process+0x41c>
    }
#if SHELL_SEARCH_IN_HIST
    /* Search command in history */
    else if ((ch == '`') && (context->l_pos == 0) && (context->line[0] == 0x00)) {
 801de88:	7afb      	ldrb	r3, [r7, #11]
 801de8a:	2b60      	cmp	r3, #96	; 0x60
 801de8c:	d108      	bne.n	801dea0 <SHELL_Process+0x1d8>
 801de8e:	687b      	ldr	r3, [r7, #4]
 801de90:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801de94:	2b00      	cmp	r3, #0
 801de96:	d103      	bne.n	801dea0 <SHELL_Process+0x1d8>
 801de98:	687b      	ldr	r3, [r7, #4]
 801de9a:	795b      	ldrb	r3, [r3, #5]
 801de9c:	2b00      	cmp	r3, #0
 801de9e:	d07b      	beq.n	801df98 <SHELL_Process+0x2d0>
    }
#endif
    /* Handle backspace key */
    else if ((ch == KET_DEL) || (ch == '\b')) {
 801dea0:	7afb      	ldrb	r3, [r7, #11]
 801dea2:	2b7f      	cmp	r3, #127	; 0x7f
 801dea4:	d002      	beq.n	801deac <SHELL_Process+0x1e4>
 801dea6:	7afb      	ldrb	r3, [r7, #11]
 801dea8:	2b08      	cmp	r3, #8
 801deaa:	d175      	bne.n	801df98 <SHELL_Process+0x2d0>
        /* There must be at last one char */
        if (context->c_pos == 0) {
 801deac:	687b      	ldr	r3, [r7, #4]
 801deae:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801deb2:	2b00      	cmp	r3, #0
 801deb4:	f000 8115 	beq.w	801e0e2 <SHELL_Process+0x41a>
            return;
        }

        context->l_pos--;
 801deb8:	687b      	ldr	r3, [r7, #4]
 801deba:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801debe:	3b01      	subs	r3, #1
 801dec0:	b2da      	uxtb	r2, r3
 801dec2:	687b      	ldr	r3, [r7, #4]
 801dec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        context->c_pos--;
 801dec8:	687b      	ldr	r3, [r7, #4]
 801deca:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801dece:	3b01      	subs	r3, #1
 801ded0:	b2da      	uxtb	r2, r3
 801ded2:	687b      	ldr	r3, [r7, #4]
 801ded4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

        if (context->l_pos > context->c_pos) {
 801ded8:	687b      	ldr	r3, [r7, #4]
 801deda:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 801dede:	687b      	ldr	r3, [r7, #4]
 801dee0:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801dee4:	429a      	cmp	r2, r3
 801dee6:	d940      	bls.n	801df6a <SHELL_Process+0x2a2>
            memmove(&context->line[context->c_pos], &context->line[context->c_pos + 1],
 801dee8:	687b      	ldr	r3, [r7, #4]
 801deea:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801deee:	461a      	mov	r2, r3
 801def0:	687b      	ldr	r3, [r7, #4]
 801def2:	4413      	add	r3, r2
 801def4:	1d58      	adds	r0, r3, #5
 801def6:	687b      	ldr	r3, [r7, #4]
 801def8:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801defc:	3301      	adds	r3, #1
 801defe:	687a      	ldr	r2, [r7, #4]
 801df00:	4413      	add	r3, r2
 801df02:	1d59      	adds	r1, r3, #5
                    context->l_pos - context->c_pos);
 801df04:	687b      	ldr	r3, [r7, #4]
 801df06:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801df0a:	461a      	mov	r2, r3
 801df0c:	687b      	ldr	r3, [r7, #4]
 801df0e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801df12:	1ad3      	subs	r3, r2, r3
            memmove(&context->line[context->c_pos], &context->line[context->c_pos + 1],
 801df14:	461a      	mov	r2, r3
 801df16:	f000 fe17 	bl	801eb48 <memmove>
            context->line[context->l_pos] = 0;
 801df1a:	687b      	ldr	r3, [r7, #4]
 801df1c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801df20:	461a      	mov	r2, r3
 801df22:	687b      	ldr	r3, [r7, #4]
 801df24:	4413      	add	r3, r2
 801df26:	2200      	movs	r2, #0
 801df28:	715a      	strb	r2, [r3, #5]
            context->printf_data_func("\b%s  \b", &context->line[context->c_pos]);
 801df2a:	687b      	ldr	r3, [r7, #4]
 801df2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801df2e:	687a      	ldr	r2, [r7, #4]
 801df30:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 801df34:	4611      	mov	r1, r2
 801df36:	687a      	ldr	r2, [r7, #4]
 801df38:	440a      	add	r2, r1
 801df3a:	3205      	adds	r2, #5
 801df3c:	4611      	mov	r1, r2
 801df3e:	4814      	ldr	r0, [pc, #80]	; (801df90 <SHELL_Process+0x2c8>)
 801df40:	4798      	blx	r3

            /* Reset position */
            for (i = context->c_pos; i <= context->l_pos; i++) {
 801df42:	687b      	ldr	r3, [r7, #4]
 801df44:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801df48:	60fb      	str	r3, [r7, #12]
 801df4a:	e006      	b.n	801df5a <SHELL_Process+0x292>
                context->printf_data_func("\b");
 801df4c:	687b      	ldr	r3, [r7, #4]
 801df4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801df50:	480d      	ldr	r0, [pc, #52]	; (801df88 <SHELL_Process+0x2c0>)
 801df52:	4798      	blx	r3
            for (i = context->c_pos; i <= context->l_pos; i++) {
 801df54:	68fb      	ldr	r3, [r7, #12]
 801df56:	3301      	adds	r3, #1
 801df58:	60fb      	str	r3, [r7, #12]
 801df5a:	687b      	ldr	r3, [r7, #4]
 801df5c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801df60:	461a      	mov	r2, r3
 801df62:	68fb      	ldr	r3, [r7, #12]
 801df64:	4293      	cmp	r3, r2
 801df66:	ddf1      	ble.n	801df4c <SHELL_Process+0x284>
        }  else  {
            /* Normal backspace operation */
            context->printf_data_func("\b \b");
            context->line[context->l_pos] = 0;
        }
        return;
 801df68:	e0bc      	b.n	801e0e4 <SHELL_Process+0x41c>
            context->printf_data_func("\b \b");
 801df6a:	687b      	ldr	r3, [r7, #4]
 801df6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801df6e:	4809      	ldr	r0, [pc, #36]	; (801df94 <SHELL_Process+0x2cc>)
 801df70:	4798      	blx	r3
            context->line[context->l_pos] = 0;
 801df72:	687b      	ldr	r3, [r7, #4]
 801df74:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801df78:	461a      	mov	r2, r3
 801df7a:	687b      	ldr	r3, [r7, #4]
 801df7c:	4413      	add	r3, r2
 801df7e:	2200      	movs	r2, #0
 801df80:	715a      	strb	r2, [r3, #5]
        return;
 801df82:	e0af      	b.n	801e0e4 <SHELL_Process+0x41c>
 801df84:	10000128 	.word	0x10000128
 801df88:	08025878 	.word	0x08025878
 801df8c:	0802587c 	.word	0x0802587c
 801df90:	08025880 	.word	0x08025880
 801df94:	08025888 	.word	0x08025888
    } else {
    }

    /* Input too long */
    if (context->l_pos >= (SHELL_BUFFER_SIZE - 1)) {
 801df98:	687b      	ldr	r3, [r7, #4]
 801df9a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801df9e:	2b3e      	cmp	r3, #62	; 0x3e
 801dfa0:	d903      	bls.n	801dfaa <SHELL_Process+0x2e2>
        context->l_pos = 0;
 801dfa2:	687b      	ldr	r3, [r7, #4]
 801dfa4:	2200      	movs	r2, #0
 801dfa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    }

    /* Handle end of line, break */
    if ((ch == '\r') || (ch == '\n')) {
 801dfaa:	7afb      	ldrb	r3, [r7, #11]
 801dfac:	2b0d      	cmp	r3, #13
 801dfae:	d002      	beq.n	801dfb6 <SHELL_Process+0x2ee>
 801dfb0:	7afb      	ldrb	r3, [r7, #11]
 801dfb2:	2b0a      	cmp	r3, #10
 801dfb4:	d125      	bne.n	801e002 <SHELL_Process+0x33a>
        context->printf_data_func("\r\n");
 801dfb6:	687b      	ldr	r3, [r7, #4]
 801dfb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dfba:	484c      	ldr	r0, [pc, #304]	; (801e0ec <SHELL_Process+0x424>)
 801dfbc:	4798      	blx	r3
        ProcessCommand(context, context->line);
 801dfbe:	687b      	ldr	r3, [r7, #4]
 801dfc0:	3305      	adds	r3, #5
 801dfc2:	4619      	mov	r1, r3
 801dfc4:	6878      	ldr	r0, [r7, #4]
 801dfc6:	f000 f8bd 	bl	801e144 <ProcessCommand>
        /* Reset all params */
        context->c_pos = context->l_pos = 0;
 801dfca:	687b      	ldr	r3, [r7, #4]
 801dfcc:	2200      	movs	r2, #0
 801dfce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801dfd2:	687b      	ldr	r3, [r7, #4]
 801dfd4:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 801dfd8:	687b      	ldr	r3, [r7, #4]
 801dfda:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        context->hist_current = 0;
 801dfde:	687b      	ldr	r3, [r7, #4]
 801dfe0:	2200      	movs	r2, #0
 801dfe2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
        context->printf_data_func(context->prompt);
 801dfe6:	687b      	ldr	r3, [r7, #4]
 801dfe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dfea:	687a      	ldr	r2, [r7, #4]
 801dfec:	6812      	ldr	r2, [r2, #0]
 801dfee:	4610      	mov	r0, r2
 801dff0:	4798      	blx	r3
        memset(context->line, 0, sizeof(context->line));
 801dff2:	687b      	ldr	r3, [r7, #4]
 801dff4:	3305      	adds	r3, #5
 801dff6:	2240      	movs	r2, #64	; 0x40
 801dff8:	2100      	movs	r1, #0
 801dffa:	4618      	mov	r0, r3
 801dffc:	f000 fdbe 	bl	801eb7c <memset>
        return;
 801e000:	e070      	b.n	801e0e4 <SHELL_Process+0x41c>
    }

    /* Normal character */
    if (context->c_pos < context->l_pos) {
 801e002:	687b      	ldr	r3, [r7, #4]
 801e004:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 801e008:	687b      	ldr	r3, [r7, #4]
 801e00a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801e00e:	429a      	cmp	r2, r3
 801e010:	d240      	bcs.n	801e094 <SHELL_Process+0x3cc>
        memmove(&context->line[context->c_pos + 1], &context->line[context->c_pos],
 801e012:	687b      	ldr	r3, [r7, #4]
 801e014:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801e018:	3301      	adds	r3, #1
 801e01a:	687a      	ldr	r2, [r7, #4]
 801e01c:	4413      	add	r3, r2
 801e01e:	1d58      	adds	r0, r3, #5
 801e020:	687b      	ldr	r3, [r7, #4]
 801e022:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801e026:	461a      	mov	r2, r3
 801e028:	687b      	ldr	r3, [r7, #4]
 801e02a:	4413      	add	r3, r2
 801e02c:	1d59      	adds	r1, r3, #5
                context->l_pos - context->c_pos);
 801e02e:	687b      	ldr	r3, [r7, #4]
 801e030:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801e034:	461a      	mov	r2, r3
 801e036:	687b      	ldr	r3, [r7, #4]
 801e038:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801e03c:	1ad3      	subs	r3, r2, r3
        memmove(&context->line[context->c_pos + 1], &context->line[context->c_pos],
 801e03e:	461a      	mov	r2, r3
 801e040:	f000 fd82 	bl	801eb48 <memmove>
        context->line[context->c_pos] = ch;
 801e044:	687b      	ldr	r3, [r7, #4]
 801e046:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801e04a:	461a      	mov	r2, r3
 801e04c:	687b      	ldr	r3, [r7, #4]
 801e04e:	4413      	add	r3, r2
 801e050:	7afa      	ldrb	r2, [r7, #11]
 801e052:	715a      	strb	r2, [r3, #5]
        context->printf_data_func("%s", &context->line[context->c_pos]);
 801e054:	687b      	ldr	r3, [r7, #4]
 801e056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e058:	687a      	ldr	r2, [r7, #4]
 801e05a:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 801e05e:	4611      	mov	r1, r2
 801e060:	687a      	ldr	r2, [r7, #4]
 801e062:	440a      	add	r2, r1
 801e064:	3205      	adds	r2, #5
 801e066:	4611      	mov	r1, r2
 801e068:	4821      	ldr	r0, [pc, #132]	; (801e0f0 <SHELL_Process+0x428>)
 801e06a:	4798      	blx	r3
        /* Move the cursor to new position */
        for (i = context->c_pos; i < context->l_pos; i++)
 801e06c:	687b      	ldr	r3, [r7, #4]
 801e06e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801e072:	60fb      	str	r3, [r7, #12]
 801e074:	e006      	b.n	801e084 <SHELL_Process+0x3bc>
        {
            context->printf_data_func("\b");
 801e076:	687b      	ldr	r3, [r7, #4]
 801e078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e07a:	481e      	ldr	r0, [pc, #120]	; (801e0f4 <SHELL_Process+0x42c>)
 801e07c:	4798      	blx	r3
        for (i = context->c_pos; i < context->l_pos; i++)
 801e07e:	68fb      	ldr	r3, [r7, #12]
 801e080:	3301      	adds	r3, #1
 801e082:	60fb      	str	r3, [r7, #12]
 801e084:	687b      	ldr	r3, [r7, #4]
 801e086:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801e08a:	461a      	mov	r2, r3
 801e08c:	68fb      	ldr	r3, [r7, #12]
 801e08e:	4293      	cmp	r3, r2
 801e090:	dbf1      	blt.n	801e076 <SHELL_Process+0x3ae>
 801e092:	e00d      	b.n	801e0b0 <SHELL_Process+0x3e8>
        }
    } else {
        context->line[context->l_pos] = ch;
 801e094:	687b      	ldr	r3, [r7, #4]
 801e096:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801e09a:	461a      	mov	r2, r3
 801e09c:	687b      	ldr	r3, [r7, #4]
 801e09e:	4413      	add	r3, r2
 801e0a0:	7afa      	ldrb	r2, [r7, #11]
 801e0a2:	715a      	strb	r2, [r3, #5]
        context->printf_data_func("%c", ch);
 801e0a4:	687b      	ldr	r3, [r7, #4]
 801e0a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e0a8:	7afa      	ldrb	r2, [r7, #11]
 801e0aa:	4611      	mov	r1, r2
 801e0ac:	4812      	ldr	r0, [pc, #72]	; (801e0f8 <SHELL_Process+0x430>)
 801e0ae:	4798      	blx	r3
    }

    ch = 0;
 801e0b0:	2300      	movs	r3, #0
 801e0b2:	72fb      	strb	r3, [r7, #11]
    context->l_pos++;
 801e0b4:	687b      	ldr	r3, [r7, #4]
 801e0b6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801e0ba:	3301      	adds	r3, #1
 801e0bc:	b2da      	uxtb	r2, r3
 801e0be:	687b      	ldr	r3, [r7, #4]
 801e0c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    context->c_pos++;
 801e0c4:	687b      	ldr	r3, [r7, #4]
 801e0c6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801e0ca:	3301      	adds	r3, #1
 801e0cc:	b2da      	uxtb	r2, r3
 801e0ce:	687b      	ldr	r3, [r7, #4]
 801e0d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 801e0d4:	e006      	b.n	801e0e4 <SHELL_Process+0x41c>
        return;
 801e0d6:	bf00      	nop
 801e0d8:	e004      	b.n	801e0e4 <SHELL_Process+0x41c>
        return;
 801e0da:	bf00      	nop
 801e0dc:	e002      	b.n	801e0e4 <SHELL_Process+0x41c>
      return;
 801e0de:	bf00      	nop
 801e0e0:	e000      	b.n	801e0e4 <SHELL_Process+0x41c>
            return;
 801e0e2:	bf00      	nop
}
 801e0e4:	3710      	adds	r7, #16
 801e0e6:	46bd      	mov	sp, r7
 801e0e8:	bd80      	pop	{r7, pc}
 801e0ea:	bf00      	nop
 801e0ec:	0802588c 	.word	0x0802588c
 801e0f0:	08025890 	.word	0x08025890
 801e0f4:	08025878 	.word	0x08025878
 801e0f8:	0802587c 	.word	0x0802587c

0801e0fc <HelpCommand>:

/********************** Internal Function Definitions *************************/
static int32_t HelpCommand(p_shell_context_t context, int32_t argc, char **argv)
{
 801e0fc:	b580      	push	{r7, lr}
 801e0fe:	b086      	sub	sp, #24
 801e100:	af00      	add	r7, sp, #0
 801e102:	60f8      	str	r0, [r7, #12]
 801e104:	60b9      	str	r1, [r7, #8]
 801e106:	607a      	str	r2, [r7, #4]
    uint8_t i = 0;
 801e108:	2300      	movs	r3, #0
 801e10a:	75fb      	strb	r3, [r7, #23]

    for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 801e10c:	2300      	movs	r3, #0
 801e10e:	75fb      	strb	r3, [r7, #23]
 801e110:	e00b      	b.n	801e12a <HelpCommand+0x2e>
        context->printf_data_func(g_RegisteredCommands.CommandList[i]->pcHelpString);
 801e112:	68fb      	ldr	r3, [r7, #12]
 801e114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e116:	7dfa      	ldrb	r2, [r7, #23]
 801e118:	4909      	ldr	r1, [pc, #36]	; (801e140 <HelpCommand+0x44>)
 801e11a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801e11e:	6852      	ldr	r2, [r2, #4]
 801e120:	4610      	mov	r0, r2
 801e122:	4798      	blx	r3
    for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 801e124:	7dfb      	ldrb	r3, [r7, #23]
 801e126:	3301      	adds	r3, #1
 801e128:	75fb      	strb	r3, [r7, #23]
 801e12a:	4b05      	ldr	r3, [pc, #20]	; (801e140 <HelpCommand+0x44>)
 801e12c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 801e130:	7dfa      	ldrb	r2, [r7, #23]
 801e132:	429a      	cmp	r2, r3
 801e134:	d3ed      	bcc.n	801e112 <HelpCommand+0x16>
    }
    return 0;
 801e136:	2300      	movs	r3, #0
}
 801e138:	4618      	mov	r0, r3
 801e13a:	3718      	adds	r7, #24
 801e13c:	46bd      	mov	sp, r7
 801e13e:	bd80      	pop	{r7, pc}
 801e140:	20001ae4 	.word	0x20001ae4

0801e144 <ProcessCommand>:
//    context->exit = true;
//    return 0;
//}

static void ProcessCommand(p_shell_context_t context, const char *cmd)
{
 801e144:	b5b0      	push	{r4, r5, r7, lr}
 801e146:	b0c6      	sub	sp, #280	; 0x118
 801e148:	af00      	add	r7, sp, #0
 801e14a:	1d3b      	adds	r3, r7, #4
 801e14c:	6018      	str	r0, [r3, #0]
 801e14e:	463b      	mov	r3, r7
 801e150:	6019      	str	r1, [r3, #0]
    static const shell_command_context_t *tmpCommand = NULL;
    static const char *tmpCommandString;
    int32_t argc;
    char *argv[SHELL_BUFFER_SIZE];
    uint8_t flag = 1;
 801e152:	2301      	movs	r3, #1
 801e154:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    uint8_t tmpCommandLen;
    uint8_t tmpLen;
    uint8_t i = 0;
 801e158:	2300      	movs	r3, #0
 801e15a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

    tmpLen = StrLen(cmd);
 801e15e:	463b      	mov	r3, r7
 801e160:	6818      	ldr	r0, [r3, #0]
 801e162:	f000 fa3c 	bl	801e5de <StrLen>
 801e166:	4603      	mov	r3, r0
 801e168:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
    argc = ParseLine(cmd, tmpLen, argv);
 801e16c:	f897 1115 	ldrb.w	r1, [r7, #277]	; 0x115
 801e170:	f107 020c 	add.w	r2, r7, #12
 801e174:	463b      	mov	r3, r7
 801e176:	6818      	ldr	r0, [r3, #0]
 801e178:	f000 fa70 	bl	801e65c <ParseLine>
 801e17c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    if ((tmpCommand == NULL) && (argc > 0)) {
 801e180:	4b8b      	ldr	r3, [pc, #556]	; (801e3b0 <ProcessCommand+0x26c>)
 801e182:	681b      	ldr	r3, [r3, #0]
 801e184:	2b00      	cmp	r3, #0
 801e186:	d168      	bne.n	801e25a <ProcessCommand+0x116>
 801e188:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801e18c:	2b00      	cmp	r3, #0
 801e18e:	dd64      	ble.n	801e25a <ProcessCommand+0x116>
        for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 801e190:	2300      	movs	r3, #0
 801e192:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 801e196:	e057      	b.n	801e248 <ProcessCommand+0x104>
            tmpCommand = g_RegisteredCommands.CommandList[i];
 801e198:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801e19c:	4a85      	ldr	r2, [pc, #532]	; (801e3b4 <ProcessCommand+0x270>)
 801e19e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e1a2:	4a83      	ldr	r2, [pc, #524]	; (801e3b0 <ProcessCommand+0x26c>)
 801e1a4:	6013      	str	r3, [r2, #0]
            tmpCommandString = tmpCommand->pcCommand;
 801e1a6:	4b82      	ldr	r3, [pc, #520]	; (801e3b0 <ProcessCommand+0x26c>)
 801e1a8:	681b      	ldr	r3, [r3, #0]
 801e1aa:	681b      	ldr	r3, [r3, #0]
 801e1ac:	4a82      	ldr	r2, [pc, #520]	; (801e3b8 <ProcessCommand+0x274>)
 801e1ae:	6013      	str	r3, [r2, #0]
            tmpCommandLen = StrLen(tmpCommandString);
 801e1b0:	4b81      	ldr	r3, [pc, #516]	; (801e3b8 <ProcessCommand+0x274>)
 801e1b2:	681b      	ldr	r3, [r3, #0]
 801e1b4:	4618      	mov	r0, r3
 801e1b6:	f000 fa12 	bl	801e5de <StrLen>
 801e1ba:	4603      	mov	r3, r0
 801e1bc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
            /* Compare with space or end of string */
            if ((cmd[tmpCommandLen] == ' ') || (cmd[tmpCommandLen] == 0x00)) {
 801e1c0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 801e1c4:	463a      	mov	r2, r7
 801e1c6:	6812      	ldr	r2, [r2, #0]
 801e1c8:	4413      	add	r3, r2
 801e1ca:	781b      	ldrb	r3, [r3, #0]
 801e1cc:	2b20      	cmp	r3, #32
 801e1ce:	d007      	beq.n	801e1e0 <ProcessCommand+0x9c>
 801e1d0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 801e1d4:	463a      	mov	r2, r7
 801e1d6:	6812      	ldr	r2, [r2, #0]
 801e1d8:	4413      	add	r3, r2
 801e1da:	781b      	ldrb	r3, [r3, #0]
 801e1dc:	2b00      	cmp	r3, #0
 801e1de:	d12e      	bne.n	801e23e <ProcessCommand+0xfa>
                if (StrCompare(tmpCommandString, argv[0], tmpCommandLen) == 0) {
 801e1e0:	4b75      	ldr	r3, [pc, #468]	; (801e3b8 <ProcessCommand+0x274>)
 801e1e2:	6818      	ldr	r0, [r3, #0]
 801e1e4:	f107 030c 	add.w	r3, r7, #12
 801e1e8:	681b      	ldr	r3, [r3, #0]
 801e1ea:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 801e1ee:	4619      	mov	r1, r3
 801e1f0:	f000 fa0d 	bl	801e60e <StrCompare>
 801e1f4:	4603      	mov	r3, r0
 801e1f6:	2b00      	cmp	r3, #0
 801e1f8:	d121      	bne.n	801e23e <ProcessCommand+0xfa>
                    if ((tmpCommand->cExpectedNumberOfParameters == 0) && (argc == 1)) {
 801e1fa:	4b6d      	ldr	r3, [pc, #436]	; (801e3b0 <ProcessCommand+0x26c>)
 801e1fc:	681b      	ldr	r3, [r3, #0]
 801e1fe:	7b1b      	ldrb	r3, [r3, #12]
 801e200:	2b00      	cmp	r3, #0
 801e202:	d107      	bne.n	801e214 <ProcessCommand+0xd0>
 801e204:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801e208:	2b01      	cmp	r3, #1
 801e20a:	d103      	bne.n	801e214 <ProcessCommand+0xd0>
                        flag = 0;
 801e20c:	2300      	movs	r3, #0
 801e20e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
                            flag = 0;
                        }
                    } else {
                        flag = 1;
                    }
                    break;
 801e212:	e021      	b.n	801e258 <ProcessCommand+0x114>
                    } else if (tmpCommand->cExpectedNumberOfParameters > 0) {
 801e214:	4b66      	ldr	r3, [pc, #408]	; (801e3b0 <ProcessCommand+0x26c>)
 801e216:	681b      	ldr	r3, [r3, #0]
 801e218:	7b1b      	ldrb	r3, [r3, #12]
 801e21a:	2b00      	cmp	r3, #0
 801e21c:	d00b      	beq.n	801e236 <ProcessCommand+0xf2>
                        if ((argc - 1) == tmpCommand->cExpectedNumberOfParameters) {
 801e21e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801e222:	3b01      	subs	r3, #1
 801e224:	4a62      	ldr	r2, [pc, #392]	; (801e3b0 <ProcessCommand+0x26c>)
 801e226:	6812      	ldr	r2, [r2, #0]
 801e228:	7b12      	ldrb	r2, [r2, #12]
 801e22a:	4293      	cmp	r3, r2
 801e22c:	d114      	bne.n	801e258 <ProcessCommand+0x114>
                            flag = 0;
 801e22e:	2300      	movs	r3, #0
 801e230:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
                    break;
 801e234:	e010      	b.n	801e258 <ProcessCommand+0x114>
                        flag = 1;
 801e236:	2301      	movs	r3, #1
 801e238:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
                    break;
 801e23c:	e00c      	b.n	801e258 <ProcessCommand+0x114>
        for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 801e23e:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801e242:	3301      	adds	r3, #1
 801e244:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 801e248:	4b5a      	ldr	r3, [pc, #360]	; (801e3b4 <ProcessCommand+0x270>)
 801e24a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 801e24e:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 801e252:	429a      	cmp	r2, r3
 801e254:	d3a0      	bcc.n	801e198 <ProcessCommand+0x54>
 801e256:	e000      	b.n	801e25a <ProcessCommand+0x116>
                    break;
 801e258:	bf00      	nop
                }
            }
        }
    }

    if ((tmpCommand != NULL) && (flag == 1U)) {
 801e25a:	4b55      	ldr	r3, [pc, #340]	; (801e3b0 <ProcessCommand+0x26c>)
 801e25c:	681b      	ldr	r3, [r3, #0]
 801e25e:	2b00      	cmp	r3, #0
 801e260:	d00c      	beq.n	801e27c <ProcessCommand+0x138>
 801e262:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801e266:	2b01      	cmp	r3, #1
 801e268:	d108      	bne.n	801e27c <ProcessCommand+0x138>
        context->printf_data_func(
 801e26a:	1d3b      	adds	r3, r7, #4
 801e26c:	681b      	ldr	r3, [r3, #0]
 801e26e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e270:	4852      	ldr	r0, [pc, #328]	; (801e3bc <ProcessCommand+0x278>)
 801e272:	4798      	blx	r3
            "\r\nIncorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n");
        tmpCommand = NULL;
 801e274:	4b4e      	ldr	r3, [pc, #312]	; (801e3b0 <ProcessCommand+0x26c>)
 801e276:	2200      	movs	r2, #0
 801e278:	601a      	str	r2, [r3, #0]
    } else {
        // context->printf_data_func(
        //     "\r\nCommand not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n");
        tmpCommand = NULL;
    }
}
 801e27a:	e093      	b.n	801e3a4 <ProcessCommand+0x260>
    } else if (tmpCommand != NULL) {
 801e27c:	4b4c      	ldr	r3, [pc, #304]	; (801e3b0 <ProcessCommand+0x26c>)
 801e27e:	681b      	ldr	r3, [r3, #0]
 801e280:	2b00      	cmp	r3, #0
 801e282:	f000 808c 	beq.w	801e39e <ProcessCommand+0x25a>
        tmpLen = StrLen(cmd);
 801e286:	463b      	mov	r3, r7
 801e288:	6818      	ldr	r0, [r3, #0]
 801e28a:	f000 f9a8 	bl	801e5de <StrLen>
 801e28e:	4603      	mov	r3, r0
 801e290:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
        if (tmpLen != StrCompare(cmd, context->hist_buf[0], StrLen(cmd))) {
 801e294:	f897 4115 	ldrb.w	r4, [r7, #277]	; 0x115
 801e298:	1d3b      	adds	r3, r7, #4
 801e29a:	681b      	ldr	r3, [r3, #0]
 801e29c:	f103 0558 	add.w	r5, r3, #88	; 0x58
 801e2a0:	463b      	mov	r3, r7
 801e2a2:	6818      	ldr	r0, [r3, #0]
 801e2a4:	f000 f99b 	bl	801e5de <StrLen>
 801e2a8:	4602      	mov	r2, r0
 801e2aa:	463b      	mov	r3, r7
 801e2ac:	4629      	mov	r1, r5
 801e2ae:	6818      	ldr	r0, [r3, #0]
 801e2b0:	f000 f9ad 	bl	801e60e <StrCompare>
 801e2b4:	4603      	mov	r3, r0
 801e2b6:	429c      	cmp	r4, r3
 801e2b8:	d063      	beq.n	801e382 <ProcessCommand+0x23e>
            for (i = SHELL_HIST_MAX - 1; i > 0; i--) {
 801e2ba:	2302      	movs	r3, #2
 801e2bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 801e2c0:	e032      	b.n	801e328 <ProcessCommand+0x1e4>
                memset(context->hist_buf[i], '\0', SHELL_BUFFER_SIZE);
 801e2c2:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801e2c6:	1d3a      	adds	r2, r7, #4
 801e2c8:	019b      	lsls	r3, r3, #6
 801e2ca:	3358      	adds	r3, #88	; 0x58
 801e2cc:	6812      	ldr	r2, [r2, #0]
 801e2ce:	4413      	add	r3, r2
 801e2d0:	2240      	movs	r2, #64	; 0x40
 801e2d2:	2100      	movs	r1, #0
 801e2d4:	4618      	mov	r0, r3
 801e2d6:	f000 fc51 	bl	801eb7c <memset>
                tmpLen = StrLen(context->hist_buf[i - 1]);
 801e2da:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801e2de:	3b01      	subs	r3, #1
 801e2e0:	1d3a      	adds	r2, r7, #4
 801e2e2:	019b      	lsls	r3, r3, #6
 801e2e4:	3358      	adds	r3, #88	; 0x58
 801e2e6:	6812      	ldr	r2, [r2, #0]
 801e2e8:	4413      	add	r3, r2
 801e2ea:	4618      	mov	r0, r3
 801e2ec:	f000 f977 	bl	801e5de <StrLen>
 801e2f0:	4603      	mov	r3, r0
 801e2f2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
                StrCopy(context->hist_buf[i], context->hist_buf[i - 1], tmpLen);
 801e2f6:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801e2fa:	1d3a      	adds	r2, r7, #4
 801e2fc:	019b      	lsls	r3, r3, #6
 801e2fe:	3358      	adds	r3, #88	; 0x58
 801e300:	6812      	ldr	r2, [r2, #0]
 801e302:	18d0      	adds	r0, r2, r3
 801e304:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801e308:	3b01      	subs	r3, #1
 801e30a:	1d3a      	adds	r2, r7, #4
 801e30c:	019b      	lsls	r3, r3, #6
 801e30e:	3358      	adds	r3, #88	; 0x58
 801e310:	6812      	ldr	r2, [r2, #0]
 801e312:	4413      	add	r3, r2
 801e314:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 801e318:	4619      	mov	r1, r3
 801e31a:	f000 f93d 	bl	801e598 <StrCopy>
            for (i = SHELL_HIST_MAX - 1; i > 0; i--) {
 801e31e:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801e322:	3b01      	subs	r3, #1
 801e324:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 801e328:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801e32c:	2b00      	cmp	r3, #0
 801e32e:	d1c8      	bne.n	801e2c2 <ProcessCommand+0x17e>
            memset(context->hist_buf[0], '\0', SHELL_BUFFER_SIZE);
 801e330:	1d3b      	adds	r3, r7, #4
 801e332:	681b      	ldr	r3, [r3, #0]
 801e334:	3358      	adds	r3, #88	; 0x58
 801e336:	2240      	movs	r2, #64	; 0x40
 801e338:	2100      	movs	r1, #0
 801e33a:	4618      	mov	r0, r3
 801e33c:	f000 fc1e 	bl	801eb7c <memset>
            tmpLen = StrLen(cmd);
 801e340:	463b      	mov	r3, r7
 801e342:	6818      	ldr	r0, [r3, #0]
 801e344:	f000 f94b 	bl	801e5de <StrLen>
 801e348:	4603      	mov	r3, r0
 801e34a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
            StrCopy(context->hist_buf[0], cmd, tmpLen);
 801e34e:	1d3b      	adds	r3, r7, #4
 801e350:	681b      	ldr	r3, [r3, #0]
 801e352:	f103 0058 	add.w	r0, r3, #88	; 0x58
 801e356:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 801e35a:	463b      	mov	r3, r7
 801e35c:	6819      	ldr	r1, [r3, #0]
 801e35e:	f000 f91b 	bl	801e598 <StrCopy>
            if (context->hist_count < SHELL_HIST_MAX) {
 801e362:	1d3b      	adds	r3, r7, #4
 801e364:	681b      	ldr	r3, [r3, #0]
 801e366:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801e36a:	2b02      	cmp	r3, #2
 801e36c:	d809      	bhi.n	801e382 <ProcessCommand+0x23e>
                context->hist_count++;
 801e36e:	1d3b      	adds	r3, r7, #4
 801e370:	681b      	ldr	r3, [r3, #0]
 801e372:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801e376:	3301      	adds	r3, #1
 801e378:	b29a      	uxth	r2, r3
 801e37a:	1d3b      	adds	r3, r7, #4
 801e37c:	681b      	ldr	r3, [r3, #0]
 801e37e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
        tmpCommand->pFuncCallBack(context, argc, argv);
 801e382:	4b0b      	ldr	r3, [pc, #44]	; (801e3b0 <ProcessCommand+0x26c>)
 801e384:	681b      	ldr	r3, [r3, #0]
 801e386:	689b      	ldr	r3, [r3, #8]
 801e388:	f107 020c 	add.w	r2, r7, #12
 801e38c:	1d38      	adds	r0, r7, #4
 801e38e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 801e392:	6800      	ldr	r0, [r0, #0]
 801e394:	4798      	blx	r3
        tmpCommand = NULL;
 801e396:	4b06      	ldr	r3, [pc, #24]	; (801e3b0 <ProcessCommand+0x26c>)
 801e398:	2200      	movs	r2, #0
 801e39a:	601a      	str	r2, [r3, #0]
}
 801e39c:	e002      	b.n	801e3a4 <ProcessCommand+0x260>
        tmpCommand = NULL;
 801e39e:	4b04      	ldr	r3, [pc, #16]	; (801e3b0 <ProcessCommand+0x26c>)
 801e3a0:	2200      	movs	r2, #0
 801e3a2:	601a      	str	r2, [r3, #0]
}
 801e3a4:	bf00      	nop
 801e3a6:	f507 778c 	add.w	r7, r7, #280	; 0x118
 801e3aa:	46bd      	mov	sp, r7
 801e3ac:	bdb0      	pop	{r4, r5, r7, pc}
 801e3ae:	bf00      	nop
 801e3b0:	20001bc8 	.word	0x20001bc8
 801e3b4:	20001ae4 	.word	0x20001ae4
 801e3b8:	20001bcc 	.word	0x20001bcc
 801e3bc:	08025894 	.word	0x08025894

0801e3c0 <GetHistoryCommand>:

static void GetHistoryCommand(p_shell_context_t context, uint8_t hist_pos)
{
 801e3c0:	b580      	push	{r7, lr}
 801e3c2:	b084      	sub	sp, #16
 801e3c4:	af00      	add	r7, sp, #0
 801e3c6:	6078      	str	r0, [r7, #4]
 801e3c8:	460b      	mov	r3, r1
 801e3ca:	70fb      	strb	r3, [r7, #3]
    uint8_t i;
    uint32_t tmp;

    if (context->hist_buf[0][0] == '\0') {
 801e3cc:	687b      	ldr	r3, [r7, #4]
 801e3ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801e3d2:	2b00      	cmp	r3, #0
 801e3d4:	d104      	bne.n	801e3e0 <GetHistoryCommand+0x20>
        context->hist_current = 0;
 801e3d6:	687b      	ldr	r3, [r7, #4]
 801e3d8:	2200      	movs	r2, #0
 801e3da:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
        return;
 801e3de:	e04c      	b.n	801e47a <GetHistoryCommand+0xba>
    }

    if (hist_pos > SHELL_HIST_MAX) {
 801e3e0:	78fb      	ldrb	r3, [r7, #3]
 801e3e2:	2b03      	cmp	r3, #3
 801e3e4:	d901      	bls.n	801e3ea <GetHistoryCommand+0x2a>
        hist_pos = SHELL_HIST_MAX - 1;
 801e3e6:	2302      	movs	r3, #2
 801e3e8:	70fb      	strb	r3, [r7, #3]
    }
    tmp = StrLen(context->line);
 801e3ea:	687b      	ldr	r3, [r7, #4]
 801e3ec:	3305      	adds	r3, #5
 801e3ee:	4618      	mov	r0, r3
 801e3f0:	f000 f8f5 	bl	801e5de <StrLen>
 801e3f4:	4603      	mov	r3, r0
 801e3f6:	60bb      	str	r3, [r7, #8]
    /* Clear current if have */
    if (tmp > 0) {
 801e3f8:	68bb      	ldr	r3, [r7, #8]
 801e3fa:	2b00      	cmp	r3, #0
 801e3fc:	d014      	beq.n	801e428 <GetHistoryCommand+0x68>
        memset(context->line, '\0', tmp);
 801e3fe:	687b      	ldr	r3, [r7, #4]
 801e400:	3305      	adds	r3, #5
 801e402:	68ba      	ldr	r2, [r7, #8]
 801e404:	2100      	movs	r1, #0
 801e406:	4618      	mov	r0, r3
 801e408:	f000 fbb8 	bl	801eb7c <memset>
        for (i = 0; i < tmp; i++) {
 801e40c:	2300      	movs	r3, #0
 801e40e:	73fb      	strb	r3, [r7, #15]
 801e410:	e006      	b.n	801e420 <GetHistoryCommand+0x60>
            context->printf_data_func("\b \b");
 801e412:	687b      	ldr	r3, [r7, #4]
 801e414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e416:	481a      	ldr	r0, [pc, #104]	; (801e480 <GetHistoryCommand+0xc0>)
 801e418:	4798      	blx	r3
        for (i = 0; i < tmp; i++) {
 801e41a:	7bfb      	ldrb	r3, [r7, #15]
 801e41c:	3301      	adds	r3, #1
 801e41e:	73fb      	strb	r3, [r7, #15]
 801e420:	7bfb      	ldrb	r3, [r7, #15]
 801e422:	68ba      	ldr	r2, [r7, #8]
 801e424:	429a      	cmp	r2, r3
 801e426:	d8f4      	bhi.n	801e412 <GetHistoryCommand+0x52>
        }
    }

    context->l_pos = StrLen(context->hist_buf[hist_pos]);
 801e428:	78fb      	ldrb	r3, [r7, #3]
 801e42a:	019b      	lsls	r3, r3, #6
 801e42c:	3358      	adds	r3, #88	; 0x58
 801e42e:	687a      	ldr	r2, [r7, #4]
 801e430:	4413      	add	r3, r2
 801e432:	4618      	mov	r0, r3
 801e434:	f000 f8d3 	bl	801e5de <StrLen>
 801e438:	4603      	mov	r3, r0
 801e43a:	b2da      	uxtb	r2, r3
 801e43c:	687b      	ldr	r3, [r7, #4]
 801e43e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    context->c_pos = context->l_pos;
 801e442:	687b      	ldr	r3, [r7, #4]
 801e444:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 801e448:	687b      	ldr	r3, [r7, #4]
 801e44a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    StrCopy(context->line, context->hist_buf[hist_pos], context->l_pos);
 801e44e:	687b      	ldr	r3, [r7, #4]
 801e450:	1d58      	adds	r0, r3, #5
 801e452:	78fb      	ldrb	r3, [r7, #3]
 801e454:	019b      	lsls	r3, r3, #6
 801e456:	3358      	adds	r3, #88	; 0x58
 801e458:	687a      	ldr	r2, [r7, #4]
 801e45a:	18d1      	adds	r1, r2, r3
 801e45c:	687b      	ldr	r3, [r7, #4]
 801e45e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801e462:	461a      	mov	r2, r3
 801e464:	f000 f898 	bl	801e598 <StrCopy>
    context->printf_data_func(context->hist_buf[hist_pos]);
 801e468:	687b      	ldr	r3, [r7, #4]
 801e46a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e46c:	78fa      	ldrb	r2, [r7, #3]
 801e46e:	0192      	lsls	r2, r2, #6
 801e470:	3258      	adds	r2, #88	; 0x58
 801e472:	6879      	ldr	r1, [r7, #4]
 801e474:	440a      	add	r2, r1
 801e476:	4610      	mov	r0, r2
 801e478:	4798      	blx	r3
}
 801e47a:	3710      	adds	r7, #16
 801e47c:	46bd      	mov	sp, r7
 801e47e:	bd80      	pop	{r7, pc}
 801e480:	08025888 	.word	0x08025888

0801e484 <AutoComplete>:

static void AutoComplete(p_shell_context_t context)
{
 801e484:	b590      	push	{r4, r7, lr}
 801e486:	b089      	sub	sp, #36	; 0x24
 801e488:	af00      	add	r7, sp, #0
 801e48a:	6078      	str	r0, [r7, #4]
    int32_t len;
    int32_t minLen;
    uint8_t i = 0;
 801e48c:	2300      	movs	r3, #0
 801e48e:	75fb      	strb	r3, [r7, #23]
    const shell_command_context_t *tmpCommand = NULL;
 801e490:	2300      	movs	r3, #0
 801e492:	60fb      	str	r3, [r7, #12]
    const char *namePtr;
    const char *cmdName;

    minLen = 0;
 801e494:	2300      	movs	r3, #0
 801e496:	61bb      	str	r3, [r7, #24]
    namePtr = NULL;
 801e498:	2300      	movs	r3, #0
 801e49a:	613b      	str	r3, [r7, #16]

    if (!StrLen(context->line)) {
 801e49c:	687b      	ldr	r3, [r7, #4]
 801e49e:	3305      	adds	r3, #5
 801e4a0:	4618      	mov	r0, r3
 801e4a2:	f000 f89c 	bl	801e5de <StrLen>
 801e4a6:	4603      	mov	r3, r0
 801e4a8:	2b00      	cmp	r3, #0
 801e4aa:	d069      	beq.n	801e580 <AutoComplete+0xfc>
        return;
    }
    context->printf_data_func("\r\n");
 801e4ac:	687b      	ldr	r3, [r7, #4]
 801e4ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e4b0:	4835      	ldr	r0, [pc, #212]	; (801e588 <AutoComplete+0x104>)
 801e4b2:	4798      	blx	r3
    /* Empty tab, list all commands */
    if (context->line[0] == '\0') {
 801e4b4:	687b      	ldr	r3, [r7, #4]
 801e4b6:	795b      	ldrb	r3, [r3, #5]
 801e4b8:	2b00      	cmp	r3, #0
 801e4ba:	d105      	bne.n	801e4c8 <AutoComplete+0x44>
        HelpCommand(context, 0, NULL);
 801e4bc:	2200      	movs	r2, #0
 801e4be:	2100      	movs	r1, #0
 801e4c0:	6878      	ldr	r0, [r7, #4]
 801e4c2:	f7ff fe1b 	bl	801e0fc <HelpCommand>
        return;
 801e4c6:	e05c      	b.n	801e582 <AutoComplete+0xfe>
    }
    /* Do auto complete */
    for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 801e4c8:	2300      	movs	r3, #0
 801e4ca:	75fb      	strb	r3, [r7, #23]
 801e4cc:	e03f      	b.n	801e54e <AutoComplete+0xca>
        tmpCommand = g_RegisteredCommands.CommandList[i];
 801e4ce:	7dfb      	ldrb	r3, [r7, #23]
 801e4d0:	4a2e      	ldr	r2, [pc, #184]	; (801e58c <AutoComplete+0x108>)
 801e4d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e4d6:	60fb      	str	r3, [r7, #12]
        cmdName = tmpCommand->pcCommand;
 801e4d8:	68fb      	ldr	r3, [r7, #12]
 801e4da:	681b      	ldr	r3, [r3, #0]
 801e4dc:	60bb      	str	r3, [r7, #8]
        if (StrCompare(context->line, cmdName, StrLen(context->line)) == 0) {
 801e4de:	687b      	ldr	r3, [r7, #4]
 801e4e0:	1d5c      	adds	r4, r3, #5
 801e4e2:	687b      	ldr	r3, [r7, #4]
 801e4e4:	3305      	adds	r3, #5
 801e4e6:	4618      	mov	r0, r3
 801e4e8:	f000 f879 	bl	801e5de <StrLen>
 801e4ec:	4603      	mov	r3, r0
 801e4ee:	461a      	mov	r2, r3
 801e4f0:	68b9      	ldr	r1, [r7, #8]
 801e4f2:	4620      	mov	r0, r4
 801e4f4:	f000 f88b 	bl	801e60e <StrCompare>
 801e4f8:	4603      	mov	r3, r0
 801e4fa:	2b00      	cmp	r3, #0
 801e4fc:	d124      	bne.n	801e548 <AutoComplete+0xc4>
            if (minLen == 0) {
 801e4fe:	69bb      	ldr	r3, [r7, #24]
 801e500:	2b00      	cmp	r3, #0
 801e502:	d10b      	bne.n	801e51c <AutoComplete+0x98>
                namePtr = cmdName;
 801e504:	68bb      	ldr	r3, [r7, #8]
 801e506:	613b      	str	r3, [r7, #16]
                minLen = StrLen(namePtr);
 801e508:	6938      	ldr	r0, [r7, #16]
 801e50a:	f000 f868 	bl	801e5de <StrLen>
 801e50e:	61b8      	str	r0, [r7, #24]
                /* Show possible matches */
                context->printf_data_func("%s\r\n", cmdName);
 801e510:	687b      	ldr	r3, [r7, #4]
 801e512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e514:	68b9      	ldr	r1, [r7, #8]
 801e516:	481e      	ldr	r0, [pc, #120]	; (801e590 <AutoComplete+0x10c>)
 801e518:	4798      	blx	r3
                continue;
 801e51a:	e015      	b.n	801e548 <AutoComplete+0xc4>
            }
            len = StrCompare(namePtr, cmdName, StrLen(namePtr));
 801e51c:	6938      	ldr	r0, [r7, #16]
 801e51e:	f000 f85e 	bl	801e5de <StrLen>
 801e522:	4603      	mov	r3, r0
 801e524:	461a      	mov	r2, r3
 801e526:	68b9      	ldr	r1, [r7, #8]
 801e528:	6938      	ldr	r0, [r7, #16]
 801e52a:	f000 f870 	bl	801e60e <StrCompare>
 801e52e:	61f8      	str	r0, [r7, #28]
            if (len < 0) {
 801e530:	69fb      	ldr	r3, [r7, #28]
 801e532:	2b00      	cmp	r3, #0
 801e534:	da02      	bge.n	801e53c <AutoComplete+0xb8>
                len = len * (-1);
 801e536:	69fb      	ldr	r3, [r7, #28]
 801e538:	425b      	negs	r3, r3
 801e53a:	61fb      	str	r3, [r7, #28]
            }
            if (len < minLen) {
 801e53c:	69fa      	ldr	r2, [r7, #28]
 801e53e:	69bb      	ldr	r3, [r7, #24]
 801e540:	429a      	cmp	r2, r3
 801e542:	da01      	bge.n	801e548 <AutoComplete+0xc4>
                minLen = len;
 801e544:	69fb      	ldr	r3, [r7, #28]
 801e546:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 801e548:	7dfb      	ldrb	r3, [r7, #23]
 801e54a:	3301      	adds	r3, #1
 801e54c:	75fb      	strb	r3, [r7, #23]
 801e54e:	4b0f      	ldr	r3, [pc, #60]	; (801e58c <AutoComplete+0x108>)
 801e550:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 801e554:	7dfa      	ldrb	r2, [r7, #23]
 801e556:	429a      	cmp	r2, r3
 801e558:	d3b9      	bcc.n	801e4ce <AutoComplete+0x4a>
            }
        }
    }
    /* Auto complete string */
    if (namePtr) {
 801e55a:	693b      	ldr	r3, [r7, #16]
 801e55c:	2b00      	cmp	r3, #0
 801e55e:	d006      	beq.n	801e56e <AutoComplete+0xea>
        StrCopy(context->line, namePtr, minLen);
 801e560:	687b      	ldr	r3, [r7, #4]
 801e562:	3305      	adds	r3, #5
 801e564:	69ba      	ldr	r2, [r7, #24]
 801e566:	6939      	ldr	r1, [r7, #16]
 801e568:	4618      	mov	r0, r3
 801e56a:	f000 f815 	bl	801e598 <StrCopy>
    }
    context->printf_data_func("%s%s", context->prompt, context->line);
 801e56e:	687b      	ldr	r3, [r7, #4]
 801e570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e572:	687a      	ldr	r2, [r7, #4]
 801e574:	6811      	ldr	r1, [r2, #0]
 801e576:	687a      	ldr	r2, [r7, #4]
 801e578:	3205      	adds	r2, #5
 801e57a:	4806      	ldr	r0, [pc, #24]	; (801e594 <AutoComplete+0x110>)
 801e57c:	4798      	blx	r3
    return;
 801e57e:	e000      	b.n	801e582 <AutoComplete+0xfe>
        return;
 801e580:	bf00      	nop
}
 801e582:	3724      	adds	r7, #36	; 0x24
 801e584:	46bd      	mov	sp, r7
 801e586:	bd90      	pop	{r4, r7, pc}
 801e588:	0802588c 	.word	0x0802588c
 801e58c:	20001ae4 	.word	0x20001ae4
 801e590:	080258f0 	.word	0x080258f0
 801e594:	080258f8 	.word	0x080258f8

0801e598 <StrCopy>:

static char *StrCopy(char *dest, const char *src, int32_t count)
{
 801e598:	b480      	push	{r7}
 801e59a:	b087      	sub	sp, #28
 801e59c:	af00      	add	r7, sp, #0
 801e59e:	60f8      	str	r0, [r7, #12]
 801e5a0:	60b9      	str	r1, [r7, #8]
 801e5a2:	607a      	str	r2, [r7, #4]
    char *ret = dest;
 801e5a4:	68fb      	ldr	r3, [r7, #12]
 801e5a6:	613b      	str	r3, [r7, #16]
    int32_t i = 0;
 801e5a8:	2300      	movs	r3, #0
 801e5aa:	617b      	str	r3, [r7, #20]

    for (i = 0; i < count; i++) {
 801e5ac:	2300      	movs	r3, #0
 801e5ae:	617b      	str	r3, [r7, #20]
 801e5b0:	e00a      	b.n	801e5c8 <StrCopy+0x30>
        dest[i] = src[i];
 801e5b2:	697b      	ldr	r3, [r7, #20]
 801e5b4:	68ba      	ldr	r2, [r7, #8]
 801e5b6:	441a      	add	r2, r3
 801e5b8:	697b      	ldr	r3, [r7, #20]
 801e5ba:	68f9      	ldr	r1, [r7, #12]
 801e5bc:	440b      	add	r3, r1
 801e5be:	7812      	ldrb	r2, [r2, #0]
 801e5c0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < count; i++) {
 801e5c2:	697b      	ldr	r3, [r7, #20]
 801e5c4:	3301      	adds	r3, #1
 801e5c6:	617b      	str	r3, [r7, #20]
 801e5c8:	697a      	ldr	r2, [r7, #20]
 801e5ca:	687b      	ldr	r3, [r7, #4]
 801e5cc:	429a      	cmp	r2, r3
 801e5ce:	dbf0      	blt.n	801e5b2 <StrCopy+0x1a>
    }

    return ret;
 801e5d0:	693b      	ldr	r3, [r7, #16]
}
 801e5d2:	4618      	mov	r0, r3
 801e5d4:	371c      	adds	r7, #28
 801e5d6:	46bd      	mov	sp, r7
 801e5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5dc:	4770      	bx	lr

0801e5de <StrLen>:

static int32_t StrLen(const char *str)
{
 801e5de:	b480      	push	{r7}
 801e5e0:	b085      	sub	sp, #20
 801e5e2:	af00      	add	r7, sp, #0
 801e5e4:	6078      	str	r0, [r7, #4]
    int32_t i = 0;
 801e5e6:	2300      	movs	r3, #0
 801e5e8:	60fb      	str	r3, [r7, #12]

    while (*str) {
 801e5ea:	e005      	b.n	801e5f8 <StrLen+0x1a>
        str++;
 801e5ec:	687b      	ldr	r3, [r7, #4]
 801e5ee:	3301      	adds	r3, #1
 801e5f0:	607b      	str	r3, [r7, #4]
        i++;
 801e5f2:	68fb      	ldr	r3, [r7, #12]
 801e5f4:	3301      	adds	r3, #1
 801e5f6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 801e5f8:	687b      	ldr	r3, [r7, #4]
 801e5fa:	781b      	ldrb	r3, [r3, #0]
 801e5fc:	2b00      	cmp	r3, #0
 801e5fe:	d1f5      	bne.n	801e5ec <StrLen+0xe>
    }
    return i;
 801e600:	68fb      	ldr	r3, [r7, #12]
}
 801e602:	4618      	mov	r0, r3
 801e604:	3714      	adds	r7, #20
 801e606:	46bd      	mov	sp, r7
 801e608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e60c:	4770      	bx	lr

0801e60e <StrCompare>:

static int32_t StrCompare(const char *str1, const char *str2, int32_t count)
{
 801e60e:	b480      	push	{r7}
 801e610:	b085      	sub	sp, #20
 801e612:	af00      	add	r7, sp, #0
 801e614:	60f8      	str	r0, [r7, #12]
 801e616:	60b9      	str	r1, [r7, #8]
 801e618:	607a      	str	r2, [r7, #4]
    while (count--) {
 801e61a:	e012      	b.n	801e642 <StrCompare+0x34>
        if (*str1++ != *str2++) {
 801e61c:	68fb      	ldr	r3, [r7, #12]
 801e61e:	1c5a      	adds	r2, r3, #1
 801e620:	60fa      	str	r2, [r7, #12]
 801e622:	781a      	ldrb	r2, [r3, #0]
 801e624:	68bb      	ldr	r3, [r7, #8]
 801e626:	1c59      	adds	r1, r3, #1
 801e628:	60b9      	str	r1, [r7, #8]
 801e62a:	781b      	ldrb	r3, [r3, #0]
 801e62c:	429a      	cmp	r2, r3
 801e62e:	d008      	beq.n	801e642 <StrCompare+0x34>
            return *(unsigned char *)(str1 - 1) - *(unsigned char *)(str2 - 1);
 801e630:	68fb      	ldr	r3, [r7, #12]
 801e632:	3b01      	subs	r3, #1
 801e634:	781b      	ldrb	r3, [r3, #0]
 801e636:	461a      	mov	r2, r3
 801e638:	68bb      	ldr	r3, [r7, #8]
 801e63a:	3b01      	subs	r3, #1
 801e63c:	781b      	ldrb	r3, [r3, #0]
 801e63e:	1ad3      	subs	r3, r2, r3
 801e640:	e005      	b.n	801e64e <StrCompare+0x40>
    while (count--) {
 801e642:	687b      	ldr	r3, [r7, #4]
 801e644:	1e5a      	subs	r2, r3, #1
 801e646:	607a      	str	r2, [r7, #4]
 801e648:	2b00      	cmp	r3, #0
 801e64a:	d1e7      	bne.n	801e61c <StrCompare+0xe>
        }
    }
    return 0;
 801e64c:	2300      	movs	r3, #0
}
 801e64e:	4618      	mov	r0, r3
 801e650:	3714      	adds	r7, #20
 801e652:	46bd      	mov	sp, r7
 801e654:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e658:	4770      	bx	lr
	...

0801e65c <ParseLine>:

static int32_t ParseLine(const char *cmd, uint32_t len, char *argv[SHELL_MAX_ARGS])
{
 801e65c:	b580      	push	{r7, lr}
 801e65e:	b088      	sub	sp, #32
 801e660:	af00      	add	r7, sp, #0
 801e662:	60f8      	str	r0, [r7, #12]
 801e664:	60b9      	str	r1, [r7, #8]
 801e666:	607a      	str	r2, [r7, #4]
    uint32_t argc;
    char *p;
    uint32_t position;

    /* Init params */
    memset(g_paramBuffer, '\0', len + 1);
 801e668:	68bb      	ldr	r3, [r7, #8]
 801e66a:	3301      	adds	r3, #1
 801e66c:	461a      	mov	r2, r3
 801e66e:	2100      	movs	r1, #0
 801e670:	4838      	ldr	r0, [pc, #224]	; (801e754 <ParseLine+0xf8>)
 801e672:	f000 fa83 	bl	801eb7c <memset>
    StrCopy(g_paramBuffer, cmd, len);
 801e676:	68bb      	ldr	r3, [r7, #8]
 801e678:	461a      	mov	r2, r3
 801e67a:	68f9      	ldr	r1, [r7, #12]
 801e67c:	4835      	ldr	r0, [pc, #212]	; (801e754 <ParseLine+0xf8>)
 801e67e:	f7ff ff8b 	bl	801e598 <StrCopy>

    p = g_paramBuffer;
 801e682:	4b34      	ldr	r3, [pc, #208]	; (801e754 <ParseLine+0xf8>)
 801e684:	61bb      	str	r3, [r7, #24]
    position = 0;
 801e686:	2300      	movs	r3, #0
 801e688:	617b      	str	r3, [r7, #20]
    argc = 0;
 801e68a:	2300      	movs	r3, #0
 801e68c:	61fb      	str	r3, [r7, #28]

    while (position < len) {
 801e68e:	e058      	b.n	801e742 <ParseLine+0xe6>
        /* Skip all blanks */
        while (((char)(*p) == ' ') && (position < len)) {
            *p = '\0';
 801e690:	69bb      	ldr	r3, [r7, #24]
 801e692:	2200      	movs	r2, #0
 801e694:	701a      	strb	r2, [r3, #0]
            p++;
 801e696:	69bb      	ldr	r3, [r7, #24]
 801e698:	3301      	adds	r3, #1
 801e69a:	61bb      	str	r3, [r7, #24]
            position++;
 801e69c:	697b      	ldr	r3, [r7, #20]
 801e69e:	3301      	adds	r3, #1
 801e6a0:	617b      	str	r3, [r7, #20]
        while (((char)(*p) == ' ') && (position < len)) {
 801e6a2:	69bb      	ldr	r3, [r7, #24]
 801e6a4:	781b      	ldrb	r3, [r3, #0]
 801e6a6:	2b20      	cmp	r3, #32
 801e6a8:	d103      	bne.n	801e6b2 <ParseLine+0x56>
 801e6aa:	697a      	ldr	r2, [r7, #20]
 801e6ac:	68bb      	ldr	r3, [r7, #8]
 801e6ae:	429a      	cmp	r2, r3
 801e6b0:	d3ee      	bcc.n	801e690 <ParseLine+0x34>
        }
        /* Process begin of a string */
        if (*p == '"') {
 801e6b2:	69bb      	ldr	r3, [r7, #24]
 801e6b4:	781b      	ldrb	r3, [r3, #0]
 801e6b6:	2b22      	cmp	r3, #34	; 0x22
 801e6b8:	d127      	bne.n	801e70a <ParseLine+0xae>
            p++;
 801e6ba:	69bb      	ldr	r3, [r7, #24]
 801e6bc:	3301      	adds	r3, #1
 801e6be:	61bb      	str	r3, [r7, #24]
            position++;
 801e6c0:	697b      	ldr	r3, [r7, #20]
 801e6c2:	3301      	adds	r3, #1
 801e6c4:	617b      	str	r3, [r7, #20]
            argv[argc] = p;
 801e6c6:	69fb      	ldr	r3, [r7, #28]
 801e6c8:	009b      	lsls	r3, r3, #2
 801e6ca:	687a      	ldr	r2, [r7, #4]
 801e6cc:	4413      	add	r3, r2
 801e6ce:	69ba      	ldr	r2, [r7, #24]
 801e6d0:	601a      	str	r2, [r3, #0]
            argc++;
 801e6d2:	69fb      	ldr	r3, [r7, #28]
 801e6d4:	3301      	adds	r3, #1
 801e6d6:	61fb      	str	r3, [r7, #28]
            /* Skip this string */
            while ((*p != '"') && (position < len)) {
 801e6d8:	e005      	b.n	801e6e6 <ParseLine+0x8a>
                p++;
 801e6da:	69bb      	ldr	r3, [r7, #24]
 801e6dc:	3301      	adds	r3, #1
 801e6de:	61bb      	str	r3, [r7, #24]
                position++;
 801e6e0:	697b      	ldr	r3, [r7, #20]
 801e6e2:	3301      	adds	r3, #1
 801e6e4:	617b      	str	r3, [r7, #20]
            while ((*p != '"') && (position < len)) {
 801e6e6:	69bb      	ldr	r3, [r7, #24]
 801e6e8:	781b      	ldrb	r3, [r3, #0]
 801e6ea:	2b22      	cmp	r3, #34	; 0x22
 801e6ec:	d003      	beq.n	801e6f6 <ParseLine+0x9a>
 801e6ee:	697a      	ldr	r2, [r7, #20]
 801e6f0:	68bb      	ldr	r3, [r7, #8]
 801e6f2:	429a      	cmp	r2, r3
 801e6f4:	d3f1      	bcc.n	801e6da <ParseLine+0x7e>
            }
            /* Skip '"' */
            *p = '\0';
 801e6f6:	69bb      	ldr	r3, [r7, #24]
 801e6f8:	2200      	movs	r2, #0
 801e6fa:	701a      	strb	r2, [r3, #0]
            p++;
 801e6fc:	69bb      	ldr	r3, [r7, #24]
 801e6fe:	3301      	adds	r3, #1
 801e700:	61bb      	str	r3, [r7, #24]
            position++;
 801e702:	697b      	ldr	r3, [r7, #20]
 801e704:	3301      	adds	r3, #1
 801e706:	617b      	str	r3, [r7, #20]
 801e708:	e01b      	b.n	801e742 <ParseLine+0xe6>
        } else /* Normal char */ {
            argv[argc] = p;
 801e70a:	69fb      	ldr	r3, [r7, #28]
 801e70c:	009b      	lsls	r3, r3, #2
 801e70e:	687a      	ldr	r2, [r7, #4]
 801e710:	4413      	add	r3, r2
 801e712:	69ba      	ldr	r2, [r7, #24]
 801e714:	601a      	str	r2, [r3, #0]
            argc++;
 801e716:	69fb      	ldr	r3, [r7, #28]
 801e718:	3301      	adds	r3, #1
 801e71a:	61fb      	str	r3, [r7, #28]
            while (((char)*p != ' ') && ((char)*p != '\t') && (position < len)) {
 801e71c:	e005      	b.n	801e72a <ParseLine+0xce>
                p++;
 801e71e:	69bb      	ldr	r3, [r7, #24]
 801e720:	3301      	adds	r3, #1
 801e722:	61bb      	str	r3, [r7, #24]
                position++;
 801e724:	697b      	ldr	r3, [r7, #20]
 801e726:	3301      	adds	r3, #1
 801e728:	617b      	str	r3, [r7, #20]
            while (((char)*p != ' ') && ((char)*p != '\t') && (position < len)) {
 801e72a:	69bb      	ldr	r3, [r7, #24]
 801e72c:	781b      	ldrb	r3, [r3, #0]
 801e72e:	2b20      	cmp	r3, #32
 801e730:	d007      	beq.n	801e742 <ParseLine+0xe6>
 801e732:	69bb      	ldr	r3, [r7, #24]
 801e734:	781b      	ldrb	r3, [r3, #0]
 801e736:	2b09      	cmp	r3, #9
 801e738:	d003      	beq.n	801e742 <ParseLine+0xe6>
 801e73a:	697a      	ldr	r2, [r7, #20]
 801e73c:	68bb      	ldr	r3, [r7, #8]
 801e73e:	429a      	cmp	r2, r3
 801e740:	d3ed      	bcc.n	801e71e <ParseLine+0xc2>
    while (position < len) {
 801e742:	697a      	ldr	r2, [r7, #20]
 801e744:	68bb      	ldr	r3, [r7, #8]
 801e746:	429a      	cmp	r2, r3
 801e748:	d3ab      	bcc.n	801e6a2 <ParseLine+0x46>
            }
        }
    }
    return argc;
 801e74a:	69fb      	ldr	r3, [r7, #28]
}
 801e74c:	4618      	mov	r0, r3
 801e74e:	3720      	adds	r7, #32
 801e750:	46bd      	mov	sp, r7
 801e752:	bd80      	pop	{r7, pc}
 801e754:	20001b88 	.word	0x20001b88

0801e758 <SHELL_RegisterCommand>:

int32_t SHELL_RegisterCommand(const shell_command_context_t *command_context)
{
 801e758:	b480      	push	{r7}
 801e75a:	b085      	sub	sp, #20
 801e75c:	af00      	add	r7, sp, #0
 801e75e:	6078      	str	r0, [r7, #4]
    int32_t result = 0;
 801e760:	2300      	movs	r3, #0
 801e762:	60fb      	str	r3, [r7, #12]

    /* If have room  in command list */
    if (g_RegisteredCommands.numberOfCommandInList < SHELL_MAX_CMD) {
 801e764:	4b0e      	ldr	r3, [pc, #56]	; (801e7a0 <SHELL_RegisterCommand+0x48>)
 801e766:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 801e76a:	2b27      	cmp	r3, #39	; 0x27
 801e76c:	d80d      	bhi.n	801e78a <SHELL_RegisterCommand+0x32>
        g_RegisteredCommands.CommandList[g_RegisteredCommands.numberOfCommandInList++] = command_context;
 801e76e:	4b0c      	ldr	r3, [pc, #48]	; (801e7a0 <SHELL_RegisterCommand+0x48>)
 801e770:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 801e774:	1c5a      	adds	r2, r3, #1
 801e776:	b2d1      	uxtb	r1, r2
 801e778:	4a09      	ldr	r2, [pc, #36]	; (801e7a0 <SHELL_RegisterCommand+0x48>)
 801e77a:	f882 10a0 	strb.w	r1, [r2, #160]	; 0xa0
 801e77e:	4619      	mov	r1, r3
 801e780:	4a07      	ldr	r2, [pc, #28]	; (801e7a0 <SHELL_RegisterCommand+0x48>)
 801e782:	687b      	ldr	r3, [r7, #4]
 801e784:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801e788:	e002      	b.n	801e790 <SHELL_RegisterCommand+0x38>
    } else {
        result = -1;
 801e78a:	f04f 33ff 	mov.w	r3, #4294967295
 801e78e:	60fb      	str	r3, [r7, #12]
    }
    return result;
 801e790:	68fb      	ldr	r3, [r7, #12]
}
 801e792:	4618      	mov	r0, r3
 801e794:	3714      	adds	r7, #20
 801e796:	46bd      	mov	sp, r7
 801e798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e79c:	4770      	bx	lr
 801e79e:	bf00      	nop
 801e7a0:	20001ae4 	.word	0x20001ae4

0801e7a4 <GetChar>:

static uint8_t GetChar(p_shell_context_t context)
{
 801e7a4:	b580      	push	{r7, lr}
 801e7a6:	b084      	sub	sp, #16
 801e7a8:	af00      	add	r7, sp, #0
 801e7aa:	6078      	str	r0, [r7, #4]
    uint8_t ch;

#if SHELL_USE_FILE_STREAM
    ch = fgetc(context->STDIN);
#else
    context->recv_data_func(&ch, 1U);
 801e7ac:	687b      	ldr	r3, [r7, #4]
 801e7ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e7b0:	f107 020f 	add.w	r2, r7, #15
 801e7b4:	2101      	movs	r1, #1
 801e7b6:	4610      	mov	r0, r2
 801e7b8:	4798      	blx	r3
#endif
    return ch;
 801e7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 801e7bc:	4618      	mov	r0, r3
 801e7be:	3710      	adds	r7, #16
 801e7c0:	46bd      	mov	sp, r7
 801e7c2:	bd80      	pop	{r7, pc}

0801e7c4 <cJSON_InitHooks>:

    return copy;
}

CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks)
{
 801e7c4:	b480      	push	{r7}
 801e7c6:	b083      	sub	sp, #12
 801e7c8:	af00      	add	r7, sp, #0
 801e7ca:	6078      	str	r0, [r7, #4]
    if (hooks == NULL)
 801e7cc:	687b      	ldr	r3, [r7, #4]
 801e7ce:	2b00      	cmp	r3, #0
 801e7d0:	d109      	bne.n	801e7e6 <cJSON_InitHooks+0x22>
    {
        /* Reset hooks */
        global_hooks.allocate = malloc;
 801e7d2:	4b1a      	ldr	r3, [pc, #104]	; (801e83c <cJSON_InitHooks+0x78>)
 801e7d4:	4a1a      	ldr	r2, [pc, #104]	; (801e840 <cJSON_InitHooks+0x7c>)
 801e7d6:	601a      	str	r2, [r3, #0]
        global_hooks.deallocate = free;
 801e7d8:	4b18      	ldr	r3, [pc, #96]	; (801e83c <cJSON_InitHooks+0x78>)
 801e7da:	4a1a      	ldr	r2, [pc, #104]	; (801e844 <cJSON_InitHooks+0x80>)
 801e7dc:	605a      	str	r2, [r3, #4]
        global_hooks.reallocate = realloc;
 801e7de:	4b17      	ldr	r3, [pc, #92]	; (801e83c <cJSON_InitHooks+0x78>)
 801e7e0:	4a19      	ldr	r2, [pc, #100]	; (801e848 <cJSON_InitHooks+0x84>)
 801e7e2:	609a      	str	r2, [r3, #8]
        return;
 801e7e4:	e025      	b.n	801e832 <cJSON_InitHooks+0x6e>
    }

    global_hooks.allocate = malloc;
 801e7e6:	4b15      	ldr	r3, [pc, #84]	; (801e83c <cJSON_InitHooks+0x78>)
 801e7e8:	4a15      	ldr	r2, [pc, #84]	; (801e840 <cJSON_InitHooks+0x7c>)
 801e7ea:	601a      	str	r2, [r3, #0]
    if (hooks->malloc_fn != NULL)
 801e7ec:	687b      	ldr	r3, [r7, #4]
 801e7ee:	681b      	ldr	r3, [r3, #0]
 801e7f0:	2b00      	cmp	r3, #0
 801e7f2:	d003      	beq.n	801e7fc <cJSON_InitHooks+0x38>
    {
        global_hooks.allocate = hooks->malloc_fn;
 801e7f4:	687b      	ldr	r3, [r7, #4]
 801e7f6:	681b      	ldr	r3, [r3, #0]
 801e7f8:	4a10      	ldr	r2, [pc, #64]	; (801e83c <cJSON_InitHooks+0x78>)
 801e7fa:	6013      	str	r3, [r2, #0]
    }

    global_hooks.deallocate = free;
 801e7fc:	4b0f      	ldr	r3, [pc, #60]	; (801e83c <cJSON_InitHooks+0x78>)
 801e7fe:	4a11      	ldr	r2, [pc, #68]	; (801e844 <cJSON_InitHooks+0x80>)
 801e800:	605a      	str	r2, [r3, #4]
    if (hooks->free_fn != NULL)
 801e802:	687b      	ldr	r3, [r7, #4]
 801e804:	685b      	ldr	r3, [r3, #4]
 801e806:	2b00      	cmp	r3, #0
 801e808:	d003      	beq.n	801e812 <cJSON_InitHooks+0x4e>
    {
        global_hooks.deallocate = hooks->free_fn;
 801e80a:	687b      	ldr	r3, [r7, #4]
 801e80c:	685b      	ldr	r3, [r3, #4]
 801e80e:	4a0b      	ldr	r2, [pc, #44]	; (801e83c <cJSON_InitHooks+0x78>)
 801e810:	6053      	str	r3, [r2, #4]
    }

    /* use realloc only if both free and malloc are used */
    global_hooks.reallocate = NULL;
 801e812:	4b0a      	ldr	r3, [pc, #40]	; (801e83c <cJSON_InitHooks+0x78>)
 801e814:	2200      	movs	r2, #0
 801e816:	609a      	str	r2, [r3, #8]
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
 801e818:	4b08      	ldr	r3, [pc, #32]	; (801e83c <cJSON_InitHooks+0x78>)
 801e81a:	681b      	ldr	r3, [r3, #0]
 801e81c:	4a08      	ldr	r2, [pc, #32]	; (801e840 <cJSON_InitHooks+0x7c>)
 801e81e:	4293      	cmp	r3, r2
 801e820:	d107      	bne.n	801e832 <cJSON_InitHooks+0x6e>
 801e822:	4b06      	ldr	r3, [pc, #24]	; (801e83c <cJSON_InitHooks+0x78>)
 801e824:	685b      	ldr	r3, [r3, #4]
 801e826:	4a07      	ldr	r2, [pc, #28]	; (801e844 <cJSON_InitHooks+0x80>)
 801e828:	4293      	cmp	r3, r2
 801e82a:	d102      	bne.n	801e832 <cJSON_InitHooks+0x6e>
    {
        global_hooks.reallocate = realloc;
 801e82c:	4b03      	ldr	r3, [pc, #12]	; (801e83c <cJSON_InitHooks+0x78>)
 801e82e:	4a06      	ldr	r2, [pc, #24]	; (801e848 <cJSON_InitHooks+0x84>)
 801e830:	609a      	str	r2, [r3, #8]
    }
}
 801e832:	370c      	adds	r7, #12
 801e834:	46bd      	mov	sp, r7
 801e836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e83a:	4770      	bx	lr
 801e83c:	1000012c 	.word	0x1000012c
 801e840:	0801eaf1 	.word	0x0801eaf1
 801e844:	0801eb01 	.word	0x0801eb01
 801e848:	0801f919 	.word	0x0801f919

0801e84c <__assert_func>:
 801e84c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e84e:	4614      	mov	r4, r2
 801e850:	461a      	mov	r2, r3
 801e852:	4b09      	ldr	r3, [pc, #36]	; (801e878 <__assert_func+0x2c>)
 801e854:	681b      	ldr	r3, [r3, #0]
 801e856:	4605      	mov	r5, r0
 801e858:	68d8      	ldr	r0, [r3, #12]
 801e85a:	b14c      	cbz	r4, 801e870 <__assert_func+0x24>
 801e85c:	4b07      	ldr	r3, [pc, #28]	; (801e87c <__assert_func+0x30>)
 801e85e:	9100      	str	r1, [sp, #0]
 801e860:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e864:	4906      	ldr	r1, [pc, #24]	; (801e880 <__assert_func+0x34>)
 801e866:	462b      	mov	r3, r5
 801e868:	f000 f8e8 	bl	801ea3c <fiprintf>
 801e86c:	f001 faba 	bl	801fde4 <abort>
 801e870:	4b04      	ldr	r3, [pc, #16]	; (801e884 <__assert_func+0x38>)
 801e872:	461c      	mov	r4, r3
 801e874:	e7f3      	b.n	801e85e <__assert_func+0x12>
 801e876:	bf00      	nop
 801e878:	10000138 	.word	0x10000138
 801e87c:	08025b07 	.word	0x08025b07
 801e880:	08025b14 	.word	0x08025b14
 801e884:	08025b42 	.word	0x08025b42

0801e888 <atoi>:
 801e888:	220a      	movs	r2, #10
 801e88a:	2100      	movs	r1, #0
 801e88c:	f001 b9ae 	b.w	801fbec <strtol>

0801e890 <std>:
 801e890:	2300      	movs	r3, #0
 801e892:	b510      	push	{r4, lr}
 801e894:	4604      	mov	r4, r0
 801e896:	e9c0 3300 	strd	r3, r3, [r0]
 801e89a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e89e:	6083      	str	r3, [r0, #8]
 801e8a0:	8181      	strh	r1, [r0, #12]
 801e8a2:	6643      	str	r3, [r0, #100]	; 0x64
 801e8a4:	81c2      	strh	r2, [r0, #14]
 801e8a6:	6183      	str	r3, [r0, #24]
 801e8a8:	4619      	mov	r1, r3
 801e8aa:	2208      	movs	r2, #8
 801e8ac:	305c      	adds	r0, #92	; 0x5c
 801e8ae:	f000 f965 	bl	801eb7c <memset>
 801e8b2:	4b05      	ldr	r3, [pc, #20]	; (801e8c8 <std+0x38>)
 801e8b4:	6263      	str	r3, [r4, #36]	; 0x24
 801e8b6:	4b05      	ldr	r3, [pc, #20]	; (801e8cc <std+0x3c>)
 801e8b8:	62a3      	str	r3, [r4, #40]	; 0x28
 801e8ba:	4b05      	ldr	r3, [pc, #20]	; (801e8d0 <std+0x40>)
 801e8bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e8be:	4b05      	ldr	r3, [pc, #20]	; (801e8d4 <std+0x44>)
 801e8c0:	6224      	str	r4, [r4, #32]
 801e8c2:	6323      	str	r3, [r4, #48]	; 0x30
 801e8c4:	bd10      	pop	{r4, pc}
 801e8c6:	bf00      	nop
 801e8c8:	0801fa5d 	.word	0x0801fa5d
 801e8cc:	0801fa7f 	.word	0x0801fa7f
 801e8d0:	0801fab7 	.word	0x0801fab7
 801e8d4:	0801fadb 	.word	0x0801fadb

0801e8d8 <_cleanup_r>:
 801e8d8:	4901      	ldr	r1, [pc, #4]	; (801e8e0 <_cleanup_r+0x8>)
 801e8da:	f000 b8c1 	b.w	801ea60 <_fwalk_reent>
 801e8de:	bf00      	nop
 801e8e0:	08020c21 	.word	0x08020c21

0801e8e4 <__sfmoreglue>:
 801e8e4:	b570      	push	{r4, r5, r6, lr}
 801e8e6:	1e4a      	subs	r2, r1, #1
 801e8e8:	2568      	movs	r5, #104	; 0x68
 801e8ea:	4355      	muls	r5, r2
 801e8ec:	460e      	mov	r6, r1
 801e8ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e8f2:	f000 f99b 	bl	801ec2c <_malloc_r>
 801e8f6:	4604      	mov	r4, r0
 801e8f8:	b140      	cbz	r0, 801e90c <__sfmoreglue+0x28>
 801e8fa:	2100      	movs	r1, #0
 801e8fc:	e9c0 1600 	strd	r1, r6, [r0]
 801e900:	300c      	adds	r0, #12
 801e902:	60a0      	str	r0, [r4, #8]
 801e904:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e908:	f000 f938 	bl	801eb7c <memset>
 801e90c:	4620      	mov	r0, r4
 801e90e:	bd70      	pop	{r4, r5, r6, pc}

0801e910 <__sfp_lock_acquire>:
 801e910:	4801      	ldr	r0, [pc, #4]	; (801e918 <__sfp_lock_acquire+0x8>)
 801e912:	f000 b8ea 	b.w	801eaea <__retarget_lock_acquire_recursive>
 801e916:	bf00      	nop
 801e918:	2000c40c 	.word	0x2000c40c

0801e91c <__sfp_lock_release>:
 801e91c:	4801      	ldr	r0, [pc, #4]	; (801e924 <__sfp_lock_release+0x8>)
 801e91e:	f000 b8e5 	b.w	801eaec <__retarget_lock_release_recursive>
 801e922:	bf00      	nop
 801e924:	2000c40c 	.word	0x2000c40c

0801e928 <__sinit_lock_acquire>:
 801e928:	4801      	ldr	r0, [pc, #4]	; (801e930 <__sinit_lock_acquire+0x8>)
 801e92a:	f000 b8de 	b.w	801eaea <__retarget_lock_acquire_recursive>
 801e92e:	bf00      	nop
 801e930:	2000c407 	.word	0x2000c407

0801e934 <__sinit_lock_release>:
 801e934:	4801      	ldr	r0, [pc, #4]	; (801e93c <__sinit_lock_release+0x8>)
 801e936:	f000 b8d9 	b.w	801eaec <__retarget_lock_release_recursive>
 801e93a:	bf00      	nop
 801e93c:	2000c407 	.word	0x2000c407

0801e940 <__sinit>:
 801e940:	b510      	push	{r4, lr}
 801e942:	4604      	mov	r4, r0
 801e944:	f7ff fff0 	bl	801e928 <__sinit_lock_acquire>
 801e948:	69a3      	ldr	r3, [r4, #24]
 801e94a:	b11b      	cbz	r3, 801e954 <__sinit+0x14>
 801e94c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e950:	f7ff bff0 	b.w	801e934 <__sinit_lock_release>
 801e954:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e958:	6523      	str	r3, [r4, #80]	; 0x50
 801e95a:	4b13      	ldr	r3, [pc, #76]	; (801e9a8 <__sinit+0x68>)
 801e95c:	4a13      	ldr	r2, [pc, #76]	; (801e9ac <__sinit+0x6c>)
 801e95e:	681b      	ldr	r3, [r3, #0]
 801e960:	62a2      	str	r2, [r4, #40]	; 0x28
 801e962:	42a3      	cmp	r3, r4
 801e964:	bf04      	itt	eq
 801e966:	2301      	moveq	r3, #1
 801e968:	61a3      	streq	r3, [r4, #24]
 801e96a:	4620      	mov	r0, r4
 801e96c:	f000 f820 	bl	801e9b0 <__sfp>
 801e970:	6060      	str	r0, [r4, #4]
 801e972:	4620      	mov	r0, r4
 801e974:	f000 f81c 	bl	801e9b0 <__sfp>
 801e978:	60a0      	str	r0, [r4, #8]
 801e97a:	4620      	mov	r0, r4
 801e97c:	f000 f818 	bl	801e9b0 <__sfp>
 801e980:	2200      	movs	r2, #0
 801e982:	60e0      	str	r0, [r4, #12]
 801e984:	2104      	movs	r1, #4
 801e986:	6860      	ldr	r0, [r4, #4]
 801e988:	f7ff ff82 	bl	801e890 <std>
 801e98c:	68a0      	ldr	r0, [r4, #8]
 801e98e:	2201      	movs	r2, #1
 801e990:	2109      	movs	r1, #9
 801e992:	f7ff ff7d 	bl	801e890 <std>
 801e996:	68e0      	ldr	r0, [r4, #12]
 801e998:	2202      	movs	r2, #2
 801e99a:	2112      	movs	r1, #18
 801e99c:	f7ff ff78 	bl	801e890 <std>
 801e9a0:	2301      	movs	r3, #1
 801e9a2:	61a3      	str	r3, [r4, #24]
 801e9a4:	e7d2      	b.n	801e94c <__sinit+0xc>
 801e9a6:	bf00      	nop
 801e9a8:	08025ca4 	.word	0x08025ca4
 801e9ac:	0801e8d9 	.word	0x0801e8d9

0801e9b0 <__sfp>:
 801e9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e9b2:	4607      	mov	r7, r0
 801e9b4:	f7ff ffac 	bl	801e910 <__sfp_lock_acquire>
 801e9b8:	4b1e      	ldr	r3, [pc, #120]	; (801ea34 <__sfp+0x84>)
 801e9ba:	681e      	ldr	r6, [r3, #0]
 801e9bc:	69b3      	ldr	r3, [r6, #24]
 801e9be:	b913      	cbnz	r3, 801e9c6 <__sfp+0x16>
 801e9c0:	4630      	mov	r0, r6
 801e9c2:	f7ff ffbd 	bl	801e940 <__sinit>
 801e9c6:	3648      	adds	r6, #72	; 0x48
 801e9c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e9cc:	3b01      	subs	r3, #1
 801e9ce:	d503      	bpl.n	801e9d8 <__sfp+0x28>
 801e9d0:	6833      	ldr	r3, [r6, #0]
 801e9d2:	b30b      	cbz	r3, 801ea18 <__sfp+0x68>
 801e9d4:	6836      	ldr	r6, [r6, #0]
 801e9d6:	e7f7      	b.n	801e9c8 <__sfp+0x18>
 801e9d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e9dc:	b9d5      	cbnz	r5, 801ea14 <__sfp+0x64>
 801e9de:	4b16      	ldr	r3, [pc, #88]	; (801ea38 <__sfp+0x88>)
 801e9e0:	60e3      	str	r3, [r4, #12]
 801e9e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e9e6:	6665      	str	r5, [r4, #100]	; 0x64
 801e9e8:	f000 f87e 	bl	801eae8 <__retarget_lock_init_recursive>
 801e9ec:	f7ff ff96 	bl	801e91c <__sfp_lock_release>
 801e9f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e9f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e9f8:	6025      	str	r5, [r4, #0]
 801e9fa:	61a5      	str	r5, [r4, #24]
 801e9fc:	2208      	movs	r2, #8
 801e9fe:	4629      	mov	r1, r5
 801ea00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ea04:	f000 f8ba 	bl	801eb7c <memset>
 801ea08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ea0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ea10:	4620      	mov	r0, r4
 801ea12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ea14:	3468      	adds	r4, #104	; 0x68
 801ea16:	e7d9      	b.n	801e9cc <__sfp+0x1c>
 801ea18:	2104      	movs	r1, #4
 801ea1a:	4638      	mov	r0, r7
 801ea1c:	f7ff ff62 	bl	801e8e4 <__sfmoreglue>
 801ea20:	4604      	mov	r4, r0
 801ea22:	6030      	str	r0, [r6, #0]
 801ea24:	2800      	cmp	r0, #0
 801ea26:	d1d5      	bne.n	801e9d4 <__sfp+0x24>
 801ea28:	f7ff ff78 	bl	801e91c <__sfp_lock_release>
 801ea2c:	230c      	movs	r3, #12
 801ea2e:	603b      	str	r3, [r7, #0]
 801ea30:	e7ee      	b.n	801ea10 <__sfp+0x60>
 801ea32:	bf00      	nop
 801ea34:	08025ca4 	.word	0x08025ca4
 801ea38:	ffff0001 	.word	0xffff0001

0801ea3c <fiprintf>:
 801ea3c:	b40e      	push	{r1, r2, r3}
 801ea3e:	b503      	push	{r0, r1, lr}
 801ea40:	4601      	mov	r1, r0
 801ea42:	ab03      	add	r3, sp, #12
 801ea44:	4805      	ldr	r0, [pc, #20]	; (801ea5c <fiprintf+0x20>)
 801ea46:	f853 2b04 	ldr.w	r2, [r3], #4
 801ea4a:	6800      	ldr	r0, [r0, #0]
 801ea4c:	9301      	str	r3, [sp, #4]
 801ea4e:	f000 f971 	bl	801ed34 <_vfiprintf_r>
 801ea52:	b002      	add	sp, #8
 801ea54:	f85d eb04 	ldr.w	lr, [sp], #4
 801ea58:	b003      	add	sp, #12
 801ea5a:	4770      	bx	lr
 801ea5c:	10000138 	.word	0x10000138

0801ea60 <_fwalk_reent>:
 801ea60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ea64:	4606      	mov	r6, r0
 801ea66:	4688      	mov	r8, r1
 801ea68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ea6c:	2700      	movs	r7, #0
 801ea6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ea72:	f1b9 0901 	subs.w	r9, r9, #1
 801ea76:	d505      	bpl.n	801ea84 <_fwalk_reent+0x24>
 801ea78:	6824      	ldr	r4, [r4, #0]
 801ea7a:	2c00      	cmp	r4, #0
 801ea7c:	d1f7      	bne.n	801ea6e <_fwalk_reent+0xe>
 801ea7e:	4638      	mov	r0, r7
 801ea80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ea84:	89ab      	ldrh	r3, [r5, #12]
 801ea86:	2b01      	cmp	r3, #1
 801ea88:	d907      	bls.n	801ea9a <_fwalk_reent+0x3a>
 801ea8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ea8e:	3301      	adds	r3, #1
 801ea90:	d003      	beq.n	801ea9a <_fwalk_reent+0x3a>
 801ea92:	4629      	mov	r1, r5
 801ea94:	4630      	mov	r0, r6
 801ea96:	47c0      	blx	r8
 801ea98:	4307      	orrs	r7, r0
 801ea9a:	3568      	adds	r5, #104	; 0x68
 801ea9c:	e7e9      	b.n	801ea72 <_fwalk_reent+0x12>
	...

0801eaa0 <__libc_init_array>:
 801eaa0:	b570      	push	{r4, r5, r6, lr}
 801eaa2:	4d0d      	ldr	r5, [pc, #52]	; (801ead8 <__libc_init_array+0x38>)
 801eaa4:	4c0d      	ldr	r4, [pc, #52]	; (801eadc <__libc_init_array+0x3c>)
 801eaa6:	1b64      	subs	r4, r4, r5
 801eaa8:	10a4      	asrs	r4, r4, #2
 801eaaa:	2600      	movs	r6, #0
 801eaac:	42a6      	cmp	r6, r4
 801eaae:	d109      	bne.n	801eac4 <__libc_init_array+0x24>
 801eab0:	4d0b      	ldr	r5, [pc, #44]	; (801eae0 <__libc_init_array+0x40>)
 801eab2:	4c0c      	ldr	r4, [pc, #48]	; (801eae4 <__libc_init_array+0x44>)
 801eab4:	f002 ff24 	bl	8021900 <_init>
 801eab8:	1b64      	subs	r4, r4, r5
 801eaba:	10a4      	asrs	r4, r4, #2
 801eabc:	2600      	movs	r6, #0
 801eabe:	42a6      	cmp	r6, r4
 801eac0:	d105      	bne.n	801eace <__libc_init_array+0x2e>
 801eac2:	bd70      	pop	{r4, r5, r6, pc}
 801eac4:	f855 3b04 	ldr.w	r3, [r5], #4
 801eac8:	4798      	blx	r3
 801eaca:	3601      	adds	r6, #1
 801eacc:	e7ee      	b.n	801eaac <__libc_init_array+0xc>
 801eace:	f855 3b04 	ldr.w	r3, [r5], #4
 801ead2:	4798      	blx	r3
 801ead4:	3601      	adds	r6, #1
 801ead6:	e7f2      	b.n	801eabe <__libc_init_array+0x1e>
 801ead8:	08025f54 	.word	0x08025f54
 801eadc:	08025f54 	.word	0x08025f54
 801eae0:	08025f54 	.word	0x08025f54
 801eae4:	08025f58 	.word	0x08025f58

0801eae8 <__retarget_lock_init_recursive>:
 801eae8:	4770      	bx	lr

0801eaea <__retarget_lock_acquire_recursive>:
 801eaea:	4770      	bx	lr

0801eaec <__retarget_lock_release_recursive>:
 801eaec:	4770      	bx	lr
	...

0801eaf0 <malloc>:
 801eaf0:	4b02      	ldr	r3, [pc, #8]	; (801eafc <malloc+0xc>)
 801eaf2:	4601      	mov	r1, r0
 801eaf4:	6818      	ldr	r0, [r3, #0]
 801eaf6:	f000 b899 	b.w	801ec2c <_malloc_r>
 801eafa:	bf00      	nop
 801eafc:	10000138 	.word	0x10000138

0801eb00 <free>:
 801eb00:	4b02      	ldr	r3, [pc, #8]	; (801eb0c <free+0xc>)
 801eb02:	4601      	mov	r1, r0
 801eb04:	6818      	ldr	r0, [r3, #0]
 801eb06:	f000 b841 	b.w	801eb8c <_free_r>
 801eb0a:	bf00      	nop
 801eb0c:	10000138 	.word	0x10000138

0801eb10 <memcmp>:
 801eb10:	b530      	push	{r4, r5, lr}
 801eb12:	3901      	subs	r1, #1
 801eb14:	2400      	movs	r4, #0
 801eb16:	42a2      	cmp	r2, r4
 801eb18:	d101      	bne.n	801eb1e <memcmp+0xe>
 801eb1a:	2000      	movs	r0, #0
 801eb1c:	e005      	b.n	801eb2a <memcmp+0x1a>
 801eb1e:	5d03      	ldrb	r3, [r0, r4]
 801eb20:	3401      	adds	r4, #1
 801eb22:	5d0d      	ldrb	r5, [r1, r4]
 801eb24:	42ab      	cmp	r3, r5
 801eb26:	d0f6      	beq.n	801eb16 <memcmp+0x6>
 801eb28:	1b58      	subs	r0, r3, r5
 801eb2a:	bd30      	pop	{r4, r5, pc}

0801eb2c <memcpy>:
 801eb2c:	440a      	add	r2, r1
 801eb2e:	4291      	cmp	r1, r2
 801eb30:	f100 33ff 	add.w	r3, r0, #4294967295
 801eb34:	d100      	bne.n	801eb38 <memcpy+0xc>
 801eb36:	4770      	bx	lr
 801eb38:	b510      	push	{r4, lr}
 801eb3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801eb3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801eb42:	4291      	cmp	r1, r2
 801eb44:	d1f9      	bne.n	801eb3a <memcpy+0xe>
 801eb46:	bd10      	pop	{r4, pc}

0801eb48 <memmove>:
 801eb48:	4288      	cmp	r0, r1
 801eb4a:	b510      	push	{r4, lr}
 801eb4c:	eb01 0402 	add.w	r4, r1, r2
 801eb50:	d902      	bls.n	801eb58 <memmove+0x10>
 801eb52:	4284      	cmp	r4, r0
 801eb54:	4623      	mov	r3, r4
 801eb56:	d807      	bhi.n	801eb68 <memmove+0x20>
 801eb58:	1e43      	subs	r3, r0, #1
 801eb5a:	42a1      	cmp	r1, r4
 801eb5c:	d008      	beq.n	801eb70 <memmove+0x28>
 801eb5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801eb62:	f803 2f01 	strb.w	r2, [r3, #1]!
 801eb66:	e7f8      	b.n	801eb5a <memmove+0x12>
 801eb68:	4402      	add	r2, r0
 801eb6a:	4601      	mov	r1, r0
 801eb6c:	428a      	cmp	r2, r1
 801eb6e:	d100      	bne.n	801eb72 <memmove+0x2a>
 801eb70:	bd10      	pop	{r4, pc}
 801eb72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801eb76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801eb7a:	e7f7      	b.n	801eb6c <memmove+0x24>

0801eb7c <memset>:
 801eb7c:	4402      	add	r2, r0
 801eb7e:	4603      	mov	r3, r0
 801eb80:	4293      	cmp	r3, r2
 801eb82:	d100      	bne.n	801eb86 <memset+0xa>
 801eb84:	4770      	bx	lr
 801eb86:	f803 1b01 	strb.w	r1, [r3], #1
 801eb8a:	e7f9      	b.n	801eb80 <memset+0x4>

0801eb8c <_free_r>:
 801eb8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801eb8e:	2900      	cmp	r1, #0
 801eb90:	d048      	beq.n	801ec24 <_free_r+0x98>
 801eb92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801eb96:	9001      	str	r0, [sp, #4]
 801eb98:	2b00      	cmp	r3, #0
 801eb9a:	f1a1 0404 	sub.w	r4, r1, #4
 801eb9e:	bfb8      	it	lt
 801eba0:	18e4      	addlt	r4, r4, r3
 801eba2:	f002 f905 	bl	8020db0 <__malloc_lock>
 801eba6:	4a20      	ldr	r2, [pc, #128]	; (801ec28 <_free_r+0x9c>)
 801eba8:	9801      	ldr	r0, [sp, #4]
 801ebaa:	6813      	ldr	r3, [r2, #0]
 801ebac:	4615      	mov	r5, r2
 801ebae:	b933      	cbnz	r3, 801ebbe <_free_r+0x32>
 801ebb0:	6063      	str	r3, [r4, #4]
 801ebb2:	6014      	str	r4, [r2, #0]
 801ebb4:	b003      	add	sp, #12
 801ebb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ebba:	f002 b8ff 	b.w	8020dbc <__malloc_unlock>
 801ebbe:	42a3      	cmp	r3, r4
 801ebc0:	d90b      	bls.n	801ebda <_free_r+0x4e>
 801ebc2:	6821      	ldr	r1, [r4, #0]
 801ebc4:	1862      	adds	r2, r4, r1
 801ebc6:	4293      	cmp	r3, r2
 801ebc8:	bf04      	itt	eq
 801ebca:	681a      	ldreq	r2, [r3, #0]
 801ebcc:	685b      	ldreq	r3, [r3, #4]
 801ebce:	6063      	str	r3, [r4, #4]
 801ebd0:	bf04      	itt	eq
 801ebd2:	1852      	addeq	r2, r2, r1
 801ebd4:	6022      	streq	r2, [r4, #0]
 801ebd6:	602c      	str	r4, [r5, #0]
 801ebd8:	e7ec      	b.n	801ebb4 <_free_r+0x28>
 801ebda:	461a      	mov	r2, r3
 801ebdc:	685b      	ldr	r3, [r3, #4]
 801ebde:	b10b      	cbz	r3, 801ebe4 <_free_r+0x58>
 801ebe0:	42a3      	cmp	r3, r4
 801ebe2:	d9fa      	bls.n	801ebda <_free_r+0x4e>
 801ebe4:	6811      	ldr	r1, [r2, #0]
 801ebe6:	1855      	adds	r5, r2, r1
 801ebe8:	42a5      	cmp	r5, r4
 801ebea:	d10b      	bne.n	801ec04 <_free_r+0x78>
 801ebec:	6824      	ldr	r4, [r4, #0]
 801ebee:	4421      	add	r1, r4
 801ebf0:	1854      	adds	r4, r2, r1
 801ebf2:	42a3      	cmp	r3, r4
 801ebf4:	6011      	str	r1, [r2, #0]
 801ebf6:	d1dd      	bne.n	801ebb4 <_free_r+0x28>
 801ebf8:	681c      	ldr	r4, [r3, #0]
 801ebfa:	685b      	ldr	r3, [r3, #4]
 801ebfc:	6053      	str	r3, [r2, #4]
 801ebfe:	4421      	add	r1, r4
 801ec00:	6011      	str	r1, [r2, #0]
 801ec02:	e7d7      	b.n	801ebb4 <_free_r+0x28>
 801ec04:	d902      	bls.n	801ec0c <_free_r+0x80>
 801ec06:	230c      	movs	r3, #12
 801ec08:	6003      	str	r3, [r0, #0]
 801ec0a:	e7d3      	b.n	801ebb4 <_free_r+0x28>
 801ec0c:	6825      	ldr	r5, [r4, #0]
 801ec0e:	1961      	adds	r1, r4, r5
 801ec10:	428b      	cmp	r3, r1
 801ec12:	bf04      	itt	eq
 801ec14:	6819      	ldreq	r1, [r3, #0]
 801ec16:	685b      	ldreq	r3, [r3, #4]
 801ec18:	6063      	str	r3, [r4, #4]
 801ec1a:	bf04      	itt	eq
 801ec1c:	1949      	addeq	r1, r1, r5
 801ec1e:	6021      	streq	r1, [r4, #0]
 801ec20:	6054      	str	r4, [r2, #4]
 801ec22:	e7c7      	b.n	801ebb4 <_free_r+0x28>
 801ec24:	b003      	add	sp, #12
 801ec26:	bd30      	pop	{r4, r5, pc}
 801ec28:	20001bd0 	.word	0x20001bd0

0801ec2c <_malloc_r>:
 801ec2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec2e:	1ccd      	adds	r5, r1, #3
 801ec30:	f025 0503 	bic.w	r5, r5, #3
 801ec34:	3508      	adds	r5, #8
 801ec36:	2d0c      	cmp	r5, #12
 801ec38:	bf38      	it	cc
 801ec3a:	250c      	movcc	r5, #12
 801ec3c:	2d00      	cmp	r5, #0
 801ec3e:	4606      	mov	r6, r0
 801ec40:	db01      	blt.n	801ec46 <_malloc_r+0x1a>
 801ec42:	42a9      	cmp	r1, r5
 801ec44:	d903      	bls.n	801ec4e <_malloc_r+0x22>
 801ec46:	230c      	movs	r3, #12
 801ec48:	6033      	str	r3, [r6, #0]
 801ec4a:	2000      	movs	r0, #0
 801ec4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ec4e:	f002 f8af 	bl	8020db0 <__malloc_lock>
 801ec52:	4921      	ldr	r1, [pc, #132]	; (801ecd8 <_malloc_r+0xac>)
 801ec54:	680a      	ldr	r2, [r1, #0]
 801ec56:	4614      	mov	r4, r2
 801ec58:	b99c      	cbnz	r4, 801ec82 <_malloc_r+0x56>
 801ec5a:	4f20      	ldr	r7, [pc, #128]	; (801ecdc <_malloc_r+0xb0>)
 801ec5c:	683b      	ldr	r3, [r7, #0]
 801ec5e:	b923      	cbnz	r3, 801ec6a <_malloc_r+0x3e>
 801ec60:	4621      	mov	r1, r4
 801ec62:	4630      	mov	r0, r6
 801ec64:	f000 feca 	bl	801f9fc <_sbrk_r>
 801ec68:	6038      	str	r0, [r7, #0]
 801ec6a:	4629      	mov	r1, r5
 801ec6c:	4630      	mov	r0, r6
 801ec6e:	f000 fec5 	bl	801f9fc <_sbrk_r>
 801ec72:	1c43      	adds	r3, r0, #1
 801ec74:	d123      	bne.n	801ecbe <_malloc_r+0x92>
 801ec76:	230c      	movs	r3, #12
 801ec78:	6033      	str	r3, [r6, #0]
 801ec7a:	4630      	mov	r0, r6
 801ec7c:	f002 f89e 	bl	8020dbc <__malloc_unlock>
 801ec80:	e7e3      	b.n	801ec4a <_malloc_r+0x1e>
 801ec82:	6823      	ldr	r3, [r4, #0]
 801ec84:	1b5b      	subs	r3, r3, r5
 801ec86:	d417      	bmi.n	801ecb8 <_malloc_r+0x8c>
 801ec88:	2b0b      	cmp	r3, #11
 801ec8a:	d903      	bls.n	801ec94 <_malloc_r+0x68>
 801ec8c:	6023      	str	r3, [r4, #0]
 801ec8e:	441c      	add	r4, r3
 801ec90:	6025      	str	r5, [r4, #0]
 801ec92:	e004      	b.n	801ec9e <_malloc_r+0x72>
 801ec94:	6863      	ldr	r3, [r4, #4]
 801ec96:	42a2      	cmp	r2, r4
 801ec98:	bf0c      	ite	eq
 801ec9a:	600b      	streq	r3, [r1, #0]
 801ec9c:	6053      	strne	r3, [r2, #4]
 801ec9e:	4630      	mov	r0, r6
 801eca0:	f002 f88c 	bl	8020dbc <__malloc_unlock>
 801eca4:	f104 000b 	add.w	r0, r4, #11
 801eca8:	1d23      	adds	r3, r4, #4
 801ecaa:	f020 0007 	bic.w	r0, r0, #7
 801ecae:	1ac2      	subs	r2, r0, r3
 801ecb0:	d0cc      	beq.n	801ec4c <_malloc_r+0x20>
 801ecb2:	1a1b      	subs	r3, r3, r0
 801ecb4:	50a3      	str	r3, [r4, r2]
 801ecb6:	e7c9      	b.n	801ec4c <_malloc_r+0x20>
 801ecb8:	4622      	mov	r2, r4
 801ecba:	6864      	ldr	r4, [r4, #4]
 801ecbc:	e7cc      	b.n	801ec58 <_malloc_r+0x2c>
 801ecbe:	1cc4      	adds	r4, r0, #3
 801ecc0:	f024 0403 	bic.w	r4, r4, #3
 801ecc4:	42a0      	cmp	r0, r4
 801ecc6:	d0e3      	beq.n	801ec90 <_malloc_r+0x64>
 801ecc8:	1a21      	subs	r1, r4, r0
 801ecca:	4630      	mov	r0, r6
 801eccc:	f000 fe96 	bl	801f9fc <_sbrk_r>
 801ecd0:	3001      	adds	r0, #1
 801ecd2:	d1dd      	bne.n	801ec90 <_malloc_r+0x64>
 801ecd4:	e7cf      	b.n	801ec76 <_malloc_r+0x4a>
 801ecd6:	bf00      	nop
 801ecd8:	20001bd0 	.word	0x20001bd0
 801ecdc:	20001bd4 	.word	0x20001bd4

0801ece0 <__sfputc_r>:
 801ece0:	6893      	ldr	r3, [r2, #8]
 801ece2:	3b01      	subs	r3, #1
 801ece4:	2b00      	cmp	r3, #0
 801ece6:	b410      	push	{r4}
 801ece8:	6093      	str	r3, [r2, #8]
 801ecea:	da08      	bge.n	801ecfe <__sfputc_r+0x1e>
 801ecec:	6994      	ldr	r4, [r2, #24]
 801ecee:	42a3      	cmp	r3, r4
 801ecf0:	db01      	blt.n	801ecf6 <__sfputc_r+0x16>
 801ecf2:	290a      	cmp	r1, #10
 801ecf4:	d103      	bne.n	801ecfe <__sfputc_r+0x1e>
 801ecf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ecfa:	f000 bfa1 	b.w	801fc40 <__swbuf_r>
 801ecfe:	6813      	ldr	r3, [r2, #0]
 801ed00:	1c58      	adds	r0, r3, #1
 801ed02:	6010      	str	r0, [r2, #0]
 801ed04:	7019      	strb	r1, [r3, #0]
 801ed06:	4608      	mov	r0, r1
 801ed08:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ed0c:	4770      	bx	lr

0801ed0e <__sfputs_r>:
 801ed0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed10:	4606      	mov	r6, r0
 801ed12:	460f      	mov	r7, r1
 801ed14:	4614      	mov	r4, r2
 801ed16:	18d5      	adds	r5, r2, r3
 801ed18:	42ac      	cmp	r4, r5
 801ed1a:	d101      	bne.n	801ed20 <__sfputs_r+0x12>
 801ed1c:	2000      	movs	r0, #0
 801ed1e:	e007      	b.n	801ed30 <__sfputs_r+0x22>
 801ed20:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ed24:	463a      	mov	r2, r7
 801ed26:	4630      	mov	r0, r6
 801ed28:	f7ff ffda 	bl	801ece0 <__sfputc_r>
 801ed2c:	1c43      	adds	r3, r0, #1
 801ed2e:	d1f3      	bne.n	801ed18 <__sfputs_r+0xa>
 801ed30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ed34 <_vfiprintf_r>:
 801ed34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed38:	460d      	mov	r5, r1
 801ed3a:	b09d      	sub	sp, #116	; 0x74
 801ed3c:	4614      	mov	r4, r2
 801ed3e:	4698      	mov	r8, r3
 801ed40:	4606      	mov	r6, r0
 801ed42:	b118      	cbz	r0, 801ed4c <_vfiprintf_r+0x18>
 801ed44:	6983      	ldr	r3, [r0, #24]
 801ed46:	b90b      	cbnz	r3, 801ed4c <_vfiprintf_r+0x18>
 801ed48:	f7ff fdfa 	bl	801e940 <__sinit>
 801ed4c:	4b89      	ldr	r3, [pc, #548]	; (801ef74 <_vfiprintf_r+0x240>)
 801ed4e:	429d      	cmp	r5, r3
 801ed50:	d11b      	bne.n	801ed8a <_vfiprintf_r+0x56>
 801ed52:	6875      	ldr	r5, [r6, #4]
 801ed54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ed56:	07d9      	lsls	r1, r3, #31
 801ed58:	d405      	bmi.n	801ed66 <_vfiprintf_r+0x32>
 801ed5a:	89ab      	ldrh	r3, [r5, #12]
 801ed5c:	059a      	lsls	r2, r3, #22
 801ed5e:	d402      	bmi.n	801ed66 <_vfiprintf_r+0x32>
 801ed60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ed62:	f7ff fec2 	bl	801eaea <__retarget_lock_acquire_recursive>
 801ed66:	89ab      	ldrh	r3, [r5, #12]
 801ed68:	071b      	lsls	r3, r3, #28
 801ed6a:	d501      	bpl.n	801ed70 <_vfiprintf_r+0x3c>
 801ed6c:	692b      	ldr	r3, [r5, #16]
 801ed6e:	b9eb      	cbnz	r3, 801edac <_vfiprintf_r+0x78>
 801ed70:	4629      	mov	r1, r5
 801ed72:	4630      	mov	r0, r6
 801ed74:	f000 ffc8 	bl	801fd08 <__swsetup_r>
 801ed78:	b1c0      	cbz	r0, 801edac <_vfiprintf_r+0x78>
 801ed7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ed7c:	07dc      	lsls	r4, r3, #31
 801ed7e:	d50e      	bpl.n	801ed9e <_vfiprintf_r+0x6a>
 801ed80:	f04f 30ff 	mov.w	r0, #4294967295
 801ed84:	b01d      	add	sp, #116	; 0x74
 801ed86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed8a:	4b7b      	ldr	r3, [pc, #492]	; (801ef78 <_vfiprintf_r+0x244>)
 801ed8c:	429d      	cmp	r5, r3
 801ed8e:	d101      	bne.n	801ed94 <_vfiprintf_r+0x60>
 801ed90:	68b5      	ldr	r5, [r6, #8]
 801ed92:	e7df      	b.n	801ed54 <_vfiprintf_r+0x20>
 801ed94:	4b79      	ldr	r3, [pc, #484]	; (801ef7c <_vfiprintf_r+0x248>)
 801ed96:	429d      	cmp	r5, r3
 801ed98:	bf08      	it	eq
 801ed9a:	68f5      	ldreq	r5, [r6, #12]
 801ed9c:	e7da      	b.n	801ed54 <_vfiprintf_r+0x20>
 801ed9e:	89ab      	ldrh	r3, [r5, #12]
 801eda0:	0598      	lsls	r0, r3, #22
 801eda2:	d4ed      	bmi.n	801ed80 <_vfiprintf_r+0x4c>
 801eda4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801eda6:	f7ff fea1 	bl	801eaec <__retarget_lock_release_recursive>
 801edaa:	e7e9      	b.n	801ed80 <_vfiprintf_r+0x4c>
 801edac:	2300      	movs	r3, #0
 801edae:	9309      	str	r3, [sp, #36]	; 0x24
 801edb0:	2320      	movs	r3, #32
 801edb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801edb6:	f8cd 800c 	str.w	r8, [sp, #12]
 801edba:	2330      	movs	r3, #48	; 0x30
 801edbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801ef80 <_vfiprintf_r+0x24c>
 801edc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801edc4:	f04f 0901 	mov.w	r9, #1
 801edc8:	4623      	mov	r3, r4
 801edca:	469a      	mov	sl, r3
 801edcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801edd0:	b10a      	cbz	r2, 801edd6 <_vfiprintf_r+0xa2>
 801edd2:	2a25      	cmp	r2, #37	; 0x25
 801edd4:	d1f9      	bne.n	801edca <_vfiprintf_r+0x96>
 801edd6:	ebba 0b04 	subs.w	fp, sl, r4
 801edda:	d00b      	beq.n	801edf4 <_vfiprintf_r+0xc0>
 801eddc:	465b      	mov	r3, fp
 801edde:	4622      	mov	r2, r4
 801ede0:	4629      	mov	r1, r5
 801ede2:	4630      	mov	r0, r6
 801ede4:	f7ff ff93 	bl	801ed0e <__sfputs_r>
 801ede8:	3001      	adds	r0, #1
 801edea:	f000 80aa 	beq.w	801ef42 <_vfiprintf_r+0x20e>
 801edee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801edf0:	445a      	add	r2, fp
 801edf2:	9209      	str	r2, [sp, #36]	; 0x24
 801edf4:	f89a 3000 	ldrb.w	r3, [sl]
 801edf8:	2b00      	cmp	r3, #0
 801edfa:	f000 80a2 	beq.w	801ef42 <_vfiprintf_r+0x20e>
 801edfe:	2300      	movs	r3, #0
 801ee00:	f04f 32ff 	mov.w	r2, #4294967295
 801ee04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ee08:	f10a 0a01 	add.w	sl, sl, #1
 801ee0c:	9304      	str	r3, [sp, #16]
 801ee0e:	9307      	str	r3, [sp, #28]
 801ee10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ee14:	931a      	str	r3, [sp, #104]	; 0x68
 801ee16:	4654      	mov	r4, sl
 801ee18:	2205      	movs	r2, #5
 801ee1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ee1e:	4858      	ldr	r0, [pc, #352]	; (801ef80 <_vfiprintf_r+0x24c>)
 801ee20:	f7e1 f9de 	bl	80001e0 <memchr>
 801ee24:	9a04      	ldr	r2, [sp, #16]
 801ee26:	b9d8      	cbnz	r0, 801ee60 <_vfiprintf_r+0x12c>
 801ee28:	06d1      	lsls	r1, r2, #27
 801ee2a:	bf44      	itt	mi
 801ee2c:	2320      	movmi	r3, #32
 801ee2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ee32:	0713      	lsls	r3, r2, #28
 801ee34:	bf44      	itt	mi
 801ee36:	232b      	movmi	r3, #43	; 0x2b
 801ee38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ee3c:	f89a 3000 	ldrb.w	r3, [sl]
 801ee40:	2b2a      	cmp	r3, #42	; 0x2a
 801ee42:	d015      	beq.n	801ee70 <_vfiprintf_r+0x13c>
 801ee44:	9a07      	ldr	r2, [sp, #28]
 801ee46:	4654      	mov	r4, sl
 801ee48:	2000      	movs	r0, #0
 801ee4a:	f04f 0c0a 	mov.w	ip, #10
 801ee4e:	4621      	mov	r1, r4
 801ee50:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ee54:	3b30      	subs	r3, #48	; 0x30
 801ee56:	2b09      	cmp	r3, #9
 801ee58:	d94e      	bls.n	801eef8 <_vfiprintf_r+0x1c4>
 801ee5a:	b1b0      	cbz	r0, 801ee8a <_vfiprintf_r+0x156>
 801ee5c:	9207      	str	r2, [sp, #28]
 801ee5e:	e014      	b.n	801ee8a <_vfiprintf_r+0x156>
 801ee60:	eba0 0308 	sub.w	r3, r0, r8
 801ee64:	fa09 f303 	lsl.w	r3, r9, r3
 801ee68:	4313      	orrs	r3, r2
 801ee6a:	9304      	str	r3, [sp, #16]
 801ee6c:	46a2      	mov	sl, r4
 801ee6e:	e7d2      	b.n	801ee16 <_vfiprintf_r+0xe2>
 801ee70:	9b03      	ldr	r3, [sp, #12]
 801ee72:	1d19      	adds	r1, r3, #4
 801ee74:	681b      	ldr	r3, [r3, #0]
 801ee76:	9103      	str	r1, [sp, #12]
 801ee78:	2b00      	cmp	r3, #0
 801ee7a:	bfbb      	ittet	lt
 801ee7c:	425b      	neglt	r3, r3
 801ee7e:	f042 0202 	orrlt.w	r2, r2, #2
 801ee82:	9307      	strge	r3, [sp, #28]
 801ee84:	9307      	strlt	r3, [sp, #28]
 801ee86:	bfb8      	it	lt
 801ee88:	9204      	strlt	r2, [sp, #16]
 801ee8a:	7823      	ldrb	r3, [r4, #0]
 801ee8c:	2b2e      	cmp	r3, #46	; 0x2e
 801ee8e:	d10c      	bne.n	801eeaa <_vfiprintf_r+0x176>
 801ee90:	7863      	ldrb	r3, [r4, #1]
 801ee92:	2b2a      	cmp	r3, #42	; 0x2a
 801ee94:	d135      	bne.n	801ef02 <_vfiprintf_r+0x1ce>
 801ee96:	9b03      	ldr	r3, [sp, #12]
 801ee98:	1d1a      	adds	r2, r3, #4
 801ee9a:	681b      	ldr	r3, [r3, #0]
 801ee9c:	9203      	str	r2, [sp, #12]
 801ee9e:	2b00      	cmp	r3, #0
 801eea0:	bfb8      	it	lt
 801eea2:	f04f 33ff 	movlt.w	r3, #4294967295
 801eea6:	3402      	adds	r4, #2
 801eea8:	9305      	str	r3, [sp, #20]
 801eeaa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801ef90 <_vfiprintf_r+0x25c>
 801eeae:	7821      	ldrb	r1, [r4, #0]
 801eeb0:	2203      	movs	r2, #3
 801eeb2:	4650      	mov	r0, sl
 801eeb4:	f7e1 f994 	bl	80001e0 <memchr>
 801eeb8:	b140      	cbz	r0, 801eecc <_vfiprintf_r+0x198>
 801eeba:	2340      	movs	r3, #64	; 0x40
 801eebc:	eba0 000a 	sub.w	r0, r0, sl
 801eec0:	fa03 f000 	lsl.w	r0, r3, r0
 801eec4:	9b04      	ldr	r3, [sp, #16]
 801eec6:	4303      	orrs	r3, r0
 801eec8:	3401      	adds	r4, #1
 801eeca:	9304      	str	r3, [sp, #16]
 801eecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eed0:	482c      	ldr	r0, [pc, #176]	; (801ef84 <_vfiprintf_r+0x250>)
 801eed2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801eed6:	2206      	movs	r2, #6
 801eed8:	f7e1 f982 	bl	80001e0 <memchr>
 801eedc:	2800      	cmp	r0, #0
 801eede:	d03f      	beq.n	801ef60 <_vfiprintf_r+0x22c>
 801eee0:	4b29      	ldr	r3, [pc, #164]	; (801ef88 <_vfiprintf_r+0x254>)
 801eee2:	bb1b      	cbnz	r3, 801ef2c <_vfiprintf_r+0x1f8>
 801eee4:	9b03      	ldr	r3, [sp, #12]
 801eee6:	3307      	adds	r3, #7
 801eee8:	f023 0307 	bic.w	r3, r3, #7
 801eeec:	3308      	adds	r3, #8
 801eeee:	9303      	str	r3, [sp, #12]
 801eef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eef2:	443b      	add	r3, r7
 801eef4:	9309      	str	r3, [sp, #36]	; 0x24
 801eef6:	e767      	b.n	801edc8 <_vfiprintf_r+0x94>
 801eef8:	fb0c 3202 	mla	r2, ip, r2, r3
 801eefc:	460c      	mov	r4, r1
 801eefe:	2001      	movs	r0, #1
 801ef00:	e7a5      	b.n	801ee4e <_vfiprintf_r+0x11a>
 801ef02:	2300      	movs	r3, #0
 801ef04:	3401      	adds	r4, #1
 801ef06:	9305      	str	r3, [sp, #20]
 801ef08:	4619      	mov	r1, r3
 801ef0a:	f04f 0c0a 	mov.w	ip, #10
 801ef0e:	4620      	mov	r0, r4
 801ef10:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ef14:	3a30      	subs	r2, #48	; 0x30
 801ef16:	2a09      	cmp	r2, #9
 801ef18:	d903      	bls.n	801ef22 <_vfiprintf_r+0x1ee>
 801ef1a:	2b00      	cmp	r3, #0
 801ef1c:	d0c5      	beq.n	801eeaa <_vfiprintf_r+0x176>
 801ef1e:	9105      	str	r1, [sp, #20]
 801ef20:	e7c3      	b.n	801eeaa <_vfiprintf_r+0x176>
 801ef22:	fb0c 2101 	mla	r1, ip, r1, r2
 801ef26:	4604      	mov	r4, r0
 801ef28:	2301      	movs	r3, #1
 801ef2a:	e7f0      	b.n	801ef0e <_vfiprintf_r+0x1da>
 801ef2c:	ab03      	add	r3, sp, #12
 801ef2e:	9300      	str	r3, [sp, #0]
 801ef30:	462a      	mov	r2, r5
 801ef32:	4b16      	ldr	r3, [pc, #88]	; (801ef8c <_vfiprintf_r+0x258>)
 801ef34:	a904      	add	r1, sp, #16
 801ef36:	4630      	mov	r0, r6
 801ef38:	f000 f8cc 	bl	801f0d4 <_printf_float>
 801ef3c:	4607      	mov	r7, r0
 801ef3e:	1c78      	adds	r0, r7, #1
 801ef40:	d1d6      	bne.n	801eef0 <_vfiprintf_r+0x1bc>
 801ef42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ef44:	07d9      	lsls	r1, r3, #31
 801ef46:	d405      	bmi.n	801ef54 <_vfiprintf_r+0x220>
 801ef48:	89ab      	ldrh	r3, [r5, #12]
 801ef4a:	059a      	lsls	r2, r3, #22
 801ef4c:	d402      	bmi.n	801ef54 <_vfiprintf_r+0x220>
 801ef4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ef50:	f7ff fdcc 	bl	801eaec <__retarget_lock_release_recursive>
 801ef54:	89ab      	ldrh	r3, [r5, #12]
 801ef56:	065b      	lsls	r3, r3, #25
 801ef58:	f53f af12 	bmi.w	801ed80 <_vfiprintf_r+0x4c>
 801ef5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ef5e:	e711      	b.n	801ed84 <_vfiprintf_r+0x50>
 801ef60:	ab03      	add	r3, sp, #12
 801ef62:	9300      	str	r3, [sp, #0]
 801ef64:	462a      	mov	r2, r5
 801ef66:	4b09      	ldr	r3, [pc, #36]	; (801ef8c <_vfiprintf_r+0x258>)
 801ef68:	a904      	add	r1, sp, #16
 801ef6a:	4630      	mov	r0, r6
 801ef6c:	f000 fb56 	bl	801f61c <_printf_i>
 801ef70:	e7e4      	b.n	801ef3c <_vfiprintf_r+0x208>
 801ef72:	bf00      	nop
 801ef74:	08025c64 	.word	0x08025c64
 801ef78:	08025c84 	.word	0x08025c84
 801ef7c:	08025c44 	.word	0x08025c44
 801ef80:	08025ca8 	.word	0x08025ca8
 801ef84:	08025cb2 	.word	0x08025cb2
 801ef88:	0801f0d5 	.word	0x0801f0d5
 801ef8c:	0801ed0f 	.word	0x0801ed0f
 801ef90:	08025cae 	.word	0x08025cae

0801ef94 <__cvt>:
 801ef94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ef98:	ec55 4b10 	vmov	r4, r5, d0
 801ef9c:	2d00      	cmp	r5, #0
 801ef9e:	460e      	mov	r6, r1
 801efa0:	4619      	mov	r1, r3
 801efa2:	462b      	mov	r3, r5
 801efa4:	bfbb      	ittet	lt
 801efa6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801efaa:	461d      	movlt	r5, r3
 801efac:	2300      	movge	r3, #0
 801efae:	232d      	movlt	r3, #45	; 0x2d
 801efb0:	700b      	strb	r3, [r1, #0]
 801efb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801efb4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801efb8:	4691      	mov	r9, r2
 801efba:	f023 0820 	bic.w	r8, r3, #32
 801efbe:	bfbc      	itt	lt
 801efc0:	4622      	movlt	r2, r4
 801efc2:	4614      	movlt	r4, r2
 801efc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801efc8:	d005      	beq.n	801efd6 <__cvt+0x42>
 801efca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801efce:	d100      	bne.n	801efd2 <__cvt+0x3e>
 801efd0:	3601      	adds	r6, #1
 801efd2:	2102      	movs	r1, #2
 801efd4:	e000      	b.n	801efd8 <__cvt+0x44>
 801efd6:	2103      	movs	r1, #3
 801efd8:	ab03      	add	r3, sp, #12
 801efda:	9301      	str	r3, [sp, #4]
 801efdc:	ab02      	add	r3, sp, #8
 801efde:	9300      	str	r3, [sp, #0]
 801efe0:	ec45 4b10 	vmov	d0, r4, r5
 801efe4:	4653      	mov	r3, sl
 801efe6:	4632      	mov	r2, r6
 801efe8:	f000 ffa2 	bl	801ff30 <_dtoa_r>
 801efec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801eff0:	4607      	mov	r7, r0
 801eff2:	d102      	bne.n	801effa <__cvt+0x66>
 801eff4:	f019 0f01 	tst.w	r9, #1
 801eff8:	d022      	beq.n	801f040 <__cvt+0xac>
 801effa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801effe:	eb07 0906 	add.w	r9, r7, r6
 801f002:	d110      	bne.n	801f026 <__cvt+0x92>
 801f004:	783b      	ldrb	r3, [r7, #0]
 801f006:	2b30      	cmp	r3, #48	; 0x30
 801f008:	d10a      	bne.n	801f020 <__cvt+0x8c>
 801f00a:	2200      	movs	r2, #0
 801f00c:	2300      	movs	r3, #0
 801f00e:	4620      	mov	r0, r4
 801f010:	4629      	mov	r1, r5
 801f012:	f7e1 fd59 	bl	8000ac8 <__aeabi_dcmpeq>
 801f016:	b918      	cbnz	r0, 801f020 <__cvt+0x8c>
 801f018:	f1c6 0601 	rsb	r6, r6, #1
 801f01c:	f8ca 6000 	str.w	r6, [sl]
 801f020:	f8da 3000 	ldr.w	r3, [sl]
 801f024:	4499      	add	r9, r3
 801f026:	2200      	movs	r2, #0
 801f028:	2300      	movs	r3, #0
 801f02a:	4620      	mov	r0, r4
 801f02c:	4629      	mov	r1, r5
 801f02e:	f7e1 fd4b 	bl	8000ac8 <__aeabi_dcmpeq>
 801f032:	b108      	cbz	r0, 801f038 <__cvt+0xa4>
 801f034:	f8cd 900c 	str.w	r9, [sp, #12]
 801f038:	2230      	movs	r2, #48	; 0x30
 801f03a:	9b03      	ldr	r3, [sp, #12]
 801f03c:	454b      	cmp	r3, r9
 801f03e:	d307      	bcc.n	801f050 <__cvt+0xbc>
 801f040:	9b03      	ldr	r3, [sp, #12]
 801f042:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f044:	1bdb      	subs	r3, r3, r7
 801f046:	4638      	mov	r0, r7
 801f048:	6013      	str	r3, [r2, #0]
 801f04a:	b004      	add	sp, #16
 801f04c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f050:	1c59      	adds	r1, r3, #1
 801f052:	9103      	str	r1, [sp, #12]
 801f054:	701a      	strb	r2, [r3, #0]
 801f056:	e7f0      	b.n	801f03a <__cvt+0xa6>

0801f058 <__exponent>:
 801f058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f05a:	4603      	mov	r3, r0
 801f05c:	2900      	cmp	r1, #0
 801f05e:	bfb8      	it	lt
 801f060:	4249      	neglt	r1, r1
 801f062:	f803 2b02 	strb.w	r2, [r3], #2
 801f066:	bfb4      	ite	lt
 801f068:	222d      	movlt	r2, #45	; 0x2d
 801f06a:	222b      	movge	r2, #43	; 0x2b
 801f06c:	2909      	cmp	r1, #9
 801f06e:	7042      	strb	r2, [r0, #1]
 801f070:	dd2a      	ble.n	801f0c8 <__exponent+0x70>
 801f072:	f10d 0407 	add.w	r4, sp, #7
 801f076:	46a4      	mov	ip, r4
 801f078:	270a      	movs	r7, #10
 801f07a:	46a6      	mov	lr, r4
 801f07c:	460a      	mov	r2, r1
 801f07e:	fb91 f6f7 	sdiv	r6, r1, r7
 801f082:	fb07 1516 	mls	r5, r7, r6, r1
 801f086:	3530      	adds	r5, #48	; 0x30
 801f088:	2a63      	cmp	r2, #99	; 0x63
 801f08a:	f104 34ff 	add.w	r4, r4, #4294967295
 801f08e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801f092:	4631      	mov	r1, r6
 801f094:	dcf1      	bgt.n	801f07a <__exponent+0x22>
 801f096:	3130      	adds	r1, #48	; 0x30
 801f098:	f1ae 0502 	sub.w	r5, lr, #2
 801f09c:	f804 1c01 	strb.w	r1, [r4, #-1]
 801f0a0:	1c44      	adds	r4, r0, #1
 801f0a2:	4629      	mov	r1, r5
 801f0a4:	4561      	cmp	r1, ip
 801f0a6:	d30a      	bcc.n	801f0be <__exponent+0x66>
 801f0a8:	f10d 0209 	add.w	r2, sp, #9
 801f0ac:	eba2 020e 	sub.w	r2, r2, lr
 801f0b0:	4565      	cmp	r5, ip
 801f0b2:	bf88      	it	hi
 801f0b4:	2200      	movhi	r2, #0
 801f0b6:	4413      	add	r3, r2
 801f0b8:	1a18      	subs	r0, r3, r0
 801f0ba:	b003      	add	sp, #12
 801f0bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f0be:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f0c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 801f0c6:	e7ed      	b.n	801f0a4 <__exponent+0x4c>
 801f0c8:	2330      	movs	r3, #48	; 0x30
 801f0ca:	3130      	adds	r1, #48	; 0x30
 801f0cc:	7083      	strb	r3, [r0, #2]
 801f0ce:	70c1      	strb	r1, [r0, #3]
 801f0d0:	1d03      	adds	r3, r0, #4
 801f0d2:	e7f1      	b.n	801f0b8 <__exponent+0x60>

0801f0d4 <_printf_float>:
 801f0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0d8:	ed2d 8b02 	vpush	{d8}
 801f0dc:	b08d      	sub	sp, #52	; 0x34
 801f0de:	460c      	mov	r4, r1
 801f0e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801f0e4:	4616      	mov	r6, r2
 801f0e6:	461f      	mov	r7, r3
 801f0e8:	4605      	mov	r5, r0
 801f0ea:	f001 fdd5 	bl	8020c98 <_localeconv_r>
 801f0ee:	f8d0 a000 	ldr.w	sl, [r0]
 801f0f2:	4650      	mov	r0, sl
 801f0f4:	f7e1 f86c 	bl	80001d0 <strlen>
 801f0f8:	2300      	movs	r3, #0
 801f0fa:	930a      	str	r3, [sp, #40]	; 0x28
 801f0fc:	6823      	ldr	r3, [r4, #0]
 801f0fe:	9305      	str	r3, [sp, #20]
 801f100:	f8d8 3000 	ldr.w	r3, [r8]
 801f104:	f894 b018 	ldrb.w	fp, [r4, #24]
 801f108:	3307      	adds	r3, #7
 801f10a:	f023 0307 	bic.w	r3, r3, #7
 801f10e:	f103 0208 	add.w	r2, r3, #8
 801f112:	f8c8 2000 	str.w	r2, [r8]
 801f116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f11a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801f11e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801f122:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801f126:	9307      	str	r3, [sp, #28]
 801f128:	f8cd 8018 	str.w	r8, [sp, #24]
 801f12c:	ee08 0a10 	vmov	s16, r0
 801f130:	4b9f      	ldr	r3, [pc, #636]	; (801f3b0 <_printf_float+0x2dc>)
 801f132:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f136:	f04f 32ff 	mov.w	r2, #4294967295
 801f13a:	f7e1 fcf7 	bl	8000b2c <__aeabi_dcmpun>
 801f13e:	bb88      	cbnz	r0, 801f1a4 <_printf_float+0xd0>
 801f140:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f144:	4b9a      	ldr	r3, [pc, #616]	; (801f3b0 <_printf_float+0x2dc>)
 801f146:	f04f 32ff 	mov.w	r2, #4294967295
 801f14a:	f7e1 fcd1 	bl	8000af0 <__aeabi_dcmple>
 801f14e:	bb48      	cbnz	r0, 801f1a4 <_printf_float+0xd0>
 801f150:	2200      	movs	r2, #0
 801f152:	2300      	movs	r3, #0
 801f154:	4640      	mov	r0, r8
 801f156:	4649      	mov	r1, r9
 801f158:	f7e1 fcc0 	bl	8000adc <__aeabi_dcmplt>
 801f15c:	b110      	cbz	r0, 801f164 <_printf_float+0x90>
 801f15e:	232d      	movs	r3, #45	; 0x2d
 801f160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f164:	4b93      	ldr	r3, [pc, #588]	; (801f3b4 <_printf_float+0x2e0>)
 801f166:	4894      	ldr	r0, [pc, #592]	; (801f3b8 <_printf_float+0x2e4>)
 801f168:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801f16c:	bf94      	ite	ls
 801f16e:	4698      	movls	r8, r3
 801f170:	4680      	movhi	r8, r0
 801f172:	2303      	movs	r3, #3
 801f174:	6123      	str	r3, [r4, #16]
 801f176:	9b05      	ldr	r3, [sp, #20]
 801f178:	f023 0204 	bic.w	r2, r3, #4
 801f17c:	6022      	str	r2, [r4, #0]
 801f17e:	f04f 0900 	mov.w	r9, #0
 801f182:	9700      	str	r7, [sp, #0]
 801f184:	4633      	mov	r3, r6
 801f186:	aa0b      	add	r2, sp, #44	; 0x2c
 801f188:	4621      	mov	r1, r4
 801f18a:	4628      	mov	r0, r5
 801f18c:	f000 f9d8 	bl	801f540 <_printf_common>
 801f190:	3001      	adds	r0, #1
 801f192:	f040 8090 	bne.w	801f2b6 <_printf_float+0x1e2>
 801f196:	f04f 30ff 	mov.w	r0, #4294967295
 801f19a:	b00d      	add	sp, #52	; 0x34
 801f19c:	ecbd 8b02 	vpop	{d8}
 801f1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1a4:	4642      	mov	r2, r8
 801f1a6:	464b      	mov	r3, r9
 801f1a8:	4640      	mov	r0, r8
 801f1aa:	4649      	mov	r1, r9
 801f1ac:	f7e1 fcbe 	bl	8000b2c <__aeabi_dcmpun>
 801f1b0:	b140      	cbz	r0, 801f1c4 <_printf_float+0xf0>
 801f1b2:	464b      	mov	r3, r9
 801f1b4:	2b00      	cmp	r3, #0
 801f1b6:	bfbc      	itt	lt
 801f1b8:	232d      	movlt	r3, #45	; 0x2d
 801f1ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801f1be:	487f      	ldr	r0, [pc, #508]	; (801f3bc <_printf_float+0x2e8>)
 801f1c0:	4b7f      	ldr	r3, [pc, #508]	; (801f3c0 <_printf_float+0x2ec>)
 801f1c2:	e7d1      	b.n	801f168 <_printf_float+0x94>
 801f1c4:	6863      	ldr	r3, [r4, #4]
 801f1c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801f1ca:	9206      	str	r2, [sp, #24]
 801f1cc:	1c5a      	adds	r2, r3, #1
 801f1ce:	d13f      	bne.n	801f250 <_printf_float+0x17c>
 801f1d0:	2306      	movs	r3, #6
 801f1d2:	6063      	str	r3, [r4, #4]
 801f1d4:	9b05      	ldr	r3, [sp, #20]
 801f1d6:	6861      	ldr	r1, [r4, #4]
 801f1d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801f1dc:	2300      	movs	r3, #0
 801f1de:	9303      	str	r3, [sp, #12]
 801f1e0:	ab0a      	add	r3, sp, #40	; 0x28
 801f1e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 801f1e6:	ab09      	add	r3, sp, #36	; 0x24
 801f1e8:	ec49 8b10 	vmov	d0, r8, r9
 801f1ec:	9300      	str	r3, [sp, #0]
 801f1ee:	6022      	str	r2, [r4, #0]
 801f1f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801f1f4:	4628      	mov	r0, r5
 801f1f6:	f7ff fecd 	bl	801ef94 <__cvt>
 801f1fa:	9b06      	ldr	r3, [sp, #24]
 801f1fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f1fe:	2b47      	cmp	r3, #71	; 0x47
 801f200:	4680      	mov	r8, r0
 801f202:	d108      	bne.n	801f216 <_printf_float+0x142>
 801f204:	1cc8      	adds	r0, r1, #3
 801f206:	db02      	blt.n	801f20e <_printf_float+0x13a>
 801f208:	6863      	ldr	r3, [r4, #4]
 801f20a:	4299      	cmp	r1, r3
 801f20c:	dd41      	ble.n	801f292 <_printf_float+0x1be>
 801f20e:	f1ab 0b02 	sub.w	fp, fp, #2
 801f212:	fa5f fb8b 	uxtb.w	fp, fp
 801f216:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f21a:	d820      	bhi.n	801f25e <_printf_float+0x18a>
 801f21c:	3901      	subs	r1, #1
 801f21e:	465a      	mov	r2, fp
 801f220:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801f224:	9109      	str	r1, [sp, #36]	; 0x24
 801f226:	f7ff ff17 	bl	801f058 <__exponent>
 801f22a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f22c:	1813      	adds	r3, r2, r0
 801f22e:	2a01      	cmp	r2, #1
 801f230:	4681      	mov	r9, r0
 801f232:	6123      	str	r3, [r4, #16]
 801f234:	dc02      	bgt.n	801f23c <_printf_float+0x168>
 801f236:	6822      	ldr	r2, [r4, #0]
 801f238:	07d2      	lsls	r2, r2, #31
 801f23a:	d501      	bpl.n	801f240 <_printf_float+0x16c>
 801f23c:	3301      	adds	r3, #1
 801f23e:	6123      	str	r3, [r4, #16]
 801f240:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801f244:	2b00      	cmp	r3, #0
 801f246:	d09c      	beq.n	801f182 <_printf_float+0xae>
 801f248:	232d      	movs	r3, #45	; 0x2d
 801f24a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f24e:	e798      	b.n	801f182 <_printf_float+0xae>
 801f250:	9a06      	ldr	r2, [sp, #24]
 801f252:	2a47      	cmp	r2, #71	; 0x47
 801f254:	d1be      	bne.n	801f1d4 <_printf_float+0x100>
 801f256:	2b00      	cmp	r3, #0
 801f258:	d1bc      	bne.n	801f1d4 <_printf_float+0x100>
 801f25a:	2301      	movs	r3, #1
 801f25c:	e7b9      	b.n	801f1d2 <_printf_float+0xfe>
 801f25e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801f262:	d118      	bne.n	801f296 <_printf_float+0x1c2>
 801f264:	2900      	cmp	r1, #0
 801f266:	6863      	ldr	r3, [r4, #4]
 801f268:	dd0b      	ble.n	801f282 <_printf_float+0x1ae>
 801f26a:	6121      	str	r1, [r4, #16]
 801f26c:	b913      	cbnz	r3, 801f274 <_printf_float+0x1a0>
 801f26e:	6822      	ldr	r2, [r4, #0]
 801f270:	07d0      	lsls	r0, r2, #31
 801f272:	d502      	bpl.n	801f27a <_printf_float+0x1a6>
 801f274:	3301      	adds	r3, #1
 801f276:	440b      	add	r3, r1
 801f278:	6123      	str	r3, [r4, #16]
 801f27a:	65a1      	str	r1, [r4, #88]	; 0x58
 801f27c:	f04f 0900 	mov.w	r9, #0
 801f280:	e7de      	b.n	801f240 <_printf_float+0x16c>
 801f282:	b913      	cbnz	r3, 801f28a <_printf_float+0x1b6>
 801f284:	6822      	ldr	r2, [r4, #0]
 801f286:	07d2      	lsls	r2, r2, #31
 801f288:	d501      	bpl.n	801f28e <_printf_float+0x1ba>
 801f28a:	3302      	adds	r3, #2
 801f28c:	e7f4      	b.n	801f278 <_printf_float+0x1a4>
 801f28e:	2301      	movs	r3, #1
 801f290:	e7f2      	b.n	801f278 <_printf_float+0x1a4>
 801f292:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801f296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f298:	4299      	cmp	r1, r3
 801f29a:	db05      	blt.n	801f2a8 <_printf_float+0x1d4>
 801f29c:	6823      	ldr	r3, [r4, #0]
 801f29e:	6121      	str	r1, [r4, #16]
 801f2a0:	07d8      	lsls	r0, r3, #31
 801f2a2:	d5ea      	bpl.n	801f27a <_printf_float+0x1a6>
 801f2a4:	1c4b      	adds	r3, r1, #1
 801f2a6:	e7e7      	b.n	801f278 <_printf_float+0x1a4>
 801f2a8:	2900      	cmp	r1, #0
 801f2aa:	bfd4      	ite	le
 801f2ac:	f1c1 0202 	rsble	r2, r1, #2
 801f2b0:	2201      	movgt	r2, #1
 801f2b2:	4413      	add	r3, r2
 801f2b4:	e7e0      	b.n	801f278 <_printf_float+0x1a4>
 801f2b6:	6823      	ldr	r3, [r4, #0]
 801f2b8:	055a      	lsls	r2, r3, #21
 801f2ba:	d407      	bmi.n	801f2cc <_printf_float+0x1f8>
 801f2bc:	6923      	ldr	r3, [r4, #16]
 801f2be:	4642      	mov	r2, r8
 801f2c0:	4631      	mov	r1, r6
 801f2c2:	4628      	mov	r0, r5
 801f2c4:	47b8      	blx	r7
 801f2c6:	3001      	adds	r0, #1
 801f2c8:	d12c      	bne.n	801f324 <_printf_float+0x250>
 801f2ca:	e764      	b.n	801f196 <_printf_float+0xc2>
 801f2cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f2d0:	f240 80e0 	bls.w	801f494 <_printf_float+0x3c0>
 801f2d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801f2d8:	2200      	movs	r2, #0
 801f2da:	2300      	movs	r3, #0
 801f2dc:	f7e1 fbf4 	bl	8000ac8 <__aeabi_dcmpeq>
 801f2e0:	2800      	cmp	r0, #0
 801f2e2:	d034      	beq.n	801f34e <_printf_float+0x27a>
 801f2e4:	4a37      	ldr	r2, [pc, #220]	; (801f3c4 <_printf_float+0x2f0>)
 801f2e6:	2301      	movs	r3, #1
 801f2e8:	4631      	mov	r1, r6
 801f2ea:	4628      	mov	r0, r5
 801f2ec:	47b8      	blx	r7
 801f2ee:	3001      	adds	r0, #1
 801f2f0:	f43f af51 	beq.w	801f196 <_printf_float+0xc2>
 801f2f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f2f8:	429a      	cmp	r2, r3
 801f2fa:	db02      	blt.n	801f302 <_printf_float+0x22e>
 801f2fc:	6823      	ldr	r3, [r4, #0]
 801f2fe:	07d8      	lsls	r0, r3, #31
 801f300:	d510      	bpl.n	801f324 <_printf_float+0x250>
 801f302:	ee18 3a10 	vmov	r3, s16
 801f306:	4652      	mov	r2, sl
 801f308:	4631      	mov	r1, r6
 801f30a:	4628      	mov	r0, r5
 801f30c:	47b8      	blx	r7
 801f30e:	3001      	adds	r0, #1
 801f310:	f43f af41 	beq.w	801f196 <_printf_float+0xc2>
 801f314:	f04f 0800 	mov.w	r8, #0
 801f318:	f104 091a 	add.w	r9, r4, #26
 801f31c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f31e:	3b01      	subs	r3, #1
 801f320:	4543      	cmp	r3, r8
 801f322:	dc09      	bgt.n	801f338 <_printf_float+0x264>
 801f324:	6823      	ldr	r3, [r4, #0]
 801f326:	079b      	lsls	r3, r3, #30
 801f328:	f100 8105 	bmi.w	801f536 <_printf_float+0x462>
 801f32c:	68e0      	ldr	r0, [r4, #12]
 801f32e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f330:	4298      	cmp	r0, r3
 801f332:	bfb8      	it	lt
 801f334:	4618      	movlt	r0, r3
 801f336:	e730      	b.n	801f19a <_printf_float+0xc6>
 801f338:	2301      	movs	r3, #1
 801f33a:	464a      	mov	r2, r9
 801f33c:	4631      	mov	r1, r6
 801f33e:	4628      	mov	r0, r5
 801f340:	47b8      	blx	r7
 801f342:	3001      	adds	r0, #1
 801f344:	f43f af27 	beq.w	801f196 <_printf_float+0xc2>
 801f348:	f108 0801 	add.w	r8, r8, #1
 801f34c:	e7e6      	b.n	801f31c <_printf_float+0x248>
 801f34e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f350:	2b00      	cmp	r3, #0
 801f352:	dc39      	bgt.n	801f3c8 <_printf_float+0x2f4>
 801f354:	4a1b      	ldr	r2, [pc, #108]	; (801f3c4 <_printf_float+0x2f0>)
 801f356:	2301      	movs	r3, #1
 801f358:	4631      	mov	r1, r6
 801f35a:	4628      	mov	r0, r5
 801f35c:	47b8      	blx	r7
 801f35e:	3001      	adds	r0, #1
 801f360:	f43f af19 	beq.w	801f196 <_printf_float+0xc2>
 801f364:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f368:	4313      	orrs	r3, r2
 801f36a:	d102      	bne.n	801f372 <_printf_float+0x29e>
 801f36c:	6823      	ldr	r3, [r4, #0]
 801f36e:	07d9      	lsls	r1, r3, #31
 801f370:	d5d8      	bpl.n	801f324 <_printf_float+0x250>
 801f372:	ee18 3a10 	vmov	r3, s16
 801f376:	4652      	mov	r2, sl
 801f378:	4631      	mov	r1, r6
 801f37a:	4628      	mov	r0, r5
 801f37c:	47b8      	blx	r7
 801f37e:	3001      	adds	r0, #1
 801f380:	f43f af09 	beq.w	801f196 <_printf_float+0xc2>
 801f384:	f04f 0900 	mov.w	r9, #0
 801f388:	f104 0a1a 	add.w	sl, r4, #26
 801f38c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f38e:	425b      	negs	r3, r3
 801f390:	454b      	cmp	r3, r9
 801f392:	dc01      	bgt.n	801f398 <_printf_float+0x2c4>
 801f394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f396:	e792      	b.n	801f2be <_printf_float+0x1ea>
 801f398:	2301      	movs	r3, #1
 801f39a:	4652      	mov	r2, sl
 801f39c:	4631      	mov	r1, r6
 801f39e:	4628      	mov	r0, r5
 801f3a0:	47b8      	blx	r7
 801f3a2:	3001      	adds	r0, #1
 801f3a4:	f43f aef7 	beq.w	801f196 <_printf_float+0xc2>
 801f3a8:	f109 0901 	add.w	r9, r9, #1
 801f3ac:	e7ee      	b.n	801f38c <_printf_float+0x2b8>
 801f3ae:	bf00      	nop
 801f3b0:	7fefffff 	.word	0x7fefffff
 801f3b4:	08025cb9 	.word	0x08025cb9
 801f3b8:	08025cbd 	.word	0x08025cbd
 801f3bc:	08025cc5 	.word	0x08025cc5
 801f3c0:	08025cc1 	.word	0x08025cc1
 801f3c4:	08025cc9 	.word	0x08025cc9
 801f3c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f3ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f3cc:	429a      	cmp	r2, r3
 801f3ce:	bfa8      	it	ge
 801f3d0:	461a      	movge	r2, r3
 801f3d2:	2a00      	cmp	r2, #0
 801f3d4:	4691      	mov	r9, r2
 801f3d6:	dc37      	bgt.n	801f448 <_printf_float+0x374>
 801f3d8:	f04f 0b00 	mov.w	fp, #0
 801f3dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f3e0:	f104 021a 	add.w	r2, r4, #26
 801f3e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f3e6:	9305      	str	r3, [sp, #20]
 801f3e8:	eba3 0309 	sub.w	r3, r3, r9
 801f3ec:	455b      	cmp	r3, fp
 801f3ee:	dc33      	bgt.n	801f458 <_printf_float+0x384>
 801f3f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f3f4:	429a      	cmp	r2, r3
 801f3f6:	db3b      	blt.n	801f470 <_printf_float+0x39c>
 801f3f8:	6823      	ldr	r3, [r4, #0]
 801f3fa:	07da      	lsls	r2, r3, #31
 801f3fc:	d438      	bmi.n	801f470 <_printf_float+0x39c>
 801f3fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f400:	9b05      	ldr	r3, [sp, #20]
 801f402:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f404:	1ad3      	subs	r3, r2, r3
 801f406:	eba2 0901 	sub.w	r9, r2, r1
 801f40a:	4599      	cmp	r9, r3
 801f40c:	bfa8      	it	ge
 801f40e:	4699      	movge	r9, r3
 801f410:	f1b9 0f00 	cmp.w	r9, #0
 801f414:	dc35      	bgt.n	801f482 <_printf_float+0x3ae>
 801f416:	f04f 0800 	mov.w	r8, #0
 801f41a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f41e:	f104 0a1a 	add.w	sl, r4, #26
 801f422:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f426:	1a9b      	subs	r3, r3, r2
 801f428:	eba3 0309 	sub.w	r3, r3, r9
 801f42c:	4543      	cmp	r3, r8
 801f42e:	f77f af79 	ble.w	801f324 <_printf_float+0x250>
 801f432:	2301      	movs	r3, #1
 801f434:	4652      	mov	r2, sl
 801f436:	4631      	mov	r1, r6
 801f438:	4628      	mov	r0, r5
 801f43a:	47b8      	blx	r7
 801f43c:	3001      	adds	r0, #1
 801f43e:	f43f aeaa 	beq.w	801f196 <_printf_float+0xc2>
 801f442:	f108 0801 	add.w	r8, r8, #1
 801f446:	e7ec      	b.n	801f422 <_printf_float+0x34e>
 801f448:	4613      	mov	r3, r2
 801f44a:	4631      	mov	r1, r6
 801f44c:	4642      	mov	r2, r8
 801f44e:	4628      	mov	r0, r5
 801f450:	47b8      	blx	r7
 801f452:	3001      	adds	r0, #1
 801f454:	d1c0      	bne.n	801f3d8 <_printf_float+0x304>
 801f456:	e69e      	b.n	801f196 <_printf_float+0xc2>
 801f458:	2301      	movs	r3, #1
 801f45a:	4631      	mov	r1, r6
 801f45c:	4628      	mov	r0, r5
 801f45e:	9205      	str	r2, [sp, #20]
 801f460:	47b8      	blx	r7
 801f462:	3001      	adds	r0, #1
 801f464:	f43f ae97 	beq.w	801f196 <_printf_float+0xc2>
 801f468:	9a05      	ldr	r2, [sp, #20]
 801f46a:	f10b 0b01 	add.w	fp, fp, #1
 801f46e:	e7b9      	b.n	801f3e4 <_printf_float+0x310>
 801f470:	ee18 3a10 	vmov	r3, s16
 801f474:	4652      	mov	r2, sl
 801f476:	4631      	mov	r1, r6
 801f478:	4628      	mov	r0, r5
 801f47a:	47b8      	blx	r7
 801f47c:	3001      	adds	r0, #1
 801f47e:	d1be      	bne.n	801f3fe <_printf_float+0x32a>
 801f480:	e689      	b.n	801f196 <_printf_float+0xc2>
 801f482:	9a05      	ldr	r2, [sp, #20]
 801f484:	464b      	mov	r3, r9
 801f486:	4442      	add	r2, r8
 801f488:	4631      	mov	r1, r6
 801f48a:	4628      	mov	r0, r5
 801f48c:	47b8      	blx	r7
 801f48e:	3001      	adds	r0, #1
 801f490:	d1c1      	bne.n	801f416 <_printf_float+0x342>
 801f492:	e680      	b.n	801f196 <_printf_float+0xc2>
 801f494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f496:	2a01      	cmp	r2, #1
 801f498:	dc01      	bgt.n	801f49e <_printf_float+0x3ca>
 801f49a:	07db      	lsls	r3, r3, #31
 801f49c:	d538      	bpl.n	801f510 <_printf_float+0x43c>
 801f49e:	2301      	movs	r3, #1
 801f4a0:	4642      	mov	r2, r8
 801f4a2:	4631      	mov	r1, r6
 801f4a4:	4628      	mov	r0, r5
 801f4a6:	47b8      	blx	r7
 801f4a8:	3001      	adds	r0, #1
 801f4aa:	f43f ae74 	beq.w	801f196 <_printf_float+0xc2>
 801f4ae:	ee18 3a10 	vmov	r3, s16
 801f4b2:	4652      	mov	r2, sl
 801f4b4:	4631      	mov	r1, r6
 801f4b6:	4628      	mov	r0, r5
 801f4b8:	47b8      	blx	r7
 801f4ba:	3001      	adds	r0, #1
 801f4bc:	f43f ae6b 	beq.w	801f196 <_printf_float+0xc2>
 801f4c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801f4c4:	2200      	movs	r2, #0
 801f4c6:	2300      	movs	r3, #0
 801f4c8:	f7e1 fafe 	bl	8000ac8 <__aeabi_dcmpeq>
 801f4cc:	b9d8      	cbnz	r0, 801f506 <_printf_float+0x432>
 801f4ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f4d0:	f108 0201 	add.w	r2, r8, #1
 801f4d4:	3b01      	subs	r3, #1
 801f4d6:	4631      	mov	r1, r6
 801f4d8:	4628      	mov	r0, r5
 801f4da:	47b8      	blx	r7
 801f4dc:	3001      	adds	r0, #1
 801f4de:	d10e      	bne.n	801f4fe <_printf_float+0x42a>
 801f4e0:	e659      	b.n	801f196 <_printf_float+0xc2>
 801f4e2:	2301      	movs	r3, #1
 801f4e4:	4652      	mov	r2, sl
 801f4e6:	4631      	mov	r1, r6
 801f4e8:	4628      	mov	r0, r5
 801f4ea:	47b8      	blx	r7
 801f4ec:	3001      	adds	r0, #1
 801f4ee:	f43f ae52 	beq.w	801f196 <_printf_float+0xc2>
 801f4f2:	f108 0801 	add.w	r8, r8, #1
 801f4f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f4f8:	3b01      	subs	r3, #1
 801f4fa:	4543      	cmp	r3, r8
 801f4fc:	dcf1      	bgt.n	801f4e2 <_printf_float+0x40e>
 801f4fe:	464b      	mov	r3, r9
 801f500:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801f504:	e6dc      	b.n	801f2c0 <_printf_float+0x1ec>
 801f506:	f04f 0800 	mov.w	r8, #0
 801f50a:	f104 0a1a 	add.w	sl, r4, #26
 801f50e:	e7f2      	b.n	801f4f6 <_printf_float+0x422>
 801f510:	2301      	movs	r3, #1
 801f512:	4642      	mov	r2, r8
 801f514:	e7df      	b.n	801f4d6 <_printf_float+0x402>
 801f516:	2301      	movs	r3, #1
 801f518:	464a      	mov	r2, r9
 801f51a:	4631      	mov	r1, r6
 801f51c:	4628      	mov	r0, r5
 801f51e:	47b8      	blx	r7
 801f520:	3001      	adds	r0, #1
 801f522:	f43f ae38 	beq.w	801f196 <_printf_float+0xc2>
 801f526:	f108 0801 	add.w	r8, r8, #1
 801f52a:	68e3      	ldr	r3, [r4, #12]
 801f52c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801f52e:	1a5b      	subs	r3, r3, r1
 801f530:	4543      	cmp	r3, r8
 801f532:	dcf0      	bgt.n	801f516 <_printf_float+0x442>
 801f534:	e6fa      	b.n	801f32c <_printf_float+0x258>
 801f536:	f04f 0800 	mov.w	r8, #0
 801f53a:	f104 0919 	add.w	r9, r4, #25
 801f53e:	e7f4      	b.n	801f52a <_printf_float+0x456>

0801f540 <_printf_common>:
 801f540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f544:	4616      	mov	r6, r2
 801f546:	4699      	mov	r9, r3
 801f548:	688a      	ldr	r2, [r1, #8]
 801f54a:	690b      	ldr	r3, [r1, #16]
 801f54c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f550:	4293      	cmp	r3, r2
 801f552:	bfb8      	it	lt
 801f554:	4613      	movlt	r3, r2
 801f556:	6033      	str	r3, [r6, #0]
 801f558:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f55c:	4607      	mov	r7, r0
 801f55e:	460c      	mov	r4, r1
 801f560:	b10a      	cbz	r2, 801f566 <_printf_common+0x26>
 801f562:	3301      	adds	r3, #1
 801f564:	6033      	str	r3, [r6, #0]
 801f566:	6823      	ldr	r3, [r4, #0]
 801f568:	0699      	lsls	r1, r3, #26
 801f56a:	bf42      	ittt	mi
 801f56c:	6833      	ldrmi	r3, [r6, #0]
 801f56e:	3302      	addmi	r3, #2
 801f570:	6033      	strmi	r3, [r6, #0]
 801f572:	6825      	ldr	r5, [r4, #0]
 801f574:	f015 0506 	ands.w	r5, r5, #6
 801f578:	d106      	bne.n	801f588 <_printf_common+0x48>
 801f57a:	f104 0a19 	add.w	sl, r4, #25
 801f57e:	68e3      	ldr	r3, [r4, #12]
 801f580:	6832      	ldr	r2, [r6, #0]
 801f582:	1a9b      	subs	r3, r3, r2
 801f584:	42ab      	cmp	r3, r5
 801f586:	dc26      	bgt.n	801f5d6 <_printf_common+0x96>
 801f588:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f58c:	1e13      	subs	r3, r2, #0
 801f58e:	6822      	ldr	r2, [r4, #0]
 801f590:	bf18      	it	ne
 801f592:	2301      	movne	r3, #1
 801f594:	0692      	lsls	r2, r2, #26
 801f596:	d42b      	bmi.n	801f5f0 <_printf_common+0xb0>
 801f598:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f59c:	4649      	mov	r1, r9
 801f59e:	4638      	mov	r0, r7
 801f5a0:	47c0      	blx	r8
 801f5a2:	3001      	adds	r0, #1
 801f5a4:	d01e      	beq.n	801f5e4 <_printf_common+0xa4>
 801f5a6:	6823      	ldr	r3, [r4, #0]
 801f5a8:	68e5      	ldr	r5, [r4, #12]
 801f5aa:	6832      	ldr	r2, [r6, #0]
 801f5ac:	f003 0306 	and.w	r3, r3, #6
 801f5b0:	2b04      	cmp	r3, #4
 801f5b2:	bf08      	it	eq
 801f5b4:	1aad      	subeq	r5, r5, r2
 801f5b6:	68a3      	ldr	r3, [r4, #8]
 801f5b8:	6922      	ldr	r2, [r4, #16]
 801f5ba:	bf0c      	ite	eq
 801f5bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f5c0:	2500      	movne	r5, #0
 801f5c2:	4293      	cmp	r3, r2
 801f5c4:	bfc4      	itt	gt
 801f5c6:	1a9b      	subgt	r3, r3, r2
 801f5c8:	18ed      	addgt	r5, r5, r3
 801f5ca:	2600      	movs	r6, #0
 801f5cc:	341a      	adds	r4, #26
 801f5ce:	42b5      	cmp	r5, r6
 801f5d0:	d11a      	bne.n	801f608 <_printf_common+0xc8>
 801f5d2:	2000      	movs	r0, #0
 801f5d4:	e008      	b.n	801f5e8 <_printf_common+0xa8>
 801f5d6:	2301      	movs	r3, #1
 801f5d8:	4652      	mov	r2, sl
 801f5da:	4649      	mov	r1, r9
 801f5dc:	4638      	mov	r0, r7
 801f5de:	47c0      	blx	r8
 801f5e0:	3001      	adds	r0, #1
 801f5e2:	d103      	bne.n	801f5ec <_printf_common+0xac>
 801f5e4:	f04f 30ff 	mov.w	r0, #4294967295
 801f5e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f5ec:	3501      	adds	r5, #1
 801f5ee:	e7c6      	b.n	801f57e <_printf_common+0x3e>
 801f5f0:	18e1      	adds	r1, r4, r3
 801f5f2:	1c5a      	adds	r2, r3, #1
 801f5f4:	2030      	movs	r0, #48	; 0x30
 801f5f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f5fa:	4422      	add	r2, r4
 801f5fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f600:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f604:	3302      	adds	r3, #2
 801f606:	e7c7      	b.n	801f598 <_printf_common+0x58>
 801f608:	2301      	movs	r3, #1
 801f60a:	4622      	mov	r2, r4
 801f60c:	4649      	mov	r1, r9
 801f60e:	4638      	mov	r0, r7
 801f610:	47c0      	blx	r8
 801f612:	3001      	adds	r0, #1
 801f614:	d0e6      	beq.n	801f5e4 <_printf_common+0xa4>
 801f616:	3601      	adds	r6, #1
 801f618:	e7d9      	b.n	801f5ce <_printf_common+0x8e>
	...

0801f61c <_printf_i>:
 801f61c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f620:	460c      	mov	r4, r1
 801f622:	4691      	mov	r9, r2
 801f624:	7e27      	ldrb	r7, [r4, #24]
 801f626:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f628:	2f78      	cmp	r7, #120	; 0x78
 801f62a:	4680      	mov	r8, r0
 801f62c:	469a      	mov	sl, r3
 801f62e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f632:	d807      	bhi.n	801f644 <_printf_i+0x28>
 801f634:	2f62      	cmp	r7, #98	; 0x62
 801f636:	d80a      	bhi.n	801f64e <_printf_i+0x32>
 801f638:	2f00      	cmp	r7, #0
 801f63a:	f000 80d8 	beq.w	801f7ee <_printf_i+0x1d2>
 801f63e:	2f58      	cmp	r7, #88	; 0x58
 801f640:	f000 80a3 	beq.w	801f78a <_printf_i+0x16e>
 801f644:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801f648:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f64c:	e03a      	b.n	801f6c4 <_printf_i+0xa8>
 801f64e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f652:	2b15      	cmp	r3, #21
 801f654:	d8f6      	bhi.n	801f644 <_printf_i+0x28>
 801f656:	a001      	add	r0, pc, #4	; (adr r0, 801f65c <_printf_i+0x40>)
 801f658:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801f65c:	0801f6b5 	.word	0x0801f6b5
 801f660:	0801f6c9 	.word	0x0801f6c9
 801f664:	0801f645 	.word	0x0801f645
 801f668:	0801f645 	.word	0x0801f645
 801f66c:	0801f645 	.word	0x0801f645
 801f670:	0801f645 	.word	0x0801f645
 801f674:	0801f6c9 	.word	0x0801f6c9
 801f678:	0801f645 	.word	0x0801f645
 801f67c:	0801f645 	.word	0x0801f645
 801f680:	0801f645 	.word	0x0801f645
 801f684:	0801f645 	.word	0x0801f645
 801f688:	0801f7d5 	.word	0x0801f7d5
 801f68c:	0801f6f9 	.word	0x0801f6f9
 801f690:	0801f7b7 	.word	0x0801f7b7
 801f694:	0801f645 	.word	0x0801f645
 801f698:	0801f645 	.word	0x0801f645
 801f69c:	0801f7f7 	.word	0x0801f7f7
 801f6a0:	0801f645 	.word	0x0801f645
 801f6a4:	0801f6f9 	.word	0x0801f6f9
 801f6a8:	0801f645 	.word	0x0801f645
 801f6ac:	0801f645 	.word	0x0801f645
 801f6b0:	0801f7bf 	.word	0x0801f7bf
 801f6b4:	680b      	ldr	r3, [r1, #0]
 801f6b6:	1d1a      	adds	r2, r3, #4
 801f6b8:	681b      	ldr	r3, [r3, #0]
 801f6ba:	600a      	str	r2, [r1, #0]
 801f6bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801f6c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f6c4:	2301      	movs	r3, #1
 801f6c6:	e0a3      	b.n	801f810 <_printf_i+0x1f4>
 801f6c8:	6825      	ldr	r5, [r4, #0]
 801f6ca:	6808      	ldr	r0, [r1, #0]
 801f6cc:	062e      	lsls	r6, r5, #24
 801f6ce:	f100 0304 	add.w	r3, r0, #4
 801f6d2:	d50a      	bpl.n	801f6ea <_printf_i+0xce>
 801f6d4:	6805      	ldr	r5, [r0, #0]
 801f6d6:	600b      	str	r3, [r1, #0]
 801f6d8:	2d00      	cmp	r5, #0
 801f6da:	da03      	bge.n	801f6e4 <_printf_i+0xc8>
 801f6dc:	232d      	movs	r3, #45	; 0x2d
 801f6de:	426d      	negs	r5, r5
 801f6e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f6e4:	485e      	ldr	r0, [pc, #376]	; (801f860 <_printf_i+0x244>)
 801f6e6:	230a      	movs	r3, #10
 801f6e8:	e019      	b.n	801f71e <_printf_i+0x102>
 801f6ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 801f6ee:	6805      	ldr	r5, [r0, #0]
 801f6f0:	600b      	str	r3, [r1, #0]
 801f6f2:	bf18      	it	ne
 801f6f4:	b22d      	sxthne	r5, r5
 801f6f6:	e7ef      	b.n	801f6d8 <_printf_i+0xbc>
 801f6f8:	680b      	ldr	r3, [r1, #0]
 801f6fa:	6825      	ldr	r5, [r4, #0]
 801f6fc:	1d18      	adds	r0, r3, #4
 801f6fe:	6008      	str	r0, [r1, #0]
 801f700:	0628      	lsls	r0, r5, #24
 801f702:	d501      	bpl.n	801f708 <_printf_i+0xec>
 801f704:	681d      	ldr	r5, [r3, #0]
 801f706:	e002      	b.n	801f70e <_printf_i+0xf2>
 801f708:	0669      	lsls	r1, r5, #25
 801f70a:	d5fb      	bpl.n	801f704 <_printf_i+0xe8>
 801f70c:	881d      	ldrh	r5, [r3, #0]
 801f70e:	4854      	ldr	r0, [pc, #336]	; (801f860 <_printf_i+0x244>)
 801f710:	2f6f      	cmp	r7, #111	; 0x6f
 801f712:	bf0c      	ite	eq
 801f714:	2308      	moveq	r3, #8
 801f716:	230a      	movne	r3, #10
 801f718:	2100      	movs	r1, #0
 801f71a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f71e:	6866      	ldr	r6, [r4, #4]
 801f720:	60a6      	str	r6, [r4, #8]
 801f722:	2e00      	cmp	r6, #0
 801f724:	bfa2      	ittt	ge
 801f726:	6821      	ldrge	r1, [r4, #0]
 801f728:	f021 0104 	bicge.w	r1, r1, #4
 801f72c:	6021      	strge	r1, [r4, #0]
 801f72e:	b90d      	cbnz	r5, 801f734 <_printf_i+0x118>
 801f730:	2e00      	cmp	r6, #0
 801f732:	d04d      	beq.n	801f7d0 <_printf_i+0x1b4>
 801f734:	4616      	mov	r6, r2
 801f736:	fbb5 f1f3 	udiv	r1, r5, r3
 801f73a:	fb03 5711 	mls	r7, r3, r1, r5
 801f73e:	5dc7      	ldrb	r7, [r0, r7]
 801f740:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801f744:	462f      	mov	r7, r5
 801f746:	42bb      	cmp	r3, r7
 801f748:	460d      	mov	r5, r1
 801f74a:	d9f4      	bls.n	801f736 <_printf_i+0x11a>
 801f74c:	2b08      	cmp	r3, #8
 801f74e:	d10b      	bne.n	801f768 <_printf_i+0x14c>
 801f750:	6823      	ldr	r3, [r4, #0]
 801f752:	07df      	lsls	r7, r3, #31
 801f754:	d508      	bpl.n	801f768 <_printf_i+0x14c>
 801f756:	6923      	ldr	r3, [r4, #16]
 801f758:	6861      	ldr	r1, [r4, #4]
 801f75a:	4299      	cmp	r1, r3
 801f75c:	bfde      	ittt	le
 801f75e:	2330      	movle	r3, #48	; 0x30
 801f760:	f806 3c01 	strble.w	r3, [r6, #-1]
 801f764:	f106 36ff 	addle.w	r6, r6, #4294967295
 801f768:	1b92      	subs	r2, r2, r6
 801f76a:	6122      	str	r2, [r4, #16]
 801f76c:	f8cd a000 	str.w	sl, [sp]
 801f770:	464b      	mov	r3, r9
 801f772:	aa03      	add	r2, sp, #12
 801f774:	4621      	mov	r1, r4
 801f776:	4640      	mov	r0, r8
 801f778:	f7ff fee2 	bl	801f540 <_printf_common>
 801f77c:	3001      	adds	r0, #1
 801f77e:	d14c      	bne.n	801f81a <_printf_i+0x1fe>
 801f780:	f04f 30ff 	mov.w	r0, #4294967295
 801f784:	b004      	add	sp, #16
 801f786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f78a:	4835      	ldr	r0, [pc, #212]	; (801f860 <_printf_i+0x244>)
 801f78c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801f790:	6823      	ldr	r3, [r4, #0]
 801f792:	680e      	ldr	r6, [r1, #0]
 801f794:	061f      	lsls	r7, r3, #24
 801f796:	f856 5b04 	ldr.w	r5, [r6], #4
 801f79a:	600e      	str	r6, [r1, #0]
 801f79c:	d514      	bpl.n	801f7c8 <_printf_i+0x1ac>
 801f79e:	07d9      	lsls	r1, r3, #31
 801f7a0:	bf44      	itt	mi
 801f7a2:	f043 0320 	orrmi.w	r3, r3, #32
 801f7a6:	6023      	strmi	r3, [r4, #0]
 801f7a8:	b91d      	cbnz	r5, 801f7b2 <_printf_i+0x196>
 801f7aa:	6823      	ldr	r3, [r4, #0]
 801f7ac:	f023 0320 	bic.w	r3, r3, #32
 801f7b0:	6023      	str	r3, [r4, #0]
 801f7b2:	2310      	movs	r3, #16
 801f7b4:	e7b0      	b.n	801f718 <_printf_i+0xfc>
 801f7b6:	6823      	ldr	r3, [r4, #0]
 801f7b8:	f043 0320 	orr.w	r3, r3, #32
 801f7bc:	6023      	str	r3, [r4, #0]
 801f7be:	2378      	movs	r3, #120	; 0x78
 801f7c0:	4828      	ldr	r0, [pc, #160]	; (801f864 <_printf_i+0x248>)
 801f7c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801f7c6:	e7e3      	b.n	801f790 <_printf_i+0x174>
 801f7c8:	065e      	lsls	r6, r3, #25
 801f7ca:	bf48      	it	mi
 801f7cc:	b2ad      	uxthmi	r5, r5
 801f7ce:	e7e6      	b.n	801f79e <_printf_i+0x182>
 801f7d0:	4616      	mov	r6, r2
 801f7d2:	e7bb      	b.n	801f74c <_printf_i+0x130>
 801f7d4:	680b      	ldr	r3, [r1, #0]
 801f7d6:	6826      	ldr	r6, [r4, #0]
 801f7d8:	6960      	ldr	r0, [r4, #20]
 801f7da:	1d1d      	adds	r5, r3, #4
 801f7dc:	600d      	str	r5, [r1, #0]
 801f7de:	0635      	lsls	r5, r6, #24
 801f7e0:	681b      	ldr	r3, [r3, #0]
 801f7e2:	d501      	bpl.n	801f7e8 <_printf_i+0x1cc>
 801f7e4:	6018      	str	r0, [r3, #0]
 801f7e6:	e002      	b.n	801f7ee <_printf_i+0x1d2>
 801f7e8:	0671      	lsls	r1, r6, #25
 801f7ea:	d5fb      	bpl.n	801f7e4 <_printf_i+0x1c8>
 801f7ec:	8018      	strh	r0, [r3, #0]
 801f7ee:	2300      	movs	r3, #0
 801f7f0:	6123      	str	r3, [r4, #16]
 801f7f2:	4616      	mov	r6, r2
 801f7f4:	e7ba      	b.n	801f76c <_printf_i+0x150>
 801f7f6:	680b      	ldr	r3, [r1, #0]
 801f7f8:	1d1a      	adds	r2, r3, #4
 801f7fa:	600a      	str	r2, [r1, #0]
 801f7fc:	681e      	ldr	r6, [r3, #0]
 801f7fe:	6862      	ldr	r2, [r4, #4]
 801f800:	2100      	movs	r1, #0
 801f802:	4630      	mov	r0, r6
 801f804:	f7e0 fcec 	bl	80001e0 <memchr>
 801f808:	b108      	cbz	r0, 801f80e <_printf_i+0x1f2>
 801f80a:	1b80      	subs	r0, r0, r6
 801f80c:	6060      	str	r0, [r4, #4]
 801f80e:	6863      	ldr	r3, [r4, #4]
 801f810:	6123      	str	r3, [r4, #16]
 801f812:	2300      	movs	r3, #0
 801f814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f818:	e7a8      	b.n	801f76c <_printf_i+0x150>
 801f81a:	6923      	ldr	r3, [r4, #16]
 801f81c:	4632      	mov	r2, r6
 801f81e:	4649      	mov	r1, r9
 801f820:	4640      	mov	r0, r8
 801f822:	47d0      	blx	sl
 801f824:	3001      	adds	r0, #1
 801f826:	d0ab      	beq.n	801f780 <_printf_i+0x164>
 801f828:	6823      	ldr	r3, [r4, #0]
 801f82a:	079b      	lsls	r3, r3, #30
 801f82c:	d413      	bmi.n	801f856 <_printf_i+0x23a>
 801f82e:	68e0      	ldr	r0, [r4, #12]
 801f830:	9b03      	ldr	r3, [sp, #12]
 801f832:	4298      	cmp	r0, r3
 801f834:	bfb8      	it	lt
 801f836:	4618      	movlt	r0, r3
 801f838:	e7a4      	b.n	801f784 <_printf_i+0x168>
 801f83a:	2301      	movs	r3, #1
 801f83c:	4632      	mov	r2, r6
 801f83e:	4649      	mov	r1, r9
 801f840:	4640      	mov	r0, r8
 801f842:	47d0      	blx	sl
 801f844:	3001      	adds	r0, #1
 801f846:	d09b      	beq.n	801f780 <_printf_i+0x164>
 801f848:	3501      	adds	r5, #1
 801f84a:	68e3      	ldr	r3, [r4, #12]
 801f84c:	9903      	ldr	r1, [sp, #12]
 801f84e:	1a5b      	subs	r3, r3, r1
 801f850:	42ab      	cmp	r3, r5
 801f852:	dcf2      	bgt.n	801f83a <_printf_i+0x21e>
 801f854:	e7eb      	b.n	801f82e <_printf_i+0x212>
 801f856:	2500      	movs	r5, #0
 801f858:	f104 0619 	add.w	r6, r4, #25
 801f85c:	e7f5      	b.n	801f84a <_printf_i+0x22e>
 801f85e:	bf00      	nop
 801f860:	08025ccb 	.word	0x08025ccb
 801f864:	08025cdc 	.word	0x08025cdc

0801f868 <iprintf>:
 801f868:	b40f      	push	{r0, r1, r2, r3}
 801f86a:	4b0a      	ldr	r3, [pc, #40]	; (801f894 <iprintf+0x2c>)
 801f86c:	b513      	push	{r0, r1, r4, lr}
 801f86e:	681c      	ldr	r4, [r3, #0]
 801f870:	b124      	cbz	r4, 801f87c <iprintf+0x14>
 801f872:	69a3      	ldr	r3, [r4, #24]
 801f874:	b913      	cbnz	r3, 801f87c <iprintf+0x14>
 801f876:	4620      	mov	r0, r4
 801f878:	f7ff f862 	bl	801e940 <__sinit>
 801f87c:	ab05      	add	r3, sp, #20
 801f87e:	9a04      	ldr	r2, [sp, #16]
 801f880:	68a1      	ldr	r1, [r4, #8]
 801f882:	9301      	str	r3, [sp, #4]
 801f884:	4620      	mov	r0, r4
 801f886:	f7ff fa55 	bl	801ed34 <_vfiprintf_r>
 801f88a:	b002      	add	sp, #8
 801f88c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f890:	b004      	add	sp, #16
 801f892:	4770      	bx	lr
 801f894:	10000138 	.word	0x10000138

0801f898 <rand>:
 801f898:	4b17      	ldr	r3, [pc, #92]	; (801f8f8 <rand+0x60>)
 801f89a:	b510      	push	{r4, lr}
 801f89c:	681c      	ldr	r4, [r3, #0]
 801f89e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801f8a0:	b9b3      	cbnz	r3, 801f8d0 <rand+0x38>
 801f8a2:	2018      	movs	r0, #24
 801f8a4:	f7ff f924 	bl	801eaf0 <malloc>
 801f8a8:	63a0      	str	r0, [r4, #56]	; 0x38
 801f8aa:	b928      	cbnz	r0, 801f8b8 <rand+0x20>
 801f8ac:	4602      	mov	r2, r0
 801f8ae:	4b13      	ldr	r3, [pc, #76]	; (801f8fc <rand+0x64>)
 801f8b0:	4813      	ldr	r0, [pc, #76]	; (801f900 <rand+0x68>)
 801f8b2:	214e      	movs	r1, #78	; 0x4e
 801f8b4:	f7fe ffca 	bl	801e84c <__assert_func>
 801f8b8:	4a12      	ldr	r2, [pc, #72]	; (801f904 <rand+0x6c>)
 801f8ba:	4b13      	ldr	r3, [pc, #76]	; (801f908 <rand+0x70>)
 801f8bc:	e9c0 2300 	strd	r2, r3, [r0]
 801f8c0:	4b12      	ldr	r3, [pc, #72]	; (801f90c <rand+0x74>)
 801f8c2:	6083      	str	r3, [r0, #8]
 801f8c4:	230b      	movs	r3, #11
 801f8c6:	8183      	strh	r3, [r0, #12]
 801f8c8:	2201      	movs	r2, #1
 801f8ca:	2300      	movs	r3, #0
 801f8cc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801f8d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801f8d2:	480f      	ldr	r0, [pc, #60]	; (801f910 <rand+0x78>)
 801f8d4:	690a      	ldr	r2, [r1, #16]
 801f8d6:	694b      	ldr	r3, [r1, #20]
 801f8d8:	4c0e      	ldr	r4, [pc, #56]	; (801f914 <rand+0x7c>)
 801f8da:	4350      	muls	r0, r2
 801f8dc:	fb04 0003 	mla	r0, r4, r3, r0
 801f8e0:	fba2 3404 	umull	r3, r4, r2, r4
 801f8e4:	1c5a      	adds	r2, r3, #1
 801f8e6:	4404      	add	r4, r0
 801f8e8:	f144 0000 	adc.w	r0, r4, #0
 801f8ec:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801f8f0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801f8f4:	bd10      	pop	{r4, pc}
 801f8f6:	bf00      	nop
 801f8f8:	10000138 	.word	0x10000138
 801f8fc:	08025ced 	.word	0x08025ced
 801f900:	08025d04 	.word	0x08025d04
 801f904:	abcd330e 	.word	0xabcd330e
 801f908:	e66d1234 	.word	0xe66d1234
 801f90c:	0005deec 	.word	0x0005deec
 801f910:	5851f42d 	.word	0x5851f42d
 801f914:	4c957f2d 	.word	0x4c957f2d

0801f918 <realloc>:
 801f918:	4b02      	ldr	r3, [pc, #8]	; (801f924 <realloc+0xc>)
 801f91a:	460a      	mov	r2, r1
 801f91c:	4601      	mov	r1, r0
 801f91e:	6818      	ldr	r0, [r3, #0]
 801f920:	f001 bddf 	b.w	80214e2 <_realloc_r>
 801f924:	10000138 	.word	0x10000138

0801f928 <cleanup_glue>:
 801f928:	b538      	push	{r3, r4, r5, lr}
 801f92a:	460c      	mov	r4, r1
 801f92c:	6809      	ldr	r1, [r1, #0]
 801f92e:	4605      	mov	r5, r0
 801f930:	b109      	cbz	r1, 801f936 <cleanup_glue+0xe>
 801f932:	f7ff fff9 	bl	801f928 <cleanup_glue>
 801f936:	4621      	mov	r1, r4
 801f938:	4628      	mov	r0, r5
 801f93a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f93e:	f7ff b925 	b.w	801eb8c <_free_r>
	...

0801f944 <_reclaim_reent>:
 801f944:	4b2c      	ldr	r3, [pc, #176]	; (801f9f8 <_reclaim_reent+0xb4>)
 801f946:	681b      	ldr	r3, [r3, #0]
 801f948:	4283      	cmp	r3, r0
 801f94a:	b570      	push	{r4, r5, r6, lr}
 801f94c:	4604      	mov	r4, r0
 801f94e:	d051      	beq.n	801f9f4 <_reclaim_reent+0xb0>
 801f950:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801f952:	b143      	cbz	r3, 801f966 <_reclaim_reent+0x22>
 801f954:	68db      	ldr	r3, [r3, #12]
 801f956:	2b00      	cmp	r3, #0
 801f958:	d14a      	bne.n	801f9f0 <_reclaim_reent+0xac>
 801f95a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f95c:	6819      	ldr	r1, [r3, #0]
 801f95e:	b111      	cbz	r1, 801f966 <_reclaim_reent+0x22>
 801f960:	4620      	mov	r0, r4
 801f962:	f7ff f913 	bl	801eb8c <_free_r>
 801f966:	6961      	ldr	r1, [r4, #20]
 801f968:	b111      	cbz	r1, 801f970 <_reclaim_reent+0x2c>
 801f96a:	4620      	mov	r0, r4
 801f96c:	f7ff f90e 	bl	801eb8c <_free_r>
 801f970:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801f972:	b111      	cbz	r1, 801f97a <_reclaim_reent+0x36>
 801f974:	4620      	mov	r0, r4
 801f976:	f7ff f909 	bl	801eb8c <_free_r>
 801f97a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801f97c:	b111      	cbz	r1, 801f984 <_reclaim_reent+0x40>
 801f97e:	4620      	mov	r0, r4
 801f980:	f7ff f904 	bl	801eb8c <_free_r>
 801f984:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801f986:	b111      	cbz	r1, 801f98e <_reclaim_reent+0x4a>
 801f988:	4620      	mov	r0, r4
 801f98a:	f7ff f8ff 	bl	801eb8c <_free_r>
 801f98e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f990:	b111      	cbz	r1, 801f998 <_reclaim_reent+0x54>
 801f992:	4620      	mov	r0, r4
 801f994:	f7ff f8fa 	bl	801eb8c <_free_r>
 801f998:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801f99a:	b111      	cbz	r1, 801f9a2 <_reclaim_reent+0x5e>
 801f99c:	4620      	mov	r0, r4
 801f99e:	f7ff f8f5 	bl	801eb8c <_free_r>
 801f9a2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801f9a4:	b111      	cbz	r1, 801f9ac <_reclaim_reent+0x68>
 801f9a6:	4620      	mov	r0, r4
 801f9a8:	f7ff f8f0 	bl	801eb8c <_free_r>
 801f9ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f9ae:	b111      	cbz	r1, 801f9b6 <_reclaim_reent+0x72>
 801f9b0:	4620      	mov	r0, r4
 801f9b2:	f7ff f8eb 	bl	801eb8c <_free_r>
 801f9b6:	69a3      	ldr	r3, [r4, #24]
 801f9b8:	b1e3      	cbz	r3, 801f9f4 <_reclaim_reent+0xb0>
 801f9ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801f9bc:	4620      	mov	r0, r4
 801f9be:	4798      	blx	r3
 801f9c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801f9c2:	b1b9      	cbz	r1, 801f9f4 <_reclaim_reent+0xb0>
 801f9c4:	4620      	mov	r0, r4
 801f9c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f9ca:	f7ff bfad 	b.w	801f928 <cleanup_glue>
 801f9ce:	5949      	ldr	r1, [r1, r5]
 801f9d0:	b941      	cbnz	r1, 801f9e4 <_reclaim_reent+0xa0>
 801f9d2:	3504      	adds	r5, #4
 801f9d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f9d6:	2d80      	cmp	r5, #128	; 0x80
 801f9d8:	68d9      	ldr	r1, [r3, #12]
 801f9da:	d1f8      	bne.n	801f9ce <_reclaim_reent+0x8a>
 801f9dc:	4620      	mov	r0, r4
 801f9de:	f7ff f8d5 	bl	801eb8c <_free_r>
 801f9e2:	e7ba      	b.n	801f95a <_reclaim_reent+0x16>
 801f9e4:	680e      	ldr	r6, [r1, #0]
 801f9e6:	4620      	mov	r0, r4
 801f9e8:	f7ff f8d0 	bl	801eb8c <_free_r>
 801f9ec:	4631      	mov	r1, r6
 801f9ee:	e7ef      	b.n	801f9d0 <_reclaim_reent+0x8c>
 801f9f0:	2500      	movs	r5, #0
 801f9f2:	e7ef      	b.n	801f9d4 <_reclaim_reent+0x90>
 801f9f4:	bd70      	pop	{r4, r5, r6, pc}
 801f9f6:	bf00      	nop
 801f9f8:	10000138 	.word	0x10000138

0801f9fc <_sbrk_r>:
 801f9fc:	b538      	push	{r3, r4, r5, lr}
 801f9fe:	4d06      	ldr	r5, [pc, #24]	; (801fa18 <_sbrk_r+0x1c>)
 801fa00:	2300      	movs	r3, #0
 801fa02:	4604      	mov	r4, r0
 801fa04:	4608      	mov	r0, r1
 801fa06:	602b      	str	r3, [r5, #0]
 801fa08:	f7e2 f842 	bl	8001a90 <_sbrk>
 801fa0c:	1c43      	adds	r3, r0, #1
 801fa0e:	d102      	bne.n	801fa16 <_sbrk_r+0x1a>
 801fa10:	682b      	ldr	r3, [r5, #0]
 801fa12:	b103      	cbz	r3, 801fa16 <_sbrk_r+0x1a>
 801fa14:	6023      	str	r3, [r4, #0]
 801fa16:	bd38      	pop	{r3, r4, r5, pc}
 801fa18:	2000898c 	.word	0x2000898c

0801fa1c <siprintf>:
 801fa1c:	b40e      	push	{r1, r2, r3}
 801fa1e:	b500      	push	{lr}
 801fa20:	b09c      	sub	sp, #112	; 0x70
 801fa22:	ab1d      	add	r3, sp, #116	; 0x74
 801fa24:	9002      	str	r0, [sp, #8]
 801fa26:	9006      	str	r0, [sp, #24]
 801fa28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801fa2c:	4809      	ldr	r0, [pc, #36]	; (801fa54 <siprintf+0x38>)
 801fa2e:	9107      	str	r1, [sp, #28]
 801fa30:	9104      	str	r1, [sp, #16]
 801fa32:	4909      	ldr	r1, [pc, #36]	; (801fa58 <siprintf+0x3c>)
 801fa34:	f853 2b04 	ldr.w	r2, [r3], #4
 801fa38:	9105      	str	r1, [sp, #20]
 801fa3a:	6800      	ldr	r0, [r0, #0]
 801fa3c:	9301      	str	r3, [sp, #4]
 801fa3e:	a902      	add	r1, sp, #8
 801fa40:	f001 fdd0 	bl	80215e4 <_svfiprintf_r>
 801fa44:	9b02      	ldr	r3, [sp, #8]
 801fa46:	2200      	movs	r2, #0
 801fa48:	701a      	strb	r2, [r3, #0]
 801fa4a:	b01c      	add	sp, #112	; 0x70
 801fa4c:	f85d eb04 	ldr.w	lr, [sp], #4
 801fa50:	b003      	add	sp, #12
 801fa52:	4770      	bx	lr
 801fa54:	10000138 	.word	0x10000138
 801fa58:	ffff0208 	.word	0xffff0208

0801fa5c <__sread>:
 801fa5c:	b510      	push	{r4, lr}
 801fa5e:	460c      	mov	r4, r1
 801fa60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fa64:	f001 febe 	bl	80217e4 <_read_r>
 801fa68:	2800      	cmp	r0, #0
 801fa6a:	bfab      	itete	ge
 801fa6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801fa6e:	89a3      	ldrhlt	r3, [r4, #12]
 801fa70:	181b      	addge	r3, r3, r0
 801fa72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801fa76:	bfac      	ite	ge
 801fa78:	6563      	strge	r3, [r4, #84]	; 0x54
 801fa7a:	81a3      	strhlt	r3, [r4, #12]
 801fa7c:	bd10      	pop	{r4, pc}

0801fa7e <__swrite>:
 801fa7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fa82:	461f      	mov	r7, r3
 801fa84:	898b      	ldrh	r3, [r1, #12]
 801fa86:	05db      	lsls	r3, r3, #23
 801fa88:	4605      	mov	r5, r0
 801fa8a:	460c      	mov	r4, r1
 801fa8c:	4616      	mov	r6, r2
 801fa8e:	d505      	bpl.n	801fa9c <__swrite+0x1e>
 801fa90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fa94:	2302      	movs	r3, #2
 801fa96:	2200      	movs	r2, #0
 801fa98:	f001 f902 	bl	8020ca0 <_lseek_r>
 801fa9c:	89a3      	ldrh	r3, [r4, #12]
 801fa9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801faa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801faa6:	81a3      	strh	r3, [r4, #12]
 801faa8:	4632      	mov	r2, r6
 801faaa:	463b      	mov	r3, r7
 801faac:	4628      	mov	r0, r5
 801faae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fab2:	f000 b917 	b.w	801fce4 <_write_r>

0801fab6 <__sseek>:
 801fab6:	b510      	push	{r4, lr}
 801fab8:	460c      	mov	r4, r1
 801faba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fabe:	f001 f8ef 	bl	8020ca0 <_lseek_r>
 801fac2:	1c43      	adds	r3, r0, #1
 801fac4:	89a3      	ldrh	r3, [r4, #12]
 801fac6:	bf15      	itete	ne
 801fac8:	6560      	strne	r0, [r4, #84]	; 0x54
 801faca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801face:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801fad2:	81a3      	strheq	r3, [r4, #12]
 801fad4:	bf18      	it	ne
 801fad6:	81a3      	strhne	r3, [r4, #12]
 801fad8:	bd10      	pop	{r4, pc}

0801fada <__sclose>:
 801fada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fade:	f000 b989 	b.w	801fdf4 <_close_r>
	...

0801fae4 <_strtol_l.isra.0>:
 801fae4:	2b01      	cmp	r3, #1
 801fae6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801faea:	d001      	beq.n	801faf0 <_strtol_l.isra.0+0xc>
 801faec:	2b24      	cmp	r3, #36	; 0x24
 801faee:	d906      	bls.n	801fafe <_strtol_l.isra.0+0x1a>
 801faf0:	f001 f80a 	bl	8020b08 <__errno>
 801faf4:	2316      	movs	r3, #22
 801faf6:	6003      	str	r3, [r0, #0]
 801faf8:	2000      	movs	r0, #0
 801fafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fafe:	4f3a      	ldr	r7, [pc, #232]	; (801fbe8 <_strtol_l.isra.0+0x104>)
 801fb00:	468e      	mov	lr, r1
 801fb02:	4676      	mov	r6, lr
 801fb04:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801fb08:	5de5      	ldrb	r5, [r4, r7]
 801fb0a:	f015 0508 	ands.w	r5, r5, #8
 801fb0e:	d1f8      	bne.n	801fb02 <_strtol_l.isra.0+0x1e>
 801fb10:	2c2d      	cmp	r4, #45	; 0x2d
 801fb12:	d134      	bne.n	801fb7e <_strtol_l.isra.0+0x9a>
 801fb14:	f89e 4000 	ldrb.w	r4, [lr]
 801fb18:	f04f 0801 	mov.w	r8, #1
 801fb1c:	f106 0e02 	add.w	lr, r6, #2
 801fb20:	2b00      	cmp	r3, #0
 801fb22:	d05c      	beq.n	801fbde <_strtol_l.isra.0+0xfa>
 801fb24:	2b10      	cmp	r3, #16
 801fb26:	d10c      	bne.n	801fb42 <_strtol_l.isra.0+0x5e>
 801fb28:	2c30      	cmp	r4, #48	; 0x30
 801fb2a:	d10a      	bne.n	801fb42 <_strtol_l.isra.0+0x5e>
 801fb2c:	f89e 4000 	ldrb.w	r4, [lr]
 801fb30:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801fb34:	2c58      	cmp	r4, #88	; 0x58
 801fb36:	d14d      	bne.n	801fbd4 <_strtol_l.isra.0+0xf0>
 801fb38:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801fb3c:	2310      	movs	r3, #16
 801fb3e:	f10e 0e02 	add.w	lr, lr, #2
 801fb42:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801fb46:	f10c 3cff 	add.w	ip, ip, #4294967295
 801fb4a:	2600      	movs	r6, #0
 801fb4c:	fbbc f9f3 	udiv	r9, ip, r3
 801fb50:	4635      	mov	r5, r6
 801fb52:	fb03 ca19 	mls	sl, r3, r9, ip
 801fb56:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801fb5a:	2f09      	cmp	r7, #9
 801fb5c:	d818      	bhi.n	801fb90 <_strtol_l.isra.0+0xac>
 801fb5e:	463c      	mov	r4, r7
 801fb60:	42a3      	cmp	r3, r4
 801fb62:	dd24      	ble.n	801fbae <_strtol_l.isra.0+0xca>
 801fb64:	2e00      	cmp	r6, #0
 801fb66:	db1f      	blt.n	801fba8 <_strtol_l.isra.0+0xc4>
 801fb68:	45a9      	cmp	r9, r5
 801fb6a:	d31d      	bcc.n	801fba8 <_strtol_l.isra.0+0xc4>
 801fb6c:	d101      	bne.n	801fb72 <_strtol_l.isra.0+0x8e>
 801fb6e:	45a2      	cmp	sl, r4
 801fb70:	db1a      	blt.n	801fba8 <_strtol_l.isra.0+0xc4>
 801fb72:	fb05 4503 	mla	r5, r5, r3, r4
 801fb76:	2601      	movs	r6, #1
 801fb78:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801fb7c:	e7eb      	b.n	801fb56 <_strtol_l.isra.0+0x72>
 801fb7e:	2c2b      	cmp	r4, #43	; 0x2b
 801fb80:	bf08      	it	eq
 801fb82:	f89e 4000 	ldrbeq.w	r4, [lr]
 801fb86:	46a8      	mov	r8, r5
 801fb88:	bf08      	it	eq
 801fb8a:	f106 0e02 	addeq.w	lr, r6, #2
 801fb8e:	e7c7      	b.n	801fb20 <_strtol_l.isra.0+0x3c>
 801fb90:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801fb94:	2f19      	cmp	r7, #25
 801fb96:	d801      	bhi.n	801fb9c <_strtol_l.isra.0+0xb8>
 801fb98:	3c37      	subs	r4, #55	; 0x37
 801fb9a:	e7e1      	b.n	801fb60 <_strtol_l.isra.0+0x7c>
 801fb9c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801fba0:	2f19      	cmp	r7, #25
 801fba2:	d804      	bhi.n	801fbae <_strtol_l.isra.0+0xca>
 801fba4:	3c57      	subs	r4, #87	; 0x57
 801fba6:	e7db      	b.n	801fb60 <_strtol_l.isra.0+0x7c>
 801fba8:	f04f 36ff 	mov.w	r6, #4294967295
 801fbac:	e7e4      	b.n	801fb78 <_strtol_l.isra.0+0x94>
 801fbae:	2e00      	cmp	r6, #0
 801fbb0:	da05      	bge.n	801fbbe <_strtol_l.isra.0+0xda>
 801fbb2:	2322      	movs	r3, #34	; 0x22
 801fbb4:	6003      	str	r3, [r0, #0]
 801fbb6:	4665      	mov	r5, ip
 801fbb8:	b942      	cbnz	r2, 801fbcc <_strtol_l.isra.0+0xe8>
 801fbba:	4628      	mov	r0, r5
 801fbbc:	e79d      	b.n	801fafa <_strtol_l.isra.0+0x16>
 801fbbe:	f1b8 0f00 	cmp.w	r8, #0
 801fbc2:	d000      	beq.n	801fbc6 <_strtol_l.isra.0+0xe2>
 801fbc4:	426d      	negs	r5, r5
 801fbc6:	2a00      	cmp	r2, #0
 801fbc8:	d0f7      	beq.n	801fbba <_strtol_l.isra.0+0xd6>
 801fbca:	b10e      	cbz	r6, 801fbd0 <_strtol_l.isra.0+0xec>
 801fbcc:	f10e 31ff 	add.w	r1, lr, #4294967295
 801fbd0:	6011      	str	r1, [r2, #0]
 801fbd2:	e7f2      	b.n	801fbba <_strtol_l.isra.0+0xd6>
 801fbd4:	2430      	movs	r4, #48	; 0x30
 801fbd6:	2b00      	cmp	r3, #0
 801fbd8:	d1b3      	bne.n	801fb42 <_strtol_l.isra.0+0x5e>
 801fbda:	2308      	movs	r3, #8
 801fbdc:	e7b1      	b.n	801fb42 <_strtol_l.isra.0+0x5e>
 801fbde:	2c30      	cmp	r4, #48	; 0x30
 801fbe0:	d0a4      	beq.n	801fb2c <_strtol_l.isra.0+0x48>
 801fbe2:	230a      	movs	r3, #10
 801fbe4:	e7ad      	b.n	801fb42 <_strtol_l.isra.0+0x5e>
 801fbe6:	bf00      	nop
 801fbe8:	08025b44 	.word	0x08025b44

0801fbec <strtol>:
 801fbec:	4613      	mov	r3, r2
 801fbee:	460a      	mov	r2, r1
 801fbf0:	4601      	mov	r1, r0
 801fbf2:	4802      	ldr	r0, [pc, #8]	; (801fbfc <strtol+0x10>)
 801fbf4:	6800      	ldr	r0, [r0, #0]
 801fbf6:	f7ff bf75 	b.w	801fae4 <_strtol_l.isra.0>
 801fbfa:	bf00      	nop
 801fbfc:	10000138 	.word	0x10000138

0801fc00 <_vsiprintf_r>:
 801fc00:	b500      	push	{lr}
 801fc02:	b09b      	sub	sp, #108	; 0x6c
 801fc04:	9100      	str	r1, [sp, #0]
 801fc06:	9104      	str	r1, [sp, #16]
 801fc08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801fc0c:	9105      	str	r1, [sp, #20]
 801fc0e:	9102      	str	r1, [sp, #8]
 801fc10:	4905      	ldr	r1, [pc, #20]	; (801fc28 <_vsiprintf_r+0x28>)
 801fc12:	9103      	str	r1, [sp, #12]
 801fc14:	4669      	mov	r1, sp
 801fc16:	f001 fce5 	bl	80215e4 <_svfiprintf_r>
 801fc1a:	9b00      	ldr	r3, [sp, #0]
 801fc1c:	2200      	movs	r2, #0
 801fc1e:	701a      	strb	r2, [r3, #0]
 801fc20:	b01b      	add	sp, #108	; 0x6c
 801fc22:	f85d fb04 	ldr.w	pc, [sp], #4
 801fc26:	bf00      	nop
 801fc28:	ffff0208 	.word	0xffff0208

0801fc2c <vsiprintf>:
 801fc2c:	4613      	mov	r3, r2
 801fc2e:	460a      	mov	r2, r1
 801fc30:	4601      	mov	r1, r0
 801fc32:	4802      	ldr	r0, [pc, #8]	; (801fc3c <vsiprintf+0x10>)
 801fc34:	6800      	ldr	r0, [r0, #0]
 801fc36:	f7ff bfe3 	b.w	801fc00 <_vsiprintf_r>
 801fc3a:	bf00      	nop
 801fc3c:	10000138 	.word	0x10000138

0801fc40 <__swbuf_r>:
 801fc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc42:	460e      	mov	r6, r1
 801fc44:	4614      	mov	r4, r2
 801fc46:	4605      	mov	r5, r0
 801fc48:	b118      	cbz	r0, 801fc52 <__swbuf_r+0x12>
 801fc4a:	6983      	ldr	r3, [r0, #24]
 801fc4c:	b90b      	cbnz	r3, 801fc52 <__swbuf_r+0x12>
 801fc4e:	f7fe fe77 	bl	801e940 <__sinit>
 801fc52:	4b21      	ldr	r3, [pc, #132]	; (801fcd8 <__swbuf_r+0x98>)
 801fc54:	429c      	cmp	r4, r3
 801fc56:	d12b      	bne.n	801fcb0 <__swbuf_r+0x70>
 801fc58:	686c      	ldr	r4, [r5, #4]
 801fc5a:	69a3      	ldr	r3, [r4, #24]
 801fc5c:	60a3      	str	r3, [r4, #8]
 801fc5e:	89a3      	ldrh	r3, [r4, #12]
 801fc60:	071a      	lsls	r2, r3, #28
 801fc62:	d52f      	bpl.n	801fcc4 <__swbuf_r+0x84>
 801fc64:	6923      	ldr	r3, [r4, #16]
 801fc66:	b36b      	cbz	r3, 801fcc4 <__swbuf_r+0x84>
 801fc68:	6923      	ldr	r3, [r4, #16]
 801fc6a:	6820      	ldr	r0, [r4, #0]
 801fc6c:	1ac0      	subs	r0, r0, r3
 801fc6e:	6963      	ldr	r3, [r4, #20]
 801fc70:	b2f6      	uxtb	r6, r6
 801fc72:	4283      	cmp	r3, r0
 801fc74:	4637      	mov	r7, r6
 801fc76:	dc04      	bgt.n	801fc82 <__swbuf_r+0x42>
 801fc78:	4621      	mov	r1, r4
 801fc7a:	4628      	mov	r0, r5
 801fc7c:	f000 ffd0 	bl	8020c20 <_fflush_r>
 801fc80:	bb30      	cbnz	r0, 801fcd0 <__swbuf_r+0x90>
 801fc82:	68a3      	ldr	r3, [r4, #8]
 801fc84:	3b01      	subs	r3, #1
 801fc86:	60a3      	str	r3, [r4, #8]
 801fc88:	6823      	ldr	r3, [r4, #0]
 801fc8a:	1c5a      	adds	r2, r3, #1
 801fc8c:	6022      	str	r2, [r4, #0]
 801fc8e:	701e      	strb	r6, [r3, #0]
 801fc90:	6963      	ldr	r3, [r4, #20]
 801fc92:	3001      	adds	r0, #1
 801fc94:	4283      	cmp	r3, r0
 801fc96:	d004      	beq.n	801fca2 <__swbuf_r+0x62>
 801fc98:	89a3      	ldrh	r3, [r4, #12]
 801fc9a:	07db      	lsls	r3, r3, #31
 801fc9c:	d506      	bpl.n	801fcac <__swbuf_r+0x6c>
 801fc9e:	2e0a      	cmp	r6, #10
 801fca0:	d104      	bne.n	801fcac <__swbuf_r+0x6c>
 801fca2:	4621      	mov	r1, r4
 801fca4:	4628      	mov	r0, r5
 801fca6:	f000 ffbb 	bl	8020c20 <_fflush_r>
 801fcaa:	b988      	cbnz	r0, 801fcd0 <__swbuf_r+0x90>
 801fcac:	4638      	mov	r0, r7
 801fcae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fcb0:	4b0a      	ldr	r3, [pc, #40]	; (801fcdc <__swbuf_r+0x9c>)
 801fcb2:	429c      	cmp	r4, r3
 801fcb4:	d101      	bne.n	801fcba <__swbuf_r+0x7a>
 801fcb6:	68ac      	ldr	r4, [r5, #8]
 801fcb8:	e7cf      	b.n	801fc5a <__swbuf_r+0x1a>
 801fcba:	4b09      	ldr	r3, [pc, #36]	; (801fce0 <__swbuf_r+0xa0>)
 801fcbc:	429c      	cmp	r4, r3
 801fcbe:	bf08      	it	eq
 801fcc0:	68ec      	ldreq	r4, [r5, #12]
 801fcc2:	e7ca      	b.n	801fc5a <__swbuf_r+0x1a>
 801fcc4:	4621      	mov	r1, r4
 801fcc6:	4628      	mov	r0, r5
 801fcc8:	f000 f81e 	bl	801fd08 <__swsetup_r>
 801fccc:	2800      	cmp	r0, #0
 801fcce:	d0cb      	beq.n	801fc68 <__swbuf_r+0x28>
 801fcd0:	f04f 37ff 	mov.w	r7, #4294967295
 801fcd4:	e7ea      	b.n	801fcac <__swbuf_r+0x6c>
 801fcd6:	bf00      	nop
 801fcd8:	08025c64 	.word	0x08025c64
 801fcdc:	08025c84 	.word	0x08025c84
 801fce0:	08025c44 	.word	0x08025c44

0801fce4 <_write_r>:
 801fce4:	b538      	push	{r3, r4, r5, lr}
 801fce6:	4d07      	ldr	r5, [pc, #28]	; (801fd04 <_write_r+0x20>)
 801fce8:	4604      	mov	r4, r0
 801fcea:	4608      	mov	r0, r1
 801fcec:	4611      	mov	r1, r2
 801fcee:	2200      	movs	r2, #0
 801fcf0:	602a      	str	r2, [r5, #0]
 801fcf2:	461a      	mov	r2, r3
 801fcf4:	f7fd ff7a 	bl	801dbec <_write>
 801fcf8:	1c43      	adds	r3, r0, #1
 801fcfa:	d102      	bne.n	801fd02 <_write_r+0x1e>
 801fcfc:	682b      	ldr	r3, [r5, #0]
 801fcfe:	b103      	cbz	r3, 801fd02 <_write_r+0x1e>
 801fd00:	6023      	str	r3, [r4, #0]
 801fd02:	bd38      	pop	{r3, r4, r5, pc}
 801fd04:	2000898c 	.word	0x2000898c

0801fd08 <__swsetup_r>:
 801fd08:	4b32      	ldr	r3, [pc, #200]	; (801fdd4 <__swsetup_r+0xcc>)
 801fd0a:	b570      	push	{r4, r5, r6, lr}
 801fd0c:	681d      	ldr	r5, [r3, #0]
 801fd0e:	4606      	mov	r6, r0
 801fd10:	460c      	mov	r4, r1
 801fd12:	b125      	cbz	r5, 801fd1e <__swsetup_r+0x16>
 801fd14:	69ab      	ldr	r3, [r5, #24]
 801fd16:	b913      	cbnz	r3, 801fd1e <__swsetup_r+0x16>
 801fd18:	4628      	mov	r0, r5
 801fd1a:	f7fe fe11 	bl	801e940 <__sinit>
 801fd1e:	4b2e      	ldr	r3, [pc, #184]	; (801fdd8 <__swsetup_r+0xd0>)
 801fd20:	429c      	cmp	r4, r3
 801fd22:	d10f      	bne.n	801fd44 <__swsetup_r+0x3c>
 801fd24:	686c      	ldr	r4, [r5, #4]
 801fd26:	89a3      	ldrh	r3, [r4, #12]
 801fd28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fd2c:	0719      	lsls	r1, r3, #28
 801fd2e:	d42c      	bmi.n	801fd8a <__swsetup_r+0x82>
 801fd30:	06dd      	lsls	r5, r3, #27
 801fd32:	d411      	bmi.n	801fd58 <__swsetup_r+0x50>
 801fd34:	2309      	movs	r3, #9
 801fd36:	6033      	str	r3, [r6, #0]
 801fd38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801fd3c:	81a3      	strh	r3, [r4, #12]
 801fd3e:	f04f 30ff 	mov.w	r0, #4294967295
 801fd42:	e03e      	b.n	801fdc2 <__swsetup_r+0xba>
 801fd44:	4b25      	ldr	r3, [pc, #148]	; (801fddc <__swsetup_r+0xd4>)
 801fd46:	429c      	cmp	r4, r3
 801fd48:	d101      	bne.n	801fd4e <__swsetup_r+0x46>
 801fd4a:	68ac      	ldr	r4, [r5, #8]
 801fd4c:	e7eb      	b.n	801fd26 <__swsetup_r+0x1e>
 801fd4e:	4b24      	ldr	r3, [pc, #144]	; (801fde0 <__swsetup_r+0xd8>)
 801fd50:	429c      	cmp	r4, r3
 801fd52:	bf08      	it	eq
 801fd54:	68ec      	ldreq	r4, [r5, #12]
 801fd56:	e7e6      	b.n	801fd26 <__swsetup_r+0x1e>
 801fd58:	0758      	lsls	r0, r3, #29
 801fd5a:	d512      	bpl.n	801fd82 <__swsetup_r+0x7a>
 801fd5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fd5e:	b141      	cbz	r1, 801fd72 <__swsetup_r+0x6a>
 801fd60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fd64:	4299      	cmp	r1, r3
 801fd66:	d002      	beq.n	801fd6e <__swsetup_r+0x66>
 801fd68:	4630      	mov	r0, r6
 801fd6a:	f7fe ff0f 	bl	801eb8c <_free_r>
 801fd6e:	2300      	movs	r3, #0
 801fd70:	6363      	str	r3, [r4, #52]	; 0x34
 801fd72:	89a3      	ldrh	r3, [r4, #12]
 801fd74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fd78:	81a3      	strh	r3, [r4, #12]
 801fd7a:	2300      	movs	r3, #0
 801fd7c:	6063      	str	r3, [r4, #4]
 801fd7e:	6923      	ldr	r3, [r4, #16]
 801fd80:	6023      	str	r3, [r4, #0]
 801fd82:	89a3      	ldrh	r3, [r4, #12]
 801fd84:	f043 0308 	orr.w	r3, r3, #8
 801fd88:	81a3      	strh	r3, [r4, #12]
 801fd8a:	6923      	ldr	r3, [r4, #16]
 801fd8c:	b94b      	cbnz	r3, 801fda2 <__swsetup_r+0x9a>
 801fd8e:	89a3      	ldrh	r3, [r4, #12]
 801fd90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fd94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fd98:	d003      	beq.n	801fda2 <__swsetup_r+0x9a>
 801fd9a:	4621      	mov	r1, r4
 801fd9c:	4630      	mov	r0, r6
 801fd9e:	f000 ffb5 	bl	8020d0c <__smakebuf_r>
 801fda2:	89a0      	ldrh	r0, [r4, #12]
 801fda4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fda8:	f010 0301 	ands.w	r3, r0, #1
 801fdac:	d00a      	beq.n	801fdc4 <__swsetup_r+0xbc>
 801fdae:	2300      	movs	r3, #0
 801fdb0:	60a3      	str	r3, [r4, #8]
 801fdb2:	6963      	ldr	r3, [r4, #20]
 801fdb4:	425b      	negs	r3, r3
 801fdb6:	61a3      	str	r3, [r4, #24]
 801fdb8:	6923      	ldr	r3, [r4, #16]
 801fdba:	b943      	cbnz	r3, 801fdce <__swsetup_r+0xc6>
 801fdbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801fdc0:	d1ba      	bne.n	801fd38 <__swsetup_r+0x30>
 801fdc2:	bd70      	pop	{r4, r5, r6, pc}
 801fdc4:	0781      	lsls	r1, r0, #30
 801fdc6:	bf58      	it	pl
 801fdc8:	6963      	ldrpl	r3, [r4, #20]
 801fdca:	60a3      	str	r3, [r4, #8]
 801fdcc:	e7f4      	b.n	801fdb8 <__swsetup_r+0xb0>
 801fdce:	2000      	movs	r0, #0
 801fdd0:	e7f7      	b.n	801fdc2 <__swsetup_r+0xba>
 801fdd2:	bf00      	nop
 801fdd4:	10000138 	.word	0x10000138
 801fdd8:	08025c64 	.word	0x08025c64
 801fddc:	08025c84 	.word	0x08025c84
 801fde0:	08025c44 	.word	0x08025c44

0801fde4 <abort>:
 801fde4:	b508      	push	{r3, lr}
 801fde6:	2006      	movs	r0, #6
 801fde8:	f001 fd36 	bl	8021858 <raise>
 801fdec:	2001      	movs	r0, #1
 801fdee:	f7e1 fe11 	bl	8001a14 <_exit>
	...

0801fdf4 <_close_r>:
 801fdf4:	b538      	push	{r3, r4, r5, lr}
 801fdf6:	4d06      	ldr	r5, [pc, #24]	; (801fe10 <_close_r+0x1c>)
 801fdf8:	2300      	movs	r3, #0
 801fdfa:	4604      	mov	r4, r0
 801fdfc:	4608      	mov	r0, r1
 801fdfe:	602b      	str	r3, [r5, #0]
 801fe00:	f7e1 fe12 	bl	8001a28 <_close>
 801fe04:	1c43      	adds	r3, r0, #1
 801fe06:	d102      	bne.n	801fe0e <_close_r+0x1a>
 801fe08:	682b      	ldr	r3, [r5, #0]
 801fe0a:	b103      	cbz	r3, 801fe0e <_close_r+0x1a>
 801fe0c:	6023      	str	r3, [r4, #0]
 801fe0e:	bd38      	pop	{r3, r4, r5, pc}
 801fe10:	2000898c 	.word	0x2000898c

0801fe14 <quorem>:
 801fe14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe18:	6903      	ldr	r3, [r0, #16]
 801fe1a:	690c      	ldr	r4, [r1, #16]
 801fe1c:	42a3      	cmp	r3, r4
 801fe1e:	4607      	mov	r7, r0
 801fe20:	f2c0 8081 	blt.w	801ff26 <quorem+0x112>
 801fe24:	3c01      	subs	r4, #1
 801fe26:	f101 0814 	add.w	r8, r1, #20
 801fe2a:	f100 0514 	add.w	r5, r0, #20
 801fe2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801fe32:	9301      	str	r3, [sp, #4]
 801fe34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801fe38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801fe3c:	3301      	adds	r3, #1
 801fe3e:	429a      	cmp	r2, r3
 801fe40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801fe44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801fe48:	fbb2 f6f3 	udiv	r6, r2, r3
 801fe4c:	d331      	bcc.n	801feb2 <quorem+0x9e>
 801fe4e:	f04f 0e00 	mov.w	lr, #0
 801fe52:	4640      	mov	r0, r8
 801fe54:	46ac      	mov	ip, r5
 801fe56:	46f2      	mov	sl, lr
 801fe58:	f850 2b04 	ldr.w	r2, [r0], #4
 801fe5c:	b293      	uxth	r3, r2
 801fe5e:	fb06 e303 	mla	r3, r6, r3, lr
 801fe62:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801fe66:	b29b      	uxth	r3, r3
 801fe68:	ebaa 0303 	sub.w	r3, sl, r3
 801fe6c:	0c12      	lsrs	r2, r2, #16
 801fe6e:	f8dc a000 	ldr.w	sl, [ip]
 801fe72:	fb06 e202 	mla	r2, r6, r2, lr
 801fe76:	fa13 f38a 	uxtah	r3, r3, sl
 801fe7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801fe7e:	fa1f fa82 	uxth.w	sl, r2
 801fe82:	f8dc 2000 	ldr.w	r2, [ip]
 801fe86:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801fe8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801fe8e:	b29b      	uxth	r3, r3
 801fe90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fe94:	4581      	cmp	r9, r0
 801fe96:	f84c 3b04 	str.w	r3, [ip], #4
 801fe9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801fe9e:	d2db      	bcs.n	801fe58 <quorem+0x44>
 801fea0:	f855 300b 	ldr.w	r3, [r5, fp]
 801fea4:	b92b      	cbnz	r3, 801feb2 <quorem+0x9e>
 801fea6:	9b01      	ldr	r3, [sp, #4]
 801fea8:	3b04      	subs	r3, #4
 801feaa:	429d      	cmp	r5, r3
 801feac:	461a      	mov	r2, r3
 801feae:	d32e      	bcc.n	801ff0e <quorem+0xfa>
 801feb0:	613c      	str	r4, [r7, #16]
 801feb2:	4638      	mov	r0, r7
 801feb4:	f001 fa06 	bl	80212c4 <__mcmp>
 801feb8:	2800      	cmp	r0, #0
 801feba:	db24      	blt.n	801ff06 <quorem+0xf2>
 801febc:	3601      	adds	r6, #1
 801febe:	4628      	mov	r0, r5
 801fec0:	f04f 0c00 	mov.w	ip, #0
 801fec4:	f858 2b04 	ldr.w	r2, [r8], #4
 801fec8:	f8d0 e000 	ldr.w	lr, [r0]
 801fecc:	b293      	uxth	r3, r2
 801fece:	ebac 0303 	sub.w	r3, ip, r3
 801fed2:	0c12      	lsrs	r2, r2, #16
 801fed4:	fa13 f38e 	uxtah	r3, r3, lr
 801fed8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801fedc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801fee0:	b29b      	uxth	r3, r3
 801fee2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fee6:	45c1      	cmp	r9, r8
 801fee8:	f840 3b04 	str.w	r3, [r0], #4
 801feec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801fef0:	d2e8      	bcs.n	801fec4 <quorem+0xb0>
 801fef2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801fef6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801fefa:	b922      	cbnz	r2, 801ff06 <quorem+0xf2>
 801fefc:	3b04      	subs	r3, #4
 801fefe:	429d      	cmp	r5, r3
 801ff00:	461a      	mov	r2, r3
 801ff02:	d30a      	bcc.n	801ff1a <quorem+0x106>
 801ff04:	613c      	str	r4, [r7, #16]
 801ff06:	4630      	mov	r0, r6
 801ff08:	b003      	add	sp, #12
 801ff0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff0e:	6812      	ldr	r2, [r2, #0]
 801ff10:	3b04      	subs	r3, #4
 801ff12:	2a00      	cmp	r2, #0
 801ff14:	d1cc      	bne.n	801feb0 <quorem+0x9c>
 801ff16:	3c01      	subs	r4, #1
 801ff18:	e7c7      	b.n	801feaa <quorem+0x96>
 801ff1a:	6812      	ldr	r2, [r2, #0]
 801ff1c:	3b04      	subs	r3, #4
 801ff1e:	2a00      	cmp	r2, #0
 801ff20:	d1f0      	bne.n	801ff04 <quorem+0xf0>
 801ff22:	3c01      	subs	r4, #1
 801ff24:	e7eb      	b.n	801fefe <quorem+0xea>
 801ff26:	2000      	movs	r0, #0
 801ff28:	e7ee      	b.n	801ff08 <quorem+0xf4>
 801ff2a:	0000      	movs	r0, r0
 801ff2c:	0000      	movs	r0, r0
	...

0801ff30 <_dtoa_r>:
 801ff30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff34:	ed2d 8b02 	vpush	{d8}
 801ff38:	ec57 6b10 	vmov	r6, r7, d0
 801ff3c:	b095      	sub	sp, #84	; 0x54
 801ff3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801ff40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801ff44:	9105      	str	r1, [sp, #20]
 801ff46:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801ff4a:	4604      	mov	r4, r0
 801ff4c:	9209      	str	r2, [sp, #36]	; 0x24
 801ff4e:	930f      	str	r3, [sp, #60]	; 0x3c
 801ff50:	b975      	cbnz	r5, 801ff70 <_dtoa_r+0x40>
 801ff52:	2010      	movs	r0, #16
 801ff54:	f7fe fdcc 	bl	801eaf0 <malloc>
 801ff58:	4602      	mov	r2, r0
 801ff5a:	6260      	str	r0, [r4, #36]	; 0x24
 801ff5c:	b920      	cbnz	r0, 801ff68 <_dtoa_r+0x38>
 801ff5e:	4bb2      	ldr	r3, [pc, #712]	; (8020228 <_dtoa_r+0x2f8>)
 801ff60:	21ea      	movs	r1, #234	; 0xea
 801ff62:	48b2      	ldr	r0, [pc, #712]	; (802022c <_dtoa_r+0x2fc>)
 801ff64:	f7fe fc72 	bl	801e84c <__assert_func>
 801ff68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801ff6c:	6005      	str	r5, [r0, #0]
 801ff6e:	60c5      	str	r5, [r0, #12]
 801ff70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ff72:	6819      	ldr	r1, [r3, #0]
 801ff74:	b151      	cbz	r1, 801ff8c <_dtoa_r+0x5c>
 801ff76:	685a      	ldr	r2, [r3, #4]
 801ff78:	604a      	str	r2, [r1, #4]
 801ff7a:	2301      	movs	r3, #1
 801ff7c:	4093      	lsls	r3, r2
 801ff7e:	608b      	str	r3, [r1, #8]
 801ff80:	4620      	mov	r0, r4
 801ff82:	f000 ff61 	bl	8020e48 <_Bfree>
 801ff86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ff88:	2200      	movs	r2, #0
 801ff8a:	601a      	str	r2, [r3, #0]
 801ff8c:	1e3b      	subs	r3, r7, #0
 801ff8e:	bfb9      	ittee	lt
 801ff90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801ff94:	9303      	strlt	r3, [sp, #12]
 801ff96:	2300      	movge	r3, #0
 801ff98:	f8c8 3000 	strge.w	r3, [r8]
 801ff9c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801ffa0:	4ba3      	ldr	r3, [pc, #652]	; (8020230 <_dtoa_r+0x300>)
 801ffa2:	bfbc      	itt	lt
 801ffa4:	2201      	movlt	r2, #1
 801ffa6:	f8c8 2000 	strlt.w	r2, [r8]
 801ffaa:	ea33 0309 	bics.w	r3, r3, r9
 801ffae:	d11b      	bne.n	801ffe8 <_dtoa_r+0xb8>
 801ffb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ffb2:	f242 730f 	movw	r3, #9999	; 0x270f
 801ffb6:	6013      	str	r3, [r2, #0]
 801ffb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ffbc:	4333      	orrs	r3, r6
 801ffbe:	f000 857a 	beq.w	8020ab6 <_dtoa_r+0xb86>
 801ffc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ffc4:	b963      	cbnz	r3, 801ffe0 <_dtoa_r+0xb0>
 801ffc6:	4b9b      	ldr	r3, [pc, #620]	; (8020234 <_dtoa_r+0x304>)
 801ffc8:	e024      	b.n	8020014 <_dtoa_r+0xe4>
 801ffca:	4b9b      	ldr	r3, [pc, #620]	; (8020238 <_dtoa_r+0x308>)
 801ffcc:	9300      	str	r3, [sp, #0]
 801ffce:	3308      	adds	r3, #8
 801ffd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ffd2:	6013      	str	r3, [r2, #0]
 801ffd4:	9800      	ldr	r0, [sp, #0]
 801ffd6:	b015      	add	sp, #84	; 0x54
 801ffd8:	ecbd 8b02 	vpop	{d8}
 801ffdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffe0:	4b94      	ldr	r3, [pc, #592]	; (8020234 <_dtoa_r+0x304>)
 801ffe2:	9300      	str	r3, [sp, #0]
 801ffe4:	3303      	adds	r3, #3
 801ffe6:	e7f3      	b.n	801ffd0 <_dtoa_r+0xa0>
 801ffe8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ffec:	2200      	movs	r2, #0
 801ffee:	ec51 0b17 	vmov	r0, r1, d7
 801fff2:	2300      	movs	r3, #0
 801fff4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801fff8:	f7e0 fd66 	bl	8000ac8 <__aeabi_dcmpeq>
 801fffc:	4680      	mov	r8, r0
 801fffe:	b158      	cbz	r0, 8020018 <_dtoa_r+0xe8>
 8020000:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020002:	2301      	movs	r3, #1
 8020004:	6013      	str	r3, [r2, #0]
 8020006:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020008:	2b00      	cmp	r3, #0
 802000a:	f000 8551 	beq.w	8020ab0 <_dtoa_r+0xb80>
 802000e:	488b      	ldr	r0, [pc, #556]	; (802023c <_dtoa_r+0x30c>)
 8020010:	6018      	str	r0, [r3, #0]
 8020012:	1e43      	subs	r3, r0, #1
 8020014:	9300      	str	r3, [sp, #0]
 8020016:	e7dd      	b.n	801ffd4 <_dtoa_r+0xa4>
 8020018:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 802001c:	aa12      	add	r2, sp, #72	; 0x48
 802001e:	a913      	add	r1, sp, #76	; 0x4c
 8020020:	4620      	mov	r0, r4
 8020022:	f001 f9f3 	bl	802140c <__d2b>
 8020026:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802002a:	4683      	mov	fp, r0
 802002c:	2d00      	cmp	r5, #0
 802002e:	d07c      	beq.n	802012a <_dtoa_r+0x1fa>
 8020030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020032:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8020036:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802003a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 802003e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8020042:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8020046:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802004a:	4b7d      	ldr	r3, [pc, #500]	; (8020240 <_dtoa_r+0x310>)
 802004c:	2200      	movs	r2, #0
 802004e:	4630      	mov	r0, r6
 8020050:	4639      	mov	r1, r7
 8020052:	f7e0 f919 	bl	8000288 <__aeabi_dsub>
 8020056:	a36e      	add	r3, pc, #440	; (adr r3, 8020210 <_dtoa_r+0x2e0>)
 8020058:	e9d3 2300 	ldrd	r2, r3, [r3]
 802005c:	f7e0 facc 	bl	80005f8 <__aeabi_dmul>
 8020060:	a36d      	add	r3, pc, #436	; (adr r3, 8020218 <_dtoa_r+0x2e8>)
 8020062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020066:	f7e0 f911 	bl	800028c <__adddf3>
 802006a:	4606      	mov	r6, r0
 802006c:	4628      	mov	r0, r5
 802006e:	460f      	mov	r7, r1
 8020070:	f7e0 fa58 	bl	8000524 <__aeabi_i2d>
 8020074:	a36a      	add	r3, pc, #424	; (adr r3, 8020220 <_dtoa_r+0x2f0>)
 8020076:	e9d3 2300 	ldrd	r2, r3, [r3]
 802007a:	f7e0 fabd 	bl	80005f8 <__aeabi_dmul>
 802007e:	4602      	mov	r2, r0
 8020080:	460b      	mov	r3, r1
 8020082:	4630      	mov	r0, r6
 8020084:	4639      	mov	r1, r7
 8020086:	f7e0 f901 	bl	800028c <__adddf3>
 802008a:	4606      	mov	r6, r0
 802008c:	460f      	mov	r7, r1
 802008e:	f7e0 fd63 	bl	8000b58 <__aeabi_d2iz>
 8020092:	2200      	movs	r2, #0
 8020094:	4682      	mov	sl, r0
 8020096:	2300      	movs	r3, #0
 8020098:	4630      	mov	r0, r6
 802009a:	4639      	mov	r1, r7
 802009c:	f7e0 fd1e 	bl	8000adc <__aeabi_dcmplt>
 80200a0:	b148      	cbz	r0, 80200b6 <_dtoa_r+0x186>
 80200a2:	4650      	mov	r0, sl
 80200a4:	f7e0 fa3e 	bl	8000524 <__aeabi_i2d>
 80200a8:	4632      	mov	r2, r6
 80200aa:	463b      	mov	r3, r7
 80200ac:	f7e0 fd0c 	bl	8000ac8 <__aeabi_dcmpeq>
 80200b0:	b908      	cbnz	r0, 80200b6 <_dtoa_r+0x186>
 80200b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80200b6:	f1ba 0f16 	cmp.w	sl, #22
 80200ba:	d854      	bhi.n	8020166 <_dtoa_r+0x236>
 80200bc:	4b61      	ldr	r3, [pc, #388]	; (8020244 <_dtoa_r+0x314>)
 80200be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80200c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80200ca:	f7e0 fd07 	bl	8000adc <__aeabi_dcmplt>
 80200ce:	2800      	cmp	r0, #0
 80200d0:	d04b      	beq.n	802016a <_dtoa_r+0x23a>
 80200d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80200d6:	2300      	movs	r3, #0
 80200d8:	930e      	str	r3, [sp, #56]	; 0x38
 80200da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80200dc:	1b5d      	subs	r5, r3, r5
 80200de:	1e6b      	subs	r3, r5, #1
 80200e0:	9304      	str	r3, [sp, #16]
 80200e2:	bf43      	ittte	mi
 80200e4:	2300      	movmi	r3, #0
 80200e6:	f1c5 0801 	rsbmi	r8, r5, #1
 80200ea:	9304      	strmi	r3, [sp, #16]
 80200ec:	f04f 0800 	movpl.w	r8, #0
 80200f0:	f1ba 0f00 	cmp.w	sl, #0
 80200f4:	db3b      	blt.n	802016e <_dtoa_r+0x23e>
 80200f6:	9b04      	ldr	r3, [sp, #16]
 80200f8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80200fc:	4453      	add	r3, sl
 80200fe:	9304      	str	r3, [sp, #16]
 8020100:	2300      	movs	r3, #0
 8020102:	9306      	str	r3, [sp, #24]
 8020104:	9b05      	ldr	r3, [sp, #20]
 8020106:	2b09      	cmp	r3, #9
 8020108:	d869      	bhi.n	80201de <_dtoa_r+0x2ae>
 802010a:	2b05      	cmp	r3, #5
 802010c:	bfc4      	itt	gt
 802010e:	3b04      	subgt	r3, #4
 8020110:	9305      	strgt	r3, [sp, #20]
 8020112:	9b05      	ldr	r3, [sp, #20]
 8020114:	f1a3 0302 	sub.w	r3, r3, #2
 8020118:	bfcc      	ite	gt
 802011a:	2500      	movgt	r5, #0
 802011c:	2501      	movle	r5, #1
 802011e:	2b03      	cmp	r3, #3
 8020120:	d869      	bhi.n	80201f6 <_dtoa_r+0x2c6>
 8020122:	e8df f003 	tbb	[pc, r3]
 8020126:	4e2c      	.short	0x4e2c
 8020128:	5a4c      	.short	0x5a4c
 802012a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 802012e:	441d      	add	r5, r3
 8020130:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8020134:	2b20      	cmp	r3, #32
 8020136:	bfc1      	itttt	gt
 8020138:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802013c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8020140:	fa09 f303 	lslgt.w	r3, r9, r3
 8020144:	fa26 f000 	lsrgt.w	r0, r6, r0
 8020148:	bfda      	itte	le
 802014a:	f1c3 0320 	rsble	r3, r3, #32
 802014e:	fa06 f003 	lslle.w	r0, r6, r3
 8020152:	4318      	orrgt	r0, r3
 8020154:	f7e0 f9d6 	bl	8000504 <__aeabi_ui2d>
 8020158:	2301      	movs	r3, #1
 802015a:	4606      	mov	r6, r0
 802015c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8020160:	3d01      	subs	r5, #1
 8020162:	9310      	str	r3, [sp, #64]	; 0x40
 8020164:	e771      	b.n	802004a <_dtoa_r+0x11a>
 8020166:	2301      	movs	r3, #1
 8020168:	e7b6      	b.n	80200d8 <_dtoa_r+0x1a8>
 802016a:	900e      	str	r0, [sp, #56]	; 0x38
 802016c:	e7b5      	b.n	80200da <_dtoa_r+0x1aa>
 802016e:	f1ca 0300 	rsb	r3, sl, #0
 8020172:	9306      	str	r3, [sp, #24]
 8020174:	2300      	movs	r3, #0
 8020176:	eba8 080a 	sub.w	r8, r8, sl
 802017a:	930d      	str	r3, [sp, #52]	; 0x34
 802017c:	e7c2      	b.n	8020104 <_dtoa_r+0x1d4>
 802017e:	2300      	movs	r3, #0
 8020180:	9308      	str	r3, [sp, #32]
 8020182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020184:	2b00      	cmp	r3, #0
 8020186:	dc39      	bgt.n	80201fc <_dtoa_r+0x2cc>
 8020188:	f04f 0901 	mov.w	r9, #1
 802018c:	f8cd 9004 	str.w	r9, [sp, #4]
 8020190:	464b      	mov	r3, r9
 8020192:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8020196:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020198:	2200      	movs	r2, #0
 802019a:	6042      	str	r2, [r0, #4]
 802019c:	2204      	movs	r2, #4
 802019e:	f102 0614 	add.w	r6, r2, #20
 80201a2:	429e      	cmp	r6, r3
 80201a4:	6841      	ldr	r1, [r0, #4]
 80201a6:	d92f      	bls.n	8020208 <_dtoa_r+0x2d8>
 80201a8:	4620      	mov	r0, r4
 80201aa:	f000 fe0d 	bl	8020dc8 <_Balloc>
 80201ae:	9000      	str	r0, [sp, #0]
 80201b0:	2800      	cmp	r0, #0
 80201b2:	d14b      	bne.n	802024c <_dtoa_r+0x31c>
 80201b4:	4b24      	ldr	r3, [pc, #144]	; (8020248 <_dtoa_r+0x318>)
 80201b6:	4602      	mov	r2, r0
 80201b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80201bc:	e6d1      	b.n	801ff62 <_dtoa_r+0x32>
 80201be:	2301      	movs	r3, #1
 80201c0:	e7de      	b.n	8020180 <_dtoa_r+0x250>
 80201c2:	2300      	movs	r3, #0
 80201c4:	9308      	str	r3, [sp, #32]
 80201c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80201c8:	eb0a 0903 	add.w	r9, sl, r3
 80201cc:	f109 0301 	add.w	r3, r9, #1
 80201d0:	2b01      	cmp	r3, #1
 80201d2:	9301      	str	r3, [sp, #4]
 80201d4:	bfb8      	it	lt
 80201d6:	2301      	movlt	r3, #1
 80201d8:	e7dd      	b.n	8020196 <_dtoa_r+0x266>
 80201da:	2301      	movs	r3, #1
 80201dc:	e7f2      	b.n	80201c4 <_dtoa_r+0x294>
 80201de:	2501      	movs	r5, #1
 80201e0:	2300      	movs	r3, #0
 80201e2:	9305      	str	r3, [sp, #20]
 80201e4:	9508      	str	r5, [sp, #32]
 80201e6:	f04f 39ff 	mov.w	r9, #4294967295
 80201ea:	2200      	movs	r2, #0
 80201ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80201f0:	2312      	movs	r3, #18
 80201f2:	9209      	str	r2, [sp, #36]	; 0x24
 80201f4:	e7cf      	b.n	8020196 <_dtoa_r+0x266>
 80201f6:	2301      	movs	r3, #1
 80201f8:	9308      	str	r3, [sp, #32]
 80201fa:	e7f4      	b.n	80201e6 <_dtoa_r+0x2b6>
 80201fc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8020200:	f8cd 9004 	str.w	r9, [sp, #4]
 8020204:	464b      	mov	r3, r9
 8020206:	e7c6      	b.n	8020196 <_dtoa_r+0x266>
 8020208:	3101      	adds	r1, #1
 802020a:	6041      	str	r1, [r0, #4]
 802020c:	0052      	lsls	r2, r2, #1
 802020e:	e7c6      	b.n	802019e <_dtoa_r+0x26e>
 8020210:	636f4361 	.word	0x636f4361
 8020214:	3fd287a7 	.word	0x3fd287a7
 8020218:	8b60c8b3 	.word	0x8b60c8b3
 802021c:	3fc68a28 	.word	0x3fc68a28
 8020220:	509f79fb 	.word	0x509f79fb
 8020224:	3fd34413 	.word	0x3fd34413
 8020228:	08025ced 	.word	0x08025ced
 802022c:	08025d70 	.word	0x08025d70
 8020230:	7ff00000 	.word	0x7ff00000
 8020234:	08025d6c 	.word	0x08025d6c
 8020238:	08025d63 	.word	0x08025d63
 802023c:	08025cca 	.word	0x08025cca
 8020240:	3ff80000 	.word	0x3ff80000
 8020244:	08025e78 	.word	0x08025e78
 8020248:	08025dcf 	.word	0x08025dcf
 802024c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802024e:	9a00      	ldr	r2, [sp, #0]
 8020250:	601a      	str	r2, [r3, #0]
 8020252:	9b01      	ldr	r3, [sp, #4]
 8020254:	2b0e      	cmp	r3, #14
 8020256:	f200 80ad 	bhi.w	80203b4 <_dtoa_r+0x484>
 802025a:	2d00      	cmp	r5, #0
 802025c:	f000 80aa 	beq.w	80203b4 <_dtoa_r+0x484>
 8020260:	f1ba 0f00 	cmp.w	sl, #0
 8020264:	dd36      	ble.n	80202d4 <_dtoa_r+0x3a4>
 8020266:	4ac3      	ldr	r2, [pc, #780]	; (8020574 <_dtoa_r+0x644>)
 8020268:	f00a 030f 	and.w	r3, sl, #15
 802026c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8020270:	ed93 7b00 	vldr	d7, [r3]
 8020274:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8020278:	ea4f 172a 	mov.w	r7, sl, asr #4
 802027c:	eeb0 8a47 	vmov.f32	s16, s14
 8020280:	eef0 8a67 	vmov.f32	s17, s15
 8020284:	d016      	beq.n	80202b4 <_dtoa_r+0x384>
 8020286:	4bbc      	ldr	r3, [pc, #752]	; (8020578 <_dtoa_r+0x648>)
 8020288:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802028c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8020290:	f7e0 fadc 	bl	800084c <__aeabi_ddiv>
 8020294:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020298:	f007 070f 	and.w	r7, r7, #15
 802029c:	2503      	movs	r5, #3
 802029e:	4eb6      	ldr	r6, [pc, #728]	; (8020578 <_dtoa_r+0x648>)
 80202a0:	b957      	cbnz	r7, 80202b8 <_dtoa_r+0x388>
 80202a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80202a6:	ec53 2b18 	vmov	r2, r3, d8
 80202aa:	f7e0 facf 	bl	800084c <__aeabi_ddiv>
 80202ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80202b2:	e029      	b.n	8020308 <_dtoa_r+0x3d8>
 80202b4:	2502      	movs	r5, #2
 80202b6:	e7f2      	b.n	802029e <_dtoa_r+0x36e>
 80202b8:	07f9      	lsls	r1, r7, #31
 80202ba:	d508      	bpl.n	80202ce <_dtoa_r+0x39e>
 80202bc:	ec51 0b18 	vmov	r0, r1, d8
 80202c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80202c4:	f7e0 f998 	bl	80005f8 <__aeabi_dmul>
 80202c8:	ec41 0b18 	vmov	d8, r0, r1
 80202cc:	3501      	adds	r5, #1
 80202ce:	107f      	asrs	r7, r7, #1
 80202d0:	3608      	adds	r6, #8
 80202d2:	e7e5      	b.n	80202a0 <_dtoa_r+0x370>
 80202d4:	f000 80a6 	beq.w	8020424 <_dtoa_r+0x4f4>
 80202d8:	f1ca 0600 	rsb	r6, sl, #0
 80202dc:	4ba5      	ldr	r3, [pc, #660]	; (8020574 <_dtoa_r+0x644>)
 80202de:	4fa6      	ldr	r7, [pc, #664]	; (8020578 <_dtoa_r+0x648>)
 80202e0:	f006 020f 	and.w	r2, r6, #15
 80202e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80202e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80202ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80202f0:	f7e0 f982 	bl	80005f8 <__aeabi_dmul>
 80202f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80202f8:	1136      	asrs	r6, r6, #4
 80202fa:	2300      	movs	r3, #0
 80202fc:	2502      	movs	r5, #2
 80202fe:	2e00      	cmp	r6, #0
 8020300:	f040 8085 	bne.w	802040e <_dtoa_r+0x4de>
 8020304:	2b00      	cmp	r3, #0
 8020306:	d1d2      	bne.n	80202ae <_dtoa_r+0x37e>
 8020308:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802030a:	2b00      	cmp	r3, #0
 802030c:	f000 808c 	beq.w	8020428 <_dtoa_r+0x4f8>
 8020310:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8020314:	4b99      	ldr	r3, [pc, #612]	; (802057c <_dtoa_r+0x64c>)
 8020316:	2200      	movs	r2, #0
 8020318:	4630      	mov	r0, r6
 802031a:	4639      	mov	r1, r7
 802031c:	f7e0 fbde 	bl	8000adc <__aeabi_dcmplt>
 8020320:	2800      	cmp	r0, #0
 8020322:	f000 8081 	beq.w	8020428 <_dtoa_r+0x4f8>
 8020326:	9b01      	ldr	r3, [sp, #4]
 8020328:	2b00      	cmp	r3, #0
 802032a:	d07d      	beq.n	8020428 <_dtoa_r+0x4f8>
 802032c:	f1b9 0f00 	cmp.w	r9, #0
 8020330:	dd3c      	ble.n	80203ac <_dtoa_r+0x47c>
 8020332:	f10a 33ff 	add.w	r3, sl, #4294967295
 8020336:	9307      	str	r3, [sp, #28]
 8020338:	2200      	movs	r2, #0
 802033a:	4b91      	ldr	r3, [pc, #580]	; (8020580 <_dtoa_r+0x650>)
 802033c:	4630      	mov	r0, r6
 802033e:	4639      	mov	r1, r7
 8020340:	f7e0 f95a 	bl	80005f8 <__aeabi_dmul>
 8020344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020348:	3501      	adds	r5, #1
 802034a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 802034e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8020352:	4628      	mov	r0, r5
 8020354:	f7e0 f8e6 	bl	8000524 <__aeabi_i2d>
 8020358:	4632      	mov	r2, r6
 802035a:	463b      	mov	r3, r7
 802035c:	f7e0 f94c 	bl	80005f8 <__aeabi_dmul>
 8020360:	4b88      	ldr	r3, [pc, #544]	; (8020584 <_dtoa_r+0x654>)
 8020362:	2200      	movs	r2, #0
 8020364:	f7df ff92 	bl	800028c <__adddf3>
 8020368:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 802036c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020370:	9303      	str	r3, [sp, #12]
 8020372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020374:	2b00      	cmp	r3, #0
 8020376:	d15c      	bne.n	8020432 <_dtoa_r+0x502>
 8020378:	4b83      	ldr	r3, [pc, #524]	; (8020588 <_dtoa_r+0x658>)
 802037a:	2200      	movs	r2, #0
 802037c:	4630      	mov	r0, r6
 802037e:	4639      	mov	r1, r7
 8020380:	f7df ff82 	bl	8000288 <__aeabi_dsub>
 8020384:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020388:	4606      	mov	r6, r0
 802038a:	460f      	mov	r7, r1
 802038c:	f7e0 fbc4 	bl	8000b18 <__aeabi_dcmpgt>
 8020390:	2800      	cmp	r0, #0
 8020392:	f040 8296 	bne.w	80208c2 <_dtoa_r+0x992>
 8020396:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802039a:	4630      	mov	r0, r6
 802039c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80203a0:	4639      	mov	r1, r7
 80203a2:	f7e0 fb9b 	bl	8000adc <__aeabi_dcmplt>
 80203a6:	2800      	cmp	r0, #0
 80203a8:	f040 8288 	bne.w	80208bc <_dtoa_r+0x98c>
 80203ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80203b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80203b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80203b6:	2b00      	cmp	r3, #0
 80203b8:	f2c0 8158 	blt.w	802066c <_dtoa_r+0x73c>
 80203bc:	f1ba 0f0e 	cmp.w	sl, #14
 80203c0:	f300 8154 	bgt.w	802066c <_dtoa_r+0x73c>
 80203c4:	4b6b      	ldr	r3, [pc, #428]	; (8020574 <_dtoa_r+0x644>)
 80203c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80203ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 80203ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80203d0:	2b00      	cmp	r3, #0
 80203d2:	f280 80e3 	bge.w	802059c <_dtoa_r+0x66c>
 80203d6:	9b01      	ldr	r3, [sp, #4]
 80203d8:	2b00      	cmp	r3, #0
 80203da:	f300 80df 	bgt.w	802059c <_dtoa_r+0x66c>
 80203de:	f040 826d 	bne.w	80208bc <_dtoa_r+0x98c>
 80203e2:	4b69      	ldr	r3, [pc, #420]	; (8020588 <_dtoa_r+0x658>)
 80203e4:	2200      	movs	r2, #0
 80203e6:	4640      	mov	r0, r8
 80203e8:	4649      	mov	r1, r9
 80203ea:	f7e0 f905 	bl	80005f8 <__aeabi_dmul>
 80203ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80203f2:	f7e0 fb87 	bl	8000b04 <__aeabi_dcmpge>
 80203f6:	9e01      	ldr	r6, [sp, #4]
 80203f8:	4637      	mov	r7, r6
 80203fa:	2800      	cmp	r0, #0
 80203fc:	f040 8243 	bne.w	8020886 <_dtoa_r+0x956>
 8020400:	9d00      	ldr	r5, [sp, #0]
 8020402:	2331      	movs	r3, #49	; 0x31
 8020404:	f805 3b01 	strb.w	r3, [r5], #1
 8020408:	f10a 0a01 	add.w	sl, sl, #1
 802040c:	e23f      	b.n	802088e <_dtoa_r+0x95e>
 802040e:	07f2      	lsls	r2, r6, #31
 8020410:	d505      	bpl.n	802041e <_dtoa_r+0x4ee>
 8020412:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020416:	f7e0 f8ef 	bl	80005f8 <__aeabi_dmul>
 802041a:	3501      	adds	r5, #1
 802041c:	2301      	movs	r3, #1
 802041e:	1076      	asrs	r6, r6, #1
 8020420:	3708      	adds	r7, #8
 8020422:	e76c      	b.n	80202fe <_dtoa_r+0x3ce>
 8020424:	2502      	movs	r5, #2
 8020426:	e76f      	b.n	8020308 <_dtoa_r+0x3d8>
 8020428:	9b01      	ldr	r3, [sp, #4]
 802042a:	f8cd a01c 	str.w	sl, [sp, #28]
 802042e:	930c      	str	r3, [sp, #48]	; 0x30
 8020430:	e78d      	b.n	802034e <_dtoa_r+0x41e>
 8020432:	9900      	ldr	r1, [sp, #0]
 8020434:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020436:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020438:	4b4e      	ldr	r3, [pc, #312]	; (8020574 <_dtoa_r+0x644>)
 802043a:	ed9d 7b02 	vldr	d7, [sp, #8]
 802043e:	4401      	add	r1, r0
 8020440:	9102      	str	r1, [sp, #8]
 8020442:	9908      	ldr	r1, [sp, #32]
 8020444:	eeb0 8a47 	vmov.f32	s16, s14
 8020448:	eef0 8a67 	vmov.f32	s17, s15
 802044c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020450:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8020454:	2900      	cmp	r1, #0
 8020456:	d045      	beq.n	80204e4 <_dtoa_r+0x5b4>
 8020458:	494c      	ldr	r1, [pc, #304]	; (802058c <_dtoa_r+0x65c>)
 802045a:	2000      	movs	r0, #0
 802045c:	f7e0 f9f6 	bl	800084c <__aeabi_ddiv>
 8020460:	ec53 2b18 	vmov	r2, r3, d8
 8020464:	f7df ff10 	bl	8000288 <__aeabi_dsub>
 8020468:	9d00      	ldr	r5, [sp, #0]
 802046a:	ec41 0b18 	vmov	d8, r0, r1
 802046e:	4639      	mov	r1, r7
 8020470:	4630      	mov	r0, r6
 8020472:	f7e0 fb71 	bl	8000b58 <__aeabi_d2iz>
 8020476:	900c      	str	r0, [sp, #48]	; 0x30
 8020478:	f7e0 f854 	bl	8000524 <__aeabi_i2d>
 802047c:	4602      	mov	r2, r0
 802047e:	460b      	mov	r3, r1
 8020480:	4630      	mov	r0, r6
 8020482:	4639      	mov	r1, r7
 8020484:	f7df ff00 	bl	8000288 <__aeabi_dsub>
 8020488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802048a:	3330      	adds	r3, #48	; 0x30
 802048c:	f805 3b01 	strb.w	r3, [r5], #1
 8020490:	ec53 2b18 	vmov	r2, r3, d8
 8020494:	4606      	mov	r6, r0
 8020496:	460f      	mov	r7, r1
 8020498:	f7e0 fb20 	bl	8000adc <__aeabi_dcmplt>
 802049c:	2800      	cmp	r0, #0
 802049e:	d165      	bne.n	802056c <_dtoa_r+0x63c>
 80204a0:	4632      	mov	r2, r6
 80204a2:	463b      	mov	r3, r7
 80204a4:	4935      	ldr	r1, [pc, #212]	; (802057c <_dtoa_r+0x64c>)
 80204a6:	2000      	movs	r0, #0
 80204a8:	f7df feee 	bl	8000288 <__aeabi_dsub>
 80204ac:	ec53 2b18 	vmov	r2, r3, d8
 80204b0:	f7e0 fb14 	bl	8000adc <__aeabi_dcmplt>
 80204b4:	2800      	cmp	r0, #0
 80204b6:	f040 80b9 	bne.w	802062c <_dtoa_r+0x6fc>
 80204ba:	9b02      	ldr	r3, [sp, #8]
 80204bc:	429d      	cmp	r5, r3
 80204be:	f43f af75 	beq.w	80203ac <_dtoa_r+0x47c>
 80204c2:	4b2f      	ldr	r3, [pc, #188]	; (8020580 <_dtoa_r+0x650>)
 80204c4:	ec51 0b18 	vmov	r0, r1, d8
 80204c8:	2200      	movs	r2, #0
 80204ca:	f7e0 f895 	bl	80005f8 <__aeabi_dmul>
 80204ce:	4b2c      	ldr	r3, [pc, #176]	; (8020580 <_dtoa_r+0x650>)
 80204d0:	ec41 0b18 	vmov	d8, r0, r1
 80204d4:	2200      	movs	r2, #0
 80204d6:	4630      	mov	r0, r6
 80204d8:	4639      	mov	r1, r7
 80204da:	f7e0 f88d 	bl	80005f8 <__aeabi_dmul>
 80204de:	4606      	mov	r6, r0
 80204e0:	460f      	mov	r7, r1
 80204e2:	e7c4      	b.n	802046e <_dtoa_r+0x53e>
 80204e4:	ec51 0b17 	vmov	r0, r1, d7
 80204e8:	f7e0 f886 	bl	80005f8 <__aeabi_dmul>
 80204ec:	9b02      	ldr	r3, [sp, #8]
 80204ee:	9d00      	ldr	r5, [sp, #0]
 80204f0:	930c      	str	r3, [sp, #48]	; 0x30
 80204f2:	ec41 0b18 	vmov	d8, r0, r1
 80204f6:	4639      	mov	r1, r7
 80204f8:	4630      	mov	r0, r6
 80204fa:	f7e0 fb2d 	bl	8000b58 <__aeabi_d2iz>
 80204fe:	9011      	str	r0, [sp, #68]	; 0x44
 8020500:	f7e0 f810 	bl	8000524 <__aeabi_i2d>
 8020504:	4602      	mov	r2, r0
 8020506:	460b      	mov	r3, r1
 8020508:	4630      	mov	r0, r6
 802050a:	4639      	mov	r1, r7
 802050c:	f7df febc 	bl	8000288 <__aeabi_dsub>
 8020510:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020512:	3330      	adds	r3, #48	; 0x30
 8020514:	f805 3b01 	strb.w	r3, [r5], #1
 8020518:	9b02      	ldr	r3, [sp, #8]
 802051a:	429d      	cmp	r5, r3
 802051c:	4606      	mov	r6, r0
 802051e:	460f      	mov	r7, r1
 8020520:	f04f 0200 	mov.w	r2, #0
 8020524:	d134      	bne.n	8020590 <_dtoa_r+0x660>
 8020526:	4b19      	ldr	r3, [pc, #100]	; (802058c <_dtoa_r+0x65c>)
 8020528:	ec51 0b18 	vmov	r0, r1, d8
 802052c:	f7df feae 	bl	800028c <__adddf3>
 8020530:	4602      	mov	r2, r0
 8020532:	460b      	mov	r3, r1
 8020534:	4630      	mov	r0, r6
 8020536:	4639      	mov	r1, r7
 8020538:	f7e0 faee 	bl	8000b18 <__aeabi_dcmpgt>
 802053c:	2800      	cmp	r0, #0
 802053e:	d175      	bne.n	802062c <_dtoa_r+0x6fc>
 8020540:	ec53 2b18 	vmov	r2, r3, d8
 8020544:	4911      	ldr	r1, [pc, #68]	; (802058c <_dtoa_r+0x65c>)
 8020546:	2000      	movs	r0, #0
 8020548:	f7df fe9e 	bl	8000288 <__aeabi_dsub>
 802054c:	4602      	mov	r2, r0
 802054e:	460b      	mov	r3, r1
 8020550:	4630      	mov	r0, r6
 8020552:	4639      	mov	r1, r7
 8020554:	f7e0 fac2 	bl	8000adc <__aeabi_dcmplt>
 8020558:	2800      	cmp	r0, #0
 802055a:	f43f af27 	beq.w	80203ac <_dtoa_r+0x47c>
 802055e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020560:	1e6b      	subs	r3, r5, #1
 8020562:	930c      	str	r3, [sp, #48]	; 0x30
 8020564:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8020568:	2b30      	cmp	r3, #48	; 0x30
 802056a:	d0f8      	beq.n	802055e <_dtoa_r+0x62e>
 802056c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8020570:	e04a      	b.n	8020608 <_dtoa_r+0x6d8>
 8020572:	bf00      	nop
 8020574:	08025e78 	.word	0x08025e78
 8020578:	08025e50 	.word	0x08025e50
 802057c:	3ff00000 	.word	0x3ff00000
 8020580:	40240000 	.word	0x40240000
 8020584:	401c0000 	.word	0x401c0000
 8020588:	40140000 	.word	0x40140000
 802058c:	3fe00000 	.word	0x3fe00000
 8020590:	4baf      	ldr	r3, [pc, #700]	; (8020850 <_dtoa_r+0x920>)
 8020592:	f7e0 f831 	bl	80005f8 <__aeabi_dmul>
 8020596:	4606      	mov	r6, r0
 8020598:	460f      	mov	r7, r1
 802059a:	e7ac      	b.n	80204f6 <_dtoa_r+0x5c6>
 802059c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80205a0:	9d00      	ldr	r5, [sp, #0]
 80205a2:	4642      	mov	r2, r8
 80205a4:	464b      	mov	r3, r9
 80205a6:	4630      	mov	r0, r6
 80205a8:	4639      	mov	r1, r7
 80205aa:	f7e0 f94f 	bl	800084c <__aeabi_ddiv>
 80205ae:	f7e0 fad3 	bl	8000b58 <__aeabi_d2iz>
 80205b2:	9002      	str	r0, [sp, #8]
 80205b4:	f7df ffb6 	bl	8000524 <__aeabi_i2d>
 80205b8:	4642      	mov	r2, r8
 80205ba:	464b      	mov	r3, r9
 80205bc:	f7e0 f81c 	bl	80005f8 <__aeabi_dmul>
 80205c0:	4602      	mov	r2, r0
 80205c2:	460b      	mov	r3, r1
 80205c4:	4630      	mov	r0, r6
 80205c6:	4639      	mov	r1, r7
 80205c8:	f7df fe5e 	bl	8000288 <__aeabi_dsub>
 80205cc:	9e02      	ldr	r6, [sp, #8]
 80205ce:	9f01      	ldr	r7, [sp, #4]
 80205d0:	3630      	adds	r6, #48	; 0x30
 80205d2:	f805 6b01 	strb.w	r6, [r5], #1
 80205d6:	9e00      	ldr	r6, [sp, #0]
 80205d8:	1bae      	subs	r6, r5, r6
 80205da:	42b7      	cmp	r7, r6
 80205dc:	4602      	mov	r2, r0
 80205de:	460b      	mov	r3, r1
 80205e0:	d137      	bne.n	8020652 <_dtoa_r+0x722>
 80205e2:	f7df fe53 	bl	800028c <__adddf3>
 80205e6:	4642      	mov	r2, r8
 80205e8:	464b      	mov	r3, r9
 80205ea:	4606      	mov	r6, r0
 80205ec:	460f      	mov	r7, r1
 80205ee:	f7e0 fa93 	bl	8000b18 <__aeabi_dcmpgt>
 80205f2:	b9c8      	cbnz	r0, 8020628 <_dtoa_r+0x6f8>
 80205f4:	4642      	mov	r2, r8
 80205f6:	464b      	mov	r3, r9
 80205f8:	4630      	mov	r0, r6
 80205fa:	4639      	mov	r1, r7
 80205fc:	f7e0 fa64 	bl	8000ac8 <__aeabi_dcmpeq>
 8020600:	b110      	cbz	r0, 8020608 <_dtoa_r+0x6d8>
 8020602:	9b02      	ldr	r3, [sp, #8]
 8020604:	07d9      	lsls	r1, r3, #31
 8020606:	d40f      	bmi.n	8020628 <_dtoa_r+0x6f8>
 8020608:	4620      	mov	r0, r4
 802060a:	4659      	mov	r1, fp
 802060c:	f000 fc1c 	bl	8020e48 <_Bfree>
 8020610:	2300      	movs	r3, #0
 8020612:	702b      	strb	r3, [r5, #0]
 8020614:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020616:	f10a 0001 	add.w	r0, sl, #1
 802061a:	6018      	str	r0, [r3, #0]
 802061c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802061e:	2b00      	cmp	r3, #0
 8020620:	f43f acd8 	beq.w	801ffd4 <_dtoa_r+0xa4>
 8020624:	601d      	str	r5, [r3, #0]
 8020626:	e4d5      	b.n	801ffd4 <_dtoa_r+0xa4>
 8020628:	f8cd a01c 	str.w	sl, [sp, #28]
 802062c:	462b      	mov	r3, r5
 802062e:	461d      	mov	r5, r3
 8020630:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8020634:	2a39      	cmp	r2, #57	; 0x39
 8020636:	d108      	bne.n	802064a <_dtoa_r+0x71a>
 8020638:	9a00      	ldr	r2, [sp, #0]
 802063a:	429a      	cmp	r2, r3
 802063c:	d1f7      	bne.n	802062e <_dtoa_r+0x6fe>
 802063e:	9a07      	ldr	r2, [sp, #28]
 8020640:	9900      	ldr	r1, [sp, #0]
 8020642:	3201      	adds	r2, #1
 8020644:	9207      	str	r2, [sp, #28]
 8020646:	2230      	movs	r2, #48	; 0x30
 8020648:	700a      	strb	r2, [r1, #0]
 802064a:	781a      	ldrb	r2, [r3, #0]
 802064c:	3201      	adds	r2, #1
 802064e:	701a      	strb	r2, [r3, #0]
 8020650:	e78c      	b.n	802056c <_dtoa_r+0x63c>
 8020652:	4b7f      	ldr	r3, [pc, #508]	; (8020850 <_dtoa_r+0x920>)
 8020654:	2200      	movs	r2, #0
 8020656:	f7df ffcf 	bl	80005f8 <__aeabi_dmul>
 802065a:	2200      	movs	r2, #0
 802065c:	2300      	movs	r3, #0
 802065e:	4606      	mov	r6, r0
 8020660:	460f      	mov	r7, r1
 8020662:	f7e0 fa31 	bl	8000ac8 <__aeabi_dcmpeq>
 8020666:	2800      	cmp	r0, #0
 8020668:	d09b      	beq.n	80205a2 <_dtoa_r+0x672>
 802066a:	e7cd      	b.n	8020608 <_dtoa_r+0x6d8>
 802066c:	9a08      	ldr	r2, [sp, #32]
 802066e:	2a00      	cmp	r2, #0
 8020670:	f000 80c4 	beq.w	80207fc <_dtoa_r+0x8cc>
 8020674:	9a05      	ldr	r2, [sp, #20]
 8020676:	2a01      	cmp	r2, #1
 8020678:	f300 80a8 	bgt.w	80207cc <_dtoa_r+0x89c>
 802067c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802067e:	2a00      	cmp	r2, #0
 8020680:	f000 80a0 	beq.w	80207c4 <_dtoa_r+0x894>
 8020684:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8020688:	9e06      	ldr	r6, [sp, #24]
 802068a:	4645      	mov	r5, r8
 802068c:	9a04      	ldr	r2, [sp, #16]
 802068e:	2101      	movs	r1, #1
 8020690:	441a      	add	r2, r3
 8020692:	4620      	mov	r0, r4
 8020694:	4498      	add	r8, r3
 8020696:	9204      	str	r2, [sp, #16]
 8020698:	f000 fc92 	bl	8020fc0 <__i2b>
 802069c:	4607      	mov	r7, r0
 802069e:	2d00      	cmp	r5, #0
 80206a0:	dd0b      	ble.n	80206ba <_dtoa_r+0x78a>
 80206a2:	9b04      	ldr	r3, [sp, #16]
 80206a4:	2b00      	cmp	r3, #0
 80206a6:	dd08      	ble.n	80206ba <_dtoa_r+0x78a>
 80206a8:	42ab      	cmp	r3, r5
 80206aa:	9a04      	ldr	r2, [sp, #16]
 80206ac:	bfa8      	it	ge
 80206ae:	462b      	movge	r3, r5
 80206b0:	eba8 0803 	sub.w	r8, r8, r3
 80206b4:	1aed      	subs	r5, r5, r3
 80206b6:	1ad3      	subs	r3, r2, r3
 80206b8:	9304      	str	r3, [sp, #16]
 80206ba:	9b06      	ldr	r3, [sp, #24]
 80206bc:	b1fb      	cbz	r3, 80206fe <_dtoa_r+0x7ce>
 80206be:	9b08      	ldr	r3, [sp, #32]
 80206c0:	2b00      	cmp	r3, #0
 80206c2:	f000 809f 	beq.w	8020804 <_dtoa_r+0x8d4>
 80206c6:	2e00      	cmp	r6, #0
 80206c8:	dd11      	ble.n	80206ee <_dtoa_r+0x7be>
 80206ca:	4639      	mov	r1, r7
 80206cc:	4632      	mov	r2, r6
 80206ce:	4620      	mov	r0, r4
 80206d0:	f000 fd32 	bl	8021138 <__pow5mult>
 80206d4:	465a      	mov	r2, fp
 80206d6:	4601      	mov	r1, r0
 80206d8:	4607      	mov	r7, r0
 80206da:	4620      	mov	r0, r4
 80206dc:	f000 fc86 	bl	8020fec <__multiply>
 80206e0:	4659      	mov	r1, fp
 80206e2:	9007      	str	r0, [sp, #28]
 80206e4:	4620      	mov	r0, r4
 80206e6:	f000 fbaf 	bl	8020e48 <_Bfree>
 80206ea:	9b07      	ldr	r3, [sp, #28]
 80206ec:	469b      	mov	fp, r3
 80206ee:	9b06      	ldr	r3, [sp, #24]
 80206f0:	1b9a      	subs	r2, r3, r6
 80206f2:	d004      	beq.n	80206fe <_dtoa_r+0x7ce>
 80206f4:	4659      	mov	r1, fp
 80206f6:	4620      	mov	r0, r4
 80206f8:	f000 fd1e 	bl	8021138 <__pow5mult>
 80206fc:	4683      	mov	fp, r0
 80206fe:	2101      	movs	r1, #1
 8020700:	4620      	mov	r0, r4
 8020702:	f000 fc5d 	bl	8020fc0 <__i2b>
 8020706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020708:	2b00      	cmp	r3, #0
 802070a:	4606      	mov	r6, r0
 802070c:	dd7c      	ble.n	8020808 <_dtoa_r+0x8d8>
 802070e:	461a      	mov	r2, r3
 8020710:	4601      	mov	r1, r0
 8020712:	4620      	mov	r0, r4
 8020714:	f000 fd10 	bl	8021138 <__pow5mult>
 8020718:	9b05      	ldr	r3, [sp, #20]
 802071a:	2b01      	cmp	r3, #1
 802071c:	4606      	mov	r6, r0
 802071e:	dd76      	ble.n	802080e <_dtoa_r+0x8de>
 8020720:	2300      	movs	r3, #0
 8020722:	9306      	str	r3, [sp, #24]
 8020724:	6933      	ldr	r3, [r6, #16]
 8020726:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 802072a:	6918      	ldr	r0, [r3, #16]
 802072c:	f000 fbf8 	bl	8020f20 <__hi0bits>
 8020730:	f1c0 0020 	rsb	r0, r0, #32
 8020734:	9b04      	ldr	r3, [sp, #16]
 8020736:	4418      	add	r0, r3
 8020738:	f010 001f 	ands.w	r0, r0, #31
 802073c:	f000 8086 	beq.w	802084c <_dtoa_r+0x91c>
 8020740:	f1c0 0320 	rsb	r3, r0, #32
 8020744:	2b04      	cmp	r3, #4
 8020746:	dd7f      	ble.n	8020848 <_dtoa_r+0x918>
 8020748:	f1c0 001c 	rsb	r0, r0, #28
 802074c:	9b04      	ldr	r3, [sp, #16]
 802074e:	4403      	add	r3, r0
 8020750:	4480      	add	r8, r0
 8020752:	4405      	add	r5, r0
 8020754:	9304      	str	r3, [sp, #16]
 8020756:	f1b8 0f00 	cmp.w	r8, #0
 802075a:	dd05      	ble.n	8020768 <_dtoa_r+0x838>
 802075c:	4659      	mov	r1, fp
 802075e:	4642      	mov	r2, r8
 8020760:	4620      	mov	r0, r4
 8020762:	f000 fd43 	bl	80211ec <__lshift>
 8020766:	4683      	mov	fp, r0
 8020768:	9b04      	ldr	r3, [sp, #16]
 802076a:	2b00      	cmp	r3, #0
 802076c:	dd05      	ble.n	802077a <_dtoa_r+0x84a>
 802076e:	4631      	mov	r1, r6
 8020770:	461a      	mov	r2, r3
 8020772:	4620      	mov	r0, r4
 8020774:	f000 fd3a 	bl	80211ec <__lshift>
 8020778:	4606      	mov	r6, r0
 802077a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802077c:	2b00      	cmp	r3, #0
 802077e:	d069      	beq.n	8020854 <_dtoa_r+0x924>
 8020780:	4631      	mov	r1, r6
 8020782:	4658      	mov	r0, fp
 8020784:	f000 fd9e 	bl	80212c4 <__mcmp>
 8020788:	2800      	cmp	r0, #0
 802078a:	da63      	bge.n	8020854 <_dtoa_r+0x924>
 802078c:	2300      	movs	r3, #0
 802078e:	4659      	mov	r1, fp
 8020790:	220a      	movs	r2, #10
 8020792:	4620      	mov	r0, r4
 8020794:	f000 fb7a 	bl	8020e8c <__multadd>
 8020798:	9b08      	ldr	r3, [sp, #32]
 802079a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802079e:	4683      	mov	fp, r0
 80207a0:	2b00      	cmp	r3, #0
 80207a2:	f000 818f 	beq.w	8020ac4 <_dtoa_r+0xb94>
 80207a6:	4639      	mov	r1, r7
 80207a8:	2300      	movs	r3, #0
 80207aa:	220a      	movs	r2, #10
 80207ac:	4620      	mov	r0, r4
 80207ae:	f000 fb6d 	bl	8020e8c <__multadd>
 80207b2:	f1b9 0f00 	cmp.w	r9, #0
 80207b6:	4607      	mov	r7, r0
 80207b8:	f300 808e 	bgt.w	80208d8 <_dtoa_r+0x9a8>
 80207bc:	9b05      	ldr	r3, [sp, #20]
 80207be:	2b02      	cmp	r3, #2
 80207c0:	dc50      	bgt.n	8020864 <_dtoa_r+0x934>
 80207c2:	e089      	b.n	80208d8 <_dtoa_r+0x9a8>
 80207c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80207c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80207ca:	e75d      	b.n	8020688 <_dtoa_r+0x758>
 80207cc:	9b01      	ldr	r3, [sp, #4]
 80207ce:	1e5e      	subs	r6, r3, #1
 80207d0:	9b06      	ldr	r3, [sp, #24]
 80207d2:	42b3      	cmp	r3, r6
 80207d4:	bfbf      	itttt	lt
 80207d6:	9b06      	ldrlt	r3, [sp, #24]
 80207d8:	9606      	strlt	r6, [sp, #24]
 80207da:	1af2      	sublt	r2, r6, r3
 80207dc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80207de:	bfb6      	itet	lt
 80207e0:	189b      	addlt	r3, r3, r2
 80207e2:	1b9e      	subge	r6, r3, r6
 80207e4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80207e6:	9b01      	ldr	r3, [sp, #4]
 80207e8:	bfb8      	it	lt
 80207ea:	2600      	movlt	r6, #0
 80207ec:	2b00      	cmp	r3, #0
 80207ee:	bfb5      	itete	lt
 80207f0:	eba8 0503 	sublt.w	r5, r8, r3
 80207f4:	9b01      	ldrge	r3, [sp, #4]
 80207f6:	2300      	movlt	r3, #0
 80207f8:	4645      	movge	r5, r8
 80207fa:	e747      	b.n	802068c <_dtoa_r+0x75c>
 80207fc:	9e06      	ldr	r6, [sp, #24]
 80207fe:	9f08      	ldr	r7, [sp, #32]
 8020800:	4645      	mov	r5, r8
 8020802:	e74c      	b.n	802069e <_dtoa_r+0x76e>
 8020804:	9a06      	ldr	r2, [sp, #24]
 8020806:	e775      	b.n	80206f4 <_dtoa_r+0x7c4>
 8020808:	9b05      	ldr	r3, [sp, #20]
 802080a:	2b01      	cmp	r3, #1
 802080c:	dc18      	bgt.n	8020840 <_dtoa_r+0x910>
 802080e:	9b02      	ldr	r3, [sp, #8]
 8020810:	b9b3      	cbnz	r3, 8020840 <_dtoa_r+0x910>
 8020812:	9b03      	ldr	r3, [sp, #12]
 8020814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020818:	b9a3      	cbnz	r3, 8020844 <_dtoa_r+0x914>
 802081a:	9b03      	ldr	r3, [sp, #12]
 802081c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020820:	0d1b      	lsrs	r3, r3, #20
 8020822:	051b      	lsls	r3, r3, #20
 8020824:	b12b      	cbz	r3, 8020832 <_dtoa_r+0x902>
 8020826:	9b04      	ldr	r3, [sp, #16]
 8020828:	3301      	adds	r3, #1
 802082a:	9304      	str	r3, [sp, #16]
 802082c:	f108 0801 	add.w	r8, r8, #1
 8020830:	2301      	movs	r3, #1
 8020832:	9306      	str	r3, [sp, #24]
 8020834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020836:	2b00      	cmp	r3, #0
 8020838:	f47f af74 	bne.w	8020724 <_dtoa_r+0x7f4>
 802083c:	2001      	movs	r0, #1
 802083e:	e779      	b.n	8020734 <_dtoa_r+0x804>
 8020840:	2300      	movs	r3, #0
 8020842:	e7f6      	b.n	8020832 <_dtoa_r+0x902>
 8020844:	9b02      	ldr	r3, [sp, #8]
 8020846:	e7f4      	b.n	8020832 <_dtoa_r+0x902>
 8020848:	d085      	beq.n	8020756 <_dtoa_r+0x826>
 802084a:	4618      	mov	r0, r3
 802084c:	301c      	adds	r0, #28
 802084e:	e77d      	b.n	802074c <_dtoa_r+0x81c>
 8020850:	40240000 	.word	0x40240000
 8020854:	9b01      	ldr	r3, [sp, #4]
 8020856:	2b00      	cmp	r3, #0
 8020858:	dc38      	bgt.n	80208cc <_dtoa_r+0x99c>
 802085a:	9b05      	ldr	r3, [sp, #20]
 802085c:	2b02      	cmp	r3, #2
 802085e:	dd35      	ble.n	80208cc <_dtoa_r+0x99c>
 8020860:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8020864:	f1b9 0f00 	cmp.w	r9, #0
 8020868:	d10d      	bne.n	8020886 <_dtoa_r+0x956>
 802086a:	4631      	mov	r1, r6
 802086c:	464b      	mov	r3, r9
 802086e:	2205      	movs	r2, #5
 8020870:	4620      	mov	r0, r4
 8020872:	f000 fb0b 	bl	8020e8c <__multadd>
 8020876:	4601      	mov	r1, r0
 8020878:	4606      	mov	r6, r0
 802087a:	4658      	mov	r0, fp
 802087c:	f000 fd22 	bl	80212c4 <__mcmp>
 8020880:	2800      	cmp	r0, #0
 8020882:	f73f adbd 	bgt.w	8020400 <_dtoa_r+0x4d0>
 8020886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020888:	9d00      	ldr	r5, [sp, #0]
 802088a:	ea6f 0a03 	mvn.w	sl, r3
 802088e:	f04f 0800 	mov.w	r8, #0
 8020892:	4631      	mov	r1, r6
 8020894:	4620      	mov	r0, r4
 8020896:	f000 fad7 	bl	8020e48 <_Bfree>
 802089a:	2f00      	cmp	r7, #0
 802089c:	f43f aeb4 	beq.w	8020608 <_dtoa_r+0x6d8>
 80208a0:	f1b8 0f00 	cmp.w	r8, #0
 80208a4:	d005      	beq.n	80208b2 <_dtoa_r+0x982>
 80208a6:	45b8      	cmp	r8, r7
 80208a8:	d003      	beq.n	80208b2 <_dtoa_r+0x982>
 80208aa:	4641      	mov	r1, r8
 80208ac:	4620      	mov	r0, r4
 80208ae:	f000 facb 	bl	8020e48 <_Bfree>
 80208b2:	4639      	mov	r1, r7
 80208b4:	4620      	mov	r0, r4
 80208b6:	f000 fac7 	bl	8020e48 <_Bfree>
 80208ba:	e6a5      	b.n	8020608 <_dtoa_r+0x6d8>
 80208bc:	2600      	movs	r6, #0
 80208be:	4637      	mov	r7, r6
 80208c0:	e7e1      	b.n	8020886 <_dtoa_r+0x956>
 80208c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80208c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80208c8:	4637      	mov	r7, r6
 80208ca:	e599      	b.n	8020400 <_dtoa_r+0x4d0>
 80208cc:	9b08      	ldr	r3, [sp, #32]
 80208ce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80208d2:	2b00      	cmp	r3, #0
 80208d4:	f000 80fd 	beq.w	8020ad2 <_dtoa_r+0xba2>
 80208d8:	2d00      	cmp	r5, #0
 80208da:	dd05      	ble.n	80208e8 <_dtoa_r+0x9b8>
 80208dc:	4639      	mov	r1, r7
 80208de:	462a      	mov	r2, r5
 80208e0:	4620      	mov	r0, r4
 80208e2:	f000 fc83 	bl	80211ec <__lshift>
 80208e6:	4607      	mov	r7, r0
 80208e8:	9b06      	ldr	r3, [sp, #24]
 80208ea:	2b00      	cmp	r3, #0
 80208ec:	d05c      	beq.n	80209a8 <_dtoa_r+0xa78>
 80208ee:	6879      	ldr	r1, [r7, #4]
 80208f0:	4620      	mov	r0, r4
 80208f2:	f000 fa69 	bl	8020dc8 <_Balloc>
 80208f6:	4605      	mov	r5, r0
 80208f8:	b928      	cbnz	r0, 8020906 <_dtoa_r+0x9d6>
 80208fa:	4b80      	ldr	r3, [pc, #512]	; (8020afc <_dtoa_r+0xbcc>)
 80208fc:	4602      	mov	r2, r0
 80208fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8020902:	f7ff bb2e 	b.w	801ff62 <_dtoa_r+0x32>
 8020906:	693a      	ldr	r2, [r7, #16]
 8020908:	3202      	adds	r2, #2
 802090a:	0092      	lsls	r2, r2, #2
 802090c:	f107 010c 	add.w	r1, r7, #12
 8020910:	300c      	adds	r0, #12
 8020912:	f7fe f90b 	bl	801eb2c <memcpy>
 8020916:	2201      	movs	r2, #1
 8020918:	4629      	mov	r1, r5
 802091a:	4620      	mov	r0, r4
 802091c:	f000 fc66 	bl	80211ec <__lshift>
 8020920:	9b00      	ldr	r3, [sp, #0]
 8020922:	3301      	adds	r3, #1
 8020924:	9301      	str	r3, [sp, #4]
 8020926:	9b00      	ldr	r3, [sp, #0]
 8020928:	444b      	add	r3, r9
 802092a:	9307      	str	r3, [sp, #28]
 802092c:	9b02      	ldr	r3, [sp, #8]
 802092e:	f003 0301 	and.w	r3, r3, #1
 8020932:	46b8      	mov	r8, r7
 8020934:	9306      	str	r3, [sp, #24]
 8020936:	4607      	mov	r7, r0
 8020938:	9b01      	ldr	r3, [sp, #4]
 802093a:	4631      	mov	r1, r6
 802093c:	3b01      	subs	r3, #1
 802093e:	4658      	mov	r0, fp
 8020940:	9302      	str	r3, [sp, #8]
 8020942:	f7ff fa67 	bl	801fe14 <quorem>
 8020946:	4603      	mov	r3, r0
 8020948:	3330      	adds	r3, #48	; 0x30
 802094a:	9004      	str	r0, [sp, #16]
 802094c:	4641      	mov	r1, r8
 802094e:	4658      	mov	r0, fp
 8020950:	9308      	str	r3, [sp, #32]
 8020952:	f000 fcb7 	bl	80212c4 <__mcmp>
 8020956:	463a      	mov	r2, r7
 8020958:	4681      	mov	r9, r0
 802095a:	4631      	mov	r1, r6
 802095c:	4620      	mov	r0, r4
 802095e:	f000 fccd 	bl	80212fc <__mdiff>
 8020962:	68c2      	ldr	r2, [r0, #12]
 8020964:	9b08      	ldr	r3, [sp, #32]
 8020966:	4605      	mov	r5, r0
 8020968:	bb02      	cbnz	r2, 80209ac <_dtoa_r+0xa7c>
 802096a:	4601      	mov	r1, r0
 802096c:	4658      	mov	r0, fp
 802096e:	f000 fca9 	bl	80212c4 <__mcmp>
 8020972:	9b08      	ldr	r3, [sp, #32]
 8020974:	4602      	mov	r2, r0
 8020976:	4629      	mov	r1, r5
 8020978:	4620      	mov	r0, r4
 802097a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 802097e:	f000 fa63 	bl	8020e48 <_Bfree>
 8020982:	9b05      	ldr	r3, [sp, #20]
 8020984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020986:	9d01      	ldr	r5, [sp, #4]
 8020988:	ea43 0102 	orr.w	r1, r3, r2
 802098c:	9b06      	ldr	r3, [sp, #24]
 802098e:	430b      	orrs	r3, r1
 8020990:	9b08      	ldr	r3, [sp, #32]
 8020992:	d10d      	bne.n	80209b0 <_dtoa_r+0xa80>
 8020994:	2b39      	cmp	r3, #57	; 0x39
 8020996:	d029      	beq.n	80209ec <_dtoa_r+0xabc>
 8020998:	f1b9 0f00 	cmp.w	r9, #0
 802099c:	dd01      	ble.n	80209a2 <_dtoa_r+0xa72>
 802099e:	9b04      	ldr	r3, [sp, #16]
 80209a0:	3331      	adds	r3, #49	; 0x31
 80209a2:	9a02      	ldr	r2, [sp, #8]
 80209a4:	7013      	strb	r3, [r2, #0]
 80209a6:	e774      	b.n	8020892 <_dtoa_r+0x962>
 80209a8:	4638      	mov	r0, r7
 80209aa:	e7b9      	b.n	8020920 <_dtoa_r+0x9f0>
 80209ac:	2201      	movs	r2, #1
 80209ae:	e7e2      	b.n	8020976 <_dtoa_r+0xa46>
 80209b0:	f1b9 0f00 	cmp.w	r9, #0
 80209b4:	db06      	blt.n	80209c4 <_dtoa_r+0xa94>
 80209b6:	9905      	ldr	r1, [sp, #20]
 80209b8:	ea41 0909 	orr.w	r9, r1, r9
 80209bc:	9906      	ldr	r1, [sp, #24]
 80209be:	ea59 0101 	orrs.w	r1, r9, r1
 80209c2:	d120      	bne.n	8020a06 <_dtoa_r+0xad6>
 80209c4:	2a00      	cmp	r2, #0
 80209c6:	ddec      	ble.n	80209a2 <_dtoa_r+0xa72>
 80209c8:	4659      	mov	r1, fp
 80209ca:	2201      	movs	r2, #1
 80209cc:	4620      	mov	r0, r4
 80209ce:	9301      	str	r3, [sp, #4]
 80209d0:	f000 fc0c 	bl	80211ec <__lshift>
 80209d4:	4631      	mov	r1, r6
 80209d6:	4683      	mov	fp, r0
 80209d8:	f000 fc74 	bl	80212c4 <__mcmp>
 80209dc:	2800      	cmp	r0, #0
 80209de:	9b01      	ldr	r3, [sp, #4]
 80209e0:	dc02      	bgt.n	80209e8 <_dtoa_r+0xab8>
 80209e2:	d1de      	bne.n	80209a2 <_dtoa_r+0xa72>
 80209e4:	07da      	lsls	r2, r3, #31
 80209e6:	d5dc      	bpl.n	80209a2 <_dtoa_r+0xa72>
 80209e8:	2b39      	cmp	r3, #57	; 0x39
 80209ea:	d1d8      	bne.n	802099e <_dtoa_r+0xa6e>
 80209ec:	9a02      	ldr	r2, [sp, #8]
 80209ee:	2339      	movs	r3, #57	; 0x39
 80209f0:	7013      	strb	r3, [r2, #0]
 80209f2:	462b      	mov	r3, r5
 80209f4:	461d      	mov	r5, r3
 80209f6:	3b01      	subs	r3, #1
 80209f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80209fc:	2a39      	cmp	r2, #57	; 0x39
 80209fe:	d050      	beq.n	8020aa2 <_dtoa_r+0xb72>
 8020a00:	3201      	adds	r2, #1
 8020a02:	701a      	strb	r2, [r3, #0]
 8020a04:	e745      	b.n	8020892 <_dtoa_r+0x962>
 8020a06:	2a00      	cmp	r2, #0
 8020a08:	dd03      	ble.n	8020a12 <_dtoa_r+0xae2>
 8020a0a:	2b39      	cmp	r3, #57	; 0x39
 8020a0c:	d0ee      	beq.n	80209ec <_dtoa_r+0xabc>
 8020a0e:	3301      	adds	r3, #1
 8020a10:	e7c7      	b.n	80209a2 <_dtoa_r+0xa72>
 8020a12:	9a01      	ldr	r2, [sp, #4]
 8020a14:	9907      	ldr	r1, [sp, #28]
 8020a16:	f802 3c01 	strb.w	r3, [r2, #-1]
 8020a1a:	428a      	cmp	r2, r1
 8020a1c:	d02a      	beq.n	8020a74 <_dtoa_r+0xb44>
 8020a1e:	4659      	mov	r1, fp
 8020a20:	2300      	movs	r3, #0
 8020a22:	220a      	movs	r2, #10
 8020a24:	4620      	mov	r0, r4
 8020a26:	f000 fa31 	bl	8020e8c <__multadd>
 8020a2a:	45b8      	cmp	r8, r7
 8020a2c:	4683      	mov	fp, r0
 8020a2e:	f04f 0300 	mov.w	r3, #0
 8020a32:	f04f 020a 	mov.w	r2, #10
 8020a36:	4641      	mov	r1, r8
 8020a38:	4620      	mov	r0, r4
 8020a3a:	d107      	bne.n	8020a4c <_dtoa_r+0xb1c>
 8020a3c:	f000 fa26 	bl	8020e8c <__multadd>
 8020a40:	4680      	mov	r8, r0
 8020a42:	4607      	mov	r7, r0
 8020a44:	9b01      	ldr	r3, [sp, #4]
 8020a46:	3301      	adds	r3, #1
 8020a48:	9301      	str	r3, [sp, #4]
 8020a4a:	e775      	b.n	8020938 <_dtoa_r+0xa08>
 8020a4c:	f000 fa1e 	bl	8020e8c <__multadd>
 8020a50:	4639      	mov	r1, r7
 8020a52:	4680      	mov	r8, r0
 8020a54:	2300      	movs	r3, #0
 8020a56:	220a      	movs	r2, #10
 8020a58:	4620      	mov	r0, r4
 8020a5a:	f000 fa17 	bl	8020e8c <__multadd>
 8020a5e:	4607      	mov	r7, r0
 8020a60:	e7f0      	b.n	8020a44 <_dtoa_r+0xb14>
 8020a62:	f1b9 0f00 	cmp.w	r9, #0
 8020a66:	9a00      	ldr	r2, [sp, #0]
 8020a68:	bfcc      	ite	gt
 8020a6a:	464d      	movgt	r5, r9
 8020a6c:	2501      	movle	r5, #1
 8020a6e:	4415      	add	r5, r2
 8020a70:	f04f 0800 	mov.w	r8, #0
 8020a74:	4659      	mov	r1, fp
 8020a76:	2201      	movs	r2, #1
 8020a78:	4620      	mov	r0, r4
 8020a7a:	9301      	str	r3, [sp, #4]
 8020a7c:	f000 fbb6 	bl	80211ec <__lshift>
 8020a80:	4631      	mov	r1, r6
 8020a82:	4683      	mov	fp, r0
 8020a84:	f000 fc1e 	bl	80212c4 <__mcmp>
 8020a88:	2800      	cmp	r0, #0
 8020a8a:	dcb2      	bgt.n	80209f2 <_dtoa_r+0xac2>
 8020a8c:	d102      	bne.n	8020a94 <_dtoa_r+0xb64>
 8020a8e:	9b01      	ldr	r3, [sp, #4]
 8020a90:	07db      	lsls	r3, r3, #31
 8020a92:	d4ae      	bmi.n	80209f2 <_dtoa_r+0xac2>
 8020a94:	462b      	mov	r3, r5
 8020a96:	461d      	mov	r5, r3
 8020a98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8020a9c:	2a30      	cmp	r2, #48	; 0x30
 8020a9e:	d0fa      	beq.n	8020a96 <_dtoa_r+0xb66>
 8020aa0:	e6f7      	b.n	8020892 <_dtoa_r+0x962>
 8020aa2:	9a00      	ldr	r2, [sp, #0]
 8020aa4:	429a      	cmp	r2, r3
 8020aa6:	d1a5      	bne.n	80209f4 <_dtoa_r+0xac4>
 8020aa8:	f10a 0a01 	add.w	sl, sl, #1
 8020aac:	2331      	movs	r3, #49	; 0x31
 8020aae:	e779      	b.n	80209a4 <_dtoa_r+0xa74>
 8020ab0:	4b13      	ldr	r3, [pc, #76]	; (8020b00 <_dtoa_r+0xbd0>)
 8020ab2:	f7ff baaf 	b.w	8020014 <_dtoa_r+0xe4>
 8020ab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020ab8:	2b00      	cmp	r3, #0
 8020aba:	f47f aa86 	bne.w	801ffca <_dtoa_r+0x9a>
 8020abe:	4b11      	ldr	r3, [pc, #68]	; (8020b04 <_dtoa_r+0xbd4>)
 8020ac0:	f7ff baa8 	b.w	8020014 <_dtoa_r+0xe4>
 8020ac4:	f1b9 0f00 	cmp.w	r9, #0
 8020ac8:	dc03      	bgt.n	8020ad2 <_dtoa_r+0xba2>
 8020aca:	9b05      	ldr	r3, [sp, #20]
 8020acc:	2b02      	cmp	r3, #2
 8020ace:	f73f aec9 	bgt.w	8020864 <_dtoa_r+0x934>
 8020ad2:	9d00      	ldr	r5, [sp, #0]
 8020ad4:	4631      	mov	r1, r6
 8020ad6:	4658      	mov	r0, fp
 8020ad8:	f7ff f99c 	bl	801fe14 <quorem>
 8020adc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8020ae0:	f805 3b01 	strb.w	r3, [r5], #1
 8020ae4:	9a00      	ldr	r2, [sp, #0]
 8020ae6:	1aaa      	subs	r2, r5, r2
 8020ae8:	4591      	cmp	r9, r2
 8020aea:	ddba      	ble.n	8020a62 <_dtoa_r+0xb32>
 8020aec:	4659      	mov	r1, fp
 8020aee:	2300      	movs	r3, #0
 8020af0:	220a      	movs	r2, #10
 8020af2:	4620      	mov	r0, r4
 8020af4:	f000 f9ca 	bl	8020e8c <__multadd>
 8020af8:	4683      	mov	fp, r0
 8020afa:	e7eb      	b.n	8020ad4 <_dtoa_r+0xba4>
 8020afc:	08025dcf 	.word	0x08025dcf
 8020b00:	08025cc9 	.word	0x08025cc9
 8020b04:	08025d63 	.word	0x08025d63

08020b08 <__errno>:
 8020b08:	4b01      	ldr	r3, [pc, #4]	; (8020b10 <__errno+0x8>)
 8020b0a:	6818      	ldr	r0, [r3, #0]
 8020b0c:	4770      	bx	lr
 8020b0e:	bf00      	nop
 8020b10:	10000138 	.word	0x10000138

08020b14 <__sflush_r>:
 8020b14:	898a      	ldrh	r2, [r1, #12]
 8020b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020b1a:	4605      	mov	r5, r0
 8020b1c:	0710      	lsls	r0, r2, #28
 8020b1e:	460c      	mov	r4, r1
 8020b20:	d458      	bmi.n	8020bd4 <__sflush_r+0xc0>
 8020b22:	684b      	ldr	r3, [r1, #4]
 8020b24:	2b00      	cmp	r3, #0
 8020b26:	dc05      	bgt.n	8020b34 <__sflush_r+0x20>
 8020b28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8020b2a:	2b00      	cmp	r3, #0
 8020b2c:	dc02      	bgt.n	8020b34 <__sflush_r+0x20>
 8020b2e:	2000      	movs	r0, #0
 8020b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020b34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020b36:	2e00      	cmp	r6, #0
 8020b38:	d0f9      	beq.n	8020b2e <__sflush_r+0x1a>
 8020b3a:	2300      	movs	r3, #0
 8020b3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020b40:	682f      	ldr	r7, [r5, #0]
 8020b42:	602b      	str	r3, [r5, #0]
 8020b44:	d032      	beq.n	8020bac <__sflush_r+0x98>
 8020b46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020b48:	89a3      	ldrh	r3, [r4, #12]
 8020b4a:	075a      	lsls	r2, r3, #29
 8020b4c:	d505      	bpl.n	8020b5a <__sflush_r+0x46>
 8020b4e:	6863      	ldr	r3, [r4, #4]
 8020b50:	1ac0      	subs	r0, r0, r3
 8020b52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020b54:	b10b      	cbz	r3, 8020b5a <__sflush_r+0x46>
 8020b56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020b58:	1ac0      	subs	r0, r0, r3
 8020b5a:	2300      	movs	r3, #0
 8020b5c:	4602      	mov	r2, r0
 8020b5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020b60:	6a21      	ldr	r1, [r4, #32]
 8020b62:	4628      	mov	r0, r5
 8020b64:	47b0      	blx	r6
 8020b66:	1c43      	adds	r3, r0, #1
 8020b68:	89a3      	ldrh	r3, [r4, #12]
 8020b6a:	d106      	bne.n	8020b7a <__sflush_r+0x66>
 8020b6c:	6829      	ldr	r1, [r5, #0]
 8020b6e:	291d      	cmp	r1, #29
 8020b70:	d82c      	bhi.n	8020bcc <__sflush_r+0xb8>
 8020b72:	4a2a      	ldr	r2, [pc, #168]	; (8020c1c <__sflush_r+0x108>)
 8020b74:	40ca      	lsrs	r2, r1
 8020b76:	07d6      	lsls	r6, r2, #31
 8020b78:	d528      	bpl.n	8020bcc <__sflush_r+0xb8>
 8020b7a:	2200      	movs	r2, #0
 8020b7c:	6062      	str	r2, [r4, #4]
 8020b7e:	04d9      	lsls	r1, r3, #19
 8020b80:	6922      	ldr	r2, [r4, #16]
 8020b82:	6022      	str	r2, [r4, #0]
 8020b84:	d504      	bpl.n	8020b90 <__sflush_r+0x7c>
 8020b86:	1c42      	adds	r2, r0, #1
 8020b88:	d101      	bne.n	8020b8e <__sflush_r+0x7a>
 8020b8a:	682b      	ldr	r3, [r5, #0]
 8020b8c:	b903      	cbnz	r3, 8020b90 <__sflush_r+0x7c>
 8020b8e:	6560      	str	r0, [r4, #84]	; 0x54
 8020b90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020b92:	602f      	str	r7, [r5, #0]
 8020b94:	2900      	cmp	r1, #0
 8020b96:	d0ca      	beq.n	8020b2e <__sflush_r+0x1a>
 8020b98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020b9c:	4299      	cmp	r1, r3
 8020b9e:	d002      	beq.n	8020ba6 <__sflush_r+0x92>
 8020ba0:	4628      	mov	r0, r5
 8020ba2:	f7fd fff3 	bl	801eb8c <_free_r>
 8020ba6:	2000      	movs	r0, #0
 8020ba8:	6360      	str	r0, [r4, #52]	; 0x34
 8020baa:	e7c1      	b.n	8020b30 <__sflush_r+0x1c>
 8020bac:	6a21      	ldr	r1, [r4, #32]
 8020bae:	2301      	movs	r3, #1
 8020bb0:	4628      	mov	r0, r5
 8020bb2:	47b0      	blx	r6
 8020bb4:	1c41      	adds	r1, r0, #1
 8020bb6:	d1c7      	bne.n	8020b48 <__sflush_r+0x34>
 8020bb8:	682b      	ldr	r3, [r5, #0]
 8020bba:	2b00      	cmp	r3, #0
 8020bbc:	d0c4      	beq.n	8020b48 <__sflush_r+0x34>
 8020bbe:	2b1d      	cmp	r3, #29
 8020bc0:	d001      	beq.n	8020bc6 <__sflush_r+0xb2>
 8020bc2:	2b16      	cmp	r3, #22
 8020bc4:	d101      	bne.n	8020bca <__sflush_r+0xb6>
 8020bc6:	602f      	str	r7, [r5, #0]
 8020bc8:	e7b1      	b.n	8020b2e <__sflush_r+0x1a>
 8020bca:	89a3      	ldrh	r3, [r4, #12]
 8020bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020bd0:	81a3      	strh	r3, [r4, #12]
 8020bd2:	e7ad      	b.n	8020b30 <__sflush_r+0x1c>
 8020bd4:	690f      	ldr	r7, [r1, #16]
 8020bd6:	2f00      	cmp	r7, #0
 8020bd8:	d0a9      	beq.n	8020b2e <__sflush_r+0x1a>
 8020bda:	0793      	lsls	r3, r2, #30
 8020bdc:	680e      	ldr	r6, [r1, #0]
 8020bde:	bf08      	it	eq
 8020be0:	694b      	ldreq	r3, [r1, #20]
 8020be2:	600f      	str	r7, [r1, #0]
 8020be4:	bf18      	it	ne
 8020be6:	2300      	movne	r3, #0
 8020be8:	eba6 0807 	sub.w	r8, r6, r7
 8020bec:	608b      	str	r3, [r1, #8]
 8020bee:	f1b8 0f00 	cmp.w	r8, #0
 8020bf2:	dd9c      	ble.n	8020b2e <__sflush_r+0x1a>
 8020bf4:	6a21      	ldr	r1, [r4, #32]
 8020bf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020bf8:	4643      	mov	r3, r8
 8020bfa:	463a      	mov	r2, r7
 8020bfc:	4628      	mov	r0, r5
 8020bfe:	47b0      	blx	r6
 8020c00:	2800      	cmp	r0, #0
 8020c02:	dc06      	bgt.n	8020c12 <__sflush_r+0xfe>
 8020c04:	89a3      	ldrh	r3, [r4, #12]
 8020c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020c0a:	81a3      	strh	r3, [r4, #12]
 8020c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8020c10:	e78e      	b.n	8020b30 <__sflush_r+0x1c>
 8020c12:	4407      	add	r7, r0
 8020c14:	eba8 0800 	sub.w	r8, r8, r0
 8020c18:	e7e9      	b.n	8020bee <__sflush_r+0xda>
 8020c1a:	bf00      	nop
 8020c1c:	20400001 	.word	0x20400001

08020c20 <_fflush_r>:
 8020c20:	b538      	push	{r3, r4, r5, lr}
 8020c22:	690b      	ldr	r3, [r1, #16]
 8020c24:	4605      	mov	r5, r0
 8020c26:	460c      	mov	r4, r1
 8020c28:	b913      	cbnz	r3, 8020c30 <_fflush_r+0x10>
 8020c2a:	2500      	movs	r5, #0
 8020c2c:	4628      	mov	r0, r5
 8020c2e:	bd38      	pop	{r3, r4, r5, pc}
 8020c30:	b118      	cbz	r0, 8020c3a <_fflush_r+0x1a>
 8020c32:	6983      	ldr	r3, [r0, #24]
 8020c34:	b90b      	cbnz	r3, 8020c3a <_fflush_r+0x1a>
 8020c36:	f7fd fe83 	bl	801e940 <__sinit>
 8020c3a:	4b14      	ldr	r3, [pc, #80]	; (8020c8c <_fflush_r+0x6c>)
 8020c3c:	429c      	cmp	r4, r3
 8020c3e:	d11b      	bne.n	8020c78 <_fflush_r+0x58>
 8020c40:	686c      	ldr	r4, [r5, #4]
 8020c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020c46:	2b00      	cmp	r3, #0
 8020c48:	d0ef      	beq.n	8020c2a <_fflush_r+0xa>
 8020c4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020c4c:	07d0      	lsls	r0, r2, #31
 8020c4e:	d404      	bmi.n	8020c5a <_fflush_r+0x3a>
 8020c50:	0599      	lsls	r1, r3, #22
 8020c52:	d402      	bmi.n	8020c5a <_fflush_r+0x3a>
 8020c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020c56:	f7fd ff48 	bl	801eaea <__retarget_lock_acquire_recursive>
 8020c5a:	4628      	mov	r0, r5
 8020c5c:	4621      	mov	r1, r4
 8020c5e:	f7ff ff59 	bl	8020b14 <__sflush_r>
 8020c62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020c64:	07da      	lsls	r2, r3, #31
 8020c66:	4605      	mov	r5, r0
 8020c68:	d4e0      	bmi.n	8020c2c <_fflush_r+0xc>
 8020c6a:	89a3      	ldrh	r3, [r4, #12]
 8020c6c:	059b      	lsls	r3, r3, #22
 8020c6e:	d4dd      	bmi.n	8020c2c <_fflush_r+0xc>
 8020c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020c72:	f7fd ff3b 	bl	801eaec <__retarget_lock_release_recursive>
 8020c76:	e7d9      	b.n	8020c2c <_fflush_r+0xc>
 8020c78:	4b05      	ldr	r3, [pc, #20]	; (8020c90 <_fflush_r+0x70>)
 8020c7a:	429c      	cmp	r4, r3
 8020c7c:	d101      	bne.n	8020c82 <_fflush_r+0x62>
 8020c7e:	68ac      	ldr	r4, [r5, #8]
 8020c80:	e7df      	b.n	8020c42 <_fflush_r+0x22>
 8020c82:	4b04      	ldr	r3, [pc, #16]	; (8020c94 <_fflush_r+0x74>)
 8020c84:	429c      	cmp	r4, r3
 8020c86:	bf08      	it	eq
 8020c88:	68ec      	ldreq	r4, [r5, #12]
 8020c8a:	e7da      	b.n	8020c42 <_fflush_r+0x22>
 8020c8c:	08025c64 	.word	0x08025c64
 8020c90:	08025c84 	.word	0x08025c84
 8020c94:	08025c44 	.word	0x08025c44

08020c98 <_localeconv_r>:
 8020c98:	4800      	ldr	r0, [pc, #0]	; (8020c9c <_localeconv_r+0x4>)
 8020c9a:	4770      	bx	lr
 8020c9c:	1000028c 	.word	0x1000028c

08020ca0 <_lseek_r>:
 8020ca0:	b538      	push	{r3, r4, r5, lr}
 8020ca2:	4d07      	ldr	r5, [pc, #28]	; (8020cc0 <_lseek_r+0x20>)
 8020ca4:	4604      	mov	r4, r0
 8020ca6:	4608      	mov	r0, r1
 8020ca8:	4611      	mov	r1, r2
 8020caa:	2200      	movs	r2, #0
 8020cac:	602a      	str	r2, [r5, #0]
 8020cae:	461a      	mov	r2, r3
 8020cb0:	f7e0 fee1 	bl	8001a76 <_lseek>
 8020cb4:	1c43      	adds	r3, r0, #1
 8020cb6:	d102      	bne.n	8020cbe <_lseek_r+0x1e>
 8020cb8:	682b      	ldr	r3, [r5, #0]
 8020cba:	b103      	cbz	r3, 8020cbe <_lseek_r+0x1e>
 8020cbc:	6023      	str	r3, [r4, #0]
 8020cbe:	bd38      	pop	{r3, r4, r5, pc}
 8020cc0:	2000898c 	.word	0x2000898c

08020cc4 <__swhatbuf_r>:
 8020cc4:	b570      	push	{r4, r5, r6, lr}
 8020cc6:	460e      	mov	r6, r1
 8020cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020ccc:	2900      	cmp	r1, #0
 8020cce:	b096      	sub	sp, #88	; 0x58
 8020cd0:	4614      	mov	r4, r2
 8020cd2:	461d      	mov	r5, r3
 8020cd4:	da07      	bge.n	8020ce6 <__swhatbuf_r+0x22>
 8020cd6:	2300      	movs	r3, #0
 8020cd8:	602b      	str	r3, [r5, #0]
 8020cda:	89b3      	ldrh	r3, [r6, #12]
 8020cdc:	061a      	lsls	r2, r3, #24
 8020cde:	d410      	bmi.n	8020d02 <__swhatbuf_r+0x3e>
 8020ce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020ce4:	e00e      	b.n	8020d04 <__swhatbuf_r+0x40>
 8020ce6:	466a      	mov	r2, sp
 8020ce8:	f000 fde0 	bl	80218ac <_fstat_r>
 8020cec:	2800      	cmp	r0, #0
 8020cee:	dbf2      	blt.n	8020cd6 <__swhatbuf_r+0x12>
 8020cf0:	9a01      	ldr	r2, [sp, #4]
 8020cf2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020cf6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020cfa:	425a      	negs	r2, r3
 8020cfc:	415a      	adcs	r2, r3
 8020cfe:	602a      	str	r2, [r5, #0]
 8020d00:	e7ee      	b.n	8020ce0 <__swhatbuf_r+0x1c>
 8020d02:	2340      	movs	r3, #64	; 0x40
 8020d04:	2000      	movs	r0, #0
 8020d06:	6023      	str	r3, [r4, #0]
 8020d08:	b016      	add	sp, #88	; 0x58
 8020d0a:	bd70      	pop	{r4, r5, r6, pc}

08020d0c <__smakebuf_r>:
 8020d0c:	898b      	ldrh	r3, [r1, #12]
 8020d0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020d10:	079d      	lsls	r5, r3, #30
 8020d12:	4606      	mov	r6, r0
 8020d14:	460c      	mov	r4, r1
 8020d16:	d507      	bpl.n	8020d28 <__smakebuf_r+0x1c>
 8020d18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020d1c:	6023      	str	r3, [r4, #0]
 8020d1e:	6123      	str	r3, [r4, #16]
 8020d20:	2301      	movs	r3, #1
 8020d22:	6163      	str	r3, [r4, #20]
 8020d24:	b002      	add	sp, #8
 8020d26:	bd70      	pop	{r4, r5, r6, pc}
 8020d28:	ab01      	add	r3, sp, #4
 8020d2a:	466a      	mov	r2, sp
 8020d2c:	f7ff ffca 	bl	8020cc4 <__swhatbuf_r>
 8020d30:	9900      	ldr	r1, [sp, #0]
 8020d32:	4605      	mov	r5, r0
 8020d34:	4630      	mov	r0, r6
 8020d36:	f7fd ff79 	bl	801ec2c <_malloc_r>
 8020d3a:	b948      	cbnz	r0, 8020d50 <__smakebuf_r+0x44>
 8020d3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020d40:	059a      	lsls	r2, r3, #22
 8020d42:	d4ef      	bmi.n	8020d24 <__smakebuf_r+0x18>
 8020d44:	f023 0303 	bic.w	r3, r3, #3
 8020d48:	f043 0302 	orr.w	r3, r3, #2
 8020d4c:	81a3      	strh	r3, [r4, #12]
 8020d4e:	e7e3      	b.n	8020d18 <__smakebuf_r+0xc>
 8020d50:	4b0d      	ldr	r3, [pc, #52]	; (8020d88 <__smakebuf_r+0x7c>)
 8020d52:	62b3      	str	r3, [r6, #40]	; 0x28
 8020d54:	89a3      	ldrh	r3, [r4, #12]
 8020d56:	6020      	str	r0, [r4, #0]
 8020d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020d5c:	81a3      	strh	r3, [r4, #12]
 8020d5e:	9b00      	ldr	r3, [sp, #0]
 8020d60:	6163      	str	r3, [r4, #20]
 8020d62:	9b01      	ldr	r3, [sp, #4]
 8020d64:	6120      	str	r0, [r4, #16]
 8020d66:	b15b      	cbz	r3, 8020d80 <__smakebuf_r+0x74>
 8020d68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020d6c:	4630      	mov	r0, r6
 8020d6e:	f000 fdaf 	bl	80218d0 <_isatty_r>
 8020d72:	b128      	cbz	r0, 8020d80 <__smakebuf_r+0x74>
 8020d74:	89a3      	ldrh	r3, [r4, #12]
 8020d76:	f023 0303 	bic.w	r3, r3, #3
 8020d7a:	f043 0301 	orr.w	r3, r3, #1
 8020d7e:	81a3      	strh	r3, [r4, #12]
 8020d80:	89a0      	ldrh	r0, [r4, #12]
 8020d82:	4305      	orrs	r5, r0
 8020d84:	81a5      	strh	r5, [r4, #12]
 8020d86:	e7cd      	b.n	8020d24 <__smakebuf_r+0x18>
 8020d88:	0801e8d9 	.word	0x0801e8d9

08020d8c <__ascii_mbtowc>:
 8020d8c:	b082      	sub	sp, #8
 8020d8e:	b901      	cbnz	r1, 8020d92 <__ascii_mbtowc+0x6>
 8020d90:	a901      	add	r1, sp, #4
 8020d92:	b142      	cbz	r2, 8020da6 <__ascii_mbtowc+0x1a>
 8020d94:	b14b      	cbz	r3, 8020daa <__ascii_mbtowc+0x1e>
 8020d96:	7813      	ldrb	r3, [r2, #0]
 8020d98:	600b      	str	r3, [r1, #0]
 8020d9a:	7812      	ldrb	r2, [r2, #0]
 8020d9c:	1e10      	subs	r0, r2, #0
 8020d9e:	bf18      	it	ne
 8020da0:	2001      	movne	r0, #1
 8020da2:	b002      	add	sp, #8
 8020da4:	4770      	bx	lr
 8020da6:	4610      	mov	r0, r2
 8020da8:	e7fb      	b.n	8020da2 <__ascii_mbtowc+0x16>
 8020daa:	f06f 0001 	mvn.w	r0, #1
 8020dae:	e7f8      	b.n	8020da2 <__ascii_mbtowc+0x16>

08020db0 <__malloc_lock>:
 8020db0:	4801      	ldr	r0, [pc, #4]	; (8020db8 <__malloc_lock+0x8>)
 8020db2:	f7fd be9a 	b.w	801eaea <__retarget_lock_acquire_recursive>
 8020db6:	bf00      	nop
 8020db8:	2000c408 	.word	0x2000c408

08020dbc <__malloc_unlock>:
 8020dbc:	4801      	ldr	r0, [pc, #4]	; (8020dc4 <__malloc_unlock+0x8>)
 8020dbe:	f7fd be95 	b.w	801eaec <__retarget_lock_release_recursive>
 8020dc2:	bf00      	nop
 8020dc4:	2000c408 	.word	0x2000c408

08020dc8 <_Balloc>:
 8020dc8:	b570      	push	{r4, r5, r6, lr}
 8020dca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020dcc:	4604      	mov	r4, r0
 8020dce:	460d      	mov	r5, r1
 8020dd0:	b976      	cbnz	r6, 8020df0 <_Balloc+0x28>
 8020dd2:	2010      	movs	r0, #16
 8020dd4:	f7fd fe8c 	bl	801eaf0 <malloc>
 8020dd8:	4602      	mov	r2, r0
 8020dda:	6260      	str	r0, [r4, #36]	; 0x24
 8020ddc:	b920      	cbnz	r0, 8020de8 <_Balloc+0x20>
 8020dde:	4b18      	ldr	r3, [pc, #96]	; (8020e40 <_Balloc+0x78>)
 8020de0:	4818      	ldr	r0, [pc, #96]	; (8020e44 <_Balloc+0x7c>)
 8020de2:	2166      	movs	r1, #102	; 0x66
 8020de4:	f7fd fd32 	bl	801e84c <__assert_func>
 8020de8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020dec:	6006      	str	r6, [r0, #0]
 8020dee:	60c6      	str	r6, [r0, #12]
 8020df0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8020df2:	68f3      	ldr	r3, [r6, #12]
 8020df4:	b183      	cbz	r3, 8020e18 <_Balloc+0x50>
 8020df6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020df8:	68db      	ldr	r3, [r3, #12]
 8020dfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8020dfe:	b9b8      	cbnz	r0, 8020e30 <_Balloc+0x68>
 8020e00:	2101      	movs	r1, #1
 8020e02:	fa01 f605 	lsl.w	r6, r1, r5
 8020e06:	1d72      	adds	r2, r6, #5
 8020e08:	0092      	lsls	r2, r2, #2
 8020e0a:	4620      	mov	r0, r4
 8020e0c:	f000 fb5a 	bl	80214c4 <_calloc_r>
 8020e10:	b160      	cbz	r0, 8020e2c <_Balloc+0x64>
 8020e12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8020e16:	e00e      	b.n	8020e36 <_Balloc+0x6e>
 8020e18:	2221      	movs	r2, #33	; 0x21
 8020e1a:	2104      	movs	r1, #4
 8020e1c:	4620      	mov	r0, r4
 8020e1e:	f000 fb51 	bl	80214c4 <_calloc_r>
 8020e22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020e24:	60f0      	str	r0, [r6, #12]
 8020e26:	68db      	ldr	r3, [r3, #12]
 8020e28:	2b00      	cmp	r3, #0
 8020e2a:	d1e4      	bne.n	8020df6 <_Balloc+0x2e>
 8020e2c:	2000      	movs	r0, #0
 8020e2e:	bd70      	pop	{r4, r5, r6, pc}
 8020e30:	6802      	ldr	r2, [r0, #0]
 8020e32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8020e36:	2300      	movs	r3, #0
 8020e38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8020e3c:	e7f7      	b.n	8020e2e <_Balloc+0x66>
 8020e3e:	bf00      	nop
 8020e40:	08025ced 	.word	0x08025ced
 8020e44:	08025dea 	.word	0x08025dea

08020e48 <_Bfree>:
 8020e48:	b570      	push	{r4, r5, r6, lr}
 8020e4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020e4c:	4605      	mov	r5, r0
 8020e4e:	460c      	mov	r4, r1
 8020e50:	b976      	cbnz	r6, 8020e70 <_Bfree+0x28>
 8020e52:	2010      	movs	r0, #16
 8020e54:	f7fd fe4c 	bl	801eaf0 <malloc>
 8020e58:	4602      	mov	r2, r0
 8020e5a:	6268      	str	r0, [r5, #36]	; 0x24
 8020e5c:	b920      	cbnz	r0, 8020e68 <_Bfree+0x20>
 8020e5e:	4b09      	ldr	r3, [pc, #36]	; (8020e84 <_Bfree+0x3c>)
 8020e60:	4809      	ldr	r0, [pc, #36]	; (8020e88 <_Bfree+0x40>)
 8020e62:	218a      	movs	r1, #138	; 0x8a
 8020e64:	f7fd fcf2 	bl	801e84c <__assert_func>
 8020e68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020e6c:	6006      	str	r6, [r0, #0]
 8020e6e:	60c6      	str	r6, [r0, #12]
 8020e70:	b13c      	cbz	r4, 8020e82 <_Bfree+0x3a>
 8020e72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8020e74:	6862      	ldr	r2, [r4, #4]
 8020e76:	68db      	ldr	r3, [r3, #12]
 8020e78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020e7c:	6021      	str	r1, [r4, #0]
 8020e7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8020e82:	bd70      	pop	{r4, r5, r6, pc}
 8020e84:	08025ced 	.word	0x08025ced
 8020e88:	08025dea 	.word	0x08025dea

08020e8c <__multadd>:
 8020e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020e90:	690e      	ldr	r6, [r1, #16]
 8020e92:	4607      	mov	r7, r0
 8020e94:	4698      	mov	r8, r3
 8020e96:	460c      	mov	r4, r1
 8020e98:	f101 0014 	add.w	r0, r1, #20
 8020e9c:	2300      	movs	r3, #0
 8020e9e:	6805      	ldr	r5, [r0, #0]
 8020ea0:	b2a9      	uxth	r1, r5
 8020ea2:	fb02 8101 	mla	r1, r2, r1, r8
 8020ea6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8020eaa:	0c2d      	lsrs	r5, r5, #16
 8020eac:	fb02 c505 	mla	r5, r2, r5, ip
 8020eb0:	b289      	uxth	r1, r1
 8020eb2:	3301      	adds	r3, #1
 8020eb4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8020eb8:	429e      	cmp	r6, r3
 8020eba:	f840 1b04 	str.w	r1, [r0], #4
 8020ebe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8020ec2:	dcec      	bgt.n	8020e9e <__multadd+0x12>
 8020ec4:	f1b8 0f00 	cmp.w	r8, #0
 8020ec8:	d022      	beq.n	8020f10 <__multadd+0x84>
 8020eca:	68a3      	ldr	r3, [r4, #8]
 8020ecc:	42b3      	cmp	r3, r6
 8020ece:	dc19      	bgt.n	8020f04 <__multadd+0x78>
 8020ed0:	6861      	ldr	r1, [r4, #4]
 8020ed2:	4638      	mov	r0, r7
 8020ed4:	3101      	adds	r1, #1
 8020ed6:	f7ff ff77 	bl	8020dc8 <_Balloc>
 8020eda:	4605      	mov	r5, r0
 8020edc:	b928      	cbnz	r0, 8020eea <__multadd+0x5e>
 8020ede:	4602      	mov	r2, r0
 8020ee0:	4b0d      	ldr	r3, [pc, #52]	; (8020f18 <__multadd+0x8c>)
 8020ee2:	480e      	ldr	r0, [pc, #56]	; (8020f1c <__multadd+0x90>)
 8020ee4:	21b5      	movs	r1, #181	; 0xb5
 8020ee6:	f7fd fcb1 	bl	801e84c <__assert_func>
 8020eea:	6922      	ldr	r2, [r4, #16]
 8020eec:	3202      	adds	r2, #2
 8020eee:	f104 010c 	add.w	r1, r4, #12
 8020ef2:	0092      	lsls	r2, r2, #2
 8020ef4:	300c      	adds	r0, #12
 8020ef6:	f7fd fe19 	bl	801eb2c <memcpy>
 8020efa:	4621      	mov	r1, r4
 8020efc:	4638      	mov	r0, r7
 8020efe:	f7ff ffa3 	bl	8020e48 <_Bfree>
 8020f02:	462c      	mov	r4, r5
 8020f04:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8020f08:	3601      	adds	r6, #1
 8020f0a:	f8c3 8014 	str.w	r8, [r3, #20]
 8020f0e:	6126      	str	r6, [r4, #16]
 8020f10:	4620      	mov	r0, r4
 8020f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020f16:	bf00      	nop
 8020f18:	08025dcf 	.word	0x08025dcf
 8020f1c:	08025dea 	.word	0x08025dea

08020f20 <__hi0bits>:
 8020f20:	0c03      	lsrs	r3, r0, #16
 8020f22:	041b      	lsls	r3, r3, #16
 8020f24:	b9d3      	cbnz	r3, 8020f5c <__hi0bits+0x3c>
 8020f26:	0400      	lsls	r0, r0, #16
 8020f28:	2310      	movs	r3, #16
 8020f2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8020f2e:	bf04      	itt	eq
 8020f30:	0200      	lsleq	r0, r0, #8
 8020f32:	3308      	addeq	r3, #8
 8020f34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8020f38:	bf04      	itt	eq
 8020f3a:	0100      	lsleq	r0, r0, #4
 8020f3c:	3304      	addeq	r3, #4
 8020f3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8020f42:	bf04      	itt	eq
 8020f44:	0080      	lsleq	r0, r0, #2
 8020f46:	3302      	addeq	r3, #2
 8020f48:	2800      	cmp	r0, #0
 8020f4a:	db05      	blt.n	8020f58 <__hi0bits+0x38>
 8020f4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8020f50:	f103 0301 	add.w	r3, r3, #1
 8020f54:	bf08      	it	eq
 8020f56:	2320      	moveq	r3, #32
 8020f58:	4618      	mov	r0, r3
 8020f5a:	4770      	bx	lr
 8020f5c:	2300      	movs	r3, #0
 8020f5e:	e7e4      	b.n	8020f2a <__hi0bits+0xa>

08020f60 <__lo0bits>:
 8020f60:	6803      	ldr	r3, [r0, #0]
 8020f62:	f013 0207 	ands.w	r2, r3, #7
 8020f66:	4601      	mov	r1, r0
 8020f68:	d00b      	beq.n	8020f82 <__lo0bits+0x22>
 8020f6a:	07da      	lsls	r2, r3, #31
 8020f6c:	d424      	bmi.n	8020fb8 <__lo0bits+0x58>
 8020f6e:	0798      	lsls	r0, r3, #30
 8020f70:	bf49      	itett	mi
 8020f72:	085b      	lsrmi	r3, r3, #1
 8020f74:	089b      	lsrpl	r3, r3, #2
 8020f76:	2001      	movmi	r0, #1
 8020f78:	600b      	strmi	r3, [r1, #0]
 8020f7a:	bf5c      	itt	pl
 8020f7c:	600b      	strpl	r3, [r1, #0]
 8020f7e:	2002      	movpl	r0, #2
 8020f80:	4770      	bx	lr
 8020f82:	b298      	uxth	r0, r3
 8020f84:	b9b0      	cbnz	r0, 8020fb4 <__lo0bits+0x54>
 8020f86:	0c1b      	lsrs	r3, r3, #16
 8020f88:	2010      	movs	r0, #16
 8020f8a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8020f8e:	bf04      	itt	eq
 8020f90:	0a1b      	lsreq	r3, r3, #8
 8020f92:	3008      	addeq	r0, #8
 8020f94:	071a      	lsls	r2, r3, #28
 8020f96:	bf04      	itt	eq
 8020f98:	091b      	lsreq	r3, r3, #4
 8020f9a:	3004      	addeq	r0, #4
 8020f9c:	079a      	lsls	r2, r3, #30
 8020f9e:	bf04      	itt	eq
 8020fa0:	089b      	lsreq	r3, r3, #2
 8020fa2:	3002      	addeq	r0, #2
 8020fa4:	07da      	lsls	r2, r3, #31
 8020fa6:	d403      	bmi.n	8020fb0 <__lo0bits+0x50>
 8020fa8:	085b      	lsrs	r3, r3, #1
 8020faa:	f100 0001 	add.w	r0, r0, #1
 8020fae:	d005      	beq.n	8020fbc <__lo0bits+0x5c>
 8020fb0:	600b      	str	r3, [r1, #0]
 8020fb2:	4770      	bx	lr
 8020fb4:	4610      	mov	r0, r2
 8020fb6:	e7e8      	b.n	8020f8a <__lo0bits+0x2a>
 8020fb8:	2000      	movs	r0, #0
 8020fba:	4770      	bx	lr
 8020fbc:	2020      	movs	r0, #32
 8020fbe:	4770      	bx	lr

08020fc0 <__i2b>:
 8020fc0:	b510      	push	{r4, lr}
 8020fc2:	460c      	mov	r4, r1
 8020fc4:	2101      	movs	r1, #1
 8020fc6:	f7ff feff 	bl	8020dc8 <_Balloc>
 8020fca:	4602      	mov	r2, r0
 8020fcc:	b928      	cbnz	r0, 8020fda <__i2b+0x1a>
 8020fce:	4b05      	ldr	r3, [pc, #20]	; (8020fe4 <__i2b+0x24>)
 8020fd0:	4805      	ldr	r0, [pc, #20]	; (8020fe8 <__i2b+0x28>)
 8020fd2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8020fd6:	f7fd fc39 	bl	801e84c <__assert_func>
 8020fda:	2301      	movs	r3, #1
 8020fdc:	6144      	str	r4, [r0, #20]
 8020fde:	6103      	str	r3, [r0, #16]
 8020fe0:	bd10      	pop	{r4, pc}
 8020fe2:	bf00      	nop
 8020fe4:	08025dcf 	.word	0x08025dcf
 8020fe8:	08025dea 	.word	0x08025dea

08020fec <__multiply>:
 8020fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ff0:	4614      	mov	r4, r2
 8020ff2:	690a      	ldr	r2, [r1, #16]
 8020ff4:	6923      	ldr	r3, [r4, #16]
 8020ff6:	429a      	cmp	r2, r3
 8020ff8:	bfb8      	it	lt
 8020ffa:	460b      	movlt	r3, r1
 8020ffc:	460d      	mov	r5, r1
 8020ffe:	bfbc      	itt	lt
 8021000:	4625      	movlt	r5, r4
 8021002:	461c      	movlt	r4, r3
 8021004:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8021008:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802100c:	68ab      	ldr	r3, [r5, #8]
 802100e:	6869      	ldr	r1, [r5, #4]
 8021010:	eb0a 0709 	add.w	r7, sl, r9
 8021014:	42bb      	cmp	r3, r7
 8021016:	b085      	sub	sp, #20
 8021018:	bfb8      	it	lt
 802101a:	3101      	addlt	r1, #1
 802101c:	f7ff fed4 	bl	8020dc8 <_Balloc>
 8021020:	b930      	cbnz	r0, 8021030 <__multiply+0x44>
 8021022:	4602      	mov	r2, r0
 8021024:	4b42      	ldr	r3, [pc, #264]	; (8021130 <__multiply+0x144>)
 8021026:	4843      	ldr	r0, [pc, #268]	; (8021134 <__multiply+0x148>)
 8021028:	f240 115d 	movw	r1, #349	; 0x15d
 802102c:	f7fd fc0e 	bl	801e84c <__assert_func>
 8021030:	f100 0614 	add.w	r6, r0, #20
 8021034:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8021038:	4633      	mov	r3, r6
 802103a:	2200      	movs	r2, #0
 802103c:	4543      	cmp	r3, r8
 802103e:	d31e      	bcc.n	802107e <__multiply+0x92>
 8021040:	f105 0c14 	add.w	ip, r5, #20
 8021044:	f104 0314 	add.w	r3, r4, #20
 8021048:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 802104c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8021050:	9202      	str	r2, [sp, #8]
 8021052:	ebac 0205 	sub.w	r2, ip, r5
 8021056:	3a15      	subs	r2, #21
 8021058:	f022 0203 	bic.w	r2, r2, #3
 802105c:	3204      	adds	r2, #4
 802105e:	f105 0115 	add.w	r1, r5, #21
 8021062:	458c      	cmp	ip, r1
 8021064:	bf38      	it	cc
 8021066:	2204      	movcc	r2, #4
 8021068:	9201      	str	r2, [sp, #4]
 802106a:	9a02      	ldr	r2, [sp, #8]
 802106c:	9303      	str	r3, [sp, #12]
 802106e:	429a      	cmp	r2, r3
 8021070:	d808      	bhi.n	8021084 <__multiply+0x98>
 8021072:	2f00      	cmp	r7, #0
 8021074:	dc55      	bgt.n	8021122 <__multiply+0x136>
 8021076:	6107      	str	r7, [r0, #16]
 8021078:	b005      	add	sp, #20
 802107a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802107e:	f843 2b04 	str.w	r2, [r3], #4
 8021082:	e7db      	b.n	802103c <__multiply+0x50>
 8021084:	f8b3 a000 	ldrh.w	sl, [r3]
 8021088:	f1ba 0f00 	cmp.w	sl, #0
 802108c:	d020      	beq.n	80210d0 <__multiply+0xe4>
 802108e:	f105 0e14 	add.w	lr, r5, #20
 8021092:	46b1      	mov	r9, r6
 8021094:	2200      	movs	r2, #0
 8021096:	f85e 4b04 	ldr.w	r4, [lr], #4
 802109a:	f8d9 b000 	ldr.w	fp, [r9]
 802109e:	b2a1      	uxth	r1, r4
 80210a0:	fa1f fb8b 	uxth.w	fp, fp
 80210a4:	fb0a b101 	mla	r1, sl, r1, fp
 80210a8:	4411      	add	r1, r2
 80210aa:	f8d9 2000 	ldr.w	r2, [r9]
 80210ae:	0c24      	lsrs	r4, r4, #16
 80210b0:	0c12      	lsrs	r2, r2, #16
 80210b2:	fb0a 2404 	mla	r4, sl, r4, r2
 80210b6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80210ba:	b289      	uxth	r1, r1
 80210bc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80210c0:	45f4      	cmp	ip, lr
 80210c2:	f849 1b04 	str.w	r1, [r9], #4
 80210c6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80210ca:	d8e4      	bhi.n	8021096 <__multiply+0xaa>
 80210cc:	9901      	ldr	r1, [sp, #4]
 80210ce:	5072      	str	r2, [r6, r1]
 80210d0:	9a03      	ldr	r2, [sp, #12]
 80210d2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80210d6:	3304      	adds	r3, #4
 80210d8:	f1b9 0f00 	cmp.w	r9, #0
 80210dc:	d01f      	beq.n	802111e <__multiply+0x132>
 80210de:	6834      	ldr	r4, [r6, #0]
 80210e0:	f105 0114 	add.w	r1, r5, #20
 80210e4:	46b6      	mov	lr, r6
 80210e6:	f04f 0a00 	mov.w	sl, #0
 80210ea:	880a      	ldrh	r2, [r1, #0]
 80210ec:	f8be b002 	ldrh.w	fp, [lr, #2]
 80210f0:	fb09 b202 	mla	r2, r9, r2, fp
 80210f4:	4492      	add	sl, r2
 80210f6:	b2a4      	uxth	r4, r4
 80210f8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80210fc:	f84e 4b04 	str.w	r4, [lr], #4
 8021100:	f851 4b04 	ldr.w	r4, [r1], #4
 8021104:	f8be 2000 	ldrh.w	r2, [lr]
 8021108:	0c24      	lsrs	r4, r4, #16
 802110a:	fb09 2404 	mla	r4, r9, r4, r2
 802110e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8021112:	458c      	cmp	ip, r1
 8021114:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8021118:	d8e7      	bhi.n	80210ea <__multiply+0xfe>
 802111a:	9a01      	ldr	r2, [sp, #4]
 802111c:	50b4      	str	r4, [r6, r2]
 802111e:	3604      	adds	r6, #4
 8021120:	e7a3      	b.n	802106a <__multiply+0x7e>
 8021122:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8021126:	2b00      	cmp	r3, #0
 8021128:	d1a5      	bne.n	8021076 <__multiply+0x8a>
 802112a:	3f01      	subs	r7, #1
 802112c:	e7a1      	b.n	8021072 <__multiply+0x86>
 802112e:	bf00      	nop
 8021130:	08025dcf 	.word	0x08025dcf
 8021134:	08025dea 	.word	0x08025dea

08021138 <__pow5mult>:
 8021138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802113c:	4615      	mov	r5, r2
 802113e:	f012 0203 	ands.w	r2, r2, #3
 8021142:	4606      	mov	r6, r0
 8021144:	460f      	mov	r7, r1
 8021146:	d007      	beq.n	8021158 <__pow5mult+0x20>
 8021148:	4c25      	ldr	r4, [pc, #148]	; (80211e0 <__pow5mult+0xa8>)
 802114a:	3a01      	subs	r2, #1
 802114c:	2300      	movs	r3, #0
 802114e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021152:	f7ff fe9b 	bl	8020e8c <__multadd>
 8021156:	4607      	mov	r7, r0
 8021158:	10ad      	asrs	r5, r5, #2
 802115a:	d03d      	beq.n	80211d8 <__pow5mult+0xa0>
 802115c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802115e:	b97c      	cbnz	r4, 8021180 <__pow5mult+0x48>
 8021160:	2010      	movs	r0, #16
 8021162:	f7fd fcc5 	bl	801eaf0 <malloc>
 8021166:	4602      	mov	r2, r0
 8021168:	6270      	str	r0, [r6, #36]	; 0x24
 802116a:	b928      	cbnz	r0, 8021178 <__pow5mult+0x40>
 802116c:	4b1d      	ldr	r3, [pc, #116]	; (80211e4 <__pow5mult+0xac>)
 802116e:	481e      	ldr	r0, [pc, #120]	; (80211e8 <__pow5mult+0xb0>)
 8021170:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8021174:	f7fd fb6a 	bl	801e84c <__assert_func>
 8021178:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802117c:	6004      	str	r4, [r0, #0]
 802117e:	60c4      	str	r4, [r0, #12]
 8021180:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8021184:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8021188:	b94c      	cbnz	r4, 802119e <__pow5mult+0x66>
 802118a:	f240 2171 	movw	r1, #625	; 0x271
 802118e:	4630      	mov	r0, r6
 8021190:	f7ff ff16 	bl	8020fc0 <__i2b>
 8021194:	2300      	movs	r3, #0
 8021196:	f8c8 0008 	str.w	r0, [r8, #8]
 802119a:	4604      	mov	r4, r0
 802119c:	6003      	str	r3, [r0, #0]
 802119e:	f04f 0900 	mov.w	r9, #0
 80211a2:	07eb      	lsls	r3, r5, #31
 80211a4:	d50a      	bpl.n	80211bc <__pow5mult+0x84>
 80211a6:	4639      	mov	r1, r7
 80211a8:	4622      	mov	r2, r4
 80211aa:	4630      	mov	r0, r6
 80211ac:	f7ff ff1e 	bl	8020fec <__multiply>
 80211b0:	4639      	mov	r1, r7
 80211b2:	4680      	mov	r8, r0
 80211b4:	4630      	mov	r0, r6
 80211b6:	f7ff fe47 	bl	8020e48 <_Bfree>
 80211ba:	4647      	mov	r7, r8
 80211bc:	106d      	asrs	r5, r5, #1
 80211be:	d00b      	beq.n	80211d8 <__pow5mult+0xa0>
 80211c0:	6820      	ldr	r0, [r4, #0]
 80211c2:	b938      	cbnz	r0, 80211d4 <__pow5mult+0x9c>
 80211c4:	4622      	mov	r2, r4
 80211c6:	4621      	mov	r1, r4
 80211c8:	4630      	mov	r0, r6
 80211ca:	f7ff ff0f 	bl	8020fec <__multiply>
 80211ce:	6020      	str	r0, [r4, #0]
 80211d0:	f8c0 9000 	str.w	r9, [r0]
 80211d4:	4604      	mov	r4, r0
 80211d6:	e7e4      	b.n	80211a2 <__pow5mult+0x6a>
 80211d8:	4638      	mov	r0, r7
 80211da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80211de:	bf00      	nop
 80211e0:	08025f40 	.word	0x08025f40
 80211e4:	08025ced 	.word	0x08025ced
 80211e8:	08025dea 	.word	0x08025dea

080211ec <__lshift>:
 80211ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80211f0:	460c      	mov	r4, r1
 80211f2:	6849      	ldr	r1, [r1, #4]
 80211f4:	6923      	ldr	r3, [r4, #16]
 80211f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80211fa:	68a3      	ldr	r3, [r4, #8]
 80211fc:	4607      	mov	r7, r0
 80211fe:	4691      	mov	r9, r2
 8021200:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8021204:	f108 0601 	add.w	r6, r8, #1
 8021208:	42b3      	cmp	r3, r6
 802120a:	db0b      	blt.n	8021224 <__lshift+0x38>
 802120c:	4638      	mov	r0, r7
 802120e:	f7ff fddb 	bl	8020dc8 <_Balloc>
 8021212:	4605      	mov	r5, r0
 8021214:	b948      	cbnz	r0, 802122a <__lshift+0x3e>
 8021216:	4602      	mov	r2, r0
 8021218:	4b28      	ldr	r3, [pc, #160]	; (80212bc <__lshift+0xd0>)
 802121a:	4829      	ldr	r0, [pc, #164]	; (80212c0 <__lshift+0xd4>)
 802121c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8021220:	f7fd fb14 	bl	801e84c <__assert_func>
 8021224:	3101      	adds	r1, #1
 8021226:	005b      	lsls	r3, r3, #1
 8021228:	e7ee      	b.n	8021208 <__lshift+0x1c>
 802122a:	2300      	movs	r3, #0
 802122c:	f100 0114 	add.w	r1, r0, #20
 8021230:	f100 0210 	add.w	r2, r0, #16
 8021234:	4618      	mov	r0, r3
 8021236:	4553      	cmp	r3, sl
 8021238:	db33      	blt.n	80212a2 <__lshift+0xb6>
 802123a:	6920      	ldr	r0, [r4, #16]
 802123c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8021240:	f104 0314 	add.w	r3, r4, #20
 8021244:	f019 091f 	ands.w	r9, r9, #31
 8021248:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802124c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8021250:	d02b      	beq.n	80212aa <__lshift+0xbe>
 8021252:	f1c9 0e20 	rsb	lr, r9, #32
 8021256:	468a      	mov	sl, r1
 8021258:	2200      	movs	r2, #0
 802125a:	6818      	ldr	r0, [r3, #0]
 802125c:	fa00 f009 	lsl.w	r0, r0, r9
 8021260:	4302      	orrs	r2, r0
 8021262:	f84a 2b04 	str.w	r2, [sl], #4
 8021266:	f853 2b04 	ldr.w	r2, [r3], #4
 802126a:	459c      	cmp	ip, r3
 802126c:	fa22 f20e 	lsr.w	r2, r2, lr
 8021270:	d8f3      	bhi.n	802125a <__lshift+0x6e>
 8021272:	ebac 0304 	sub.w	r3, ip, r4
 8021276:	3b15      	subs	r3, #21
 8021278:	f023 0303 	bic.w	r3, r3, #3
 802127c:	3304      	adds	r3, #4
 802127e:	f104 0015 	add.w	r0, r4, #21
 8021282:	4584      	cmp	ip, r0
 8021284:	bf38      	it	cc
 8021286:	2304      	movcc	r3, #4
 8021288:	50ca      	str	r2, [r1, r3]
 802128a:	b10a      	cbz	r2, 8021290 <__lshift+0xa4>
 802128c:	f108 0602 	add.w	r6, r8, #2
 8021290:	3e01      	subs	r6, #1
 8021292:	4638      	mov	r0, r7
 8021294:	612e      	str	r6, [r5, #16]
 8021296:	4621      	mov	r1, r4
 8021298:	f7ff fdd6 	bl	8020e48 <_Bfree>
 802129c:	4628      	mov	r0, r5
 802129e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80212a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80212a6:	3301      	adds	r3, #1
 80212a8:	e7c5      	b.n	8021236 <__lshift+0x4a>
 80212aa:	3904      	subs	r1, #4
 80212ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80212b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80212b4:	459c      	cmp	ip, r3
 80212b6:	d8f9      	bhi.n	80212ac <__lshift+0xc0>
 80212b8:	e7ea      	b.n	8021290 <__lshift+0xa4>
 80212ba:	bf00      	nop
 80212bc:	08025dcf 	.word	0x08025dcf
 80212c0:	08025dea 	.word	0x08025dea

080212c4 <__mcmp>:
 80212c4:	b530      	push	{r4, r5, lr}
 80212c6:	6902      	ldr	r2, [r0, #16]
 80212c8:	690c      	ldr	r4, [r1, #16]
 80212ca:	1b12      	subs	r2, r2, r4
 80212cc:	d10e      	bne.n	80212ec <__mcmp+0x28>
 80212ce:	f100 0314 	add.w	r3, r0, #20
 80212d2:	3114      	adds	r1, #20
 80212d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80212d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80212dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80212e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80212e4:	42a5      	cmp	r5, r4
 80212e6:	d003      	beq.n	80212f0 <__mcmp+0x2c>
 80212e8:	d305      	bcc.n	80212f6 <__mcmp+0x32>
 80212ea:	2201      	movs	r2, #1
 80212ec:	4610      	mov	r0, r2
 80212ee:	bd30      	pop	{r4, r5, pc}
 80212f0:	4283      	cmp	r3, r0
 80212f2:	d3f3      	bcc.n	80212dc <__mcmp+0x18>
 80212f4:	e7fa      	b.n	80212ec <__mcmp+0x28>
 80212f6:	f04f 32ff 	mov.w	r2, #4294967295
 80212fa:	e7f7      	b.n	80212ec <__mcmp+0x28>

080212fc <__mdiff>:
 80212fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021300:	460c      	mov	r4, r1
 8021302:	4606      	mov	r6, r0
 8021304:	4611      	mov	r1, r2
 8021306:	4620      	mov	r0, r4
 8021308:	4617      	mov	r7, r2
 802130a:	f7ff ffdb 	bl	80212c4 <__mcmp>
 802130e:	1e05      	subs	r5, r0, #0
 8021310:	d110      	bne.n	8021334 <__mdiff+0x38>
 8021312:	4629      	mov	r1, r5
 8021314:	4630      	mov	r0, r6
 8021316:	f7ff fd57 	bl	8020dc8 <_Balloc>
 802131a:	b930      	cbnz	r0, 802132a <__mdiff+0x2e>
 802131c:	4b39      	ldr	r3, [pc, #228]	; (8021404 <__mdiff+0x108>)
 802131e:	4602      	mov	r2, r0
 8021320:	f240 2132 	movw	r1, #562	; 0x232
 8021324:	4838      	ldr	r0, [pc, #224]	; (8021408 <__mdiff+0x10c>)
 8021326:	f7fd fa91 	bl	801e84c <__assert_func>
 802132a:	2301      	movs	r3, #1
 802132c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8021330:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021334:	bfa4      	itt	ge
 8021336:	463b      	movge	r3, r7
 8021338:	4627      	movge	r7, r4
 802133a:	4630      	mov	r0, r6
 802133c:	6879      	ldr	r1, [r7, #4]
 802133e:	bfa6      	itte	ge
 8021340:	461c      	movge	r4, r3
 8021342:	2500      	movge	r5, #0
 8021344:	2501      	movlt	r5, #1
 8021346:	f7ff fd3f 	bl	8020dc8 <_Balloc>
 802134a:	b920      	cbnz	r0, 8021356 <__mdiff+0x5a>
 802134c:	4b2d      	ldr	r3, [pc, #180]	; (8021404 <__mdiff+0x108>)
 802134e:	4602      	mov	r2, r0
 8021350:	f44f 7110 	mov.w	r1, #576	; 0x240
 8021354:	e7e6      	b.n	8021324 <__mdiff+0x28>
 8021356:	693e      	ldr	r6, [r7, #16]
 8021358:	60c5      	str	r5, [r0, #12]
 802135a:	6925      	ldr	r5, [r4, #16]
 802135c:	f107 0114 	add.w	r1, r7, #20
 8021360:	f104 0914 	add.w	r9, r4, #20
 8021364:	f100 0e14 	add.w	lr, r0, #20
 8021368:	f107 0210 	add.w	r2, r7, #16
 802136c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8021370:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8021374:	46f2      	mov	sl, lr
 8021376:	2700      	movs	r7, #0
 8021378:	f859 3b04 	ldr.w	r3, [r9], #4
 802137c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8021380:	fa1f f883 	uxth.w	r8, r3
 8021384:	fa17 f78b 	uxtah	r7, r7, fp
 8021388:	0c1b      	lsrs	r3, r3, #16
 802138a:	eba7 0808 	sub.w	r8, r7, r8
 802138e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8021392:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8021396:	fa1f f888 	uxth.w	r8, r8
 802139a:	141f      	asrs	r7, r3, #16
 802139c:	454d      	cmp	r5, r9
 802139e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80213a2:	f84a 3b04 	str.w	r3, [sl], #4
 80213a6:	d8e7      	bhi.n	8021378 <__mdiff+0x7c>
 80213a8:	1b2b      	subs	r3, r5, r4
 80213aa:	3b15      	subs	r3, #21
 80213ac:	f023 0303 	bic.w	r3, r3, #3
 80213b0:	3304      	adds	r3, #4
 80213b2:	3415      	adds	r4, #21
 80213b4:	42a5      	cmp	r5, r4
 80213b6:	bf38      	it	cc
 80213b8:	2304      	movcc	r3, #4
 80213ba:	4419      	add	r1, r3
 80213bc:	4473      	add	r3, lr
 80213be:	469e      	mov	lr, r3
 80213c0:	460d      	mov	r5, r1
 80213c2:	4565      	cmp	r5, ip
 80213c4:	d30e      	bcc.n	80213e4 <__mdiff+0xe8>
 80213c6:	f10c 0203 	add.w	r2, ip, #3
 80213ca:	1a52      	subs	r2, r2, r1
 80213cc:	f022 0203 	bic.w	r2, r2, #3
 80213d0:	3903      	subs	r1, #3
 80213d2:	458c      	cmp	ip, r1
 80213d4:	bf38      	it	cc
 80213d6:	2200      	movcc	r2, #0
 80213d8:	441a      	add	r2, r3
 80213da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80213de:	b17b      	cbz	r3, 8021400 <__mdiff+0x104>
 80213e0:	6106      	str	r6, [r0, #16]
 80213e2:	e7a5      	b.n	8021330 <__mdiff+0x34>
 80213e4:	f855 8b04 	ldr.w	r8, [r5], #4
 80213e8:	fa17 f488 	uxtah	r4, r7, r8
 80213ec:	1422      	asrs	r2, r4, #16
 80213ee:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80213f2:	b2a4      	uxth	r4, r4
 80213f4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80213f8:	f84e 4b04 	str.w	r4, [lr], #4
 80213fc:	1417      	asrs	r7, r2, #16
 80213fe:	e7e0      	b.n	80213c2 <__mdiff+0xc6>
 8021400:	3e01      	subs	r6, #1
 8021402:	e7ea      	b.n	80213da <__mdiff+0xde>
 8021404:	08025dcf 	.word	0x08025dcf
 8021408:	08025dea 	.word	0x08025dea

0802140c <__d2b>:
 802140c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021410:	4689      	mov	r9, r1
 8021412:	2101      	movs	r1, #1
 8021414:	ec57 6b10 	vmov	r6, r7, d0
 8021418:	4690      	mov	r8, r2
 802141a:	f7ff fcd5 	bl	8020dc8 <_Balloc>
 802141e:	4604      	mov	r4, r0
 8021420:	b930      	cbnz	r0, 8021430 <__d2b+0x24>
 8021422:	4602      	mov	r2, r0
 8021424:	4b25      	ldr	r3, [pc, #148]	; (80214bc <__d2b+0xb0>)
 8021426:	4826      	ldr	r0, [pc, #152]	; (80214c0 <__d2b+0xb4>)
 8021428:	f240 310a 	movw	r1, #778	; 0x30a
 802142c:	f7fd fa0e 	bl	801e84c <__assert_func>
 8021430:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8021434:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8021438:	bb35      	cbnz	r5, 8021488 <__d2b+0x7c>
 802143a:	2e00      	cmp	r6, #0
 802143c:	9301      	str	r3, [sp, #4]
 802143e:	d028      	beq.n	8021492 <__d2b+0x86>
 8021440:	4668      	mov	r0, sp
 8021442:	9600      	str	r6, [sp, #0]
 8021444:	f7ff fd8c 	bl	8020f60 <__lo0bits>
 8021448:	9900      	ldr	r1, [sp, #0]
 802144a:	b300      	cbz	r0, 802148e <__d2b+0x82>
 802144c:	9a01      	ldr	r2, [sp, #4]
 802144e:	f1c0 0320 	rsb	r3, r0, #32
 8021452:	fa02 f303 	lsl.w	r3, r2, r3
 8021456:	430b      	orrs	r3, r1
 8021458:	40c2      	lsrs	r2, r0
 802145a:	6163      	str	r3, [r4, #20]
 802145c:	9201      	str	r2, [sp, #4]
 802145e:	9b01      	ldr	r3, [sp, #4]
 8021460:	61a3      	str	r3, [r4, #24]
 8021462:	2b00      	cmp	r3, #0
 8021464:	bf14      	ite	ne
 8021466:	2202      	movne	r2, #2
 8021468:	2201      	moveq	r2, #1
 802146a:	6122      	str	r2, [r4, #16]
 802146c:	b1d5      	cbz	r5, 80214a4 <__d2b+0x98>
 802146e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8021472:	4405      	add	r5, r0
 8021474:	f8c9 5000 	str.w	r5, [r9]
 8021478:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802147c:	f8c8 0000 	str.w	r0, [r8]
 8021480:	4620      	mov	r0, r4
 8021482:	b003      	add	sp, #12
 8021484:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021488:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802148c:	e7d5      	b.n	802143a <__d2b+0x2e>
 802148e:	6161      	str	r1, [r4, #20]
 8021490:	e7e5      	b.n	802145e <__d2b+0x52>
 8021492:	a801      	add	r0, sp, #4
 8021494:	f7ff fd64 	bl	8020f60 <__lo0bits>
 8021498:	9b01      	ldr	r3, [sp, #4]
 802149a:	6163      	str	r3, [r4, #20]
 802149c:	2201      	movs	r2, #1
 802149e:	6122      	str	r2, [r4, #16]
 80214a0:	3020      	adds	r0, #32
 80214a2:	e7e3      	b.n	802146c <__d2b+0x60>
 80214a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80214a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80214ac:	f8c9 0000 	str.w	r0, [r9]
 80214b0:	6918      	ldr	r0, [r3, #16]
 80214b2:	f7ff fd35 	bl	8020f20 <__hi0bits>
 80214b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80214ba:	e7df      	b.n	802147c <__d2b+0x70>
 80214bc:	08025dcf 	.word	0x08025dcf
 80214c0:	08025dea 	.word	0x08025dea

080214c4 <_calloc_r>:
 80214c4:	b513      	push	{r0, r1, r4, lr}
 80214c6:	434a      	muls	r2, r1
 80214c8:	4611      	mov	r1, r2
 80214ca:	9201      	str	r2, [sp, #4]
 80214cc:	f7fd fbae 	bl	801ec2c <_malloc_r>
 80214d0:	4604      	mov	r4, r0
 80214d2:	b118      	cbz	r0, 80214dc <_calloc_r+0x18>
 80214d4:	9a01      	ldr	r2, [sp, #4]
 80214d6:	2100      	movs	r1, #0
 80214d8:	f7fd fb50 	bl	801eb7c <memset>
 80214dc:	4620      	mov	r0, r4
 80214de:	b002      	add	sp, #8
 80214e0:	bd10      	pop	{r4, pc}

080214e2 <_realloc_r>:
 80214e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80214e4:	4607      	mov	r7, r0
 80214e6:	4614      	mov	r4, r2
 80214e8:	460e      	mov	r6, r1
 80214ea:	b921      	cbnz	r1, 80214f6 <_realloc_r+0x14>
 80214ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80214f0:	4611      	mov	r1, r2
 80214f2:	f7fd bb9b 	b.w	801ec2c <_malloc_r>
 80214f6:	b922      	cbnz	r2, 8021502 <_realloc_r+0x20>
 80214f8:	f7fd fb48 	bl	801eb8c <_free_r>
 80214fc:	4625      	mov	r5, r4
 80214fe:	4628      	mov	r0, r5
 8021500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021502:	f000 f9f5 	bl	80218f0 <_malloc_usable_size_r>
 8021506:	42a0      	cmp	r0, r4
 8021508:	d20f      	bcs.n	802152a <_realloc_r+0x48>
 802150a:	4621      	mov	r1, r4
 802150c:	4638      	mov	r0, r7
 802150e:	f7fd fb8d 	bl	801ec2c <_malloc_r>
 8021512:	4605      	mov	r5, r0
 8021514:	2800      	cmp	r0, #0
 8021516:	d0f2      	beq.n	80214fe <_realloc_r+0x1c>
 8021518:	4631      	mov	r1, r6
 802151a:	4622      	mov	r2, r4
 802151c:	f7fd fb06 	bl	801eb2c <memcpy>
 8021520:	4631      	mov	r1, r6
 8021522:	4638      	mov	r0, r7
 8021524:	f7fd fb32 	bl	801eb8c <_free_r>
 8021528:	e7e9      	b.n	80214fe <_realloc_r+0x1c>
 802152a:	4635      	mov	r5, r6
 802152c:	e7e7      	b.n	80214fe <_realloc_r+0x1c>

0802152e <__ssputs_r>:
 802152e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021532:	688e      	ldr	r6, [r1, #8]
 8021534:	429e      	cmp	r6, r3
 8021536:	4682      	mov	sl, r0
 8021538:	460c      	mov	r4, r1
 802153a:	4690      	mov	r8, r2
 802153c:	461f      	mov	r7, r3
 802153e:	d838      	bhi.n	80215b2 <__ssputs_r+0x84>
 8021540:	898a      	ldrh	r2, [r1, #12]
 8021542:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8021546:	d032      	beq.n	80215ae <__ssputs_r+0x80>
 8021548:	6825      	ldr	r5, [r4, #0]
 802154a:	6909      	ldr	r1, [r1, #16]
 802154c:	eba5 0901 	sub.w	r9, r5, r1
 8021550:	6965      	ldr	r5, [r4, #20]
 8021552:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021556:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802155a:	3301      	adds	r3, #1
 802155c:	444b      	add	r3, r9
 802155e:	106d      	asrs	r5, r5, #1
 8021560:	429d      	cmp	r5, r3
 8021562:	bf38      	it	cc
 8021564:	461d      	movcc	r5, r3
 8021566:	0553      	lsls	r3, r2, #21
 8021568:	d531      	bpl.n	80215ce <__ssputs_r+0xa0>
 802156a:	4629      	mov	r1, r5
 802156c:	f7fd fb5e 	bl	801ec2c <_malloc_r>
 8021570:	4606      	mov	r6, r0
 8021572:	b950      	cbnz	r0, 802158a <__ssputs_r+0x5c>
 8021574:	230c      	movs	r3, #12
 8021576:	f8ca 3000 	str.w	r3, [sl]
 802157a:	89a3      	ldrh	r3, [r4, #12]
 802157c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021580:	81a3      	strh	r3, [r4, #12]
 8021582:	f04f 30ff 	mov.w	r0, #4294967295
 8021586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802158a:	6921      	ldr	r1, [r4, #16]
 802158c:	464a      	mov	r2, r9
 802158e:	f7fd facd 	bl	801eb2c <memcpy>
 8021592:	89a3      	ldrh	r3, [r4, #12]
 8021594:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8021598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802159c:	81a3      	strh	r3, [r4, #12]
 802159e:	6126      	str	r6, [r4, #16]
 80215a0:	6165      	str	r5, [r4, #20]
 80215a2:	444e      	add	r6, r9
 80215a4:	eba5 0509 	sub.w	r5, r5, r9
 80215a8:	6026      	str	r6, [r4, #0]
 80215aa:	60a5      	str	r5, [r4, #8]
 80215ac:	463e      	mov	r6, r7
 80215ae:	42be      	cmp	r6, r7
 80215b0:	d900      	bls.n	80215b4 <__ssputs_r+0x86>
 80215b2:	463e      	mov	r6, r7
 80215b4:	4632      	mov	r2, r6
 80215b6:	6820      	ldr	r0, [r4, #0]
 80215b8:	4641      	mov	r1, r8
 80215ba:	f7fd fac5 	bl	801eb48 <memmove>
 80215be:	68a3      	ldr	r3, [r4, #8]
 80215c0:	6822      	ldr	r2, [r4, #0]
 80215c2:	1b9b      	subs	r3, r3, r6
 80215c4:	4432      	add	r2, r6
 80215c6:	60a3      	str	r3, [r4, #8]
 80215c8:	6022      	str	r2, [r4, #0]
 80215ca:	2000      	movs	r0, #0
 80215cc:	e7db      	b.n	8021586 <__ssputs_r+0x58>
 80215ce:	462a      	mov	r2, r5
 80215d0:	f7ff ff87 	bl	80214e2 <_realloc_r>
 80215d4:	4606      	mov	r6, r0
 80215d6:	2800      	cmp	r0, #0
 80215d8:	d1e1      	bne.n	802159e <__ssputs_r+0x70>
 80215da:	6921      	ldr	r1, [r4, #16]
 80215dc:	4650      	mov	r0, sl
 80215de:	f7fd fad5 	bl	801eb8c <_free_r>
 80215e2:	e7c7      	b.n	8021574 <__ssputs_r+0x46>

080215e4 <_svfiprintf_r>:
 80215e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215e8:	4698      	mov	r8, r3
 80215ea:	898b      	ldrh	r3, [r1, #12]
 80215ec:	061b      	lsls	r3, r3, #24
 80215ee:	b09d      	sub	sp, #116	; 0x74
 80215f0:	4607      	mov	r7, r0
 80215f2:	460d      	mov	r5, r1
 80215f4:	4614      	mov	r4, r2
 80215f6:	d50e      	bpl.n	8021616 <_svfiprintf_r+0x32>
 80215f8:	690b      	ldr	r3, [r1, #16]
 80215fa:	b963      	cbnz	r3, 8021616 <_svfiprintf_r+0x32>
 80215fc:	2140      	movs	r1, #64	; 0x40
 80215fe:	f7fd fb15 	bl	801ec2c <_malloc_r>
 8021602:	6028      	str	r0, [r5, #0]
 8021604:	6128      	str	r0, [r5, #16]
 8021606:	b920      	cbnz	r0, 8021612 <_svfiprintf_r+0x2e>
 8021608:	230c      	movs	r3, #12
 802160a:	603b      	str	r3, [r7, #0]
 802160c:	f04f 30ff 	mov.w	r0, #4294967295
 8021610:	e0d1      	b.n	80217b6 <_svfiprintf_r+0x1d2>
 8021612:	2340      	movs	r3, #64	; 0x40
 8021614:	616b      	str	r3, [r5, #20]
 8021616:	2300      	movs	r3, #0
 8021618:	9309      	str	r3, [sp, #36]	; 0x24
 802161a:	2320      	movs	r3, #32
 802161c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021620:	f8cd 800c 	str.w	r8, [sp, #12]
 8021624:	2330      	movs	r3, #48	; 0x30
 8021626:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80217d0 <_svfiprintf_r+0x1ec>
 802162a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802162e:	f04f 0901 	mov.w	r9, #1
 8021632:	4623      	mov	r3, r4
 8021634:	469a      	mov	sl, r3
 8021636:	f813 2b01 	ldrb.w	r2, [r3], #1
 802163a:	b10a      	cbz	r2, 8021640 <_svfiprintf_r+0x5c>
 802163c:	2a25      	cmp	r2, #37	; 0x25
 802163e:	d1f9      	bne.n	8021634 <_svfiprintf_r+0x50>
 8021640:	ebba 0b04 	subs.w	fp, sl, r4
 8021644:	d00b      	beq.n	802165e <_svfiprintf_r+0x7a>
 8021646:	465b      	mov	r3, fp
 8021648:	4622      	mov	r2, r4
 802164a:	4629      	mov	r1, r5
 802164c:	4638      	mov	r0, r7
 802164e:	f7ff ff6e 	bl	802152e <__ssputs_r>
 8021652:	3001      	adds	r0, #1
 8021654:	f000 80aa 	beq.w	80217ac <_svfiprintf_r+0x1c8>
 8021658:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802165a:	445a      	add	r2, fp
 802165c:	9209      	str	r2, [sp, #36]	; 0x24
 802165e:	f89a 3000 	ldrb.w	r3, [sl]
 8021662:	2b00      	cmp	r3, #0
 8021664:	f000 80a2 	beq.w	80217ac <_svfiprintf_r+0x1c8>
 8021668:	2300      	movs	r3, #0
 802166a:	f04f 32ff 	mov.w	r2, #4294967295
 802166e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021672:	f10a 0a01 	add.w	sl, sl, #1
 8021676:	9304      	str	r3, [sp, #16]
 8021678:	9307      	str	r3, [sp, #28]
 802167a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802167e:	931a      	str	r3, [sp, #104]	; 0x68
 8021680:	4654      	mov	r4, sl
 8021682:	2205      	movs	r2, #5
 8021684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021688:	4851      	ldr	r0, [pc, #324]	; (80217d0 <_svfiprintf_r+0x1ec>)
 802168a:	f7de fda9 	bl	80001e0 <memchr>
 802168e:	9a04      	ldr	r2, [sp, #16]
 8021690:	b9d8      	cbnz	r0, 80216ca <_svfiprintf_r+0xe6>
 8021692:	06d0      	lsls	r0, r2, #27
 8021694:	bf44      	itt	mi
 8021696:	2320      	movmi	r3, #32
 8021698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802169c:	0711      	lsls	r1, r2, #28
 802169e:	bf44      	itt	mi
 80216a0:	232b      	movmi	r3, #43	; 0x2b
 80216a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80216a6:	f89a 3000 	ldrb.w	r3, [sl]
 80216aa:	2b2a      	cmp	r3, #42	; 0x2a
 80216ac:	d015      	beq.n	80216da <_svfiprintf_r+0xf6>
 80216ae:	9a07      	ldr	r2, [sp, #28]
 80216b0:	4654      	mov	r4, sl
 80216b2:	2000      	movs	r0, #0
 80216b4:	f04f 0c0a 	mov.w	ip, #10
 80216b8:	4621      	mov	r1, r4
 80216ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80216be:	3b30      	subs	r3, #48	; 0x30
 80216c0:	2b09      	cmp	r3, #9
 80216c2:	d94e      	bls.n	8021762 <_svfiprintf_r+0x17e>
 80216c4:	b1b0      	cbz	r0, 80216f4 <_svfiprintf_r+0x110>
 80216c6:	9207      	str	r2, [sp, #28]
 80216c8:	e014      	b.n	80216f4 <_svfiprintf_r+0x110>
 80216ca:	eba0 0308 	sub.w	r3, r0, r8
 80216ce:	fa09 f303 	lsl.w	r3, r9, r3
 80216d2:	4313      	orrs	r3, r2
 80216d4:	9304      	str	r3, [sp, #16]
 80216d6:	46a2      	mov	sl, r4
 80216d8:	e7d2      	b.n	8021680 <_svfiprintf_r+0x9c>
 80216da:	9b03      	ldr	r3, [sp, #12]
 80216dc:	1d19      	adds	r1, r3, #4
 80216de:	681b      	ldr	r3, [r3, #0]
 80216e0:	9103      	str	r1, [sp, #12]
 80216e2:	2b00      	cmp	r3, #0
 80216e4:	bfbb      	ittet	lt
 80216e6:	425b      	neglt	r3, r3
 80216e8:	f042 0202 	orrlt.w	r2, r2, #2
 80216ec:	9307      	strge	r3, [sp, #28]
 80216ee:	9307      	strlt	r3, [sp, #28]
 80216f0:	bfb8      	it	lt
 80216f2:	9204      	strlt	r2, [sp, #16]
 80216f4:	7823      	ldrb	r3, [r4, #0]
 80216f6:	2b2e      	cmp	r3, #46	; 0x2e
 80216f8:	d10c      	bne.n	8021714 <_svfiprintf_r+0x130>
 80216fa:	7863      	ldrb	r3, [r4, #1]
 80216fc:	2b2a      	cmp	r3, #42	; 0x2a
 80216fe:	d135      	bne.n	802176c <_svfiprintf_r+0x188>
 8021700:	9b03      	ldr	r3, [sp, #12]
 8021702:	1d1a      	adds	r2, r3, #4
 8021704:	681b      	ldr	r3, [r3, #0]
 8021706:	9203      	str	r2, [sp, #12]
 8021708:	2b00      	cmp	r3, #0
 802170a:	bfb8      	it	lt
 802170c:	f04f 33ff 	movlt.w	r3, #4294967295
 8021710:	3402      	adds	r4, #2
 8021712:	9305      	str	r3, [sp, #20]
 8021714:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80217e0 <_svfiprintf_r+0x1fc>
 8021718:	7821      	ldrb	r1, [r4, #0]
 802171a:	2203      	movs	r2, #3
 802171c:	4650      	mov	r0, sl
 802171e:	f7de fd5f 	bl	80001e0 <memchr>
 8021722:	b140      	cbz	r0, 8021736 <_svfiprintf_r+0x152>
 8021724:	2340      	movs	r3, #64	; 0x40
 8021726:	eba0 000a 	sub.w	r0, r0, sl
 802172a:	fa03 f000 	lsl.w	r0, r3, r0
 802172e:	9b04      	ldr	r3, [sp, #16]
 8021730:	4303      	orrs	r3, r0
 8021732:	3401      	adds	r4, #1
 8021734:	9304      	str	r3, [sp, #16]
 8021736:	f814 1b01 	ldrb.w	r1, [r4], #1
 802173a:	4826      	ldr	r0, [pc, #152]	; (80217d4 <_svfiprintf_r+0x1f0>)
 802173c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021740:	2206      	movs	r2, #6
 8021742:	f7de fd4d 	bl	80001e0 <memchr>
 8021746:	2800      	cmp	r0, #0
 8021748:	d038      	beq.n	80217bc <_svfiprintf_r+0x1d8>
 802174a:	4b23      	ldr	r3, [pc, #140]	; (80217d8 <_svfiprintf_r+0x1f4>)
 802174c:	bb1b      	cbnz	r3, 8021796 <_svfiprintf_r+0x1b2>
 802174e:	9b03      	ldr	r3, [sp, #12]
 8021750:	3307      	adds	r3, #7
 8021752:	f023 0307 	bic.w	r3, r3, #7
 8021756:	3308      	adds	r3, #8
 8021758:	9303      	str	r3, [sp, #12]
 802175a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802175c:	4433      	add	r3, r6
 802175e:	9309      	str	r3, [sp, #36]	; 0x24
 8021760:	e767      	b.n	8021632 <_svfiprintf_r+0x4e>
 8021762:	fb0c 3202 	mla	r2, ip, r2, r3
 8021766:	460c      	mov	r4, r1
 8021768:	2001      	movs	r0, #1
 802176a:	e7a5      	b.n	80216b8 <_svfiprintf_r+0xd4>
 802176c:	2300      	movs	r3, #0
 802176e:	3401      	adds	r4, #1
 8021770:	9305      	str	r3, [sp, #20]
 8021772:	4619      	mov	r1, r3
 8021774:	f04f 0c0a 	mov.w	ip, #10
 8021778:	4620      	mov	r0, r4
 802177a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802177e:	3a30      	subs	r2, #48	; 0x30
 8021780:	2a09      	cmp	r2, #9
 8021782:	d903      	bls.n	802178c <_svfiprintf_r+0x1a8>
 8021784:	2b00      	cmp	r3, #0
 8021786:	d0c5      	beq.n	8021714 <_svfiprintf_r+0x130>
 8021788:	9105      	str	r1, [sp, #20]
 802178a:	e7c3      	b.n	8021714 <_svfiprintf_r+0x130>
 802178c:	fb0c 2101 	mla	r1, ip, r1, r2
 8021790:	4604      	mov	r4, r0
 8021792:	2301      	movs	r3, #1
 8021794:	e7f0      	b.n	8021778 <_svfiprintf_r+0x194>
 8021796:	ab03      	add	r3, sp, #12
 8021798:	9300      	str	r3, [sp, #0]
 802179a:	462a      	mov	r2, r5
 802179c:	4b0f      	ldr	r3, [pc, #60]	; (80217dc <_svfiprintf_r+0x1f8>)
 802179e:	a904      	add	r1, sp, #16
 80217a0:	4638      	mov	r0, r7
 80217a2:	f7fd fc97 	bl	801f0d4 <_printf_float>
 80217a6:	1c42      	adds	r2, r0, #1
 80217a8:	4606      	mov	r6, r0
 80217aa:	d1d6      	bne.n	802175a <_svfiprintf_r+0x176>
 80217ac:	89ab      	ldrh	r3, [r5, #12]
 80217ae:	065b      	lsls	r3, r3, #25
 80217b0:	f53f af2c 	bmi.w	802160c <_svfiprintf_r+0x28>
 80217b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80217b6:	b01d      	add	sp, #116	; 0x74
 80217b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80217bc:	ab03      	add	r3, sp, #12
 80217be:	9300      	str	r3, [sp, #0]
 80217c0:	462a      	mov	r2, r5
 80217c2:	4b06      	ldr	r3, [pc, #24]	; (80217dc <_svfiprintf_r+0x1f8>)
 80217c4:	a904      	add	r1, sp, #16
 80217c6:	4638      	mov	r0, r7
 80217c8:	f7fd ff28 	bl	801f61c <_printf_i>
 80217cc:	e7eb      	b.n	80217a6 <_svfiprintf_r+0x1c2>
 80217ce:	bf00      	nop
 80217d0:	08025ca8 	.word	0x08025ca8
 80217d4:	08025cb2 	.word	0x08025cb2
 80217d8:	0801f0d5 	.word	0x0801f0d5
 80217dc:	0802152f 	.word	0x0802152f
 80217e0:	08025cae 	.word	0x08025cae

080217e4 <_read_r>:
 80217e4:	b538      	push	{r3, r4, r5, lr}
 80217e6:	4d07      	ldr	r5, [pc, #28]	; (8021804 <_read_r+0x20>)
 80217e8:	4604      	mov	r4, r0
 80217ea:	4608      	mov	r0, r1
 80217ec:	4611      	mov	r1, r2
 80217ee:	2200      	movs	r2, #0
 80217f0:	602a      	str	r2, [r5, #0]
 80217f2:	461a      	mov	r2, r3
 80217f4:	f7fc f9de 	bl	801dbb4 <_read>
 80217f8:	1c43      	adds	r3, r0, #1
 80217fa:	d102      	bne.n	8021802 <_read_r+0x1e>
 80217fc:	682b      	ldr	r3, [r5, #0]
 80217fe:	b103      	cbz	r3, 8021802 <_read_r+0x1e>
 8021800:	6023      	str	r3, [r4, #0]
 8021802:	bd38      	pop	{r3, r4, r5, pc}
 8021804:	2000898c 	.word	0x2000898c

08021808 <_raise_r>:
 8021808:	291f      	cmp	r1, #31
 802180a:	b538      	push	{r3, r4, r5, lr}
 802180c:	4604      	mov	r4, r0
 802180e:	460d      	mov	r5, r1
 8021810:	d904      	bls.n	802181c <_raise_r+0x14>
 8021812:	2316      	movs	r3, #22
 8021814:	6003      	str	r3, [r0, #0]
 8021816:	f04f 30ff 	mov.w	r0, #4294967295
 802181a:	bd38      	pop	{r3, r4, r5, pc}
 802181c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802181e:	b112      	cbz	r2, 8021826 <_raise_r+0x1e>
 8021820:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021824:	b94b      	cbnz	r3, 802183a <_raise_r+0x32>
 8021826:	4620      	mov	r0, r4
 8021828:	f000 f830 	bl	802188c <_getpid_r>
 802182c:	462a      	mov	r2, r5
 802182e:	4601      	mov	r1, r0
 8021830:	4620      	mov	r0, r4
 8021832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021836:	f000 b817 	b.w	8021868 <_kill_r>
 802183a:	2b01      	cmp	r3, #1
 802183c:	d00a      	beq.n	8021854 <_raise_r+0x4c>
 802183e:	1c59      	adds	r1, r3, #1
 8021840:	d103      	bne.n	802184a <_raise_r+0x42>
 8021842:	2316      	movs	r3, #22
 8021844:	6003      	str	r3, [r0, #0]
 8021846:	2001      	movs	r0, #1
 8021848:	e7e7      	b.n	802181a <_raise_r+0x12>
 802184a:	2400      	movs	r4, #0
 802184c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021850:	4628      	mov	r0, r5
 8021852:	4798      	blx	r3
 8021854:	2000      	movs	r0, #0
 8021856:	e7e0      	b.n	802181a <_raise_r+0x12>

08021858 <raise>:
 8021858:	4b02      	ldr	r3, [pc, #8]	; (8021864 <raise+0xc>)
 802185a:	4601      	mov	r1, r0
 802185c:	6818      	ldr	r0, [r3, #0]
 802185e:	f7ff bfd3 	b.w	8021808 <_raise_r>
 8021862:	bf00      	nop
 8021864:	10000138 	.word	0x10000138

08021868 <_kill_r>:
 8021868:	b538      	push	{r3, r4, r5, lr}
 802186a:	4d07      	ldr	r5, [pc, #28]	; (8021888 <_kill_r+0x20>)
 802186c:	2300      	movs	r3, #0
 802186e:	4604      	mov	r4, r0
 8021870:	4608      	mov	r0, r1
 8021872:	4611      	mov	r1, r2
 8021874:	602b      	str	r3, [r5, #0]
 8021876:	f7e0 f8bb 	bl	80019f0 <_kill>
 802187a:	1c43      	adds	r3, r0, #1
 802187c:	d102      	bne.n	8021884 <_kill_r+0x1c>
 802187e:	682b      	ldr	r3, [r5, #0]
 8021880:	b103      	cbz	r3, 8021884 <_kill_r+0x1c>
 8021882:	6023      	str	r3, [r4, #0]
 8021884:	bd38      	pop	{r3, r4, r5, pc}
 8021886:	bf00      	nop
 8021888:	2000898c 	.word	0x2000898c

0802188c <_getpid_r>:
 802188c:	f7e0 b8a8 	b.w	80019e0 <_getpid>

08021890 <__ascii_wctomb>:
 8021890:	b149      	cbz	r1, 80218a6 <__ascii_wctomb+0x16>
 8021892:	2aff      	cmp	r2, #255	; 0xff
 8021894:	bf85      	ittet	hi
 8021896:	238a      	movhi	r3, #138	; 0x8a
 8021898:	6003      	strhi	r3, [r0, #0]
 802189a:	700a      	strbls	r2, [r1, #0]
 802189c:	f04f 30ff 	movhi.w	r0, #4294967295
 80218a0:	bf98      	it	ls
 80218a2:	2001      	movls	r0, #1
 80218a4:	4770      	bx	lr
 80218a6:	4608      	mov	r0, r1
 80218a8:	4770      	bx	lr
	...

080218ac <_fstat_r>:
 80218ac:	b538      	push	{r3, r4, r5, lr}
 80218ae:	4d07      	ldr	r5, [pc, #28]	; (80218cc <_fstat_r+0x20>)
 80218b0:	2300      	movs	r3, #0
 80218b2:	4604      	mov	r4, r0
 80218b4:	4608      	mov	r0, r1
 80218b6:	4611      	mov	r1, r2
 80218b8:	602b      	str	r3, [r5, #0]
 80218ba:	f7e0 f8c1 	bl	8001a40 <_fstat>
 80218be:	1c43      	adds	r3, r0, #1
 80218c0:	d102      	bne.n	80218c8 <_fstat_r+0x1c>
 80218c2:	682b      	ldr	r3, [r5, #0]
 80218c4:	b103      	cbz	r3, 80218c8 <_fstat_r+0x1c>
 80218c6:	6023      	str	r3, [r4, #0]
 80218c8:	bd38      	pop	{r3, r4, r5, pc}
 80218ca:	bf00      	nop
 80218cc:	2000898c 	.word	0x2000898c

080218d0 <_isatty_r>:
 80218d0:	b538      	push	{r3, r4, r5, lr}
 80218d2:	4d06      	ldr	r5, [pc, #24]	; (80218ec <_isatty_r+0x1c>)
 80218d4:	2300      	movs	r3, #0
 80218d6:	4604      	mov	r4, r0
 80218d8:	4608      	mov	r0, r1
 80218da:	602b      	str	r3, [r5, #0]
 80218dc:	f7e0 f8c0 	bl	8001a60 <_isatty>
 80218e0:	1c43      	adds	r3, r0, #1
 80218e2:	d102      	bne.n	80218ea <_isatty_r+0x1a>
 80218e4:	682b      	ldr	r3, [r5, #0]
 80218e6:	b103      	cbz	r3, 80218ea <_isatty_r+0x1a>
 80218e8:	6023      	str	r3, [r4, #0]
 80218ea:	bd38      	pop	{r3, r4, r5, pc}
 80218ec:	2000898c 	.word	0x2000898c

080218f0 <_malloc_usable_size_r>:
 80218f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80218f4:	1f18      	subs	r0, r3, #4
 80218f6:	2b00      	cmp	r3, #0
 80218f8:	bfbc      	itt	lt
 80218fa:	580b      	ldrlt	r3, [r1, r0]
 80218fc:	18c0      	addlt	r0, r0, r3
 80218fe:	4770      	bx	lr

08021900 <_init>:
 8021900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021902:	bf00      	nop
 8021904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021906:	bc08      	pop	{r3}
 8021908:	469e      	mov	lr, r3
 802190a:	4770      	bx	lr

0802190c <_fini>:
 802190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802190e:	bf00      	nop
 8021910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021912:	bc08      	pop	{r3}
 8021914:	469e      	mov	lr, r3
 8021916:	4770      	bx	lr
