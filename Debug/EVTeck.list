
EVTeck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014f74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031a0  08015104  08015104  00025104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080182a4  080182a4  00030098  2**0
                  CONTENTS
  4 .ARM          00000008  080182a4  080182a4  000282a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080182ac  080182ac  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080182ac  080182ac  000282ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080182b0  080182b0  000282b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080182b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030098  2**0
                  CONTENTS
 10 .bss          00018cf0  20000098  20000098  00030098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20018d88  20018d88  00030098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e4a1  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000070c6  00000000  00000000  0005e569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002180  00000000  00000000  00065630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002010  00000000  00000000  000677b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000311c2  00000000  00000000  000697c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031e58  00000000  00000000  0009a982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f02d2  00000000  00000000  000cc7da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001bcaac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009320  00000000  00000000  001bcafc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080150ec 	.word	0x080150ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	080150ec 	.word	0x080150ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000584:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <vApplicationGetIdleTaskMemory+0x30>)
 800058a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000592:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000594:	bf00      	nop
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	200000b4 	.word	0x200000b4
 80005a4:	20000168 	.word	0x20000168

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b5b0      	push	{r4, r5, r7, lr}
 80005aa:	b088      	sub	sp, #32
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 fefb 	bl	80013a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f823 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f9ab 	bl	8000910 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005ba:	f000 f889 	bl	80006d0 <MX_SPI1_Init>
  MX_TIM1_Init();
 80005be:	f000 f8bd 	bl	800073c <MX_TIM1_Init>
  MX_TIM2_Init();
 80005c2:	f000 f90b 	bl	80007dc <MX_TIM2_Init>
  MX_TIM3_Init();
 80005c6:	f000 f955 	bl	8000874 <MX_TIM3_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <main+0x4c>)
 80005cc:	1d3c      	adds	r4, r7, #4
 80005ce:	461d      	mov	r5, r3
 80005d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f004 fb53 	bl	8004c8c <osThreadCreate>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a03      	ldr	r2, [pc, #12]	; (80005f8 <main+0x50>)
 80005ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005ec:	f004 fb37 	bl	8004c5e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <main+0x48>
 80005f2:	bf00      	nop
 80005f4:	08015110 	.word	0x08015110
 80005f8:	20000698 	.word	0x20000698

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	; 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f013 fda5 	bl	801415a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a27      	ldr	r2, [pc, #156]	; (80006c8 <SystemClock_Config+0xcc>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b22      	ldr	r3, [pc, #136]	; (80006cc <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a21      	ldr	r2, [pc, #132]	; (80006cc <SystemClock_Config+0xd0>)
 8000646:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000658:	2301      	movs	r3, #1
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800065c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800066c:	2319      	movs	r3, #25
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000670:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000674:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800067a:	2304      	movs	r3, #4
 800067c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fc3e 	bl	8002f04 <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800068e:	f000 fa4f 	bl	8000b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000696:	2302      	movs	r3, #2
 8000698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2105      	movs	r1, #5
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 fe9f 	bl	80033f4 <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006bc:	f000 fa38 	bl	8000b30 <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3750      	adds	r7, #80	; 0x50
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006d4:	4b17      	ldr	r3, [pc, #92]	; (8000734 <MX_SPI1_Init+0x64>)
 80006d6:	4a18      	ldr	r2, [pc, #96]	; (8000738 <MX_SPI1_Init+0x68>)
 80006d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_SPI1_Init+0x64>)
 80006dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_SPI1_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_SPI1_Init+0x64>)
 80006fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000700:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_SPI1_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <MX_SPI1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_SPI1_Init+0x64>)
 800071c:	220a      	movs	r2, #10
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_SPI1_Init+0x64>)
 8000722:	f003 f865 	bl	80037f0 <HAL_SPI_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800072c:	f000 fa00 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000568 	.word	0x20000568
 8000738:	40013000 	.word	0x40013000

0800073c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000750:	463b      	mov	r3, r7
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000758:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <MX_TIM1_Init+0x98>)
 800075a:	4a1f      	ldr	r2, [pc, #124]	; (80007d8 <MX_TIM1_Init+0x9c>)
 800075c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800075e:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_TIM1_Init+0x98>)
 8000760:	2200      	movs	r2, #0
 8000762:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <MX_TIM1_Init+0x98>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_TIM1_Init+0x98>)
 800076c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000770:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_TIM1_Init+0x98>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000778:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <MX_TIM1_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_TIM1_Init+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000784:	4813      	ldr	r0, [pc, #76]	; (80007d4 <MX_TIM1_Init+0x98>)
 8000786:	f003 f8bc 	bl	8003902 <HAL_TIM_Base_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000790:	f000 f9ce 	bl	8000b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000798:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	4619      	mov	r1, r3
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <MX_TIM1_Init+0x98>)
 80007a2:	f003 fa75 	bl	8003c90 <HAL_TIM_ConfigClockSource>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80007ac:	f000 f9c0 	bl	8000b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b0:	2300      	movs	r3, #0
 80007b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_TIM1_Init+0x98>)
 80007be:	f003 fc91 	bl	80040e4 <HAL_TIMEx_MasterConfigSynchronization>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007c8:	f000 f9b2 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	3718      	adds	r7, #24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200005c0 	.word	0x200005c0
 80007d8:	40010000 	.word	0x40010000

080007dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f0:	463b      	mov	r3, r7
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f8:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <MX_TIM2_Init+0x94>)
 80007fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000800:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <MX_TIM2_Init+0x94>)
 8000802:	2200      	movs	r2, #0
 8000804:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000806:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <MX_TIM2_Init+0x94>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <MX_TIM2_Init+0x94>)
 800080e:	f04f 32ff 	mov.w	r2, #4294967295
 8000812:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <MX_TIM2_Init+0x94>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <MX_TIM2_Init+0x94>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000820:	4813      	ldr	r0, [pc, #76]	; (8000870 <MX_TIM2_Init+0x94>)
 8000822:	f003 f86e 	bl	8003902 <HAL_TIM_Base_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800082c:	f000 f980 	bl	8000b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000834:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	4619      	mov	r1, r3
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <MX_TIM2_Init+0x94>)
 800083e:	f003 fa27 	bl	8003c90 <HAL_TIM_ConfigClockSource>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000848:	f000 f972 	bl	8000b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000854:	463b      	mov	r3, r7
 8000856:	4619      	mov	r1, r3
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_TIM2_Init+0x94>)
 800085a:	f003 fc43 	bl	80040e4 <HAL_TIMEx_MasterConfigSynchronization>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000864:	f000 f964 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000608 	.word	0x20000608

08000874 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087a:	f107 0308 	add.w	r3, r7, #8
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000888:	463b      	mov	r3, r7
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000890:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <MX_TIM3_Init+0x94>)
 8000892:	4a1e      	ldr	r2, [pc, #120]	; (800090c <MX_TIM3_Init+0x98>)
 8000894:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000896:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <MX_TIM3_Init+0x94>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_TIM3_Init+0x94>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <MX_TIM3_Init+0x94>)
 80008a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <MX_TIM3_Init+0x94>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_TIM3_Init+0x94>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008b6:	4814      	ldr	r0, [pc, #80]	; (8000908 <MX_TIM3_Init+0x94>)
 80008b8:	f003 f823 	bl	8003902 <HAL_TIM_Base_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80008c2:	f000 f935 	bl	8000b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	4619      	mov	r1, r3
 80008d2:	480d      	ldr	r0, [pc, #52]	; (8000908 <MX_TIM3_Init+0x94>)
 80008d4:	f003 f9dc 	bl	8003c90 <HAL_TIM_ConfigClockSource>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80008de:	f000 f927 	bl	8000b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008ea:	463b      	mov	r3, r7
 80008ec:	4619      	mov	r1, r3
 80008ee:	4806      	ldr	r0, [pc, #24]	; (8000908 <MX_TIM3_Init+0x94>)
 80008f0:	f003 fbf8 	bl	80040e4 <HAL_TIMEx_MasterConfigSynchronization>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80008fa:	f000 f919 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000650 	.word	0x20000650
 800090c:	40000400 	.word	0x40000400

08000910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08e      	sub	sp, #56	; 0x38
 8000914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
 800092a:	4b6e      	ldr	r3, [pc, #440]	; (8000ae4 <MX_GPIO_Init+0x1d4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a6d      	ldr	r2, [pc, #436]	; (8000ae4 <MX_GPIO_Init+0x1d4>)
 8000930:	f043 0310 	orr.w	r3, r3, #16
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b6b      	ldr	r3, [pc, #428]	; (8000ae4 <MX_GPIO_Init+0x1d4>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0310 	and.w	r3, r3, #16
 800093e:	623b      	str	r3, [r7, #32]
 8000940:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
 8000946:	4b67      	ldr	r3, [pc, #412]	; (8000ae4 <MX_GPIO_Init+0x1d4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a66      	ldr	r2, [pc, #408]	; (8000ae4 <MX_GPIO_Init+0x1d4>)
 800094c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b64      	ldr	r3, [pc, #400]	; (8000ae4 <MX_GPIO_Init+0x1d4>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095a:	61fb      	str	r3, [r7, #28]
 800095c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
 8000962:	4b60      	ldr	r3, [pc, #384]	; (8000ae4 <MX_GPIO_Init+0x1d4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a5f      	ldr	r2, [pc, #380]	; (8000ae4 <MX_GPIO_Init+0x1d4>)
 8000968:	f043 0304 	orr.w	r3, r3, #4
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b5d      	ldr	r3, [pc, #372]	; (8000ae4 <MX_GPIO_Init+0x1d4>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0304 	and.w	r3, r3, #4
 8000976:	61bb      	str	r3, [r7, #24]
 8000978:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	4b59      	ldr	r3, [pc, #356]	; (8000ae4 <MX_GPIO_Init+0x1d4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a58      	ldr	r2, [pc, #352]	; (8000ae4 <MX_GPIO_Init+0x1d4>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b56      	ldr	r3, [pc, #344]	; (8000ae4 <MX_GPIO_Init+0x1d4>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	4b52      	ldr	r3, [pc, #328]	; (8000ae4 <MX_GPIO_Init+0x1d4>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a51      	ldr	r2, [pc, #324]	; (8000ae4 <MX_GPIO_Init+0x1d4>)
 80009a0:	f043 0320 	orr.w	r3, r3, #32
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b4f      	ldr	r3, [pc, #316]	; (8000ae4 <MX_GPIO_Init+0x1d4>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0320 	and.w	r3, r3, #32
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b4b      	ldr	r3, [pc, #300]	; (8000ae4 <MX_GPIO_Init+0x1d4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a4a      	ldr	r2, [pc, #296]	; (8000ae4 <MX_GPIO_Init+0x1d4>)
 80009bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b48      	ldr	r3, [pc, #288]	; (8000ae4 <MX_GPIO_Init+0x1d4>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	4b44      	ldr	r3, [pc, #272]	; (8000ae4 <MX_GPIO_Init+0x1d4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a43      	ldr	r2, [pc, #268]	; (8000ae4 <MX_GPIO_Init+0x1d4>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b41      	ldr	r3, [pc, #260]	; (8000ae4 <MX_GPIO_Init+0x1d4>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b3d      	ldr	r3, [pc, #244]	; (8000ae4 <MX_GPIO_Init+0x1d4>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a3c      	ldr	r2, [pc, #240]	; (8000ae4 <MX_GPIO_Init+0x1d4>)
 80009f4:	f043 0308 	orr.w	r3, r3, #8
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b3a      	ldr	r3, [pc, #232]	; (8000ae4 <MX_GPIO_Init+0x1d4>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0308 	and.w	r3, r3, #8
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 7163 	mov.w	r1, #908	; 0x38c
 8000a0c:	4836      	ldr	r0, [pc, #216]	; (8000ae8 <MX_GPIO_Init+0x1d8>)
 8000a0e:	f002 fa5f 	bl	8002ed0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000a18:	4834      	ldr	r0, [pc, #208]	; (8000aec <MX_GPIO_Init+0x1dc>)
 8000a1a:	f002 fa59 	bl	8002ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2133      	movs	r1, #51	; 0x33
 8000a22:	4833      	ldr	r0, [pc, #204]	; (8000af0 <MX_GPIO_Init+0x1e0>)
 8000a24:	f002 fa54 	bl	8002ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000a2e:	4831      	ldr	r0, [pc, #196]	; (8000af4 <MX_GPIO_Init+0x1e4>)
 8000a30:	f002 fa4e 	bl	8002ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE7 PE8
                           PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8
 8000a34:	f44f 7363 	mov.w	r3, #908	; 0x38c
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4826      	ldr	r0, [pc, #152]	; (8000ae8 <MX_GPIO_Init+0x1d8>)
 8000a4e:	f002 f8a3 	bl	8002b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a52:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4820      	ldr	r0, [pc, #128]	; (8000aec <MX_GPIO_Init+0x1dc>)
 8000a6c:	f002 f894 	bl	8002b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG4 PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a70:	2333      	movs	r3, #51	; 0x33
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a84:	4619      	mov	r1, r3
 8000a86:	481a      	ldr	r0, [pc, #104]	; (8000af0 <MX_GPIO_Init+0x1e0>)
 8000a88:	f002 f886 	bl	8002b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4814      	ldr	r0, [pc, #80]	; (8000af4 <MX_GPIO_Init+0x1e4>)
 8000aa2:	f002 f879 	bl	8002b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000aa6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abc:	4619      	mov	r1, r3
 8000abe:	480d      	ldr	r0, [pc, #52]	; (8000af4 <MX_GPIO_Init+0x1e4>)
 8000ac0:	f002 f86a 	bl	8002b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ac4:	230c      	movs	r3, #12
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4806      	ldr	r0, [pc, #24]	; (8000af0 <MX_GPIO_Init+0x1e0>)
 8000ad8:	f002 f85e 	bl	8002b98 <HAL_GPIO_Init>

}
 8000adc:	bf00      	nop
 8000ade:	3738      	adds	r7, #56	; 0x38
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40021400 	.word	0x40021400
 8000af0:	40021800 	.word	0x40021800
 8000af4:	40020c00 	.word	0x40020c00

08000af8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000b00:	f003 fb80 	bl	8004204 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b04:	2001      	movs	r0, #1
 8000b06:	f004 f90d 	bl	8004d24 <osDelay>
 8000b0a:	e7fb      	b.n	8000b04 <StartDefaultTask+0xc>

08000b0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d101      	bne.n	8000b22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b1e:	f000 fc65 	bl	80013ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40001000 	.word	0x40001000

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <Error_Handler+0x8>
	...

08000b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_MspInit+0x54>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	4a11      	ldr	r2, [pc, #68]	; (8000b90 <HAL_MspInit+0x54>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b50:	6453      	str	r3, [r2, #68]	; 0x44
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x54>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <HAL_MspInit+0x54>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <HAL_MspInit+0x54>)
 8000b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <HAL_MspInit+0x54>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	210f      	movs	r1, #15
 8000b7e:	f06f 0001 	mvn.w	r0, #1
 8000b82:	f000 fd2f 	bl	80015e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800

08000b94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	; 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a19      	ldr	r2, [pc, #100]	; (8000c18 <HAL_SPI_MspInit+0x84>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d12b      	bne.n	8000c0e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <HAL_SPI_MspInit+0x88>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <HAL_SPI_MspInit+0x88>)
 8000bc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_SPI_MspInit+0x88>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <HAL_SPI_MspInit+0x88>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a10      	ldr	r2, [pc, #64]	; (8000c1c <HAL_SPI_MspInit+0x88>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_SPI_MspInit+0x88>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000bee:	2338      	movs	r3, #56	; 0x38
 8000bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bfe:	2305      	movs	r3, #5
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	4805      	ldr	r0, [pc, #20]	; (8000c20 <HAL_SPI_MspInit+0x8c>)
 8000c0a:	f001 ffc5 	bl	8002b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c0e:	bf00      	nop
 8000c10:	3728      	adds	r7, #40	; 0x28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40013000 	.word	0x40013000
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020400 	.word	0x40020400

08000c24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a36      	ldr	r2, [pc, #216]	; (8000d0c <HAL_TIM_Base_MspInit+0xe8>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d12e      	bne.n	8000c94 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
 8000c3a:	4b35      	ldr	r3, [pc, #212]	; (8000d10 <HAL_TIM_Base_MspInit+0xec>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	4a34      	ldr	r2, [pc, #208]	; (8000d10 <HAL_TIM_Base_MspInit+0xec>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6453      	str	r3, [r2, #68]	; 0x44
 8000c46:	4b32      	ldr	r3, [pc, #200]	; (8000d10 <HAL_TIM_Base_MspInit+0xec>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2105      	movs	r1, #5
 8000c56:	2018      	movs	r0, #24
 8000c58:	f000 fcc4 	bl	80015e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000c5c:	2018      	movs	r0, #24
 8000c5e:	f000 fcdd 	bl	800161c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2105      	movs	r1, #5
 8000c66:	2019      	movs	r0, #25
 8000c68:	f000 fcbc 	bl	80015e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c6c:	2019      	movs	r0, #25
 8000c6e:	f000 fcd5 	bl	800161c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2105      	movs	r1, #5
 8000c76:	201a      	movs	r0, #26
 8000c78:	f000 fcb4 	bl	80015e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000c7c:	201a      	movs	r0, #26
 8000c7e:	f000 fccd 	bl	800161c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2105      	movs	r1, #5
 8000c86:	201b      	movs	r0, #27
 8000c88:	f000 fcac 	bl	80015e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000c8c:	201b      	movs	r0, #27
 8000c8e:	f000 fcc5 	bl	800161c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c92:	e036      	b.n	8000d02 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c9c:	d116      	bne.n	8000ccc <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <HAL_TIM_Base_MspInit+0xec>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a1a      	ldr	r2, [pc, #104]	; (8000d10 <HAL_TIM_Base_MspInit+0xec>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <HAL_TIM_Base_MspInit+0xec>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	201c      	movs	r0, #28
 8000cc0:	f000 fc90 	bl	80015e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cc4:	201c      	movs	r0, #28
 8000cc6:	f000 fca9 	bl	800161c <HAL_NVIC_EnableIRQ>
}
 8000cca:	e01a      	b.n	8000d02 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <HAL_TIM_Base_MspInit+0xf0>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d115      	bne.n	8000d02 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <HAL_TIM_Base_MspInit+0xec>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	4a0c      	ldr	r2, [pc, #48]	; (8000d10 <HAL_TIM_Base_MspInit+0xec>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <HAL_TIM_Base_MspInit+0xec>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2105      	movs	r1, #5
 8000cf6:	201d      	movs	r0, #29
 8000cf8:	f000 fc74 	bl	80015e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000cfc:	201d      	movs	r0, #29
 8000cfe:	f000 fc8d 	bl	800161c <HAL_NVIC_EnableIRQ>
}
 8000d02:	bf00      	nop
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40010000 	.word	0x40010000
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40000400 	.word	0x40000400

08000d18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08e      	sub	sp, #56	; 0x38
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	4b33      	ldr	r3, [pc, #204]	; (8000dfc <HAL_InitTick+0xe4>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	4a32      	ldr	r2, [pc, #200]	; (8000dfc <HAL_InitTick+0xe4>)
 8000d32:	f043 0310 	orr.w	r3, r3, #16
 8000d36:	6413      	str	r3, [r2, #64]	; 0x40
 8000d38:	4b30      	ldr	r3, [pc, #192]	; (8000dfc <HAL_InitTick+0xe4>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	f003 0310 	and.w	r3, r3, #16
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d44:	f107 0210 	add.w	r2, r7, #16
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f002 fd1c 	bl	800378c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d54:	6a3b      	ldr	r3, [r7, #32]
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d103      	bne.n	8000d66 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d5e:	f002 fd01 	bl	8003764 <HAL_RCC_GetPCLK1Freq>
 8000d62:	6378      	str	r0, [r7, #52]	; 0x34
 8000d64:	e004      	b.n	8000d70 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d66:	f002 fcfd 	bl	8003764 <HAL_RCC_GetPCLK1Freq>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d72:	4a23      	ldr	r2, [pc, #140]	; (8000e00 <HAL_InitTick+0xe8>)
 8000d74:	fba2 2303 	umull	r2, r3, r2, r3
 8000d78:	0c9b      	lsrs	r3, r3, #18
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d7e:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <HAL_InitTick+0xec>)
 8000d80:	4a21      	ldr	r2, [pc, #132]	; (8000e08 <HAL_InitTick+0xf0>)
 8000d82:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d84:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <HAL_InitTick+0xec>)
 8000d86:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d8a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d8c:	4a1d      	ldr	r2, [pc, #116]	; (8000e04 <HAL_InitTick+0xec>)
 8000d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d90:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d92:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <HAL_InitTick+0xec>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d98:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <HAL_InitTick+0xec>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9e:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <HAL_InitTick+0xec>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000da4:	4817      	ldr	r0, [pc, #92]	; (8000e04 <HAL_InitTick+0xec>)
 8000da6:	f002 fdac 	bl	8003902 <HAL_TIM_Base_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000db0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d11b      	bne.n	8000df0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000db8:	4812      	ldr	r0, [pc, #72]	; (8000e04 <HAL_InitTick+0xec>)
 8000dba:	f002 fdf1 	bl	80039a0 <HAL_TIM_Base_Start_IT>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000dc4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d111      	bne.n	8000df0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dcc:	2036      	movs	r0, #54	; 0x36
 8000dce:	f000 fc25 	bl	800161c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d808      	bhi.n	8000dea <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	2036      	movs	r0, #54	; 0x36
 8000dde:	f000 fc01 	bl	80015e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <HAL_InitTick+0xf4>)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6013      	str	r3, [r2, #0]
 8000de8:	e002      	b.n	8000df0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000df0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3738      	adds	r7, #56	; 0x38
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	431bde83 	.word	0x431bde83
 8000e04:	2000069c 	.word	0x2000069c
 8000e08:	40001000 	.word	0x40001000
 8000e0c:	20000004 	.word	0x20000004

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <NMI_Handler+0x4>

08000e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <MemManage_Handler+0x4>

08000e22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000e42:	f002 fe1d 	bl	8003a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200005c0 	.word	0x200005c0

08000e50 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e56:	f002 fe13 	bl	8003a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200005c0 	.word	0x200005c0

08000e64 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e68:	4802      	ldr	r0, [pc, #8]	; (8000e74 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000e6a:	f002 fe09 	bl	8003a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200005c0 	.word	0x200005c0

08000e78 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <TIM1_CC_IRQHandler+0x10>)
 8000e7e:	f002 fdff 	bl	8003a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200005c0 	.word	0x200005c0

08000e8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <TIM2_IRQHandler+0x10>)
 8000e92:	f002 fdf5 	bl	8003a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000608 	.word	0x20000608

08000ea0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ea4:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <TIM3_IRQHandler+0x10>)
 8000ea6:	f002 fdeb 	bl	8003a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000650 	.word	0x20000650

08000eb4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <TIM6_DAC_IRQHandler+0x10>)
 8000eba:	f002 fde1 	bl	8003a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000069c 	.word	0x2000069c

08000ec8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <ETH_IRQHandler+0x10>)
 8000ece:	f000 ff8d 	bl	8001dec <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20005204 	.word	0x20005204

08000edc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
	return 1;
 8000ee0:	2301      	movs	r3, #1
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <_kill>:

int _kill(int pid, int sig)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ef6:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <_kill+0x20>)
 8000ef8:	2216      	movs	r2, #22
 8000efa:	601a      	str	r2, [r3, #0]
	return -1;
 8000efc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	20018d84 	.word	0x20018d84

08000f10 <_exit>:

void _exit (int status)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f18:	f04f 31ff 	mov.w	r1, #4294967295
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ffe5 	bl	8000eec <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f22:	e7fe      	b.n	8000f22 <_exit+0x12>

08000f24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	e00a      	b.n	8000f4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f36:	f3af 8000 	nop.w
 8000f3a:	4601      	mov	r1, r0
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	1c5a      	adds	r2, r3, #1
 8000f40:	60ba      	str	r2, [r7, #8]
 8000f42:	b2ca      	uxtb	r2, r1
 8000f44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	dbf0      	blt.n	8000f36 <_read+0x12>
	}

return len;
 8000f54:	687b      	ldr	r3, [r7, #4]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b086      	sub	sp, #24
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	60f8      	str	r0, [r7, #12]
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	e009      	b.n	8000f84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	1c5a      	adds	r2, r3, #1
 8000f74:	60ba      	str	r2, [r7, #8]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	3301      	adds	r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	dbf1      	blt.n	8000f70 <_write+0x12>
	}
	return len;
 8000f8c:	687b      	ldr	r3, [r7, #4]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <_close>:

int _close(int file)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
	return -1;
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fbe:	605a      	str	r2, [r3, #4]
	return 0;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <_isatty>:

int _isatty(int file)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
	return 1;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
	return 0;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001008:	4a14      	ldr	r2, [pc, #80]	; (800105c <_sbrk+0x5c>)
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <_sbrk+0x60>)
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <_sbrk+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d102      	bne.n	8001022 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <_sbrk+0x64>)
 800101e:	4a12      	ldr	r2, [pc, #72]	; (8001068 <_sbrk+0x68>)
 8001020:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <_sbrk+0x64>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	429a      	cmp	r2, r3
 800102e:	d205      	bcs.n	800103c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <_sbrk+0x6c>)
 8001032:	220c      	movs	r2, #12
 8001034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
 800103a:	e009      	b.n	8001050 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <_sbrk+0x64>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <_sbrk+0x64>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	4a06      	ldr	r2, [pc, #24]	; (8001064 <_sbrk+0x64>)
 800104c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800104e:	68fb      	ldr	r3, [r7, #12]
}
 8001050:	4618      	mov	r0, r3
 8001052:	371c      	adds	r7, #28
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	20020000 	.word	0x20020000
 8001060:	00000400 	.word	0x00000400
 8001064:	200006e4 	.word	0x200006e4
 8001068:	20018d88 	.word	0x20018d88
 800106c:	20018d84 	.word	0x20018d84

08001070 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <SystemInit+0x20>)
 8001076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <SystemInit+0x20>)
 800107c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001080:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001094:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001098:	480d      	ldr	r0, [pc, #52]	; (80010d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800109a:	490e      	ldr	r1, [pc, #56]	; (80010d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800109c:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a0:	e002      	b.n	80010a8 <LoopCopyDataInit>

080010a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a6:	3304      	adds	r3, #4

080010a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ac:	d3f9      	bcc.n	80010a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ae:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010b0:	4c0b      	ldr	r4, [pc, #44]	; (80010e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b4:	e001      	b.n	80010ba <LoopFillZerobss>

080010b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b8:	3204      	adds	r2, #4

080010ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010bc:	d3fb      	bcc.n	80010b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010be:	f7ff ffd7 	bl	8001070 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010c2:	f013 f805 	bl	80140d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010c6:	f7ff fa6f 	bl	80005a8 <main>
  bx  lr    
 80010ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d4:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80010d8:	080182b4 	.word	0x080182b4
  ldr r2, =_sbss
 80010dc:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80010e0:	20018d88 	.word	0x20018d88

080010e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e4:	e7fe      	b.n	80010e4 <ADC_IRQHandler>

080010e6 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d00b      	beq.n	800110e <DP83848_RegisterBusIO+0x28>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d007      	beq.n	800110e <DP83848_RegisterBusIO+0x28>
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <DP83848_RegisterBusIO+0x28>
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d102      	bne.n	8001114 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	e014      	b.n	800113e <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	68da      	ldr	r2, [r3, #12]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	691a      	ldr	r2, [r3, #16]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 800114a:	b580      	push	{r7, lr}
 800114c:	b086      	sub	sp, #24
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d17c      	bne.n	8001264 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d002      	beq.n	8001178 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2220      	movs	r2, #32
 800117c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	e01c      	b.n	80011be <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	f107 0208 	add.w	r2, r7, #8
 800118c:	2119      	movs	r1, #25
 800118e:	6978      	ldr	r0, [r7, #20]
 8001190:	4798      	blx	r3
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	da03      	bge.n	80011a0 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8001198:	f06f 0304 	mvn.w	r3, #4
 800119c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800119e:	e00b      	b.n	80011b8 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	f003 031f 	and.w	r3, r3, #31
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d105      	bne.n	80011b8 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
         break;
 80011b6:	e005      	b.n	80011c4 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	3301      	adds	r3, #1
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	2b1f      	cmp	r3, #31
 80011c2:	d9df      	bls.n	8001184 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b1f      	cmp	r3, #31
 80011ca:	d902      	bls.n	80011d2 <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 80011cc:	f06f 0302 	mvn.w	r3, #2
 80011d0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d145      	bne.n	8001264 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	6810      	ldr	r0, [r2, #0]
 80011e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011e4:	2100      	movs	r1, #0
 80011e6:	4798      	blx	r3
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	db37      	blt.n	800125e <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	6810      	ldr	r0, [r2, #0]
 80011f6:	f107 0208 	add.w	r2, r7, #8
 80011fa:	2100      	movs	r1, #0
 80011fc:	4798      	blx	r3
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	db28      	blt.n	8001256 <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4798      	blx	r3
 800120a:	4603      	mov	r3, r0
 800120c:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 800120e:	e01c      	b.n	800124a <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	4798      	blx	r3
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001222:	d80e      	bhi.n	8001242 <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	6810      	ldr	r0, [r2, #0]
 800122c:	f107 0208 	add.w	r2, r7, #8
 8001230:	2100      	movs	r1, #0
 8001232:	4798      	blx	r3
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	da07      	bge.n	800124a <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 800123a:	f06f 0304 	mvn.w	r3, #4
 800123e:	613b      	str	r3, [r7, #16]
                 break;
 8001240:	e010      	b.n	8001264 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 8001242:	f06f 0301 	mvn.w	r3, #1
 8001246:	613b      	str	r3, [r7, #16]
               break;
 8001248:	e00c      	b.n	8001264 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1dd      	bne.n	8001210 <DP83848_Init+0xc6>
 8001254:	e006      	b.n	8001264 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8001256:	f06f 0304 	mvn.w	r3, #4
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	e002      	b.n	8001264 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 800125e:	f06f 0303 	mvn.w	r3, #3
 8001262:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d112      	bne.n	8001290 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	4798      	blx	r3
 8001270:	4603      	mov	r3, r0
 8001272:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8001274:	bf00      	nop
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	4798      	blx	r3
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001288:	d9f5      	bls.n	8001276 <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2201      	movs	r2, #1
 800128e:	605a      	str	r2, [r3, #4]
   }

   return status;
 8001290:	693b      	ldr	r3, [r7, #16]
 }
 8001292:	4618      	mov	r0, r3
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b084      	sub	sp, #16
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	6810      	ldr	r0, [r2, #0]
 80012ae:	f107 020c 	add.w	r2, r7, #12
 80012b2:	2101      	movs	r1, #1
 80012b4:	4798      	blx	r3
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	da02      	bge.n	80012c2 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 80012bc:	f06f 0304 	mvn.w	r3, #4
 80012c0:	e06e      	b.n	80013a0 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	6810      	ldr	r0, [r2, #0]
 80012ca:	f107 020c 	add.w	r2, r7, #12
 80012ce:	2101      	movs	r1, #1
 80012d0:	4798      	blx	r3
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	da02      	bge.n	80012de <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 80012d8:	f06f 0304 	mvn.w	r3, #4
 80012dc:	e060      	b.n	80013a0 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d101      	bne.n	80012ec <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e059      	b.n	80013a0 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	6810      	ldr	r0, [r2, #0]
 80012f4:	f107 020c 	add.w	r2, r7, #12
 80012f8:	2100      	movs	r1, #0
 80012fa:	4798      	blx	r3
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	da02      	bge.n	8001308 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8001302:	f06f 0304 	mvn.w	r3, #4
 8001306:	e04b      	b.n	80013a0 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d11b      	bne.n	800134a <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d006      	beq.n	800132a <DP83848_GetLinkState+0x90>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8001326:	2302      	movs	r3, #2
 8001328:	e03a      	b.n	80013a0 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8001334:	2303      	movs	r3, #3
 8001336:	e033      	b.n	80013a0 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8001342:	2304      	movs	r3, #4
 8001344:	e02c      	b.n	80013a0 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8001346:	2305      	movs	r3, #5
 8001348:	e02a      	b.n	80013a0 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	6810      	ldr	r0, [r2, #0]
 8001352:	f107 020c 	add.w	r2, r7, #12
 8001356:	2110      	movs	r1, #16
 8001358:	4798      	blx	r3
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	da02      	bge.n	8001366 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8001360:	f06f 0304 	mvn.w	r3, #4
 8001364:	e01c      	b.n	80013a0 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8001370:	2306      	movs	r3, #6
 8001372:	e015      	b.n	80013a0 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0306 	and.w	r3, r3, #6
 800137a:	2b04      	cmp	r3, #4
 800137c:	d101      	bne.n	8001382 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 800137e:	2302      	movs	r3, #2
 8001380:	e00e      	b.n	80013a0 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f003 0306 	and.w	r3, r3, #6
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 800138c:	2303      	movs	r3, #3
 800138e:	e007      	b.n	80013a0 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 0306 	and.w	r3, r3, #6
 8001396:	2b06      	cmp	r3, #6
 8001398:	d101      	bne.n	800139e <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 800139a:	2304      	movs	r3, #4
 800139c:	e000      	b.n	80013a0 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 800139e:	2305      	movs	r3, #5
    }
  }
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_Init+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0d      	ldr	r2, [pc, #52]	; (80013e8 <HAL_Init+0x40>)
 80013b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <HAL_Init+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <HAL_Init+0x40>)
 80013be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <HAL_Init+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a07      	ldr	r2, [pc, #28]	; (80013e8 <HAL_Init+0x40>)
 80013ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d0:	2003      	movs	r0, #3
 80013d2:	f000 f8fc 	bl	80015ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d6:	200f      	movs	r0, #15
 80013d8:	f7ff fc9e 	bl	8000d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013dc:	f7ff fbae 	bl	8000b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023c00 	.word	0x40023c00

080013ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_IncTick+0x20>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_IncTick+0x24>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	4a04      	ldr	r2, [pc, #16]	; (8001410 <HAL_IncTick+0x24>)
 80013fe:	6013      	str	r3, [r2, #0]
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000008 	.word	0x20000008
 8001410:	200006e8 	.word	0x200006e8

08001414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return uwTick;
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <HAL_GetTick+0x14>)
 800141a:	681b      	ldr	r3, [r3, #0]
}
 800141c:	4618      	mov	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	200006e8 	.word	0x200006e8

0800142c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001434:	f7ff ffee 	bl	8001414 <HAL_GetTick>
 8001438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001444:	d005      	beq.n	8001452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_Delay+0x44>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4413      	add	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001452:	bf00      	nop
 8001454:	f7ff ffde 	bl	8001414 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	429a      	cmp	r2, r3
 8001462:	d8f7      	bhi.n	8001454 <HAL_Delay+0x28>
  {
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000008 	.word	0x20000008

08001474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001490:	4013      	ands	r3, r2
 8001492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800149c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a6:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	60d3      	str	r3, [r2, #12]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <__NVIC_GetPriorityGrouping+0x18>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	0a1b      	lsrs	r3, r3, #8
 80014c6:	f003 0307 	and.w	r3, r3, #7
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	db0b      	blt.n	8001502 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	f003 021f 	and.w	r2, r3, #31
 80014f0:	4907      	ldr	r1, [pc, #28]	; (8001510 <__NVIC_EnableIRQ+0x38>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	095b      	lsrs	r3, r3, #5
 80014f8:	2001      	movs	r0, #1
 80014fa:	fa00 f202 	lsl.w	r2, r0, r2
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000e100 	.word	0xe000e100

08001514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	2b00      	cmp	r3, #0
 8001526:	db0a      	blt.n	800153e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	b2da      	uxtb	r2, r3
 800152c:	490c      	ldr	r1, [pc, #48]	; (8001560 <__NVIC_SetPriority+0x4c>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	0112      	lsls	r2, r2, #4
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	440b      	add	r3, r1
 8001538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800153c:	e00a      	b.n	8001554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4908      	ldr	r1, [pc, #32]	; (8001564 <__NVIC_SetPriority+0x50>)
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	3b04      	subs	r3, #4
 800154c:	0112      	lsls	r2, r2, #4
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	440b      	add	r3, r1
 8001552:	761a      	strb	r2, [r3, #24]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000e100 	.word	0xe000e100
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f1c3 0307 	rsb	r3, r3, #7
 8001582:	2b04      	cmp	r3, #4
 8001584:	bf28      	it	cs
 8001586:	2304      	movcs	r3, #4
 8001588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3304      	adds	r3, #4
 800158e:	2b06      	cmp	r3, #6
 8001590:	d902      	bls.n	8001598 <NVIC_EncodePriority+0x30>
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3b03      	subs	r3, #3
 8001596:	e000      	b.n	800159a <NVIC_EncodePriority+0x32>
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	f04f 32ff 	mov.w	r2, #4294967295
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43da      	mvns	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	401a      	ands	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b0:	f04f 31ff 	mov.w	r1, #4294967295
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	43d9      	mvns	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	4313      	orrs	r3, r2
         );
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3724      	adds	r7, #36	; 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ff4c 	bl	8001474 <__NVIC_SetPriorityGrouping>
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f6:	f7ff ff61 	bl	80014bc <__NVIC_GetPriorityGrouping>
 80015fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	68b9      	ldr	r1, [r7, #8]
 8001600:	6978      	ldr	r0, [r7, #20]
 8001602:	f7ff ffb1 	bl	8001568 <NVIC_EncodePriority>
 8001606:	4602      	mov	r2, r0
 8001608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160c:	4611      	mov	r1, r2
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff ff80 	bl	8001514 <__NVIC_SetPriority>
}
 8001614:	bf00      	nop
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff ff54 	bl	80014d8 <__NVIC_EnableIRQ>
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e06c      	b.n	8001724 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001650:	2b00      	cmp	r3, #0
 8001652:	d106      	bne.n	8001662 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2223      	movs	r2, #35	; 0x23
 8001658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f003 f8cf 	bl	8004800 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	4b31      	ldr	r3, [pc, #196]	; (800172c <HAL_ETH_Init+0xf4>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	4a30      	ldr	r2, [pc, #192]	; (800172c <HAL_ETH_Init+0xf4>)
 800166c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001670:	6453      	str	r3, [r2, #68]	; 0x44
 8001672:	4b2e      	ldr	r3, [pc, #184]	; (800172c <HAL_ETH_Init+0xf4>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800167e:	4b2c      	ldr	r3, [pc, #176]	; (8001730 <HAL_ETH_Init+0xf8>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	4a2b      	ldr	r2, [pc, #172]	; (8001730 <HAL_ETH_Init+0xf8>)
 8001684:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001688:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800168a:	4b29      	ldr	r3, [pc, #164]	; (8001730 <HAL_ETH_Init+0xf8>)
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	4927      	ldr	r1, [pc, #156]	; (8001730 <HAL_ETH_Init+0xf8>)
 8001694:	4313      	orrs	r3, r2
 8001696:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001698:	4b25      	ldr	r3, [pc, #148]	; (8001730 <HAL_ETH_Init+0xf8>)
 800169a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016b4:	f7ff feae 	bl	8001414 <HAL_GetTick>
 80016b8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016ba:	e011      	b.n	80016e0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80016bc:	f7ff feaa 	bl	8001414 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016ca:	d909      	bls.n	80016e0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2204      	movs	r2, #4
 80016d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	22e0      	movs	r2, #224	; 0xe0
 80016d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e021      	b.n	8001724 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1e4      	bne.n	80016bc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 ffaa 	bl	800264c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f001 f851 	bl	80027a0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f001 f8a7 	bl	8002852 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	461a      	mov	r2, r3
 800170a:	2100      	movs	r1, #0
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f001 f80f 	bl	8002730 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2210      	movs	r2, #16
 800171e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40023800 	.word	0x40023800
 8001730:	40013800 	.word	0x40013800

08001734 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001742:	2b10      	cmp	r3, #16
 8001744:	d150      	bne.n	80017e8 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2223      	movs	r2, #35	; 0x23
 800174a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2204      	movs	r2, #4
 8001752:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 fa79 	bl	8001c4c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f042 0208 	orr.w	r2, r2, #8
 8001768:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001772:	2001      	movs	r0, #1
 8001774:	f7ff fe5a 	bl	800142c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f042 0204 	orr.w	r2, r2, #4
 800178e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001798:	2001      	movs	r0, #1
 800179a:	f7ff fe47 	bl	800142c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 fdf1 	bl	800238e <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017c2:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	f043 0302 	orr.w	r3, r3, #2
 80017d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017da:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2223      	movs	r2, #35	; 0x23
 80017e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	e000      	b.n	80017ea <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
  }
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b084      	sub	sp, #16
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001800:	2b10      	cmp	r3, #16
 8001802:	d17f      	bne.n	8001904 <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2223      	movs	r2, #35	; 0x23
 8001808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001820:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6812      	ldr	r2, [r2, #0]
 800182e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001832:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001836:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 800184a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2204      	movs	r2, #4
 8001852:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f9f9 	bl	8001c4c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f042 0208 	orr.w	r2, r2, #8
 8001868:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001872:	2001      	movs	r0, #1
 8001874:	f7ff fdda 	bl	800142c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 0204 	orr.w	r2, r2, #4
 800188e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001898:	2001      	movs	r0, #1
 800189a:	f7ff fdc7 	bl	800142c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 fd71 	bl	800238e <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018c2:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	f043 0302 	orr.w	r3, r3, #2
 80018d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018da:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6812      	ldr	r2, [r2, #0]
 80018ea:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 80018ee:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 80018f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018f6:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2223      	movs	r2, #35	; 0x23
 80018fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	e000      	b.n	8001906 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
  }
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800191c:	2b23      	cmp	r3, #35	; 0x23
 800191e:	d170      	bne.n	8001a02 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2223      	movs	r2, #35	; 0x23
 8001924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6812      	ldr	r2, [r2, #0]
 8001936:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 800193a:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 800193e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001942:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6812      	ldr	r2, [r2, #0]
 8001952:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001956:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800195a:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	f023 0302 	bic.w	r3, r3, #2
 800196e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001972:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 0204 	bic.w	r2, r2, #4
 8001982:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800198c:	2001      	movs	r0, #1
 800198e:	f7ff fd4d 	bl	800142c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 fcf7 	bl	800238e <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0208 	bic.w	r2, r2, #8
 80019ae:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019b8:	2001      	movs	r0, #1
 80019ba:	f7ff fd37 	bl	800142c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	e00e      	b.n	80019ea <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	3212      	adds	r2, #18
 80019d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d6:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	3301      	adds	r3, #1
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d9ed      	bls.n	80019cc <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2210      	movs	r2, #16
 80019fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e000      	b.n	8001a04 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
  }
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d109      	bne.n	8001a30 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a22:	f043 0201 	orr.w	r2, r3, #1
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e045      	b.n	8001abc <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a36:	2b23      	cmp	r3, #35	; 0x23
 8001a38:	d13f      	bne.n	8001aba <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001a42:	2201      	movs	r2, #1
 8001a44:	6839      	ldr	r1, [r7, #0]
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 ff70 	bl	800292c <ETH_Prepare_Tx_Descriptors>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d009      	beq.n	8001a66 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a58:	f043 0202 	orr.w	r2, r3, #2
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e02a      	b.n	8001abc <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a66:	f3bf 8f4f 	dsb	sy
}
 8001a6a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	629a      	str	r2, [r3, #40]	; 0x28
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d904      	bls.n	8001a88 <HAL_ETH_Transmit_IT+0x7c>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a82:	1f1a      	subs	r2, r3, #4
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00d      	beq.n	8001ab6 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	2304      	movs	r3, #4
 8001aa6:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	e000      	b.n	8001abc <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
  }
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d109      	bne.n	8001af0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae2:	f043 0201 	orr.w	r2, r3, #1
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0a8      	b.n	8001c42 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001af6:	2b23      	cmp	r3, #35	; 0x23
 8001af8:	d001      	beq.n	8001afe <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e0a1      	b.n	8001c42 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b02:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	3212      	adds	r2, #18
 8001b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b0e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b14:	f1c3 0304 	rsb	r3, r3, #4
 8001b18:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001b1a:	e06a      	b.n	8001bf2 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d007      	beq.n	8001b38 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	699a      	ldr	r2, [r3, #24]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	69da      	ldr	r2, [r3, #28]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d103      	bne.n	8001b4c <HAL_ETH_ReadData+0x88>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d040      	beq.n	8001bce <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00c      	beq.n	8001b90 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	0c1b      	lsrs	r3, r3, #16
 8001b7c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b80:	3b04      	subs	r3, #4
 8001b82:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001ba8:	461a      	mov	r2, r3
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	f002 ffe1 	bl	8004b74 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	441a      	add	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	61fb      	str	r3, [r7, #28]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d902      	bls.n	8001be0 <HAL_ETH_ReadData+0x11c>
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3b04      	subs	r3, #4
 8001bde:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	3212      	adds	r2, #18
 8001be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bea:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	db06      	blt.n	8001c08 <HAL_ETH_ReadData+0x144>
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d202      	bcs.n	8001c08 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d089      	beq.n	8001b1c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	441a      	add	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d002      	beq.n	8001c22 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f815 	bl	8001c4c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69fa      	ldr	r2, [r7, #28]
 8001c26:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d108      	bne.n	8001c40 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	e000      	b.n	8001c42 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3720      	adds	r7, #32
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c60:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	3212      	adds	r2, #18
 8001c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c72:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001c74:	e040      	b.n	8001cf8 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d112      	bne.n	8001ca4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001c7e:	f107 030c 	add.w	r3, r7, #12
 8001c82:	4618      	mov	r0, r3
 8001c84:	f002 ff46 	bl	8004b14 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d102      	bne.n	8001c94 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	74fb      	strb	r3, [r7, #19]
 8001c92:	e007      	b.n	8001ca4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	461a      	mov	r2, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001ca4:	7cfb      	ldrb	r3, [r7, #19]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d026      	beq.n	8001cf8 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d103      	bne.n	8001cba <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	4a1e      	ldr	r2, [pc, #120]	; (8001d30 <ETH_UpdateDescriptor+0xe4>)
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	e003      	b.n	8001cc2 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001cc0:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001cc2:	f3bf 8f5f 	dmb	sy
}
 8001cc6:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	d902      	bls.n	8001ce6 <ETH_UpdateDescriptor+0x9a>
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	3b04      	subs	r3, #4
 8001ce4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69fa      	ldr	r2, [r7, #28]
 8001cea:	3212      	adds	r2, #18
 8001cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf0:	617b      	str	r3, [r7, #20]
      desccount--;
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <ETH_UpdateDescriptor+0xb8>
 8001cfe:	7cfb      	ldrb	r3, [r7, #19]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1b8      	bne.n	8001c76 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d00c      	beq.n	8001d28 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d16:	461a      	mov	r2, r3
 8001d18:	2300      	movs	r3, #0
 8001d1a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001d28:	bf00      	nop
 8001d2a:	3720      	adds	r7, #32
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	800045f8 	.word	0x800045f8

08001d34 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3318      	adds	r3, #24
 8001d40:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d46:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001d52:	e03f      	b.n	8001dd4 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	3304      	adds	r3, #4
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d106      	bne.n	8001d7c <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	3301      	adds	r3, #1
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001d7c:	7bbb      	ldrb	r3, [r7, #14]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d028      	beq.n	8001dd4 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68d9      	ldr	r1, [r3, #12]
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	440b      	add	r3, r1
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	db1b      	blt.n	8001dd0 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f002 ff25 	bl	8004bf4 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	3304      	adds	r3, #4
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	2200      	movs	r2, #0
 8001db6:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001dce:	e001      	b.n	8001dd4 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d002      	beq.n	8001de0 <HAL_ETH_ReleaseTxPacket+0xac>
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1b9      	bne.n	8001d54 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e02:	2b40      	cmp	r3, #64	; 0x40
 8001e04:	d112      	bne.n	8001e2c <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e14:	2b40      	cmp	r3, #64	; 0x40
 8001e16:	d109      	bne.n	8001e2c <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b50      	ldr	r3, [pc, #320]	; (8001f64 <HAL_ETH_IRQHandler+0x178>)
 8001e24:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f002 fa4e 	bl	80042c8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d113      	bne.n	8001e66 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d10a      	bne.n	8001e66 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e58:	461a      	mov	r2, r3
 8001e5a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001e5e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f002 fa41 	bl	80042e8 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e78:	d14c      	bne.n	8001f14 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e8c:	d142      	bne.n	8001f14 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e94:	f043 0208 	orr.w	r2, r3, #8
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eb0:	d11a      	bne.n	8001ee8 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	4b2a      	ldr	r3, [pc, #168]	; (8001f68 <HAL_ETH_IRQHandler+0x17c>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001ed8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001edc:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	22e0      	movs	r2, #224	; 0xe0
 8001ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001ee6:	e012      	b.n	8001f0e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef0:	695a      	ldr	r2, [r3, #20]
 8001ef2:	f248 6380 	movw	r3, #34432	; 0x8680
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f06:	461a      	mov	r2, r3
 8001f08:	f248 6380 	movw	r3, #34432	; 0x8680
 8001f0c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f002 f9fa 	bl	8004308 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d10e      	bne.n	8001f40 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f28:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f81c 	bl	8001f70 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001f40:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <HAL_ETH_IRQHandler+0x180>)
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d006      	beq.n	8001f5a <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001f4c:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <HAL_ETH_IRQHandler+0x180>)
 8001f4e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f52:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f815 	bl	8001f84 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	00010040 	.word	0x00010040
 8001f68:	007e2000 	.word	0x007e2000
 8001f6c:	40013c00 	.word	0x40013c00

08001f70 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f003 031c 	and.w	r3, r3, #28
 8001fb4:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	02db      	lsls	r3, r3, #11
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	019b      	lsls	r3, r3, #6
 8001fc6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f023 0302 	bic.w	r3, r3, #2
 8001fd6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001fe8:	f7ff fa14 	bl	8001414 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001fee:	e00d      	b.n	800200c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001ff0:	f7ff fa10 	bl	8001414 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffe:	d301      	bcc.n	8002004 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e010      	b.n	8002026 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1ec      	bne.n	8001ff0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	b29b      	uxth	r3, r3
 800201e:	461a      	mov	r2, r3
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b086      	sub	sp, #24
 8002032:	af00      	add	r7, sp, #0
 8002034:	60f8      	str	r0, [r7, #12]
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f003 031c 	and.w	r3, r3, #28
 800204a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	02db      	lsls	r3, r3, #11
 8002050:	b29b      	uxth	r3, r3
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	4313      	orrs	r3, r2
 8002056:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	019b      	lsls	r3, r3, #6
 800205c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	4313      	orrs	r3, r2
 8002064:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002088:	f7ff f9c4 	bl	8001414 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800208e:	e00d      	b.n	80020ac <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002090:	f7ff f9c0 	bl	8001414 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209e:	d301      	bcc.n	80020a4 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e009      	b.n	80020b8 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1ec      	bne.n	8002090 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0d9      	b.n	8002288 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf14      	ite	ne
 80020e2:	2301      	movne	r3, #1
 80020e4:	2300      	moveq	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002108:	2b00      	cmp	r3, #0
 800210a:	bf0c      	ite	eq
 800210c:	2301      	moveq	r3, #1
 800210e:	2300      	movne	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	461a      	mov	r2, r3
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002124:	2b00      	cmp	r3, #0
 8002126:	bf14      	ite	ne
 8002128:	2301      	movne	r3, #1
 800212a:	2300      	moveq	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800213e:	2b00      	cmp	r3, #0
 8002140:	bf0c      	ite	eq
 8002142:	2301      	moveq	r3, #1
 8002144:	2300      	movne	r3, #0
 8002146:	b2db      	uxtb	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf14      	ite	ne
 800215c:	2301      	movne	r3, #1
 800215e:	2300      	moveq	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	461a      	mov	r2, r3
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218e:	2b00      	cmp	r3, #0
 8002190:	bf0c      	ite	eq
 8002192:	2301      	moveq	r3, #1
 8002194:	2300      	movne	r3, #0
 8002196:	b2db      	uxtb	r3, r3
 8002198:	461a      	mov	r2, r3
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	bf0c      	ite	eq
 80021ac:	2301      	moveq	r3, #1
 80021ae:	2300      	movne	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	461a      	mov	r2, r3
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	bf14      	ite	ne
 80021c6:	2301      	movne	r3, #1
 80021c8:	2300      	moveq	r3, #0
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	461a      	mov	r2, r3
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	bf14      	ite	ne
 80021ee:	2301      	movne	r3, #1
 80021f0:	2300      	moveq	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	bf14      	ite	ne
 8002208:	2301      	movne	r3, #1
 800220a:	2300      	moveq	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	461a      	mov	r2, r3
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002220:	2b00      	cmp	r3, #0
 8002222:	bf0c      	ite	eq
 8002224:	2301      	moveq	r3, #1
 8002226:	2300      	movne	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	461a      	mov	r2, r3
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	0c1b      	lsrs	r3, r3, #16
 8002248:	b29a      	uxth	r2, r3
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	bf14      	ite	ne
 800225c:	2301      	movne	r3, #1
 800225e:	2300      	moveq	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	461a      	mov	r2, r3
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002274:	2b00      	cmp	r3, #0
 8002276:	bf14      	ite	ne
 8002278:	2301      	movne	r3, #1
 800227a:	2300      	moveq	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e00b      	b.n	80022c0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022ae:	2b10      	cmp	r3, #16
 80022b0:	d105      	bne.n	80022be <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80022b2:	6839      	ldr	r1, [r7, #0]
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f88f 	bl	80023d8 <ETH_SetMACConfig>

    return HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	e000      	b.n	80022c0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
  }
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f023 031c 	bic.w	r3, r3, #28
 80022de:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80022e0:	f001 fa34 	bl	800374c <HAL_RCC_GetHCLKFreq>
 80022e4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	4a1d      	ldr	r2, [pc, #116]	; (8002360 <HAL_ETH_SetMDIOClockRange+0x98>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d908      	bls.n	8002300 <HAL_ETH_SetMDIOClockRange+0x38>
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	4a1c      	ldr	r2, [pc, #112]	; (8002364 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d804      	bhi.n	8002300 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f043 0308 	orr.w	r3, r3, #8
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	e027      	b.n	8002350 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	4a18      	ldr	r2, [pc, #96]	; (8002364 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d908      	bls.n	800231a <HAL_ETH_SetMDIOClockRange+0x52>
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	4a17      	ldr	r2, [pc, #92]	; (8002368 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d204      	bcs.n	800231a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f043 030c 	orr.w	r3, r3, #12
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	e01a      	b.n	8002350 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	4a12      	ldr	r2, [pc, #72]	; (8002368 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d303      	bcc.n	800232a <HAL_ETH_SetMDIOClockRange+0x62>
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	4a11      	ldr	r2, [pc, #68]	; (800236c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d911      	bls.n	800234e <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	4a0f      	ldr	r2, [pc, #60]	; (800236c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d908      	bls.n	8002344 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	4a0e      	ldr	r2, [pc, #56]	; (8002370 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d804      	bhi.n	8002344 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f043 0304 	orr.w	r3, r3, #4
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	e005      	b.n	8002350 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f043 0310 	orr.w	r3, r3, #16
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	e000      	b.n	8002350 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800234e:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	611a      	str	r2, [r3, #16]
}
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	01312cff 	.word	0x01312cff
 8002364:	02160ebf 	.word	0x02160ebf
 8002368:	03938700 	.word	0x03938700
 800236c:	05f5e0ff 	.word	0x05f5e0ff
 8002370:	08f0d17f 	.word	0x08f0d17f

08002374 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b084      	sub	sp, #16
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023b0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023be:	2001      	movs	r0, #1
 80023c0:	f7ff f834 	bl	800142c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023ce:	6193      	str	r3, [r2, #24]
}
 80023d0:	bf00      	nop
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4b51      	ldr	r3, [pc, #324]	; (8002534 <ETH_SetMACConfig+0x15c>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	7c1b      	ldrb	r3, [r3, #16]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d102      	bne.n	8002400 <ETH_SetMACConfig+0x28>
 80023fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80023fe:	e000      	b.n	8002402 <ETH_SetMACConfig+0x2a>
 8002400:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	7c5b      	ldrb	r3, [r3, #17]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d102      	bne.n	8002410 <ETH_SetMACConfig+0x38>
 800240a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800240e:	e000      	b.n	8002412 <ETH_SetMACConfig+0x3a>
 8002410:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002412:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002418:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	7fdb      	ldrb	r3, [r3, #31]
 800241e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002420:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002426:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	7f92      	ldrb	r2, [r2, #30]
 800242c:	2a00      	cmp	r2, #0
 800242e:	d102      	bne.n	8002436 <ETH_SetMACConfig+0x5e>
 8002430:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002434:	e000      	b.n	8002438 <ETH_SetMACConfig+0x60>
 8002436:	2200      	movs	r2, #0
                        macconf->Speed |
 8002438:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	7f1b      	ldrb	r3, [r3, #28]
 800243e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002440:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002446:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	791b      	ldrb	r3, [r3, #4]
 800244c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800244e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002456:	2a00      	cmp	r2, #0
 8002458:	d102      	bne.n	8002460 <ETH_SetMACConfig+0x88>
 800245a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800245e:	e000      	b.n	8002462 <ETH_SetMACConfig+0x8a>
 8002460:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002462:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	7bdb      	ldrb	r3, [r3, #15]
 8002468:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800246a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002470:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002478:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800247a:	4313      	orrs	r3, r2
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002492:	2001      	movs	r0, #1
 8002494:	f7fe ffca 	bl	800142c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	f64f 7341 	movw	r3, #65345	; 0xff41
 80024ae:	4013      	ands	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80024be:	2a00      	cmp	r2, #0
 80024c0:	d101      	bne.n	80024c6 <ETH_SetMACConfig+0xee>
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	e000      	b.n	80024c8 <ETH_SetMACConfig+0xf0>
 80024c6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024c8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80024ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80024d6:	2a01      	cmp	r2, #1
 80024d8:	d101      	bne.n	80024de <ETH_SetMACConfig+0x106>
 80024da:	2208      	movs	r2, #8
 80024dc:	e000      	b.n	80024e0 <ETH_SetMACConfig+0x108>
 80024de:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80024e0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80024e8:	2a01      	cmp	r2, #1
 80024ea:	d101      	bne.n	80024f0 <ETH_SetMACConfig+0x118>
 80024ec:	2204      	movs	r2, #4
 80024ee:	e000      	b.n	80024f2 <ETH_SetMACConfig+0x11a>
 80024f0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80024fa:	2a01      	cmp	r2, #1
 80024fc:	d101      	bne.n	8002502 <ETH_SetMACConfig+0x12a>
 80024fe:	2202      	movs	r2, #2
 8002500:	e000      	b.n	8002504 <ETH_SetMACConfig+0x12c>
 8002502:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002504:	4313      	orrs	r3, r2
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4313      	orrs	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800251c:	2001      	movs	r0, #1
 800251e:	f7fe ff85 	bl	800142c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	619a      	str	r2, [r3, #24]
}
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	ff20810f 	.word	0xff20810f

08002538 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4b3d      	ldr	r3, [pc, #244]	; (8002648 <ETH_SetDMAConfig+0x110>)
 8002552:	4013      	ands	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	7b1b      	ldrb	r3, [r3, #12]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d102      	bne.n	8002564 <ETH_SetDMAConfig+0x2c>
 800255e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002562:	e000      	b.n	8002566 <ETH_SetDMAConfig+0x2e>
 8002564:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	7b5b      	ldrb	r3, [r3, #13]
 800256a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800256c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	7f52      	ldrb	r2, [r2, #29]
 8002572:	2a00      	cmp	r2, #0
 8002574:	d102      	bne.n	800257c <ETH_SetDMAConfig+0x44>
 8002576:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800257a:	e000      	b.n	800257e <ETH_SetDMAConfig+0x46>
 800257c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800257e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	7b9b      	ldrb	r3, [r3, #14]
 8002584:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002586:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800258c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	7f1b      	ldrb	r3, [r3, #28]
 8002592:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002594:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	7f9b      	ldrb	r3, [r3, #30]
 800259a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800259c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80025a2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025aa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025ac:	4313      	orrs	r3, r2
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025bc:	461a      	mov	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025ce:	2001      	movs	r0, #1
 80025d0:	f7fe ff2c 	bl	800142c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025dc:	461a      	mov	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	791b      	ldrb	r3, [r3, #4]
 80025e6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025ec:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80025f2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025f8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002600:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002602:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002608:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800260a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002610:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800261a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800261e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800262c:	2001      	movs	r0, #1
 800262e:	f7fe fefd 	bl	800142c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800263a:	461a      	mov	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6013      	str	r3, [r2, #0]
}
 8002640:	bf00      	nop
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	f8de3f23 	.word	0xf8de3f23

0800264c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b0a6      	sub	sp, #152	; 0x98
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002654:	2301      	movs	r3, #1
 8002656:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800265a:	2301      	movs	r3, #1
 800265c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002660:	2300      	movs	r3, #0
 8002662:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002664:	2300      	movs	r3, #0
 8002666:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800266a:	2301      	movs	r3, #1
 800266c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002670:	2300      	movs	r3, #0
 8002672:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002676:	2301      	movs	r3, #1
 8002678:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800267c:	2300      	movs	r3, #0
 800267e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002682:	2300      	movs	r3, #0
 8002684:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002688:	2300      	movs	r3, #0
 800268a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800268c:	2300      	movs	r3, #0
 800268e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002692:	2300      	movs	r3, #0
 8002694:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002696:	2300      	movs	r3, #0
 8002698:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800269c:	2300      	movs	r3, #0
 800269e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80026a8:	2300      	movs	r3, #0
 80026aa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80026ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026b2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80026b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80026ba:	2300      	movs	r3, #0
 80026bc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80026c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026c4:	4619      	mov	r1, r3
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff fe86 	bl	80023d8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80026cc:	2301      	movs	r3, #1
 80026ce:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80026d0:	2301      	movs	r3, #1
 80026d2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80026d4:	2301      	movs	r3, #1
 80026d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80026da:	2301      	movs	r3, #1
 80026dc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80026e8:	2300      	movs	r3, #0
 80026ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80026ee:	2300      	movs	r3, #0
 80026f0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80026f2:	2301      	movs	r3, #1
 80026f4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80026f8:	2301      	movs	r3, #1
 80026fa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80026fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002700:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002702:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002706:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002708:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800270c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800270e:	2301      	movs	r3, #1
 8002710:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002714:	2300      	movs	r3, #0
 8002716:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002718:	2300      	movs	r3, #0
 800271a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800271c:	f107 0308 	add.w	r3, r7, #8
 8002720:	4619      	mov	r1, r3
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff ff08 	bl	8002538 <ETH_SetDMAConfig>
}
 8002728:	bf00      	nop
 800272a:	3798      	adds	r7, #152	; 0x98
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3305      	adds	r3, #5
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	021b      	lsls	r3, r3, #8
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	3204      	adds	r2, #4
 8002748:	7812      	ldrb	r2, [r2, #0]
 800274a:	4313      	orrs	r3, r2
 800274c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	4b11      	ldr	r3, [pc, #68]	; (8002798 <ETH_MACAddressConfig+0x68>)
 8002752:	4413      	add	r3, r2
 8002754:	461a      	mov	r2, r3
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3303      	adds	r3, #3
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	061a      	lsls	r2, r3, #24
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3302      	adds	r3, #2
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	041b      	lsls	r3, r3, #16
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3301      	adds	r3, #1
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	021b      	lsls	r3, r3, #8
 8002774:	4313      	orrs	r3, r2
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	7812      	ldrb	r2, [r2, #0]
 800277a:	4313      	orrs	r3, r2
 800277c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <ETH_MACAddressConfig+0x6c>)
 8002782:	4413      	add	r3, r2
 8002784:	461a      	mov	r2, r3
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	6013      	str	r3, [r2, #0]
}
 800278a:	bf00      	nop
 800278c:	371c      	adds	r7, #28
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40028040 	.word	0x40028040
 800279c:	40028044 	.word	0x40028044

080027a0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027a8:	2300      	movs	r3, #0
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	e03e      	b.n	800282c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68d9      	ldr	r1, [r3, #12]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	440b      	add	r3, r1
 80027be:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2200      	movs	r2, #0
 80027ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2200      	movs	r2, #0
 80027d6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80027d8:	68b9      	ldr	r1, [r7, #8]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	3206      	adds	r2, #6
 80027e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d80c      	bhi.n	8002810 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68d9      	ldr	r1, [r3, #12]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	440b      	add	r3, r1
 8002808:	461a      	mov	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	e004      	b.n	800281a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	461a      	mov	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	3301      	adds	r3, #1
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2b03      	cmp	r3, #3
 8002830:	d9bd      	bls.n	80027ae <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002844:	611a      	str	r2, [r3, #16]
}
 8002846:	bf00      	nop
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002852:	b480      	push	{r7}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	e046      	b.n	80028ee <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6919      	ldr	r1, [r3, #16]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	440b      	add	r3, r1
 8002870:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2200      	movs	r2, #0
 800287c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2200      	movs	r2, #0
 8002882:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2200      	movs	r2, #0
 8002888:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2200      	movs	r2, #0
 800288e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2200      	movs	r2, #0
 8002894:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800289c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80028a4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80028b2:	68b9      	ldr	r1, [r7, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	3212      	adds	r2, #18
 80028ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d80c      	bhi.n	80028de <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6919      	ldr	r1, [r3, #16]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	440b      	add	r3, r1
 80028d6:	461a      	mov	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	60da      	str	r2, [r3, #12]
 80028dc:	e004      	b.n	80028e8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	461a      	mov	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	3301      	adds	r3, #1
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d9b5      	bls.n	8002860 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691a      	ldr	r2, [r3, #16]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800291e:	60da      	str	r2, [r3, #12]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800292c:	b480      	push	{r7}
 800292e:	b08d      	sub	sp, #52	; 0x34
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	3318      	adds	r3, #24
 800293c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800294a:	2300      	movs	r3, #0
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002956:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800296a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800296e:	d007      	beq.n	8002980 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002974:	3304      	adds	r3, #4
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002980:	2302      	movs	r3, #2
 8002982:	e103      	b.n	8002b8c <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	3301      	adds	r3, #1
 8002988:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800299c:	f023 031f 	bic.w	r3, r3, #31
 80029a0:	69fa      	ldr	r2, [r7, #28]
 80029a2:	6852      	ldr	r2, [r2, #4]
 80029a4:	431a      	orrs	r2, r3
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d008      	beq.n	80029c8 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	431a      	orrs	r2, r3
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d008      	beq.n	80029e6 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	431a      	orrs	r2, r3
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d005      	beq.n	80029fe <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002a0a:	f3bf 8f5f 	dmb	sy
}
 8002a0e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002a1c:	e084      	b.n	8002b28 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d006      	beq.n	8002a3e <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	e005      	b.n	8002a4a <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d902      	bls.n	8002a5c <ETH_Prepare_Tx_Descriptors+0x130>
 8002a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a58:	3b04      	subs	r3, #4
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a64:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a7e:	d007      	beq.n	8002a90 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a84:	3304      	adds	r3, #4
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d029      	beq.n	8002ae4 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a9c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aa2:	e019      	b.n	8002ad8 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002aa4:	f3bf 8f5f 	dmb	sy
}
 8002aa8:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab8:	3301      	adds	r3, #1
 8002aba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	d902      	bls.n	8002ac8 <ETH_Prepare_Tx_Descriptors+0x19c>
 8002ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac4:	3b04      	subs	r3, #4
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad0:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d3e1      	bcc.n	8002aa4 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e053      	b.n	8002b8c <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002b02:	f023 031f 	bic.w	r3, r3, #31
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	6852      	ldr	r2, [r2, #4]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	3301      	adds	r3, #1
 8002b14:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b16:	f3bf 8f5f 	dmb	sy
}
 8002b1a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f47f af76 	bne.w	8002a1e <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d006      	beq.n	8002b46 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	e005      	b.n	8002b52 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b62:	6979      	ldr	r1, [r7, #20]
 8002b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b66:	3304      	adds	r3, #4
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b72:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b74:	b672      	cpsid	i
}
 8002b76:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	4413      	add	r3, r2
 8002b80:	1c5a      	adds	r2, r3, #1
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002b86:	b662      	cpsie	i
}
 8002b88:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3734      	adds	r7, #52	; 0x34
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b089      	sub	sp, #36	; 0x24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
 8002bb2:	e16b      	b.n	8002e8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	f040 815a 	bne.w	8002e86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d005      	beq.n	8002bea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d130      	bne.n	8002c4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c20:	2201      	movs	r2, #1
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	091b      	lsrs	r3, r3, #4
 8002c36:	f003 0201 	and.w	r2, r3, #1
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d017      	beq.n	8002c88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	2203      	movs	r2, #3
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d123      	bne.n	8002cdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	08da      	lsrs	r2, r3, #3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3208      	adds	r2, #8
 8002c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	220f      	movs	r2, #15
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	691a      	ldr	r2, [r3, #16]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	08da      	lsrs	r2, r3, #3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3208      	adds	r2, #8
 8002cd6:	69b9      	ldr	r1, [r7, #24]
 8002cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 0203 	and.w	r2, r3, #3
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 80b4 	beq.w	8002e86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	4b60      	ldr	r3, [pc, #384]	; (8002ea4 <HAL_GPIO_Init+0x30c>)
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	4a5f      	ldr	r2, [pc, #380]	; (8002ea4 <HAL_GPIO_Init+0x30c>)
 8002d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ea4 <HAL_GPIO_Init+0x30c>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d3a:	4a5b      	ldr	r2, [pc, #364]	; (8002ea8 <HAL_GPIO_Init+0x310>)
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	089b      	lsrs	r3, r3, #2
 8002d40:	3302      	adds	r3, #2
 8002d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	220f      	movs	r2, #15
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a52      	ldr	r2, [pc, #328]	; (8002eac <HAL_GPIO_Init+0x314>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d02b      	beq.n	8002dbe <HAL_GPIO_Init+0x226>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a51      	ldr	r2, [pc, #324]	; (8002eb0 <HAL_GPIO_Init+0x318>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d025      	beq.n	8002dba <HAL_GPIO_Init+0x222>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a50      	ldr	r2, [pc, #320]	; (8002eb4 <HAL_GPIO_Init+0x31c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d01f      	beq.n	8002db6 <HAL_GPIO_Init+0x21e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a4f      	ldr	r2, [pc, #316]	; (8002eb8 <HAL_GPIO_Init+0x320>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d019      	beq.n	8002db2 <HAL_GPIO_Init+0x21a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a4e      	ldr	r2, [pc, #312]	; (8002ebc <HAL_GPIO_Init+0x324>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d013      	beq.n	8002dae <HAL_GPIO_Init+0x216>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a4d      	ldr	r2, [pc, #308]	; (8002ec0 <HAL_GPIO_Init+0x328>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00d      	beq.n	8002daa <HAL_GPIO_Init+0x212>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a4c      	ldr	r2, [pc, #304]	; (8002ec4 <HAL_GPIO_Init+0x32c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d007      	beq.n	8002da6 <HAL_GPIO_Init+0x20e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a4b      	ldr	r2, [pc, #300]	; (8002ec8 <HAL_GPIO_Init+0x330>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d101      	bne.n	8002da2 <HAL_GPIO_Init+0x20a>
 8002d9e:	2307      	movs	r3, #7
 8002da0:	e00e      	b.n	8002dc0 <HAL_GPIO_Init+0x228>
 8002da2:	2308      	movs	r3, #8
 8002da4:	e00c      	b.n	8002dc0 <HAL_GPIO_Init+0x228>
 8002da6:	2306      	movs	r3, #6
 8002da8:	e00a      	b.n	8002dc0 <HAL_GPIO_Init+0x228>
 8002daa:	2305      	movs	r3, #5
 8002dac:	e008      	b.n	8002dc0 <HAL_GPIO_Init+0x228>
 8002dae:	2304      	movs	r3, #4
 8002db0:	e006      	b.n	8002dc0 <HAL_GPIO_Init+0x228>
 8002db2:	2303      	movs	r3, #3
 8002db4:	e004      	b.n	8002dc0 <HAL_GPIO_Init+0x228>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e002      	b.n	8002dc0 <HAL_GPIO_Init+0x228>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <HAL_GPIO_Init+0x228>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	69fa      	ldr	r2, [r7, #28]
 8002dc2:	f002 0203 	and.w	r2, r2, #3
 8002dc6:	0092      	lsls	r2, r2, #2
 8002dc8:	4093      	lsls	r3, r2
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dd0:	4935      	ldr	r1, [pc, #212]	; (8002ea8 <HAL_GPIO_Init+0x310>)
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	089b      	lsrs	r3, r3, #2
 8002dd6:	3302      	adds	r3, #2
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dde:	4b3b      	ldr	r3, [pc, #236]	; (8002ecc <HAL_GPIO_Init+0x334>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	43db      	mvns	r3, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4013      	ands	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e02:	4a32      	ldr	r2, [pc, #200]	; (8002ecc <HAL_GPIO_Init+0x334>)
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e08:	4b30      	ldr	r3, [pc, #192]	; (8002ecc <HAL_GPIO_Init+0x334>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	43db      	mvns	r3, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4013      	ands	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e2c:	4a27      	ldr	r2, [pc, #156]	; (8002ecc <HAL_GPIO_Init+0x334>)
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e32:	4b26      	ldr	r3, [pc, #152]	; (8002ecc <HAL_GPIO_Init+0x334>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e56:	4a1d      	ldr	r2, [pc, #116]	; (8002ecc <HAL_GPIO_Init+0x334>)
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <HAL_GPIO_Init+0x334>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e80:	4a12      	ldr	r2, [pc, #72]	; (8002ecc <HAL_GPIO_Init+0x334>)
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	61fb      	str	r3, [r7, #28]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	2b0f      	cmp	r3, #15
 8002e90:	f67f ae90 	bls.w	8002bb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e94:	bf00      	nop
 8002e96:	bf00      	nop
 8002e98:	3724      	adds	r7, #36	; 0x24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	40013800 	.word	0x40013800
 8002eac:	40020000 	.word	0x40020000
 8002eb0:	40020400 	.word	0x40020400
 8002eb4:	40020800 	.word	0x40020800
 8002eb8:	40020c00 	.word	0x40020c00
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	40021400 	.word	0x40021400
 8002ec4:	40021800 	.word	0x40021800
 8002ec8:	40021c00 	.word	0x40021c00
 8002ecc:	40013c00 	.word	0x40013c00

08002ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	807b      	strh	r3, [r7, #2]
 8002edc:	4613      	mov	r3, r2
 8002ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ee0:	787b      	ldrb	r3, [r7, #1]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ee6:	887a      	ldrh	r2, [r7, #2]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002eec:	e003      	b.n	8002ef6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eee:	887b      	ldrh	r3, [r7, #2]
 8002ef0:	041a      	lsls	r2, r3, #16
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	619a      	str	r2, [r3, #24]
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
	...

08002f04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e267      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d075      	beq.n	800300e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f22:	4b88      	ldr	r3, [pc, #544]	; (8003144 <HAL_RCC_OscConfig+0x240>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 030c 	and.w	r3, r3, #12
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d00c      	beq.n	8002f48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f2e:	4b85      	ldr	r3, [pc, #532]	; (8003144 <HAL_RCC_OscConfig+0x240>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d112      	bne.n	8002f60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f3a:	4b82      	ldr	r3, [pc, #520]	; (8003144 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f46:	d10b      	bne.n	8002f60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f48:	4b7e      	ldr	r3, [pc, #504]	; (8003144 <HAL_RCC_OscConfig+0x240>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d05b      	beq.n	800300c <HAL_RCC_OscConfig+0x108>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d157      	bne.n	800300c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e242      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f68:	d106      	bne.n	8002f78 <HAL_RCC_OscConfig+0x74>
 8002f6a:	4b76      	ldr	r3, [pc, #472]	; (8003144 <HAL_RCC_OscConfig+0x240>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a75      	ldr	r2, [pc, #468]	; (8003144 <HAL_RCC_OscConfig+0x240>)
 8002f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	e01d      	b.n	8002fb4 <HAL_RCC_OscConfig+0xb0>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f80:	d10c      	bne.n	8002f9c <HAL_RCC_OscConfig+0x98>
 8002f82:	4b70      	ldr	r3, [pc, #448]	; (8003144 <HAL_RCC_OscConfig+0x240>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a6f      	ldr	r2, [pc, #444]	; (8003144 <HAL_RCC_OscConfig+0x240>)
 8002f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	4b6d      	ldr	r3, [pc, #436]	; (8003144 <HAL_RCC_OscConfig+0x240>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a6c      	ldr	r2, [pc, #432]	; (8003144 <HAL_RCC_OscConfig+0x240>)
 8002f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	e00b      	b.n	8002fb4 <HAL_RCC_OscConfig+0xb0>
 8002f9c:	4b69      	ldr	r3, [pc, #420]	; (8003144 <HAL_RCC_OscConfig+0x240>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a68      	ldr	r2, [pc, #416]	; (8003144 <HAL_RCC_OscConfig+0x240>)
 8002fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	4b66      	ldr	r3, [pc, #408]	; (8003144 <HAL_RCC_OscConfig+0x240>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a65      	ldr	r2, [pc, #404]	; (8003144 <HAL_RCC_OscConfig+0x240>)
 8002fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d013      	beq.n	8002fe4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbc:	f7fe fa2a 	bl	8001414 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fc4:	f7fe fa26 	bl	8001414 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b64      	cmp	r3, #100	; 0x64
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e207      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd6:	4b5b      	ldr	r3, [pc, #364]	; (8003144 <HAL_RCC_OscConfig+0x240>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0f0      	beq.n	8002fc4 <HAL_RCC_OscConfig+0xc0>
 8002fe2:	e014      	b.n	800300e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe4:	f7fe fa16 	bl	8001414 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fec:	f7fe fa12 	bl	8001414 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b64      	cmp	r3, #100	; 0x64
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e1f3      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ffe:	4b51      	ldr	r3, [pc, #324]	; (8003144 <HAL_RCC_OscConfig+0x240>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0xe8>
 800300a:	e000      	b.n	800300e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800300c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d063      	beq.n	80030e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800301a:	4b4a      	ldr	r3, [pc, #296]	; (8003144 <HAL_RCC_OscConfig+0x240>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00b      	beq.n	800303e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003026:	4b47      	ldr	r3, [pc, #284]	; (8003144 <HAL_RCC_OscConfig+0x240>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800302e:	2b08      	cmp	r3, #8
 8003030:	d11c      	bne.n	800306c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003032:	4b44      	ldr	r3, [pc, #272]	; (8003144 <HAL_RCC_OscConfig+0x240>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d116      	bne.n	800306c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800303e:	4b41      	ldr	r3, [pc, #260]	; (8003144 <HAL_RCC_OscConfig+0x240>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <HAL_RCC_OscConfig+0x152>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d001      	beq.n	8003056 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e1c7      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003056:	4b3b      	ldr	r3, [pc, #236]	; (8003144 <HAL_RCC_OscConfig+0x240>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4937      	ldr	r1, [pc, #220]	; (8003144 <HAL_RCC_OscConfig+0x240>)
 8003066:	4313      	orrs	r3, r2
 8003068:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800306a:	e03a      	b.n	80030e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d020      	beq.n	80030b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003074:	4b34      	ldr	r3, [pc, #208]	; (8003148 <HAL_RCC_OscConfig+0x244>)
 8003076:	2201      	movs	r2, #1
 8003078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307a:	f7fe f9cb 	bl	8001414 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003082:	f7fe f9c7 	bl	8001414 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e1a8      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003094:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <HAL_RCC_OscConfig+0x240>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f0      	beq.n	8003082 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a0:	4b28      	ldr	r3, [pc, #160]	; (8003144 <HAL_RCC_OscConfig+0x240>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4925      	ldr	r1, [pc, #148]	; (8003144 <HAL_RCC_OscConfig+0x240>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	600b      	str	r3, [r1, #0]
 80030b4:	e015      	b.n	80030e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030b6:	4b24      	ldr	r3, [pc, #144]	; (8003148 <HAL_RCC_OscConfig+0x244>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030bc:	f7fe f9aa 	bl	8001414 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030c4:	f7fe f9a6 	bl	8001414 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e187      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d6:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <HAL_RCC_OscConfig+0x240>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d036      	beq.n	800315c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d016      	beq.n	8003124 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030f6:	4b15      	ldr	r3, [pc, #84]	; (800314c <HAL_RCC_OscConfig+0x248>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fc:	f7fe f98a 	bl	8001414 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003104:	f7fe f986 	bl	8001414 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e167      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003116:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <HAL_RCC_OscConfig+0x240>)
 8003118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCC_OscConfig+0x200>
 8003122:	e01b      	b.n	800315c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003124:	4b09      	ldr	r3, [pc, #36]	; (800314c <HAL_RCC_OscConfig+0x248>)
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312a:	f7fe f973 	bl	8001414 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003130:	e00e      	b.n	8003150 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003132:	f7fe f96f 	bl	8001414 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d907      	bls.n	8003150 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e150      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
 8003144:	40023800 	.word	0x40023800
 8003148:	42470000 	.word	0x42470000
 800314c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003150:	4b88      	ldr	r3, [pc, #544]	; (8003374 <HAL_RCC_OscConfig+0x470>)
 8003152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1ea      	bne.n	8003132 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 8097 	beq.w	8003298 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800316a:	2300      	movs	r3, #0
 800316c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800316e:	4b81      	ldr	r3, [pc, #516]	; (8003374 <HAL_RCC_OscConfig+0x470>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10f      	bne.n	800319a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	4b7d      	ldr	r3, [pc, #500]	; (8003374 <HAL_RCC_OscConfig+0x470>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	4a7c      	ldr	r2, [pc, #496]	; (8003374 <HAL_RCC_OscConfig+0x470>)
 8003184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003188:	6413      	str	r3, [r2, #64]	; 0x40
 800318a:	4b7a      	ldr	r3, [pc, #488]	; (8003374 <HAL_RCC_OscConfig+0x470>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003196:	2301      	movs	r3, #1
 8003198:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319a:	4b77      	ldr	r3, [pc, #476]	; (8003378 <HAL_RCC_OscConfig+0x474>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d118      	bne.n	80031d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031a6:	4b74      	ldr	r3, [pc, #464]	; (8003378 <HAL_RCC_OscConfig+0x474>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a73      	ldr	r2, [pc, #460]	; (8003378 <HAL_RCC_OscConfig+0x474>)
 80031ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031b2:	f7fe f92f 	bl	8001414 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ba:	f7fe f92b 	bl	8001414 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e10c      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031cc:	4b6a      	ldr	r3, [pc, #424]	; (8003378 <HAL_RCC_OscConfig+0x474>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0f0      	beq.n	80031ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d106      	bne.n	80031ee <HAL_RCC_OscConfig+0x2ea>
 80031e0:	4b64      	ldr	r3, [pc, #400]	; (8003374 <HAL_RCC_OscConfig+0x470>)
 80031e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e4:	4a63      	ldr	r2, [pc, #396]	; (8003374 <HAL_RCC_OscConfig+0x470>)
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	6713      	str	r3, [r2, #112]	; 0x70
 80031ec:	e01c      	b.n	8003228 <HAL_RCC_OscConfig+0x324>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	2b05      	cmp	r3, #5
 80031f4:	d10c      	bne.n	8003210 <HAL_RCC_OscConfig+0x30c>
 80031f6:	4b5f      	ldr	r3, [pc, #380]	; (8003374 <HAL_RCC_OscConfig+0x470>)
 80031f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fa:	4a5e      	ldr	r2, [pc, #376]	; (8003374 <HAL_RCC_OscConfig+0x470>)
 80031fc:	f043 0304 	orr.w	r3, r3, #4
 8003200:	6713      	str	r3, [r2, #112]	; 0x70
 8003202:	4b5c      	ldr	r3, [pc, #368]	; (8003374 <HAL_RCC_OscConfig+0x470>)
 8003204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003206:	4a5b      	ldr	r2, [pc, #364]	; (8003374 <HAL_RCC_OscConfig+0x470>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	6713      	str	r3, [r2, #112]	; 0x70
 800320e:	e00b      	b.n	8003228 <HAL_RCC_OscConfig+0x324>
 8003210:	4b58      	ldr	r3, [pc, #352]	; (8003374 <HAL_RCC_OscConfig+0x470>)
 8003212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003214:	4a57      	ldr	r2, [pc, #348]	; (8003374 <HAL_RCC_OscConfig+0x470>)
 8003216:	f023 0301 	bic.w	r3, r3, #1
 800321a:	6713      	str	r3, [r2, #112]	; 0x70
 800321c:	4b55      	ldr	r3, [pc, #340]	; (8003374 <HAL_RCC_OscConfig+0x470>)
 800321e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003220:	4a54      	ldr	r2, [pc, #336]	; (8003374 <HAL_RCC_OscConfig+0x470>)
 8003222:	f023 0304 	bic.w	r3, r3, #4
 8003226:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d015      	beq.n	800325c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003230:	f7fe f8f0 	bl	8001414 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003236:	e00a      	b.n	800324e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003238:	f7fe f8ec 	bl	8001414 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f241 3288 	movw	r2, #5000	; 0x1388
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e0cb      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324e:	4b49      	ldr	r3, [pc, #292]	; (8003374 <HAL_RCC_OscConfig+0x470>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0ee      	beq.n	8003238 <HAL_RCC_OscConfig+0x334>
 800325a:	e014      	b.n	8003286 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325c:	f7fe f8da 	bl	8001414 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003262:	e00a      	b.n	800327a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003264:	f7fe f8d6 	bl	8001414 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003272:	4293      	cmp	r3, r2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e0b5      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800327a:	4b3e      	ldr	r3, [pc, #248]	; (8003374 <HAL_RCC_OscConfig+0x470>)
 800327c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1ee      	bne.n	8003264 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003286:	7dfb      	ldrb	r3, [r7, #23]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d105      	bne.n	8003298 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800328c:	4b39      	ldr	r3, [pc, #228]	; (8003374 <HAL_RCC_OscConfig+0x470>)
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	4a38      	ldr	r2, [pc, #224]	; (8003374 <HAL_RCC_OscConfig+0x470>)
 8003292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003296:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80a1 	beq.w	80033e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032a2:	4b34      	ldr	r3, [pc, #208]	; (8003374 <HAL_RCC_OscConfig+0x470>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 030c 	and.w	r3, r3, #12
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d05c      	beq.n	8003368 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d141      	bne.n	800333a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b6:	4b31      	ldr	r3, [pc, #196]	; (800337c <HAL_RCC_OscConfig+0x478>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032bc:	f7fe f8aa 	bl	8001414 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c4:	f7fe f8a6 	bl	8001414 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e087      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d6:	4b27      	ldr	r3, [pc, #156]	; (8003374 <HAL_RCC_OscConfig+0x470>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69da      	ldr	r2, [r3, #28]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	019b      	lsls	r3, r3, #6
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f8:	085b      	lsrs	r3, r3, #1
 80032fa:	3b01      	subs	r3, #1
 80032fc:	041b      	lsls	r3, r3, #16
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	061b      	lsls	r3, r3, #24
 8003306:	491b      	ldr	r1, [pc, #108]	; (8003374 <HAL_RCC_OscConfig+0x470>)
 8003308:	4313      	orrs	r3, r2
 800330a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800330c:	4b1b      	ldr	r3, [pc, #108]	; (800337c <HAL_RCC_OscConfig+0x478>)
 800330e:	2201      	movs	r2, #1
 8003310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003312:	f7fe f87f 	bl	8001414 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800331a:	f7fe f87b 	bl	8001414 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e05c      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332c:	4b11      	ldr	r3, [pc, #68]	; (8003374 <HAL_RCC_OscConfig+0x470>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0f0      	beq.n	800331a <HAL_RCC_OscConfig+0x416>
 8003338:	e054      	b.n	80033e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333a:	4b10      	ldr	r3, [pc, #64]	; (800337c <HAL_RCC_OscConfig+0x478>)
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003340:	f7fe f868 	bl	8001414 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003348:	f7fe f864 	bl	8001414 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e045      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335a:	4b06      	ldr	r3, [pc, #24]	; (8003374 <HAL_RCC_OscConfig+0x470>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCC_OscConfig+0x444>
 8003366:	e03d      	b.n	80033e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d107      	bne.n	8003380 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e038      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
 8003374:	40023800 	.word	0x40023800
 8003378:	40007000 	.word	0x40007000
 800337c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003380:	4b1b      	ldr	r3, [pc, #108]	; (80033f0 <HAL_RCC_OscConfig+0x4ec>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d028      	beq.n	80033e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003398:	429a      	cmp	r2, r3
 800339a:	d121      	bne.n	80033e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d11a      	bne.n	80033e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033b0:	4013      	ands	r3, r2
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d111      	bne.n	80033e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c6:	085b      	lsrs	r3, r3, #1
 80033c8:	3b01      	subs	r3, #1
 80033ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d107      	bne.n	80033e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033dc:	429a      	cmp	r2, r3
 80033de:	d001      	beq.n	80033e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e000      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40023800 	.word	0x40023800

080033f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0cc      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003408:	4b68      	ldr	r3, [pc, #416]	; (80035ac <HAL_RCC_ClockConfig+0x1b8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d90c      	bls.n	8003430 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003416:	4b65      	ldr	r3, [pc, #404]	; (80035ac <HAL_RCC_ClockConfig+0x1b8>)
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800341e:	4b63      	ldr	r3, [pc, #396]	; (80035ac <HAL_RCC_ClockConfig+0x1b8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d001      	beq.n	8003430 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e0b8      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d020      	beq.n	800347e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003448:	4b59      	ldr	r3, [pc, #356]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	4a58      	ldr	r2, [pc, #352]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003452:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	2b00      	cmp	r3, #0
 800345e:	d005      	beq.n	800346c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003460:	4b53      	ldr	r3, [pc, #332]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	4a52      	ldr	r2, [pc, #328]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800346a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800346c:	4b50      	ldr	r3, [pc, #320]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	494d      	ldr	r1, [pc, #308]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	4313      	orrs	r3, r2
 800347c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d044      	beq.n	8003514 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d107      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003492:	4b47      	ldr	r3, [pc, #284]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d119      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e07f      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d003      	beq.n	80034b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d107      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b2:	4b3f      	ldr	r3, [pc, #252]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d109      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e06f      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c2:	4b3b      	ldr	r3, [pc, #236]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e067      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034d2:	4b37      	ldr	r3, [pc, #220]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f023 0203 	bic.w	r2, r3, #3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	4934      	ldr	r1, [pc, #208]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034e4:	f7fd ff96 	bl	8001414 <HAL_GetTick>
 80034e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ea:	e00a      	b.n	8003502 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ec:	f7fd ff92 	bl	8001414 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e04f      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003502:	4b2b      	ldr	r3, [pc, #172]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 020c 	and.w	r2, r3, #12
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	429a      	cmp	r2, r3
 8003512:	d1eb      	bne.n	80034ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003514:	4b25      	ldr	r3, [pc, #148]	; (80035ac <HAL_RCC_ClockConfig+0x1b8>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d20c      	bcs.n	800353c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003522:	4b22      	ldr	r3, [pc, #136]	; (80035ac <HAL_RCC_ClockConfig+0x1b8>)
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800352a:	4b20      	ldr	r3, [pc, #128]	; (80035ac <HAL_RCC_ClockConfig+0x1b8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d001      	beq.n	800353c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e032      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003548:	4b19      	ldr	r3, [pc, #100]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4916      	ldr	r1, [pc, #88]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	4313      	orrs	r3, r2
 8003558:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d009      	beq.n	800357a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003566:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	490e      	ldr	r1, [pc, #56]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	4313      	orrs	r3, r2
 8003578:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800357a:	f000 f821 	bl	80035c0 <HAL_RCC_GetSysClockFreq>
 800357e:	4602      	mov	r2, r0
 8003580:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	091b      	lsrs	r3, r3, #4
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	490a      	ldr	r1, [pc, #40]	; (80035b4 <HAL_RCC_ClockConfig+0x1c0>)
 800358c:	5ccb      	ldrb	r3, [r1, r3]
 800358e:	fa22 f303 	lsr.w	r3, r2, r3
 8003592:	4a09      	ldr	r2, [pc, #36]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003596:	4b09      	ldr	r3, [pc, #36]	; (80035bc <HAL_RCC_ClockConfig+0x1c8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7fd fbbc 	bl	8000d18 <HAL_InitTick>

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40023c00 	.word	0x40023c00
 80035b0:	40023800 	.word	0x40023800
 80035b4:	08017ff8 	.word	0x08017ff8
 80035b8:	20000000 	.word	0x20000000
 80035bc:	20000004 	.word	0x20000004

080035c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035c4:	b090      	sub	sp, #64	; 0x40
 80035c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	637b      	str	r3, [r7, #52]	; 0x34
 80035cc:	2300      	movs	r3, #0
 80035ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035d0:	2300      	movs	r3, #0
 80035d2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035d8:	4b59      	ldr	r3, [pc, #356]	; (8003740 <HAL_RCC_GetSysClockFreq+0x180>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 030c 	and.w	r3, r3, #12
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d00d      	beq.n	8003600 <HAL_RCC_GetSysClockFreq+0x40>
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	f200 80a1 	bhi.w	800372c <HAL_RCC_GetSysClockFreq+0x16c>
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <HAL_RCC_GetSysClockFreq+0x34>
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d003      	beq.n	80035fa <HAL_RCC_GetSysClockFreq+0x3a>
 80035f2:	e09b      	b.n	800372c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035f4:	4b53      	ldr	r3, [pc, #332]	; (8003744 <HAL_RCC_GetSysClockFreq+0x184>)
 80035f6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80035f8:	e09b      	b.n	8003732 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035fa:	4b53      	ldr	r3, [pc, #332]	; (8003748 <HAL_RCC_GetSysClockFreq+0x188>)
 80035fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80035fe:	e098      	b.n	8003732 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003600:	4b4f      	ldr	r3, [pc, #316]	; (8003740 <HAL_RCC_GetSysClockFreq+0x180>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003608:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800360a:	4b4d      	ldr	r3, [pc, #308]	; (8003740 <HAL_RCC_GetSysClockFreq+0x180>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d028      	beq.n	8003668 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003616:	4b4a      	ldr	r3, [pc, #296]	; (8003740 <HAL_RCC_GetSysClockFreq+0x180>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	099b      	lsrs	r3, r3, #6
 800361c:	2200      	movs	r2, #0
 800361e:	623b      	str	r3, [r7, #32]
 8003620:	627a      	str	r2, [r7, #36]	; 0x24
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003628:	2100      	movs	r1, #0
 800362a:	4b47      	ldr	r3, [pc, #284]	; (8003748 <HAL_RCC_GetSysClockFreq+0x188>)
 800362c:	fb03 f201 	mul.w	r2, r3, r1
 8003630:	2300      	movs	r3, #0
 8003632:	fb00 f303 	mul.w	r3, r0, r3
 8003636:	4413      	add	r3, r2
 8003638:	4a43      	ldr	r2, [pc, #268]	; (8003748 <HAL_RCC_GetSysClockFreq+0x188>)
 800363a:	fba0 1202 	umull	r1, r2, r0, r2
 800363e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003640:	460a      	mov	r2, r1
 8003642:	62ba      	str	r2, [r7, #40]	; 0x28
 8003644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003646:	4413      	add	r3, r2
 8003648:	62fb      	str	r3, [r7, #44]	; 0x2c
 800364a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364c:	2200      	movs	r2, #0
 800364e:	61bb      	str	r3, [r7, #24]
 8003650:	61fa      	str	r2, [r7, #28]
 8003652:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003656:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800365a:	f7fc fe09 	bl	8000270 <__aeabi_uldivmod>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	4613      	mov	r3, r2
 8003664:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003666:	e053      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003668:	4b35      	ldr	r3, [pc, #212]	; (8003740 <HAL_RCC_GetSysClockFreq+0x180>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	099b      	lsrs	r3, r3, #6
 800366e:	2200      	movs	r2, #0
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	617a      	str	r2, [r7, #20]
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800367a:	f04f 0b00 	mov.w	fp, #0
 800367e:	4652      	mov	r2, sl
 8003680:	465b      	mov	r3, fp
 8003682:	f04f 0000 	mov.w	r0, #0
 8003686:	f04f 0100 	mov.w	r1, #0
 800368a:	0159      	lsls	r1, r3, #5
 800368c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003690:	0150      	lsls	r0, r2, #5
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	ebb2 080a 	subs.w	r8, r2, sl
 800369a:	eb63 090b 	sbc.w	r9, r3, fp
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80036aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80036ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80036b2:	ebb2 0408 	subs.w	r4, r2, r8
 80036b6:	eb63 0509 	sbc.w	r5, r3, r9
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	00eb      	lsls	r3, r5, #3
 80036c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036c8:	00e2      	lsls	r2, r4, #3
 80036ca:	4614      	mov	r4, r2
 80036cc:	461d      	mov	r5, r3
 80036ce:	eb14 030a 	adds.w	r3, r4, sl
 80036d2:	603b      	str	r3, [r7, #0]
 80036d4:	eb45 030b 	adc.w	r3, r5, fp
 80036d8:	607b      	str	r3, [r7, #4]
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	f04f 0300 	mov.w	r3, #0
 80036e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036e6:	4629      	mov	r1, r5
 80036e8:	028b      	lsls	r3, r1, #10
 80036ea:	4621      	mov	r1, r4
 80036ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036f0:	4621      	mov	r1, r4
 80036f2:	028a      	lsls	r2, r1, #10
 80036f4:	4610      	mov	r0, r2
 80036f6:	4619      	mov	r1, r3
 80036f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fa:	2200      	movs	r2, #0
 80036fc:	60bb      	str	r3, [r7, #8]
 80036fe:	60fa      	str	r2, [r7, #12]
 8003700:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003704:	f7fc fdb4 	bl	8000270 <__aeabi_uldivmod>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	4613      	mov	r3, r2
 800370e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003710:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <HAL_RCC_GetSysClockFreq+0x180>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	0c1b      	lsrs	r3, r3, #16
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	3301      	adds	r3, #1
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003720:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003724:	fbb2 f3f3 	udiv	r3, r2, r3
 8003728:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800372a:	e002      	b.n	8003732 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800372c:	4b05      	ldr	r3, [pc, #20]	; (8003744 <HAL_RCC_GetSysClockFreq+0x184>)
 800372e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003730:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003734:	4618      	mov	r0, r3
 8003736:	3740      	adds	r7, #64	; 0x40
 8003738:	46bd      	mov	sp, r7
 800373a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800373e:	bf00      	nop
 8003740:	40023800 	.word	0x40023800
 8003744:	00f42400 	.word	0x00f42400
 8003748:	017d7840 	.word	0x017d7840

0800374c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003750:	4b03      	ldr	r3, [pc, #12]	; (8003760 <HAL_RCC_GetHCLKFreq+0x14>)
 8003752:	681b      	ldr	r3, [r3, #0]
}
 8003754:	4618      	mov	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	20000000 	.word	0x20000000

08003764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003768:	f7ff fff0 	bl	800374c <HAL_RCC_GetHCLKFreq>
 800376c:	4602      	mov	r2, r0
 800376e:	4b05      	ldr	r3, [pc, #20]	; (8003784 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	0a9b      	lsrs	r3, r3, #10
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	4903      	ldr	r1, [pc, #12]	; (8003788 <HAL_RCC_GetPCLK1Freq+0x24>)
 800377a:	5ccb      	ldrb	r3, [r1, r3]
 800377c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003780:	4618      	mov	r0, r3
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40023800 	.word	0x40023800
 8003788:	08018008 	.word	0x08018008

0800378c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	220f      	movs	r2, #15
 800379a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800379c:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <HAL_RCC_GetClockConfig+0x5c>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 0203 	and.w	r2, r3, #3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80037a8:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <HAL_RCC_GetClockConfig+0x5c>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80037b4:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <HAL_RCC_GetClockConfig+0x5c>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80037c0:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <HAL_RCC_GetClockConfig+0x5c>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	08db      	lsrs	r3, r3, #3
 80037c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80037ce:	4b07      	ldr	r3, [pc, #28]	; (80037ec <HAL_RCC_GetClockConfig+0x60>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0207 	and.w	r2, r3, #7
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	601a      	str	r2, [r3, #0]
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40023800 	.word	0x40023800
 80037ec:	40023c00 	.word	0x40023c00

080037f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e07b      	b.n	80038fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	2b00      	cmp	r3, #0
 8003808:	d108      	bne.n	800381c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003812:	d009      	beq.n	8003828 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	61da      	str	r2, [r3, #28]
 800381a:	e005      	b.n	8003828 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fd f9a6 	bl	8000b94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800385e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003898:	431a      	orrs	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ac:	ea42 0103 	orr.w	r1, r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	0c1b      	lsrs	r3, r3, #16
 80038c6:	f003 0104 	and.w	r1, r3, #4
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	f003 0210 	and.w	r2, r3, #16
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	69da      	ldr	r2, [r3, #28]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b082      	sub	sp, #8
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e041      	b.n	8003998 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d106      	bne.n	800392e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7fd f97b 	bl	8000c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2202      	movs	r2, #2
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3304      	adds	r3, #4
 800393e:	4619      	mov	r1, r3
 8003940:	4610      	mov	r0, r2
 8003942:	f000 fa95 	bl	8003e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d001      	beq.n	80039b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e04e      	b.n	8003a56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a23      	ldr	r2, [pc, #140]	; (8003a64 <HAL_TIM_Base_Start_IT+0xc4>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d022      	beq.n	8003a20 <HAL_TIM_Base_Start_IT+0x80>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e2:	d01d      	beq.n	8003a20 <HAL_TIM_Base_Start_IT+0x80>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a1f      	ldr	r2, [pc, #124]	; (8003a68 <HAL_TIM_Base_Start_IT+0xc8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d018      	beq.n	8003a20 <HAL_TIM_Base_Start_IT+0x80>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a1e      	ldr	r2, [pc, #120]	; (8003a6c <HAL_TIM_Base_Start_IT+0xcc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d013      	beq.n	8003a20 <HAL_TIM_Base_Start_IT+0x80>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a1c      	ldr	r2, [pc, #112]	; (8003a70 <HAL_TIM_Base_Start_IT+0xd0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00e      	beq.n	8003a20 <HAL_TIM_Base_Start_IT+0x80>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a1b      	ldr	r2, [pc, #108]	; (8003a74 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d009      	beq.n	8003a20 <HAL_TIM_Base_Start_IT+0x80>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a19      	ldr	r2, [pc, #100]	; (8003a78 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d004      	beq.n	8003a20 <HAL_TIM_Base_Start_IT+0x80>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a18      	ldr	r2, [pc, #96]	; (8003a7c <HAL_TIM_Base_Start_IT+0xdc>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d111      	bne.n	8003a44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b06      	cmp	r3, #6
 8003a30:	d010      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f042 0201 	orr.w	r2, r2, #1
 8003a40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a42:	e007      	b.n	8003a54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40010000 	.word	0x40010000
 8003a68:	40000400 	.word	0x40000400
 8003a6c:	40000800 	.word	0x40000800
 8003a70:	40000c00 	.word	0x40000c00
 8003a74:	40010400 	.word	0x40010400
 8003a78:	40014000 	.word	0x40014000
 8003a7c:	40001800 	.word	0x40001800

08003a80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d122      	bne.n	8003adc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d11b      	bne.n	8003adc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0202 	mvn.w	r2, #2
 8003aac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f9b5 	bl	8003e32 <HAL_TIM_IC_CaptureCallback>
 8003ac8:	e005      	b.n	8003ad6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f9a7 	bl	8003e1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f9b8 	bl	8003e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d122      	bne.n	8003b30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d11b      	bne.n	8003b30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0204 	mvn.w	r2, #4
 8003b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2202      	movs	r2, #2
 8003b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f98b 	bl	8003e32 <HAL_TIM_IC_CaptureCallback>
 8003b1c:	e005      	b.n	8003b2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f97d 	bl	8003e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f98e 	bl	8003e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d122      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d11b      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0208 	mvn.w	r2, #8
 8003b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2204      	movs	r2, #4
 8003b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f961 	bl	8003e32 <HAL_TIM_IC_CaptureCallback>
 8003b70:	e005      	b.n	8003b7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f953 	bl	8003e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f964 	bl	8003e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0310 	and.w	r3, r3, #16
 8003b8e:	2b10      	cmp	r3, #16
 8003b90:	d122      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0310 	and.w	r3, r3, #16
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d11b      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0210 	mvn.w	r2, #16
 8003ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2208      	movs	r2, #8
 8003bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f937 	bl	8003e32 <HAL_TIM_IC_CaptureCallback>
 8003bc4:	e005      	b.n	8003bd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f929 	bl	8003e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f93a 	bl	8003e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d10e      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d107      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0201 	mvn.w	r2, #1
 8003bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fc ff84 	bl	8000b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0e:	2b80      	cmp	r3, #128	; 0x80
 8003c10:	d10e      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1c:	2b80      	cmp	r3, #128	; 0x80
 8003c1e:	d107      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 fae0 	bl	80041f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3a:	2b40      	cmp	r3, #64	; 0x40
 8003c3c:	d10e      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c48:	2b40      	cmp	r3, #64	; 0x40
 8003c4a:	d107      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f8ff 	bl	8003e5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d10e      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d107      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0220 	mvn.w	r2, #32
 8003c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 faaa 	bl	80041dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_TIM_ConfigClockSource+0x1c>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e0b4      	b.n	8003e16 <HAL_TIM_ConfigClockSource+0x186>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce4:	d03e      	beq.n	8003d64 <HAL_TIM_ConfigClockSource+0xd4>
 8003ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cea:	f200 8087 	bhi.w	8003dfc <HAL_TIM_ConfigClockSource+0x16c>
 8003cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf2:	f000 8086 	beq.w	8003e02 <HAL_TIM_ConfigClockSource+0x172>
 8003cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cfa:	d87f      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x16c>
 8003cfc:	2b70      	cmp	r3, #112	; 0x70
 8003cfe:	d01a      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0xa6>
 8003d00:	2b70      	cmp	r3, #112	; 0x70
 8003d02:	d87b      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x16c>
 8003d04:	2b60      	cmp	r3, #96	; 0x60
 8003d06:	d050      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0x11a>
 8003d08:	2b60      	cmp	r3, #96	; 0x60
 8003d0a:	d877      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x16c>
 8003d0c:	2b50      	cmp	r3, #80	; 0x50
 8003d0e:	d03c      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0xfa>
 8003d10:	2b50      	cmp	r3, #80	; 0x50
 8003d12:	d873      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x16c>
 8003d14:	2b40      	cmp	r3, #64	; 0x40
 8003d16:	d058      	beq.n	8003dca <HAL_TIM_ConfigClockSource+0x13a>
 8003d18:	2b40      	cmp	r3, #64	; 0x40
 8003d1a:	d86f      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x16c>
 8003d1c:	2b30      	cmp	r3, #48	; 0x30
 8003d1e:	d064      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0x15a>
 8003d20:	2b30      	cmp	r3, #48	; 0x30
 8003d22:	d86b      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x16c>
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d060      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0x15a>
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d867      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x16c>
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d05c      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0x15a>
 8003d30:	2b10      	cmp	r3, #16
 8003d32:	d05a      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0x15a>
 8003d34:	e062      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	6899      	ldr	r1, [r3, #8]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f000 f9ad 	bl	80040a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	609a      	str	r2, [r3, #8]
      break;
 8003d62:	e04f      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6818      	ldr	r0, [r3, #0]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	6899      	ldr	r1, [r3, #8]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f000 f996 	bl	80040a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d86:	609a      	str	r2, [r3, #8]
      break;
 8003d88:	e03c      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6818      	ldr	r0, [r3, #0]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	6859      	ldr	r1, [r3, #4]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	461a      	mov	r2, r3
 8003d98:	f000 f90a 	bl	8003fb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2150      	movs	r1, #80	; 0x50
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 f963 	bl	800406e <TIM_ITRx_SetConfig>
      break;
 8003da8:	e02c      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	6859      	ldr	r1, [r3, #4]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	461a      	mov	r2, r3
 8003db8:	f000 f929 	bl	800400e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2160      	movs	r1, #96	; 0x60
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 f953 	bl	800406e <TIM_ITRx_SetConfig>
      break;
 8003dc8:	e01c      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	6859      	ldr	r1, [r3, #4]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	f000 f8ea 	bl	8003fb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2140      	movs	r1, #64	; 0x40
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 f943 	bl	800406e <TIM_ITRx_SetConfig>
      break;
 8003de8:	e00c      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4619      	mov	r1, r3
 8003df4:	4610      	mov	r0, r2
 8003df6:	f000 f93a 	bl	800406e <TIM_ITRx_SetConfig>
      break;
 8003dfa:	e003      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8003e00:	e000      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
	...

08003e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a40      	ldr	r2, [pc, #256]	; (8003f84 <TIM_Base_SetConfig+0x114>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d013      	beq.n	8003eb0 <TIM_Base_SetConfig+0x40>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8e:	d00f      	beq.n	8003eb0 <TIM_Base_SetConfig+0x40>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a3d      	ldr	r2, [pc, #244]	; (8003f88 <TIM_Base_SetConfig+0x118>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00b      	beq.n	8003eb0 <TIM_Base_SetConfig+0x40>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a3c      	ldr	r2, [pc, #240]	; (8003f8c <TIM_Base_SetConfig+0x11c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d007      	beq.n	8003eb0 <TIM_Base_SetConfig+0x40>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a3b      	ldr	r2, [pc, #236]	; (8003f90 <TIM_Base_SetConfig+0x120>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d003      	beq.n	8003eb0 <TIM_Base_SetConfig+0x40>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a3a      	ldr	r2, [pc, #232]	; (8003f94 <TIM_Base_SetConfig+0x124>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d108      	bne.n	8003ec2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a2f      	ldr	r2, [pc, #188]	; (8003f84 <TIM_Base_SetConfig+0x114>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d02b      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed0:	d027      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a2c      	ldr	r2, [pc, #176]	; (8003f88 <TIM_Base_SetConfig+0x118>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d023      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a2b      	ldr	r2, [pc, #172]	; (8003f8c <TIM_Base_SetConfig+0x11c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d01f      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a2a      	ldr	r2, [pc, #168]	; (8003f90 <TIM_Base_SetConfig+0x120>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d01b      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a29      	ldr	r2, [pc, #164]	; (8003f94 <TIM_Base_SetConfig+0x124>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d017      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a28      	ldr	r2, [pc, #160]	; (8003f98 <TIM_Base_SetConfig+0x128>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a27      	ldr	r2, [pc, #156]	; (8003f9c <TIM_Base_SetConfig+0x12c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00f      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a26      	ldr	r2, [pc, #152]	; (8003fa0 <TIM_Base_SetConfig+0x130>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d00b      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a25      	ldr	r2, [pc, #148]	; (8003fa4 <TIM_Base_SetConfig+0x134>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d007      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a24      	ldr	r2, [pc, #144]	; (8003fa8 <TIM_Base_SetConfig+0x138>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d003      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a23      	ldr	r2, [pc, #140]	; (8003fac <TIM_Base_SetConfig+0x13c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d108      	bne.n	8003f34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a0a      	ldr	r2, [pc, #40]	; (8003f84 <TIM_Base_SetConfig+0x114>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d003      	beq.n	8003f68 <TIM_Base_SetConfig+0xf8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a0c      	ldr	r2, [pc, #48]	; (8003f94 <TIM_Base_SetConfig+0x124>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d103      	bne.n	8003f70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	691a      	ldr	r2, [r3, #16]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	615a      	str	r2, [r3, #20]
}
 8003f76:	bf00      	nop
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40010000 	.word	0x40010000
 8003f88:	40000400 	.word	0x40000400
 8003f8c:	40000800 	.word	0x40000800
 8003f90:	40000c00 	.word	0x40000c00
 8003f94:	40010400 	.word	0x40010400
 8003f98:	40014000 	.word	0x40014000
 8003f9c:	40014400 	.word	0x40014400
 8003fa0:	40014800 	.word	0x40014800
 8003fa4:	40001800 	.word	0x40001800
 8003fa8:	40001c00 	.word	0x40001c00
 8003fac:	40002000 	.word	0x40002000

08003fb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	f023 0201 	bic.w	r2, r3, #1
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f023 030a 	bic.w	r3, r3, #10
 8003fec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	621a      	str	r2, [r3, #32]
}
 8004002:	bf00      	nop
 8004004:	371c      	adds	r7, #28
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800400e:	b480      	push	{r7}
 8004010:	b087      	sub	sp, #28
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	f023 0210 	bic.w	r2, r3, #16
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004038:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	031b      	lsls	r3, r3, #12
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800404a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	621a      	str	r2, [r3, #32]
}
 8004062:	bf00      	nop
 8004064:	371c      	adds	r7, #28
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800406e:	b480      	push	{r7}
 8004070:	b085      	sub	sp, #20
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
 8004076:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004084:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4313      	orrs	r3, r2
 800408c:	f043 0307 	orr.w	r3, r3, #7
 8004090:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	609a      	str	r2, [r3, #8]
}
 8004098:	bf00      	nop
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	021a      	lsls	r2, r3, #8
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	609a      	str	r2, [r3, #8]
}
 80040d8:	bf00      	nop
 80040da:	371c      	adds	r7, #28
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d101      	bne.n	80040fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040f8:	2302      	movs	r3, #2
 80040fa:	e05a      	b.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a21      	ldr	r2, [pc, #132]	; (80041c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d022      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004148:	d01d      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a1d      	ldr	r2, [pc, #116]	; (80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d018      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a1b      	ldr	r2, [pc, #108]	; (80041c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d013      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a1a      	ldr	r2, [pc, #104]	; (80041cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d00e      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a18      	ldr	r2, [pc, #96]	; (80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d009      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a17      	ldr	r2, [pc, #92]	; (80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d004      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a15      	ldr	r2, [pc, #84]	; (80041d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d10c      	bne.n	80041a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800418c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	4313      	orrs	r3, r2
 8004196:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	40010000 	.word	0x40010000
 80041c4:	40000400 	.word	0x40000400
 80041c8:	40000800 	.word	0x40000800
 80041cc:	40000c00 	.word	0x40000c00
 80041d0:	40010400 	.word	0x40010400
 80041d4:	40014000 	.word	0x40014000
 80041d8:	40001800 	.word	0x40001800

080041dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004204:	b5b0      	push	{r4, r5, r7, lr}
 8004206:	b08c      	sub	sp, #48	; 0x30
 8004208:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800420a:	2100      	movs	r1, #0
 800420c:	2000      	movs	r0, #0
 800420e:	f003 fd55 	bl	8007cbc <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8004212:	4b20      	ldr	r3, [pc, #128]	; (8004294 <MX_LWIP_Init+0x90>)
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004218:	4b1f      	ldr	r3, [pc, #124]	; (8004298 <MX_LWIP_Init+0x94>)
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800421e:	4b1f      	ldr	r3, [pc, #124]	; (800429c <MX_LWIP_Init+0x98>)
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004224:	4b1e      	ldr	r3, [pc, #120]	; (80042a0 <MX_LWIP_Init+0x9c>)
 8004226:	9302      	str	r3, [sp, #8]
 8004228:	4b1e      	ldr	r3, [pc, #120]	; (80042a4 <MX_LWIP_Init+0xa0>)
 800422a:	9301      	str	r3, [sp, #4]
 800422c:	2300      	movs	r3, #0
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	4b1a      	ldr	r3, [pc, #104]	; (800429c <MX_LWIP_Init+0x98>)
 8004232:	4a19      	ldr	r2, [pc, #100]	; (8004298 <MX_LWIP_Init+0x94>)
 8004234:	4917      	ldr	r1, [pc, #92]	; (8004294 <MX_LWIP_Init+0x90>)
 8004236:	481c      	ldr	r0, [pc, #112]	; (80042a8 <MX_LWIP_Init+0xa4>)
 8004238:	f004 fb0a 	bl	8008850 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800423c:	481a      	ldr	r0, [pc, #104]	; (80042a8 <MX_LWIP_Init+0xa4>)
 800423e:	f004 fcc1 	bl	8008bc4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004242:	4b19      	ldr	r3, [pc, #100]	; (80042a8 <MX_LWIP_Init+0xa4>)
 8004244:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004248:	089b      	lsrs	r3, r3, #2
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004254:	4814      	ldr	r0, [pc, #80]	; (80042a8 <MX_LWIP_Init+0xa4>)
 8004256:	f004 fcc5 	bl	8008be4 <netif_set_up>
 800425a:	e002      	b.n	8004262 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800425c:	4812      	ldr	r0, [pc, #72]	; (80042a8 <MX_LWIP_Init+0xa4>)
 800425e:	f004 fd2d 	bl	8008cbc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004262:	4912      	ldr	r1, [pc, #72]	; (80042ac <MX_LWIP_Init+0xa8>)
 8004264:	4810      	ldr	r0, [pc, #64]	; (80042a8 <MX_LWIP_Init+0xa4>)
 8004266:	f004 fdc3 	bl	8008df0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800426a:	4b11      	ldr	r3, [pc, #68]	; (80042b0 <MX_LWIP_Init+0xac>)
 800426c:	1d3c      	adds	r4, r7, #4
 800426e:	461d      	mov	r5, r3
 8004270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004274:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004278:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800427c:	1d3b      	adds	r3, r7, #4
 800427e:	490a      	ldr	r1, [pc, #40]	; (80042a8 <MX_LWIP_Init+0xa4>)
 8004280:	4618      	mov	r0, r3
 8004282:	f000 fd03 	bl	8004c8c <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8004286:	4808      	ldr	r0, [pc, #32]	; (80042a8 <MX_LWIP_Init+0xa4>)
 8004288:	f00b ff18 	bl	80100bc <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800428c:	bf00      	nop
 800428e:	3720      	adds	r7, #32
 8004290:	46bd      	mov	sp, r7
 8004292:	bdb0      	pop	{r4, r5, r7, pc}
 8004294:	20000724 	.word	0x20000724
 8004298:	20000728 	.word	0x20000728
 800429c:	2000072c 	.word	0x2000072c
 80042a0:	08007bf9 	.word	0x08007bf9
 80042a4:	08004755 	.word	0x08004755
 80042a8:	200006ec 	.word	0x200006ec
 80042ac:	080042b5 	.word	0x080042b5
 80042b0:	08015134 	.word	0x08015134

080042b4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80042d0:	4b04      	ldr	r3, [pc, #16]	; (80042e4 <HAL_ETH_RxCpltCallback+0x1c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 fe23 	bl	8004f20 <osSemaphoreRelease>
}
 80042da:	bf00      	nop
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	200051fc 	.word	0x200051fc

080042e8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80042f0:	4b04      	ldr	r3, [pc, #16]	; (8004304 <HAL_ETH_TxCpltCallback+0x1c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fe13 	bl	8004f20 <osSemaphoreRelease>
}
 80042fa:	bf00      	nop
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	20005200 	.word	0x20005200

08004308 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7fe f82f 	bl	8002374 <HAL_ETH_GetDMAError>
 8004316:	4603      	mov	r3, r0
 8004318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431c:	2b80      	cmp	r3, #128	; 0x80
 800431e:	d104      	bne.n	800432a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004320:	4b04      	ldr	r3, [pc, #16]	; (8004334 <HAL_ETH_ErrorCallback+0x2c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f000 fdfb 	bl	8004f20 <osSemaphoreRelease>
  }
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	200051fc 	.word	0x200051fc

08004338 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004338:	b5b0      	push	{r4, r5, r7, lr}
 800433a:	b0a8      	sub	sp, #160	; 0xa0
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8004346:	2300      	movs	r3, #0
 8004348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 800434c:	2300      	movs	r3, #0
 800434e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8004352:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004356:	2264      	movs	r2, #100	; 0x64
 8004358:	2100      	movs	r1, #0
 800435a:	4618      	mov	r0, r3
 800435c:	f00f fefd 	bl	801415a <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004360:	4b85      	ldr	r3, [pc, #532]	; (8004578 <low_level_init+0x240>)
 8004362:	4a86      	ldr	r2, [pc, #536]	; (800457c <low_level_init+0x244>)
 8004364:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004366:	2300      	movs	r3, #0
 8004368:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 800436c:	2380      	movs	r3, #128	; 0x80
 800436e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8004372:	23e1      	movs	r3, #225	; 0xe1
 8004374:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8004378:	2300      	movs	r3, #0
 800437a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 800437e:	2300      	movs	r3, #0
 8004380:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8004384:	2300      	movs	r3, #0
 8004386:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800438a:	4a7b      	ldr	r2, [pc, #492]	; (8004578 <low_level_init+0x240>)
 800438c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004390:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004392:	4b79      	ldr	r3, [pc, #484]	; (8004578 <low_level_init+0x240>)
 8004394:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004398:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800439a:	4b77      	ldr	r3, [pc, #476]	; (8004578 <low_level_init+0x240>)
 800439c:	4a78      	ldr	r2, [pc, #480]	; (8004580 <low_level_init+0x248>)
 800439e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80043a0:	4b75      	ldr	r3, [pc, #468]	; (8004578 <low_level_init+0x240>)
 80043a2:	4a78      	ldr	r2, [pc, #480]	; (8004584 <low_level_init+0x24c>)
 80043a4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80043a6:	4b74      	ldr	r3, [pc, #464]	; (8004578 <low_level_init+0x240>)
 80043a8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80043ac:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80043ae:	4872      	ldr	r0, [pc, #456]	; (8004578 <low_level_init+0x240>)
 80043b0:	f7fd f942 	bl	8001638 <HAL_ETH_Init>
 80043b4:	4603      	mov	r3, r0
 80043b6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80043ba:	2238      	movs	r2, #56	; 0x38
 80043bc:	2100      	movs	r1, #0
 80043be:	4872      	ldr	r0, [pc, #456]	; (8004588 <low_level_init+0x250>)
 80043c0:	f00f fecb 	bl	801415a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80043c4:	4b70      	ldr	r3, [pc, #448]	; (8004588 <low_level_init+0x250>)
 80043c6:	2221      	movs	r2, #33	; 0x21
 80043c8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80043ca:	4b6f      	ldr	r3, [pc, #444]	; (8004588 <low_level_init+0x250>)
 80043cc:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80043d0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80043d2:	4b6d      	ldr	r3, [pc, #436]	; (8004588 <low_level_init+0x250>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80043d8:	486c      	ldr	r0, [pc, #432]	; (800458c <low_level_init+0x254>)
 80043da:	f004 f8f3 	bl	80085c4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2206      	movs	r2, #6
 80043e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80043e6:	4b64      	ldr	r3, [pc, #400]	; (8004578 <low_level_init+0x240>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	781a      	ldrb	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80043f2:	4b61      	ldr	r3, [pc, #388]	; (8004578 <low_level_init+0x240>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	785a      	ldrb	r2, [r3, #1]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80043fe:	4b5e      	ldr	r3, [pc, #376]	; (8004578 <low_level_init+0x240>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	789a      	ldrb	r2, [r3, #2]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800440a:	4b5b      	ldr	r3, [pc, #364]	; (8004578 <low_level_init+0x240>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	78da      	ldrb	r2, [r3, #3]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004416:	4b58      	ldr	r3, [pc, #352]	; (8004578 <low_level_init+0x240>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	791a      	ldrb	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004422:	4b55      	ldr	r3, [pc, #340]	; (8004578 <low_level_init+0x240>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	795a      	ldrb	r2, [r3, #5]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004434:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800443c:	f043 030a 	orr.w	r3, r3, #10
 8004440:	b2da      	uxtb	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8004448:	2203      	movs	r2, #3
 800444a:	2100      	movs	r1, #0
 800444c:	2001      	movs	r0, #1
 800444e:	f001 f80d 	bl	800546c <xQueueGenericCreate>
 8004452:	4603      	mov	r3, r0
 8004454:	4a4e      	ldr	r2, [pc, #312]	; (8004590 <low_level_init+0x258>)
 8004456:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8004458:	2203      	movs	r2, #3
 800445a:	2100      	movs	r1, #0
 800445c:	2001      	movs	r0, #1
 800445e:	f001 f805 	bl	800546c <xQueueGenericCreate>
 8004462:	4603      	mov	r3, r0
 8004464:	4a4b      	ldr	r2, [pc, #300]	; (8004594 <low_level_init+0x25c>)
 8004466:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004468:	4b4b      	ldr	r3, [pc, #300]	; (8004598 <low_level_init+0x260>)
 800446a:	f107 0408 	add.w	r4, r7, #8
 800446e:	461d      	mov	r5, r3
 8004470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004474:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004478:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800447c:	f107 0308 	add.w	r3, r7, #8
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fc02 	bl	8004c8c <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8004488:	4944      	ldr	r1, [pc, #272]	; (800459c <low_level_init+0x264>)
 800448a:	4845      	ldr	r0, [pc, #276]	; (80045a0 <low_level_init+0x268>)
 800448c:	f7fc fe2b 	bl	80010e6 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 8004490:	4843      	ldr	r0, [pc, #268]	; (80045a0 <low_level_init+0x268>)
 8004492:	f7fc fe5a 	bl	800114a <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 8004496:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800449a:	2b00      	cmp	r3, #0
 800449c:	d165      	bne.n	800456a <low_level_init+0x232>
  {
    PHYLinkState = DP83848_GetLinkState(&DP83848);
 800449e:	4840      	ldr	r0, [pc, #256]	; (80045a0 <low_level_init+0x268>)
 80044a0:	f7fc fefb 	bl	800129a <DP83848_GetLinkState>
 80044a4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= DP83848_STATUS_LINK_DOWN)
 80044a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	dc06      	bgt.n	80044be <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f004 fc6d 	bl	8008d90 <netif_set_link_down>
      netif_set_down(netif);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f004 fc00 	bl	8008cbc <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80044bc:	e057      	b.n	800456e <low_level_init+0x236>
      switch (PHYLinkState)
 80044be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044c2:	3b02      	subs	r3, #2
 80044c4:	2b03      	cmp	r3, #3
 80044c6:	d82b      	bhi.n	8004520 <low_level_init+0x1e8>
 80044c8:	a201      	add	r2, pc, #4	; (adr r2, 80044d0 <low_level_init+0x198>)
 80044ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ce:	bf00      	nop
 80044d0:	080044e1 	.word	0x080044e1
 80044d4:	080044f3 	.word	0x080044f3
 80044d8:	08004503 	.word	0x08004503
 80044dc:	08004513 	.word	0x08004513
        duplex = ETH_FULLDUPLEX_MODE;
 80044e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80044e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80044f0:	e01f      	b.n	8004532 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80044f2:	2300      	movs	r3, #0
 80044f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80044f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004500:	e017      	b.n	8004532 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004502:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004506:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800450a:	2300      	movs	r3, #0
 800450c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004510:	e00f      	b.n	8004532 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004512:	2300      	movs	r3, #0
 8004514:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004518:	2300      	movs	r3, #0
 800451a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800451e:	e008      	b.n	8004532 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004520:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004524:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004528:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800452c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004530:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004532:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004536:	4619      	mov	r1, r3
 8004538:	480f      	ldr	r0, [pc, #60]	; (8004578 <low_level_init+0x240>)
 800453a:	f7fd fdc1 	bl	80020c0 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800453e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004542:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8004544:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004548:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800454a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800454e:	4619      	mov	r1, r3
 8004550:	4809      	ldr	r0, [pc, #36]	; (8004578 <low_level_init+0x240>)
 8004552:	f7fd fe9f 	bl	8002294 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004556:	4808      	ldr	r0, [pc, #32]	; (8004578 <low_level_init+0x240>)
 8004558:	f7fd f94b 	bl	80017f2 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f004 fb41 	bl	8008be4 <netif_set_up>
    netif_set_link_up(netif);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f004 fbdc 	bl	8008d20 <netif_set_link_up>
}
 8004568:	e001      	b.n	800456e <low_level_init+0x236>
    Error_Handler();
 800456a:	f7fc fae1 	bl	8000b30 <Error_Handler>
}
 800456e:	bf00      	nop
 8004570:	37a0      	adds	r7, #160	; 0xa0
 8004572:	46bd      	mov	sp, r7
 8004574:	bdb0      	pop	{r4, r5, r7, pc}
 8004576:	bf00      	nop
 8004578:	20005204 	.word	0x20005204
 800457c:	40028000 	.word	0x40028000
 8004580:	2000515c 	.word	0x2000515c
 8004584:	200050bc 	.word	0x200050bc
 8004588:	200052b4 	.word	0x200052b4
 800458c:	08018010 	.word	0x08018010
 8004590:	200051fc 	.word	0x200051fc
 8004594:	20005200 	.word	0x20005200
 8004598:	08015158 	.word	0x08015158
 800459c:	2000000c 	.word	0x2000000c
 80045a0:	200052ec 	.word	0x200052ec

080045a4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b092      	sub	sp, #72	; 0x48
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80045b2:	2300      	movs	r3, #0
 80045b4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80045bc:	f107 030c 	add.w	r3, r7, #12
 80045c0:	2230      	movs	r2, #48	; 0x30
 80045c2:	2100      	movs	r1, #0
 80045c4:	4618      	mov	r0, r3
 80045c6:	f00f fdc8 	bl	801415a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80045ca:	f107 030c 	add.w	r3, r7, #12
 80045ce:	2230      	movs	r2, #48	; 0x30
 80045d0:	2100      	movs	r1, #0
 80045d2:	4618      	mov	r0, r3
 80045d4:	f00f fdc1 	bl	801415a <memset>

  for(q = p; q != NULL; q = q->next)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	643b      	str	r3, [r7, #64]	; 0x40
 80045dc:	e045      	b.n	800466a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80045de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d902      	bls.n	80045ea <low_level_output+0x46>
      return ERR_IF;
 80045e4:	f06f 030b 	mvn.w	r3, #11
 80045e8:	e065      	b.n	80046b6 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80045ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ec:	6859      	ldr	r1, [r3, #4]
 80045ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045f0:	4613      	mov	r3, r2
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	3348      	adds	r3, #72	; 0x48
 80045fa:	443b      	add	r3, r7
 80045fc:	3b3c      	subs	r3, #60	; 0x3c
 80045fe:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004602:	895b      	ldrh	r3, [r3, #10]
 8004604:	4619      	mov	r1, r3
 8004606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004608:	4613      	mov	r3, r2
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	4413      	add	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	3348      	adds	r3, #72	; 0x48
 8004612:	443b      	add	r3, r7
 8004614:	3b38      	subs	r3, #56	; 0x38
 8004616:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800461a:	2b00      	cmp	r3, #0
 800461c:	d011      	beq.n	8004642 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800461e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004620:	1e5a      	subs	r2, r3, #1
 8004622:	f107 000c 	add.w	r0, r7, #12
 8004626:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004628:	460b      	mov	r3, r1
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	440b      	add	r3, r1
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	18c1      	adds	r1, r0, r3
 8004632:	4613      	mov	r3, r2
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	4413      	add	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	3348      	adds	r3, #72	; 0x48
 800463c:	443b      	add	r3, r7
 800463e:	3b34      	subs	r3, #52	; 0x34
 8004640:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d109      	bne.n	800465e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800464a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800464c:	4613      	mov	r3, r2
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	3348      	adds	r3, #72	; 0x48
 8004656:	443b      	add	r3, r7
 8004658:	3b34      	subs	r3, #52	; 0x34
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800465e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004660:	3301      	adds	r3, #1
 8004662:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	643b      	str	r3, [r7, #64]	; 0x40
 800466a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1b6      	bne.n	80045de <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	891b      	ldrh	r3, [r3, #8]
 8004674:	461a      	mov	r2, r3
 8004676:	4b12      	ldr	r3, [pc, #72]	; (80046c0 <low_level_output+0x11c>)
 8004678:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800467a:	4a11      	ldr	r2, [pc, #68]	; (80046c0 <low_level_output+0x11c>)
 800467c:	f107 030c 	add.w	r3, r7, #12
 8004680:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004682:	4a0f      	ldr	r2, [pc, #60]	; (80046c0 <low_level_output+0x11c>)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8004688:	6838      	ldr	r0, [r7, #0]
 800468a:	f005 f805 	bl	8009698 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800468e:	490c      	ldr	r1, [pc, #48]	; (80046c0 <low_level_output+0x11c>)
 8004690:	480c      	ldr	r0, [pc, #48]	; (80046c4 <low_level_output+0x120>)
 8004692:	f7fd f9bb 	bl	8001a0c <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8004696:	bf00      	nop
 8004698:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <low_level_output+0x124>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f04f 31ff 	mov.w	r1, #4294967295
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fbef 	bl	8004e84 <osSemaphoreWait>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1f5      	bne.n	8004698 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80046ac:	4805      	ldr	r0, [pc, #20]	; (80046c4 <low_level_output+0x120>)
 80046ae:	f7fd fb41 	bl	8001d34 <HAL_ETH_ReleaseTxPacket>

  return errval;
 80046b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3748      	adds	r7, #72	; 0x48
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	200052b4 	.word	0x200052b4
 80046c4:	20005204 	.word	0x20005204
 80046c8:	20005200 	.word	0x20005200

080046cc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80046d8:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <low_level_input+0x2c>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d105      	bne.n	80046ec <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80046e0:	f107 030c 	add.w	r3, r7, #12
 80046e4:	4619      	mov	r1, r3
 80046e6:	4805      	ldr	r0, [pc, #20]	; (80046fc <low_level_input+0x30>)
 80046e8:	f7fd f9ec 	bl	8001ac4 <HAL_ETH_ReadData>
  }

  return p;
 80046ec:	68fb      	ldr	r3, [r7, #12]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	200050b8 	.word	0x200050b8
 80046fc:	20005204 	.word	0x20005204

08004700 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004708:	2300      	movs	r3, #0
 800470a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004710:	4b0f      	ldr	r3, [pc, #60]	; (8004750 <ethernetif_input+0x50>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f04f 31ff 	mov.w	r1, #4294967295
 8004718:	4618      	mov	r0, r3
 800471a:	f000 fbb3 	bl	8004e84 <osSemaphoreWait>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1f5      	bne.n	8004710 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004724:	68b8      	ldr	r0, [r7, #8]
 8004726:	f7ff ffd1 	bl	80046cc <low_level_input>
 800472a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	68b9      	ldr	r1, [r7, #8]
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	4798      	blx	r3
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f004 ff02 	bl	800954c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1ea      	bne.n	8004724 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800474e:	e7df      	b.n	8004710 <ethernetif_input+0x10>
 8004750:	200051fc 	.word	0x200051fc

08004754 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <ethernetif_init+0x1c>
 8004762:	4b0e      	ldr	r3, [pc, #56]	; (800479c <ethernetif_init+0x48>)
 8004764:	f240 12df 	movw	r2, #479	; 0x1df
 8004768:	490d      	ldr	r1, [pc, #52]	; (80047a0 <ethernetif_init+0x4c>)
 800476a:	480e      	ldr	r0, [pc, #56]	; (80047a4 <ethernetif_init+0x50>)
 800476c:	f00f fd92 	bl	8014294 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2273      	movs	r2, #115	; 0x73
 8004774:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2274      	movs	r2, #116	; 0x74
 800477c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a09      	ldr	r2, [pc, #36]	; (80047a8 <ethernetif_init+0x54>)
 8004784:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a08      	ldr	r2, [pc, #32]	; (80047ac <ethernetif_init+0x58>)
 800478a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff fdd3 	bl	8004338 <low_level_init>

  return ERR_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	08015174 	.word	0x08015174
 80047a0:	08015190 	.word	0x08015190
 80047a4:	080151a0 	.word	0x080151a0
 80047a8:	08011f89 	.word	0x08011f89
 80047ac:	080045a5 	.word	0x080045a5

080047b0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80047bc:	68f9      	ldr	r1, [r7, #12]
 80047be:	4809      	ldr	r0, [pc, #36]	; (80047e4 <pbuf_free_custom+0x34>)
 80047c0:	f003 fff0 	bl	80087a4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80047c4:	4b08      	ldr	r3, [pc, #32]	; (80047e8 <pbuf_free_custom+0x38>)
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d107      	bne.n	80047dc <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80047cc:	4b06      	ldr	r3, [pc, #24]	; (80047e8 <pbuf_free_custom+0x38>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80047d2:	4b06      	ldr	r3, [pc, #24]	; (80047ec <pbuf_free_custom+0x3c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 fba2 	bl	8004f20 <osSemaphoreRelease>
  }
}
 80047dc:	bf00      	nop
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	08018010 	.word	0x08018010
 80047e8:	200050b8 	.word	0x200050b8
 80047ec:	200051fc 	.word	0x200051fc

080047f0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80047f4:	f7fc fe0e 	bl	8001414 <HAL_GetTick>
 80047f8:	4603      	mov	r3, r0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	bd80      	pop	{r7, pc}
	...

08004800 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08e      	sub	sp, #56	; 0x38
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800480c:	2200      	movs	r2, #0
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	605a      	str	r2, [r3, #4]
 8004812:	609a      	str	r2, [r3, #8]
 8004814:	60da      	str	r2, [r3, #12]
 8004816:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a4a      	ldr	r2, [pc, #296]	; (8004948 <HAL_ETH_MspInit+0x148>)
 800481e:	4293      	cmp	r3, r2
 8004820:	f040 808d 	bne.w	800493e <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004824:	2300      	movs	r3, #0
 8004826:	623b      	str	r3, [r7, #32]
 8004828:	4b48      	ldr	r3, [pc, #288]	; (800494c <HAL_ETH_MspInit+0x14c>)
 800482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482c:	4a47      	ldr	r2, [pc, #284]	; (800494c <HAL_ETH_MspInit+0x14c>)
 800482e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004832:	6313      	str	r3, [r2, #48]	; 0x30
 8004834:	4b45      	ldr	r3, [pc, #276]	; (800494c <HAL_ETH_MspInit+0x14c>)
 8004836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483c:	623b      	str	r3, [r7, #32]
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	2300      	movs	r3, #0
 8004842:	61fb      	str	r3, [r7, #28]
 8004844:	4b41      	ldr	r3, [pc, #260]	; (800494c <HAL_ETH_MspInit+0x14c>)
 8004846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004848:	4a40      	ldr	r2, [pc, #256]	; (800494c <HAL_ETH_MspInit+0x14c>)
 800484a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800484e:	6313      	str	r3, [r2, #48]	; 0x30
 8004850:	4b3e      	ldr	r3, [pc, #248]	; (800494c <HAL_ETH_MspInit+0x14c>)
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004858:	61fb      	str	r3, [r7, #28]
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	2300      	movs	r3, #0
 800485e:	61bb      	str	r3, [r7, #24]
 8004860:	4b3a      	ldr	r3, [pc, #232]	; (800494c <HAL_ETH_MspInit+0x14c>)
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	4a39      	ldr	r2, [pc, #228]	; (800494c <HAL_ETH_MspInit+0x14c>)
 8004866:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800486a:	6313      	str	r3, [r2, #48]	; 0x30
 800486c:	4b37      	ldr	r3, [pc, #220]	; (800494c <HAL_ETH_MspInit+0x14c>)
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004874:	61bb      	str	r3, [r7, #24]
 8004876:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004878:	2300      	movs	r3, #0
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	4b33      	ldr	r3, [pc, #204]	; (800494c <HAL_ETH_MspInit+0x14c>)
 800487e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004880:	4a32      	ldr	r2, [pc, #200]	; (800494c <HAL_ETH_MspInit+0x14c>)
 8004882:	f043 0304 	orr.w	r3, r3, #4
 8004886:	6313      	str	r3, [r2, #48]	; 0x30
 8004888:	4b30      	ldr	r3, [pc, #192]	; (800494c <HAL_ETH_MspInit+0x14c>)
 800488a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	617b      	str	r3, [r7, #20]
 8004892:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004894:	2300      	movs	r3, #0
 8004896:	613b      	str	r3, [r7, #16]
 8004898:	4b2c      	ldr	r3, [pc, #176]	; (800494c <HAL_ETH_MspInit+0x14c>)
 800489a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489c:	4a2b      	ldr	r2, [pc, #172]	; (800494c <HAL_ETH_MspInit+0x14c>)
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	6313      	str	r3, [r2, #48]	; 0x30
 80048a4:	4b29      	ldr	r3, [pc, #164]	; (800494c <HAL_ETH_MspInit+0x14c>)
 80048a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	613b      	str	r3, [r7, #16]
 80048ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048b0:	2300      	movs	r3, #0
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	4b25      	ldr	r3, [pc, #148]	; (800494c <HAL_ETH_MspInit+0x14c>)
 80048b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b8:	4a24      	ldr	r2, [pc, #144]	; (800494c <HAL_ETH_MspInit+0x14c>)
 80048ba:	f043 0302 	orr.w	r3, r3, #2
 80048be:	6313      	str	r3, [r2, #48]	; 0x30
 80048c0:	4b22      	ldr	r3, [pc, #136]	; (800494c <HAL_ETH_MspInit+0x14c>)
 80048c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80048cc:	2332      	movs	r3, #50	; 0x32
 80048ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d0:	2302      	movs	r3, #2
 80048d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048d8:	2303      	movs	r3, #3
 80048da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80048dc:	230b      	movs	r3, #11
 80048de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048e4:	4619      	mov	r1, r3
 80048e6:	481a      	ldr	r0, [pc, #104]	; (8004950 <HAL_ETH_MspInit+0x150>)
 80048e8:	f7fe f956 	bl	8002b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80048ec:	2386      	movs	r3, #134	; 0x86
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048f0:	2302      	movs	r3, #2
 80048f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f4:	2300      	movs	r3, #0
 80048f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048f8:	2303      	movs	r3, #3
 80048fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80048fc:	230b      	movs	r3, #11
 80048fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004904:	4619      	mov	r1, r3
 8004906:	4813      	ldr	r0, [pc, #76]	; (8004954 <HAL_ETH_MspInit+0x154>)
 8004908:	f7fe f946 	bl	8002b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800490c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004910:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004912:	2302      	movs	r3, #2
 8004914:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004916:	2300      	movs	r3, #0
 8004918:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800491a:	2303      	movs	r3, #3
 800491c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800491e:	230b      	movs	r3, #11
 8004920:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004926:	4619      	mov	r1, r3
 8004928:	480b      	ldr	r0, [pc, #44]	; (8004958 <HAL_ETH_MspInit+0x158>)
 800492a:	f7fe f935 	bl	8002b98 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800492e:	2200      	movs	r2, #0
 8004930:	2105      	movs	r1, #5
 8004932:	203d      	movs	r0, #61	; 0x3d
 8004934:	f7fc fe56 	bl	80015e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004938:	203d      	movs	r0, #61	; 0x3d
 800493a:	f7fc fe6f 	bl	800161c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800493e:	bf00      	nop
 8004940:	3738      	adds	r7, #56	; 0x38
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40028000 	.word	0x40028000
 800494c:	40023800 	.word	0x40023800
 8004950:	40020800 	.word	0x40020800
 8004954:	40020000 	.word	0x40020000
 8004958:	40020400 	.word	0x40020400

0800495c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004960:	4802      	ldr	r0, [pc, #8]	; (800496c <ETH_PHY_IO_Init+0x10>)
 8004962:	f7fd fcb1 	bl	80022c8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	bd80      	pop	{r7, pc}
 800496c:	20005204 	.word	0x20005204

08004970 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  return 0;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	68f9      	ldr	r1, [r7, #12]
 8004992:	4807      	ldr	r0, [pc, #28]	; (80049b0 <ETH_PHY_IO_ReadReg+0x30>)
 8004994:	f7fd fb00 	bl	8001f98 <HAL_ETH_ReadPHYRegister>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800499e:	f04f 33ff 	mov.w	r3, #4294967295
 80049a2:	e000      	b.n	80049a6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20005204 	.word	0x20005204

080049b4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	68f9      	ldr	r1, [r7, #12]
 80049c6:	4807      	ldr	r0, [pc, #28]	; (80049e4 <ETH_PHY_IO_WriteReg+0x30>)
 80049c8:	f7fd fb31 	bl	800202e <HAL_ETH_WritePHYRegister>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80049d2:	f04f 33ff 	mov.w	r3, #4294967295
 80049d6:	e000      	b.n	80049da <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20005204 	.word	0x20005204

080049e8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80049ec:	f7fc fd12 	bl	8001414 <HAL_GetTick>
 80049f0:	4603      	mov	r3, r0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b0a0      	sub	sp, #128	; 0x80
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004a00:	f107 0308 	add.w	r3, r7, #8
 8004a04:	2264      	movs	r2, #100	; 0x64
 8004a06:	2100      	movs	r1, #0
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f00f fba6 	bl	801415a <memset>
  int32_t PHYLinkState = 0;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004a12:	2300      	movs	r3, #0
 8004a14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a16:	2300      	movs	r3, #0
 8004a18:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8004a22:	483a      	ldr	r0, [pc, #232]	; (8004b0c <ethernet_link_thread+0x114>)
 8004a24:	f7fc fc39 	bl	800129a <DP83848_GetLinkState>
 8004a28:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8004a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a2c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004a30:	089b      	lsrs	r3, r3, #2
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00c      	beq.n	8004a56 <ethernet_link_thread+0x5e>
 8004a3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	dc09      	bgt.n	8004a56 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8004a42:	4833      	ldr	r0, [pc, #204]	; (8004b10 <ethernet_link_thread+0x118>)
 8004a44:	f7fc ff63 	bl	800190e <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004a48:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004a4a:	f004 f937 	bl	8008cbc <netif_set_down>
    netif_set_link_down(netif);
 8004a4e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004a50:	f004 f99e 	bl	8008d90 <netif_set_link_down>
 8004a54:	e055      	b.n	8004b02 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 8004a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a58:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d14e      	bne.n	8004b02 <ethernet_link_thread+0x10a>
 8004a64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	dd4b      	ble.n	8004b02 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8004a6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a6c:	3b02      	subs	r3, #2
 8004a6e:	2b03      	cmp	r3, #3
 8004a70:	d82a      	bhi.n	8004ac8 <ethernet_link_thread+0xd0>
 8004a72:	a201      	add	r2, pc, #4	; (adr r2, 8004a78 <ethernet_link_thread+0x80>)
 8004a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a78:	08004a89 	.word	0x08004a89
 8004a7c:	08004a9b 	.word	0x08004a9b
 8004a80:	08004aab 	.word	0x08004aab
 8004a84:	08004abb 	.word	0x08004abb
    {
    case DP83848_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004a88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a8c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004a8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a92:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004a94:	2301      	movs	r3, #1
 8004a96:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004a98:	e017      	b.n	8004aca <ethernet_link_thread+0xd2>
    case DP83848_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004a9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004aa2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004aa8:	e00f      	b.n	8004aca <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004aaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004aae:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004ab8:	e007      	b.n	8004aca <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004aba:	2300      	movs	r3, #0
 8004abc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004ac6:	e000      	b.n	8004aca <ethernet_link_thread+0xd2>
    default:
      break;
 8004ac8:	bf00      	nop
    }

    if(linkchanged)
 8004aca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d018      	beq.n	8004b02 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004ad0:	f107 0308 	add.w	r3, r7, #8
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	480e      	ldr	r0, [pc, #56]	; (8004b10 <ethernet_link_thread+0x118>)
 8004ad8:	f7fd faf2 	bl	80020c0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004adc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ade:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8004ae0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ae2:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004ae4:	f107 0308 	add.w	r3, r7, #8
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4809      	ldr	r0, [pc, #36]	; (8004b10 <ethernet_link_thread+0x118>)
 8004aec:	f7fd fbd2 	bl	8002294 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004af0:	4807      	ldr	r0, [pc, #28]	; (8004b10 <ethernet_link_thread+0x118>)
 8004af2:	f7fc fe1f 	bl	8001734 <HAL_ETH_Start>
      netif_set_up(netif);
 8004af6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004af8:	f004 f874 	bl	8008be4 <netif_set_up>
      netif_set_link_up(netif);
 8004afc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004afe:	f004 f90f 	bl	8008d20 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8004b02:	2064      	movs	r0, #100	; 0x64
 8004b04:	f000 f90e 	bl	8004d24 <osDelay>
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8004b08:	e78b      	b.n	8004a22 <ethernet_link_thread+0x2a>
 8004b0a:	bf00      	nop
 8004b0c:	200052ec 	.word	0x200052ec
 8004b10:	20005204 	.word	0x20005204

08004b14 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004b1c:	4812      	ldr	r0, [pc, #72]	; (8004b68 <HAL_ETH_RxAllocateCallback+0x54>)
 8004b1e:	f003 fdcd 	bl	80086bc <memp_malloc_pool>
 8004b22:	60f8      	str	r0, [r7, #12]
  if (p)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d014      	beq.n	8004b54 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f103 0220 	add.w	r2, r3, #32
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4a0d      	ldr	r2, [pc, #52]	; (8004b6c <HAL_ETH_RxAllocateCallback+0x58>)
 8004b38:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004b42:	9201      	str	r2, [sp, #4]
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2241      	movs	r2, #65	; 0x41
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	f004 fb43 	bl	80091d8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004b52:	e005      	b.n	8004b60 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004b54:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004b56:	2201      	movs	r2, #1
 8004b58:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]
}
 8004b60:	bf00      	nop
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	08018010 	.word	0x08018010
 8004b6c:	080047b1 	.word	0x080047b1
 8004b70:	200050b8 	.word	0x200050b8

08004b74 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b089      	sub	sp, #36	; 0x24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	3b20      	subs	r3, #32
 8004b92:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	887a      	ldrh	r2, [r7, #2]
 8004ba4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d103      	bne.n	8004bb6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	69fa      	ldr	r2, [r7, #28]
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	e003      	b.n	8004bbe <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69fa      	ldr	r2, [r7, #28]
 8004bbc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	69fa      	ldr	r2, [r7, #28]
 8004bc2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	61fb      	str	r3, [r7, #28]
 8004bca:	e009      	b.n	8004be0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	891a      	ldrh	r2, [r3, #8]
 8004bd0:	887b      	ldrh	r3, [r7, #2]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	61fb      	str	r3, [r7, #28]
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f2      	bne.n	8004bcc <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004be6:	bf00      	nop
 8004be8:	bf00      	nop
 8004bea:	3724      	adds	r7, #36	; 0x24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f004 fca5 	bl	800954c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8004c02:	bf00      	nop
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b085      	sub	sp, #20
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	4603      	mov	r3, r0
 8004c12:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004c14:	2300      	movs	r3, #0
 8004c16:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004c18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c1c:	2b84      	cmp	r3, #132	; 0x84
 8004c1e:	d005      	beq.n	8004c2c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004c20:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4413      	add	r3, r2
 8004c28:	3303      	adds	r3, #3
 8004c2a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b083      	sub	sp, #12
 8004c3e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c40:	f3ef 8305 	mrs	r3, IPSR
 8004c44:	607b      	str	r3, [r7, #4]
  return(result);
 8004c46:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	bf14      	ite	ne
 8004c4c:	2301      	movne	r3, #1
 8004c4e:	2300      	moveq	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004c62:	f001 fc41 	bl	80064e8 <vTaskStartScheduler>
  
  return osOK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004c70:	f7ff ffe3 	bl	8004c3a <inHandlerMode>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004c7a:	f001 fd59 	bl	8006730 <xTaskGetTickCountFromISR>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	e002      	b.n	8004c88 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004c82:	f001 fd45 	bl	8006710 <xTaskGetTickCount>
 8004c86:	4603      	mov	r3, r0
  }
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c8e:	b089      	sub	sp, #36	; 0x24
 8004c90:	af04      	add	r7, sp, #16
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d020      	beq.n	8004ce0 <osThreadCreate+0x54>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d01c      	beq.n	8004ce0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685c      	ldr	r4, [r3, #4]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681d      	ldr	r5, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691e      	ldr	r6, [r3, #16]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7ff ffa6 	bl	8004c0a <makeFreeRtosPriority>
 8004cbe:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cc8:	9202      	str	r2, [sp, #8]
 8004cca:	9301      	str	r3, [sp, #4]
 8004ccc:	9100      	str	r1, [sp, #0]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	4632      	mov	r2, r6
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	f001 fa29 	bl	800612c <xTaskCreateStatic>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	e01c      	b.n	8004d1a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685c      	ldr	r4, [r3, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cec:	b29e      	uxth	r6, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff ff88 	bl	8004c0a <makeFreeRtosPriority>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	f107 030c 	add.w	r3, r7, #12
 8004d00:	9301      	str	r3, [sp, #4]
 8004d02:	9200      	str	r2, [sp, #0]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	4632      	mov	r2, r6
 8004d08:	4629      	mov	r1, r5
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	f001 fa6b 	bl	80061e6 <xTaskCreate>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d001      	beq.n	8004d1a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004d16:	2300      	movs	r3, #0
 8004d18:	e000      	b.n	8004d1c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d24 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <osDelay+0x16>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	e000      	b.n	8004d3c <osDelay+0x18>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f001 fb9f 	bl	8006480 <vTaskDelay>
  
  return osOK;
 8004d42:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d007      	beq.n	8004d6c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	4619      	mov	r1, r3
 8004d62:	2001      	movs	r0, #1
 8004d64:	f000 fc0d 	bl	8005582 <xQueueCreateMutexStatic>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	e003      	b.n	8004d74 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004d6c:	2001      	movs	r0, #1
 8004d6e:	f000 fbf0 	bl	8005552 <xQueueCreateMutex>
 8004d72:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004d86:	2300      	movs	r3, #0
 8004d88:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <osMutexWait+0x18>
    return osErrorParameter;
 8004d90:	2380      	movs	r3, #128	; 0x80
 8004d92:	e03a      	b.n	8004e0a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004d94:	2300      	movs	r3, #0
 8004d96:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9e:	d103      	bne.n	8004da8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004da0:	f04f 33ff 	mov.w	r3, #4294967295
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	e009      	b.n	8004dbc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d006      	beq.n	8004dbc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <osMutexWait+0x40>
      ticks = 1;
 8004db8:	2301      	movs	r3, #1
 8004dba:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004dbc:	f7ff ff3d 	bl	8004c3a <inHandlerMode>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d017      	beq.n	8004df6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004dc6:	f107 0308 	add.w	r3, r7, #8
 8004dca:	461a      	mov	r2, r3
 8004dcc:	2100      	movs	r1, #0
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f001 f804 	bl	8005ddc <xQueueReceiveFromISR>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d001      	beq.n	8004dde <osMutexWait+0x62>
      return osErrorOS;
 8004dda:	23ff      	movs	r3, #255	; 0xff
 8004ddc:	e015      	b.n	8004e0a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d011      	beq.n	8004e08 <osMutexWait+0x8c>
 8004de4:	4b0b      	ldr	r3, [pc, #44]	; (8004e14 <osMutexWait+0x98>)
 8004de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	e008      	b.n	8004e08 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004df6:	68f9      	ldr	r1, [r7, #12]
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 fee3 	bl	8005bc4 <xQueueSemaphoreTake>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d001      	beq.n	8004e08 <osMutexWait+0x8c>
    return osErrorOS;
 8004e04:	23ff      	movs	r3, #255	; 0xff
 8004e06:	e000      	b.n	8004e0a <osMutexWait+0x8e>
  }
  
  return osOK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	e000ed04 	.word	0xe000ed04

08004e18 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004e20:	2300      	movs	r3, #0
 8004e22:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004e24:	2300      	movs	r3, #0
 8004e26:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004e28:	f7ff ff07 	bl	8004c3a <inHandlerMode>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d016      	beq.n	8004e60 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004e32:	f107 0308 	add.w	r3, r7, #8
 8004e36:	4619      	mov	r1, r3
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 fd56 	bl	80058ea <xQueueGiveFromISR>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d001      	beq.n	8004e48 <osMutexRelease+0x30>
      return osErrorOS;
 8004e44:	23ff      	movs	r3, #255	; 0xff
 8004e46:	e017      	b.n	8004e78 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d013      	beq.n	8004e76 <osMutexRelease+0x5e>
 8004e4e:	4b0c      	ldr	r3, [pc, #48]	; (8004e80 <osMutexRelease+0x68>)
 8004e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	e00a      	b.n	8004e76 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004e60:	2300      	movs	r3, #0
 8004e62:	2200      	movs	r2, #0
 8004e64:	2100      	movs	r1, #0
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fba6 	bl	80055b8 <xQueueGenericSend>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d001      	beq.n	8004e76 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004e72:	23ff      	movs	r3, #255	; 0xff
 8004e74:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004e76:	68fb      	ldr	r3, [r7, #12]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	e000ed04 	.word	0xe000ed04

08004e84 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004e98:	2380      	movs	r3, #128	; 0x80
 8004e9a:	e03a      	b.n	8004f12 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea6:	d103      	bne.n	8004eb0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	e009      	b.n	8004ec4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d006      	beq.n	8004ec4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <osSemaphoreWait+0x40>
      ticks = 1;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004ec4:	f7ff feb9 	bl	8004c3a <inHandlerMode>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d017      	beq.n	8004efe <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004ece:	f107 0308 	add.w	r3, r7, #8
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 ff80 	bl	8005ddc <xQueueReceiveFromISR>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d001      	beq.n	8004ee6 <osSemaphoreWait+0x62>
      return osErrorOS;
 8004ee2:	23ff      	movs	r3, #255	; 0xff
 8004ee4:	e015      	b.n	8004f12 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d011      	beq.n	8004f10 <osSemaphoreWait+0x8c>
 8004eec:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <osSemaphoreWait+0x98>)
 8004eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	e008      	b.n	8004f10 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004efe:	68f9      	ldr	r1, [r7, #12]
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 fe5f 	bl	8005bc4 <xQueueSemaphoreTake>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d001      	beq.n	8004f10 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004f0c:	23ff      	movs	r3, #255	; 0xff
 8004f0e:	e000      	b.n	8004f12 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	e000ed04 	.word	0xe000ed04

08004f20 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004f30:	f7ff fe83 	bl	8004c3a <inHandlerMode>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d016      	beq.n	8004f68 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004f3a:	f107 0308 	add.w	r3, r7, #8
 8004f3e:	4619      	mov	r1, r3
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 fcd2 	bl	80058ea <xQueueGiveFromISR>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d001      	beq.n	8004f50 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004f4c:	23ff      	movs	r3, #255	; 0xff
 8004f4e:	e017      	b.n	8004f80 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d013      	beq.n	8004f7e <osSemaphoreRelease+0x5e>
 8004f56:	4b0c      	ldr	r3, [pc, #48]	; (8004f88 <osSemaphoreRelease+0x68>)
 8004f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	e00a      	b.n	8004f7e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004f68:	2300      	movs	r3, #0
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fb22 	bl	80055b8 <xQueueGenericSend>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d001      	beq.n	8004f7e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004f7a:	23ff      	movs	r3, #255	; 0xff
 8004f7c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	e000ed04 	.word	0xe000ed04

08004f8c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004f8c:	b590      	push	{r4, r7, lr}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d011      	beq.n	8004fc2 <osMessageCreate+0x36>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00d      	beq.n	8004fc2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6818      	ldr	r0, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6859      	ldr	r1, [r3, #4]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	2400      	movs	r4, #0
 8004fb8:	9400      	str	r4, [sp, #0]
 8004fba:	f000 f9df 	bl	800537c <xQueueGenericCreateStatic>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	e008      	b.n	8004fd4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6818      	ldr	r0, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	4619      	mov	r1, r3
 8004fce:	f000 fa4d 	bl	800546c <xQueueGenericCreate>
 8004fd2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd90      	pop	{r4, r7, pc}

08004fdc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <osMessagePut+0x1e>
    ticks = 1;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004ffa:	f7ff fe1e 	bl	8004c3a <inHandlerMode>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d018      	beq.n	8005036 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005004:	f107 0210 	add.w	r2, r7, #16
 8005008:	f107 0108 	add.w	r1, r7, #8
 800500c:	2300      	movs	r3, #0
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 fbd0 	bl	80057b4 <xQueueGenericSendFromISR>
 8005014:	4603      	mov	r3, r0
 8005016:	2b01      	cmp	r3, #1
 8005018:	d001      	beq.n	800501e <osMessagePut+0x42>
      return osErrorOS;
 800501a:	23ff      	movs	r3, #255	; 0xff
 800501c:	e018      	b.n	8005050 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d014      	beq.n	800504e <osMessagePut+0x72>
 8005024:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <osMessagePut+0x7c>)
 8005026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	f3bf 8f6f 	isb	sy
 8005034:	e00b      	b.n	800504e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005036:	f107 0108 	add.w	r1, r7, #8
 800503a:	2300      	movs	r3, #0
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 faba 	bl	80055b8 <xQueueGenericSend>
 8005044:	4603      	mov	r3, r0
 8005046:	2b01      	cmp	r3, #1
 8005048:	d001      	beq.n	800504e <osMessagePut+0x72>
      return osErrorOS;
 800504a:	23ff      	movs	r3, #255	; 0xff
 800504c:	e000      	b.n	8005050 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	e000ed04 	.word	0xe000ed04

0800505c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800505c:	b590      	push	{r4, r7, lr}
 800505e:	b08b      	sub	sp, #44	; 0x2c
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800506c:	2300      	movs	r3, #0
 800506e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10a      	bne.n	800508c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005076:	2380      	movs	r3, #128	; 0x80
 8005078:	617b      	str	r3, [r7, #20]
    return event;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	461c      	mov	r4, r3
 800507e:	f107 0314 	add.w	r3, r7, #20
 8005082:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005086:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800508a:	e054      	b.n	8005136 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800508c:	2300      	movs	r3, #0
 800508e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005090:	2300      	movs	r3, #0
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509a:	d103      	bne.n	80050a4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800509c:	f04f 33ff 	mov.w	r3, #4294967295
 80050a0:	627b      	str	r3, [r7, #36]	; 0x24
 80050a2:	e009      	b.n	80050b8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d006      	beq.n	80050b8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <osMessageGet+0x5c>
      ticks = 1;
 80050b4:	2301      	movs	r3, #1
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80050b8:	f7ff fdbf 	bl	8004c3a <inHandlerMode>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d01c      	beq.n	80050fc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80050c2:	f107 0220 	add.w	r2, r7, #32
 80050c6:	f107 0314 	add.w	r3, r7, #20
 80050ca:	3304      	adds	r3, #4
 80050cc:	4619      	mov	r1, r3
 80050ce:	68b8      	ldr	r0, [r7, #8]
 80050d0:	f000 fe84 	bl	8005ddc <xQueueReceiveFromISR>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d102      	bne.n	80050e0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80050da:	2310      	movs	r3, #16
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	e001      	b.n	80050e4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d01d      	beq.n	8005126 <osMessageGet+0xca>
 80050ea:	4b15      	ldr	r3, [pc, #84]	; (8005140 <osMessageGet+0xe4>)
 80050ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	f3bf 8f4f 	dsb	sy
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	e014      	b.n	8005126 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80050fc:	f107 0314 	add.w	r3, r7, #20
 8005100:	3304      	adds	r3, #4
 8005102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005104:	4619      	mov	r1, r3
 8005106:	68b8      	ldr	r0, [r7, #8]
 8005108:	f000 fc7c 	bl	8005a04 <xQueueReceive>
 800510c:	4603      	mov	r3, r0
 800510e:	2b01      	cmp	r3, #1
 8005110:	d102      	bne.n	8005118 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005112:	2310      	movs	r3, #16
 8005114:	617b      	str	r3, [r7, #20]
 8005116:	e006      	b.n	8005126 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <osMessageGet+0xc6>
 800511e:	2300      	movs	r3, #0
 8005120:	e000      	b.n	8005124 <osMessageGet+0xc8>
 8005122:	2340      	movs	r3, #64	; 0x40
 8005124:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	461c      	mov	r4, r3
 800512a:	f107 0314 	add.w	r3, r7, #20
 800512e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005132:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	372c      	adds	r7, #44	; 0x2c
 800513a:	46bd      	mov	sp, r7
 800513c:	bd90      	pop	{r4, r7, pc}
 800513e:	bf00      	nop
 8005140:	e000ed04 	.word	0xe000ed04

08005144 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f103 0208 	add.w	r2, r3, #8
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f04f 32ff 	mov.w	r2, #4294967295
 800515c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f103 0208 	add.w	r2, r3, #8
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f103 0208 	add.w	r2, r3, #8
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800519e:	b480      	push	{r7}
 80051a0:	b085      	sub	sp, #20
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	601a      	str	r2, [r3, #0]
}
 80051da:	bf00      	nop
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051e6:	b480      	push	{r7}
 80051e8:	b085      	sub	sp, #20
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
 80051ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fc:	d103      	bne.n	8005206 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	e00c      	b.n	8005220 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	3308      	adds	r3, #8
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	e002      	b.n	8005214 <vListInsert+0x2e>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	429a      	cmp	r2, r3
 800521e:	d2f6      	bcs.n	800520e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	601a      	str	r2, [r3, #0]
}
 800524c:	bf00      	nop
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	6892      	ldr	r2, [r2, #8]
 800526e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6852      	ldr	r2, [r2, #4]
 8005278:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	429a      	cmp	r2, r3
 8005282:	d103      	bne.n	800528c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	1e5a      	subs	r2, r3, #1
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10a      	bne.n	80052d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80052d2:	bf00      	nop
 80052d4:	e7fe      	b.n	80052d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80052d6:	f002 f88d 	bl	80073f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e2:	68f9      	ldr	r1, [r7, #12]
 80052e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052e6:	fb01 f303 	mul.w	r3, r1, r3
 80052ea:	441a      	add	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005306:	3b01      	subs	r3, #1
 8005308:	68f9      	ldr	r1, [r7, #12]
 800530a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800530c:	fb01 f303 	mul.w	r3, r1, r3
 8005310:	441a      	add	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	22ff      	movs	r2, #255	; 0xff
 800531a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	22ff      	movs	r2, #255	; 0xff
 8005322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d114      	bne.n	8005356 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01a      	beq.n	800536a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	3310      	adds	r3, #16
 8005338:	4618      	mov	r0, r3
 800533a:	f001 fb49 	bl	80069d0 <xTaskRemoveFromEventList>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d012      	beq.n	800536a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005344:	4b0c      	ldr	r3, [pc, #48]	; (8005378 <xQueueGenericReset+0xcc>)
 8005346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	f3bf 8f6f 	isb	sy
 8005354:	e009      	b.n	800536a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	3310      	adds	r3, #16
 800535a:	4618      	mov	r0, r3
 800535c:	f7ff fef2 	bl	8005144 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	3324      	adds	r3, #36	; 0x24
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff feed 	bl	8005144 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800536a:	f002 f873 	bl	8007454 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800536e:	2301      	movs	r3, #1
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	e000ed04 	.word	0xe000ed04

0800537c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08e      	sub	sp, #56	; 0x38
 8005380:	af02      	add	r7, sp, #8
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
 8005388:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10a      	bne.n	80053a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80053a2:	bf00      	nop
 80053a4:	e7fe      	b.n	80053a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10a      	bne.n	80053c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80053ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053be:	bf00      	nop
 80053c0:	e7fe      	b.n	80053c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <xQueueGenericCreateStatic+0x52>
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <xQueueGenericCreateStatic+0x56>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <xQueueGenericCreateStatic+0x58>
 80053d2:	2300      	movs	r3, #0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10a      	bne.n	80053ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80053d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	623b      	str	r3, [r7, #32]
}
 80053ea:	bf00      	nop
 80053ec:	e7fe      	b.n	80053ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d102      	bne.n	80053fa <xQueueGenericCreateStatic+0x7e>
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <xQueueGenericCreateStatic+0x82>
 80053fa:	2301      	movs	r3, #1
 80053fc:	e000      	b.n	8005400 <xQueueGenericCreateStatic+0x84>
 80053fe:	2300      	movs	r3, #0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10a      	bne.n	800541a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	61fb      	str	r3, [r7, #28]
}
 8005416:	bf00      	nop
 8005418:	e7fe      	b.n	8005418 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800541a:	2348      	movs	r3, #72	; 0x48
 800541c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2b48      	cmp	r3, #72	; 0x48
 8005422:	d00a      	beq.n	800543a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	61bb      	str	r3, [r7, #24]
}
 8005436:	bf00      	nop
 8005438:	e7fe      	b.n	8005438 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800543a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00d      	beq.n	8005462 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800544e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	4613      	mov	r3, r2
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	68b9      	ldr	r1, [r7, #8]
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 f83f 	bl	80054e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005464:	4618      	mov	r0, r3
 8005466:	3730      	adds	r7, #48	; 0x30
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800546c:	b580      	push	{r7, lr}
 800546e:	b08a      	sub	sp, #40	; 0x28
 8005470:	af02      	add	r7, sp, #8
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	4613      	mov	r3, r2
 8005478:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10a      	bne.n	8005496 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005484:	f383 8811 	msr	BASEPRI, r3
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	613b      	str	r3, [r7, #16]
}
 8005492:	bf00      	nop
 8005494:	e7fe      	b.n	8005494 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	fb02 f303 	mul.w	r3, r2, r3
 800549e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	3348      	adds	r3, #72	; 0x48
 80054a4:	4618      	mov	r0, r3
 80054a6:	f002 f8c7 	bl	8007638 <pvPortMalloc>
 80054aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d011      	beq.n	80054d6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	3348      	adds	r3, #72	; 0x48
 80054ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054c4:	79fa      	ldrb	r2, [r7, #7]
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	4613      	mov	r3, r2
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 f805 	bl	80054e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80054d6:	69bb      	ldr	r3, [r7, #24]
	}
 80054d8:	4618      	mov	r0, r3
 80054da:	3720      	adds	r7, #32
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d103      	bne.n	80054fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	e002      	b.n	8005502 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800550e:	2101      	movs	r1, #1
 8005510:	69b8      	ldr	r0, [r7, #24]
 8005512:	f7ff fecb 	bl	80052ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005516:	bf00      	nop
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800551e:	b580      	push	{r7, lr}
 8005520:	b082      	sub	sp, #8
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00e      	beq.n	800554a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800553e:	2300      	movs	r3, #0
 8005540:	2200      	movs	r2, #0
 8005542:	2100      	movs	r1, #0
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f837 	bl	80055b8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800554a:	bf00      	nop
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005552:	b580      	push	{r7, lr}
 8005554:	b086      	sub	sp, #24
 8005556:	af00      	add	r7, sp, #0
 8005558:	4603      	mov	r3, r0
 800555a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800555c:	2301      	movs	r3, #1
 800555e:	617b      	str	r3, [r7, #20]
 8005560:	2300      	movs	r3, #0
 8005562:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005564:	79fb      	ldrb	r3, [r7, #7]
 8005566:	461a      	mov	r2, r3
 8005568:	6939      	ldr	r1, [r7, #16]
 800556a:	6978      	ldr	r0, [r7, #20]
 800556c:	f7ff ff7e 	bl	800546c <xQueueGenericCreate>
 8005570:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f7ff ffd3 	bl	800551e <prvInitialiseMutex>

		return xNewQueue;
 8005578:	68fb      	ldr	r3, [r7, #12]
	}
 800557a:	4618      	mov	r0, r3
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005582:	b580      	push	{r7, lr}
 8005584:	b088      	sub	sp, #32
 8005586:	af02      	add	r7, sp, #8
 8005588:	4603      	mov	r3, r0
 800558a:	6039      	str	r1, [r7, #0]
 800558c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800558e:	2301      	movs	r3, #1
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	2300      	movs	r3, #0
 8005594:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2200      	movs	r2, #0
 800559e:	6939      	ldr	r1, [r7, #16]
 80055a0:	6978      	ldr	r0, [r7, #20]
 80055a2:	f7ff feeb 	bl	800537c <xQueueGenericCreateStatic>
 80055a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f7ff ffb8 	bl	800551e <prvInitialiseMutex>

		return xNewQueue;
 80055ae:	68fb      	ldr	r3, [r7, #12]
	}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3718      	adds	r7, #24
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08e      	sub	sp, #56	; 0x38
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
 80055c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80055c6:	2300      	movs	r3, #0
 80055c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80055ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10a      	bne.n	80055ea <xQueueGenericSend+0x32>
	__asm volatile
 80055d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d8:	f383 8811 	msr	BASEPRI, r3
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055e6:	bf00      	nop
 80055e8:	e7fe      	b.n	80055e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d103      	bne.n	80055f8 <xQueueGenericSend+0x40>
 80055f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <xQueueGenericSend+0x44>
 80055f8:	2301      	movs	r3, #1
 80055fa:	e000      	b.n	80055fe <xQueueGenericSend+0x46>
 80055fc:	2300      	movs	r3, #0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10a      	bne.n	8005618 <xQueueGenericSend+0x60>
	__asm volatile
 8005602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005606:	f383 8811 	msr	BASEPRI, r3
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005614:	bf00      	nop
 8005616:	e7fe      	b.n	8005616 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2b02      	cmp	r3, #2
 800561c:	d103      	bne.n	8005626 <xQueueGenericSend+0x6e>
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005622:	2b01      	cmp	r3, #1
 8005624:	d101      	bne.n	800562a <xQueueGenericSend+0x72>
 8005626:	2301      	movs	r3, #1
 8005628:	e000      	b.n	800562c <xQueueGenericSend+0x74>
 800562a:	2300      	movs	r3, #0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10a      	bne.n	8005646 <xQueueGenericSend+0x8e>
	__asm volatile
 8005630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005634:	f383 8811 	msr	BASEPRI, r3
 8005638:	f3bf 8f6f 	isb	sy
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	623b      	str	r3, [r7, #32]
}
 8005642:	bf00      	nop
 8005644:	e7fe      	b.n	8005644 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005646:	f001 fb83 	bl	8006d50 <xTaskGetSchedulerState>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d102      	bne.n	8005656 <xQueueGenericSend+0x9e>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <xQueueGenericSend+0xa2>
 8005656:	2301      	movs	r3, #1
 8005658:	e000      	b.n	800565c <xQueueGenericSend+0xa4>
 800565a:	2300      	movs	r3, #0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10a      	bne.n	8005676 <xQueueGenericSend+0xbe>
	__asm volatile
 8005660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	61fb      	str	r3, [r7, #28]
}
 8005672:	bf00      	nop
 8005674:	e7fe      	b.n	8005674 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005676:	f001 febd 	bl	80073f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800567a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005682:	429a      	cmp	r2, r3
 8005684:	d302      	bcc.n	800568c <xQueueGenericSend+0xd4>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b02      	cmp	r3, #2
 800568a:	d129      	bne.n	80056e0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	68b9      	ldr	r1, [r7, #8]
 8005690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005692:	f000 fc3b 	bl	8005f0c <prvCopyDataToQueue>
 8005696:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	2b00      	cmp	r3, #0
 800569e:	d010      	beq.n	80056c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a2:	3324      	adds	r3, #36	; 0x24
 80056a4:	4618      	mov	r0, r3
 80056a6:	f001 f993 	bl	80069d0 <xTaskRemoveFromEventList>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d013      	beq.n	80056d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80056b0:	4b3f      	ldr	r3, [pc, #252]	; (80057b0 <xQueueGenericSend+0x1f8>)
 80056b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	e00a      	b.n	80056d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80056c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d007      	beq.n	80056d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80056c8:	4b39      	ldr	r3, [pc, #228]	; (80057b0 <xQueueGenericSend+0x1f8>)
 80056ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80056d8:	f001 febc 	bl	8007454 <vPortExitCritical>
				return pdPASS;
 80056dc:	2301      	movs	r3, #1
 80056de:	e063      	b.n	80057a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d103      	bne.n	80056ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056e6:	f001 feb5 	bl	8007454 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	e05c      	b.n	80057a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d106      	bne.n	8005702 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056f4:	f107 0314 	add.w	r3, r7, #20
 80056f8:	4618      	mov	r0, r3
 80056fa:	f001 f9cb 	bl	8006a94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056fe:	2301      	movs	r3, #1
 8005700:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005702:	f001 fea7 	bl	8007454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005706:	f000 ff59 	bl	80065bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800570a:	f001 fe73 	bl	80073f4 <vPortEnterCritical>
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005714:	b25b      	sxtb	r3, r3
 8005716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571a:	d103      	bne.n	8005724 <xQueueGenericSend+0x16c>
 800571c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571e:	2200      	movs	r2, #0
 8005720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005726:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800572a:	b25b      	sxtb	r3, r3
 800572c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005730:	d103      	bne.n	800573a <xQueueGenericSend+0x182>
 8005732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800573a:	f001 fe8b 	bl	8007454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800573e:	1d3a      	adds	r2, r7, #4
 8005740:	f107 0314 	add.w	r3, r7, #20
 8005744:	4611      	mov	r1, r2
 8005746:	4618      	mov	r0, r3
 8005748:	f001 f9ba 	bl	8006ac0 <xTaskCheckForTimeOut>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d124      	bne.n	800579c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005752:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005754:	f000 fcd2 	bl	80060fc <prvIsQueueFull>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d018      	beq.n	8005790 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005760:	3310      	adds	r3, #16
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	4611      	mov	r1, r2
 8005766:	4618      	mov	r0, r3
 8005768:	f001 f90e 	bl	8006988 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800576c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800576e:	f000 fc5d 	bl	800602c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005772:	f000 ff31 	bl	80065d8 <xTaskResumeAll>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	f47f af7c 	bne.w	8005676 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800577e:	4b0c      	ldr	r3, [pc, #48]	; (80057b0 <xQueueGenericSend+0x1f8>)
 8005780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	e772      	b.n	8005676 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005792:	f000 fc4b 	bl	800602c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005796:	f000 ff1f 	bl	80065d8 <xTaskResumeAll>
 800579a:	e76c      	b.n	8005676 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800579c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800579e:	f000 fc45 	bl	800602c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057a2:	f000 ff19 	bl	80065d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80057a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3738      	adds	r7, #56	; 0x38
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	e000ed04 	.word	0xe000ed04

080057b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b090      	sub	sp, #64	; 0x40
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80057c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10a      	bne.n	80057e2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80057cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80057de:	bf00      	nop
 80057e0:	e7fe      	b.n	80057e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d103      	bne.n	80057f0 <xQueueGenericSendFromISR+0x3c>
 80057e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <xQueueGenericSendFromISR+0x40>
 80057f0:	2301      	movs	r3, #1
 80057f2:	e000      	b.n	80057f6 <xQueueGenericSendFromISR+0x42>
 80057f4:	2300      	movs	r3, #0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10a      	bne.n	8005810 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80057fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800580c:	bf00      	nop
 800580e:	e7fe      	b.n	800580e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	2b02      	cmp	r3, #2
 8005814:	d103      	bne.n	800581e <xQueueGenericSendFromISR+0x6a>
 8005816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800581a:	2b01      	cmp	r3, #1
 800581c:	d101      	bne.n	8005822 <xQueueGenericSendFromISR+0x6e>
 800581e:	2301      	movs	r3, #1
 8005820:	e000      	b.n	8005824 <xQueueGenericSendFromISR+0x70>
 8005822:	2300      	movs	r3, #0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10a      	bne.n	800583e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	623b      	str	r3, [r7, #32]
}
 800583a:	bf00      	nop
 800583c:	e7fe      	b.n	800583c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800583e:	f001 febb 	bl	80075b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005842:	f3ef 8211 	mrs	r2, BASEPRI
 8005846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	61fa      	str	r2, [r7, #28]
 8005858:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800585a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800585c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800585e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005866:	429a      	cmp	r2, r3
 8005868:	d302      	bcc.n	8005870 <xQueueGenericSendFromISR+0xbc>
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b02      	cmp	r3, #2
 800586e:	d12f      	bne.n	80058d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005872:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800587a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	68b9      	ldr	r1, [r7, #8]
 8005884:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005886:	f000 fb41 	bl	8005f0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800588a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800588e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005892:	d112      	bne.n	80058ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	2b00      	cmp	r3, #0
 800589a:	d016      	beq.n	80058ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800589c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589e:	3324      	adds	r3, #36	; 0x24
 80058a0:	4618      	mov	r0, r3
 80058a2:	f001 f895 	bl	80069d0 <xTaskRemoveFromEventList>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00e      	beq.n	80058ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00b      	beq.n	80058ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	e007      	b.n	80058ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80058ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80058be:	3301      	adds	r3, #1
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	b25a      	sxtb	r2, r3
 80058c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80058ca:	2301      	movs	r3, #1
 80058cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80058ce:	e001      	b.n	80058d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80058d0:	2300      	movs	r3, #0
 80058d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80058de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3740      	adds	r7, #64	; 0x40
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b08e      	sub	sp, #56	; 0x38
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80058f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10a      	bne.n	8005914 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80058fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	623b      	str	r3, [r7, #32]
}
 8005910:	bf00      	nop
 8005912:	e7fe      	b.n	8005912 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00a      	beq.n	8005932 <xQueueGiveFromISR+0x48>
	__asm volatile
 800591c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	61fb      	str	r3, [r7, #28]
}
 800592e:	bf00      	nop
 8005930:	e7fe      	b.n	8005930 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d103      	bne.n	8005942 <xQueueGiveFromISR+0x58>
 800593a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <xQueueGiveFromISR+0x5c>
 8005942:	2301      	movs	r3, #1
 8005944:	e000      	b.n	8005948 <xQueueGiveFromISR+0x5e>
 8005946:	2300      	movs	r3, #0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10a      	bne.n	8005962 <xQueueGiveFromISR+0x78>
	__asm volatile
 800594c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005950:	f383 8811 	msr	BASEPRI, r3
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	61bb      	str	r3, [r7, #24]
}
 800595e:	bf00      	nop
 8005960:	e7fe      	b.n	8005960 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005962:	f001 fe29 	bl	80075b8 <vPortValidateInterruptPriority>
	__asm volatile
 8005966:	f3ef 8211 	mrs	r2, BASEPRI
 800596a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	617a      	str	r2, [r7, #20]
 800597c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800597e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005980:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005986:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800598e:	429a      	cmp	r2, r3
 8005990:	d22b      	bcs.n	80059ea <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005994:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80059a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80059a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ac:	d112      	bne.n	80059d4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d016      	beq.n	80059e4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b8:	3324      	adds	r3, #36	; 0x24
 80059ba:	4618      	mov	r0, r3
 80059bc:	f001 f808 	bl	80069d0 <xTaskRemoveFromEventList>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00e      	beq.n	80059e4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00b      	beq.n	80059e4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2201      	movs	r2, #1
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	e007      	b.n	80059e4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059d8:	3301      	adds	r3, #1
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	b25a      	sxtb	r2, r3
 80059de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80059e4:	2301      	movs	r3, #1
 80059e6:	637b      	str	r3, [r7, #52]	; 0x34
 80059e8:	e001      	b.n	80059ee <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	637b      	str	r3, [r7, #52]	; 0x34
 80059ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f383 8811 	msr	BASEPRI, r3
}
 80059f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3738      	adds	r7, #56	; 0x38
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08c      	sub	sp, #48	; 0x30
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a10:	2300      	movs	r3, #0
 8005a12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10a      	bne.n	8005a34 <xQueueReceive+0x30>
	__asm volatile
 8005a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	623b      	str	r3, [r7, #32]
}
 8005a30:	bf00      	nop
 8005a32:	e7fe      	b.n	8005a32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d103      	bne.n	8005a42 <xQueueReceive+0x3e>
 8005a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <xQueueReceive+0x42>
 8005a42:	2301      	movs	r3, #1
 8005a44:	e000      	b.n	8005a48 <xQueueReceive+0x44>
 8005a46:	2300      	movs	r3, #0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10a      	bne.n	8005a62 <xQueueReceive+0x5e>
	__asm volatile
 8005a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	61fb      	str	r3, [r7, #28]
}
 8005a5e:	bf00      	nop
 8005a60:	e7fe      	b.n	8005a60 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a62:	f001 f975 	bl	8006d50 <xTaskGetSchedulerState>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d102      	bne.n	8005a72 <xQueueReceive+0x6e>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <xQueueReceive+0x72>
 8005a72:	2301      	movs	r3, #1
 8005a74:	e000      	b.n	8005a78 <xQueueReceive+0x74>
 8005a76:	2300      	movs	r3, #0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10a      	bne.n	8005a92 <xQueueReceive+0x8e>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	61bb      	str	r3, [r7, #24]
}
 8005a8e:	bf00      	nop
 8005a90:	e7fe      	b.n	8005a90 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a92:	f001 fcaf 	bl	80073f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d01f      	beq.n	8005ae2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005aa2:	68b9      	ldr	r1, [r7, #8]
 8005aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aa6:	f000 fa9b 	bl	8005fe0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	1e5a      	subs	r2, r3, #1
 8005aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00f      	beq.n	8005ada <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abc:	3310      	adds	r3, #16
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 ff86 	bl	80069d0 <xTaskRemoveFromEventList>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d007      	beq.n	8005ada <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005aca:	4b3d      	ldr	r3, [pc, #244]	; (8005bc0 <xQueueReceive+0x1bc>)
 8005acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	f3bf 8f4f 	dsb	sy
 8005ad6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ada:	f001 fcbb 	bl	8007454 <vPortExitCritical>
				return pdPASS;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e069      	b.n	8005bb6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d103      	bne.n	8005af0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ae8:	f001 fcb4 	bl	8007454 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005aec:	2300      	movs	r3, #0
 8005aee:	e062      	b.n	8005bb6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d106      	bne.n	8005b04 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005af6:	f107 0310 	add.w	r3, r7, #16
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 ffca 	bl	8006a94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b00:	2301      	movs	r3, #1
 8005b02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b04:	f001 fca6 	bl	8007454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b08:	f000 fd58 	bl	80065bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b0c:	f001 fc72 	bl	80073f4 <vPortEnterCritical>
 8005b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b16:	b25b      	sxtb	r3, r3
 8005b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1c:	d103      	bne.n	8005b26 <xQueueReceive+0x122>
 8005b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b2c:	b25b      	sxtb	r3, r3
 8005b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b32:	d103      	bne.n	8005b3c <xQueueReceive+0x138>
 8005b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b3c:	f001 fc8a 	bl	8007454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b40:	1d3a      	adds	r2, r7, #4
 8005b42:	f107 0310 	add.w	r3, r7, #16
 8005b46:	4611      	mov	r1, r2
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 ffb9 	bl	8006ac0 <xTaskCheckForTimeOut>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d123      	bne.n	8005b9c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b56:	f000 fabb 	bl	80060d0 <prvIsQueueEmpty>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d017      	beq.n	8005b90 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b62:	3324      	adds	r3, #36	; 0x24
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	4611      	mov	r1, r2
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 ff0d 	bl	8006988 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b70:	f000 fa5c 	bl	800602c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b74:	f000 fd30 	bl	80065d8 <xTaskResumeAll>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d189      	bne.n	8005a92 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b7e:	4b10      	ldr	r3, [pc, #64]	; (8005bc0 <xQueueReceive+0x1bc>)
 8005b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	f3bf 8f6f 	isb	sy
 8005b8e:	e780      	b.n	8005a92 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b92:	f000 fa4b 	bl	800602c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b96:	f000 fd1f 	bl	80065d8 <xTaskResumeAll>
 8005b9a:	e77a      	b.n	8005a92 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b9e:	f000 fa45 	bl	800602c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ba2:	f000 fd19 	bl	80065d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ba6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ba8:	f000 fa92 	bl	80060d0 <prvIsQueueEmpty>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f43f af6f 	beq.w	8005a92 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005bb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3730      	adds	r7, #48	; 0x30
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	e000ed04 	.word	0xe000ed04

08005bc4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b08e      	sub	sp, #56	; 0x38
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10a      	bne.n	8005bf6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	623b      	str	r3, [r7, #32]
}
 8005bf2:	bf00      	nop
 8005bf4:	e7fe      	b.n	8005bf4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00a      	beq.n	8005c14 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	61fb      	str	r3, [r7, #28]
}
 8005c10:	bf00      	nop
 8005c12:	e7fe      	b.n	8005c12 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c14:	f001 f89c 	bl	8006d50 <xTaskGetSchedulerState>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d102      	bne.n	8005c24 <xQueueSemaphoreTake+0x60>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <xQueueSemaphoreTake+0x64>
 8005c24:	2301      	movs	r3, #1
 8005c26:	e000      	b.n	8005c2a <xQueueSemaphoreTake+0x66>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10a      	bne.n	8005c44 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	61bb      	str	r3, [r7, #24]
}
 8005c40:	bf00      	nop
 8005c42:	e7fe      	b.n	8005c42 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c44:	f001 fbd6 	bl	80073f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d024      	beq.n	8005c9e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c56:	1e5a      	subs	r2, r3, #1
 8005c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d104      	bne.n	8005c6e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005c64:	f001 fa1c 	bl	80070a0 <pvTaskIncrementMutexHeldCount>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00f      	beq.n	8005c96 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c78:	3310      	adds	r3, #16
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 fea8 	bl	80069d0 <xTaskRemoveFromEventList>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d007      	beq.n	8005c96 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c86:	4b54      	ldr	r3, [pc, #336]	; (8005dd8 <xQueueSemaphoreTake+0x214>)
 8005c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c96:	f001 fbdd 	bl	8007454 <vPortExitCritical>
				return pdPASS;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e097      	b.n	8005dce <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d111      	bne.n	8005cc8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00a      	beq.n	8005cc0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cae:	f383 8811 	msr	BASEPRI, r3
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	617b      	str	r3, [r7, #20]
}
 8005cbc:	bf00      	nop
 8005cbe:	e7fe      	b.n	8005cbe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005cc0:	f001 fbc8 	bl	8007454 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	e082      	b.n	8005dce <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d106      	bne.n	8005cdc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cce:	f107 030c 	add.w	r3, r7, #12
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 fede 	bl	8006a94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cdc:	f001 fbba 	bl	8007454 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ce0:	f000 fc6c 	bl	80065bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ce4:	f001 fb86 	bl	80073f4 <vPortEnterCritical>
 8005ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cee:	b25b      	sxtb	r3, r3
 8005cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf4:	d103      	bne.n	8005cfe <xQueueSemaphoreTake+0x13a>
 8005cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d04:	b25b      	sxtb	r3, r3
 8005d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0a:	d103      	bne.n	8005d14 <xQueueSemaphoreTake+0x150>
 8005d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d14:	f001 fb9e 	bl	8007454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d18:	463a      	mov	r2, r7
 8005d1a:	f107 030c 	add.w	r3, r7, #12
 8005d1e:	4611      	mov	r1, r2
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 fecd 	bl	8006ac0 <xTaskCheckForTimeOut>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d132      	bne.n	8005d92 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d2e:	f000 f9cf 	bl	80060d0 <prvIsQueueEmpty>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d026      	beq.n	8005d86 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d109      	bne.n	8005d54 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005d40:	f001 fb58 	bl	80073f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f001 f81f 	bl	8006d8c <xTaskPriorityInherit>
 8005d4e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005d50:	f001 fb80 	bl	8007454 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d56:	3324      	adds	r3, #36	; 0x24
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 fe13 	bl	8006988 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d64:	f000 f962 	bl	800602c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d68:	f000 fc36 	bl	80065d8 <xTaskResumeAll>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f47f af68 	bne.w	8005c44 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005d74:	4b18      	ldr	r3, [pc, #96]	; (8005dd8 <xQueueSemaphoreTake+0x214>)
 8005d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	e75e      	b.n	8005c44 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005d86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d88:	f000 f950 	bl	800602c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d8c:	f000 fc24 	bl	80065d8 <xTaskResumeAll>
 8005d90:	e758      	b.n	8005c44 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005d92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d94:	f000 f94a 	bl	800602c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d98:	f000 fc1e 	bl	80065d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d9e:	f000 f997 	bl	80060d0 <prvIsQueueEmpty>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f43f af4d 	beq.w	8005c44 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00d      	beq.n	8005dcc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005db0:	f001 fb20 	bl	80073f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005db4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005db6:	f000 f891 	bl	8005edc <prvGetDisinheritPriorityAfterTimeout>
 8005dba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f001 f8de 	bl	8006f84 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005dc8:	f001 fb44 	bl	8007454 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005dcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3738      	adds	r7, #56	; 0x38
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	e000ed04 	.word	0xe000ed04

08005ddc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b08e      	sub	sp, #56	; 0x38
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10a      	bne.n	8005e08 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df6:	f383 8811 	msr	BASEPRI, r3
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	623b      	str	r3, [r7, #32]
}
 8005e04:	bf00      	nop
 8005e06:	e7fe      	b.n	8005e06 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d103      	bne.n	8005e16 <xQueueReceiveFromISR+0x3a>
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <xQueueReceiveFromISR+0x3e>
 8005e16:	2301      	movs	r3, #1
 8005e18:	e000      	b.n	8005e1c <xQueueReceiveFromISR+0x40>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10a      	bne.n	8005e36 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	61fb      	str	r3, [r7, #28]
}
 8005e32:	bf00      	nop
 8005e34:	e7fe      	b.n	8005e34 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e36:	f001 fbbf 	bl	80075b8 <vPortValidateInterruptPriority>
	__asm volatile
 8005e3a:	f3ef 8211 	mrs	r2, BASEPRI
 8005e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	61ba      	str	r2, [r7, #24]
 8005e50:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005e52:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d02f      	beq.n	8005ec2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e6c:	68b9      	ldr	r1, [r7, #8]
 8005e6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e70:	f000 f8b6 	bl	8005fe0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e76:	1e5a      	subs	r2, r3, #1
 8005e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005e7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e84:	d112      	bne.n	8005eac <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d016      	beq.n	8005ebc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e90:	3310      	adds	r3, #16
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 fd9c 	bl	80069d0 <xTaskRemoveFromEventList>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00e      	beq.n	8005ebc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00b      	beq.n	8005ebc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	601a      	str	r2, [r3, #0]
 8005eaa:	e007      	b.n	8005ebc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	b25a      	sxtb	r2, r3
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8005ec0:	e001      	b.n	8005ec6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f383 8811 	msr	BASEPRI, r3
}
 8005ed0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3738      	adds	r7, #56	; 0x38
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d006      	beq.n	8005efa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f1c3 0307 	rsb	r3, r3, #7
 8005ef6:	60fb      	str	r3, [r7, #12]
 8005ef8:	e001      	b.n	8005efe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005efe:	68fb      	ldr	r3, [r7, #12]
	}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10d      	bne.n	8005f46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d14d      	bne.n	8005fce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 ff9e 	bl	8006e78 <xTaskPriorityDisinherit>
 8005f3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	609a      	str	r2, [r3, #8]
 8005f44:	e043      	b.n	8005fce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d119      	bne.n	8005f80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6858      	ldr	r0, [r3, #4]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f54:	461a      	mov	r2, r3
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	f00e f8f1 	bl	801413e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f64:	441a      	add	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d32b      	bcc.n	8005fce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	605a      	str	r2, [r3, #4]
 8005f7e:	e026      	b.n	8005fce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	68d8      	ldr	r0, [r3, #12]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f88:	461a      	mov	r2, r3
 8005f8a:	68b9      	ldr	r1, [r7, #8]
 8005f8c:	f00e f8d7 	bl	801413e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	68da      	ldr	r2, [r3, #12]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f98:	425b      	negs	r3, r3
 8005f9a:	441a      	add	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d207      	bcs.n	8005fbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb4:	425b      	negs	r3, r3
 8005fb6:	441a      	add	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d105      	bne.n	8005fce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005fd6:	697b      	ldr	r3, [r7, #20]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3718      	adds	r7, #24
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d018      	beq.n	8006024 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68da      	ldr	r2, [r3, #12]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffa:	441a      	add	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68da      	ldr	r2, [r3, #12]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	429a      	cmp	r2, r3
 800600a:	d303      	bcc.n	8006014 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68d9      	ldr	r1, [r3, #12]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601c:	461a      	mov	r2, r3
 800601e:	6838      	ldr	r0, [r7, #0]
 8006020:	f00e f88d 	bl	801413e <memcpy>
	}
}
 8006024:	bf00      	nop
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006034:	f001 f9de 	bl	80073f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800603e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006040:	e011      	b.n	8006066 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	2b00      	cmp	r3, #0
 8006048:	d012      	beq.n	8006070 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	3324      	adds	r3, #36	; 0x24
 800604e:	4618      	mov	r0, r3
 8006050:	f000 fcbe 	bl	80069d0 <xTaskRemoveFromEventList>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800605a:	f000 fd93 	bl	8006b84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800605e:	7bfb      	ldrb	r3, [r7, #15]
 8006060:	3b01      	subs	r3, #1
 8006062:	b2db      	uxtb	r3, r3
 8006064:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800606a:	2b00      	cmp	r3, #0
 800606c:	dce9      	bgt.n	8006042 <prvUnlockQueue+0x16>
 800606e:	e000      	b.n	8006072 <prvUnlockQueue+0x46>
					break;
 8006070:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	22ff      	movs	r2, #255	; 0xff
 8006076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800607a:	f001 f9eb 	bl	8007454 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800607e:	f001 f9b9 	bl	80073f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006088:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800608a:	e011      	b.n	80060b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d012      	beq.n	80060ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	3310      	adds	r3, #16
 8006098:	4618      	mov	r0, r3
 800609a:	f000 fc99 	bl	80069d0 <xTaskRemoveFromEventList>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80060a4:	f000 fd6e 	bl	8006b84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80060a8:	7bbb      	ldrb	r3, [r7, #14]
 80060aa:	3b01      	subs	r3, #1
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	dce9      	bgt.n	800608c <prvUnlockQueue+0x60>
 80060b8:	e000      	b.n	80060bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80060ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	22ff      	movs	r2, #255	; 0xff
 80060c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80060c4:	f001 f9c6 	bl	8007454 <vPortExitCritical>
}
 80060c8:	bf00      	nop
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060d8:	f001 f98c 	bl	80073f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d102      	bne.n	80060ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80060e4:	2301      	movs	r3, #1
 80060e6:	60fb      	str	r3, [r7, #12]
 80060e8:	e001      	b.n	80060ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80060ea:	2300      	movs	r3, #0
 80060ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060ee:	f001 f9b1 	bl	8007454 <vPortExitCritical>

	return xReturn;
 80060f2:	68fb      	ldr	r3, [r7, #12]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006104:	f001 f976 	bl	80073f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006110:	429a      	cmp	r2, r3
 8006112:	d102      	bne.n	800611a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006114:	2301      	movs	r3, #1
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	e001      	b.n	800611e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800611a:	2300      	movs	r3, #0
 800611c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800611e:	f001 f999 	bl	8007454 <vPortExitCritical>

	return xReturn;
 8006122:	68fb      	ldr	r3, [r7, #12]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800612c:	b580      	push	{r7, lr}
 800612e:	b08e      	sub	sp, #56	; 0x38
 8006130:	af04      	add	r7, sp, #16
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
 8006138:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800613a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10a      	bne.n	8006156 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	623b      	str	r3, [r7, #32]
}
 8006152:	bf00      	nop
 8006154:	e7fe      	b.n	8006154 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10a      	bne.n	8006172 <xTaskCreateStatic+0x46>
	__asm volatile
 800615c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006160:	f383 8811 	msr	BASEPRI, r3
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	61fb      	str	r3, [r7, #28]
}
 800616e:	bf00      	nop
 8006170:	e7fe      	b.n	8006170 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006172:	23b4      	movs	r3, #180	; 0xb4
 8006174:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	2bb4      	cmp	r3, #180	; 0xb4
 800617a:	d00a      	beq.n	8006192 <xTaskCreateStatic+0x66>
	__asm volatile
 800617c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	61bb      	str	r3, [r7, #24]
}
 800618e:	bf00      	nop
 8006190:	e7fe      	b.n	8006190 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006192:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006196:	2b00      	cmp	r3, #0
 8006198:	d01e      	beq.n	80061d8 <xTaskCreateStatic+0xac>
 800619a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800619c:	2b00      	cmp	r3, #0
 800619e:	d01b      	beq.n	80061d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	2202      	movs	r2, #2
 80061ae:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061b2:	2300      	movs	r3, #0
 80061b4:	9303      	str	r3, [sp, #12]
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	9302      	str	r3, [sp, #8]
 80061ba:	f107 0314 	add.w	r3, r7, #20
 80061be:	9301      	str	r3, [sp, #4]
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	68b9      	ldr	r1, [r7, #8]
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f000 f850 	bl	8006270 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061d2:	f000 f8eb 	bl	80063ac <prvAddNewTaskToReadyList>
 80061d6:	e001      	b.n	80061dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80061d8:	2300      	movs	r3, #0
 80061da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061dc:	697b      	ldr	r3, [r7, #20]
	}
 80061de:	4618      	mov	r0, r3
 80061e0:	3728      	adds	r7, #40	; 0x28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b08c      	sub	sp, #48	; 0x30
 80061ea:	af04      	add	r7, sp, #16
 80061ec:	60f8      	str	r0, [r7, #12]
 80061ee:	60b9      	str	r1, [r7, #8]
 80061f0:	603b      	str	r3, [r7, #0]
 80061f2:	4613      	mov	r3, r2
 80061f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80061f6:	88fb      	ldrh	r3, [r7, #6]
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4618      	mov	r0, r3
 80061fc:	f001 fa1c 	bl	8007638 <pvPortMalloc>
 8006200:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00e      	beq.n	8006226 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006208:	20b4      	movs	r0, #180	; 0xb4
 800620a:	f001 fa15 	bl	8007638 <pvPortMalloc>
 800620e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	631a      	str	r2, [r3, #48]	; 0x30
 800621c:	e005      	b.n	800622a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800621e:	6978      	ldr	r0, [r7, #20]
 8006220:	f001 fad6 	bl	80077d0 <vPortFree>
 8006224:	e001      	b.n	800622a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006226:	2300      	movs	r3, #0
 8006228:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d017      	beq.n	8006260 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006238:	88fa      	ldrh	r2, [r7, #6]
 800623a:	2300      	movs	r3, #0
 800623c:	9303      	str	r3, [sp, #12]
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	9302      	str	r3, [sp, #8]
 8006242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006244:	9301      	str	r3, [sp, #4]
 8006246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	68b9      	ldr	r1, [r7, #8]
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f000 f80e 	bl	8006270 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006254:	69f8      	ldr	r0, [r7, #28]
 8006256:	f000 f8a9 	bl	80063ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800625a:	2301      	movs	r3, #1
 800625c:	61bb      	str	r3, [r7, #24]
 800625e:	e002      	b.n	8006266 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006260:	f04f 33ff 	mov.w	r3, #4294967295
 8006264:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006266:	69bb      	ldr	r3, [r7, #24]
	}
 8006268:	4618      	mov	r0, r3
 800626a:	3720      	adds	r7, #32
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
 800627c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006288:	3b01      	subs	r3, #1
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	f023 0307 	bic.w	r3, r3, #7
 8006296:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	f003 0307 	and.w	r3, r3, #7
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00a      	beq.n	80062b8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	617b      	str	r3, [r7, #20]
}
 80062b4:	bf00      	nop
 80062b6:	e7fe      	b.n	80062b6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d01f      	beq.n	80062fe <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062be:	2300      	movs	r3, #0
 80062c0:	61fb      	str	r3, [r7, #28]
 80062c2:	e012      	b.n	80062ea <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	4413      	add	r3, r2
 80062ca:	7819      	ldrb	r1, [r3, #0]
 80062cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	4413      	add	r3, r2
 80062d2:	3334      	adds	r3, #52	; 0x34
 80062d4:	460a      	mov	r2, r1
 80062d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	4413      	add	r3, r2
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d006      	beq.n	80062f2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	3301      	adds	r3, #1
 80062e8:	61fb      	str	r3, [r7, #28]
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	2b0f      	cmp	r3, #15
 80062ee:	d9e9      	bls.n	80062c4 <prvInitialiseNewTask+0x54>
 80062f0:	e000      	b.n	80062f4 <prvInitialiseNewTask+0x84>
			{
				break;
 80062f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80062f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062fc:	e003      	b.n	8006306 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80062fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006308:	2b06      	cmp	r3, #6
 800630a:	d901      	bls.n	8006310 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800630c:	2306      	movs	r3, #6
 800630e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006314:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800631a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631e:	2200      	movs	r2, #0
 8006320:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006324:	3304      	adds	r3, #4
 8006326:	4618      	mov	r0, r3
 8006328:	f7fe ff2c 	bl	8005184 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632e:	3318      	adds	r3, #24
 8006330:	4618      	mov	r0, r3
 8006332:	f7fe ff27 	bl	8005184 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800633a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	f1c3 0207 	rsb	r2, r3, #7
 8006342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006344:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800634a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	2200      	movs	r2, #0
 8006350:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006356:	2200      	movs	r2, #0
 8006358:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800635c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635e:	334c      	adds	r3, #76	; 0x4c
 8006360:	2260      	movs	r2, #96	; 0x60
 8006362:	2100      	movs	r1, #0
 8006364:	4618      	mov	r0, r3
 8006366:	f00d fef8 	bl	801415a <memset>
 800636a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636c:	4a0c      	ldr	r2, [pc, #48]	; (80063a0 <prvInitialiseNewTask+0x130>)
 800636e:	651a      	str	r2, [r3, #80]	; 0x50
 8006370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006372:	4a0c      	ldr	r2, [pc, #48]	; (80063a4 <prvInitialiseNewTask+0x134>)
 8006374:	655a      	str	r2, [r3, #84]	; 0x54
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	4a0b      	ldr	r2, [pc, #44]	; (80063a8 <prvInitialiseNewTask+0x138>)
 800637a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	68f9      	ldr	r1, [r7, #12]
 8006380:	69b8      	ldr	r0, [r7, #24]
 8006382:	f000 ff07 	bl	8007194 <pxPortInitialiseStack>
 8006386:	4602      	mov	r2, r0
 8006388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800638c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006396:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006398:	bf00      	nop
 800639a:	3720      	adds	r7, #32
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	0801817c 	.word	0x0801817c
 80063a4:	0801819c 	.word	0x0801819c
 80063a8:	0801815c 	.word	0x0801815c

080063ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063b4:	f001 f81e 	bl	80073f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063b8:	4b2a      	ldr	r3, [pc, #168]	; (8006464 <prvAddNewTaskToReadyList+0xb8>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3301      	adds	r3, #1
 80063be:	4a29      	ldr	r2, [pc, #164]	; (8006464 <prvAddNewTaskToReadyList+0xb8>)
 80063c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063c2:	4b29      	ldr	r3, [pc, #164]	; (8006468 <prvAddNewTaskToReadyList+0xbc>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d109      	bne.n	80063de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063ca:	4a27      	ldr	r2, [pc, #156]	; (8006468 <prvAddNewTaskToReadyList+0xbc>)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063d0:	4b24      	ldr	r3, [pc, #144]	; (8006464 <prvAddNewTaskToReadyList+0xb8>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d110      	bne.n	80063fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063d8:	f000 fbf8 	bl	8006bcc <prvInitialiseTaskLists>
 80063dc:	e00d      	b.n	80063fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063de:	4b23      	ldr	r3, [pc, #140]	; (800646c <prvAddNewTaskToReadyList+0xc0>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d109      	bne.n	80063fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80063e6:	4b20      	ldr	r3, [pc, #128]	; (8006468 <prvAddNewTaskToReadyList+0xbc>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d802      	bhi.n	80063fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063f4:	4a1c      	ldr	r2, [pc, #112]	; (8006468 <prvAddNewTaskToReadyList+0xbc>)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80063fa:	4b1d      	ldr	r3, [pc, #116]	; (8006470 <prvAddNewTaskToReadyList+0xc4>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	3301      	adds	r3, #1
 8006400:	4a1b      	ldr	r2, [pc, #108]	; (8006470 <prvAddNewTaskToReadyList+0xc4>)
 8006402:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006408:	2201      	movs	r2, #1
 800640a:	409a      	lsls	r2, r3
 800640c:	4b19      	ldr	r3, [pc, #100]	; (8006474 <prvAddNewTaskToReadyList+0xc8>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4313      	orrs	r3, r2
 8006412:	4a18      	ldr	r2, [pc, #96]	; (8006474 <prvAddNewTaskToReadyList+0xc8>)
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800641a:	4613      	mov	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4a15      	ldr	r2, [pc, #84]	; (8006478 <prvAddNewTaskToReadyList+0xcc>)
 8006424:	441a      	add	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	3304      	adds	r3, #4
 800642a:	4619      	mov	r1, r3
 800642c:	4610      	mov	r0, r2
 800642e:	f7fe feb6 	bl	800519e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006432:	f001 f80f 	bl	8007454 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006436:	4b0d      	ldr	r3, [pc, #52]	; (800646c <prvAddNewTaskToReadyList+0xc0>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00e      	beq.n	800645c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800643e:	4b0a      	ldr	r3, [pc, #40]	; (8006468 <prvAddNewTaskToReadyList+0xbc>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006448:	429a      	cmp	r2, r3
 800644a:	d207      	bcs.n	800645c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800644c:	4b0b      	ldr	r3, [pc, #44]	; (800647c <prvAddNewTaskToReadyList+0xd0>)
 800644e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800645c:	bf00      	nop
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	2000540c 	.word	0x2000540c
 8006468:	2000530c 	.word	0x2000530c
 800646c:	20005418 	.word	0x20005418
 8006470:	20005428 	.word	0x20005428
 8006474:	20005414 	.word	0x20005414
 8006478:	20005310 	.word	0x20005310
 800647c:	e000ed04 	.word	0xe000ed04

08006480 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006488:	2300      	movs	r3, #0
 800648a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d017      	beq.n	80064c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006492:	4b13      	ldr	r3, [pc, #76]	; (80064e0 <vTaskDelay+0x60>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00a      	beq.n	80064b0 <vTaskDelay+0x30>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	60bb      	str	r3, [r7, #8]
}
 80064ac:	bf00      	nop
 80064ae:	e7fe      	b.n	80064ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80064b0:	f000 f884 	bl	80065bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064b4:	2100      	movs	r1, #0
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fe06 	bl	80070c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064bc:	f000 f88c 	bl	80065d8 <xTaskResumeAll>
 80064c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d107      	bne.n	80064d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80064c8:	4b06      	ldr	r3, [pc, #24]	; (80064e4 <vTaskDelay+0x64>)
 80064ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064d8:	bf00      	nop
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	20005434 	.word	0x20005434
 80064e4:	e000ed04 	.word	0xe000ed04

080064e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08a      	sub	sp, #40	; 0x28
 80064ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80064ee:	2300      	movs	r3, #0
 80064f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80064f2:	2300      	movs	r3, #0
 80064f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80064f6:	463a      	mov	r2, r7
 80064f8:	1d39      	adds	r1, r7, #4
 80064fa:	f107 0308 	add.w	r3, r7, #8
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fa f838 	bl	8000574 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	9202      	str	r2, [sp, #8]
 800650c:	9301      	str	r3, [sp, #4]
 800650e:	2300      	movs	r3, #0
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	2300      	movs	r3, #0
 8006514:	460a      	mov	r2, r1
 8006516:	4921      	ldr	r1, [pc, #132]	; (800659c <vTaskStartScheduler+0xb4>)
 8006518:	4821      	ldr	r0, [pc, #132]	; (80065a0 <vTaskStartScheduler+0xb8>)
 800651a:	f7ff fe07 	bl	800612c <xTaskCreateStatic>
 800651e:	4603      	mov	r3, r0
 8006520:	4a20      	ldr	r2, [pc, #128]	; (80065a4 <vTaskStartScheduler+0xbc>)
 8006522:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006524:	4b1f      	ldr	r3, [pc, #124]	; (80065a4 <vTaskStartScheduler+0xbc>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800652c:	2301      	movs	r3, #1
 800652e:	617b      	str	r3, [r7, #20]
 8006530:	e001      	b.n	8006536 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006532:	2300      	movs	r3, #0
 8006534:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d11b      	bne.n	8006574 <vTaskStartScheduler+0x8c>
	__asm volatile
 800653c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	613b      	str	r3, [r7, #16]
}
 800654e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006550:	4b15      	ldr	r3, [pc, #84]	; (80065a8 <vTaskStartScheduler+0xc0>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	334c      	adds	r3, #76	; 0x4c
 8006556:	4a15      	ldr	r2, [pc, #84]	; (80065ac <vTaskStartScheduler+0xc4>)
 8006558:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800655a:	4b15      	ldr	r3, [pc, #84]	; (80065b0 <vTaskStartScheduler+0xc8>)
 800655c:	f04f 32ff 	mov.w	r2, #4294967295
 8006560:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006562:	4b14      	ldr	r3, [pc, #80]	; (80065b4 <vTaskStartScheduler+0xcc>)
 8006564:	2201      	movs	r2, #1
 8006566:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006568:	4b13      	ldr	r3, [pc, #76]	; (80065b8 <vTaskStartScheduler+0xd0>)
 800656a:	2200      	movs	r2, #0
 800656c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800656e:	f000 fe9f 	bl	80072b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006572:	e00e      	b.n	8006592 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657a:	d10a      	bne.n	8006592 <vTaskStartScheduler+0xaa>
	__asm volatile
 800657c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	60fb      	str	r3, [r7, #12]
}
 800658e:	bf00      	nop
 8006590:	e7fe      	b.n	8006590 <vTaskStartScheduler+0xa8>
}
 8006592:	bf00      	nop
 8006594:	3718      	adds	r7, #24
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	080151c8 	.word	0x080151c8
 80065a0:	08006b9d 	.word	0x08006b9d
 80065a4:	20005430 	.word	0x20005430
 80065a8:	2000530c 	.word	0x2000530c
 80065ac:	20000034 	.word	0x20000034
 80065b0:	2000542c 	.word	0x2000542c
 80065b4:	20005418 	.word	0x20005418
 80065b8:	20005410 	.word	0x20005410

080065bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065bc:	b480      	push	{r7}
 80065be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80065c0:	4b04      	ldr	r3, [pc, #16]	; (80065d4 <vTaskSuspendAll+0x18>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3301      	adds	r3, #1
 80065c6:	4a03      	ldr	r2, [pc, #12]	; (80065d4 <vTaskSuspendAll+0x18>)
 80065c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80065ca:	bf00      	nop
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr
 80065d4:	20005434 	.word	0x20005434

080065d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065de:	2300      	movs	r3, #0
 80065e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065e2:	2300      	movs	r3, #0
 80065e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065e6:	4b41      	ldr	r3, [pc, #260]	; (80066ec <xTaskResumeAll+0x114>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10a      	bne.n	8006604 <xTaskResumeAll+0x2c>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	603b      	str	r3, [r7, #0]
}
 8006600:	bf00      	nop
 8006602:	e7fe      	b.n	8006602 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006604:	f000 fef6 	bl	80073f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006608:	4b38      	ldr	r3, [pc, #224]	; (80066ec <xTaskResumeAll+0x114>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3b01      	subs	r3, #1
 800660e:	4a37      	ldr	r2, [pc, #220]	; (80066ec <xTaskResumeAll+0x114>)
 8006610:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006612:	4b36      	ldr	r3, [pc, #216]	; (80066ec <xTaskResumeAll+0x114>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d161      	bne.n	80066de <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800661a:	4b35      	ldr	r3, [pc, #212]	; (80066f0 <xTaskResumeAll+0x118>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d05d      	beq.n	80066de <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006622:	e02e      	b.n	8006682 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006624:	4b33      	ldr	r3, [pc, #204]	; (80066f4 <xTaskResumeAll+0x11c>)
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	3318      	adds	r3, #24
 8006630:	4618      	mov	r0, r3
 8006632:	f7fe fe11 	bl	8005258 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3304      	adds	r3, #4
 800663a:	4618      	mov	r0, r3
 800663c:	f7fe fe0c 	bl	8005258 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006644:	2201      	movs	r2, #1
 8006646:	409a      	lsls	r2, r3
 8006648:	4b2b      	ldr	r3, [pc, #172]	; (80066f8 <xTaskResumeAll+0x120>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4313      	orrs	r3, r2
 800664e:	4a2a      	ldr	r2, [pc, #168]	; (80066f8 <xTaskResumeAll+0x120>)
 8006650:	6013      	str	r3, [r2, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006656:	4613      	mov	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4a27      	ldr	r2, [pc, #156]	; (80066fc <xTaskResumeAll+0x124>)
 8006660:	441a      	add	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	3304      	adds	r3, #4
 8006666:	4619      	mov	r1, r3
 8006668:	4610      	mov	r0, r2
 800666a:	f7fe fd98 	bl	800519e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006672:	4b23      	ldr	r3, [pc, #140]	; (8006700 <xTaskResumeAll+0x128>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006678:	429a      	cmp	r2, r3
 800667a:	d302      	bcc.n	8006682 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800667c:	4b21      	ldr	r3, [pc, #132]	; (8006704 <xTaskResumeAll+0x12c>)
 800667e:	2201      	movs	r2, #1
 8006680:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006682:	4b1c      	ldr	r3, [pc, #112]	; (80066f4 <xTaskResumeAll+0x11c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1cc      	bne.n	8006624 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006690:	f000 fb3e 	bl	8006d10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006694:	4b1c      	ldr	r3, [pc, #112]	; (8006708 <xTaskResumeAll+0x130>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d010      	beq.n	80066c2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066a0:	f000 f858 	bl	8006754 <xTaskIncrementTick>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d002      	beq.n	80066b0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80066aa:	4b16      	ldr	r3, [pc, #88]	; (8006704 <xTaskResumeAll+0x12c>)
 80066ac:	2201      	movs	r2, #1
 80066ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1f1      	bne.n	80066a0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80066bc:	4b12      	ldr	r3, [pc, #72]	; (8006708 <xTaskResumeAll+0x130>)
 80066be:	2200      	movs	r2, #0
 80066c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066c2:	4b10      	ldr	r3, [pc, #64]	; (8006704 <xTaskResumeAll+0x12c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d009      	beq.n	80066de <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066ca:	2301      	movs	r3, #1
 80066cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066ce:	4b0f      	ldr	r3, [pc, #60]	; (800670c <xTaskResumeAll+0x134>)
 80066d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066de:	f000 feb9 	bl	8007454 <vPortExitCritical>

	return xAlreadyYielded;
 80066e2:	68bb      	ldr	r3, [r7, #8]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	20005434 	.word	0x20005434
 80066f0:	2000540c 	.word	0x2000540c
 80066f4:	200053cc 	.word	0x200053cc
 80066f8:	20005414 	.word	0x20005414
 80066fc:	20005310 	.word	0x20005310
 8006700:	2000530c 	.word	0x2000530c
 8006704:	20005420 	.word	0x20005420
 8006708:	2000541c 	.word	0x2000541c
 800670c:	e000ed04 	.word	0xe000ed04

08006710 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006716:	4b05      	ldr	r3, [pc, #20]	; (800672c <xTaskGetTickCount+0x1c>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800671c:	687b      	ldr	r3, [r7, #4]
}
 800671e:	4618      	mov	r0, r3
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	20005410 	.word	0x20005410

08006730 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006736:	f000 ff3f 	bl	80075b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800673a:	2300      	movs	r3, #0
 800673c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800673e:	4b04      	ldr	r3, [pc, #16]	; (8006750 <xTaskGetTickCountFromISR+0x20>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006744:	683b      	ldr	r3, [r7, #0]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	20005410 	.word	0x20005410

08006754 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b086      	sub	sp, #24
 8006758:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800675a:	2300      	movs	r3, #0
 800675c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800675e:	4b4e      	ldr	r3, [pc, #312]	; (8006898 <xTaskIncrementTick+0x144>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	f040 808e 	bne.w	8006884 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006768:	4b4c      	ldr	r3, [pc, #304]	; (800689c <xTaskIncrementTick+0x148>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	3301      	adds	r3, #1
 800676e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006770:	4a4a      	ldr	r2, [pc, #296]	; (800689c <xTaskIncrementTick+0x148>)
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d120      	bne.n	80067be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800677c:	4b48      	ldr	r3, [pc, #288]	; (80068a0 <xTaskIncrementTick+0x14c>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <xTaskIncrementTick+0x48>
	__asm volatile
 8006786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678a:	f383 8811 	msr	BASEPRI, r3
 800678e:	f3bf 8f6f 	isb	sy
 8006792:	f3bf 8f4f 	dsb	sy
 8006796:	603b      	str	r3, [r7, #0]
}
 8006798:	bf00      	nop
 800679a:	e7fe      	b.n	800679a <xTaskIncrementTick+0x46>
 800679c:	4b40      	ldr	r3, [pc, #256]	; (80068a0 <xTaskIncrementTick+0x14c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	60fb      	str	r3, [r7, #12]
 80067a2:	4b40      	ldr	r3, [pc, #256]	; (80068a4 <xTaskIncrementTick+0x150>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a3e      	ldr	r2, [pc, #248]	; (80068a0 <xTaskIncrementTick+0x14c>)
 80067a8:	6013      	str	r3, [r2, #0]
 80067aa:	4a3e      	ldr	r2, [pc, #248]	; (80068a4 <xTaskIncrementTick+0x150>)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	4b3d      	ldr	r3, [pc, #244]	; (80068a8 <xTaskIncrementTick+0x154>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3301      	adds	r3, #1
 80067b6:	4a3c      	ldr	r2, [pc, #240]	; (80068a8 <xTaskIncrementTick+0x154>)
 80067b8:	6013      	str	r3, [r2, #0]
 80067ba:	f000 faa9 	bl	8006d10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067be:	4b3b      	ldr	r3, [pc, #236]	; (80068ac <xTaskIncrementTick+0x158>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d348      	bcc.n	800685a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067c8:	4b35      	ldr	r3, [pc, #212]	; (80068a0 <xTaskIncrementTick+0x14c>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d104      	bne.n	80067dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067d2:	4b36      	ldr	r3, [pc, #216]	; (80068ac <xTaskIncrementTick+0x158>)
 80067d4:	f04f 32ff 	mov.w	r2, #4294967295
 80067d8:	601a      	str	r2, [r3, #0]
					break;
 80067da:	e03e      	b.n	800685a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067dc:	4b30      	ldr	r3, [pc, #192]	; (80068a0 <xTaskIncrementTick+0x14c>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d203      	bcs.n	80067fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067f4:	4a2d      	ldr	r2, [pc, #180]	; (80068ac <xTaskIncrementTick+0x158>)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80067fa:	e02e      	b.n	800685a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	3304      	adds	r3, #4
 8006800:	4618      	mov	r0, r3
 8006802:	f7fe fd29 	bl	8005258 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800680a:	2b00      	cmp	r3, #0
 800680c:	d004      	beq.n	8006818 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	3318      	adds	r3, #24
 8006812:	4618      	mov	r0, r3
 8006814:	f7fe fd20 	bl	8005258 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681c:	2201      	movs	r2, #1
 800681e:	409a      	lsls	r2, r3
 8006820:	4b23      	ldr	r3, [pc, #140]	; (80068b0 <xTaskIncrementTick+0x15c>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4313      	orrs	r3, r2
 8006826:	4a22      	ldr	r2, [pc, #136]	; (80068b0 <xTaskIncrementTick+0x15c>)
 8006828:	6013      	str	r3, [r2, #0]
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800682e:	4613      	mov	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4a1f      	ldr	r2, [pc, #124]	; (80068b4 <xTaskIncrementTick+0x160>)
 8006838:	441a      	add	r2, r3
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	3304      	adds	r3, #4
 800683e:	4619      	mov	r1, r3
 8006840:	4610      	mov	r0, r2
 8006842:	f7fe fcac 	bl	800519e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800684a:	4b1b      	ldr	r3, [pc, #108]	; (80068b8 <xTaskIncrementTick+0x164>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006850:	429a      	cmp	r2, r3
 8006852:	d3b9      	bcc.n	80067c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006854:	2301      	movs	r3, #1
 8006856:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006858:	e7b6      	b.n	80067c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800685a:	4b17      	ldr	r3, [pc, #92]	; (80068b8 <xTaskIncrementTick+0x164>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006860:	4914      	ldr	r1, [pc, #80]	; (80068b4 <xTaskIncrementTick+0x160>)
 8006862:	4613      	mov	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	440b      	add	r3, r1
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d901      	bls.n	8006876 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006872:	2301      	movs	r3, #1
 8006874:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006876:	4b11      	ldr	r3, [pc, #68]	; (80068bc <xTaskIncrementTick+0x168>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d007      	beq.n	800688e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800687e:	2301      	movs	r3, #1
 8006880:	617b      	str	r3, [r7, #20]
 8006882:	e004      	b.n	800688e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006884:	4b0e      	ldr	r3, [pc, #56]	; (80068c0 <xTaskIncrementTick+0x16c>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	3301      	adds	r3, #1
 800688a:	4a0d      	ldr	r2, [pc, #52]	; (80068c0 <xTaskIncrementTick+0x16c>)
 800688c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800688e:	697b      	ldr	r3, [r7, #20]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3718      	adds	r7, #24
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	20005434 	.word	0x20005434
 800689c:	20005410 	.word	0x20005410
 80068a0:	200053c4 	.word	0x200053c4
 80068a4:	200053c8 	.word	0x200053c8
 80068a8:	20005424 	.word	0x20005424
 80068ac:	2000542c 	.word	0x2000542c
 80068b0:	20005414 	.word	0x20005414
 80068b4:	20005310 	.word	0x20005310
 80068b8:	2000530c 	.word	0x2000530c
 80068bc:	20005420 	.word	0x20005420
 80068c0:	2000541c 	.word	0x2000541c

080068c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068ca:	4b29      	ldr	r3, [pc, #164]	; (8006970 <vTaskSwitchContext+0xac>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068d2:	4b28      	ldr	r3, [pc, #160]	; (8006974 <vTaskSwitchContext+0xb0>)
 80068d4:	2201      	movs	r2, #1
 80068d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068d8:	e044      	b.n	8006964 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80068da:	4b26      	ldr	r3, [pc, #152]	; (8006974 <vTaskSwitchContext+0xb0>)
 80068dc:	2200      	movs	r2, #0
 80068de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068e0:	4b25      	ldr	r3, [pc, #148]	; (8006978 <vTaskSwitchContext+0xb4>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	fab3 f383 	clz	r3, r3
 80068ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80068ee:	7afb      	ldrb	r3, [r7, #11]
 80068f0:	f1c3 031f 	rsb	r3, r3, #31
 80068f4:	617b      	str	r3, [r7, #20]
 80068f6:	4921      	ldr	r1, [pc, #132]	; (800697c <vTaskSwitchContext+0xb8>)
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	4613      	mov	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	440b      	add	r3, r1
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10a      	bne.n	8006920 <vTaskSwitchContext+0x5c>
	__asm volatile
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	607b      	str	r3, [r7, #4]
}
 800691c:	bf00      	nop
 800691e:	e7fe      	b.n	800691e <vTaskSwitchContext+0x5a>
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	4613      	mov	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4a14      	ldr	r2, [pc, #80]	; (800697c <vTaskSwitchContext+0xb8>)
 800692c:	4413      	add	r3, r2
 800692e:	613b      	str	r3, [r7, #16]
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	605a      	str	r2, [r3, #4]
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	3308      	adds	r3, #8
 8006942:	429a      	cmp	r2, r3
 8006944:	d104      	bne.n	8006950 <vTaskSwitchContext+0x8c>
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	605a      	str	r2, [r3, #4]
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	4a0a      	ldr	r2, [pc, #40]	; (8006980 <vTaskSwitchContext+0xbc>)
 8006958:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800695a:	4b09      	ldr	r3, [pc, #36]	; (8006980 <vTaskSwitchContext+0xbc>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	334c      	adds	r3, #76	; 0x4c
 8006960:	4a08      	ldr	r2, [pc, #32]	; (8006984 <vTaskSwitchContext+0xc0>)
 8006962:	6013      	str	r3, [r2, #0]
}
 8006964:	bf00      	nop
 8006966:	371c      	adds	r7, #28
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	20005434 	.word	0x20005434
 8006974:	20005420 	.word	0x20005420
 8006978:	20005414 	.word	0x20005414
 800697c:	20005310 	.word	0x20005310
 8006980:	2000530c 	.word	0x2000530c
 8006984:	20000034 	.word	0x20000034

08006988 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10a      	bne.n	80069ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	60fb      	str	r3, [r7, #12]
}
 80069aa:	bf00      	nop
 80069ac:	e7fe      	b.n	80069ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069ae:	4b07      	ldr	r3, [pc, #28]	; (80069cc <vTaskPlaceOnEventList+0x44>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3318      	adds	r3, #24
 80069b4:	4619      	mov	r1, r3
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7fe fc15 	bl	80051e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069bc:	2101      	movs	r1, #1
 80069be:	6838      	ldr	r0, [r7, #0]
 80069c0:	f000 fb82 	bl	80070c8 <prvAddCurrentTaskToDelayedList>
}
 80069c4:	bf00      	nop
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	2000530c 	.word	0x2000530c

080069d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10a      	bne.n	80069fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80069e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ea:	f383 8811 	msr	BASEPRI, r3
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	60fb      	str	r3, [r7, #12]
}
 80069f8:	bf00      	nop
 80069fa:	e7fe      	b.n	80069fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	3318      	adds	r3, #24
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fe fc29 	bl	8005258 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a06:	4b1d      	ldr	r3, [pc, #116]	; (8006a7c <xTaskRemoveFromEventList+0xac>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d11c      	bne.n	8006a48 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	3304      	adds	r3, #4
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fe fc20 	bl	8005258 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	409a      	lsls	r2, r3
 8006a20:	4b17      	ldr	r3, [pc, #92]	; (8006a80 <xTaskRemoveFromEventList+0xb0>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	4a16      	ldr	r2, [pc, #88]	; (8006a80 <xTaskRemoveFromEventList+0xb0>)
 8006a28:	6013      	str	r3, [r2, #0]
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a2e:	4613      	mov	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4a13      	ldr	r2, [pc, #76]	; (8006a84 <xTaskRemoveFromEventList+0xb4>)
 8006a38:	441a      	add	r2, r3
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	3304      	adds	r3, #4
 8006a3e:	4619      	mov	r1, r3
 8006a40:	4610      	mov	r0, r2
 8006a42:	f7fe fbac 	bl	800519e <vListInsertEnd>
 8006a46:	e005      	b.n	8006a54 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	3318      	adds	r3, #24
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	480e      	ldr	r0, [pc, #56]	; (8006a88 <xTaskRemoveFromEventList+0xb8>)
 8006a50:	f7fe fba5 	bl	800519e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a58:	4b0c      	ldr	r3, [pc, #48]	; (8006a8c <xTaskRemoveFromEventList+0xbc>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d905      	bls.n	8006a6e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a62:	2301      	movs	r3, #1
 8006a64:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a66:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <xTaskRemoveFromEventList+0xc0>)
 8006a68:	2201      	movs	r2, #1
 8006a6a:	601a      	str	r2, [r3, #0]
 8006a6c:	e001      	b.n	8006a72 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a72:	697b      	ldr	r3, [r7, #20]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3718      	adds	r7, #24
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	20005434 	.word	0x20005434
 8006a80:	20005414 	.word	0x20005414
 8006a84:	20005310 	.word	0x20005310
 8006a88:	200053cc 	.word	0x200053cc
 8006a8c:	2000530c 	.word	0x2000530c
 8006a90:	20005420 	.word	0x20005420

08006a94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a9c:	4b06      	ldr	r3, [pc, #24]	; (8006ab8 <vTaskInternalSetTimeOutState+0x24>)
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006aa4:	4b05      	ldr	r3, [pc, #20]	; (8006abc <vTaskInternalSetTimeOutState+0x28>)
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	605a      	str	r2, [r3, #4]
}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	20005424 	.word	0x20005424
 8006abc:	20005410 	.word	0x20005410

08006ac0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10a      	bne.n	8006ae6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	613b      	str	r3, [r7, #16]
}
 8006ae2:	bf00      	nop
 8006ae4:	e7fe      	b.n	8006ae4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10a      	bne.n	8006b02 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	60fb      	str	r3, [r7, #12]
}
 8006afe:	bf00      	nop
 8006b00:	e7fe      	b.n	8006b00 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006b02:	f000 fc77 	bl	80073f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b06:	4b1d      	ldr	r3, [pc, #116]	; (8006b7c <xTaskCheckForTimeOut+0xbc>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1e:	d102      	bne.n	8006b26 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b20:	2300      	movs	r3, #0
 8006b22:	61fb      	str	r3, [r7, #28]
 8006b24:	e023      	b.n	8006b6e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	4b15      	ldr	r3, [pc, #84]	; (8006b80 <xTaskCheckForTimeOut+0xc0>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d007      	beq.n	8006b42 <xTaskCheckForTimeOut+0x82>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	69ba      	ldr	r2, [r7, #24]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d302      	bcc.n	8006b42 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	61fb      	str	r3, [r7, #28]
 8006b40:	e015      	b.n	8006b6e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d20b      	bcs.n	8006b64 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	1ad2      	subs	r2, r2, r3
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f7ff ff9b 	bl	8006a94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	61fb      	str	r3, [r7, #28]
 8006b62:	e004      	b.n	8006b6e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	2200      	movs	r2, #0
 8006b68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b6e:	f000 fc71 	bl	8007454 <vPortExitCritical>

	return xReturn;
 8006b72:	69fb      	ldr	r3, [r7, #28]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3720      	adds	r7, #32
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	20005410 	.word	0x20005410
 8006b80:	20005424 	.word	0x20005424

08006b84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b84:	b480      	push	{r7}
 8006b86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b88:	4b03      	ldr	r3, [pc, #12]	; (8006b98 <vTaskMissedYield+0x14>)
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	601a      	str	r2, [r3, #0]
}
 8006b8e:	bf00      	nop
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr
 8006b98:	20005420 	.word	0x20005420

08006b9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ba4:	f000 f852 	bl	8006c4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ba8:	4b06      	ldr	r3, [pc, #24]	; (8006bc4 <prvIdleTask+0x28>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d9f9      	bls.n	8006ba4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006bb0:	4b05      	ldr	r3, [pc, #20]	; (8006bc8 <prvIdleTask+0x2c>)
 8006bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006bc0:	e7f0      	b.n	8006ba4 <prvIdleTask+0x8>
 8006bc2:	bf00      	nop
 8006bc4:	20005310 	.word	0x20005310
 8006bc8:	e000ed04 	.word	0xe000ed04

08006bcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	607b      	str	r3, [r7, #4]
 8006bd6:	e00c      	b.n	8006bf2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4a12      	ldr	r2, [pc, #72]	; (8006c2c <prvInitialiseTaskLists+0x60>)
 8006be4:	4413      	add	r3, r2
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fe faac 	bl	8005144 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	607b      	str	r3, [r7, #4]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b06      	cmp	r3, #6
 8006bf6:	d9ef      	bls.n	8006bd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006bf8:	480d      	ldr	r0, [pc, #52]	; (8006c30 <prvInitialiseTaskLists+0x64>)
 8006bfa:	f7fe faa3 	bl	8005144 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006bfe:	480d      	ldr	r0, [pc, #52]	; (8006c34 <prvInitialiseTaskLists+0x68>)
 8006c00:	f7fe faa0 	bl	8005144 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c04:	480c      	ldr	r0, [pc, #48]	; (8006c38 <prvInitialiseTaskLists+0x6c>)
 8006c06:	f7fe fa9d 	bl	8005144 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c0a:	480c      	ldr	r0, [pc, #48]	; (8006c3c <prvInitialiseTaskLists+0x70>)
 8006c0c:	f7fe fa9a 	bl	8005144 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c10:	480b      	ldr	r0, [pc, #44]	; (8006c40 <prvInitialiseTaskLists+0x74>)
 8006c12:	f7fe fa97 	bl	8005144 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c16:	4b0b      	ldr	r3, [pc, #44]	; (8006c44 <prvInitialiseTaskLists+0x78>)
 8006c18:	4a05      	ldr	r2, [pc, #20]	; (8006c30 <prvInitialiseTaskLists+0x64>)
 8006c1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c1c:	4b0a      	ldr	r3, [pc, #40]	; (8006c48 <prvInitialiseTaskLists+0x7c>)
 8006c1e:	4a05      	ldr	r2, [pc, #20]	; (8006c34 <prvInitialiseTaskLists+0x68>)
 8006c20:	601a      	str	r2, [r3, #0]
}
 8006c22:	bf00      	nop
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	20005310 	.word	0x20005310
 8006c30:	2000539c 	.word	0x2000539c
 8006c34:	200053b0 	.word	0x200053b0
 8006c38:	200053cc 	.word	0x200053cc
 8006c3c:	200053e0 	.word	0x200053e0
 8006c40:	200053f8 	.word	0x200053f8
 8006c44:	200053c4 	.word	0x200053c4
 8006c48:	200053c8 	.word	0x200053c8

08006c4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c52:	e019      	b.n	8006c88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c54:	f000 fbce 	bl	80073f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c58:	4b10      	ldr	r3, [pc, #64]	; (8006c9c <prvCheckTasksWaitingTermination+0x50>)
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3304      	adds	r3, #4
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7fe faf7 	bl	8005258 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c6a:	4b0d      	ldr	r3, [pc, #52]	; (8006ca0 <prvCheckTasksWaitingTermination+0x54>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	4a0b      	ldr	r2, [pc, #44]	; (8006ca0 <prvCheckTasksWaitingTermination+0x54>)
 8006c72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c74:	4b0b      	ldr	r3, [pc, #44]	; (8006ca4 <prvCheckTasksWaitingTermination+0x58>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	4a0a      	ldr	r2, [pc, #40]	; (8006ca4 <prvCheckTasksWaitingTermination+0x58>)
 8006c7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c7e:	f000 fbe9 	bl	8007454 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f810 	bl	8006ca8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c88:	4b06      	ldr	r3, [pc, #24]	; (8006ca4 <prvCheckTasksWaitingTermination+0x58>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1e1      	bne.n	8006c54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c90:	bf00      	nop
 8006c92:	bf00      	nop
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	200053e0 	.word	0x200053e0
 8006ca0:	2000540c 	.word	0x2000540c
 8006ca4:	200053f4 	.word	0x200053f4

08006ca8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	334c      	adds	r3, #76	; 0x4c
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f00d fb51 	bl	801435c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d108      	bne.n	8006cd6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f000 fd81 	bl	80077d0 <vPortFree>
				vPortFree( pxTCB );
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fd7e 	bl	80077d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006cd4:	e018      	b.n	8006d08 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d103      	bne.n	8006ce8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fd75 	bl	80077d0 <vPortFree>
	}
 8006ce6:	e00f      	b.n	8006d08 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d00a      	beq.n	8006d08 <prvDeleteTCB+0x60>
	__asm volatile
 8006cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	60fb      	str	r3, [r7, #12]
}
 8006d04:	bf00      	nop
 8006d06:	e7fe      	b.n	8006d06 <prvDeleteTCB+0x5e>
	}
 8006d08:	bf00      	nop
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d16:	4b0c      	ldr	r3, [pc, #48]	; (8006d48 <prvResetNextTaskUnblockTime+0x38>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d104      	bne.n	8006d2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d20:	4b0a      	ldr	r3, [pc, #40]	; (8006d4c <prvResetNextTaskUnblockTime+0x3c>)
 8006d22:	f04f 32ff 	mov.w	r2, #4294967295
 8006d26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d28:	e008      	b.n	8006d3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d2a:	4b07      	ldr	r3, [pc, #28]	; (8006d48 <prvResetNextTaskUnblockTime+0x38>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	4a04      	ldr	r2, [pc, #16]	; (8006d4c <prvResetNextTaskUnblockTime+0x3c>)
 8006d3a:	6013      	str	r3, [r2, #0]
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	200053c4 	.word	0x200053c4
 8006d4c:	2000542c 	.word	0x2000542c

08006d50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d56:	4b0b      	ldr	r3, [pc, #44]	; (8006d84 <xTaskGetSchedulerState+0x34>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d102      	bne.n	8006d64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	607b      	str	r3, [r7, #4]
 8006d62:	e008      	b.n	8006d76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d64:	4b08      	ldr	r3, [pc, #32]	; (8006d88 <xTaskGetSchedulerState+0x38>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d102      	bne.n	8006d72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	607b      	str	r3, [r7, #4]
 8006d70:	e001      	b.n	8006d76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d72:	2300      	movs	r3, #0
 8006d74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d76:	687b      	ldr	r3, [r7, #4]
	}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr
 8006d84:	20005418 	.word	0x20005418
 8006d88:	20005434 	.word	0x20005434

08006d8c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d05e      	beq.n	8006e60 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da6:	4b31      	ldr	r3, [pc, #196]	; (8006e6c <xTaskPriorityInherit+0xe0>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d24e      	bcs.n	8006e4e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	db06      	blt.n	8006dc6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006db8:	4b2c      	ldr	r3, [pc, #176]	; (8006e6c <xTaskPriorityInherit+0xe0>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbe:	f1c3 0207 	rsb	r2, r3, #7
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	6959      	ldr	r1, [r3, #20]
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dce:	4613      	mov	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4a26      	ldr	r2, [pc, #152]	; (8006e70 <xTaskPriorityInherit+0xe4>)
 8006dd8:	4413      	add	r3, r2
 8006dda:	4299      	cmp	r1, r3
 8006ddc:	d12f      	bne.n	8006e3e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	3304      	adds	r3, #4
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fe fa38 	bl	8005258 <uxListRemove>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10a      	bne.n	8006e04 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df2:	2201      	movs	r2, #1
 8006df4:	fa02 f303 	lsl.w	r3, r2, r3
 8006df8:	43da      	mvns	r2, r3
 8006dfa:	4b1e      	ldr	r3, [pc, #120]	; (8006e74 <xTaskPriorityInherit+0xe8>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4013      	ands	r3, r2
 8006e00:	4a1c      	ldr	r2, [pc, #112]	; (8006e74 <xTaskPriorityInherit+0xe8>)
 8006e02:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e04:	4b19      	ldr	r3, [pc, #100]	; (8006e6c <xTaskPriorityInherit+0xe0>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e12:	2201      	movs	r2, #1
 8006e14:	409a      	lsls	r2, r3
 8006e16:	4b17      	ldr	r3, [pc, #92]	; (8006e74 <xTaskPriorityInherit+0xe8>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	4a15      	ldr	r2, [pc, #84]	; (8006e74 <xTaskPriorityInherit+0xe8>)
 8006e1e:	6013      	str	r3, [r2, #0]
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e24:	4613      	mov	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4a10      	ldr	r2, [pc, #64]	; (8006e70 <xTaskPriorityInherit+0xe4>)
 8006e2e:	441a      	add	r2, r3
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	3304      	adds	r3, #4
 8006e34:	4619      	mov	r1, r3
 8006e36:	4610      	mov	r0, r2
 8006e38:	f7fe f9b1 	bl	800519e <vListInsertEnd>
 8006e3c:	e004      	b.n	8006e48 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e3e:	4b0b      	ldr	r3, [pc, #44]	; (8006e6c <xTaskPriorityInherit+0xe0>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	60fb      	str	r3, [r7, #12]
 8006e4c:	e008      	b.n	8006e60 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e52:	4b06      	ldr	r3, [pc, #24]	; (8006e6c <xTaskPriorityInherit+0xe0>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d201      	bcs.n	8006e60 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e60:	68fb      	ldr	r3, [r7, #12]
	}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	2000530c 	.word	0x2000530c
 8006e70:	20005310 	.word	0x20005310
 8006e74:	20005414 	.word	0x20005414

08006e78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e84:	2300      	movs	r3, #0
 8006e86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d06e      	beq.n	8006f6c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e8e:	4b3a      	ldr	r3, [pc, #232]	; (8006f78 <xTaskPriorityDisinherit+0x100>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d00a      	beq.n	8006eae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9c:	f383 8811 	msr	BASEPRI, r3
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	60fb      	str	r3, [r7, #12]
}
 8006eaa:	bf00      	nop
 8006eac:	e7fe      	b.n	8006eac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10a      	bne.n	8006ecc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	60bb      	str	r3, [r7, #8]
}
 8006ec8:	bf00      	nop
 8006eca:	e7fe      	b.n	8006eca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ed0:	1e5a      	subs	r2, r3, #1
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d044      	beq.n	8006f6c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d140      	bne.n	8006f6c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	3304      	adds	r3, #4
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fe f9b2 	bl	8005258 <uxListRemove>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d115      	bne.n	8006f26 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006efe:	491f      	ldr	r1, [pc, #124]	; (8006f7c <xTaskPriorityDisinherit+0x104>)
 8006f00:	4613      	mov	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	440b      	add	r3, r1
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10a      	bne.n	8006f26 <xTaskPriorityDisinherit+0xae>
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f14:	2201      	movs	r2, #1
 8006f16:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1a:	43da      	mvns	r2, r3
 8006f1c:	4b18      	ldr	r3, [pc, #96]	; (8006f80 <xTaskPriorityDisinherit+0x108>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4013      	ands	r3, r2
 8006f22:	4a17      	ldr	r2, [pc, #92]	; (8006f80 <xTaskPriorityDisinherit+0x108>)
 8006f24:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f32:	f1c3 0207 	rsb	r2, r3, #7
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3e:	2201      	movs	r2, #1
 8006f40:	409a      	lsls	r2, r3
 8006f42:	4b0f      	ldr	r3, [pc, #60]	; (8006f80 <xTaskPriorityDisinherit+0x108>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	4a0d      	ldr	r2, [pc, #52]	; (8006f80 <xTaskPriorityDisinherit+0x108>)
 8006f4a:	6013      	str	r3, [r2, #0]
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f50:	4613      	mov	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4a08      	ldr	r2, [pc, #32]	; (8006f7c <xTaskPriorityDisinherit+0x104>)
 8006f5a:	441a      	add	r2, r3
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	3304      	adds	r3, #4
 8006f60:	4619      	mov	r1, r3
 8006f62:	4610      	mov	r0, r2
 8006f64:	f7fe f91b 	bl	800519e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f6c:	697b      	ldr	r3, [r7, #20]
	}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3718      	adds	r7, #24
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	2000530c 	.word	0x2000530c
 8006f7c:	20005310 	.word	0x20005310
 8006f80:	20005414 	.word	0x20005414

08006f84 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b088      	sub	sp, #32
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006f92:	2301      	movs	r3, #1
 8006f94:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d077      	beq.n	800708c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10a      	bne.n	8006fba <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa8:	f383 8811 	msr	BASEPRI, r3
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	60fb      	str	r3, [r7, #12]
}
 8006fb6:	bf00      	nop
 8006fb8:	e7fe      	b.n	8006fb8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d902      	bls.n	8006fca <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	61fb      	str	r3, [r7, #28]
 8006fc8:	e002      	b.n	8006fd0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fce:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd4:	69fa      	ldr	r2, [r7, #28]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d058      	beq.n	800708c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d153      	bne.n	800708c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006fe4:	4b2b      	ldr	r3, [pc, #172]	; (8007094 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d10a      	bne.n	8007004 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff2:	f383 8811 	msr	BASEPRI, r3
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	60bb      	str	r3, [r7, #8]
}
 8007000:	bf00      	nop
 8007002:	e7fe      	b.n	8007002 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007008:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	69fa      	ldr	r2, [r7, #28]
 800700e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	2b00      	cmp	r3, #0
 8007016:	db04      	blt.n	8007022 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	f1c3 0207 	rsb	r2, r3, #7
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	6959      	ldr	r1, [r3, #20]
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	4613      	mov	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4413      	add	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4a19      	ldr	r2, [pc, #100]	; (8007098 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007032:	4413      	add	r3, r2
 8007034:	4299      	cmp	r1, r3
 8007036:	d129      	bne.n	800708c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	3304      	adds	r3, #4
 800703c:	4618      	mov	r0, r3
 800703e:	f7fe f90b 	bl	8005258 <uxListRemove>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10a      	bne.n	800705e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704c:	2201      	movs	r2, #1
 800704e:	fa02 f303 	lsl.w	r3, r2, r3
 8007052:	43da      	mvns	r2, r3
 8007054:	4b11      	ldr	r3, [pc, #68]	; (800709c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4013      	ands	r3, r2
 800705a:	4a10      	ldr	r2, [pc, #64]	; (800709c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800705c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007062:	2201      	movs	r2, #1
 8007064:	409a      	lsls	r2, r3
 8007066:	4b0d      	ldr	r3, [pc, #52]	; (800709c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4313      	orrs	r3, r2
 800706c:	4a0b      	ldr	r2, [pc, #44]	; (800709c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800706e:	6013      	str	r3, [r2, #0]
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007074:	4613      	mov	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4a06      	ldr	r2, [pc, #24]	; (8007098 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800707e:	441a      	add	r2, r3
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	3304      	adds	r3, #4
 8007084:	4619      	mov	r1, r3
 8007086:	4610      	mov	r0, r2
 8007088:	f7fe f889 	bl	800519e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800708c:	bf00      	nop
 800708e:	3720      	adds	r7, #32
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	2000530c 	.word	0x2000530c
 8007098:	20005310 	.word	0x20005310
 800709c:	20005414 	.word	0x20005414

080070a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80070a0:	b480      	push	{r7}
 80070a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80070a4:	4b07      	ldr	r3, [pc, #28]	; (80070c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d004      	beq.n	80070b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80070ac:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070b2:	3201      	adds	r2, #1
 80070b4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80070b6:	4b03      	ldr	r3, [pc, #12]	; (80070c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80070b8:	681b      	ldr	r3, [r3, #0]
	}
 80070ba:	4618      	mov	r0, r3
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr
 80070c4:	2000530c 	.word	0x2000530c

080070c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80070d2:	4b29      	ldr	r3, [pc, #164]	; (8007178 <prvAddCurrentTaskToDelayedList+0xb0>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070d8:	4b28      	ldr	r3, [pc, #160]	; (800717c <prvAddCurrentTaskToDelayedList+0xb4>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	3304      	adds	r3, #4
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fe f8ba 	bl	8005258 <uxListRemove>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10b      	bne.n	8007102 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80070ea:	4b24      	ldr	r3, [pc, #144]	; (800717c <prvAddCurrentTaskToDelayedList+0xb4>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f0:	2201      	movs	r2, #1
 80070f2:	fa02 f303 	lsl.w	r3, r2, r3
 80070f6:	43da      	mvns	r2, r3
 80070f8:	4b21      	ldr	r3, [pc, #132]	; (8007180 <prvAddCurrentTaskToDelayedList+0xb8>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4013      	ands	r3, r2
 80070fe:	4a20      	ldr	r2, [pc, #128]	; (8007180 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007100:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007108:	d10a      	bne.n	8007120 <prvAddCurrentTaskToDelayedList+0x58>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d007      	beq.n	8007120 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007110:	4b1a      	ldr	r3, [pc, #104]	; (800717c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3304      	adds	r3, #4
 8007116:	4619      	mov	r1, r3
 8007118:	481a      	ldr	r0, [pc, #104]	; (8007184 <prvAddCurrentTaskToDelayedList+0xbc>)
 800711a:	f7fe f840 	bl	800519e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800711e:	e026      	b.n	800716e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4413      	add	r3, r2
 8007126:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007128:	4b14      	ldr	r3, [pc, #80]	; (800717c <prvAddCurrentTaskToDelayedList+0xb4>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007130:	68ba      	ldr	r2, [r7, #8]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	429a      	cmp	r2, r3
 8007136:	d209      	bcs.n	800714c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007138:	4b13      	ldr	r3, [pc, #76]	; (8007188 <prvAddCurrentTaskToDelayedList+0xc0>)
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	4b0f      	ldr	r3, [pc, #60]	; (800717c <prvAddCurrentTaskToDelayedList+0xb4>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	3304      	adds	r3, #4
 8007142:	4619      	mov	r1, r3
 8007144:	4610      	mov	r0, r2
 8007146:	f7fe f84e 	bl	80051e6 <vListInsert>
}
 800714a:	e010      	b.n	800716e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800714c:	4b0f      	ldr	r3, [pc, #60]	; (800718c <prvAddCurrentTaskToDelayedList+0xc4>)
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	4b0a      	ldr	r3, [pc, #40]	; (800717c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	3304      	adds	r3, #4
 8007156:	4619      	mov	r1, r3
 8007158:	4610      	mov	r0, r2
 800715a:	f7fe f844 	bl	80051e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800715e:	4b0c      	ldr	r3, [pc, #48]	; (8007190 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	429a      	cmp	r2, r3
 8007166:	d202      	bcs.n	800716e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007168:	4a09      	ldr	r2, [pc, #36]	; (8007190 <prvAddCurrentTaskToDelayedList+0xc8>)
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	6013      	str	r3, [r2, #0]
}
 800716e:	bf00      	nop
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20005410 	.word	0x20005410
 800717c:	2000530c 	.word	0x2000530c
 8007180:	20005414 	.word	0x20005414
 8007184:	200053f8 	.word	0x200053f8
 8007188:	200053c8 	.word	0x200053c8
 800718c:	200053c4 	.word	0x200053c4
 8007190:	2000542c 	.word	0x2000542c

08007194 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	3b04      	subs	r3, #4
 80071a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80071ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	3b04      	subs	r3, #4
 80071b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	f023 0201 	bic.w	r2, r3, #1
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	3b04      	subs	r3, #4
 80071c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80071c4:	4a0c      	ldr	r2, [pc, #48]	; (80071f8 <pxPortInitialiseStack+0x64>)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	3b14      	subs	r3, #20
 80071ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	3b04      	subs	r3, #4
 80071da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f06f 0202 	mvn.w	r2, #2
 80071e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	3b20      	subs	r3, #32
 80071e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80071ea:	68fb      	ldr	r3, [r7, #12]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr
 80071f8:	080071fd 	.word	0x080071fd

080071fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007202:	2300      	movs	r3, #0
 8007204:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007206:	4b12      	ldr	r3, [pc, #72]	; (8007250 <prvTaskExitError+0x54>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720e:	d00a      	beq.n	8007226 <prvTaskExitError+0x2a>
	__asm volatile
 8007210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	60fb      	str	r3, [r7, #12]
}
 8007222:	bf00      	nop
 8007224:	e7fe      	b.n	8007224 <prvTaskExitError+0x28>
	__asm volatile
 8007226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722a:	f383 8811 	msr	BASEPRI, r3
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	f3bf 8f4f 	dsb	sy
 8007236:	60bb      	str	r3, [r7, #8]
}
 8007238:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800723a:	bf00      	nop
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d0fc      	beq.n	800723c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007242:	bf00      	nop
 8007244:	bf00      	nop
 8007246:	3714      	adds	r7, #20
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	20000020 	.word	0x20000020
	...

08007260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007260:	4b07      	ldr	r3, [pc, #28]	; (8007280 <pxCurrentTCBConst2>)
 8007262:	6819      	ldr	r1, [r3, #0]
 8007264:	6808      	ldr	r0, [r1, #0]
 8007266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726a:	f380 8809 	msr	PSP, r0
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f04f 0000 	mov.w	r0, #0
 8007276:	f380 8811 	msr	BASEPRI, r0
 800727a:	4770      	bx	lr
 800727c:	f3af 8000 	nop.w

08007280 <pxCurrentTCBConst2>:
 8007280:	2000530c 	.word	0x2000530c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007284:	bf00      	nop
 8007286:	bf00      	nop

08007288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007288:	4808      	ldr	r0, [pc, #32]	; (80072ac <prvPortStartFirstTask+0x24>)
 800728a:	6800      	ldr	r0, [r0, #0]
 800728c:	6800      	ldr	r0, [r0, #0]
 800728e:	f380 8808 	msr	MSP, r0
 8007292:	f04f 0000 	mov.w	r0, #0
 8007296:	f380 8814 	msr	CONTROL, r0
 800729a:	b662      	cpsie	i
 800729c:	b661      	cpsie	f
 800729e:	f3bf 8f4f 	dsb	sy
 80072a2:	f3bf 8f6f 	isb	sy
 80072a6:	df00      	svc	0
 80072a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80072aa:	bf00      	nop
 80072ac:	e000ed08 	.word	0xe000ed08

080072b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80072b6:	4b46      	ldr	r3, [pc, #280]	; (80073d0 <xPortStartScheduler+0x120>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a46      	ldr	r2, [pc, #280]	; (80073d4 <xPortStartScheduler+0x124>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d10a      	bne.n	80072d6 <xPortStartScheduler+0x26>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	613b      	str	r3, [r7, #16]
}
 80072d2:	bf00      	nop
 80072d4:	e7fe      	b.n	80072d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80072d6:	4b3e      	ldr	r3, [pc, #248]	; (80073d0 <xPortStartScheduler+0x120>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a3f      	ldr	r2, [pc, #252]	; (80073d8 <xPortStartScheduler+0x128>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d10a      	bne.n	80072f6 <xPortStartScheduler+0x46>
	__asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	60fb      	str	r3, [r7, #12]
}
 80072f2:	bf00      	nop
 80072f4:	e7fe      	b.n	80072f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80072f6:	4b39      	ldr	r3, [pc, #228]	; (80073dc <xPortStartScheduler+0x12c>)
 80072f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	22ff      	movs	r2, #255	; 0xff
 8007306:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	b2db      	uxtb	r3, r3
 800730e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007310:	78fb      	ldrb	r3, [r7, #3]
 8007312:	b2db      	uxtb	r3, r3
 8007314:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007318:	b2da      	uxtb	r2, r3
 800731a:	4b31      	ldr	r3, [pc, #196]	; (80073e0 <xPortStartScheduler+0x130>)
 800731c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800731e:	4b31      	ldr	r3, [pc, #196]	; (80073e4 <xPortStartScheduler+0x134>)
 8007320:	2207      	movs	r2, #7
 8007322:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007324:	e009      	b.n	800733a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007326:	4b2f      	ldr	r3, [pc, #188]	; (80073e4 <xPortStartScheduler+0x134>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	3b01      	subs	r3, #1
 800732c:	4a2d      	ldr	r2, [pc, #180]	; (80073e4 <xPortStartScheduler+0x134>)
 800732e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007330:	78fb      	ldrb	r3, [r7, #3]
 8007332:	b2db      	uxtb	r3, r3
 8007334:	005b      	lsls	r3, r3, #1
 8007336:	b2db      	uxtb	r3, r3
 8007338:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800733a:	78fb      	ldrb	r3, [r7, #3]
 800733c:	b2db      	uxtb	r3, r3
 800733e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007342:	2b80      	cmp	r3, #128	; 0x80
 8007344:	d0ef      	beq.n	8007326 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007346:	4b27      	ldr	r3, [pc, #156]	; (80073e4 <xPortStartScheduler+0x134>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f1c3 0307 	rsb	r3, r3, #7
 800734e:	2b04      	cmp	r3, #4
 8007350:	d00a      	beq.n	8007368 <xPortStartScheduler+0xb8>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	60bb      	str	r3, [r7, #8]
}
 8007364:	bf00      	nop
 8007366:	e7fe      	b.n	8007366 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007368:	4b1e      	ldr	r3, [pc, #120]	; (80073e4 <xPortStartScheduler+0x134>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	021b      	lsls	r3, r3, #8
 800736e:	4a1d      	ldr	r2, [pc, #116]	; (80073e4 <xPortStartScheduler+0x134>)
 8007370:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007372:	4b1c      	ldr	r3, [pc, #112]	; (80073e4 <xPortStartScheduler+0x134>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800737a:	4a1a      	ldr	r2, [pc, #104]	; (80073e4 <xPortStartScheduler+0x134>)
 800737c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	b2da      	uxtb	r2, r3
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007386:	4b18      	ldr	r3, [pc, #96]	; (80073e8 <xPortStartScheduler+0x138>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a17      	ldr	r2, [pc, #92]	; (80073e8 <xPortStartScheduler+0x138>)
 800738c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007390:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007392:	4b15      	ldr	r3, [pc, #84]	; (80073e8 <xPortStartScheduler+0x138>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a14      	ldr	r2, [pc, #80]	; (80073e8 <xPortStartScheduler+0x138>)
 8007398:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800739c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800739e:	f000 f8dd 	bl	800755c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80073a2:	4b12      	ldr	r3, [pc, #72]	; (80073ec <xPortStartScheduler+0x13c>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80073a8:	f000 f8fc 	bl	80075a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80073ac:	4b10      	ldr	r3, [pc, #64]	; (80073f0 <xPortStartScheduler+0x140>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a0f      	ldr	r2, [pc, #60]	; (80073f0 <xPortStartScheduler+0x140>)
 80073b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80073b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80073b8:	f7ff ff66 	bl	8007288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80073bc:	f7ff fa82 	bl	80068c4 <vTaskSwitchContext>
	prvTaskExitError();
 80073c0:	f7ff ff1c 	bl	80071fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3718      	adds	r7, #24
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	e000ed00 	.word	0xe000ed00
 80073d4:	410fc271 	.word	0x410fc271
 80073d8:	410fc270 	.word	0x410fc270
 80073dc:	e000e400 	.word	0xe000e400
 80073e0:	20005438 	.word	0x20005438
 80073e4:	2000543c 	.word	0x2000543c
 80073e8:	e000ed20 	.word	0xe000ed20
 80073ec:	20000020 	.word	0x20000020
 80073f0:	e000ef34 	.word	0xe000ef34

080073f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
	__asm volatile
 80073fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	607b      	str	r3, [r7, #4]
}
 800740c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800740e:	4b0f      	ldr	r3, [pc, #60]	; (800744c <vPortEnterCritical+0x58>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3301      	adds	r3, #1
 8007414:	4a0d      	ldr	r2, [pc, #52]	; (800744c <vPortEnterCritical+0x58>)
 8007416:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007418:	4b0c      	ldr	r3, [pc, #48]	; (800744c <vPortEnterCritical+0x58>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d10f      	bne.n	8007440 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007420:	4b0b      	ldr	r3, [pc, #44]	; (8007450 <vPortEnterCritical+0x5c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	b2db      	uxtb	r3, r3
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00a      	beq.n	8007440 <vPortEnterCritical+0x4c>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	603b      	str	r3, [r7, #0]
}
 800743c:	bf00      	nop
 800743e:	e7fe      	b.n	800743e <vPortEnterCritical+0x4a>
	}
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	20000020 	.word	0x20000020
 8007450:	e000ed04 	.word	0xe000ed04

08007454 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800745a:	4b12      	ldr	r3, [pc, #72]	; (80074a4 <vPortExitCritical+0x50>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10a      	bne.n	8007478 <vPortExitCritical+0x24>
	__asm volatile
 8007462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	607b      	str	r3, [r7, #4]
}
 8007474:	bf00      	nop
 8007476:	e7fe      	b.n	8007476 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007478:	4b0a      	ldr	r3, [pc, #40]	; (80074a4 <vPortExitCritical+0x50>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	3b01      	subs	r3, #1
 800747e:	4a09      	ldr	r2, [pc, #36]	; (80074a4 <vPortExitCritical+0x50>)
 8007480:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007482:	4b08      	ldr	r3, [pc, #32]	; (80074a4 <vPortExitCritical+0x50>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d105      	bne.n	8007496 <vPortExitCritical+0x42>
 800748a:	2300      	movs	r3, #0
 800748c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	f383 8811 	msr	BASEPRI, r3
}
 8007494:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007496:	bf00      	nop
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	20000020 	.word	0x20000020
	...

080074b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80074b0:	f3ef 8009 	mrs	r0, PSP
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	4b15      	ldr	r3, [pc, #84]	; (8007510 <pxCurrentTCBConst>)
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	f01e 0f10 	tst.w	lr, #16
 80074c0:	bf08      	it	eq
 80074c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80074c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ca:	6010      	str	r0, [r2, #0]
 80074cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80074d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80074d4:	f380 8811 	msr	BASEPRI, r0
 80074d8:	f3bf 8f4f 	dsb	sy
 80074dc:	f3bf 8f6f 	isb	sy
 80074e0:	f7ff f9f0 	bl	80068c4 <vTaskSwitchContext>
 80074e4:	f04f 0000 	mov.w	r0, #0
 80074e8:	f380 8811 	msr	BASEPRI, r0
 80074ec:	bc09      	pop	{r0, r3}
 80074ee:	6819      	ldr	r1, [r3, #0]
 80074f0:	6808      	ldr	r0, [r1, #0]
 80074f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f6:	f01e 0f10 	tst.w	lr, #16
 80074fa:	bf08      	it	eq
 80074fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007500:	f380 8809 	msr	PSP, r0
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	f3af 8000 	nop.w

08007510 <pxCurrentTCBConst>:
 8007510:	2000530c 	.word	0x2000530c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007514:	bf00      	nop
 8007516:	bf00      	nop

08007518 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
	__asm volatile
 800751e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007522:	f383 8811 	msr	BASEPRI, r3
 8007526:	f3bf 8f6f 	isb	sy
 800752a:	f3bf 8f4f 	dsb	sy
 800752e:	607b      	str	r3, [r7, #4]
}
 8007530:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007532:	f7ff f90f 	bl	8006754 <xTaskIncrementTick>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d003      	beq.n	8007544 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800753c:	4b06      	ldr	r3, [pc, #24]	; (8007558 <SysTick_Handler+0x40>)
 800753e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007542:	601a      	str	r2, [r3, #0]
 8007544:	2300      	movs	r3, #0
 8007546:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	f383 8811 	msr	BASEPRI, r3
}
 800754e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007550:	bf00      	nop
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	e000ed04 	.word	0xe000ed04

0800755c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800755c:	b480      	push	{r7}
 800755e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007560:	4b0b      	ldr	r3, [pc, #44]	; (8007590 <vPortSetupTimerInterrupt+0x34>)
 8007562:	2200      	movs	r2, #0
 8007564:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007566:	4b0b      	ldr	r3, [pc, #44]	; (8007594 <vPortSetupTimerInterrupt+0x38>)
 8007568:	2200      	movs	r2, #0
 800756a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800756c:	4b0a      	ldr	r3, [pc, #40]	; (8007598 <vPortSetupTimerInterrupt+0x3c>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a0a      	ldr	r2, [pc, #40]	; (800759c <vPortSetupTimerInterrupt+0x40>)
 8007572:	fba2 2303 	umull	r2, r3, r2, r3
 8007576:	099b      	lsrs	r3, r3, #6
 8007578:	4a09      	ldr	r2, [pc, #36]	; (80075a0 <vPortSetupTimerInterrupt+0x44>)
 800757a:	3b01      	subs	r3, #1
 800757c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800757e:	4b04      	ldr	r3, [pc, #16]	; (8007590 <vPortSetupTimerInterrupt+0x34>)
 8007580:	2207      	movs	r2, #7
 8007582:	601a      	str	r2, [r3, #0]
}
 8007584:	bf00      	nop
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	e000e010 	.word	0xe000e010
 8007594:	e000e018 	.word	0xe000e018
 8007598:	20000000 	.word	0x20000000
 800759c:	10624dd3 	.word	0x10624dd3
 80075a0:	e000e014 	.word	0xe000e014

080075a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80075a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80075b4 <vPortEnableVFP+0x10>
 80075a8:	6801      	ldr	r1, [r0, #0]
 80075aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80075ae:	6001      	str	r1, [r0, #0]
 80075b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80075b2:	bf00      	nop
 80075b4:	e000ed88 	.word	0xe000ed88

080075b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80075be:	f3ef 8305 	mrs	r3, IPSR
 80075c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2b0f      	cmp	r3, #15
 80075c8:	d914      	bls.n	80075f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80075ca:	4a17      	ldr	r2, [pc, #92]	; (8007628 <vPortValidateInterruptPriority+0x70>)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	4413      	add	r3, r2
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80075d4:	4b15      	ldr	r3, [pc, #84]	; (800762c <vPortValidateInterruptPriority+0x74>)
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	7afa      	ldrb	r2, [r7, #11]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d20a      	bcs.n	80075f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80075de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	607b      	str	r3, [r7, #4]
}
 80075f0:	bf00      	nop
 80075f2:	e7fe      	b.n	80075f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80075f4:	4b0e      	ldr	r3, [pc, #56]	; (8007630 <vPortValidateInterruptPriority+0x78>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80075fc:	4b0d      	ldr	r3, [pc, #52]	; (8007634 <vPortValidateInterruptPriority+0x7c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	429a      	cmp	r2, r3
 8007602:	d90a      	bls.n	800761a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	603b      	str	r3, [r7, #0]
}
 8007616:	bf00      	nop
 8007618:	e7fe      	b.n	8007618 <vPortValidateInterruptPriority+0x60>
	}
 800761a:	bf00      	nop
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	e000e3f0 	.word	0xe000e3f0
 800762c:	20005438 	.word	0x20005438
 8007630:	e000ed0c 	.word	0xe000ed0c
 8007634:	2000543c 	.word	0x2000543c

08007638 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b08a      	sub	sp, #40	; 0x28
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007640:	2300      	movs	r3, #0
 8007642:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007644:	f7fe ffba 	bl	80065bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007648:	4b5b      	ldr	r3, [pc, #364]	; (80077b8 <pvPortMalloc+0x180>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007650:	f000 f920 	bl	8007894 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007654:	4b59      	ldr	r3, [pc, #356]	; (80077bc <pvPortMalloc+0x184>)
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4013      	ands	r3, r2
 800765c:	2b00      	cmp	r3, #0
 800765e:	f040 8093 	bne.w	8007788 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d01d      	beq.n	80076a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007668:	2208      	movs	r2, #8
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4413      	add	r3, r2
 800766e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f003 0307 	and.w	r3, r3, #7
 8007676:	2b00      	cmp	r3, #0
 8007678:	d014      	beq.n	80076a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f023 0307 	bic.w	r3, r3, #7
 8007680:	3308      	adds	r3, #8
 8007682:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f003 0307 	and.w	r3, r3, #7
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00a      	beq.n	80076a4 <pvPortMalloc+0x6c>
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	617b      	str	r3, [r7, #20]
}
 80076a0:	bf00      	nop
 80076a2:	e7fe      	b.n	80076a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d06e      	beq.n	8007788 <pvPortMalloc+0x150>
 80076aa:	4b45      	ldr	r3, [pc, #276]	; (80077c0 <pvPortMalloc+0x188>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d869      	bhi.n	8007788 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80076b4:	4b43      	ldr	r3, [pc, #268]	; (80077c4 <pvPortMalloc+0x18c>)
 80076b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80076b8:	4b42      	ldr	r3, [pc, #264]	; (80077c4 <pvPortMalloc+0x18c>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076be:	e004      	b.n	80076ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d903      	bls.n	80076dc <pvPortMalloc+0xa4>
 80076d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1f1      	bne.n	80076c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80076dc:	4b36      	ldr	r3, [pc, #216]	; (80077b8 <pvPortMalloc+0x180>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d050      	beq.n	8007788 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2208      	movs	r2, #8
 80076ec:	4413      	add	r3, r2
 80076ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80076f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	6a3b      	ldr	r3, [r7, #32]
 80076f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80076f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	1ad2      	subs	r2, r2, r3
 8007700:	2308      	movs	r3, #8
 8007702:	005b      	lsls	r3, r3, #1
 8007704:	429a      	cmp	r2, r3
 8007706:	d91f      	bls.n	8007748 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4413      	add	r3, r2
 800770e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	f003 0307 	and.w	r3, r3, #7
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00a      	beq.n	8007730 <pvPortMalloc+0xf8>
	__asm volatile
 800771a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771e:	f383 8811 	msr	BASEPRI, r3
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	f3bf 8f4f 	dsb	sy
 800772a:	613b      	str	r3, [r7, #16]
}
 800772c:	bf00      	nop
 800772e:	e7fe      	b.n	800772e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	685a      	ldr	r2, [r3, #4]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	1ad2      	subs	r2, r2, r3
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800773c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007742:	69b8      	ldr	r0, [r7, #24]
 8007744:	f000 f908 	bl	8007958 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007748:	4b1d      	ldr	r3, [pc, #116]	; (80077c0 <pvPortMalloc+0x188>)
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	4a1b      	ldr	r2, [pc, #108]	; (80077c0 <pvPortMalloc+0x188>)
 8007754:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007756:	4b1a      	ldr	r3, [pc, #104]	; (80077c0 <pvPortMalloc+0x188>)
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	4b1b      	ldr	r3, [pc, #108]	; (80077c8 <pvPortMalloc+0x190>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	429a      	cmp	r2, r3
 8007760:	d203      	bcs.n	800776a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007762:	4b17      	ldr	r3, [pc, #92]	; (80077c0 <pvPortMalloc+0x188>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a18      	ldr	r2, [pc, #96]	; (80077c8 <pvPortMalloc+0x190>)
 8007768:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	4b13      	ldr	r3, [pc, #76]	; (80077bc <pvPortMalloc+0x184>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	431a      	orrs	r2, r3
 8007774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007776:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777a:	2200      	movs	r2, #0
 800777c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800777e:	4b13      	ldr	r3, [pc, #76]	; (80077cc <pvPortMalloc+0x194>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	3301      	adds	r3, #1
 8007784:	4a11      	ldr	r2, [pc, #68]	; (80077cc <pvPortMalloc+0x194>)
 8007786:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007788:	f7fe ff26 	bl	80065d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	f003 0307 	and.w	r3, r3, #7
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00a      	beq.n	80077ac <pvPortMalloc+0x174>
	__asm volatile
 8007796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779a:	f383 8811 	msr	BASEPRI, r3
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f3bf 8f4f 	dsb	sy
 80077a6:	60fb      	str	r3, [r7, #12]
}
 80077a8:	bf00      	nop
 80077aa:	e7fe      	b.n	80077aa <pvPortMalloc+0x172>
	return pvReturn;
 80077ac:	69fb      	ldr	r3, [r7, #28]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3728      	adds	r7, #40	; 0x28
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	20015448 	.word	0x20015448
 80077bc:	2001545c 	.word	0x2001545c
 80077c0:	2001544c 	.word	0x2001544c
 80077c4:	20015440 	.word	0x20015440
 80077c8:	20015450 	.word	0x20015450
 80077cc:	20015454 	.word	0x20015454

080077d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d04d      	beq.n	800787e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80077e2:	2308      	movs	r3, #8
 80077e4:	425b      	negs	r3, r3
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	4413      	add	r3, r2
 80077ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	685a      	ldr	r2, [r3, #4]
 80077f4:	4b24      	ldr	r3, [pc, #144]	; (8007888 <vPortFree+0xb8>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4013      	ands	r3, r2
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10a      	bne.n	8007814 <vPortFree+0x44>
	__asm volatile
 80077fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	60fb      	str	r3, [r7, #12]
}
 8007810:	bf00      	nop
 8007812:	e7fe      	b.n	8007812 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00a      	beq.n	8007832 <vPortFree+0x62>
	__asm volatile
 800781c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007820:	f383 8811 	msr	BASEPRI, r3
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	60bb      	str	r3, [r7, #8]
}
 800782e:	bf00      	nop
 8007830:	e7fe      	b.n	8007830 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	4b14      	ldr	r3, [pc, #80]	; (8007888 <vPortFree+0xb8>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4013      	ands	r3, r2
 800783c:	2b00      	cmp	r3, #0
 800783e:	d01e      	beq.n	800787e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d11a      	bne.n	800787e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	685a      	ldr	r2, [r3, #4]
 800784c:	4b0e      	ldr	r3, [pc, #56]	; (8007888 <vPortFree+0xb8>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	43db      	mvns	r3, r3
 8007852:	401a      	ands	r2, r3
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007858:	f7fe feb0 	bl	80065bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	4b0a      	ldr	r3, [pc, #40]	; (800788c <vPortFree+0xbc>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4413      	add	r3, r2
 8007866:	4a09      	ldr	r2, [pc, #36]	; (800788c <vPortFree+0xbc>)
 8007868:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800786a:	6938      	ldr	r0, [r7, #16]
 800786c:	f000 f874 	bl	8007958 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007870:	4b07      	ldr	r3, [pc, #28]	; (8007890 <vPortFree+0xc0>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3301      	adds	r3, #1
 8007876:	4a06      	ldr	r2, [pc, #24]	; (8007890 <vPortFree+0xc0>)
 8007878:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800787a:	f7fe fead 	bl	80065d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800787e:	bf00      	nop
 8007880:	3718      	adds	r7, #24
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	2001545c 	.word	0x2001545c
 800788c:	2001544c 	.word	0x2001544c
 8007890:	20015458 	.word	0x20015458

08007894 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800789a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800789e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80078a0:	4b27      	ldr	r3, [pc, #156]	; (8007940 <prvHeapInit+0xac>)
 80078a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f003 0307 	and.w	r3, r3, #7
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00c      	beq.n	80078c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	3307      	adds	r3, #7
 80078b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f023 0307 	bic.w	r3, r3, #7
 80078ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	4a1f      	ldr	r2, [pc, #124]	; (8007940 <prvHeapInit+0xac>)
 80078c4:	4413      	add	r3, r2
 80078c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80078cc:	4a1d      	ldr	r2, [pc, #116]	; (8007944 <prvHeapInit+0xb0>)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80078d2:	4b1c      	ldr	r3, [pc, #112]	; (8007944 <prvHeapInit+0xb0>)
 80078d4:	2200      	movs	r2, #0
 80078d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	4413      	add	r3, r2
 80078de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80078e0:	2208      	movs	r2, #8
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	1a9b      	subs	r3, r3, r2
 80078e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f023 0307 	bic.w	r3, r3, #7
 80078ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	4a15      	ldr	r2, [pc, #84]	; (8007948 <prvHeapInit+0xb4>)
 80078f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80078f6:	4b14      	ldr	r3, [pc, #80]	; (8007948 <prvHeapInit+0xb4>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2200      	movs	r2, #0
 80078fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80078fe:	4b12      	ldr	r3, [pc, #72]	; (8007948 <prvHeapInit+0xb4>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2200      	movs	r2, #0
 8007904:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	1ad2      	subs	r2, r2, r3
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007914:	4b0c      	ldr	r3, [pc, #48]	; (8007948 <prvHeapInit+0xb4>)
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	4a0a      	ldr	r2, [pc, #40]	; (800794c <prvHeapInit+0xb8>)
 8007922:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	4a09      	ldr	r2, [pc, #36]	; (8007950 <prvHeapInit+0xbc>)
 800792a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800792c:	4b09      	ldr	r3, [pc, #36]	; (8007954 <prvHeapInit+0xc0>)
 800792e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007932:	601a      	str	r2, [r3, #0]
}
 8007934:	bf00      	nop
 8007936:	3714      	adds	r7, #20
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	20005440 	.word	0x20005440
 8007944:	20015440 	.word	0x20015440
 8007948:	20015448 	.word	0x20015448
 800794c:	20015450 	.word	0x20015450
 8007950:	2001544c 	.word	0x2001544c
 8007954:	2001545c 	.word	0x2001545c

08007958 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007960:	4b28      	ldr	r3, [pc, #160]	; (8007a04 <prvInsertBlockIntoFreeList+0xac>)
 8007962:	60fb      	str	r3, [r7, #12]
 8007964:	e002      	b.n	800796c <prvInsertBlockIntoFreeList+0x14>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	60fb      	str	r3, [r7, #12]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	429a      	cmp	r2, r3
 8007974:	d8f7      	bhi.n	8007966 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	4413      	add	r3, r2
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	429a      	cmp	r2, r3
 8007986:	d108      	bne.n	800799a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	441a      	add	r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	441a      	add	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d118      	bne.n	80079e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	4b15      	ldr	r3, [pc, #84]	; (8007a08 <prvInsertBlockIntoFreeList+0xb0>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d00d      	beq.n	80079d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685a      	ldr	r2, [r3, #4]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	441a      	add	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	601a      	str	r2, [r3, #0]
 80079d4:	e008      	b.n	80079e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80079d6:	4b0c      	ldr	r3, [pc, #48]	; (8007a08 <prvInsertBlockIntoFreeList+0xb0>)
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	601a      	str	r2, [r3, #0]
 80079de:	e003      	b.n	80079e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d002      	beq.n	80079f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079f6:	bf00      	nop
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	20015440 	.word	0x20015440
 8007a08:	20015448 	.word	0x20015448

08007a0c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8007a16:	f007 fae1 	bl	800efdc <sys_timeouts_sleeptime>
 8007a1a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a22:	d10b      	bne.n	8007a3c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8007a24:	4813      	ldr	r0, [pc, #76]	; (8007a74 <tcpip_timeouts_mbox_fetch+0x68>)
 8007a26:	f00c fa0c 	bl	8013e42 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f00c f97e 	bl	8013d30 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8007a34:	480f      	ldr	r0, [pc, #60]	; (8007a74 <tcpip_timeouts_mbox_fetch+0x68>)
 8007a36:	f00c f9f5 	bl	8013e24 <sys_mutex_lock>
    return;
 8007a3a:	e018      	b.n	8007a6e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d102      	bne.n	8007a48 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8007a42:	f007 fa91 	bl	800ef68 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8007a46:	e7e6      	b.n	8007a16 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8007a48:	480a      	ldr	r0, [pc, #40]	; (8007a74 <tcpip_timeouts_mbox_fetch+0x68>)
 8007a4a:	f00c f9fa 	bl	8013e42 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	6839      	ldr	r1, [r7, #0]
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f00c f96c 	bl	8013d30 <sys_arch_mbox_fetch>
 8007a58:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8007a5a:	4806      	ldr	r0, [pc, #24]	; (8007a74 <tcpip_timeouts_mbox_fetch+0x68>)
 8007a5c:	f00c f9e2 	bl	8013e24 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a66:	d102      	bne.n	8007a6e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8007a68:	f007 fa7e 	bl	800ef68 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8007a6c:	e7d3      	b.n	8007a16 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	2001546c 	.word	0x2001546c

08007a78 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8007a80:	4810      	ldr	r0, [pc, #64]	; (8007ac4 <tcpip_thread+0x4c>)
 8007a82:	f00c f9cf 	bl	8013e24 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8007a86:	4b10      	ldr	r3, [pc, #64]	; (8007ac8 <tcpip_thread+0x50>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d005      	beq.n	8007a9a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8007a8e:	4b0e      	ldr	r3, [pc, #56]	; (8007ac8 <tcpip_thread+0x50>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a0e      	ldr	r2, [pc, #56]	; (8007acc <tcpip_thread+0x54>)
 8007a94:	6812      	ldr	r2, [r2, #0]
 8007a96:	4610      	mov	r0, r2
 8007a98:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8007a9a:	f107 030c 	add.w	r3, r7, #12
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	480b      	ldr	r0, [pc, #44]	; (8007ad0 <tcpip_thread+0x58>)
 8007aa2:	f7ff ffb3 	bl	8007a0c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d106      	bne.n	8007aba <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007aac:	4b09      	ldr	r3, [pc, #36]	; (8007ad4 <tcpip_thread+0x5c>)
 8007aae:	2291      	movs	r2, #145	; 0x91
 8007ab0:	4909      	ldr	r1, [pc, #36]	; (8007ad8 <tcpip_thread+0x60>)
 8007ab2:	480a      	ldr	r0, [pc, #40]	; (8007adc <tcpip_thread+0x64>)
 8007ab4:	f00c fbee 	bl	8014294 <iprintf>
      continue;
 8007ab8:	e003      	b.n	8007ac2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 f80f 	bl	8007ae0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8007ac2:	e7ea      	b.n	8007a9a <tcpip_thread+0x22>
 8007ac4:	2001546c 	.word	0x2001546c
 8007ac8:	20015460 	.word	0x20015460
 8007acc:	20015464 	.word	0x20015464
 8007ad0:	20015468 	.word	0x20015468
 8007ad4:	080151d0 	.word	0x080151d0
 8007ad8:	08015200 	.word	0x08015200
 8007adc:	08015220 	.word	0x08015220

08007ae0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d026      	beq.n	8007b3e <tcpip_thread_handle_msg+0x5e>
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	dc2b      	bgt.n	8007b4c <tcpip_thread_handle_msg+0x6c>
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d002      	beq.n	8007afe <tcpip_thread_handle_msg+0x1e>
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d015      	beq.n	8007b28 <tcpip_thread_handle_msg+0x48>
 8007afc:	e026      	b.n	8007b4c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	6850      	ldr	r0, [r2, #4]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	6892      	ldr	r2, [r2, #8]
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	4798      	blx	r3
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d004      	beq.n	8007b1e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f001 fd17 	bl	800954c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8007b1e:	6879      	ldr	r1, [r7, #4]
 8007b20:	2009      	movs	r0, #9
 8007b22:	f000 fe63 	bl	80087ec <memp_free>
      break;
 8007b26:	e018      	b.n	8007b5a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	6892      	ldr	r2, [r2, #8]
 8007b30:	4610      	mov	r0, r2
 8007b32:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8007b34:	6879      	ldr	r1, [r7, #4]
 8007b36:	2008      	movs	r0, #8
 8007b38:	f000 fe58 	bl	80087ec <memp_free>
      break;
 8007b3c:	e00d      	b.n	8007b5a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	6892      	ldr	r2, [r2, #8]
 8007b46:	4610      	mov	r0, r2
 8007b48:	4798      	blx	r3
      break;
 8007b4a:	e006      	b.n	8007b5a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007b4c:	4b05      	ldr	r3, [pc, #20]	; (8007b64 <tcpip_thread_handle_msg+0x84>)
 8007b4e:	22cf      	movs	r2, #207	; 0xcf
 8007b50:	4905      	ldr	r1, [pc, #20]	; (8007b68 <tcpip_thread_handle_msg+0x88>)
 8007b52:	4806      	ldr	r0, [pc, #24]	; (8007b6c <tcpip_thread_handle_msg+0x8c>)
 8007b54:	f00c fb9e 	bl	8014294 <iprintf>
      break;
 8007b58:	bf00      	nop
  }
}
 8007b5a:	bf00      	nop
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	080151d0 	.word	0x080151d0
 8007b68:	08015200 	.word	0x08015200
 8007b6c:	08015220 	.word	0x08015220

08007b70 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8007b7c:	481a      	ldr	r0, [pc, #104]	; (8007be8 <tcpip_inpkt+0x78>)
 8007b7e:	f00c f916 	bl	8013dae <sys_mbox_valid>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d105      	bne.n	8007b94 <tcpip_inpkt+0x24>
 8007b88:	4b18      	ldr	r3, [pc, #96]	; (8007bec <tcpip_inpkt+0x7c>)
 8007b8a:	22fc      	movs	r2, #252	; 0xfc
 8007b8c:	4918      	ldr	r1, [pc, #96]	; (8007bf0 <tcpip_inpkt+0x80>)
 8007b8e:	4819      	ldr	r0, [pc, #100]	; (8007bf4 <tcpip_inpkt+0x84>)
 8007b90:	f00c fb80 	bl	8014294 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8007b94:	2009      	movs	r0, #9
 8007b96:	f000 fdb3 	bl	8008700 <memp_malloc>
 8007b9a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d102      	bne.n	8007ba8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8007ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba6:	e01a      	b.n	8007bde <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	2200      	movs	r2, #0
 8007bac:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007bc0:	6979      	ldr	r1, [r7, #20]
 8007bc2:	4809      	ldr	r0, [pc, #36]	; (8007be8 <tcpip_inpkt+0x78>)
 8007bc4:	f00c f89a 	bl	8013cfc <sys_mbox_trypost>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d006      	beq.n	8007bdc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8007bce:	6979      	ldr	r1, [r7, #20]
 8007bd0:	2009      	movs	r0, #9
 8007bd2:	f000 fe0b 	bl	80087ec <memp_free>
    return ERR_MEM;
 8007bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bda:	e000      	b.n	8007bde <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8007bdc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3718      	adds	r7, #24
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	20015468 	.word	0x20015468
 8007bec:	080151d0 	.word	0x080151d0
 8007bf0:	08015248 	.word	0x08015248
 8007bf4:	08015220 	.word	0x08015220

08007bf8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007c08:	f003 0318 	and.w	r3, r3, #24
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d006      	beq.n	8007c1e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8007c10:	4a08      	ldr	r2, [pc, #32]	; (8007c34 <tcpip_input+0x3c>)
 8007c12:	6839      	ldr	r1, [r7, #0]
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f7ff ffab 	bl	8007b70 <tcpip_inpkt>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	e005      	b.n	8007c2a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8007c1e:	4a06      	ldr	r2, [pc, #24]	; (8007c38 <tcpip_input+0x40>)
 8007c20:	6839      	ldr	r1, [r7, #0]
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f7ff ffa4 	bl	8007b70 <tcpip_inpkt>
 8007c28:	4603      	mov	r3, r0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	08013b0d 	.word	0x08013b0d
 8007c38:	080129d9 	.word	0x080129d9

08007c3c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8007c46:	4819      	ldr	r0, [pc, #100]	; (8007cac <tcpip_try_callback+0x70>)
 8007c48:	f00c f8b1 	bl	8013dae <sys_mbox_valid>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d106      	bne.n	8007c60 <tcpip_try_callback+0x24>
 8007c52:	4b17      	ldr	r3, [pc, #92]	; (8007cb0 <tcpip_try_callback+0x74>)
 8007c54:	f240 125d 	movw	r2, #349	; 0x15d
 8007c58:	4916      	ldr	r1, [pc, #88]	; (8007cb4 <tcpip_try_callback+0x78>)
 8007c5a:	4817      	ldr	r0, [pc, #92]	; (8007cb8 <tcpip_try_callback+0x7c>)
 8007c5c:	f00c fb1a 	bl	8014294 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8007c60:	2008      	movs	r0, #8
 8007c62:	f000 fd4d 	bl	8008700 <memp_malloc>
 8007c66:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d102      	bne.n	8007c74 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8007c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c72:	e017      	b.n	8007ca4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2201      	movs	r2, #1
 8007c78:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007c86:	68f9      	ldr	r1, [r7, #12]
 8007c88:	4808      	ldr	r0, [pc, #32]	; (8007cac <tcpip_try_callback+0x70>)
 8007c8a:	f00c f837 	bl	8013cfc <sys_mbox_trypost>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d006      	beq.n	8007ca2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8007c94:	68f9      	ldr	r1, [r7, #12]
 8007c96:	2008      	movs	r0, #8
 8007c98:	f000 fda8 	bl	80087ec <memp_free>
    return ERR_MEM;
 8007c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007ca0:	e000      	b.n	8007ca4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	20015468 	.word	0x20015468
 8007cb0:	080151d0 	.word	0x080151d0
 8007cb4:	08015248 	.word	0x08015248
 8007cb8:	08015220 	.word	0x08015220

08007cbc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af02      	add	r7, sp, #8
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  lwip_init();
 8007cc6:	f000 f871 	bl	8007dac <lwip_init>

  tcpip_init_done = initfunc;
 8007cca:	4a17      	ldr	r2, [pc, #92]	; (8007d28 <tcpip_init+0x6c>)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8007cd0:	4a16      	ldr	r2, [pc, #88]	; (8007d2c <tcpip_init+0x70>)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8007cd6:	2106      	movs	r1, #6
 8007cd8:	4815      	ldr	r0, [pc, #84]	; (8007d30 <tcpip_init+0x74>)
 8007cda:	f00b ffed 	bl	8013cb8 <sys_mbox_new>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d006      	beq.n	8007cf2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8007ce4:	4b13      	ldr	r3, [pc, #76]	; (8007d34 <tcpip_init+0x78>)
 8007ce6:	f240 2261 	movw	r2, #609	; 0x261
 8007cea:	4913      	ldr	r1, [pc, #76]	; (8007d38 <tcpip_init+0x7c>)
 8007cec:	4813      	ldr	r0, [pc, #76]	; (8007d3c <tcpip_init+0x80>)
 8007cee:	f00c fad1 	bl	8014294 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8007cf2:	4813      	ldr	r0, [pc, #76]	; (8007d40 <tcpip_init+0x84>)
 8007cf4:	f00c f87a 	bl	8013dec <sys_mutex_new>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d006      	beq.n	8007d0c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8007cfe:	4b0d      	ldr	r3, [pc, #52]	; (8007d34 <tcpip_init+0x78>)
 8007d00:	f240 2265 	movw	r2, #613	; 0x265
 8007d04:	490f      	ldr	r1, [pc, #60]	; (8007d44 <tcpip_init+0x88>)
 8007d06:	480d      	ldr	r0, [pc, #52]	; (8007d3c <tcpip_init+0x80>)
 8007d08:	f00c fac4 	bl	8014294 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d14:	2200      	movs	r2, #0
 8007d16:	490c      	ldr	r1, [pc, #48]	; (8007d48 <tcpip_init+0x8c>)
 8007d18:	480c      	ldr	r0, [pc, #48]	; (8007d4c <tcpip_init+0x90>)
 8007d1a:	f00c f89f 	bl	8013e5c <sys_thread_new>
}
 8007d1e:	bf00      	nop
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	20015460 	.word	0x20015460
 8007d2c:	20015464 	.word	0x20015464
 8007d30:	20015468 	.word	0x20015468
 8007d34:	080151d0 	.word	0x080151d0
 8007d38:	08015258 	.word	0x08015258
 8007d3c:	08015220 	.word	0x08015220
 8007d40:	2001546c 	.word	0x2001546c
 8007d44:	0801527c 	.word	0x0801527c
 8007d48:	08007a79 	.word	0x08007a79
 8007d4c:	080152a0 	.word	0x080152a0

08007d50 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	4603      	mov	r3, r0
 8007d58:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8007d5a:	88fb      	ldrh	r3, [r7, #6]
 8007d5c:	021b      	lsls	r3, r3, #8
 8007d5e:	b21a      	sxth	r2, r3
 8007d60:	88fb      	ldrh	r3, [r7, #6]
 8007d62:	0a1b      	lsrs	r3, r3, #8
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	b21b      	sxth	r3, r3
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	b21b      	sxth	r3, r3
 8007d6c:	b29b      	uxth	r3, r3
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b083      	sub	sp, #12
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	061a      	lsls	r2, r3, #24
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	021b      	lsls	r3, r3, #8
 8007d8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d8e:	431a      	orrs	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	0a1b      	lsrs	r3, r3, #8
 8007d94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d98:	431a      	orrs	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	0e1b      	lsrs	r3, r3, #24
 8007d9e:	4313      	orrs	r3, r2
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007db2:	2300      	movs	r3, #0
 8007db4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8007db6:	f00c f80b 	bl	8013dd0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8007dba:	f000 f8d5 	bl	8007f68 <mem_init>
  memp_init();
 8007dbe:	f000 fc31 	bl	8008624 <memp_init>
  pbuf_init();
  netif_init();
 8007dc2:	f000 fd3d 	bl	8008840 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007dc6:	f007 f941 	bl	800f04c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007dca:	f001 fe69 	bl	8009aa0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8007dce:	f007 f883 	bl	800eed8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007dd2:	bf00      	nop
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
	...

08007ddc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	4603      	mov	r3, r0
 8007de4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8007de6:	4b05      	ldr	r3, [pc, #20]	; (8007dfc <ptr_to_mem+0x20>)
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	88fb      	ldrh	r3, [r7, #6]
 8007dec:	4413      	add	r3, r2
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	20015adc 	.word	0x20015adc

08007e00 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007e08:	4b05      	ldr	r3, [pc, #20]	; (8007e20 <mem_to_ptr+0x20>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	b29b      	uxth	r3, r3
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	20015adc 	.word	0x20015adc

08007e24 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007e24:	b590      	push	{r4, r7, lr}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007e2c:	4b45      	ldr	r3, [pc, #276]	; (8007f44 <plug_holes+0x120>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d206      	bcs.n	8007e44 <plug_holes+0x20>
 8007e36:	4b44      	ldr	r3, [pc, #272]	; (8007f48 <plug_holes+0x124>)
 8007e38:	f240 12df 	movw	r2, #479	; 0x1df
 8007e3c:	4943      	ldr	r1, [pc, #268]	; (8007f4c <plug_holes+0x128>)
 8007e3e:	4844      	ldr	r0, [pc, #272]	; (8007f50 <plug_holes+0x12c>)
 8007e40:	f00c fa28 	bl	8014294 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007e44:	4b43      	ldr	r3, [pc, #268]	; (8007f54 <plug_holes+0x130>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d306      	bcc.n	8007e5c <plug_holes+0x38>
 8007e4e:	4b3e      	ldr	r3, [pc, #248]	; (8007f48 <plug_holes+0x124>)
 8007e50:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007e54:	4940      	ldr	r1, [pc, #256]	; (8007f58 <plug_holes+0x134>)
 8007e56:	483e      	ldr	r0, [pc, #248]	; (8007f50 <plug_holes+0x12c>)
 8007e58:	f00c fa1c 	bl	8014294 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	791b      	ldrb	r3, [r3, #4]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d006      	beq.n	8007e72 <plug_holes+0x4e>
 8007e64:	4b38      	ldr	r3, [pc, #224]	; (8007f48 <plug_holes+0x124>)
 8007e66:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007e6a:	493c      	ldr	r1, [pc, #240]	; (8007f5c <plug_holes+0x138>)
 8007e6c:	4838      	ldr	r0, [pc, #224]	; (8007f50 <plug_holes+0x12c>)
 8007e6e:	f00c fa11 	bl	8014294 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	881b      	ldrh	r3, [r3, #0]
 8007e76:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007e7a:	d906      	bls.n	8007e8a <plug_holes+0x66>
 8007e7c:	4b32      	ldr	r3, [pc, #200]	; (8007f48 <plug_holes+0x124>)
 8007e7e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007e82:	4937      	ldr	r1, [pc, #220]	; (8007f60 <plug_holes+0x13c>)
 8007e84:	4832      	ldr	r0, [pc, #200]	; (8007f50 <plug_holes+0x12c>)
 8007e86:	f00c fa05 	bl	8014294 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7ff ffa4 	bl	8007ddc <ptr_to_mem>
 8007e94:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d024      	beq.n	8007ee8 <plug_holes+0xc4>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	791b      	ldrb	r3, [r3, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d120      	bne.n	8007ee8 <plug_holes+0xc4>
 8007ea6:	4b2b      	ldr	r3, [pc, #172]	; (8007f54 <plug_holes+0x130>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d01b      	beq.n	8007ee8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007eb0:	4b2c      	ldr	r3, [pc, #176]	; (8007f64 <plug_holes+0x140>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d102      	bne.n	8007ec0 <plug_holes+0x9c>
      lfree = mem;
 8007eba:	4a2a      	ldr	r2, [pc, #168]	; (8007f64 <plug_holes+0x140>)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	881a      	ldrh	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	881b      	ldrh	r3, [r3, #0]
 8007ecc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007ed0:	d00a      	beq.n	8007ee8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	881b      	ldrh	r3, [r3, #0]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7ff ff80 	bl	8007ddc <ptr_to_mem>
 8007edc:	4604      	mov	r4, r0
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f7ff ff8e 	bl	8007e00 <mem_to_ptr>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	885b      	ldrh	r3, [r3, #2]
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7ff ff75 	bl	8007ddc <ptr_to_mem>
 8007ef2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007ef4:	68ba      	ldr	r2, [r7, #8]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d01f      	beq.n	8007f3c <plug_holes+0x118>
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	791b      	ldrb	r3, [r3, #4]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d11b      	bne.n	8007f3c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007f04:	4b17      	ldr	r3, [pc, #92]	; (8007f64 <plug_holes+0x140>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d102      	bne.n	8007f14 <plug_holes+0xf0>
      lfree = pmem;
 8007f0e:	4a15      	ldr	r2, [pc, #84]	; (8007f64 <plug_holes+0x140>)
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	881a      	ldrh	r2, [r3, #0]
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007f24:	d00a      	beq.n	8007f3c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	881b      	ldrh	r3, [r3, #0]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7ff ff56 	bl	8007ddc <ptr_to_mem>
 8007f30:	4604      	mov	r4, r0
 8007f32:	68b8      	ldr	r0, [r7, #8]
 8007f34:	f7ff ff64 	bl	8007e00 <mem_to_ptr>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007f3c:	bf00      	nop
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd90      	pop	{r4, r7, pc}
 8007f44:	20015adc 	.word	0x20015adc
 8007f48:	080152b0 	.word	0x080152b0
 8007f4c:	080152e0 	.word	0x080152e0
 8007f50:	080152f8 	.word	0x080152f8
 8007f54:	20015ae0 	.word	0x20015ae0
 8007f58:	08015320 	.word	0x08015320
 8007f5c:	0801533c 	.word	0x0801533c
 8007f60:	08015358 	.word	0x08015358
 8007f64:	20015ae8 	.word	0x20015ae8

08007f68 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007f6e:	4b1f      	ldr	r3, [pc, #124]	; (8007fec <mem_init+0x84>)
 8007f70:	3303      	adds	r3, #3
 8007f72:	f023 0303 	bic.w	r3, r3, #3
 8007f76:	461a      	mov	r2, r3
 8007f78:	4b1d      	ldr	r3, [pc, #116]	; (8007ff0 <mem_init+0x88>)
 8007f7a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007f7c:	4b1c      	ldr	r3, [pc, #112]	; (8007ff0 <mem_init+0x88>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007f88:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007f96:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8007f9a:	f7ff ff1f 	bl	8007ddc <ptr_to_mem>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	4a14      	ldr	r2, [pc, #80]	; (8007ff4 <mem_init+0x8c>)
 8007fa2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007fa4:	4b13      	ldr	r3, [pc, #76]	; (8007ff4 <mem_init+0x8c>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007fac:	4b11      	ldr	r3, [pc, #68]	; (8007ff4 <mem_init+0x8c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007fb4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007fb6:	4b0f      	ldr	r3, [pc, #60]	; (8007ff4 <mem_init+0x8c>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007fbe:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007fc0:	4b0b      	ldr	r3, [pc, #44]	; (8007ff0 <mem_init+0x88>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a0c      	ldr	r2, [pc, #48]	; (8007ff8 <mem_init+0x90>)
 8007fc6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8007fc8:	480c      	ldr	r0, [pc, #48]	; (8007ffc <mem_init+0x94>)
 8007fca:	f00b ff0f 	bl	8013dec <sys_mutex_new>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d006      	beq.n	8007fe2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8007fd4:	4b0a      	ldr	r3, [pc, #40]	; (8008000 <mem_init+0x98>)
 8007fd6:	f240 221f 	movw	r2, #543	; 0x21f
 8007fda:	490a      	ldr	r1, [pc, #40]	; (8008004 <mem_init+0x9c>)
 8007fdc:	480a      	ldr	r0, [pc, #40]	; (8008008 <mem_init+0xa0>)
 8007fde:	f00c f959 	bl	8014294 <iprintf>
  }
}
 8007fe2:	bf00      	nop
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	20015488 	.word	0x20015488
 8007ff0:	20015adc 	.word	0x20015adc
 8007ff4:	20015ae0 	.word	0x20015ae0
 8007ff8:	20015ae8 	.word	0x20015ae8
 8007ffc:	20015ae4 	.word	0x20015ae4
 8008000:	080152b0 	.word	0x080152b0
 8008004:	08015384 	.word	0x08015384
 8008008:	080152f8 	.word	0x080152f8

0800800c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f7ff fef3 	bl	8007e00 <mem_to_ptr>
 800801a:	4603      	mov	r3, r0
 800801c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	881b      	ldrh	r3, [r3, #0]
 8008022:	4618      	mov	r0, r3
 8008024:	f7ff feda 	bl	8007ddc <ptr_to_mem>
 8008028:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	885b      	ldrh	r3, [r3, #2]
 800802e:	4618      	mov	r0, r3
 8008030:	f7ff fed4 	bl	8007ddc <ptr_to_mem>
 8008034:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800803e:	d818      	bhi.n	8008072 <mem_link_valid+0x66>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	885b      	ldrh	r3, [r3, #2]
 8008044:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008048:	d813      	bhi.n	8008072 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800804e:	8afa      	ldrh	r2, [r7, #22]
 8008050:	429a      	cmp	r2, r3
 8008052:	d004      	beq.n	800805e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	881b      	ldrh	r3, [r3, #0]
 8008058:	8afa      	ldrh	r2, [r7, #22]
 800805a:	429a      	cmp	r2, r3
 800805c:	d109      	bne.n	8008072 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800805e:	4b08      	ldr	r3, [pc, #32]	; (8008080 <mem_link_valid+0x74>)
 8008060:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	429a      	cmp	r2, r3
 8008066:	d006      	beq.n	8008076 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	885b      	ldrh	r3, [r3, #2]
 800806c:	8afa      	ldrh	r2, [r7, #22]
 800806e:	429a      	cmp	r2, r3
 8008070:	d001      	beq.n	8008076 <mem_link_valid+0x6a>
    return 0;
 8008072:	2300      	movs	r3, #0
 8008074:	e000      	b.n	8008078 <mem_link_valid+0x6c>
  }
  return 1;
 8008076:	2301      	movs	r3, #1
}
 8008078:	4618      	mov	r0, r3
 800807a:	3718      	adds	r7, #24
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	20015ae0 	.word	0x20015ae0

08008084 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b088      	sub	sp, #32
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d070      	beq.n	8008174 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f003 0303 	and.w	r3, r3, #3
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00d      	beq.n	80080b8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800809c:	4b37      	ldr	r3, [pc, #220]	; (800817c <mem_free+0xf8>)
 800809e:	f240 2273 	movw	r2, #627	; 0x273
 80080a2:	4937      	ldr	r1, [pc, #220]	; (8008180 <mem_free+0xfc>)
 80080a4:	4837      	ldr	r0, [pc, #220]	; (8008184 <mem_free+0x100>)
 80080a6:	f00c f8f5 	bl	8014294 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80080aa:	f00b fefd 	bl	8013ea8 <sys_arch_protect>
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f00b ff07 	bl	8013ec4 <sys_arch_unprotect>
    return;
 80080b6:	e05e      	b.n	8008176 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	3b08      	subs	r3, #8
 80080bc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80080be:	4b32      	ldr	r3, [pc, #200]	; (8008188 <mem_free+0x104>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	69fa      	ldr	r2, [r7, #28]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d306      	bcc.n	80080d6 <mem_free+0x52>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f103 020c 	add.w	r2, r3, #12
 80080ce:	4b2f      	ldr	r3, [pc, #188]	; (800818c <mem_free+0x108>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d90d      	bls.n	80080f2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80080d6:	4b29      	ldr	r3, [pc, #164]	; (800817c <mem_free+0xf8>)
 80080d8:	f240 227f 	movw	r2, #639	; 0x27f
 80080dc:	492c      	ldr	r1, [pc, #176]	; (8008190 <mem_free+0x10c>)
 80080de:	4829      	ldr	r0, [pc, #164]	; (8008184 <mem_free+0x100>)
 80080e0:	f00c f8d8 	bl	8014294 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80080e4:	f00b fee0 	bl	8013ea8 <sys_arch_protect>
 80080e8:	6138      	str	r0, [r7, #16]
 80080ea:	6938      	ldr	r0, [r7, #16]
 80080ec:	f00b feea 	bl	8013ec4 <sys_arch_unprotect>
    return;
 80080f0:	e041      	b.n	8008176 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80080f2:	4828      	ldr	r0, [pc, #160]	; (8008194 <mem_free+0x110>)
 80080f4:	f00b fe96 	bl	8013e24 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	791b      	ldrb	r3, [r3, #4]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d110      	bne.n	8008122 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8008100:	4b1e      	ldr	r3, [pc, #120]	; (800817c <mem_free+0xf8>)
 8008102:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8008106:	4924      	ldr	r1, [pc, #144]	; (8008198 <mem_free+0x114>)
 8008108:	481e      	ldr	r0, [pc, #120]	; (8008184 <mem_free+0x100>)
 800810a:	f00c f8c3 	bl	8014294 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800810e:	4821      	ldr	r0, [pc, #132]	; (8008194 <mem_free+0x110>)
 8008110:	f00b fe97 	bl	8013e42 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008114:	f00b fec8 	bl	8013ea8 <sys_arch_protect>
 8008118:	6178      	str	r0, [r7, #20]
 800811a:	6978      	ldr	r0, [r7, #20]
 800811c:	f00b fed2 	bl	8013ec4 <sys_arch_unprotect>
    return;
 8008120:	e029      	b.n	8008176 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8008122:	69f8      	ldr	r0, [r7, #28]
 8008124:	f7ff ff72 	bl	800800c <mem_link_valid>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d110      	bne.n	8008150 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800812e:	4b13      	ldr	r3, [pc, #76]	; (800817c <mem_free+0xf8>)
 8008130:	f240 2295 	movw	r2, #661	; 0x295
 8008134:	4919      	ldr	r1, [pc, #100]	; (800819c <mem_free+0x118>)
 8008136:	4813      	ldr	r0, [pc, #76]	; (8008184 <mem_free+0x100>)
 8008138:	f00c f8ac 	bl	8014294 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800813c:	4815      	ldr	r0, [pc, #84]	; (8008194 <mem_free+0x110>)
 800813e:	f00b fe80 	bl	8013e42 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008142:	f00b feb1 	bl	8013ea8 <sys_arch_protect>
 8008146:	61b8      	str	r0, [r7, #24]
 8008148:	69b8      	ldr	r0, [r7, #24]
 800814a:	f00b febb 	bl	8013ec4 <sys_arch_unprotect>
    return;
 800814e:	e012      	b.n	8008176 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	2200      	movs	r2, #0
 8008154:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008156:	4b12      	ldr	r3, [pc, #72]	; (80081a0 <mem_free+0x11c>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	69fa      	ldr	r2, [r7, #28]
 800815c:	429a      	cmp	r2, r3
 800815e:	d202      	bcs.n	8008166 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8008160:	4a0f      	ldr	r2, [pc, #60]	; (80081a0 <mem_free+0x11c>)
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008166:	69f8      	ldr	r0, [r7, #28]
 8008168:	f7ff fe5c 	bl	8007e24 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800816c:	4809      	ldr	r0, [pc, #36]	; (8008194 <mem_free+0x110>)
 800816e:	f00b fe68 	bl	8013e42 <sys_mutex_unlock>
 8008172:	e000      	b.n	8008176 <mem_free+0xf2>
    return;
 8008174:	bf00      	nop
}
 8008176:	3720      	adds	r7, #32
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	080152b0 	.word	0x080152b0
 8008180:	080153a0 	.word	0x080153a0
 8008184:	080152f8 	.word	0x080152f8
 8008188:	20015adc 	.word	0x20015adc
 800818c:	20015ae0 	.word	0x20015ae0
 8008190:	080153c4 	.word	0x080153c4
 8008194:	20015ae4 	.word	0x20015ae4
 8008198:	080153e0 	.word	0x080153e0
 800819c:	08015408 	.word	0x08015408
 80081a0:	20015ae8 	.word	0x20015ae8

080081a4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b088      	sub	sp, #32
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	460b      	mov	r3, r1
 80081ae:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80081b0:	887b      	ldrh	r3, [r7, #2]
 80081b2:	3303      	adds	r3, #3
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	f023 0303 	bic.w	r3, r3, #3
 80081ba:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80081bc:	8bfb      	ldrh	r3, [r7, #30]
 80081be:	2b0b      	cmp	r3, #11
 80081c0:	d801      	bhi.n	80081c6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80081c2:	230c      	movs	r3, #12
 80081c4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80081c6:	8bfb      	ldrh	r3, [r7, #30]
 80081c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80081cc:	d803      	bhi.n	80081d6 <mem_trim+0x32>
 80081ce:	8bfa      	ldrh	r2, [r7, #30]
 80081d0:	887b      	ldrh	r3, [r7, #2]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d201      	bcs.n	80081da <mem_trim+0x36>
    return NULL;
 80081d6:	2300      	movs	r3, #0
 80081d8:	e0d8      	b.n	800838c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80081da:	4b6e      	ldr	r3, [pc, #440]	; (8008394 <mem_trim+0x1f0>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d304      	bcc.n	80081ee <mem_trim+0x4a>
 80081e4:	4b6c      	ldr	r3, [pc, #432]	; (8008398 <mem_trim+0x1f4>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d306      	bcc.n	80081fc <mem_trim+0x58>
 80081ee:	4b6b      	ldr	r3, [pc, #428]	; (800839c <mem_trim+0x1f8>)
 80081f0:	f240 22d1 	movw	r2, #721	; 0x2d1
 80081f4:	496a      	ldr	r1, [pc, #424]	; (80083a0 <mem_trim+0x1fc>)
 80081f6:	486b      	ldr	r0, [pc, #428]	; (80083a4 <mem_trim+0x200>)
 80081f8:	f00c f84c 	bl	8014294 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80081fc:	4b65      	ldr	r3, [pc, #404]	; (8008394 <mem_trim+0x1f0>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	429a      	cmp	r2, r3
 8008204:	d304      	bcc.n	8008210 <mem_trim+0x6c>
 8008206:	4b64      	ldr	r3, [pc, #400]	; (8008398 <mem_trim+0x1f4>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	429a      	cmp	r2, r3
 800820e:	d307      	bcc.n	8008220 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008210:	f00b fe4a 	bl	8013ea8 <sys_arch_protect>
 8008214:	60b8      	str	r0, [r7, #8]
 8008216:	68b8      	ldr	r0, [r7, #8]
 8008218:	f00b fe54 	bl	8013ec4 <sys_arch_unprotect>
    return rmem;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	e0b5      	b.n	800838c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	3b08      	subs	r3, #8
 8008224:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8008226:	69b8      	ldr	r0, [r7, #24]
 8008228:	f7ff fdea 	bl	8007e00 <mem_to_ptr>
 800822c:	4603      	mov	r3, r0
 800822e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	881a      	ldrh	r2, [r3, #0]
 8008234:	8afb      	ldrh	r3, [r7, #22]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	b29b      	uxth	r3, r3
 800823a:	3b08      	subs	r3, #8
 800823c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800823e:	8bfa      	ldrh	r2, [r7, #30]
 8008240:	8abb      	ldrh	r3, [r7, #20]
 8008242:	429a      	cmp	r2, r3
 8008244:	d906      	bls.n	8008254 <mem_trim+0xb0>
 8008246:	4b55      	ldr	r3, [pc, #340]	; (800839c <mem_trim+0x1f8>)
 8008248:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800824c:	4956      	ldr	r1, [pc, #344]	; (80083a8 <mem_trim+0x204>)
 800824e:	4855      	ldr	r0, [pc, #340]	; (80083a4 <mem_trim+0x200>)
 8008250:	f00c f820 	bl	8014294 <iprintf>
  if (newsize > size) {
 8008254:	8bfa      	ldrh	r2, [r7, #30]
 8008256:	8abb      	ldrh	r3, [r7, #20]
 8008258:	429a      	cmp	r2, r3
 800825a:	d901      	bls.n	8008260 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800825c:	2300      	movs	r3, #0
 800825e:	e095      	b.n	800838c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8008260:	8bfa      	ldrh	r2, [r7, #30]
 8008262:	8abb      	ldrh	r3, [r7, #20]
 8008264:	429a      	cmp	r2, r3
 8008266:	d101      	bne.n	800826c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	e08f      	b.n	800838c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800826c:	484f      	ldr	r0, [pc, #316]	; (80083ac <mem_trim+0x208>)
 800826e:	f00b fdd9 	bl	8013e24 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	881b      	ldrh	r3, [r3, #0]
 8008276:	4618      	mov	r0, r3
 8008278:	f7ff fdb0 	bl	8007ddc <ptr_to_mem>
 800827c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	791b      	ldrb	r3, [r3, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d13f      	bne.n	8008306 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	881b      	ldrh	r3, [r3, #0]
 800828a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800828e:	d106      	bne.n	800829e <mem_trim+0xfa>
 8008290:	4b42      	ldr	r3, [pc, #264]	; (800839c <mem_trim+0x1f8>)
 8008292:	f240 22f5 	movw	r2, #757	; 0x2f5
 8008296:	4946      	ldr	r1, [pc, #280]	; (80083b0 <mem_trim+0x20c>)
 8008298:	4842      	ldr	r0, [pc, #264]	; (80083a4 <mem_trim+0x200>)
 800829a:	f00b fffb 	bl	8014294 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	881b      	ldrh	r3, [r3, #0]
 80082a2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80082a4:	8afa      	ldrh	r2, [r7, #22]
 80082a6:	8bfb      	ldrh	r3, [r7, #30]
 80082a8:	4413      	add	r3, r2
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	3308      	adds	r3, #8
 80082ae:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80082b0:	4b40      	ldr	r3, [pc, #256]	; (80083b4 <mem_trim+0x210>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	693a      	ldr	r2, [r7, #16]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d106      	bne.n	80082c8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80082ba:	89fb      	ldrh	r3, [r7, #14]
 80082bc:	4618      	mov	r0, r3
 80082be:	f7ff fd8d 	bl	8007ddc <ptr_to_mem>
 80082c2:	4603      	mov	r3, r0
 80082c4:	4a3b      	ldr	r2, [pc, #236]	; (80083b4 <mem_trim+0x210>)
 80082c6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80082c8:	89fb      	ldrh	r3, [r7, #14]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7ff fd86 	bl	8007ddc <ptr_to_mem>
 80082d0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	2200      	movs	r2, #0
 80082d6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	89ba      	ldrh	r2, [r7, #12]
 80082dc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	8afa      	ldrh	r2, [r7, #22]
 80082e2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	89fa      	ldrh	r2, [r7, #14]
 80082e8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	881b      	ldrh	r3, [r3, #0]
 80082ee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80082f2:	d047      	beq.n	8008384 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	881b      	ldrh	r3, [r3, #0]
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7ff fd6f 	bl	8007ddc <ptr_to_mem>
 80082fe:	4602      	mov	r2, r0
 8008300:	89fb      	ldrh	r3, [r7, #14]
 8008302:	8053      	strh	r3, [r2, #2]
 8008304:	e03e      	b.n	8008384 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008306:	8bfb      	ldrh	r3, [r7, #30]
 8008308:	f103 0214 	add.w	r2, r3, #20
 800830c:	8abb      	ldrh	r3, [r7, #20]
 800830e:	429a      	cmp	r2, r3
 8008310:	d838      	bhi.n	8008384 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008312:	8afa      	ldrh	r2, [r7, #22]
 8008314:	8bfb      	ldrh	r3, [r7, #30]
 8008316:	4413      	add	r3, r2
 8008318:	b29b      	uxth	r3, r3
 800831a:	3308      	adds	r3, #8
 800831c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	881b      	ldrh	r3, [r3, #0]
 8008322:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008326:	d106      	bne.n	8008336 <mem_trim+0x192>
 8008328:	4b1c      	ldr	r3, [pc, #112]	; (800839c <mem_trim+0x1f8>)
 800832a:	f240 3216 	movw	r2, #790	; 0x316
 800832e:	4920      	ldr	r1, [pc, #128]	; (80083b0 <mem_trim+0x20c>)
 8008330:	481c      	ldr	r0, [pc, #112]	; (80083a4 <mem_trim+0x200>)
 8008332:	f00b ffaf 	bl	8014294 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008336:	89fb      	ldrh	r3, [r7, #14]
 8008338:	4618      	mov	r0, r3
 800833a:	f7ff fd4f 	bl	8007ddc <ptr_to_mem>
 800833e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8008340:	4b1c      	ldr	r3, [pc, #112]	; (80083b4 <mem_trim+0x210>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	693a      	ldr	r2, [r7, #16]
 8008346:	429a      	cmp	r2, r3
 8008348:	d202      	bcs.n	8008350 <mem_trim+0x1ac>
      lfree = mem2;
 800834a:	4a1a      	ldr	r2, [pc, #104]	; (80083b4 <mem_trim+0x210>)
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	2200      	movs	r2, #0
 8008354:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	881a      	ldrh	r2, [r3, #0]
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	8afa      	ldrh	r2, [r7, #22]
 8008362:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	89fa      	ldrh	r2, [r7, #14]
 8008368:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	881b      	ldrh	r3, [r3, #0]
 800836e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008372:	d007      	beq.n	8008384 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	881b      	ldrh	r3, [r3, #0]
 8008378:	4618      	mov	r0, r3
 800837a:	f7ff fd2f 	bl	8007ddc <ptr_to_mem>
 800837e:	4602      	mov	r2, r0
 8008380:	89fb      	ldrh	r3, [r7, #14]
 8008382:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8008384:	4809      	ldr	r0, [pc, #36]	; (80083ac <mem_trim+0x208>)
 8008386:	f00b fd5c 	bl	8013e42 <sys_mutex_unlock>
  return rmem;
 800838a:	687b      	ldr	r3, [r7, #4]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3720      	adds	r7, #32
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	20015adc 	.word	0x20015adc
 8008398:	20015ae0 	.word	0x20015ae0
 800839c:	080152b0 	.word	0x080152b0
 80083a0:	0801543c 	.word	0x0801543c
 80083a4:	080152f8 	.word	0x080152f8
 80083a8:	08015454 	.word	0x08015454
 80083ac:	20015ae4 	.word	0x20015ae4
 80083b0:	08015474 	.word	0x08015474
 80083b4:	20015ae8 	.word	0x20015ae8

080083b8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b088      	sub	sp, #32
 80083bc:	af00      	add	r7, sp, #0
 80083be:	4603      	mov	r3, r0
 80083c0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80083c2:	88fb      	ldrh	r3, [r7, #6]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d101      	bne.n	80083cc <mem_malloc+0x14>
    return NULL;
 80083c8:	2300      	movs	r3, #0
 80083ca:	e0e2      	b.n	8008592 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80083cc:	88fb      	ldrh	r3, [r7, #6]
 80083ce:	3303      	adds	r3, #3
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	f023 0303 	bic.w	r3, r3, #3
 80083d6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80083d8:	8bbb      	ldrh	r3, [r7, #28]
 80083da:	2b0b      	cmp	r3, #11
 80083dc:	d801      	bhi.n	80083e2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80083de:	230c      	movs	r3, #12
 80083e0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80083e2:	8bbb      	ldrh	r3, [r7, #28]
 80083e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80083e8:	d803      	bhi.n	80083f2 <mem_malloc+0x3a>
 80083ea:	8bba      	ldrh	r2, [r7, #28]
 80083ec:	88fb      	ldrh	r3, [r7, #6]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d201      	bcs.n	80083f6 <mem_malloc+0x3e>
    return NULL;
 80083f2:	2300      	movs	r3, #0
 80083f4:	e0cd      	b.n	8008592 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80083f6:	4869      	ldr	r0, [pc, #420]	; (800859c <mem_malloc+0x1e4>)
 80083f8:	f00b fd14 	bl	8013e24 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80083fc:	4b68      	ldr	r3, [pc, #416]	; (80085a0 <mem_malloc+0x1e8>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4618      	mov	r0, r3
 8008402:	f7ff fcfd 	bl	8007e00 <mem_to_ptr>
 8008406:	4603      	mov	r3, r0
 8008408:	83fb      	strh	r3, [r7, #30]
 800840a:	e0b7      	b.n	800857c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800840c:	8bfb      	ldrh	r3, [r7, #30]
 800840e:	4618      	mov	r0, r3
 8008410:	f7ff fce4 	bl	8007ddc <ptr_to_mem>
 8008414:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	791b      	ldrb	r3, [r3, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	f040 80a7 	bne.w	800856e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	881b      	ldrh	r3, [r3, #0]
 8008424:	461a      	mov	r2, r3
 8008426:	8bfb      	ldrh	r3, [r7, #30]
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	f1a3 0208 	sub.w	r2, r3, #8
 800842e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8008430:	429a      	cmp	r2, r3
 8008432:	f0c0 809c 	bcc.w	800856e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	881b      	ldrh	r3, [r3, #0]
 800843a:	461a      	mov	r2, r3
 800843c:	8bfb      	ldrh	r3, [r7, #30]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	f1a3 0208 	sub.w	r2, r3, #8
 8008444:	8bbb      	ldrh	r3, [r7, #28]
 8008446:	3314      	adds	r3, #20
 8008448:	429a      	cmp	r2, r3
 800844a:	d333      	bcc.n	80084b4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800844c:	8bfa      	ldrh	r2, [r7, #30]
 800844e:	8bbb      	ldrh	r3, [r7, #28]
 8008450:	4413      	add	r3, r2
 8008452:	b29b      	uxth	r3, r3
 8008454:	3308      	adds	r3, #8
 8008456:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008458:	8a7b      	ldrh	r3, [r7, #18]
 800845a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800845e:	d106      	bne.n	800846e <mem_malloc+0xb6>
 8008460:	4b50      	ldr	r3, [pc, #320]	; (80085a4 <mem_malloc+0x1ec>)
 8008462:	f240 3287 	movw	r2, #903	; 0x387
 8008466:	4950      	ldr	r1, [pc, #320]	; (80085a8 <mem_malloc+0x1f0>)
 8008468:	4850      	ldr	r0, [pc, #320]	; (80085ac <mem_malloc+0x1f4>)
 800846a:	f00b ff13 	bl	8014294 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800846e:	8a7b      	ldrh	r3, [r7, #18]
 8008470:	4618      	mov	r0, r3
 8008472:	f7ff fcb3 	bl	8007ddc <ptr_to_mem>
 8008476:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	881a      	ldrh	r2, [r3, #0]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	8bfa      	ldrh	r2, [r7, #30]
 800848a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	8a7a      	ldrh	r2, [r7, #18]
 8008490:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	2201      	movs	r2, #1
 8008496:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	881b      	ldrh	r3, [r3, #0]
 800849c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80084a0:	d00b      	beq.n	80084ba <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	881b      	ldrh	r3, [r3, #0]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7ff fc98 	bl	8007ddc <ptr_to_mem>
 80084ac:	4602      	mov	r2, r0
 80084ae:	8a7b      	ldrh	r3, [r7, #18]
 80084b0:	8053      	strh	r3, [r2, #2]
 80084b2:	e002      	b.n	80084ba <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	2201      	movs	r2, #1
 80084b8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80084ba:	4b39      	ldr	r3, [pc, #228]	; (80085a0 <mem_malloc+0x1e8>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	697a      	ldr	r2, [r7, #20]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d127      	bne.n	8008514 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80084c4:	4b36      	ldr	r3, [pc, #216]	; (80085a0 <mem_malloc+0x1e8>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80084ca:	e005      	b.n	80084d8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	881b      	ldrh	r3, [r3, #0]
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7ff fc83 	bl	8007ddc <ptr_to_mem>
 80084d6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	791b      	ldrb	r3, [r3, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d004      	beq.n	80084ea <mem_malloc+0x132>
 80084e0:	4b33      	ldr	r3, [pc, #204]	; (80085b0 <mem_malloc+0x1f8>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	69ba      	ldr	r2, [r7, #24]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d1f0      	bne.n	80084cc <mem_malloc+0x114>
          }
          lfree = cur;
 80084ea:	4a2d      	ldr	r2, [pc, #180]	; (80085a0 <mem_malloc+0x1e8>)
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80084f0:	4b2b      	ldr	r3, [pc, #172]	; (80085a0 <mem_malloc+0x1e8>)
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	4b2e      	ldr	r3, [pc, #184]	; (80085b0 <mem_malloc+0x1f8>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d00b      	beq.n	8008514 <mem_malloc+0x15c>
 80084fc:	4b28      	ldr	r3, [pc, #160]	; (80085a0 <mem_malloc+0x1e8>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	791b      	ldrb	r3, [r3, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d006      	beq.n	8008514 <mem_malloc+0x15c>
 8008506:	4b27      	ldr	r3, [pc, #156]	; (80085a4 <mem_malloc+0x1ec>)
 8008508:	f240 32b5 	movw	r2, #949	; 0x3b5
 800850c:	4929      	ldr	r1, [pc, #164]	; (80085b4 <mem_malloc+0x1fc>)
 800850e:	4827      	ldr	r0, [pc, #156]	; (80085ac <mem_malloc+0x1f4>)
 8008510:	f00b fec0 	bl	8014294 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8008514:	4821      	ldr	r0, [pc, #132]	; (800859c <mem_malloc+0x1e4>)
 8008516:	f00b fc94 	bl	8013e42 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800851a:	8bba      	ldrh	r2, [r7, #28]
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	4413      	add	r3, r2
 8008520:	3308      	adds	r3, #8
 8008522:	4a23      	ldr	r2, [pc, #140]	; (80085b0 <mem_malloc+0x1f8>)
 8008524:	6812      	ldr	r2, [r2, #0]
 8008526:	4293      	cmp	r3, r2
 8008528:	d906      	bls.n	8008538 <mem_malloc+0x180>
 800852a:	4b1e      	ldr	r3, [pc, #120]	; (80085a4 <mem_malloc+0x1ec>)
 800852c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8008530:	4921      	ldr	r1, [pc, #132]	; (80085b8 <mem_malloc+0x200>)
 8008532:	481e      	ldr	r0, [pc, #120]	; (80085ac <mem_malloc+0x1f4>)
 8008534:	f00b feae 	bl	8014294 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	f003 0303 	and.w	r3, r3, #3
 800853e:	2b00      	cmp	r3, #0
 8008540:	d006      	beq.n	8008550 <mem_malloc+0x198>
 8008542:	4b18      	ldr	r3, [pc, #96]	; (80085a4 <mem_malloc+0x1ec>)
 8008544:	f240 32bb 	movw	r2, #955	; 0x3bb
 8008548:	491c      	ldr	r1, [pc, #112]	; (80085bc <mem_malloc+0x204>)
 800854a:	4818      	ldr	r0, [pc, #96]	; (80085ac <mem_malloc+0x1f4>)
 800854c:	f00b fea2 	bl	8014294 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	f003 0303 	and.w	r3, r3, #3
 8008556:	2b00      	cmp	r3, #0
 8008558:	d006      	beq.n	8008568 <mem_malloc+0x1b0>
 800855a:	4b12      	ldr	r3, [pc, #72]	; (80085a4 <mem_malloc+0x1ec>)
 800855c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008560:	4917      	ldr	r1, [pc, #92]	; (80085c0 <mem_malloc+0x208>)
 8008562:	4812      	ldr	r0, [pc, #72]	; (80085ac <mem_malloc+0x1f4>)
 8008564:	f00b fe96 	bl	8014294 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	3308      	adds	r3, #8
 800856c:	e011      	b.n	8008592 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800856e:	8bfb      	ldrh	r3, [r7, #30]
 8008570:	4618      	mov	r0, r3
 8008572:	f7ff fc33 	bl	8007ddc <ptr_to_mem>
 8008576:	4603      	mov	r3, r0
 8008578:	881b      	ldrh	r3, [r3, #0]
 800857a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800857c:	8bfa      	ldrh	r2, [r7, #30]
 800857e:	8bbb      	ldrh	r3, [r7, #28]
 8008580:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8008584:	429a      	cmp	r2, r3
 8008586:	f4ff af41 	bcc.w	800840c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800858a:	4804      	ldr	r0, [pc, #16]	; (800859c <mem_malloc+0x1e4>)
 800858c:	f00b fc59 	bl	8013e42 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3720      	adds	r7, #32
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	20015ae4 	.word	0x20015ae4
 80085a0:	20015ae8 	.word	0x20015ae8
 80085a4:	080152b0 	.word	0x080152b0
 80085a8:	08015474 	.word	0x08015474
 80085ac:	080152f8 	.word	0x080152f8
 80085b0:	20015ae0 	.word	0x20015ae0
 80085b4:	08015488 	.word	0x08015488
 80085b8:	080154a4 	.word	0x080154a4
 80085bc:	080154d4 	.word	0x080154d4
 80085c0:	08015504 	.word	0x08015504

080085c4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	2200      	movs	r2, #0
 80085d2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	3303      	adds	r3, #3
 80085da:	f023 0303 	bic.w	r3, r3, #3
 80085de:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80085e0:	2300      	movs	r3, #0
 80085e2:	60fb      	str	r3, [r7, #12]
 80085e4:	e011      	b.n	800860a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	68ba      	ldr	r2, [r7, #8]
 80085f6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	881b      	ldrh	r3, [r3, #0]
 80085fc:	461a      	mov	r2, r3
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	4413      	add	r3, r2
 8008602:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	3301      	adds	r3, #1
 8008608:	60fb      	str	r3, [r7, #12]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	885b      	ldrh	r3, [r3, #2]
 800860e:	461a      	mov	r2, r3
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	4293      	cmp	r3, r2
 8008614:	dbe7      	blt.n	80085e6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008616:	bf00      	nop
 8008618:	bf00      	nop
 800861a:	3714      	adds	r7, #20
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800862a:	2300      	movs	r3, #0
 800862c:	80fb      	strh	r3, [r7, #6]
 800862e:	e009      	b.n	8008644 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008630:	88fb      	ldrh	r3, [r7, #6]
 8008632:	4a08      	ldr	r2, [pc, #32]	; (8008654 <memp_init+0x30>)
 8008634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008638:	4618      	mov	r0, r3
 800863a:	f7ff ffc3 	bl	80085c4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800863e:	88fb      	ldrh	r3, [r7, #6]
 8008640:	3301      	adds	r3, #1
 8008642:	80fb      	strh	r3, [r7, #6]
 8008644:	88fb      	ldrh	r3, [r7, #6]
 8008646:	2b0c      	cmp	r3, #12
 8008648:	d9f2      	bls.n	8008630 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800864a:	bf00      	nop
 800864c:	bf00      	nop
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	080180b8 	.word	0x080180b8

08008658 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8008660:	f00b fc22 	bl	8013ea8 <sys_arch_protect>
 8008664:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d015      	beq.n	80086a0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	6812      	ldr	r2, [r2, #0]
 800867c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	f003 0303 	and.w	r3, r3, #3
 8008684:	2b00      	cmp	r3, #0
 8008686:	d006      	beq.n	8008696 <do_memp_malloc_pool+0x3e>
 8008688:	4b09      	ldr	r3, [pc, #36]	; (80086b0 <do_memp_malloc_pool+0x58>)
 800868a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800868e:	4909      	ldr	r1, [pc, #36]	; (80086b4 <do_memp_malloc_pool+0x5c>)
 8008690:	4809      	ldr	r0, [pc, #36]	; (80086b8 <do_memp_malloc_pool+0x60>)
 8008692:	f00b fdff 	bl	8014294 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f00b fc14 	bl	8013ec4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	e003      	b.n	80086a8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f00b fc0f 	bl	8013ec4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	08015528 	.word	0x08015528
 80086b4:	08015558 	.word	0x08015558
 80086b8:	0801557c 	.word	0x0801557c

080086bc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d106      	bne.n	80086d8 <memp_malloc_pool+0x1c>
 80086ca:	4b0a      	ldr	r3, [pc, #40]	; (80086f4 <memp_malloc_pool+0x38>)
 80086cc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80086d0:	4909      	ldr	r1, [pc, #36]	; (80086f8 <memp_malloc_pool+0x3c>)
 80086d2:	480a      	ldr	r0, [pc, #40]	; (80086fc <memp_malloc_pool+0x40>)
 80086d4:	f00b fdde 	bl	8014294 <iprintf>
  if (desc == NULL) {
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d101      	bne.n	80086e2 <memp_malloc_pool+0x26>
    return NULL;
 80086de:	2300      	movs	r3, #0
 80086e0:	e003      	b.n	80086ea <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f7ff ffb8 	bl	8008658 <do_memp_malloc_pool>
 80086e8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	08015528 	.word	0x08015528
 80086f8:	080155a4 	.word	0x080155a4
 80086fc:	0801557c 	.word	0x0801557c

08008700 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	4603      	mov	r3, r0
 8008708:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800870a:	79fb      	ldrb	r3, [r7, #7]
 800870c:	2b0c      	cmp	r3, #12
 800870e:	d908      	bls.n	8008722 <memp_malloc+0x22>
 8008710:	4b0a      	ldr	r3, [pc, #40]	; (800873c <memp_malloc+0x3c>)
 8008712:	f240 1257 	movw	r2, #343	; 0x157
 8008716:	490a      	ldr	r1, [pc, #40]	; (8008740 <memp_malloc+0x40>)
 8008718:	480a      	ldr	r0, [pc, #40]	; (8008744 <memp_malloc+0x44>)
 800871a:	f00b fdbb 	bl	8014294 <iprintf>
 800871e:	2300      	movs	r3, #0
 8008720:	e008      	b.n	8008734 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008722:	79fb      	ldrb	r3, [r7, #7]
 8008724:	4a08      	ldr	r2, [pc, #32]	; (8008748 <memp_malloc+0x48>)
 8008726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800872a:	4618      	mov	r0, r3
 800872c:	f7ff ff94 	bl	8008658 <do_memp_malloc_pool>
 8008730:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8008732:	68fb      	ldr	r3, [r7, #12]
}
 8008734:	4618      	mov	r0, r3
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	08015528 	.word	0x08015528
 8008740:	080155b8 	.word	0x080155b8
 8008744:	0801557c 	.word	0x0801557c
 8008748:	080180b8 	.word	0x080180b8

0800874c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	f003 0303 	and.w	r3, r3, #3
 800875c:	2b00      	cmp	r3, #0
 800875e:	d006      	beq.n	800876e <do_memp_free_pool+0x22>
 8008760:	4b0d      	ldr	r3, [pc, #52]	; (8008798 <do_memp_free_pool+0x4c>)
 8008762:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008766:	490d      	ldr	r1, [pc, #52]	; (800879c <do_memp_free_pool+0x50>)
 8008768:	480d      	ldr	r0, [pc, #52]	; (80087a0 <do_memp_free_pool+0x54>)
 800876a:	f00b fd93 	bl	8014294 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8008772:	f00b fb99 	bl	8013ea8 <sys_arch_protect>
 8008776:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800878a:	68b8      	ldr	r0, [r7, #8]
 800878c:	f00b fb9a 	bl	8013ec4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8008790:	bf00      	nop
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}
 8008798:	08015528 	.word	0x08015528
 800879c:	080155d8 	.word	0x080155d8
 80087a0:	0801557c 	.word	0x0801557c

080087a4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d106      	bne.n	80087c2 <memp_free_pool+0x1e>
 80087b4:	4b0a      	ldr	r3, [pc, #40]	; (80087e0 <memp_free_pool+0x3c>)
 80087b6:	f240 1295 	movw	r2, #405	; 0x195
 80087ba:	490a      	ldr	r1, [pc, #40]	; (80087e4 <memp_free_pool+0x40>)
 80087bc:	480a      	ldr	r0, [pc, #40]	; (80087e8 <memp_free_pool+0x44>)
 80087be:	f00b fd69 	bl	8014294 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d007      	beq.n	80087d8 <memp_free_pool+0x34>
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d004      	beq.n	80087d8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f7ff ffbb 	bl	800874c <do_memp_free_pool>
 80087d6:	e000      	b.n	80087da <memp_free_pool+0x36>
    return;
 80087d8:	bf00      	nop
}
 80087da:	3708      	adds	r7, #8
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	08015528 	.word	0x08015528
 80087e4:	080155a4 	.word	0x080155a4
 80087e8:	0801557c 	.word	0x0801557c

080087ec <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	4603      	mov	r3, r0
 80087f4:	6039      	str	r1, [r7, #0]
 80087f6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80087f8:	79fb      	ldrb	r3, [r7, #7]
 80087fa:	2b0c      	cmp	r3, #12
 80087fc:	d907      	bls.n	800880e <memp_free+0x22>
 80087fe:	4b0c      	ldr	r3, [pc, #48]	; (8008830 <memp_free+0x44>)
 8008800:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008804:	490b      	ldr	r1, [pc, #44]	; (8008834 <memp_free+0x48>)
 8008806:	480c      	ldr	r0, [pc, #48]	; (8008838 <memp_free+0x4c>)
 8008808:	f00b fd44 	bl	8014294 <iprintf>
 800880c:	e00c      	b.n	8008828 <memp_free+0x3c>

  if (mem == NULL) {
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d008      	beq.n	8008826 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008814:	79fb      	ldrb	r3, [r7, #7]
 8008816:	4a09      	ldr	r2, [pc, #36]	; (800883c <memp_free+0x50>)
 8008818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800881c:	6839      	ldr	r1, [r7, #0]
 800881e:	4618      	mov	r0, r3
 8008820:	f7ff ff94 	bl	800874c <do_memp_free_pool>
 8008824:	e000      	b.n	8008828 <memp_free+0x3c>
    return;
 8008826:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	08015528 	.word	0x08015528
 8008834:	080155f8 	.word	0x080155f8
 8008838:	0801557c 	.word	0x0801557c
 800883c:	080180b8 	.word	0x080180b8

08008840 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008840:	b480      	push	{r7}
 8008842:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8008844:	bf00      	nop
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
	...

08008850 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
 800885c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d108      	bne.n	8008876 <netif_add+0x26>
 8008864:	4b5b      	ldr	r3, [pc, #364]	; (80089d4 <netif_add+0x184>)
 8008866:	f240 1227 	movw	r2, #295	; 0x127
 800886a:	495b      	ldr	r1, [pc, #364]	; (80089d8 <netif_add+0x188>)
 800886c:	485b      	ldr	r0, [pc, #364]	; (80089dc <netif_add+0x18c>)
 800886e:	f00b fd11 	bl	8014294 <iprintf>
 8008872:	2300      	movs	r3, #0
 8008874:	e0a9      	b.n	80089ca <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008878:	2b00      	cmp	r3, #0
 800887a:	d108      	bne.n	800888e <netif_add+0x3e>
 800887c:	4b55      	ldr	r3, [pc, #340]	; (80089d4 <netif_add+0x184>)
 800887e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8008882:	4957      	ldr	r1, [pc, #348]	; (80089e0 <netif_add+0x190>)
 8008884:	4855      	ldr	r0, [pc, #340]	; (80089dc <netif_add+0x18c>)
 8008886:	f00b fd05 	bl	8014294 <iprintf>
 800888a:	2300      	movs	r3, #0
 800888c:	e09d      	b.n	80089ca <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d101      	bne.n	8008898 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008894:	4b53      	ldr	r3, [pc, #332]	; (80089e4 <netif_add+0x194>)
 8008896:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d101      	bne.n	80088a2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800889e:	4b51      	ldr	r3, [pc, #324]	; (80089e4 <netif_add+0x194>)
 80088a0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d101      	bne.n	80088ac <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80088a8:	4b4e      	ldr	r3, [pc, #312]	; (80089e4 <netif_add+0x194>)
 80088aa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2200      	movs	r2, #0
 80088bc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	4a49      	ldr	r2, [pc, #292]	; (80089e8 <netif_add+0x198>)
 80088c2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2200      	movs	r2, #0
 80088c8:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	3324      	adds	r3, #36	; 0x24
 80088d6:	2204      	movs	r2, #4
 80088d8:	2100      	movs	r1, #0
 80088da:	4618      	mov	r0, r3
 80088dc:	f00b fc3d 	bl	801415a <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6a3a      	ldr	r2, [r7, #32]
 80088ea:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80088ec:	4b3f      	ldr	r3, [pc, #252]	; (80089ec <netif_add+0x19c>)
 80088ee:	781a      	ldrb	r2, [r3, #0]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088fa:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	68b9      	ldr	r1, [r7, #8]
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f000 f914 	bl	8008b30 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8008908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	4798      	blx	r3
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d001      	beq.n	8008918 <netif_add+0xc8>
    return NULL;
 8008914:	2300      	movs	r3, #0
 8008916:	e058      	b.n	80089ca <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800891e:	2bff      	cmp	r3, #255	; 0xff
 8008920:	d103      	bne.n	800892a <netif_add+0xda>
        netif->num = 0;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800892a:	2300      	movs	r3, #0
 800892c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800892e:	4b30      	ldr	r3, [pc, #192]	; (80089f0 <netif_add+0x1a0>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	617b      	str	r3, [r7, #20]
 8008934:	e02b      	b.n	800898e <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008936:	697a      	ldr	r2, [r7, #20]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	429a      	cmp	r2, r3
 800893c:	d106      	bne.n	800894c <netif_add+0xfc>
 800893e:	4b25      	ldr	r3, [pc, #148]	; (80089d4 <netif_add+0x184>)
 8008940:	f240 128b 	movw	r2, #395	; 0x18b
 8008944:	492b      	ldr	r1, [pc, #172]	; (80089f4 <netif_add+0x1a4>)
 8008946:	4825      	ldr	r0, [pc, #148]	; (80089dc <netif_add+0x18c>)
 8008948:	f00b fca4 	bl	8014294 <iprintf>
        num_netifs++;
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	3301      	adds	r3, #1
 8008950:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	2bff      	cmp	r3, #255	; 0xff
 8008956:	dd06      	ble.n	8008966 <netif_add+0x116>
 8008958:	4b1e      	ldr	r3, [pc, #120]	; (80089d4 <netif_add+0x184>)
 800895a:	f240 128d 	movw	r2, #397	; 0x18d
 800895e:	4926      	ldr	r1, [pc, #152]	; (80089f8 <netif_add+0x1a8>)
 8008960:	481e      	ldr	r0, [pc, #120]	; (80089dc <netif_add+0x18c>)
 8008962:	f00b fc97 	bl	8014294 <iprintf>
        if (netif2->num == netif->num) {
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008972:	429a      	cmp	r2, r3
 8008974:	d108      	bne.n	8008988 <netif_add+0x138>
          netif->num++;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800897c:	3301      	adds	r3, #1
 800897e:	b2da      	uxtb	r2, r3
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8008986:	e005      	b.n	8008994 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	617b      	str	r3, [r7, #20]
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1d0      	bne.n	8008936 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d1be      	bne.n	8008918 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80089a0:	2bfe      	cmp	r3, #254	; 0xfe
 80089a2:	d103      	bne.n	80089ac <netif_add+0x15c>
    netif_num = 0;
 80089a4:	4b11      	ldr	r3, [pc, #68]	; (80089ec <netif_add+0x19c>)
 80089a6:	2200      	movs	r2, #0
 80089a8:	701a      	strb	r2, [r3, #0]
 80089aa:	e006      	b.n	80089ba <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80089b2:	3301      	adds	r3, #1
 80089b4:	b2da      	uxtb	r2, r3
 80089b6:	4b0d      	ldr	r3, [pc, #52]	; (80089ec <netif_add+0x19c>)
 80089b8:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80089ba:	4b0d      	ldr	r3, [pc, #52]	; (80089f0 <netif_add+0x1a0>)
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80089c2:	4a0b      	ldr	r2, [pc, #44]	; (80089f0 <netif_add+0x1a0>)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80089c8:	68fb      	ldr	r3, [r7, #12]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3718      	adds	r7, #24
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	08015614 	.word	0x08015614
 80089d8:	080156a8 	.word	0x080156a8
 80089dc:	08015664 	.word	0x08015664
 80089e0:	080156c4 	.word	0x080156c4
 80089e4:	0801813c 	.word	0x0801813c
 80089e8:	08008e13 	.word	0x08008e13
 80089ec:	20018be0 	.word	0x20018be0
 80089f0:	20018bd8 	.word	0x20018bd8
 80089f4:	080156e8 	.word	0x080156e8
 80089f8:	080156fc 	.word	0x080156fc

080089fc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008a06:	6839      	ldr	r1, [r7, #0]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f002 fb91 	bl	800b130 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008a0e:	6839      	ldr	r1, [r7, #0]
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f006 ffa7 	bl	800f964 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8008a16:	bf00      	nop
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
	...

08008a20 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b086      	sub	sp, #24
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d106      	bne.n	8008a40 <netif_do_set_ipaddr+0x20>
 8008a32:	4b1d      	ldr	r3, [pc, #116]	; (8008aa8 <netif_do_set_ipaddr+0x88>)
 8008a34:	f240 12cb 	movw	r2, #459	; 0x1cb
 8008a38:	491c      	ldr	r1, [pc, #112]	; (8008aac <netif_do_set_ipaddr+0x8c>)
 8008a3a:	481d      	ldr	r0, [pc, #116]	; (8008ab0 <netif_do_set_ipaddr+0x90>)
 8008a3c:	f00b fc2a 	bl	8014294 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d106      	bne.n	8008a54 <netif_do_set_ipaddr+0x34>
 8008a46:	4b18      	ldr	r3, [pc, #96]	; (8008aa8 <netif_do_set_ipaddr+0x88>)
 8008a48:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8008a4c:	4917      	ldr	r1, [pc, #92]	; (8008aac <netif_do_set_ipaddr+0x8c>)
 8008a4e:	4818      	ldr	r0, [pc, #96]	; (8008ab0 <netif_do_set_ipaddr+0x90>)
 8008a50:	f00b fc20 	bl	8014294 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	3304      	adds	r3, #4
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d01c      	beq.n	8008a9c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	3304      	adds	r3, #4
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8008a72:	f107 0314 	add.w	r3, r7, #20
 8008a76:	4619      	mov	r1, r3
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f7ff ffbf 	bl	80089fc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d002      	beq.n	8008a8a <netif_do_set_ipaddr+0x6a>
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	e000      	b.n	8008a8c <netif_do_set_ipaddr+0x6c>
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008a90:	2101      	movs	r1, #1
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	f000 f8d2 	bl	8008c3c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e000      	b.n	8008a9e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3718      	adds	r7, #24
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	08015614 	.word	0x08015614
 8008aac:	0801572c 	.word	0x0801572c
 8008ab0:	08015664 	.word	0x08015664

08008ab4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	3308      	adds	r3, #8
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d00a      	beq.n	8008ae4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d002      	beq.n	8008ada <netif_do_set_netmask+0x26>
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	e000      	b.n	8008adc <netif_do_set_netmask+0x28>
 8008ada:	2300      	movs	r3, #0
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e000      	b.n	8008ae6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b085      	sub	sp, #20
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	60f8      	str	r0, [r7, #12]
 8008afa:	60b9      	str	r1, [r7, #8]
 8008afc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	330c      	adds	r3, #12
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d00a      	beq.n	8008b22 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d002      	beq.n	8008b18 <netif_do_set_gw+0x26>
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	e000      	b.n	8008b1a <netif_do_set_gw+0x28>
 8008b18:	2300      	movs	r3, #0
 8008b1a:	68fa      	ldr	r2, [r7, #12]
 8008b1c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e000      	b.n	8008b24 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b088      	sub	sp, #32
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
 8008b3c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8008b42:	2300      	movs	r3, #0
 8008b44:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d101      	bne.n	8008b50 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8008b4c:	4b1c      	ldr	r3, [pc, #112]	; (8008bc0 <netif_set_addr+0x90>)
 8008b4e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d101      	bne.n	8008b5a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8008b56:	4b1a      	ldr	r3, [pc, #104]	; (8008bc0 <netif_set_addr+0x90>)
 8008b58:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d101      	bne.n	8008b64 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8008b60:	4b17      	ldr	r3, [pc, #92]	; (8008bc0 <netif_set_addr+0x90>)
 8008b62:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d003      	beq.n	8008b72 <netif_set_addr+0x42>
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d101      	bne.n	8008b76 <netif_set_addr+0x46>
 8008b72:	2301      	movs	r3, #1
 8008b74:	e000      	b.n	8008b78 <netif_set_addr+0x48>
 8008b76:	2300      	movs	r3, #0
 8008b78:	617b      	str	r3, [r7, #20]
  if (remove) {
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d006      	beq.n	8008b8e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008b80:	f107 0310 	add.w	r3, r7, #16
 8008b84:	461a      	mov	r2, r3
 8008b86:	68b9      	ldr	r1, [r7, #8]
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f7ff ff49 	bl	8008a20 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8008b8e:	69fa      	ldr	r2, [r7, #28]
 8008b90:	6879      	ldr	r1, [r7, #4]
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f7ff ff8e 	bl	8008ab4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8008b98:	69ba      	ldr	r2, [r7, #24]
 8008b9a:	6839      	ldr	r1, [r7, #0]
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f7ff ffa8 	bl	8008af2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d106      	bne.n	8008bb6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008ba8:	f107 0310 	add.w	r3, r7, #16
 8008bac:	461a      	mov	r2, r3
 8008bae:	68b9      	ldr	r1, [r7, #8]
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f7ff ff35 	bl	8008a20 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8008bb6:	bf00      	nop
 8008bb8:	3720      	adds	r7, #32
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	0801813c 	.word	0x0801813c

08008bc4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008bcc:	4a04      	ldr	r2, [pc, #16]	; (8008be0 <netif_set_default+0x1c>)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008bd2:	bf00      	nop
 8008bd4:	370c      	adds	r7, #12
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	20018bdc 	.word	0x20018bdc

08008be4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d107      	bne.n	8008c02 <netif_set_up+0x1e>
 8008bf2:	4b0f      	ldr	r3, [pc, #60]	; (8008c30 <netif_set_up+0x4c>)
 8008bf4:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008bf8:	490e      	ldr	r1, [pc, #56]	; (8008c34 <netif_set_up+0x50>)
 8008bfa:	480f      	ldr	r0, [pc, #60]	; (8008c38 <netif_set_up+0x54>)
 8008bfc:	f00b fb4a 	bl	8014294 <iprintf>
 8008c00:	e013      	b.n	8008c2a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008c08:	f003 0301 	and.w	r3, r3, #1
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d10c      	bne.n	8008c2a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008c16:	f043 0301 	orr.w	r3, r3, #1
 8008c1a:	b2da      	uxtb	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008c22:	2103      	movs	r1, #3
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 f809 	bl	8008c3c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8008c2a:	3708      	adds	r7, #8
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	08015614 	.word	0x08015614
 8008c34:	0801579c 	.word	0x0801579c
 8008c38:	08015664 	.word	0x08015664

08008c3c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	460b      	mov	r3, r1
 8008c46:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d106      	bne.n	8008c5c <netif_issue_reports+0x20>
 8008c4e:	4b18      	ldr	r3, [pc, #96]	; (8008cb0 <netif_issue_reports+0x74>)
 8008c50:	f240 326d 	movw	r2, #877	; 0x36d
 8008c54:	4917      	ldr	r1, [pc, #92]	; (8008cb4 <netif_issue_reports+0x78>)
 8008c56:	4818      	ldr	r0, [pc, #96]	; (8008cb8 <netif_issue_reports+0x7c>)
 8008c58:	f00b fb1c 	bl	8014294 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008c62:	f003 0304 	and.w	r3, r3, #4
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d01e      	beq.n	8008ca8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008c70:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d017      	beq.n	8008ca8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008c78:	78fb      	ldrb	r3, [r7, #3]
 8008c7a:	f003 0301 	and.w	r3, r3, #1
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d013      	beq.n	8008caa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	3304      	adds	r3, #4
 8008c86:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d00e      	beq.n	8008caa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008c92:	f003 0308 	and.w	r3, r3, #8
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d007      	beq.n	8008caa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	3304      	adds	r3, #4
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f009 fc5f 	bl	8012564 <etharp_request>
 8008ca6:	e000      	b.n	8008caa <netif_issue_reports+0x6e>
    return;
 8008ca8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8008caa:	3708      	adds	r7, #8
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	08015614 	.word	0x08015614
 8008cb4:	080157b8 	.word	0x080157b8
 8008cb8:	08015664 	.word	0x08015664

08008cbc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d107      	bne.n	8008cda <netif_set_down+0x1e>
 8008cca:	4b12      	ldr	r3, [pc, #72]	; (8008d14 <netif_set_down+0x58>)
 8008ccc:	f240 329b 	movw	r2, #923	; 0x39b
 8008cd0:	4911      	ldr	r1, [pc, #68]	; (8008d18 <netif_set_down+0x5c>)
 8008cd2:	4812      	ldr	r0, [pc, #72]	; (8008d1c <netif_set_down+0x60>)
 8008cd4:	f00b fade 	bl	8014294 <iprintf>
 8008cd8:	e019      	b.n	8008d0e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008ce0:	f003 0301 	and.w	r3, r3, #1
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d012      	beq.n	8008d0e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008cee:	f023 0301 	bic.w	r3, r3, #1
 8008cf2:	b2da      	uxtb	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008d00:	f003 0308 	and.w	r3, r3, #8
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d002      	beq.n	8008d0e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f008 ffe5 	bl	8011cd8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	08015614 	.word	0x08015614
 8008d18:	080157dc 	.word	0x080157dc
 8008d1c:	08015664 	.word	0x08015664

08008d20 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d107      	bne.n	8008d3e <netif_set_link_up+0x1e>
 8008d2e:	4b15      	ldr	r3, [pc, #84]	; (8008d84 <netif_set_link_up+0x64>)
 8008d30:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8008d34:	4914      	ldr	r1, [pc, #80]	; (8008d88 <netif_set_link_up+0x68>)
 8008d36:	4815      	ldr	r0, [pc, #84]	; (8008d8c <netif_set_link_up+0x6c>)
 8008d38:	f00b faac 	bl	8014294 <iprintf>
 8008d3c:	e01e      	b.n	8008d7c <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008d44:	f003 0304 	and.w	r3, r3, #4
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d117      	bne.n	8008d7c <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008d52:	f043 0304 	orr.w	r3, r3, #4
 8008d56:	b2da      	uxtb	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f007 fa2a 	bl	80101b8 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008d64:	2103      	movs	r1, #3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f7ff ff68 	bl	8008c3c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	69db      	ldr	r3, [r3, #28]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d003      	beq.n	8008d7c <netif_set_link_up+0x5c>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	69db      	ldr	r3, [r3, #28]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	08015614 	.word	0x08015614
 8008d88:	080157fc 	.word	0x080157fc
 8008d8c:	08015664 	.word	0x08015664

08008d90 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d107      	bne.n	8008dae <netif_set_link_down+0x1e>
 8008d9e:	4b11      	ldr	r3, [pc, #68]	; (8008de4 <netif_set_link_down+0x54>)
 8008da0:	f240 4206 	movw	r2, #1030	; 0x406
 8008da4:	4910      	ldr	r1, [pc, #64]	; (8008de8 <netif_set_link_down+0x58>)
 8008da6:	4811      	ldr	r0, [pc, #68]	; (8008dec <netif_set_link_down+0x5c>)
 8008da8:	f00b fa74 	bl	8014294 <iprintf>
 8008dac:	e017      	b.n	8008dde <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008db4:	f003 0304 	and.w	r3, r3, #4
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d010      	beq.n	8008dde <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008dc2:	f023 0304 	bic.w	r3, r3, #4
 8008dc6:	b2da      	uxtb	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	69db      	ldr	r3, [r3, #28]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d003      	beq.n	8008dde <netif_set_link_down+0x4e>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	69db      	ldr	r3, [r3, #28]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	08015614 	.word	0x08015614
 8008de8:	08015820 	.word	0x08015820
 8008dec:	08015664 	.word	0x08015664

08008df0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d002      	beq.n	8008e06 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	683a      	ldr	r2, [r7, #0]
 8008e04:	61da      	str	r2, [r3, #28]
  }
}
 8008e06:	bf00      	nop
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr

08008e12 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8008e12:	b480      	push	{r7}
 8008e14:	b085      	sub	sp, #20
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	60f8      	str	r0, [r7, #12]
 8008e1a:	60b9      	str	r1, [r7, #8]
 8008e1c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008e1e:	f06f 030b 	mvn.w	r3, #11
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3714      	adds	r7, #20
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
	...

08008e30 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	4603      	mov	r3, r0
 8008e38:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008e3a:	79fb      	ldrb	r3, [r7, #7]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d013      	beq.n	8008e68 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008e40:	4b0d      	ldr	r3, [pc, #52]	; (8008e78 <netif_get_by_index+0x48>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	60fb      	str	r3, [r7, #12]
 8008e46:	e00c      	b.n	8008e62 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008e4e:	3301      	adds	r3, #1
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	79fa      	ldrb	r2, [r7, #7]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d101      	bne.n	8008e5c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	e006      	b.n	8008e6a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	60fb      	str	r3, [r7, #12]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d1ef      	bne.n	8008e48 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	20018bd8 	.word	0x20018bd8

08008e7c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008e82:	f00b f811 	bl	8013ea8 <sys_arch_protect>
 8008e86:	6038      	str	r0, [r7, #0]
 8008e88:	4b0d      	ldr	r3, [pc, #52]	; (8008ec0 <pbuf_free_ooseq+0x44>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	701a      	strb	r2, [r3, #0]
 8008e8e:	6838      	ldr	r0, [r7, #0]
 8008e90:	f00b f818 	bl	8013ec4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008e94:	4b0b      	ldr	r3, [pc, #44]	; (8008ec4 <pbuf_free_ooseq+0x48>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	607b      	str	r3, [r7, #4]
 8008e9a:	e00a      	b.n	8008eb2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d003      	beq.n	8008eac <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f002 f981 	bl	800b1ac <tcp_free_ooseq>
      return;
 8008eaa:	e005      	b.n	8008eb8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	607b      	str	r3, [r7, #4]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d1f1      	bne.n	8008e9c <pbuf_free_ooseq+0x20>
    }
  }
}
 8008eb8:	3708      	adds	r7, #8
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	20018be1 	.word	0x20018be1
 8008ec4:	20018bf0 	.word	0x20018bf0

08008ec8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8008ed0:	f7ff ffd4 	bl	8008e7c <pbuf_free_ooseq>
}
 8008ed4:	bf00      	nop
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8008ee2:	f00a ffe1 	bl	8013ea8 <sys_arch_protect>
 8008ee6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8008ee8:	4b0f      	ldr	r3, [pc, #60]	; (8008f28 <pbuf_pool_is_empty+0x4c>)
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8008eee:	4b0e      	ldr	r3, [pc, #56]	; (8008f28 <pbuf_pool_is_empty+0x4c>)
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f00a ffe5 	bl	8013ec4 <sys_arch_unprotect>

  if (!queued) {
 8008efa:	78fb      	ldrb	r3, [r7, #3]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10f      	bne.n	8008f20 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8008f00:	2100      	movs	r1, #0
 8008f02:	480a      	ldr	r0, [pc, #40]	; (8008f2c <pbuf_pool_is_empty+0x50>)
 8008f04:	f7fe fe9a 	bl	8007c3c <tcpip_try_callback>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d008      	beq.n	8008f20 <pbuf_pool_is_empty+0x44>
 8008f0e:	f00a ffcb 	bl	8013ea8 <sys_arch_protect>
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	4b04      	ldr	r3, [pc, #16]	; (8008f28 <pbuf_pool_is_empty+0x4c>)
 8008f16:	2200      	movs	r2, #0
 8008f18:	701a      	strb	r2, [r3, #0]
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f00a ffd2 	bl	8013ec4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008f20:	bf00      	nop
 8008f22:	3708      	adds	r7, #8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	20018be1 	.word	0x20018be1
 8008f2c:	08008ec9 	.word	0x08008ec9

08008f30 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	460b      	mov	r3, r1
 8008f40:	80fb      	strh	r3, [r7, #6]
 8008f42:	4613      	mov	r3, r2
 8008f44:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	68ba      	ldr	r2, [r7, #8]
 8008f50:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	88fa      	ldrh	r2, [r7, #6]
 8008f56:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	88ba      	ldrh	r2, [r7, #4]
 8008f5c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8008f5e:	8b3b      	ldrh	r3, [r7, #24]
 8008f60:	b2da      	uxtb	r2, r3
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	7f3a      	ldrb	r2, [r7, #28]
 8008f6a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	73da      	strb	r2, [r3, #15]
}
 8008f78:	bf00      	nop
 8008f7a:	3714      	adds	r7, #20
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b08c      	sub	sp, #48	; 0x30
 8008f88:	af02      	add	r7, sp, #8
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	71fb      	strb	r3, [r7, #7]
 8008f8e:	460b      	mov	r3, r1
 8008f90:	80bb      	strh	r3, [r7, #4]
 8008f92:	4613      	mov	r3, r2
 8008f94:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008f96:	79fb      	ldrb	r3, [r7, #7]
 8008f98:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008f9a:	887b      	ldrh	r3, [r7, #2]
 8008f9c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008fa0:	d07f      	beq.n	80090a2 <pbuf_alloc+0x11e>
 8008fa2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008fa6:	f300 80c8 	bgt.w	800913a <pbuf_alloc+0x1b6>
 8008faa:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008fae:	d010      	beq.n	8008fd2 <pbuf_alloc+0x4e>
 8008fb0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008fb4:	f300 80c1 	bgt.w	800913a <pbuf_alloc+0x1b6>
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d002      	beq.n	8008fc2 <pbuf_alloc+0x3e>
 8008fbc:	2b41      	cmp	r3, #65	; 0x41
 8008fbe:	f040 80bc 	bne.w	800913a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008fc2:	887a      	ldrh	r2, [r7, #2]
 8008fc4:	88bb      	ldrh	r3, [r7, #4]
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	2000      	movs	r0, #0
 8008fca:	f000 f8d1 	bl	8009170 <pbuf_alloc_reference>
 8008fce:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8008fd0:	e0bd      	b.n	800914e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008fda:	88bb      	ldrh	r3, [r7, #4]
 8008fdc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008fde:	200c      	movs	r0, #12
 8008fe0:	f7ff fb8e 	bl	8008700 <memp_malloc>
 8008fe4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d109      	bne.n	8009000 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8008fec:	f7ff ff76 	bl	8008edc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d002      	beq.n	8008ffc <pbuf_alloc+0x78>
            pbuf_free(p);
 8008ff6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ff8:	f000 faa8 	bl	800954c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	e0a7      	b.n	8009150 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009000:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009002:	3303      	adds	r3, #3
 8009004:	b29b      	uxth	r3, r3
 8009006:	f023 0303 	bic.w	r3, r3, #3
 800900a:	b29b      	uxth	r3, r3
 800900c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8009010:	b29b      	uxth	r3, r3
 8009012:	8b7a      	ldrh	r2, [r7, #26]
 8009014:	4293      	cmp	r3, r2
 8009016:	bf28      	it	cs
 8009018:	4613      	movcs	r3, r2
 800901a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800901c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800901e:	3310      	adds	r3, #16
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	4413      	add	r3, r2
 8009024:	3303      	adds	r3, #3
 8009026:	f023 0303 	bic.w	r3, r3, #3
 800902a:	4618      	mov	r0, r3
 800902c:	89f9      	ldrh	r1, [r7, #14]
 800902e:	8b7a      	ldrh	r2, [r7, #26]
 8009030:	2300      	movs	r3, #0
 8009032:	9301      	str	r3, [sp, #4]
 8009034:	887b      	ldrh	r3, [r7, #2]
 8009036:	9300      	str	r3, [sp, #0]
 8009038:	460b      	mov	r3, r1
 800903a:	4601      	mov	r1, r0
 800903c:	6938      	ldr	r0, [r7, #16]
 800903e:	f7ff ff77 	bl	8008f30 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	f003 0303 	and.w	r3, r3, #3
 800904a:	2b00      	cmp	r3, #0
 800904c:	d006      	beq.n	800905c <pbuf_alloc+0xd8>
 800904e:	4b42      	ldr	r3, [pc, #264]	; (8009158 <pbuf_alloc+0x1d4>)
 8009050:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009054:	4941      	ldr	r1, [pc, #260]	; (800915c <pbuf_alloc+0x1d8>)
 8009056:	4842      	ldr	r0, [pc, #264]	; (8009160 <pbuf_alloc+0x1dc>)
 8009058:	f00b f91c 	bl	8014294 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800905c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800905e:	3303      	adds	r3, #3
 8009060:	f023 0303 	bic.w	r3, r3, #3
 8009064:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8009068:	d106      	bne.n	8009078 <pbuf_alloc+0xf4>
 800906a:	4b3b      	ldr	r3, [pc, #236]	; (8009158 <pbuf_alloc+0x1d4>)
 800906c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8009070:	493c      	ldr	r1, [pc, #240]	; (8009164 <pbuf_alloc+0x1e0>)
 8009072:	483b      	ldr	r0, [pc, #236]	; (8009160 <pbuf_alloc+0x1dc>)
 8009074:	f00b f90e 	bl	8014294 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8009078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907a:	2b00      	cmp	r3, #0
 800907c:	d102      	bne.n	8009084 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	627b      	str	r3, [r7, #36]	; 0x24
 8009082:	e002      	b.n	800908a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	693a      	ldr	r2, [r7, #16]
 8009088:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800908e:	8b7a      	ldrh	r2, [r7, #26]
 8009090:	89fb      	ldrh	r3, [r7, #14]
 8009092:	1ad3      	subs	r3, r2, r3
 8009094:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8009096:	2300      	movs	r3, #0
 8009098:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800909a:	8b7b      	ldrh	r3, [r7, #26]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d19e      	bne.n	8008fde <pbuf_alloc+0x5a>
      break;
 80090a0:	e055      	b.n	800914e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80090a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80090a4:	3303      	adds	r3, #3
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	f023 0303 	bic.w	r3, r3, #3
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	88bb      	ldrh	r3, [r7, #4]
 80090b0:	3303      	adds	r3, #3
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	f023 0303 	bic.w	r3, r3, #3
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	4413      	add	r3, r2
 80090bc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80090be:	8b3b      	ldrh	r3, [r7, #24]
 80090c0:	3310      	adds	r3, #16
 80090c2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80090c4:	8b3a      	ldrh	r2, [r7, #24]
 80090c6:	88bb      	ldrh	r3, [r7, #4]
 80090c8:	3303      	adds	r3, #3
 80090ca:	f023 0303 	bic.w	r3, r3, #3
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d306      	bcc.n	80090e0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80090d2:	8afa      	ldrh	r2, [r7, #22]
 80090d4:	88bb      	ldrh	r3, [r7, #4]
 80090d6:	3303      	adds	r3, #3
 80090d8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80090dc:	429a      	cmp	r2, r3
 80090de:	d201      	bcs.n	80090e4 <pbuf_alloc+0x160>
        return NULL;
 80090e0:	2300      	movs	r3, #0
 80090e2:	e035      	b.n	8009150 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80090e4:	8afb      	ldrh	r3, [r7, #22]
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7ff f966 	bl	80083b8 <mem_malloc>
 80090ec:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80090ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d101      	bne.n	80090f8 <pbuf_alloc+0x174>
        return NULL;
 80090f4:	2300      	movs	r3, #0
 80090f6:	e02b      	b.n	8009150 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80090f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80090fa:	3310      	adds	r3, #16
 80090fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090fe:	4413      	add	r3, r2
 8009100:	3303      	adds	r3, #3
 8009102:	f023 0303 	bic.w	r3, r3, #3
 8009106:	4618      	mov	r0, r3
 8009108:	88b9      	ldrh	r1, [r7, #4]
 800910a:	88ba      	ldrh	r2, [r7, #4]
 800910c:	2300      	movs	r3, #0
 800910e:	9301      	str	r3, [sp, #4]
 8009110:	887b      	ldrh	r3, [r7, #2]
 8009112:	9300      	str	r3, [sp, #0]
 8009114:	460b      	mov	r3, r1
 8009116:	4601      	mov	r1, r0
 8009118:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800911a:	f7ff ff09 	bl	8008f30 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800911e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	f003 0303 	and.w	r3, r3, #3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d010      	beq.n	800914c <pbuf_alloc+0x1c8>
 800912a:	4b0b      	ldr	r3, [pc, #44]	; (8009158 <pbuf_alloc+0x1d4>)
 800912c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8009130:	490d      	ldr	r1, [pc, #52]	; (8009168 <pbuf_alloc+0x1e4>)
 8009132:	480b      	ldr	r0, [pc, #44]	; (8009160 <pbuf_alloc+0x1dc>)
 8009134:	f00b f8ae 	bl	8014294 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8009138:	e008      	b.n	800914c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800913a:	4b07      	ldr	r3, [pc, #28]	; (8009158 <pbuf_alloc+0x1d4>)
 800913c:	f240 1227 	movw	r2, #295	; 0x127
 8009140:	490a      	ldr	r1, [pc, #40]	; (800916c <pbuf_alloc+0x1e8>)
 8009142:	4807      	ldr	r0, [pc, #28]	; (8009160 <pbuf_alloc+0x1dc>)
 8009144:	f00b f8a6 	bl	8014294 <iprintf>
      return NULL;
 8009148:	2300      	movs	r3, #0
 800914a:	e001      	b.n	8009150 <pbuf_alloc+0x1cc>
      break;
 800914c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800914e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009150:	4618      	mov	r0, r3
 8009152:	3728      	adds	r7, #40	; 0x28
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	08015844 	.word	0x08015844
 800915c:	08015874 	.word	0x08015874
 8009160:	080158a4 	.word	0x080158a4
 8009164:	080158cc 	.word	0x080158cc
 8009168:	08015900 	.word	0x08015900
 800916c:	0801592c 	.word	0x0801592c

08009170 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af02      	add	r7, sp, #8
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	460b      	mov	r3, r1
 800917a:	807b      	strh	r3, [r7, #2]
 800917c:	4613      	mov	r3, r2
 800917e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009180:	883b      	ldrh	r3, [r7, #0]
 8009182:	2b41      	cmp	r3, #65	; 0x41
 8009184:	d009      	beq.n	800919a <pbuf_alloc_reference+0x2a>
 8009186:	883b      	ldrh	r3, [r7, #0]
 8009188:	2b01      	cmp	r3, #1
 800918a:	d006      	beq.n	800919a <pbuf_alloc_reference+0x2a>
 800918c:	4b0f      	ldr	r3, [pc, #60]	; (80091cc <pbuf_alloc_reference+0x5c>)
 800918e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8009192:	490f      	ldr	r1, [pc, #60]	; (80091d0 <pbuf_alloc_reference+0x60>)
 8009194:	480f      	ldr	r0, [pc, #60]	; (80091d4 <pbuf_alloc_reference+0x64>)
 8009196:	f00b f87d 	bl	8014294 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800919a:	200b      	movs	r0, #11
 800919c:	f7ff fab0 	bl	8008700 <memp_malloc>
 80091a0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d101      	bne.n	80091ac <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80091a8:	2300      	movs	r3, #0
 80091aa:	e00b      	b.n	80091c4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80091ac:	8879      	ldrh	r1, [r7, #2]
 80091ae:	887a      	ldrh	r2, [r7, #2]
 80091b0:	2300      	movs	r3, #0
 80091b2:	9301      	str	r3, [sp, #4]
 80091b4:	883b      	ldrh	r3, [r7, #0]
 80091b6:	9300      	str	r3, [sp, #0]
 80091b8:	460b      	mov	r3, r1
 80091ba:	6879      	ldr	r1, [r7, #4]
 80091bc:	68f8      	ldr	r0, [r7, #12]
 80091be:	f7ff feb7 	bl	8008f30 <pbuf_init_alloced_pbuf>
  return p;
 80091c2:	68fb      	ldr	r3, [r7, #12]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3710      	adds	r7, #16
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	08015844 	.word	0x08015844
 80091d0:	08015948 	.word	0x08015948
 80091d4:	080158a4 	.word	0x080158a4

080091d8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b088      	sub	sp, #32
 80091dc:	af02      	add	r7, sp, #8
 80091de:	607b      	str	r3, [r7, #4]
 80091e0:	4603      	mov	r3, r0
 80091e2:	73fb      	strb	r3, [r7, #15]
 80091e4:	460b      	mov	r3, r1
 80091e6:	81bb      	strh	r3, [r7, #12]
 80091e8:	4613      	mov	r3, r2
 80091ea:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
 80091ee:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80091f0:	8a7b      	ldrh	r3, [r7, #18]
 80091f2:	3303      	adds	r3, #3
 80091f4:	f023 0203 	bic.w	r2, r3, #3
 80091f8:	89bb      	ldrh	r3, [r7, #12]
 80091fa:	441a      	add	r2, r3
 80091fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091fe:	429a      	cmp	r2, r3
 8009200:	d901      	bls.n	8009206 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8009202:	2300      	movs	r3, #0
 8009204:	e018      	b.n	8009238 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8009206:	6a3b      	ldr	r3, [r7, #32]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d007      	beq.n	800921c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800920c:	8a7b      	ldrh	r3, [r7, #18]
 800920e:	3303      	adds	r3, #3
 8009210:	f023 0303 	bic.w	r3, r3, #3
 8009214:	6a3a      	ldr	r2, [r7, #32]
 8009216:	4413      	add	r3, r2
 8009218:	617b      	str	r3, [r7, #20]
 800921a:	e001      	b.n	8009220 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800921c:	2300      	movs	r3, #0
 800921e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	89b9      	ldrh	r1, [r7, #12]
 8009224:	89ba      	ldrh	r2, [r7, #12]
 8009226:	2302      	movs	r3, #2
 8009228:	9301      	str	r3, [sp, #4]
 800922a:	897b      	ldrh	r3, [r7, #10]
 800922c:	9300      	str	r3, [sp, #0]
 800922e:	460b      	mov	r3, r1
 8009230:	6979      	ldr	r1, [r7, #20]
 8009232:	f7ff fe7d 	bl	8008f30 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8009236:	687b      	ldr	r3, [r7, #4]
}
 8009238:	4618      	mov	r0, r3
 800923a:	3718      	adds	r7, #24
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	460b      	mov	r3, r1
 800924a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d106      	bne.n	8009260 <pbuf_realloc+0x20>
 8009252:	4b3a      	ldr	r3, [pc, #232]	; (800933c <pbuf_realloc+0xfc>)
 8009254:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8009258:	4939      	ldr	r1, [pc, #228]	; (8009340 <pbuf_realloc+0x100>)
 800925a:	483a      	ldr	r0, [pc, #232]	; (8009344 <pbuf_realloc+0x104>)
 800925c:	f00b f81a 	bl	8014294 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	891b      	ldrh	r3, [r3, #8]
 8009264:	887a      	ldrh	r2, [r7, #2]
 8009266:	429a      	cmp	r2, r3
 8009268:	d263      	bcs.n	8009332 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	891a      	ldrh	r2, [r3, #8]
 800926e:	887b      	ldrh	r3, [r7, #2]
 8009270:	1ad3      	subs	r3, r2, r3
 8009272:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009274:	887b      	ldrh	r3, [r7, #2]
 8009276:	817b      	strh	r3, [r7, #10]
  q = p;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800927c:	e018      	b.n	80092b0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	895b      	ldrh	r3, [r3, #10]
 8009282:	897a      	ldrh	r2, [r7, #10]
 8009284:	1ad3      	subs	r3, r2, r3
 8009286:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	891a      	ldrh	r2, [r3, #8]
 800928c:	893b      	ldrh	r3, [r7, #8]
 800928e:	1ad3      	subs	r3, r2, r3
 8009290:	b29a      	uxth	r2, r3
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d106      	bne.n	80092b0 <pbuf_realloc+0x70>
 80092a2:	4b26      	ldr	r3, [pc, #152]	; (800933c <pbuf_realloc+0xfc>)
 80092a4:	f240 12af 	movw	r2, #431	; 0x1af
 80092a8:	4927      	ldr	r1, [pc, #156]	; (8009348 <pbuf_realloc+0x108>)
 80092aa:	4826      	ldr	r0, [pc, #152]	; (8009344 <pbuf_realloc+0x104>)
 80092ac:	f00a fff2 	bl	8014294 <iprintf>
  while (rem_len > q->len) {
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	895b      	ldrh	r3, [r3, #10]
 80092b4:	897a      	ldrh	r2, [r7, #10]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d8e1      	bhi.n	800927e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	7b1b      	ldrb	r3, [r3, #12]
 80092be:	f003 030f 	and.w	r3, r3, #15
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d121      	bne.n	800930a <pbuf_realloc+0xca>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	895b      	ldrh	r3, [r3, #10]
 80092ca:	897a      	ldrh	r2, [r7, #10]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d01c      	beq.n	800930a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	7b5b      	ldrb	r3, [r3, #13]
 80092d4:	f003 0302 	and.w	r3, r3, #2
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d116      	bne.n	800930a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	685a      	ldr	r2, [r3, #4]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	897b      	ldrh	r3, [r7, #10]
 80092e8:	4413      	add	r3, r2
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	4619      	mov	r1, r3
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f7fe ff58 	bl	80081a4 <mem_trim>
 80092f4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d106      	bne.n	800930a <pbuf_realloc+0xca>
 80092fc:	4b0f      	ldr	r3, [pc, #60]	; (800933c <pbuf_realloc+0xfc>)
 80092fe:	f240 12bd 	movw	r2, #445	; 0x1bd
 8009302:	4912      	ldr	r1, [pc, #72]	; (800934c <pbuf_realloc+0x10c>)
 8009304:	480f      	ldr	r0, [pc, #60]	; (8009344 <pbuf_realloc+0x104>)
 8009306:	f00a ffc5 	bl	8014294 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	897a      	ldrh	r2, [r7, #10]
 800930e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	895a      	ldrh	r2, [r3, #10]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d004      	beq.n	800932a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4618      	mov	r0, r3
 8009326:	f000 f911 	bl	800954c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2200      	movs	r2, #0
 800932e:	601a      	str	r2, [r3, #0]
 8009330:	e000      	b.n	8009334 <pbuf_realloc+0xf4>
    return;
 8009332:	bf00      	nop

}
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	08015844 	.word	0x08015844
 8009340:	0801595c 	.word	0x0801595c
 8009344:	080158a4 	.word	0x080158a4
 8009348:	08015974 	.word	0x08015974
 800934c:	0801598c 	.word	0x0801598c

08009350 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	4613      	mov	r3, r2
 800935c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d106      	bne.n	8009372 <pbuf_add_header_impl+0x22>
 8009364:	4b2b      	ldr	r3, [pc, #172]	; (8009414 <pbuf_add_header_impl+0xc4>)
 8009366:	f240 12df 	movw	r2, #479	; 0x1df
 800936a:	492b      	ldr	r1, [pc, #172]	; (8009418 <pbuf_add_header_impl+0xc8>)
 800936c:	482b      	ldr	r0, [pc, #172]	; (800941c <pbuf_add_header_impl+0xcc>)
 800936e:	f00a ff91 	bl	8014294 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d003      	beq.n	8009380 <pbuf_add_header_impl+0x30>
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800937e:	d301      	bcc.n	8009384 <pbuf_add_header_impl+0x34>
    return 1;
 8009380:	2301      	movs	r3, #1
 8009382:	e043      	b.n	800940c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d101      	bne.n	800938e <pbuf_add_header_impl+0x3e>
    return 0;
 800938a:	2300      	movs	r3, #0
 800938c:	e03e      	b.n	800940c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	891a      	ldrh	r2, [r3, #8]
 8009396:	8a7b      	ldrh	r3, [r7, #18]
 8009398:	4413      	add	r3, r2
 800939a:	b29b      	uxth	r3, r3
 800939c:	8a7a      	ldrh	r2, [r7, #18]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d901      	bls.n	80093a6 <pbuf_add_header_impl+0x56>
    return 1;
 80093a2:	2301      	movs	r3, #1
 80093a4:	e032      	b.n	800940c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	7b1b      	ldrb	r3, [r3, #12]
 80093aa:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80093ac:	8a3b      	ldrh	r3, [r7, #16]
 80093ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00c      	beq.n	80093d0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	685a      	ldr	r2, [r3, #4]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	425b      	negs	r3, r3
 80093be:	4413      	add	r3, r2
 80093c0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	3310      	adds	r3, #16
 80093c6:	697a      	ldr	r2, [r7, #20]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d20d      	bcs.n	80093e8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80093cc:	2301      	movs	r3, #1
 80093ce:	e01d      	b.n	800940c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80093d0:	79fb      	ldrb	r3, [r7, #7]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d006      	beq.n	80093e4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	685a      	ldr	r2, [r3, #4]
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	425b      	negs	r3, r3
 80093de:	4413      	add	r3, r2
 80093e0:	617b      	str	r3, [r7, #20]
 80093e2:	e001      	b.n	80093e8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80093e4:	2301      	movs	r3, #1
 80093e6:	e011      	b.n	800940c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	697a      	ldr	r2, [r7, #20]
 80093ec:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	895a      	ldrh	r2, [r3, #10]
 80093f2:	8a7b      	ldrh	r3, [r7, #18]
 80093f4:	4413      	add	r3, r2
 80093f6:	b29a      	uxth	r2, r3
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	891a      	ldrh	r2, [r3, #8]
 8009400:	8a7b      	ldrh	r3, [r7, #18]
 8009402:	4413      	add	r3, r2
 8009404:	b29a      	uxth	r2, r3
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	811a      	strh	r2, [r3, #8]


  return 0;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3718      	adds	r7, #24
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	08015844 	.word	0x08015844
 8009418:	080159a8 	.word	0x080159a8
 800941c:	080158a4 	.word	0x080158a4

08009420 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800942a:	2200      	movs	r2, #0
 800942c:	6839      	ldr	r1, [r7, #0]
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f7ff ff8e 	bl	8009350 <pbuf_add_header_impl>
 8009434:	4603      	mov	r3, r0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
	...

08009440 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d106      	bne.n	800945e <pbuf_remove_header+0x1e>
 8009450:	4b20      	ldr	r3, [pc, #128]	; (80094d4 <pbuf_remove_header+0x94>)
 8009452:	f240 224b 	movw	r2, #587	; 0x24b
 8009456:	4920      	ldr	r1, [pc, #128]	; (80094d8 <pbuf_remove_header+0x98>)
 8009458:	4820      	ldr	r0, [pc, #128]	; (80094dc <pbuf_remove_header+0x9c>)
 800945a:	f00a ff1b 	bl	8014294 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d003      	beq.n	800946c <pbuf_remove_header+0x2c>
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800946a:	d301      	bcc.n	8009470 <pbuf_remove_header+0x30>
    return 1;
 800946c:	2301      	movs	r3, #1
 800946e:	e02c      	b.n	80094ca <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d101      	bne.n	800947a <pbuf_remove_header+0x3a>
    return 0;
 8009476:	2300      	movs	r3, #0
 8009478:	e027      	b.n	80094ca <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	895b      	ldrh	r3, [r3, #10]
 8009482:	89fa      	ldrh	r2, [r7, #14]
 8009484:	429a      	cmp	r2, r3
 8009486:	d908      	bls.n	800949a <pbuf_remove_header+0x5a>
 8009488:	4b12      	ldr	r3, [pc, #72]	; (80094d4 <pbuf_remove_header+0x94>)
 800948a:	f240 2255 	movw	r2, #597	; 0x255
 800948e:	4914      	ldr	r1, [pc, #80]	; (80094e0 <pbuf_remove_header+0xa0>)
 8009490:	4812      	ldr	r0, [pc, #72]	; (80094dc <pbuf_remove_header+0x9c>)
 8009492:	f00a feff 	bl	8014294 <iprintf>
 8009496:	2301      	movs	r3, #1
 8009498:	e017      	b.n	80094ca <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	685a      	ldr	r2, [r3, #4]
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	441a      	add	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	895a      	ldrh	r2, [r3, #10]
 80094b0:	89fb      	ldrh	r3, [r7, #14]
 80094b2:	1ad3      	subs	r3, r2, r3
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	891a      	ldrh	r2, [r3, #8]
 80094be:	89fb      	ldrh	r3, [r7, #14]
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	08015844 	.word	0x08015844
 80094d8:	080159a8 	.word	0x080159a8
 80094dc:	080158a4 	.word	0x080158a4
 80094e0:	080159b4 	.word	0x080159b4

080094e4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	460b      	mov	r3, r1
 80094ee:	807b      	strh	r3, [r7, #2]
 80094f0:	4613      	mov	r3, r2
 80094f2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80094f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	da08      	bge.n	800950e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80094fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009500:	425b      	negs	r3, r3
 8009502:	4619      	mov	r1, r3
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f7ff ff9b 	bl	8009440 <pbuf_remove_header>
 800950a:	4603      	mov	r3, r0
 800950c:	e007      	b.n	800951e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800950e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009512:	787a      	ldrb	r2, [r7, #1]
 8009514:	4619      	mov	r1, r3
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f7ff ff1a 	bl	8009350 <pbuf_add_header_impl>
 800951c:	4603      	mov	r3, r0
  }
}
 800951e:	4618      	mov	r0, r3
 8009520:	3708      	adds	r7, #8
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b082      	sub	sp, #8
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	460b      	mov	r3, r1
 8009530:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8009532:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009536:	2201      	movs	r2, #1
 8009538:	4619      	mov	r1, r3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f7ff ffd2 	bl	80094e4 <pbuf_header_impl>
 8009540:	4603      	mov	r3, r0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
	...

0800954c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b088      	sub	sp, #32
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d10b      	bne.n	8009572 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d106      	bne.n	800956e <pbuf_free+0x22>
 8009560:	4b3b      	ldr	r3, [pc, #236]	; (8009650 <pbuf_free+0x104>)
 8009562:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009566:	493b      	ldr	r1, [pc, #236]	; (8009654 <pbuf_free+0x108>)
 8009568:	483b      	ldr	r0, [pc, #236]	; (8009658 <pbuf_free+0x10c>)
 800956a:	f00a fe93 	bl	8014294 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800956e:	2300      	movs	r3, #0
 8009570:	e069      	b.n	8009646 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8009572:	2300      	movs	r3, #0
 8009574:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009576:	e062      	b.n	800963e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8009578:	f00a fc96 	bl	8013ea8 <sys_arch_protect>
 800957c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	7b9b      	ldrb	r3, [r3, #14]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d106      	bne.n	8009594 <pbuf_free+0x48>
 8009586:	4b32      	ldr	r3, [pc, #200]	; (8009650 <pbuf_free+0x104>)
 8009588:	f240 22f1 	movw	r2, #753	; 0x2f1
 800958c:	4933      	ldr	r1, [pc, #204]	; (800965c <pbuf_free+0x110>)
 800958e:	4832      	ldr	r0, [pc, #200]	; (8009658 <pbuf_free+0x10c>)
 8009590:	f00a fe80 	bl	8014294 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	7b9b      	ldrb	r3, [r3, #14]
 8009598:	3b01      	subs	r3, #1
 800959a:	b2da      	uxtb	r2, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	739a      	strb	r2, [r3, #14]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	7b9b      	ldrb	r3, [r3, #14]
 80095a4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80095a6:	69b8      	ldr	r0, [r7, #24]
 80095a8:	f00a fc8c 	bl	8013ec4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80095ac:	7dfb      	ldrb	r3, [r7, #23]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d143      	bne.n	800963a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	7b1b      	ldrb	r3, [r3, #12]
 80095bc:	f003 030f 	and.w	r3, r3, #15
 80095c0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	7b5b      	ldrb	r3, [r3, #13]
 80095c6:	f003 0302 	and.w	r3, r3, #2
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d011      	beq.n	80095f2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d106      	bne.n	80095e8 <pbuf_free+0x9c>
 80095da:	4b1d      	ldr	r3, [pc, #116]	; (8009650 <pbuf_free+0x104>)
 80095dc:	f240 22ff 	movw	r2, #767	; 0x2ff
 80095e0:	491f      	ldr	r1, [pc, #124]	; (8009660 <pbuf_free+0x114>)
 80095e2:	481d      	ldr	r0, [pc, #116]	; (8009658 <pbuf_free+0x10c>)
 80095e4:	f00a fe56 	bl	8014294 <iprintf>
        pc->custom_free_function(p);
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	691b      	ldr	r3, [r3, #16]
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	4798      	blx	r3
 80095f0:	e01d      	b.n	800962e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80095f2:	7bfb      	ldrb	r3, [r7, #15]
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d104      	bne.n	8009602 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80095f8:	6879      	ldr	r1, [r7, #4]
 80095fa:	200c      	movs	r0, #12
 80095fc:	f7ff f8f6 	bl	80087ec <memp_free>
 8009600:	e015      	b.n	800962e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009602:	7bfb      	ldrb	r3, [r7, #15]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d104      	bne.n	8009612 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8009608:	6879      	ldr	r1, [r7, #4]
 800960a:	200b      	movs	r0, #11
 800960c:	f7ff f8ee 	bl	80087ec <memp_free>
 8009610:	e00d      	b.n	800962e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8009612:	7bfb      	ldrb	r3, [r7, #15]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d103      	bne.n	8009620 <pbuf_free+0xd4>
          mem_free(p);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f7fe fd33 	bl	8008084 <mem_free>
 800961e:	e006      	b.n	800962e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009620:	4b0b      	ldr	r3, [pc, #44]	; (8009650 <pbuf_free+0x104>)
 8009622:	f240 320f 	movw	r2, #783	; 0x30f
 8009626:	490f      	ldr	r1, [pc, #60]	; (8009664 <pbuf_free+0x118>)
 8009628:	480b      	ldr	r0, [pc, #44]	; (8009658 <pbuf_free+0x10c>)
 800962a:	f00a fe33 	bl	8014294 <iprintf>
        }
      }
      count++;
 800962e:	7ffb      	ldrb	r3, [r7, #31]
 8009630:	3301      	adds	r3, #1
 8009632:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	607b      	str	r3, [r7, #4]
 8009638:	e001      	b.n	800963e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800963a:	2300      	movs	r3, #0
 800963c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d199      	bne.n	8009578 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009644:	7ffb      	ldrb	r3, [r7, #31]
}
 8009646:	4618      	mov	r0, r3
 8009648:	3720      	adds	r7, #32
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	08015844 	.word	0x08015844
 8009654:	080159a8 	.word	0x080159a8
 8009658:	080158a4 	.word	0x080158a4
 800965c:	080159d4 	.word	0x080159d4
 8009660:	080159ec 	.word	0x080159ec
 8009664:	08015a10 	.word	0x08015a10

08009668 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009668:	b480      	push	{r7}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009670:	2300      	movs	r3, #0
 8009672:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009674:	e005      	b.n	8009682 <pbuf_clen+0x1a>
    ++len;
 8009676:	89fb      	ldrh	r3, [r7, #14]
 8009678:	3301      	adds	r3, #1
 800967a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d1f6      	bne.n	8009676 <pbuf_clen+0xe>
  }
  return len;
 8009688:	89fb      	ldrh	r3, [r7, #14]
}
 800968a:	4618      	mov	r0, r3
 800968c:	3714      	adds	r7, #20
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr
	...

08009698 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d016      	beq.n	80096d4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80096a6:	f00a fbff 	bl	8013ea8 <sys_arch_protect>
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	7b9b      	ldrb	r3, [r3, #14]
 80096b0:	3301      	adds	r3, #1
 80096b2:	b2da      	uxtb	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	739a      	strb	r2, [r3, #14]
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f00a fc03 	bl	8013ec4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	7b9b      	ldrb	r3, [r3, #14]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d106      	bne.n	80096d4 <pbuf_ref+0x3c>
 80096c6:	4b05      	ldr	r3, [pc, #20]	; (80096dc <pbuf_ref+0x44>)
 80096c8:	f240 3242 	movw	r2, #834	; 0x342
 80096cc:	4904      	ldr	r1, [pc, #16]	; (80096e0 <pbuf_ref+0x48>)
 80096ce:	4805      	ldr	r0, [pc, #20]	; (80096e4 <pbuf_ref+0x4c>)
 80096d0:	f00a fde0 	bl	8014294 <iprintf>
  }
}
 80096d4:	bf00      	nop
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	08015844 	.word	0x08015844
 80096e0:	08015a24 	.word	0x08015a24
 80096e4:	080158a4 	.word	0x080158a4

080096e8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d002      	beq.n	80096fe <pbuf_cat+0x16>
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d107      	bne.n	800970e <pbuf_cat+0x26>
 80096fe:	4b20      	ldr	r3, [pc, #128]	; (8009780 <pbuf_cat+0x98>)
 8009700:	f240 3259 	movw	r2, #857	; 0x359
 8009704:	491f      	ldr	r1, [pc, #124]	; (8009784 <pbuf_cat+0x9c>)
 8009706:	4820      	ldr	r0, [pc, #128]	; (8009788 <pbuf_cat+0xa0>)
 8009708:	f00a fdc4 	bl	8014294 <iprintf>
 800970c:	e034      	b.n	8009778 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	60fb      	str	r3, [r7, #12]
 8009712:	e00a      	b.n	800972a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	891a      	ldrh	r2, [r3, #8]
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	891b      	ldrh	r3, [r3, #8]
 800971c:	4413      	add	r3, r2
 800971e:	b29a      	uxth	r2, r3
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	60fb      	str	r3, [r7, #12]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d1f0      	bne.n	8009714 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	891a      	ldrh	r2, [r3, #8]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	895b      	ldrh	r3, [r3, #10]
 800973a:	429a      	cmp	r2, r3
 800973c:	d006      	beq.n	800974c <pbuf_cat+0x64>
 800973e:	4b10      	ldr	r3, [pc, #64]	; (8009780 <pbuf_cat+0x98>)
 8009740:	f240 3262 	movw	r2, #866	; 0x362
 8009744:	4911      	ldr	r1, [pc, #68]	; (800978c <pbuf_cat+0xa4>)
 8009746:	4810      	ldr	r0, [pc, #64]	; (8009788 <pbuf_cat+0xa0>)
 8009748:	f00a fda4 	bl	8014294 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d006      	beq.n	8009762 <pbuf_cat+0x7a>
 8009754:	4b0a      	ldr	r3, [pc, #40]	; (8009780 <pbuf_cat+0x98>)
 8009756:	f240 3263 	movw	r2, #867	; 0x363
 800975a:	490d      	ldr	r1, [pc, #52]	; (8009790 <pbuf_cat+0xa8>)
 800975c:	480a      	ldr	r0, [pc, #40]	; (8009788 <pbuf_cat+0xa0>)
 800975e:	f00a fd99 	bl	8014294 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	891a      	ldrh	r2, [r3, #8]
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	891b      	ldrh	r3, [r3, #8]
 800976a:	4413      	add	r3, r2
 800976c:	b29a      	uxth	r2, r3
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	683a      	ldr	r2, [r7, #0]
 8009776:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	08015844 	.word	0x08015844
 8009784:	08015a38 	.word	0x08015a38
 8009788:	080158a4 	.word	0x080158a4
 800978c:	08015a70 	.word	0x08015a70
 8009790:	08015aa0 	.word	0x08015aa0

08009794 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800979e:	6839      	ldr	r1, [r7, #0]
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f7ff ffa1 	bl	80096e8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80097a6:	6838      	ldr	r0, [r7, #0]
 80097a8:	f7ff ff76 	bl	8009698 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80097ac:	bf00      	nop
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b086      	sub	sp, #24
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80097be:	2300      	movs	r3, #0
 80097c0:	617b      	str	r3, [r7, #20]
 80097c2:	2300      	movs	r3, #0
 80097c4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d008      	beq.n	80097de <pbuf_copy+0x2a>
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d005      	beq.n	80097de <pbuf_copy+0x2a>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	891a      	ldrh	r2, [r3, #8]
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	891b      	ldrh	r3, [r3, #8]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d209      	bcs.n	80097f2 <pbuf_copy+0x3e>
 80097de:	4b57      	ldr	r3, [pc, #348]	; (800993c <pbuf_copy+0x188>)
 80097e0:	f240 32c9 	movw	r2, #969	; 0x3c9
 80097e4:	4956      	ldr	r1, [pc, #344]	; (8009940 <pbuf_copy+0x18c>)
 80097e6:	4857      	ldr	r0, [pc, #348]	; (8009944 <pbuf_copy+0x190>)
 80097e8:	f00a fd54 	bl	8014294 <iprintf>
 80097ec:	f06f 030f 	mvn.w	r3, #15
 80097f0:	e09f      	b.n	8009932 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	895b      	ldrh	r3, [r3, #10]
 80097f6:	461a      	mov	r2, r3
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	1ad2      	subs	r2, r2, r3
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	895b      	ldrh	r3, [r3, #10]
 8009800:	4619      	mov	r1, r3
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	1acb      	subs	r3, r1, r3
 8009806:	429a      	cmp	r2, r3
 8009808:	d306      	bcc.n	8009818 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	895b      	ldrh	r3, [r3, #10]
 800980e:	461a      	mov	r2, r3
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	1ad3      	subs	r3, r2, r3
 8009814:	60fb      	str	r3, [r7, #12]
 8009816:	e005      	b.n	8009824 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	895b      	ldrh	r3, [r3, #10]
 800981c:	461a      	mov	r2, r3
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	1ad3      	subs	r3, r2, r3
 8009822:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	18d0      	adds	r0, r2, r3
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	685a      	ldr	r2, [r3, #4]
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	4413      	add	r3, r2
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	4619      	mov	r1, r3
 8009838:	f00a fc81 	bl	801413e <memcpy>
    offset_to += len;
 800983c:	697a      	ldr	r2, [r7, #20]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	4413      	add	r3, r2
 8009842:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	4413      	add	r3, r2
 800984a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	895b      	ldrh	r3, [r3, #10]
 8009850:	461a      	mov	r2, r3
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	4293      	cmp	r3, r2
 8009856:	d906      	bls.n	8009866 <pbuf_copy+0xb2>
 8009858:	4b38      	ldr	r3, [pc, #224]	; (800993c <pbuf_copy+0x188>)
 800985a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800985e:	493a      	ldr	r1, [pc, #232]	; (8009948 <pbuf_copy+0x194>)
 8009860:	4838      	ldr	r0, [pc, #224]	; (8009944 <pbuf_copy+0x190>)
 8009862:	f00a fd17 	bl	8014294 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	895b      	ldrh	r3, [r3, #10]
 800986a:	461a      	mov	r2, r3
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	4293      	cmp	r3, r2
 8009870:	d906      	bls.n	8009880 <pbuf_copy+0xcc>
 8009872:	4b32      	ldr	r3, [pc, #200]	; (800993c <pbuf_copy+0x188>)
 8009874:	f240 32da 	movw	r2, #986	; 0x3da
 8009878:	4934      	ldr	r1, [pc, #208]	; (800994c <pbuf_copy+0x198>)
 800987a:	4832      	ldr	r0, [pc, #200]	; (8009944 <pbuf_copy+0x190>)
 800987c:	f00a fd0a 	bl	8014294 <iprintf>
    if (offset_from >= p_from->len) {
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	895b      	ldrh	r3, [r3, #10]
 8009884:	461a      	mov	r2, r3
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	4293      	cmp	r3, r2
 800988a:	d304      	bcc.n	8009896 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800988c:	2300      	movs	r3, #0
 800988e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	895b      	ldrh	r3, [r3, #10]
 800989a:	461a      	mov	r2, r3
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	4293      	cmp	r3, r2
 80098a0:	d114      	bne.n	80098cc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80098a2:	2300      	movs	r3, #0
 80098a4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10c      	bne.n	80098cc <pbuf_copy+0x118>
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d009      	beq.n	80098cc <pbuf_copy+0x118>
 80098b8:	4b20      	ldr	r3, [pc, #128]	; (800993c <pbuf_copy+0x188>)
 80098ba:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80098be:	4924      	ldr	r1, [pc, #144]	; (8009950 <pbuf_copy+0x19c>)
 80098c0:	4820      	ldr	r0, [pc, #128]	; (8009944 <pbuf_copy+0x190>)
 80098c2:	f00a fce7 	bl	8014294 <iprintf>
 80098c6:	f06f 030f 	mvn.w	r3, #15
 80098ca:	e032      	b.n	8009932 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d013      	beq.n	80098fa <pbuf_copy+0x146>
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	895a      	ldrh	r2, [r3, #10]
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	891b      	ldrh	r3, [r3, #8]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d10d      	bne.n	80098fa <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d009      	beq.n	80098fa <pbuf_copy+0x146>
 80098e6:	4b15      	ldr	r3, [pc, #84]	; (800993c <pbuf_copy+0x188>)
 80098e8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80098ec:	4919      	ldr	r1, [pc, #100]	; (8009954 <pbuf_copy+0x1a0>)
 80098ee:	4815      	ldr	r0, [pc, #84]	; (8009944 <pbuf_copy+0x190>)
 80098f0:	f00a fcd0 	bl	8014294 <iprintf>
 80098f4:	f06f 0305 	mvn.w	r3, #5
 80098f8:	e01b      	b.n	8009932 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d013      	beq.n	8009928 <pbuf_copy+0x174>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	895a      	ldrh	r2, [r3, #10]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	891b      	ldrh	r3, [r3, #8]
 8009908:	429a      	cmp	r2, r3
 800990a:	d10d      	bne.n	8009928 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d009      	beq.n	8009928 <pbuf_copy+0x174>
 8009914:	4b09      	ldr	r3, [pc, #36]	; (800993c <pbuf_copy+0x188>)
 8009916:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800991a:	490e      	ldr	r1, [pc, #56]	; (8009954 <pbuf_copy+0x1a0>)
 800991c:	4809      	ldr	r0, [pc, #36]	; (8009944 <pbuf_copy+0x190>)
 800991e:	f00a fcb9 	bl	8014294 <iprintf>
 8009922:	f06f 0305 	mvn.w	r3, #5
 8009926:	e004      	b.n	8009932 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	f47f af61 	bne.w	80097f2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3718      	adds	r7, #24
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	08015844 	.word	0x08015844
 8009940:	08015aec 	.word	0x08015aec
 8009944:	080158a4 	.word	0x080158a4
 8009948:	08015b1c 	.word	0x08015b1c
 800994c:	08015b34 	.word	0x08015b34
 8009950:	08015b50 	.word	0x08015b50
 8009954:	08015b60 	.word	0x08015b60

08009958 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b088      	sub	sp, #32
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	4611      	mov	r1, r2
 8009964:	461a      	mov	r2, r3
 8009966:	460b      	mov	r3, r1
 8009968:	80fb      	strh	r3, [r7, #6]
 800996a:	4613      	mov	r3, r2
 800996c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800996e:	2300      	movs	r3, #0
 8009970:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8009972:	2300      	movs	r3, #0
 8009974:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d108      	bne.n	800998e <pbuf_copy_partial+0x36>
 800997c:	4b2b      	ldr	r3, [pc, #172]	; (8009a2c <pbuf_copy_partial+0xd4>)
 800997e:	f240 420a 	movw	r2, #1034	; 0x40a
 8009982:	492b      	ldr	r1, [pc, #172]	; (8009a30 <pbuf_copy_partial+0xd8>)
 8009984:	482b      	ldr	r0, [pc, #172]	; (8009a34 <pbuf_copy_partial+0xdc>)
 8009986:	f00a fc85 	bl	8014294 <iprintf>
 800998a:	2300      	movs	r3, #0
 800998c:	e04a      	b.n	8009a24 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d108      	bne.n	80099a6 <pbuf_copy_partial+0x4e>
 8009994:	4b25      	ldr	r3, [pc, #148]	; (8009a2c <pbuf_copy_partial+0xd4>)
 8009996:	f240 420b 	movw	r2, #1035	; 0x40b
 800999a:	4927      	ldr	r1, [pc, #156]	; (8009a38 <pbuf_copy_partial+0xe0>)
 800999c:	4825      	ldr	r0, [pc, #148]	; (8009a34 <pbuf_copy_partial+0xdc>)
 800999e:	f00a fc79 	bl	8014294 <iprintf>
 80099a2:	2300      	movs	r3, #0
 80099a4:	e03e      	b.n	8009a24 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	61fb      	str	r3, [r7, #28]
 80099aa:	e034      	b.n	8009a16 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80099ac:	88bb      	ldrh	r3, [r7, #4]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00a      	beq.n	80099c8 <pbuf_copy_partial+0x70>
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	895b      	ldrh	r3, [r3, #10]
 80099b6:	88ba      	ldrh	r2, [r7, #4]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d305      	bcc.n	80099c8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	895b      	ldrh	r3, [r3, #10]
 80099c0:	88ba      	ldrh	r2, [r7, #4]
 80099c2:	1ad3      	subs	r3, r2, r3
 80099c4:	80bb      	strh	r3, [r7, #4]
 80099c6:	e023      	b.n	8009a10 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80099c8:	69fb      	ldr	r3, [r7, #28]
 80099ca:	895a      	ldrh	r2, [r3, #10]
 80099cc:	88bb      	ldrh	r3, [r7, #4]
 80099ce:	1ad3      	subs	r3, r2, r3
 80099d0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80099d2:	8b3a      	ldrh	r2, [r7, #24]
 80099d4:	88fb      	ldrh	r3, [r7, #6]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d901      	bls.n	80099de <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80099da:	88fb      	ldrh	r3, [r7, #6]
 80099dc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80099de:	8b7b      	ldrh	r3, [r7, #26]
 80099e0:	68ba      	ldr	r2, [r7, #8]
 80099e2:	18d0      	adds	r0, r2, r3
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	685a      	ldr	r2, [r3, #4]
 80099e8:	88bb      	ldrh	r3, [r7, #4]
 80099ea:	4413      	add	r3, r2
 80099ec:	8b3a      	ldrh	r2, [r7, #24]
 80099ee:	4619      	mov	r1, r3
 80099f0:	f00a fba5 	bl	801413e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80099f4:	8afa      	ldrh	r2, [r7, #22]
 80099f6:	8b3b      	ldrh	r3, [r7, #24]
 80099f8:	4413      	add	r3, r2
 80099fa:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80099fc:	8b7a      	ldrh	r2, [r7, #26]
 80099fe:	8b3b      	ldrh	r3, [r7, #24]
 8009a00:	4413      	add	r3, r2
 8009a02:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8009a04:	88fa      	ldrh	r2, [r7, #6]
 8009a06:	8b3b      	ldrh	r3, [r7, #24]
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	61fb      	str	r3, [r7, #28]
 8009a16:	88fb      	ldrh	r3, [r7, #6]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d002      	beq.n	8009a22 <pbuf_copy_partial+0xca>
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d1c4      	bne.n	80099ac <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8009a22:	8afb      	ldrh	r3, [r7, #22]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3720      	adds	r7, #32
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	08015844 	.word	0x08015844
 8009a30:	08015b8c 	.word	0x08015b8c
 8009a34:	080158a4 	.word	0x080158a4
 8009a38:	08015bac 	.word	0x08015bac

08009a3c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	4603      	mov	r3, r0
 8009a44:	603a      	str	r2, [r7, #0]
 8009a46:	71fb      	strb	r3, [r7, #7]
 8009a48:	460b      	mov	r3, r1
 8009a4a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	8919      	ldrh	r1, [r3, #8]
 8009a50:	88ba      	ldrh	r2, [r7, #4]
 8009a52:	79fb      	ldrb	r3, [r7, #7]
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7ff fa95 	bl	8008f84 <pbuf_alloc>
 8009a5a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d101      	bne.n	8009a66 <pbuf_clone+0x2a>
    return NULL;
 8009a62:	2300      	movs	r3, #0
 8009a64:	e011      	b.n	8009a8a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f7ff fea3 	bl	80097b4 <pbuf_copy>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009a72:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d006      	beq.n	8009a88 <pbuf_clone+0x4c>
 8009a7a:	4b06      	ldr	r3, [pc, #24]	; (8009a94 <pbuf_clone+0x58>)
 8009a7c:	f240 5224 	movw	r2, #1316	; 0x524
 8009a80:	4905      	ldr	r1, [pc, #20]	; (8009a98 <pbuf_clone+0x5c>)
 8009a82:	4806      	ldr	r0, [pc, #24]	; (8009a9c <pbuf_clone+0x60>)
 8009a84:	f00a fc06 	bl	8014294 <iprintf>
  return q;
 8009a88:	68fb      	ldr	r3, [r7, #12]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	08015844 	.word	0x08015844
 8009a98:	08015cb8 	.word	0x08015cb8
 8009a9c:	080158a4 	.word	0x080158a4

08009aa0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009aa4:	f00a fc0e 	bl	80142c4 <rand>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8009ab6:	b29a      	uxth	r2, r3
 8009ab8:	4b01      	ldr	r3, [pc, #4]	; (8009ac0 <tcp_init+0x20>)
 8009aba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8009abc:	bf00      	nop
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	20000024 	.word	0x20000024

08009ac4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	7d1b      	ldrb	r3, [r3, #20]
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d105      	bne.n	8009ae0 <tcp_free+0x1c>
 8009ad4:	4b06      	ldr	r3, [pc, #24]	; (8009af0 <tcp_free+0x2c>)
 8009ad6:	22d4      	movs	r2, #212	; 0xd4
 8009ad8:	4906      	ldr	r1, [pc, #24]	; (8009af4 <tcp_free+0x30>)
 8009ada:	4807      	ldr	r0, [pc, #28]	; (8009af8 <tcp_free+0x34>)
 8009adc:	f00a fbda 	bl	8014294 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8009ae0:	6879      	ldr	r1, [r7, #4]
 8009ae2:	2001      	movs	r0, #1
 8009ae4:	f7fe fe82 	bl	80087ec <memp_free>
}
 8009ae8:	bf00      	nop
 8009aea:	3708      	adds	r7, #8
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	08015d44 	.word	0x08015d44
 8009af4:	08015d74 	.word	0x08015d74
 8009af8:	08015d88 	.word	0x08015d88

08009afc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	7d1b      	ldrb	r3, [r3, #20]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d105      	bne.n	8009b18 <tcp_free_listen+0x1c>
 8009b0c:	4b06      	ldr	r3, [pc, #24]	; (8009b28 <tcp_free_listen+0x2c>)
 8009b0e:	22df      	movs	r2, #223	; 0xdf
 8009b10:	4906      	ldr	r1, [pc, #24]	; (8009b2c <tcp_free_listen+0x30>)
 8009b12:	4807      	ldr	r0, [pc, #28]	; (8009b30 <tcp_free_listen+0x34>)
 8009b14:	f00a fbbe 	bl	8014294 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009b18:	6879      	ldr	r1, [r7, #4]
 8009b1a:	2002      	movs	r0, #2
 8009b1c:	f7fe fe66 	bl	80087ec <memp_free>
}
 8009b20:	bf00      	nop
 8009b22:	3708      	adds	r7, #8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	08015d44 	.word	0x08015d44
 8009b2c:	08015db0 	.word	0x08015db0
 8009b30:	08015d88 	.word	0x08015d88

08009b34 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009b38:	f000 fea2 	bl	800a880 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009b3c:	4b07      	ldr	r3, [pc, #28]	; (8009b5c <tcp_tmr+0x28>)
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	3301      	adds	r3, #1
 8009b42:	b2da      	uxtb	r2, r3
 8009b44:	4b05      	ldr	r3, [pc, #20]	; (8009b5c <tcp_tmr+0x28>)
 8009b46:	701a      	strb	r2, [r3, #0]
 8009b48:	4b04      	ldr	r3, [pc, #16]	; (8009b5c <tcp_tmr+0x28>)
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	f003 0301 	and.w	r3, r3, #1
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d001      	beq.n	8009b58 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8009b54:	f000 fb54 	bl	800a200 <tcp_slowtmr>
  }
}
 8009b58:	bf00      	nop
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	20018bf9 	.word	0x20018bf9

08009b60 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d105      	bne.n	8009b7c <tcp_remove_listener+0x1c>
 8009b70:	4b0d      	ldr	r3, [pc, #52]	; (8009ba8 <tcp_remove_listener+0x48>)
 8009b72:	22ff      	movs	r2, #255	; 0xff
 8009b74:	490d      	ldr	r1, [pc, #52]	; (8009bac <tcp_remove_listener+0x4c>)
 8009b76:	480e      	ldr	r0, [pc, #56]	; (8009bb0 <tcp_remove_listener+0x50>)
 8009b78:	f00a fb8c 	bl	8014294 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	60fb      	str	r3, [r7, #12]
 8009b80:	e00a      	b.n	8009b98 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d102      	bne.n	8009b92 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	60fb      	str	r3, [r7, #12]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d1f1      	bne.n	8009b82 <tcp_remove_listener+0x22>
    }
  }
}
 8009b9e:	bf00      	nop
 8009ba0:	bf00      	nop
 8009ba2:	3710      	adds	r7, #16
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	08015d44 	.word	0x08015d44
 8009bac:	08015dcc 	.word	0x08015dcc
 8009bb0:	08015d88 	.word	0x08015d88

08009bb4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d106      	bne.n	8009bd0 <tcp_listen_closed+0x1c>
 8009bc2:	4b14      	ldr	r3, [pc, #80]	; (8009c14 <tcp_listen_closed+0x60>)
 8009bc4:	f240 1211 	movw	r2, #273	; 0x111
 8009bc8:	4913      	ldr	r1, [pc, #76]	; (8009c18 <tcp_listen_closed+0x64>)
 8009bca:	4814      	ldr	r0, [pc, #80]	; (8009c1c <tcp_listen_closed+0x68>)
 8009bcc:	f00a fb62 	bl	8014294 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	7d1b      	ldrb	r3, [r3, #20]
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d006      	beq.n	8009be6 <tcp_listen_closed+0x32>
 8009bd8:	4b0e      	ldr	r3, [pc, #56]	; (8009c14 <tcp_listen_closed+0x60>)
 8009bda:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009bde:	4910      	ldr	r1, [pc, #64]	; (8009c20 <tcp_listen_closed+0x6c>)
 8009be0:	480e      	ldr	r0, [pc, #56]	; (8009c1c <tcp_listen_closed+0x68>)
 8009be2:	f00a fb57 	bl	8014294 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009be6:	2301      	movs	r3, #1
 8009be8:	60fb      	str	r3, [r7, #12]
 8009bea:	e00b      	b.n	8009c04 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009bec:	4a0d      	ldr	r2, [pc, #52]	; (8009c24 <tcp_listen_closed+0x70>)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	6879      	ldr	r1, [r7, #4]
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7ff ffb1 	bl	8009b60 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	3301      	adds	r3, #1
 8009c02:	60fb      	str	r3, [r7, #12]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2b03      	cmp	r3, #3
 8009c08:	d9f0      	bls.n	8009bec <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8009c0a:	bf00      	nop
 8009c0c:	bf00      	nop
 8009c0e:	3710      	adds	r7, #16
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	08015d44 	.word	0x08015d44
 8009c18:	08015df4 	.word	0x08015df4
 8009c1c:	08015d88 	.word	0x08015d88
 8009c20:	08015e00 	.word	0x08015e00
 8009c24:	08018104 	.word	0x08018104

08009c28 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009c28:	b5b0      	push	{r4, r5, r7, lr}
 8009c2a:	b088      	sub	sp, #32
 8009c2c:	af04      	add	r7, sp, #16
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	460b      	mov	r3, r1
 8009c32:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d106      	bne.n	8009c48 <tcp_close_shutdown+0x20>
 8009c3a:	4b63      	ldr	r3, [pc, #396]	; (8009dc8 <tcp_close_shutdown+0x1a0>)
 8009c3c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009c40:	4962      	ldr	r1, [pc, #392]	; (8009dcc <tcp_close_shutdown+0x1a4>)
 8009c42:	4863      	ldr	r0, [pc, #396]	; (8009dd0 <tcp_close_shutdown+0x1a8>)
 8009c44:	f00a fb26 	bl	8014294 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009c48:	78fb      	ldrb	r3, [r7, #3]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d066      	beq.n	8009d1c <tcp_close_shutdown+0xf4>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	7d1b      	ldrb	r3, [r3, #20]
 8009c52:	2b04      	cmp	r3, #4
 8009c54:	d003      	beq.n	8009c5e <tcp_close_shutdown+0x36>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	7d1b      	ldrb	r3, [r3, #20]
 8009c5a:	2b07      	cmp	r3, #7
 8009c5c:	d15e      	bne.n	8009d1c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d104      	bne.n	8009c70 <tcp_close_shutdown+0x48>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c6a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009c6e:	d055      	beq.n	8009d1c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	8b5b      	ldrh	r3, [r3, #26]
 8009c74:	f003 0310 	and.w	r3, r3, #16
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d106      	bne.n	8009c8a <tcp_close_shutdown+0x62>
 8009c7c:	4b52      	ldr	r3, [pc, #328]	; (8009dc8 <tcp_close_shutdown+0x1a0>)
 8009c7e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009c82:	4954      	ldr	r1, [pc, #336]	; (8009dd4 <tcp_close_shutdown+0x1ac>)
 8009c84:	4852      	ldr	r0, [pc, #328]	; (8009dd0 <tcp_close_shutdown+0x1a8>)
 8009c86:	f00a fb05 	bl	8014294 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009c92:	687d      	ldr	r5, [r7, #4]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	3304      	adds	r3, #4
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	8ad2      	ldrh	r2, [r2, #22]
 8009c9c:	6879      	ldr	r1, [r7, #4]
 8009c9e:	8b09      	ldrh	r1, [r1, #24]
 8009ca0:	9102      	str	r1, [sp, #8]
 8009ca2:	9201      	str	r2, [sp, #4]
 8009ca4:	9300      	str	r3, [sp, #0]
 8009ca6:	462b      	mov	r3, r5
 8009ca8:	4622      	mov	r2, r4
 8009caa:	4601      	mov	r1, r0
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f004 fe91 	bl	800e9d4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f001 f8c6 	bl	800ae44 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009cb8:	4b47      	ldr	r3, [pc, #284]	; (8009dd8 <tcp_close_shutdown+0x1b0>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d105      	bne.n	8009cce <tcp_close_shutdown+0xa6>
 8009cc2:	4b45      	ldr	r3, [pc, #276]	; (8009dd8 <tcp_close_shutdown+0x1b0>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	4a43      	ldr	r2, [pc, #268]	; (8009dd8 <tcp_close_shutdown+0x1b0>)
 8009cca:	6013      	str	r3, [r2, #0]
 8009ccc:	e013      	b.n	8009cf6 <tcp_close_shutdown+0xce>
 8009cce:	4b42      	ldr	r3, [pc, #264]	; (8009dd8 <tcp_close_shutdown+0x1b0>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	60fb      	str	r3, [r7, #12]
 8009cd4:	e00c      	b.n	8009cf0 <tcp_close_shutdown+0xc8>
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d104      	bne.n	8009cea <tcp_close_shutdown+0xc2>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	68da      	ldr	r2, [r3, #12]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	60da      	str	r2, [r3, #12]
 8009ce8:	e005      	b.n	8009cf6 <tcp_close_shutdown+0xce>
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	60fb      	str	r3, [r7, #12]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d1ef      	bne.n	8009cd6 <tcp_close_shutdown+0xae>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	60da      	str	r2, [r3, #12]
 8009cfc:	4b37      	ldr	r3, [pc, #220]	; (8009ddc <tcp_close_shutdown+0x1b4>)
 8009cfe:	2201      	movs	r2, #1
 8009d00:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8009d02:	4b37      	ldr	r3, [pc, #220]	; (8009de0 <tcp_close_shutdown+0x1b8>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d102      	bne.n	8009d12 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009d0c:	f003 fd5e 	bl	800d7cc <tcp_trigger_input_pcb_close>
 8009d10:	e002      	b.n	8009d18 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f7ff fed6 	bl	8009ac4 <tcp_free>
      }
      return ERR_OK;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	e050      	b.n	8009dbe <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	7d1b      	ldrb	r3, [r3, #20]
 8009d20:	2b02      	cmp	r3, #2
 8009d22:	d03b      	beq.n	8009d9c <tcp_close_shutdown+0x174>
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	dc44      	bgt.n	8009db2 <tcp_close_shutdown+0x18a>
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d002      	beq.n	8009d32 <tcp_close_shutdown+0x10a>
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d02a      	beq.n	8009d86 <tcp_close_shutdown+0x15e>
 8009d30:	e03f      	b.n	8009db2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	8adb      	ldrh	r3, [r3, #22]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d021      	beq.n	8009d7e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009d3a:	4b2a      	ldr	r3, [pc, #168]	; (8009de4 <tcp_close_shutdown+0x1bc>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d105      	bne.n	8009d50 <tcp_close_shutdown+0x128>
 8009d44:	4b27      	ldr	r3, [pc, #156]	; (8009de4 <tcp_close_shutdown+0x1bc>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	4a26      	ldr	r2, [pc, #152]	; (8009de4 <tcp_close_shutdown+0x1bc>)
 8009d4c:	6013      	str	r3, [r2, #0]
 8009d4e:	e013      	b.n	8009d78 <tcp_close_shutdown+0x150>
 8009d50:	4b24      	ldr	r3, [pc, #144]	; (8009de4 <tcp_close_shutdown+0x1bc>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	60bb      	str	r3, [r7, #8]
 8009d56:	e00c      	b.n	8009d72 <tcp_close_shutdown+0x14a>
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d104      	bne.n	8009d6c <tcp_close_shutdown+0x144>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	68da      	ldr	r2, [r3, #12]
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	60da      	str	r2, [r3, #12]
 8009d6a:	e005      	b.n	8009d78 <tcp_close_shutdown+0x150>
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	60bb      	str	r3, [r7, #8]
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1ef      	bne.n	8009d58 <tcp_close_shutdown+0x130>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7ff fea0 	bl	8009ac4 <tcp_free>
      break;
 8009d84:	e01a      	b.n	8009dbc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f7ff ff14 	bl	8009bb4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009d8c:	6879      	ldr	r1, [r7, #4]
 8009d8e:	4816      	ldr	r0, [pc, #88]	; (8009de8 <tcp_close_shutdown+0x1c0>)
 8009d90:	f001 f8a8 	bl	800aee4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f7ff feb1 	bl	8009afc <tcp_free_listen>
      break;
 8009d9a:	e00f      	b.n	8009dbc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009d9c:	6879      	ldr	r1, [r7, #4]
 8009d9e:	480e      	ldr	r0, [pc, #56]	; (8009dd8 <tcp_close_shutdown+0x1b0>)
 8009da0:	f001 f8a0 	bl	800aee4 <tcp_pcb_remove>
 8009da4:	4b0d      	ldr	r3, [pc, #52]	; (8009ddc <tcp_close_shutdown+0x1b4>)
 8009da6:	2201      	movs	r2, #1
 8009da8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f7ff fe8a 	bl	8009ac4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009db0:	e004      	b.n	8009dbc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 f81a 	bl	8009dec <tcp_close_shutdown_fin>
 8009db8:	4603      	mov	r3, r0
 8009dba:	e000      	b.n	8009dbe <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bdb0      	pop	{r4, r5, r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	08015d44 	.word	0x08015d44
 8009dcc:	08015e18 	.word	0x08015e18
 8009dd0:	08015d88 	.word	0x08015d88
 8009dd4:	08015e38 	.word	0x08015e38
 8009dd8:	20018bf0 	.word	0x20018bf0
 8009ddc:	20018bf8 	.word	0x20018bf8
 8009de0:	20018c30 	.word	0x20018c30
 8009de4:	20018be8 	.word	0x20018be8
 8009de8:	20018bec 	.word	0x20018bec

08009dec <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d106      	bne.n	8009e08 <tcp_close_shutdown_fin+0x1c>
 8009dfa:	4b2e      	ldr	r3, [pc, #184]	; (8009eb4 <tcp_close_shutdown_fin+0xc8>)
 8009dfc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009e00:	492d      	ldr	r1, [pc, #180]	; (8009eb8 <tcp_close_shutdown_fin+0xcc>)
 8009e02:	482e      	ldr	r0, [pc, #184]	; (8009ebc <tcp_close_shutdown_fin+0xd0>)
 8009e04:	f00a fa46 	bl	8014294 <iprintf>

  switch (pcb->state) {
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	7d1b      	ldrb	r3, [r3, #20]
 8009e0c:	2b07      	cmp	r3, #7
 8009e0e:	d020      	beq.n	8009e52 <tcp_close_shutdown_fin+0x66>
 8009e10:	2b07      	cmp	r3, #7
 8009e12:	dc2b      	bgt.n	8009e6c <tcp_close_shutdown_fin+0x80>
 8009e14:	2b03      	cmp	r3, #3
 8009e16:	d002      	beq.n	8009e1e <tcp_close_shutdown_fin+0x32>
 8009e18:	2b04      	cmp	r3, #4
 8009e1a:	d00d      	beq.n	8009e38 <tcp_close_shutdown_fin+0x4c>
 8009e1c:	e026      	b.n	8009e6c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f003 fee6 	bl	800dbf0 <tcp_send_fin>
 8009e24:	4603      	mov	r3, r0
 8009e26:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d11f      	bne.n	8009e70 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2205      	movs	r2, #5
 8009e34:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009e36:	e01b      	b.n	8009e70 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f003 fed9 	bl	800dbf0 <tcp_send_fin>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d114      	bne.n	8009e74 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2205      	movs	r2, #5
 8009e4e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009e50:	e010      	b.n	8009e74 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f003 fecc 	bl	800dbf0 <tcp_send_fin>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d109      	bne.n	8009e78 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2209      	movs	r2, #9
 8009e68:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009e6a:	e005      	b.n	8009e78 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	e01c      	b.n	8009eaa <tcp_close_shutdown_fin+0xbe>
      break;
 8009e70:	bf00      	nop
 8009e72:	e002      	b.n	8009e7a <tcp_close_shutdown_fin+0x8e>
      break;
 8009e74:	bf00      	nop
 8009e76:	e000      	b.n	8009e7a <tcp_close_shutdown_fin+0x8e>
      break;
 8009e78:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d103      	bne.n	8009e8a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f003 fff2 	bl	800de6c <tcp_output>
 8009e88:	e00d      	b.n	8009ea6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8009e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e92:	d108      	bne.n	8009ea6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	8b5b      	ldrh	r3, [r3, #26]
 8009e98:	f043 0308 	orr.w	r3, r3, #8
 8009e9c:	b29a      	uxth	r2, r3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	e001      	b.n	8009eaa <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8009ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	08015d44 	.word	0x08015d44
 8009eb8:	08015df4 	.word	0x08015df4
 8009ebc:	08015d88 	.word	0x08015d88

08009ec0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d109      	bne.n	8009ee2 <tcp_close+0x22>
 8009ece:	4b0f      	ldr	r3, [pc, #60]	; (8009f0c <tcp_close+0x4c>)
 8009ed0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009ed4:	490e      	ldr	r1, [pc, #56]	; (8009f10 <tcp_close+0x50>)
 8009ed6:	480f      	ldr	r0, [pc, #60]	; (8009f14 <tcp_close+0x54>)
 8009ed8:	f00a f9dc 	bl	8014294 <iprintf>
 8009edc:	f06f 030f 	mvn.w	r3, #15
 8009ee0:	e00f      	b.n	8009f02 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	7d1b      	ldrb	r3, [r3, #20]
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d006      	beq.n	8009ef8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	8b5b      	ldrh	r3, [r3, #26]
 8009eee:	f043 0310 	orr.w	r3, r3, #16
 8009ef2:	b29a      	uxth	r2, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009ef8:	2101      	movs	r1, #1
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f7ff fe94 	bl	8009c28 <tcp_close_shutdown>
 8009f00:	4603      	mov	r3, r0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	08015d44 	.word	0x08015d44
 8009f10:	08015e54 	.word	0x08015e54
 8009f14:	08015d88 	.word	0x08015d88

08009f18 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b08e      	sub	sp, #56	; 0x38
 8009f1c:	af04      	add	r7, sp, #16
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d107      	bne.n	8009f38 <tcp_abandon+0x20>
 8009f28:	4b52      	ldr	r3, [pc, #328]	; (800a074 <tcp_abandon+0x15c>)
 8009f2a:	f240 223d 	movw	r2, #573	; 0x23d
 8009f2e:	4952      	ldr	r1, [pc, #328]	; (800a078 <tcp_abandon+0x160>)
 8009f30:	4852      	ldr	r0, [pc, #328]	; (800a07c <tcp_abandon+0x164>)
 8009f32:	f00a f9af 	bl	8014294 <iprintf>
 8009f36:	e099      	b.n	800a06c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	7d1b      	ldrb	r3, [r3, #20]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d106      	bne.n	8009f4e <tcp_abandon+0x36>
 8009f40:	4b4c      	ldr	r3, [pc, #304]	; (800a074 <tcp_abandon+0x15c>)
 8009f42:	f44f 7210 	mov.w	r2, #576	; 0x240
 8009f46:	494e      	ldr	r1, [pc, #312]	; (800a080 <tcp_abandon+0x168>)
 8009f48:	484c      	ldr	r0, [pc, #304]	; (800a07c <tcp_abandon+0x164>)
 8009f4a:	f00a f9a3 	bl	8014294 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	7d1b      	ldrb	r3, [r3, #20]
 8009f52:	2b0a      	cmp	r3, #10
 8009f54:	d107      	bne.n	8009f66 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009f56:	6879      	ldr	r1, [r7, #4]
 8009f58:	484a      	ldr	r0, [pc, #296]	; (800a084 <tcp_abandon+0x16c>)
 8009f5a:	f000 ffc3 	bl	800aee4 <tcp_pcb_remove>
    tcp_free(pcb);
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f7ff fdb0 	bl	8009ac4 <tcp_free>
 8009f64:	e082      	b.n	800a06c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8009f66:	2300      	movs	r3, #0
 8009f68:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f72:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f78:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f80:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	7d1b      	ldrb	r3, [r3, #20]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d126      	bne.n	8009fde <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	8adb      	ldrh	r3, [r3, #22]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d02e      	beq.n	8009ff6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009f98:	4b3b      	ldr	r3, [pc, #236]	; (800a088 <tcp_abandon+0x170>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d105      	bne.n	8009fae <tcp_abandon+0x96>
 8009fa2:	4b39      	ldr	r3, [pc, #228]	; (800a088 <tcp_abandon+0x170>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	4a37      	ldr	r2, [pc, #220]	; (800a088 <tcp_abandon+0x170>)
 8009faa:	6013      	str	r3, [r2, #0]
 8009fac:	e013      	b.n	8009fd6 <tcp_abandon+0xbe>
 8009fae:	4b36      	ldr	r3, [pc, #216]	; (800a088 <tcp_abandon+0x170>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	61fb      	str	r3, [r7, #28]
 8009fb4:	e00c      	b.n	8009fd0 <tcp_abandon+0xb8>
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d104      	bne.n	8009fca <tcp_abandon+0xb2>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	68da      	ldr	r2, [r3, #12]
 8009fc4:	69fb      	ldr	r3, [r7, #28]
 8009fc6:	60da      	str	r2, [r3, #12]
 8009fc8:	e005      	b.n	8009fd6 <tcp_abandon+0xbe>
 8009fca:	69fb      	ldr	r3, [r7, #28]
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	61fb      	str	r3, [r7, #28]
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1ef      	bne.n	8009fb6 <tcp_abandon+0x9e>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	60da      	str	r2, [r3, #12]
 8009fdc:	e00b      	b.n	8009ff6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	8adb      	ldrh	r3, [r3, #22]
 8009fe6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009fe8:	6879      	ldr	r1, [r7, #4]
 8009fea:	4828      	ldr	r0, [pc, #160]	; (800a08c <tcp_abandon+0x174>)
 8009fec:	f000 ff7a 	bl	800aee4 <tcp_pcb_remove>
 8009ff0:	4b27      	ldr	r3, [pc, #156]	; (800a090 <tcp_abandon+0x178>)
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d004      	beq.n	800a008 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a002:	4618      	mov	r0, r3
 800a004:	f000 fd1c 	bl	800aa40 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d004      	beq.n	800a01a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a014:	4618      	mov	r0, r3
 800a016:	f000 fd13 	bl	800aa40 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d004      	beq.n	800a02c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a026:	4618      	mov	r0, r3
 800a028:	f000 fd0a 	bl	800aa40 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800a02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00e      	beq.n	800a050 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a032:	6879      	ldr	r1, [r7, #4]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	3304      	adds	r3, #4
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	8b12      	ldrh	r2, [r2, #24]
 800a03c:	9202      	str	r2, [sp, #8]
 800a03e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a040:	9201      	str	r2, [sp, #4]
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	460b      	mov	r3, r1
 800a046:	697a      	ldr	r2, [r7, #20]
 800a048:	69b9      	ldr	r1, [r7, #24]
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f004 fcc2 	bl	800e9d4 <tcp_rst>
    }
    last_state = pcb->state;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	7d1b      	ldrb	r3, [r3, #20]
 800a054:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f7ff fd34 	bl	8009ac4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d004      	beq.n	800a06c <tcp_abandon+0x154>
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	f06f 010c 	mvn.w	r1, #12
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	4798      	blx	r3
  }
}
 800a06c:	3728      	adds	r7, #40	; 0x28
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	08015d44 	.word	0x08015d44
 800a078:	08015e88 	.word	0x08015e88
 800a07c:	08015d88 	.word	0x08015d88
 800a080:	08015ea4 	.word	0x08015ea4
 800a084:	20018bf4 	.word	0x20018bf4
 800a088:	20018be8 	.word	0x20018be8
 800a08c:	20018bf0 	.word	0x20018bf0
 800a090:	20018bf8 	.word	0x20018bf8

0800a094 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a09c:	2101      	movs	r1, #1
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f7ff ff3a 	bl	8009f18 <tcp_abandon>
}
 800a0a4:	bf00      	nop
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d106      	bne.n	800a0c8 <tcp_update_rcv_ann_wnd+0x1c>
 800a0ba:	4b25      	ldr	r3, [pc, #148]	; (800a150 <tcp_update_rcv_ann_wnd+0xa4>)
 800a0bc:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a0c0:	4924      	ldr	r1, [pc, #144]	; (800a154 <tcp_update_rcv_ann_wnd+0xa8>)
 800a0c2:	4825      	ldr	r0, [pc, #148]	; (800a158 <tcp_update_rcv_ann_wnd+0xac>)
 800a0c4:	f00a f8e6 	bl	8014294 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a0d0:	4413      	add	r3, r2
 800a0d2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800a0dc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800a0e0:	bf28      	it	cs
 800a0e2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800a0e6:	b292      	uxth	r2, r2
 800a0e8:	4413      	add	r3, r2
 800a0ea:	68fa      	ldr	r2, [r7, #12]
 800a0ec:	1ad3      	subs	r3, r2, r3
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	db08      	blt.n	800a104 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0fe:	68fa      	ldr	r2, [r7, #12]
 800a100:	1ad3      	subs	r3, r2, r3
 800a102:	e020      	b.n	800a146 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a10c:	1ad3      	subs	r3, r2, r3
 800a10e:	2b00      	cmp	r3, #0
 800a110:	dd03      	ble.n	800a11a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a118:	e014      	b.n	800a144 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a122:	1ad3      	subs	r3, r2, r3
 800a124:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a12c:	d306      	bcc.n	800a13c <tcp_update_rcv_ann_wnd+0x90>
 800a12e:	4b08      	ldr	r3, [pc, #32]	; (800a150 <tcp_update_rcv_ann_wnd+0xa4>)
 800a130:	f240 32b6 	movw	r2, #950	; 0x3b6
 800a134:	4909      	ldr	r1, [pc, #36]	; (800a15c <tcp_update_rcv_ann_wnd+0xb0>)
 800a136:	4808      	ldr	r0, [pc, #32]	; (800a158 <tcp_update_rcv_ann_wnd+0xac>)
 800a138:	f00a f8ac 	bl	8014294 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	b29a      	uxth	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800a144:	2300      	movs	r3, #0
  }
}
 800a146:	4618      	mov	r0, r3
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	08015d44 	.word	0x08015d44
 800a154:	08015fa0 	.word	0x08015fa0
 800a158:	08015d88 	.word	0x08015d88
 800a15c:	08015fc4 	.word	0x08015fc4

0800a160 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	460b      	mov	r3, r1
 800a16a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d107      	bne.n	800a182 <tcp_recved+0x22>
 800a172:	4b1f      	ldr	r3, [pc, #124]	; (800a1f0 <tcp_recved+0x90>)
 800a174:	f240 32cf 	movw	r2, #975	; 0x3cf
 800a178:	491e      	ldr	r1, [pc, #120]	; (800a1f4 <tcp_recved+0x94>)
 800a17a:	481f      	ldr	r0, [pc, #124]	; (800a1f8 <tcp_recved+0x98>)
 800a17c:	f00a f88a 	bl	8014294 <iprintf>
 800a180:	e032      	b.n	800a1e8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	7d1b      	ldrb	r3, [r3, #20]
 800a186:	2b01      	cmp	r3, #1
 800a188:	d106      	bne.n	800a198 <tcp_recved+0x38>
 800a18a:	4b19      	ldr	r3, [pc, #100]	; (800a1f0 <tcp_recved+0x90>)
 800a18c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800a190:	491a      	ldr	r1, [pc, #104]	; (800a1fc <tcp_recved+0x9c>)
 800a192:	4819      	ldr	r0, [pc, #100]	; (800a1f8 <tcp_recved+0x98>)
 800a194:	f00a f87e 	bl	8014294 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a19c:	887b      	ldrh	r3, [r7, #2]
 800a19e:	4413      	add	r3, r2
 800a1a0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a1a2:	89fb      	ldrh	r3, [r7, #14]
 800a1a4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a1a8:	d804      	bhi.n	800a1b4 <tcp_recved+0x54>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1ae:	89fa      	ldrh	r2, [r7, #14]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d204      	bcs.n	800a1be <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a1ba:	851a      	strh	r2, [r3, #40]	; 0x28
 800a1bc:	e002      	b.n	800a1c4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	89fa      	ldrh	r2, [r7, #14]
 800a1c2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f7ff ff71 	bl	800a0ac <tcp_update_rcv_ann_wnd>
 800a1ca:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a1d2:	d309      	bcc.n	800a1e8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	8b5b      	ldrh	r3, [r3, #26]
 800a1d8:	f043 0302 	orr.w	r3, r3, #2
 800a1dc:	b29a      	uxth	r2, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f003 fe42 	bl	800de6c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	08015d44 	.word	0x08015d44
 800a1f4:	08015fe0 	.word	0x08015fe0
 800a1f8:	08015d88 	.word	0x08015d88
 800a1fc:	08015ff8 	.word	0x08015ff8

0800a200 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a200:	b5b0      	push	{r4, r5, r7, lr}
 800a202:	b090      	sub	sp, #64	; 0x40
 800a204:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a206:	2300      	movs	r3, #0
 800a208:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800a20c:	4b94      	ldr	r3, [pc, #592]	; (800a460 <tcp_slowtmr+0x260>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	3301      	adds	r3, #1
 800a212:	4a93      	ldr	r2, [pc, #588]	; (800a460 <tcp_slowtmr+0x260>)
 800a214:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a216:	4b93      	ldr	r3, [pc, #588]	; (800a464 <tcp_slowtmr+0x264>)
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	3301      	adds	r3, #1
 800a21c:	b2da      	uxtb	r2, r3
 800a21e:	4b91      	ldr	r3, [pc, #580]	; (800a464 <tcp_slowtmr+0x264>)
 800a220:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a222:	2300      	movs	r3, #0
 800a224:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800a226:	4b90      	ldr	r3, [pc, #576]	; (800a468 <tcp_slowtmr+0x268>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a22c:	e29f      	b.n	800a76e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a230:	7d1b      	ldrb	r3, [r3, #20]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d106      	bne.n	800a244 <tcp_slowtmr+0x44>
 800a236:	4b8d      	ldr	r3, [pc, #564]	; (800a46c <tcp_slowtmr+0x26c>)
 800a238:	f240 42be 	movw	r2, #1214	; 0x4be
 800a23c:	498c      	ldr	r1, [pc, #560]	; (800a470 <tcp_slowtmr+0x270>)
 800a23e:	488d      	ldr	r0, [pc, #564]	; (800a474 <tcp_slowtmr+0x274>)
 800a240:	f00a f828 	bl	8014294 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a246:	7d1b      	ldrb	r3, [r3, #20]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d106      	bne.n	800a25a <tcp_slowtmr+0x5a>
 800a24c:	4b87      	ldr	r3, [pc, #540]	; (800a46c <tcp_slowtmr+0x26c>)
 800a24e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a252:	4989      	ldr	r1, [pc, #548]	; (800a478 <tcp_slowtmr+0x278>)
 800a254:	4887      	ldr	r0, [pc, #540]	; (800a474 <tcp_slowtmr+0x274>)
 800a256:	f00a f81d 	bl	8014294 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a25c:	7d1b      	ldrb	r3, [r3, #20]
 800a25e:	2b0a      	cmp	r3, #10
 800a260:	d106      	bne.n	800a270 <tcp_slowtmr+0x70>
 800a262:	4b82      	ldr	r3, [pc, #520]	; (800a46c <tcp_slowtmr+0x26c>)
 800a264:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a268:	4984      	ldr	r1, [pc, #528]	; (800a47c <tcp_slowtmr+0x27c>)
 800a26a:	4882      	ldr	r0, [pc, #520]	; (800a474 <tcp_slowtmr+0x274>)
 800a26c:	f00a f812 	bl	8014294 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a272:	7f9a      	ldrb	r2, [r3, #30]
 800a274:	4b7b      	ldr	r3, [pc, #492]	; (800a464 <tcp_slowtmr+0x264>)
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	429a      	cmp	r2, r3
 800a27a:	d105      	bne.n	800a288 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800a27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a27e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800a286:	e272      	b.n	800a76e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a288:	4b76      	ldr	r3, [pc, #472]	; (800a464 <tcp_slowtmr+0x264>)
 800a28a:	781a      	ldrb	r2, [r3, #0]
 800a28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800a290:	2300      	movs	r3, #0
 800a292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800a296:	2300      	movs	r3, #0
 800a298:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a29e:	7d1b      	ldrb	r3, [r3, #20]
 800a2a0:	2b02      	cmp	r3, #2
 800a2a2:	d10a      	bne.n	800a2ba <tcp_slowtmr+0xba>
 800a2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a2aa:	2b05      	cmp	r3, #5
 800a2ac:	d905      	bls.n	800a2ba <tcp_slowtmr+0xba>
      ++pcb_remove;
 800a2ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a2b8:	e11e      	b.n	800a4f8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a2c0:	2b0b      	cmp	r3, #11
 800a2c2:	d905      	bls.n	800a2d0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800a2c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a2ce:	e113      	b.n	800a4f8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d075      	beq.n	800a3c6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d006      	beq.n	800a2f0 <tcp_slowtmr+0xf0>
 800a2e2:	4b62      	ldr	r3, [pc, #392]	; (800a46c <tcp_slowtmr+0x26c>)
 800a2e4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a2e8:	4965      	ldr	r1, [pc, #404]	; (800a480 <tcp_slowtmr+0x280>)
 800a2ea:	4862      	ldr	r0, [pc, #392]	; (800a474 <tcp_slowtmr+0x274>)
 800a2ec:	f009 ffd2 	bl	8014294 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d106      	bne.n	800a306 <tcp_slowtmr+0x106>
 800a2f8:	4b5c      	ldr	r3, [pc, #368]	; (800a46c <tcp_slowtmr+0x26c>)
 800a2fa:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a2fe:	4961      	ldr	r1, [pc, #388]	; (800a484 <tcp_slowtmr+0x284>)
 800a300:	485c      	ldr	r0, [pc, #368]	; (800a474 <tcp_slowtmr+0x274>)
 800a302:	f009 ffc7 	bl	8014294 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a308:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a30c:	2b0b      	cmp	r3, #11
 800a30e:	d905      	bls.n	800a31c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800a310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a314:	3301      	adds	r3, #1
 800a316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a31a:	e0ed      	b.n	800a4f8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a31e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a322:	3b01      	subs	r3, #1
 800a324:	4a58      	ldr	r2, [pc, #352]	; (800a488 <tcp_slowtmr+0x288>)
 800a326:	5cd3      	ldrb	r3, [r2, r3]
 800a328:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800a32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a32c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a330:	7c7a      	ldrb	r2, [r7, #17]
 800a332:	429a      	cmp	r2, r3
 800a334:	d907      	bls.n	800a346 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800a336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a338:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a33c:	3301      	adds	r3, #1
 800a33e:	b2da      	uxtb	r2, r3
 800a340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a342:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800a346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a348:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a34c:	7c7a      	ldrb	r2, [r7, #17]
 800a34e:	429a      	cmp	r2, r3
 800a350:	f200 80d2 	bhi.w	800a4f8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800a354:	2301      	movs	r3, #1
 800a356:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800a358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d108      	bne.n	800a374 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a362:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a364:	f004 fc2a 	bl	800ebbc <tcp_zero_window_probe>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d014      	beq.n	800a398 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800a36e:	2300      	movs	r3, #0
 800a370:	623b      	str	r3, [r7, #32]
 800a372:	e011      	b.n	800a398 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a376:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a37a:	4619      	mov	r1, r3
 800a37c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a37e:	f003 faef 	bl	800d960 <tcp_split_unsent_seg>
 800a382:	4603      	mov	r3, r0
 800a384:	2b00      	cmp	r3, #0
 800a386:	d107      	bne.n	800a398 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800a388:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a38a:	f003 fd6f 	bl	800de6c <tcp_output>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d101      	bne.n	800a398 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800a394:	2300      	movs	r3, #0
 800a396:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800a398:	6a3b      	ldr	r3, [r7, #32]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	f000 80ac 	beq.w	800a4f8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800a3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3aa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a3ae:	2b06      	cmp	r3, #6
 800a3b0:	f200 80a2 	bhi.w	800a4f8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800a3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	b2da      	uxtb	r2, r3
 800a3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800a3c4:	e098      	b.n	800a4f8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	db0f      	blt.n	800a3f0 <tcp_slowtmr+0x1f0>
 800a3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a3d6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d008      	beq.n	800a3f0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800a3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	b21a      	sxth	r2, r3
 800a3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ee:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800a3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	db7b      	blt.n	800a4f8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a400:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a402:	f004 f825 	bl	800e450 <tcp_rexmit_rto_prepare>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d007      	beq.n	800a41c <tcp_slowtmr+0x21c>
 800a40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a40e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a410:	2b00      	cmp	r3, #0
 800a412:	d171      	bne.n	800a4f8 <tcp_slowtmr+0x2f8>
 800a414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d06d      	beq.n	800a4f8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800a41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a41e:	7d1b      	ldrb	r3, [r3, #20]
 800a420:	2b02      	cmp	r3, #2
 800a422:	d03a      	beq.n	800a49a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a426:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a42a:	2b0c      	cmp	r3, #12
 800a42c:	bf28      	it	cs
 800a42e:	230c      	movcs	r3, #12
 800a430:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a434:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a438:	10db      	asrs	r3, r3, #3
 800a43a:	b21b      	sxth	r3, r3
 800a43c:	461a      	mov	r2, r3
 800a43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a440:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a444:	4413      	add	r3, r2
 800a446:	7efa      	ldrb	r2, [r7, #27]
 800a448:	4910      	ldr	r1, [pc, #64]	; (800a48c <tcp_slowtmr+0x28c>)
 800a44a:	5c8a      	ldrb	r2, [r1, r2]
 800a44c:	4093      	lsls	r3, r2
 800a44e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a456:	4293      	cmp	r3, r2
 800a458:	dc1a      	bgt.n	800a490 <tcp_slowtmr+0x290>
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	b21a      	sxth	r2, r3
 800a45e:	e019      	b.n	800a494 <tcp_slowtmr+0x294>
 800a460:	20018be4 	.word	0x20018be4
 800a464:	20018bfa 	.word	0x20018bfa
 800a468:	20018bf0 	.word	0x20018bf0
 800a46c:	08015d44 	.word	0x08015d44
 800a470:	08016088 	.word	0x08016088
 800a474:	08015d88 	.word	0x08015d88
 800a478:	080160b4 	.word	0x080160b4
 800a47c:	080160e0 	.word	0x080160e0
 800a480:	08016110 	.word	0x08016110
 800a484:	08016144 	.word	0x08016144
 800a488:	080180fc 	.word	0x080180fc
 800a48c:	080180ec 	.word	0x080180ec
 800a490:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a496:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800a49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49c:	2200      	movs	r2, #0
 800a49e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	bf28      	it	cs
 800a4b0:	4613      	movcs	r3, r2
 800a4b2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800a4b4:	8a7b      	ldrh	r3, [r7, #18]
 800a4b6:	085b      	lsrs	r3, r3, #1
 800a4b8:	b29a      	uxth	r2, r3
 800a4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4bc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a4ca:	005b      	lsls	r3, r3, #1
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d206      	bcs.n	800a4e0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a4d6:	005b      	lsls	r3, r3, #1
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800a4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800a4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800a4f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4f4:	f004 f81c 	bl	800e530 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800a4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fa:	7d1b      	ldrb	r3, [r3, #20]
 800a4fc:	2b06      	cmp	r3, #6
 800a4fe:	d111      	bne.n	800a524 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800a500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a502:	8b5b      	ldrh	r3, [r3, #26]
 800a504:	f003 0310 	and.w	r3, r3, #16
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00b      	beq.n	800a524 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a50c:	4b9d      	ldr	r3, [pc, #628]	; (800a784 <tcp_slowtmr+0x584>)
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a512:	6a1b      	ldr	r3, [r3, #32]
 800a514:	1ad3      	subs	r3, r2, r3
 800a516:	2b28      	cmp	r3, #40	; 0x28
 800a518:	d904      	bls.n	800a524 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800a51a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a51e:	3301      	adds	r3, #1
 800a520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a526:	7a5b      	ldrb	r3, [r3, #9]
 800a528:	f003 0308 	and.w	r3, r3, #8
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d04c      	beq.n	800a5ca <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800a530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a532:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a534:	2b04      	cmp	r3, #4
 800a536:	d003      	beq.n	800a540 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800a538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800a53c:	2b07      	cmp	r3, #7
 800a53e:	d144      	bne.n	800a5ca <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a540:	4b90      	ldr	r3, [pc, #576]	; (800a784 <tcp_slowtmr+0x584>)
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a546:	6a1b      	ldr	r3, [r3, #32]
 800a548:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a550:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800a554:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800a558:	498b      	ldr	r1, [pc, #556]	; (800a788 <tcp_slowtmr+0x588>)
 800a55a:	fba1 1303 	umull	r1, r3, r1, r3
 800a55e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a560:	429a      	cmp	r2, r3
 800a562:	d90a      	bls.n	800a57a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800a564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a568:	3301      	adds	r3, #1
 800a56a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800a56e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a572:	3301      	adds	r3, #1
 800a574:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a578:	e027      	b.n	800a5ca <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a57a:	4b82      	ldr	r3, [pc, #520]	; (800a784 <tcp_slowtmr+0x584>)
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a580:	6a1b      	ldr	r3, [r3, #32]
 800a582:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a586:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a590:	4618      	mov	r0, r3
 800a592:	4b7e      	ldr	r3, [pc, #504]	; (800a78c <tcp_slowtmr+0x58c>)
 800a594:	fb00 f303 	mul.w	r3, r0, r3
 800a598:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800a59a:	497b      	ldr	r1, [pc, #492]	; (800a788 <tcp_slowtmr+0x588>)
 800a59c:	fba1 1303 	umull	r1, r3, r1, r3
 800a5a0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d911      	bls.n	800a5ca <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800a5a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5a8:	f004 fac8 	bl	800eb3c <tcp_keepalive>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800a5b2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d107      	bne.n	800a5ca <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800a5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5bc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	b2da      	uxtb	r2, r3
 800a5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800a5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d011      	beq.n	800a5f6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a5d2:	4b6c      	ldr	r3, [pc, #432]	; (800a784 <tcp_slowtmr+0x584>)
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d8:	6a1b      	ldr	r3, [r3, #32]
 800a5da:	1ad2      	subs	r2, r2, r3
 800a5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5de:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	005b      	lsls	r3, r3, #1
 800a5e8:	440b      	add	r3, r1
 800a5ea:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d302      	bcc.n	800a5f6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800a5f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5f2:	f000 fddb 	bl	800b1ac <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800a5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f8:	7d1b      	ldrb	r3, [r3, #20]
 800a5fa:	2b03      	cmp	r3, #3
 800a5fc:	d10b      	bne.n	800a616 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a5fe:	4b61      	ldr	r3, [pc, #388]	; (800a784 <tcp_slowtmr+0x584>)
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a604:	6a1b      	ldr	r3, [r3, #32]
 800a606:	1ad3      	subs	r3, r2, r3
 800a608:	2b28      	cmp	r3, #40	; 0x28
 800a60a:	d904      	bls.n	800a616 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800a60c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a610:	3301      	adds	r3, #1
 800a612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800a616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a618:	7d1b      	ldrb	r3, [r3, #20]
 800a61a:	2b09      	cmp	r3, #9
 800a61c:	d10b      	bne.n	800a636 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a61e:	4b59      	ldr	r3, [pc, #356]	; (800a784 <tcp_slowtmr+0x584>)
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a624:	6a1b      	ldr	r3, [r3, #32]
 800a626:	1ad3      	subs	r3, r2, r3
 800a628:	2bf0      	cmp	r3, #240	; 0xf0
 800a62a:	d904      	bls.n	800a636 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800a62c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a630:	3301      	adds	r3, #1
 800a632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a636:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d060      	beq.n	800a700 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a644:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a646:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a648:	f000 fbfc 	bl	800ae44 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d010      	beq.n	800a674 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a652:	4b4f      	ldr	r3, [pc, #316]	; (800a790 <tcp_slowtmr+0x590>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a658:	429a      	cmp	r2, r3
 800a65a:	d106      	bne.n	800a66a <tcp_slowtmr+0x46a>
 800a65c:	4b4d      	ldr	r3, [pc, #308]	; (800a794 <tcp_slowtmr+0x594>)
 800a65e:	f240 526d 	movw	r2, #1389	; 0x56d
 800a662:	494d      	ldr	r1, [pc, #308]	; (800a798 <tcp_slowtmr+0x598>)
 800a664:	484d      	ldr	r0, [pc, #308]	; (800a79c <tcp_slowtmr+0x59c>)
 800a666:	f009 fe15 	bl	8014294 <iprintf>
        prev->next = pcb->next;
 800a66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a66c:	68da      	ldr	r2, [r3, #12]
 800a66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a670:	60da      	str	r2, [r3, #12]
 800a672:	e00f      	b.n	800a694 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a674:	4b46      	ldr	r3, [pc, #280]	; (800a790 <tcp_slowtmr+0x590>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d006      	beq.n	800a68c <tcp_slowtmr+0x48c>
 800a67e:	4b45      	ldr	r3, [pc, #276]	; (800a794 <tcp_slowtmr+0x594>)
 800a680:	f240 5271 	movw	r2, #1393	; 0x571
 800a684:	4946      	ldr	r1, [pc, #280]	; (800a7a0 <tcp_slowtmr+0x5a0>)
 800a686:	4845      	ldr	r0, [pc, #276]	; (800a79c <tcp_slowtmr+0x59c>)
 800a688:	f009 fe04 	bl	8014294 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	4a3f      	ldr	r2, [pc, #252]	; (800a790 <tcp_slowtmr+0x590>)
 800a692:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800a694:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d013      	beq.n	800a6c4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a69e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a6a4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800a6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a8:	3304      	adds	r3, #4
 800a6aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6ac:	8ad2      	ldrh	r2, [r2, #22]
 800a6ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6b0:	8b09      	ldrh	r1, [r1, #24]
 800a6b2:	9102      	str	r1, [sp, #8]
 800a6b4:	9201      	str	r2, [sp, #4]
 800a6b6:	9300      	str	r3, [sp, #0]
 800a6b8:	462b      	mov	r3, r5
 800a6ba:	4622      	mov	r2, r4
 800a6bc:	4601      	mov	r1, r0
 800a6be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6c0:	f004 f988 	bl	800e9d4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6cc:	7d1b      	ldrb	r3, [r3, #20]
 800a6ce:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a6da:	6838      	ldr	r0, [r7, #0]
 800a6dc:	f7ff f9f2 	bl	8009ac4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800a6e0:	4b30      	ldr	r3, [pc, #192]	; (800a7a4 <tcp_slowtmr+0x5a4>)
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d004      	beq.n	800a6f6 <tcp_slowtmr+0x4f6>
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f06f 010c 	mvn.w	r1, #12
 800a6f2:	68b8      	ldr	r0, [r7, #8]
 800a6f4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a6f6:	4b2b      	ldr	r3, [pc, #172]	; (800a7a4 <tcp_slowtmr+0x5a4>)
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d037      	beq.n	800a76e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800a6fe:	e590      	b.n	800a222 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a702:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a70c:	7f1b      	ldrb	r3, [r3, #28]
 800a70e:	3301      	adds	r3, #1
 800a710:	b2da      	uxtb	r2, r3
 800a712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a714:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a718:	7f1a      	ldrb	r2, [r3, #28]
 800a71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71c:	7f5b      	ldrb	r3, [r3, #29]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d325      	bcc.n	800a76e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800a722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a724:	2200      	movs	r2, #0
 800a726:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a728:	4b1e      	ldr	r3, [pc, #120]	; (800a7a4 <tcp_slowtmr+0x5a4>)
 800a72a:	2200      	movs	r2, #0
 800a72c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00b      	beq.n	800a750 <tcp_slowtmr+0x550>
 800a738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a73e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a740:	6912      	ldr	r2, [r2, #16]
 800a742:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a744:	4610      	mov	r0, r2
 800a746:	4798      	blx	r3
 800a748:	4603      	mov	r3, r0
 800a74a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a74e:	e002      	b.n	800a756 <tcp_slowtmr+0x556>
 800a750:	2300      	movs	r3, #0
 800a752:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800a756:	4b13      	ldr	r3, [pc, #76]	; (800a7a4 <tcp_slowtmr+0x5a4>)
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d000      	beq.n	800a760 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800a75e:	e560      	b.n	800a222 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a760:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a764:	2b00      	cmp	r3, #0
 800a766:	d102      	bne.n	800a76e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800a768:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a76a:	f003 fb7f 	bl	800de6c <tcp_output>
  while (pcb != NULL) {
 800a76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a770:	2b00      	cmp	r3, #0
 800a772:	f47f ad5c 	bne.w	800a22e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a776:	2300      	movs	r3, #0
 800a778:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800a77a:	4b0b      	ldr	r3, [pc, #44]	; (800a7a8 <tcp_slowtmr+0x5a8>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a780:	e067      	b.n	800a852 <tcp_slowtmr+0x652>
 800a782:	bf00      	nop
 800a784:	20018be4 	.word	0x20018be4
 800a788:	10624dd3 	.word	0x10624dd3
 800a78c:	000124f8 	.word	0x000124f8
 800a790:	20018bf0 	.word	0x20018bf0
 800a794:	08015d44 	.word	0x08015d44
 800a798:	0801617c 	.word	0x0801617c
 800a79c:	08015d88 	.word	0x08015d88
 800a7a0:	080161a8 	.word	0x080161a8
 800a7a4:	20018bf8 	.word	0x20018bf8
 800a7a8:	20018bf4 	.word	0x20018bf4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ae:	7d1b      	ldrb	r3, [r3, #20]
 800a7b0:	2b0a      	cmp	r3, #10
 800a7b2:	d006      	beq.n	800a7c2 <tcp_slowtmr+0x5c2>
 800a7b4:	4b2b      	ldr	r3, [pc, #172]	; (800a864 <tcp_slowtmr+0x664>)
 800a7b6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800a7ba:	492b      	ldr	r1, [pc, #172]	; (800a868 <tcp_slowtmr+0x668>)
 800a7bc:	482b      	ldr	r0, [pc, #172]	; (800a86c <tcp_slowtmr+0x66c>)
 800a7be:	f009 fd69 	bl	8014294 <iprintf>
    pcb_remove = 0;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a7c8:	4b29      	ldr	r3, [pc, #164]	; (800a870 <tcp_slowtmr+0x670>)
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ce:	6a1b      	ldr	r3, [r3, #32]
 800a7d0:	1ad3      	subs	r3, r2, r3
 800a7d2:	2bf0      	cmp	r3, #240	; 0xf0
 800a7d4:	d904      	bls.n	800a7e0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800a7d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7da:	3301      	adds	r3, #1
 800a7dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a7e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d02f      	beq.n	800a848 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a7e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7ea:	f000 fb2b 	bl	800ae44 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d010      	beq.n	800a816 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a7f4:	4b1f      	ldr	r3, [pc, #124]	; (800a874 <tcp_slowtmr+0x674>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d106      	bne.n	800a80c <tcp_slowtmr+0x60c>
 800a7fe:	4b19      	ldr	r3, [pc, #100]	; (800a864 <tcp_slowtmr+0x664>)
 800a800:	f240 52af 	movw	r2, #1455	; 0x5af
 800a804:	491c      	ldr	r1, [pc, #112]	; (800a878 <tcp_slowtmr+0x678>)
 800a806:	4819      	ldr	r0, [pc, #100]	; (800a86c <tcp_slowtmr+0x66c>)
 800a808:	f009 fd44 	bl	8014294 <iprintf>
        prev->next = pcb->next;
 800a80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80e:	68da      	ldr	r2, [r3, #12]
 800a810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a812:	60da      	str	r2, [r3, #12]
 800a814:	e00f      	b.n	800a836 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a816:	4b17      	ldr	r3, [pc, #92]	; (800a874 <tcp_slowtmr+0x674>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d006      	beq.n	800a82e <tcp_slowtmr+0x62e>
 800a820:	4b10      	ldr	r3, [pc, #64]	; (800a864 <tcp_slowtmr+0x664>)
 800a822:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a826:	4915      	ldr	r1, [pc, #84]	; (800a87c <tcp_slowtmr+0x67c>)
 800a828:	4810      	ldr	r0, [pc, #64]	; (800a86c <tcp_slowtmr+0x66c>)
 800a82a:	f009 fd33 	bl	8014294 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	4a10      	ldr	r2, [pc, #64]	; (800a874 <tcp_slowtmr+0x674>)
 800a834:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a838:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800a83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a840:	69f8      	ldr	r0, [r7, #28]
 800a842:	f7ff f93f 	bl	8009ac4 <tcp_free>
 800a846:	e004      	b.n	800a852 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800a848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a84a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a854:	2b00      	cmp	r3, #0
 800a856:	d1a9      	bne.n	800a7ac <tcp_slowtmr+0x5ac>
    }
  }
}
 800a858:	bf00      	nop
 800a85a:	bf00      	nop
 800a85c:	3730      	adds	r7, #48	; 0x30
 800a85e:	46bd      	mov	sp, r7
 800a860:	bdb0      	pop	{r4, r5, r7, pc}
 800a862:	bf00      	nop
 800a864:	08015d44 	.word	0x08015d44
 800a868:	080161d4 	.word	0x080161d4
 800a86c:	08015d88 	.word	0x08015d88
 800a870:	20018be4 	.word	0x20018be4
 800a874:	20018bf4 	.word	0x20018bf4
 800a878:	08016204 	.word	0x08016204
 800a87c:	0801622c 	.word	0x0801622c

0800a880 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a886:	4b2d      	ldr	r3, [pc, #180]	; (800a93c <tcp_fasttmr+0xbc>)
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	3301      	adds	r3, #1
 800a88c:	b2da      	uxtb	r2, r3
 800a88e:	4b2b      	ldr	r3, [pc, #172]	; (800a93c <tcp_fasttmr+0xbc>)
 800a890:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a892:	4b2b      	ldr	r3, [pc, #172]	; (800a940 <tcp_fasttmr+0xc0>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a898:	e048      	b.n	800a92c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	7f9a      	ldrb	r2, [r3, #30]
 800a89e:	4b27      	ldr	r3, [pc, #156]	; (800a93c <tcp_fasttmr+0xbc>)
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d03f      	beq.n	800a926 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a8a6:	4b25      	ldr	r3, [pc, #148]	; (800a93c <tcp_fasttmr+0xbc>)
 800a8a8:	781a      	ldrb	r2, [r3, #0]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	8b5b      	ldrh	r3, [r3, #26]
 800a8b2:	f003 0301 	and.w	r3, r3, #1
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d010      	beq.n	800a8dc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	8b5b      	ldrh	r3, [r3, #26]
 800a8be:	f043 0302 	orr.w	r3, r3, #2
 800a8c2:	b29a      	uxth	r2, r3
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f003 facf 	bl	800de6c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	8b5b      	ldrh	r3, [r3, #26]
 800a8d2:	f023 0303 	bic.w	r3, r3, #3
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	8b5b      	ldrh	r3, [r3, #26]
 800a8e0:	f003 0308 	and.w	r3, r3, #8
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d009      	beq.n	800a8fc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	8b5b      	ldrh	r3, [r3, #26]
 800a8ec:	f023 0308 	bic.w	r3, r3, #8
 800a8f0:	b29a      	uxth	r2, r3
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f7ff fa78 	bl	8009dec <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a906:	2b00      	cmp	r3, #0
 800a908:	d00a      	beq.n	800a920 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a90a:	4b0e      	ldr	r3, [pc, #56]	; (800a944 <tcp_fasttmr+0xc4>)
 800a90c:	2200      	movs	r2, #0
 800a90e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 f819 	bl	800a948 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a916:	4b0b      	ldr	r3, [pc, #44]	; (800a944 <tcp_fasttmr+0xc4>)
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d000      	beq.n	800a920 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a91e:	e7b8      	b.n	800a892 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	607b      	str	r3, [r7, #4]
 800a924:	e002      	b.n	800a92c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	68db      	ldr	r3, [r3, #12]
 800a92a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d1b3      	bne.n	800a89a <tcp_fasttmr+0x1a>
    }
  }
}
 800a932:	bf00      	nop
 800a934:	bf00      	nop
 800a936:	3708      	adds	r7, #8
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	20018bfa 	.word	0x20018bfa
 800a940:	20018bf0 	.word	0x20018bf0
 800a944:	20018bf8 	.word	0x20018bf8

0800a948 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a948:	b590      	push	{r4, r7, lr}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d109      	bne.n	800a96a <tcp_process_refused_data+0x22>
 800a956:	4b37      	ldr	r3, [pc, #220]	; (800aa34 <tcp_process_refused_data+0xec>)
 800a958:	f240 6209 	movw	r2, #1545	; 0x609
 800a95c:	4936      	ldr	r1, [pc, #216]	; (800aa38 <tcp_process_refused_data+0xf0>)
 800a95e:	4837      	ldr	r0, [pc, #220]	; (800aa3c <tcp_process_refused_data+0xf4>)
 800a960:	f009 fc98 	bl	8014294 <iprintf>
 800a964:	f06f 030f 	mvn.w	r3, #15
 800a968:	e060      	b.n	800aa2c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a96e:	7b5b      	ldrb	r3, [r3, #13]
 800a970:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a976:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a984:	2b00      	cmp	r3, #0
 800a986:	d00b      	beq.n	800a9a0 <tcp_process_refused_data+0x58>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6918      	ldr	r0, [r3, #16]
 800a992:	2300      	movs	r3, #0
 800a994:	68ba      	ldr	r2, [r7, #8]
 800a996:	6879      	ldr	r1, [r7, #4]
 800a998:	47a0      	blx	r4
 800a99a:	4603      	mov	r3, r0
 800a99c:	73fb      	strb	r3, [r7, #15]
 800a99e:	e007      	b.n	800a9b0 <tcp_process_refused_data+0x68>
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	68ba      	ldr	r2, [r7, #8]
 800a9a4:	6879      	ldr	r1, [r7, #4]
 800a9a6:	2000      	movs	r0, #0
 800a9a8:	f000 f8a4 	bl	800aaf4 <tcp_recv_null>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a9b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d12a      	bne.n	800aa0e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a9b8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ba:	f003 0320 	and.w	r3, r3, #32
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d033      	beq.n	800aa2a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9c6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a9ca:	d005      	beq.n	800a9d8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	b29a      	uxth	r2, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d00b      	beq.n	800a9fa <tcp_process_refused_data+0xb2>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6918      	ldr	r0, [r3, #16]
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	6879      	ldr	r1, [r7, #4]
 800a9f2:	47a0      	blx	r4
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	73fb      	strb	r3, [r7, #15]
 800a9f8:	e001      	b.n	800a9fe <tcp_process_refused_data+0xb6>
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a9fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa02:	f113 0f0d 	cmn.w	r3, #13
 800aa06:	d110      	bne.n	800aa2a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800aa08:	f06f 030c 	mvn.w	r3, #12
 800aa0c:	e00e      	b.n	800aa2c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800aa0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa12:	f113 0f0d 	cmn.w	r3, #13
 800aa16:	d102      	bne.n	800aa1e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800aa18:	f06f 030c 	mvn.w	r3, #12
 800aa1c:	e006      	b.n	800aa2c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	68ba      	ldr	r2, [r7, #8]
 800aa22:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800aa24:	f06f 0304 	mvn.w	r3, #4
 800aa28:	e000      	b.n	800aa2c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800aa2a:	2300      	movs	r3, #0
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3714      	adds	r7, #20
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd90      	pop	{r4, r7, pc}
 800aa34:	08015d44 	.word	0x08015d44
 800aa38:	08016254 	.word	0x08016254
 800aa3c:	08015d88 	.word	0x08015d88

0800aa40 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800aa48:	e007      	b.n	800aa5a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 f80a 	bl	800aa6a <tcp_seg_free>
    seg = next;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d1f4      	bne.n	800aa4a <tcp_segs_free+0xa>
  }
}
 800aa60:	bf00      	nop
 800aa62:	bf00      	nop
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b082      	sub	sp, #8
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d00c      	beq.n	800aa92 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d004      	beq.n	800aa8a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7fe fd61 	bl	800954c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800aa8a:	6879      	ldr	r1, [r7, #4]
 800aa8c:	2003      	movs	r0, #3
 800aa8e:	f7fd fead 	bl	80087ec <memp_free>
  }
}
 800aa92:	bf00      	nop
 800aa94:	3708      	adds	r7, #8
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
	...

0800aa9c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d106      	bne.n	800aab8 <tcp_seg_copy+0x1c>
 800aaaa:	4b0f      	ldr	r3, [pc, #60]	; (800aae8 <tcp_seg_copy+0x4c>)
 800aaac:	f240 6282 	movw	r2, #1666	; 0x682
 800aab0:	490e      	ldr	r1, [pc, #56]	; (800aaec <tcp_seg_copy+0x50>)
 800aab2:	480f      	ldr	r0, [pc, #60]	; (800aaf0 <tcp_seg_copy+0x54>)
 800aab4:	f009 fbee 	bl	8014294 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800aab8:	2003      	movs	r0, #3
 800aaba:	f7fd fe21 	bl	8008700 <memp_malloc>
 800aabe:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d101      	bne.n	800aaca <tcp_seg_copy+0x2e>
    return NULL;
 800aac6:	2300      	movs	r3, #0
 800aac8:	e00a      	b.n	800aae0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800aaca:	2210      	movs	r2, #16
 800aacc:	6879      	ldr	r1, [r7, #4]
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	f009 fb35 	bl	801413e <memcpy>
  pbuf_ref(cseg->p);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	4618      	mov	r0, r3
 800aada:	f7fe fddd 	bl	8009698 <pbuf_ref>
  return cseg;
 800aade:	68fb      	ldr	r3, [r7, #12]
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3710      	adds	r7, #16
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}
 800aae8:	08015d44 	.word	0x08015d44
 800aaec:	08016298 	.word	0x08016298
 800aaf0:	08015d88 	.word	0x08015d88

0800aaf4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	607a      	str	r2, [r7, #4]
 800ab00:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d109      	bne.n	800ab1c <tcp_recv_null+0x28>
 800ab08:	4b12      	ldr	r3, [pc, #72]	; (800ab54 <tcp_recv_null+0x60>)
 800ab0a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ab0e:	4912      	ldr	r1, [pc, #72]	; (800ab58 <tcp_recv_null+0x64>)
 800ab10:	4812      	ldr	r0, [pc, #72]	; (800ab5c <tcp_recv_null+0x68>)
 800ab12:	f009 fbbf 	bl	8014294 <iprintf>
 800ab16:	f06f 030f 	mvn.w	r3, #15
 800ab1a:	e016      	b.n	800ab4a <tcp_recv_null+0x56>

  if (p != NULL) {
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d009      	beq.n	800ab36 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	891b      	ldrh	r3, [r3, #8]
 800ab26:	4619      	mov	r1, r3
 800ab28:	68b8      	ldr	r0, [r7, #8]
 800ab2a:	f7ff fb19 	bl	800a160 <tcp_recved>
    pbuf_free(p);
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f7fe fd0c 	bl	800954c <pbuf_free>
 800ab34:	e008      	b.n	800ab48 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ab36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d104      	bne.n	800ab48 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ab3e:	68b8      	ldr	r0, [r7, #8]
 800ab40:	f7ff f9be 	bl	8009ec0 <tcp_close>
 800ab44:	4603      	mov	r3, r0
 800ab46:	e000      	b.n	800ab4a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ab48:	2300      	movs	r3, #0
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	08015d44 	.word	0x08015d44
 800ab58:	080162b4 	.word	0x080162b4
 800ab5c:	08015d88 	.word	0x08015d88

0800ab60 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b086      	sub	sp, #24
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	4603      	mov	r3, r0
 800ab68:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ab6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	db01      	blt.n	800ab76 <tcp_kill_prio+0x16>
 800ab72:	79fb      	ldrb	r3, [r7, #7]
 800ab74:	e000      	b.n	800ab78 <tcp_kill_prio+0x18>
 800ab76:	237f      	movs	r3, #127	; 0x7f
 800ab78:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ab7a:	7afb      	ldrb	r3, [r7, #11]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d034      	beq.n	800abea <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ab80:	7afb      	ldrb	r3, [r7, #11]
 800ab82:	3b01      	subs	r3, #1
 800ab84:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ab86:	2300      	movs	r3, #0
 800ab88:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab8e:	4b19      	ldr	r3, [pc, #100]	; (800abf4 <tcp_kill_prio+0x94>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	617b      	str	r3, [r7, #20]
 800ab94:	e01f      	b.n	800abd6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	7d5b      	ldrb	r3, [r3, #21]
 800ab9a:	7afa      	ldrb	r2, [r7, #11]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d80c      	bhi.n	800abba <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800aba4:	7afa      	ldrb	r2, [r7, #11]
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d112      	bne.n	800abd0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800abaa:	4b13      	ldr	r3, [pc, #76]	; (800abf8 <tcp_kill_prio+0x98>)
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	6a1b      	ldr	r3, [r3, #32]
 800abb2:	1ad3      	subs	r3, r2, r3
 800abb4:	68fa      	ldr	r2, [r7, #12]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d80a      	bhi.n	800abd0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800abba:	4b0f      	ldr	r3, [pc, #60]	; (800abf8 <tcp_kill_prio+0x98>)
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	6a1b      	ldr	r3, [r3, #32]
 800abc2:	1ad3      	subs	r3, r2, r3
 800abc4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	7d5b      	ldrb	r3, [r3, #21]
 800abce:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	617b      	str	r3, [r7, #20]
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1dc      	bne.n	800ab96 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d004      	beq.n	800abec <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800abe2:	6938      	ldr	r0, [r7, #16]
 800abe4:	f7ff fa56 	bl	800a094 <tcp_abort>
 800abe8:	e000      	b.n	800abec <tcp_kill_prio+0x8c>
    return;
 800abea:	bf00      	nop
  }
}
 800abec:	3718      	adds	r7, #24
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	20018bf0 	.word	0x20018bf0
 800abf8:	20018be4 	.word	0x20018be4

0800abfc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b086      	sub	sp, #24
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	4603      	mov	r3, r0
 800ac04:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ac06:	79fb      	ldrb	r3, [r7, #7]
 800ac08:	2b08      	cmp	r3, #8
 800ac0a:	d009      	beq.n	800ac20 <tcp_kill_state+0x24>
 800ac0c:	79fb      	ldrb	r3, [r7, #7]
 800ac0e:	2b09      	cmp	r3, #9
 800ac10:	d006      	beq.n	800ac20 <tcp_kill_state+0x24>
 800ac12:	4b1a      	ldr	r3, [pc, #104]	; (800ac7c <tcp_kill_state+0x80>)
 800ac14:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ac18:	4919      	ldr	r1, [pc, #100]	; (800ac80 <tcp_kill_state+0x84>)
 800ac1a:	481a      	ldr	r0, [pc, #104]	; (800ac84 <tcp_kill_state+0x88>)
 800ac1c:	f009 fb3a 	bl	8014294 <iprintf>

  inactivity = 0;
 800ac20:	2300      	movs	r3, #0
 800ac22:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ac24:	2300      	movs	r3, #0
 800ac26:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac28:	4b17      	ldr	r3, [pc, #92]	; (800ac88 <tcp_kill_state+0x8c>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	617b      	str	r3, [r7, #20]
 800ac2e:	e017      	b.n	800ac60 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	7d1b      	ldrb	r3, [r3, #20]
 800ac34:	79fa      	ldrb	r2, [r7, #7]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d10f      	bne.n	800ac5a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ac3a:	4b14      	ldr	r3, [pc, #80]	; (800ac8c <tcp_kill_state+0x90>)
 800ac3c:	681a      	ldr	r2, [r3, #0]
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	6a1b      	ldr	r3, [r3, #32]
 800ac42:	1ad3      	subs	r3, r2, r3
 800ac44:	68fa      	ldr	r2, [r7, #12]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d807      	bhi.n	800ac5a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ac4a:	4b10      	ldr	r3, [pc, #64]	; (800ac8c <tcp_kill_state+0x90>)
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	6a1b      	ldr	r3, [r3, #32]
 800ac52:	1ad3      	subs	r3, r2, r3
 800ac54:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	617b      	str	r3, [r7, #20]
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d1e4      	bne.n	800ac30 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d003      	beq.n	800ac74 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ac6c:	2100      	movs	r1, #0
 800ac6e:	6938      	ldr	r0, [r7, #16]
 800ac70:	f7ff f952 	bl	8009f18 <tcp_abandon>
  }
}
 800ac74:	bf00      	nop
 800ac76:	3718      	adds	r7, #24
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}
 800ac7c:	08015d44 	.word	0x08015d44
 800ac80:	080162d0 	.word	0x080162d0
 800ac84:	08015d88 	.word	0x08015d88
 800ac88:	20018bf0 	.word	0x20018bf0
 800ac8c:	20018be4 	.word	0x20018be4

0800ac90 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ac96:	2300      	movs	r3, #0
 800ac98:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac9e:	4b12      	ldr	r3, [pc, #72]	; (800ace8 <tcp_kill_timewait+0x58>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	60fb      	str	r3, [r7, #12]
 800aca4:	e012      	b.n	800accc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800aca6:	4b11      	ldr	r3, [pc, #68]	; (800acec <tcp_kill_timewait+0x5c>)
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	6a1b      	ldr	r3, [r3, #32]
 800acae:	1ad3      	subs	r3, r2, r3
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d807      	bhi.n	800acc6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800acb6:	4b0d      	ldr	r3, [pc, #52]	; (800acec <tcp_kill_timewait+0x5c>)
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6a1b      	ldr	r3, [r3, #32]
 800acbe:	1ad3      	subs	r3, r2, r3
 800acc0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	60fb      	str	r3, [r7, #12]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d1e9      	bne.n	800aca6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d002      	beq.n	800acde <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800acd8:	68b8      	ldr	r0, [r7, #8]
 800acda:	f7ff f9db 	bl	800a094 <tcp_abort>
  }
}
 800acde:	bf00      	nop
 800ace0:	3710      	adds	r7, #16
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	20018bf4 	.word	0x20018bf4
 800acec:	20018be4 	.word	0x20018be4

0800acf0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800acf6:	4b10      	ldr	r3, [pc, #64]	; (800ad38 <tcp_handle_closepend+0x48>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800acfc:	e014      	b.n	800ad28 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	8b5b      	ldrh	r3, [r3, #26]
 800ad08:	f003 0308 	and.w	r3, r3, #8
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d009      	beq.n	800ad24 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	8b5b      	ldrh	r3, [r3, #26]
 800ad14:	f023 0308 	bic.w	r3, r3, #8
 800ad18:	b29a      	uxth	r2, r3
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f7ff f864 	bl	8009dec <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d1e7      	bne.n	800acfe <tcp_handle_closepend+0xe>
  }
}
 800ad2e:	bf00      	nop
 800ad30:	bf00      	nop
 800ad32:	3708      	adds	r7, #8
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	20018bf0 	.word	0x20018bf0

0800ad3c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	4603      	mov	r3, r0
 800ad44:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ad46:	2001      	movs	r0, #1
 800ad48:	f7fd fcda 	bl	8008700 <memp_malloc>
 800ad4c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d126      	bne.n	800ada2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ad54:	f7ff ffcc 	bl	800acf0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ad58:	f7ff ff9a 	bl	800ac90 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ad5c:	2001      	movs	r0, #1
 800ad5e:	f7fd fccf 	bl	8008700 <memp_malloc>
 800ad62:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d11b      	bne.n	800ada2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ad6a:	2009      	movs	r0, #9
 800ad6c:	f7ff ff46 	bl	800abfc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ad70:	2001      	movs	r0, #1
 800ad72:	f7fd fcc5 	bl	8008700 <memp_malloc>
 800ad76:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d111      	bne.n	800ada2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ad7e:	2008      	movs	r0, #8
 800ad80:	f7ff ff3c 	bl	800abfc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ad84:	2001      	movs	r0, #1
 800ad86:	f7fd fcbb 	bl	8008700 <memp_malloc>
 800ad8a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d107      	bne.n	800ada2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ad92:	79fb      	ldrb	r3, [r7, #7]
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7ff fee3 	bl	800ab60 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ad9a:	2001      	movs	r0, #1
 800ad9c:	f7fd fcb0 	bl	8008700 <memp_malloc>
 800ada0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d03f      	beq.n	800ae28 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ada8:	229c      	movs	r2, #156	; 0x9c
 800adaa:	2100      	movs	r1, #0
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	f009 f9d4 	bl	801415a <memset>
    pcb->prio = prio;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	79fa      	ldrb	r2, [r7, #7]
 800adb6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800adbe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800adc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	22ff      	movs	r2, #255	; 0xff
 800add6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f44f 7206 	mov.w	r2, #536	; 0x218
 800adde:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2206      	movs	r2, #6
 800ade4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2206      	movs	r2, #6
 800adec:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adf4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2201      	movs	r2, #1
 800adfa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800adfe:	4b0d      	ldr	r3, [pc, #52]	; (800ae34 <tcp_alloc+0xf8>)
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ae06:	4b0c      	ldr	r3, [pc, #48]	; (800ae38 <tcp_alloc+0xfc>)
 800ae08:	781a      	ldrb	r2, [r3, #0]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ae14:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	4a08      	ldr	r2, [pc, #32]	; (800ae3c <tcp_alloc+0x100>)
 800ae1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	4a07      	ldr	r2, [pc, #28]	; (800ae40 <tcp_alloc+0x104>)
 800ae24:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ae28:	68fb      	ldr	r3, [r7, #12]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3710      	adds	r7, #16
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	20018be4 	.word	0x20018be4
 800ae38:	20018bfa 	.word	0x20018bfa
 800ae3c:	0800aaf5 	.word	0x0800aaf5
 800ae40:	006ddd00 	.word	0x006ddd00

0800ae44 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d107      	bne.n	800ae62 <tcp_pcb_purge+0x1e>
 800ae52:	4b21      	ldr	r3, [pc, #132]	; (800aed8 <tcp_pcb_purge+0x94>)
 800ae54:	f640 0251 	movw	r2, #2129	; 0x851
 800ae58:	4920      	ldr	r1, [pc, #128]	; (800aedc <tcp_pcb_purge+0x98>)
 800ae5a:	4821      	ldr	r0, [pc, #132]	; (800aee0 <tcp_pcb_purge+0x9c>)
 800ae5c:	f009 fa1a 	bl	8014294 <iprintf>
 800ae60:	e037      	b.n	800aed2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	7d1b      	ldrb	r3, [r3, #20]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d033      	beq.n	800aed2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ae6e:	2b0a      	cmp	r3, #10
 800ae70:	d02f      	beq.n	800aed2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d02b      	beq.n	800aed2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d007      	beq.n	800ae92 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7fe fb60 	bl	800954c <pbuf_free>
      pcb->refused_data = NULL;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d002      	beq.n	800aea0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 f986 	bl	800b1ac <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aea6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7ff fdc7 	bl	800aa40 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7ff fdc2 	bl	800aa40 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	66da      	str	r2, [r3, #108]	; 0x6c
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2200      	movs	r2, #0
 800aece:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800aed2:	3708      	adds	r7, #8
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	08015d44 	.word	0x08015d44
 800aedc:	08016390 	.word	0x08016390
 800aee0:	08015d88 	.word	0x08015d88

0800aee4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d106      	bne.n	800af02 <tcp_pcb_remove+0x1e>
 800aef4:	4b3e      	ldr	r3, [pc, #248]	; (800aff0 <tcp_pcb_remove+0x10c>)
 800aef6:	f640 0283 	movw	r2, #2179	; 0x883
 800aefa:	493e      	ldr	r1, [pc, #248]	; (800aff4 <tcp_pcb_remove+0x110>)
 800aefc:	483e      	ldr	r0, [pc, #248]	; (800aff8 <tcp_pcb_remove+0x114>)
 800aefe:	f009 f9c9 	bl	8014294 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d106      	bne.n	800af16 <tcp_pcb_remove+0x32>
 800af08:	4b39      	ldr	r3, [pc, #228]	; (800aff0 <tcp_pcb_remove+0x10c>)
 800af0a:	f640 0284 	movw	r2, #2180	; 0x884
 800af0e:	493b      	ldr	r1, [pc, #236]	; (800affc <tcp_pcb_remove+0x118>)
 800af10:	4839      	ldr	r0, [pc, #228]	; (800aff8 <tcp_pcb_remove+0x114>)
 800af12:	f009 f9bf 	bl	8014294 <iprintf>

  TCP_RMV(pcblist, pcb);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	683a      	ldr	r2, [r7, #0]
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d105      	bne.n	800af2c <tcp_pcb_remove+0x48>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	68da      	ldr	r2, [r3, #12]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	601a      	str	r2, [r3, #0]
 800af2a:	e013      	b.n	800af54 <tcp_pcb_remove+0x70>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	60fb      	str	r3, [r7, #12]
 800af32:	e00c      	b.n	800af4e <tcp_pcb_remove+0x6a>
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	68db      	ldr	r3, [r3, #12]
 800af38:	683a      	ldr	r2, [r7, #0]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d104      	bne.n	800af48 <tcp_pcb_remove+0x64>
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	68da      	ldr	r2, [r3, #12]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	60da      	str	r2, [r3, #12]
 800af46:	e005      	b.n	800af54 <tcp_pcb_remove+0x70>
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	68db      	ldr	r3, [r3, #12]
 800af4c:	60fb      	str	r3, [r7, #12]
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d1ef      	bne.n	800af34 <tcp_pcb_remove+0x50>
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	2200      	movs	r2, #0
 800af58:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800af5a:	6838      	ldr	r0, [r7, #0]
 800af5c:	f7ff ff72 	bl	800ae44 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	7d1b      	ldrb	r3, [r3, #20]
 800af64:	2b0a      	cmp	r3, #10
 800af66:	d013      	beq.n	800af90 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d00f      	beq.n	800af90 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	8b5b      	ldrh	r3, [r3, #26]
 800af74:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d009      	beq.n	800af90 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	8b5b      	ldrh	r3, [r3, #26]
 800af80:	f043 0302 	orr.w	r3, r3, #2
 800af84:	b29a      	uxth	r2, r3
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800af8a:	6838      	ldr	r0, [r7, #0]
 800af8c:	f002 ff6e 	bl	800de6c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	7d1b      	ldrb	r3, [r3, #20]
 800af94:	2b01      	cmp	r3, #1
 800af96:	d020      	beq.n	800afda <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d006      	beq.n	800afae <tcp_pcb_remove+0xca>
 800afa0:	4b13      	ldr	r3, [pc, #76]	; (800aff0 <tcp_pcb_remove+0x10c>)
 800afa2:	f640 0293 	movw	r2, #2195	; 0x893
 800afa6:	4916      	ldr	r1, [pc, #88]	; (800b000 <tcp_pcb_remove+0x11c>)
 800afa8:	4813      	ldr	r0, [pc, #76]	; (800aff8 <tcp_pcb_remove+0x114>)
 800afaa:	f009 f973 	bl	8014294 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d006      	beq.n	800afc4 <tcp_pcb_remove+0xe0>
 800afb6:	4b0e      	ldr	r3, [pc, #56]	; (800aff0 <tcp_pcb_remove+0x10c>)
 800afb8:	f640 0294 	movw	r2, #2196	; 0x894
 800afbc:	4911      	ldr	r1, [pc, #68]	; (800b004 <tcp_pcb_remove+0x120>)
 800afbe:	480e      	ldr	r0, [pc, #56]	; (800aff8 <tcp_pcb_remove+0x114>)
 800afc0:	f009 f968 	bl	8014294 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d006      	beq.n	800afda <tcp_pcb_remove+0xf6>
 800afcc:	4b08      	ldr	r3, [pc, #32]	; (800aff0 <tcp_pcb_remove+0x10c>)
 800afce:	f640 0296 	movw	r2, #2198	; 0x896
 800afd2:	490d      	ldr	r1, [pc, #52]	; (800b008 <tcp_pcb_remove+0x124>)
 800afd4:	4808      	ldr	r0, [pc, #32]	; (800aff8 <tcp_pcb_remove+0x114>)
 800afd6:	f009 f95d 	bl	8014294 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	2200      	movs	r2, #0
 800afde:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	2200      	movs	r2, #0
 800afe4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800afe6:	bf00      	nop
 800afe8:	3710      	adds	r7, #16
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	08015d44 	.word	0x08015d44
 800aff4:	080163ac 	.word	0x080163ac
 800aff8:	08015d88 	.word	0x08015d88
 800affc:	080163c8 	.word	0x080163c8
 800b000:	080163e8 	.word	0x080163e8
 800b004:	08016400 	.word	0x08016400
 800b008:	0801641c 	.word	0x0801641c

0800b00c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d106      	bne.n	800b028 <tcp_next_iss+0x1c>
 800b01a:	4b0a      	ldr	r3, [pc, #40]	; (800b044 <tcp_next_iss+0x38>)
 800b01c:	f640 02af 	movw	r2, #2223	; 0x8af
 800b020:	4909      	ldr	r1, [pc, #36]	; (800b048 <tcp_next_iss+0x3c>)
 800b022:	480a      	ldr	r0, [pc, #40]	; (800b04c <tcp_next_iss+0x40>)
 800b024:	f009 f936 	bl	8014294 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b028:	4b09      	ldr	r3, [pc, #36]	; (800b050 <tcp_next_iss+0x44>)
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	4b09      	ldr	r3, [pc, #36]	; (800b054 <tcp_next_iss+0x48>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4413      	add	r3, r2
 800b032:	4a07      	ldr	r2, [pc, #28]	; (800b050 <tcp_next_iss+0x44>)
 800b034:	6013      	str	r3, [r2, #0]
  return iss;
 800b036:	4b06      	ldr	r3, [pc, #24]	; (800b050 <tcp_next_iss+0x44>)
 800b038:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3708      	adds	r7, #8
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	08015d44 	.word	0x08015d44
 800b048:	08016434 	.word	0x08016434
 800b04c:	08015d88 	.word	0x08015d88
 800b050:	20000028 	.word	0x20000028
 800b054:	20018be4 	.word	0x20018be4

0800b058 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b086      	sub	sp, #24
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	4603      	mov	r3, r0
 800b060:	60b9      	str	r1, [r7, #8]
 800b062:	607a      	str	r2, [r7, #4]
 800b064:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d106      	bne.n	800b07a <tcp_eff_send_mss_netif+0x22>
 800b06c:	4b14      	ldr	r3, [pc, #80]	; (800b0c0 <tcp_eff_send_mss_netif+0x68>)
 800b06e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800b072:	4914      	ldr	r1, [pc, #80]	; (800b0c4 <tcp_eff_send_mss_netif+0x6c>)
 800b074:	4814      	ldr	r0, [pc, #80]	; (800b0c8 <tcp_eff_send_mss_netif+0x70>)
 800b076:	f009 f90d 	bl	8014294 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d101      	bne.n	800b084 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b080:	89fb      	ldrh	r3, [r7, #14]
 800b082:	e019      	b.n	800b0b8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b088:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b08a:	8afb      	ldrh	r3, [r7, #22]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d012      	beq.n	800b0b6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b090:	2328      	movs	r3, #40	; 0x28
 800b092:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b094:	8afa      	ldrh	r2, [r7, #22]
 800b096:	8abb      	ldrh	r3, [r7, #20]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d904      	bls.n	800b0a6 <tcp_eff_send_mss_netif+0x4e>
 800b09c:	8afa      	ldrh	r2, [r7, #22]
 800b09e:	8abb      	ldrh	r3, [r7, #20]
 800b0a0:	1ad3      	subs	r3, r2, r3
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	e000      	b.n	800b0a8 <tcp_eff_send_mss_netif+0x50>
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b0aa:	8a7a      	ldrh	r2, [r7, #18]
 800b0ac:	89fb      	ldrh	r3, [r7, #14]
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	bf28      	it	cs
 800b0b2:	4613      	movcs	r3, r2
 800b0b4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b0b6:	89fb      	ldrh	r3, [r7, #14]
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3718      	adds	r7, #24
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	08015d44 	.word	0x08015d44
 800b0c4:	08016450 	.word	0x08016450
 800b0c8:	08015d88 	.word	0x08015d88

0800b0cc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d119      	bne.n	800b114 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b0e0:	4b10      	ldr	r3, [pc, #64]	; (800b124 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b0e2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b0e6:	4910      	ldr	r1, [pc, #64]	; (800b128 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b0e8:	4810      	ldr	r0, [pc, #64]	; (800b12c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b0ea:	f009 f8d3 	bl	8014294 <iprintf>

  while (pcb != NULL) {
 800b0ee:	e011      	b.n	800b114 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d108      	bne.n	800b10e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	68db      	ldr	r3, [r3, #12]
 800b100:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	f7fe ffc6 	bl	800a094 <tcp_abort>
      pcb = next;
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	60fb      	str	r3, [r7, #12]
 800b10c:	e002      	b.n	800b114 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	68db      	ldr	r3, [r3, #12]
 800b112:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d1ea      	bne.n	800b0f0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800b11a:	bf00      	nop
 800b11c:	bf00      	nop
 800b11e:	3710      	adds	r7, #16
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}
 800b124:	08015d44 	.word	0x08015d44
 800b128:	08016478 	.word	0x08016478
 800b12c:	08015d88 	.word	0x08015d88

0800b130 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b084      	sub	sp, #16
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d02a      	beq.n	800b196 <tcp_netif_ip_addr_changed+0x66>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d026      	beq.n	800b196 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b148:	4b15      	ldr	r3, [pc, #84]	; (800b1a0 <tcp_netif_ip_addr_changed+0x70>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4619      	mov	r1, r3
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f7ff ffbc 	bl	800b0cc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b154:	4b13      	ldr	r3, [pc, #76]	; (800b1a4 <tcp_netif_ip_addr_changed+0x74>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4619      	mov	r1, r3
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f7ff ffb6 	bl	800b0cc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d017      	beq.n	800b196 <tcp_netif_ip_addr_changed+0x66>
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d013      	beq.n	800b196 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b16e:	4b0e      	ldr	r3, [pc, #56]	; (800b1a8 <tcp_netif_ip_addr_changed+0x78>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	60fb      	str	r3, [r7, #12]
 800b174:	e00c      	b.n	800b190 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d103      	bne.n	800b18a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	68db      	ldr	r3, [r3, #12]
 800b18e:	60fb      	str	r3, [r7, #12]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d1ef      	bne.n	800b176 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b196:	bf00      	nop
 800b198:	3710      	adds	r7, #16
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	20018bf0 	.word	0x20018bf0
 800b1a4:	20018be8 	.word	0x20018be8
 800b1a8:	20018bec 	.word	0x20018bec

0800b1ac <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d007      	beq.n	800b1cc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7ff fc3d 	bl	800aa40 <tcp_segs_free>
    pcb->ooseq = NULL;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b1cc:	bf00      	nop
 800b1ce:	3708      	adds	r7, #8
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b1d4:	b590      	push	{r4, r7, lr}
 800b1d6:	b08d      	sub	sp, #52	; 0x34
 800b1d8:	af04      	add	r7, sp, #16
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d105      	bne.n	800b1f0 <tcp_input+0x1c>
 800b1e4:	4b9b      	ldr	r3, [pc, #620]	; (800b454 <tcp_input+0x280>)
 800b1e6:	2283      	movs	r2, #131	; 0x83
 800b1e8:	499b      	ldr	r1, [pc, #620]	; (800b458 <tcp_input+0x284>)
 800b1ea:	489c      	ldr	r0, [pc, #624]	; (800b45c <tcp_input+0x288>)
 800b1ec:	f009 f852 	bl	8014294 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	4a9a      	ldr	r2, [pc, #616]	; (800b460 <tcp_input+0x28c>)
 800b1f6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	895b      	ldrh	r3, [r3, #10]
 800b1fc:	2b13      	cmp	r3, #19
 800b1fe:	f240 83d1 	bls.w	800b9a4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b202:	4b98      	ldr	r3, [pc, #608]	; (800b464 <tcp_input+0x290>)
 800b204:	695b      	ldr	r3, [r3, #20]
 800b206:	4a97      	ldr	r2, [pc, #604]	; (800b464 <tcp_input+0x290>)
 800b208:	6812      	ldr	r2, [r2, #0]
 800b20a:	4611      	mov	r1, r2
 800b20c:	4618      	mov	r0, r3
 800b20e:	f007 fdfd 	bl	8012e0c <ip4_addr_isbroadcast_u32>
 800b212:	4603      	mov	r3, r0
 800b214:	2b00      	cmp	r3, #0
 800b216:	f040 83c7 	bne.w	800b9a8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b21a:	4b92      	ldr	r3, [pc, #584]	; (800b464 <tcp_input+0x290>)
 800b21c:	695b      	ldr	r3, [r3, #20]
 800b21e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b222:	2be0      	cmp	r3, #224	; 0xe0
 800b224:	f000 83c0 	beq.w	800b9a8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b228:	4b8d      	ldr	r3, [pc, #564]	; (800b460 <tcp_input+0x28c>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	899b      	ldrh	r3, [r3, #12]
 800b22e:	b29b      	uxth	r3, r3
 800b230:	4618      	mov	r0, r3
 800b232:	f7fc fd8d 	bl	8007d50 <lwip_htons>
 800b236:	4603      	mov	r3, r0
 800b238:	0b1b      	lsrs	r3, r3, #12
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b242:	7cbb      	ldrb	r3, [r7, #18]
 800b244:	2b13      	cmp	r3, #19
 800b246:	f240 83b1 	bls.w	800b9ac <tcp_input+0x7d8>
 800b24a:	7cbb      	ldrb	r3, [r7, #18]
 800b24c:	b29a      	uxth	r2, r3
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	891b      	ldrh	r3, [r3, #8]
 800b252:	429a      	cmp	r2, r3
 800b254:	f200 83aa 	bhi.w	800b9ac <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b258:	7cbb      	ldrb	r3, [r7, #18]
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	3b14      	subs	r3, #20
 800b25e:	b29a      	uxth	r2, r3
 800b260:	4b81      	ldr	r3, [pc, #516]	; (800b468 <tcp_input+0x294>)
 800b262:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b264:	4b81      	ldr	r3, [pc, #516]	; (800b46c <tcp_input+0x298>)
 800b266:	2200      	movs	r2, #0
 800b268:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	895a      	ldrh	r2, [r3, #10]
 800b26e:	7cbb      	ldrb	r3, [r7, #18]
 800b270:	b29b      	uxth	r3, r3
 800b272:	429a      	cmp	r2, r3
 800b274:	d309      	bcc.n	800b28a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b276:	4b7c      	ldr	r3, [pc, #496]	; (800b468 <tcp_input+0x294>)
 800b278:	881a      	ldrh	r2, [r3, #0]
 800b27a:	4b7d      	ldr	r3, [pc, #500]	; (800b470 <tcp_input+0x29c>)
 800b27c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b27e:	7cbb      	ldrb	r3, [r7, #18]
 800b280:	4619      	mov	r1, r3
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f7fe f8dc 	bl	8009440 <pbuf_remove_header>
 800b288:	e04e      	b.n	800b328 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d105      	bne.n	800b29e <tcp_input+0xca>
 800b292:	4b70      	ldr	r3, [pc, #448]	; (800b454 <tcp_input+0x280>)
 800b294:	22c2      	movs	r2, #194	; 0xc2
 800b296:	4977      	ldr	r1, [pc, #476]	; (800b474 <tcp_input+0x2a0>)
 800b298:	4870      	ldr	r0, [pc, #448]	; (800b45c <tcp_input+0x288>)
 800b29a:	f008 fffb 	bl	8014294 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b29e:	2114      	movs	r1, #20
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f7fe f8cd 	bl	8009440 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	895a      	ldrh	r2, [r3, #10]
 800b2aa:	4b71      	ldr	r3, [pc, #452]	; (800b470 <tcp_input+0x29c>)
 800b2ac:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b2ae:	4b6e      	ldr	r3, [pc, #440]	; (800b468 <tcp_input+0x294>)
 800b2b0:	881a      	ldrh	r2, [r3, #0]
 800b2b2:	4b6f      	ldr	r3, [pc, #444]	; (800b470 <tcp_input+0x29c>)
 800b2b4:	881b      	ldrh	r3, [r3, #0]
 800b2b6:	1ad3      	subs	r3, r2, r3
 800b2b8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b2ba:	4b6d      	ldr	r3, [pc, #436]	; (800b470 <tcp_input+0x29c>)
 800b2bc:	881b      	ldrh	r3, [r3, #0]
 800b2be:	4619      	mov	r1, r3
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f7fe f8bd 	bl	8009440 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	895b      	ldrh	r3, [r3, #10]
 800b2cc:	8a3a      	ldrh	r2, [r7, #16]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	f200 836e 	bhi.w	800b9b0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	4a64      	ldr	r2, [pc, #400]	; (800b46c <tcp_input+0x298>)
 800b2dc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	8a3a      	ldrh	r2, [r7, #16]
 800b2e4:	4611      	mov	r1, r2
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7fe f8aa 	bl	8009440 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	891a      	ldrh	r2, [r3, #8]
 800b2f0:	8a3b      	ldrh	r3, [r7, #16]
 800b2f2:	1ad3      	subs	r3, r2, r3
 800b2f4:	b29a      	uxth	r2, r3
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	895b      	ldrh	r3, [r3, #10]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d005      	beq.n	800b30e <tcp_input+0x13a>
 800b302:	4b54      	ldr	r3, [pc, #336]	; (800b454 <tcp_input+0x280>)
 800b304:	22df      	movs	r2, #223	; 0xdf
 800b306:	495c      	ldr	r1, [pc, #368]	; (800b478 <tcp_input+0x2a4>)
 800b308:	4854      	ldr	r0, [pc, #336]	; (800b45c <tcp_input+0x288>)
 800b30a:	f008 ffc3 	bl	8014294 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	891a      	ldrh	r2, [r3, #8]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	891b      	ldrh	r3, [r3, #8]
 800b318:	429a      	cmp	r2, r3
 800b31a:	d005      	beq.n	800b328 <tcp_input+0x154>
 800b31c:	4b4d      	ldr	r3, [pc, #308]	; (800b454 <tcp_input+0x280>)
 800b31e:	22e0      	movs	r2, #224	; 0xe0
 800b320:	4956      	ldr	r1, [pc, #344]	; (800b47c <tcp_input+0x2a8>)
 800b322:	484e      	ldr	r0, [pc, #312]	; (800b45c <tcp_input+0x288>)
 800b324:	f008 ffb6 	bl	8014294 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b328:	4b4d      	ldr	r3, [pc, #308]	; (800b460 <tcp_input+0x28c>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	881b      	ldrh	r3, [r3, #0]
 800b32e:	b29b      	uxth	r3, r3
 800b330:	4a4b      	ldr	r2, [pc, #300]	; (800b460 <tcp_input+0x28c>)
 800b332:	6814      	ldr	r4, [r2, #0]
 800b334:	4618      	mov	r0, r3
 800b336:	f7fc fd0b 	bl	8007d50 <lwip_htons>
 800b33a:	4603      	mov	r3, r0
 800b33c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b33e:	4b48      	ldr	r3, [pc, #288]	; (800b460 <tcp_input+0x28c>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	885b      	ldrh	r3, [r3, #2]
 800b344:	b29b      	uxth	r3, r3
 800b346:	4a46      	ldr	r2, [pc, #280]	; (800b460 <tcp_input+0x28c>)
 800b348:	6814      	ldr	r4, [r2, #0]
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7fc fd00 	bl	8007d50 <lwip_htons>
 800b350:	4603      	mov	r3, r0
 800b352:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b354:	4b42      	ldr	r3, [pc, #264]	; (800b460 <tcp_input+0x28c>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	4a41      	ldr	r2, [pc, #260]	; (800b460 <tcp_input+0x28c>)
 800b35c:	6814      	ldr	r4, [r2, #0]
 800b35e:	4618      	mov	r0, r3
 800b360:	f7fc fd0b 	bl	8007d7a <lwip_htonl>
 800b364:	4603      	mov	r3, r0
 800b366:	6063      	str	r3, [r4, #4]
 800b368:	6863      	ldr	r3, [r4, #4]
 800b36a:	4a45      	ldr	r2, [pc, #276]	; (800b480 <tcp_input+0x2ac>)
 800b36c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b36e:	4b3c      	ldr	r3, [pc, #240]	; (800b460 <tcp_input+0x28c>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	4a3a      	ldr	r2, [pc, #232]	; (800b460 <tcp_input+0x28c>)
 800b376:	6814      	ldr	r4, [r2, #0]
 800b378:	4618      	mov	r0, r3
 800b37a:	f7fc fcfe 	bl	8007d7a <lwip_htonl>
 800b37e:	4603      	mov	r3, r0
 800b380:	60a3      	str	r3, [r4, #8]
 800b382:	68a3      	ldr	r3, [r4, #8]
 800b384:	4a3f      	ldr	r2, [pc, #252]	; (800b484 <tcp_input+0x2b0>)
 800b386:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b388:	4b35      	ldr	r3, [pc, #212]	; (800b460 <tcp_input+0x28c>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	89db      	ldrh	r3, [r3, #14]
 800b38e:	b29b      	uxth	r3, r3
 800b390:	4a33      	ldr	r2, [pc, #204]	; (800b460 <tcp_input+0x28c>)
 800b392:	6814      	ldr	r4, [r2, #0]
 800b394:	4618      	mov	r0, r3
 800b396:	f7fc fcdb 	bl	8007d50 <lwip_htons>
 800b39a:	4603      	mov	r3, r0
 800b39c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b39e:	4b30      	ldr	r3, [pc, #192]	; (800b460 <tcp_input+0x28c>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	899b      	ldrh	r3, [r3, #12]
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7fc fcd2 	bl	8007d50 <lwip_htons>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3b4:	b2da      	uxtb	r2, r3
 800b3b6:	4b34      	ldr	r3, [pc, #208]	; (800b488 <tcp_input+0x2b4>)
 800b3b8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	891a      	ldrh	r2, [r3, #8]
 800b3be:	4b33      	ldr	r3, [pc, #204]	; (800b48c <tcp_input+0x2b8>)
 800b3c0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b3c2:	4b31      	ldr	r3, [pc, #196]	; (800b488 <tcp_input+0x2b4>)
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	f003 0303 	and.w	r3, r3, #3
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00c      	beq.n	800b3e8 <tcp_input+0x214>
    tcplen++;
 800b3ce:	4b2f      	ldr	r3, [pc, #188]	; (800b48c <tcp_input+0x2b8>)
 800b3d0:	881b      	ldrh	r3, [r3, #0]
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	b29a      	uxth	r2, r3
 800b3d6:	4b2d      	ldr	r3, [pc, #180]	; (800b48c <tcp_input+0x2b8>)
 800b3d8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	891a      	ldrh	r2, [r3, #8]
 800b3de:	4b2b      	ldr	r3, [pc, #172]	; (800b48c <tcp_input+0x2b8>)
 800b3e0:	881b      	ldrh	r3, [r3, #0]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	f200 82e6 	bhi.w	800b9b4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b3ec:	4b28      	ldr	r3, [pc, #160]	; (800b490 <tcp_input+0x2bc>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	61fb      	str	r3, [r7, #28]
 800b3f2:	e09d      	b.n	800b530 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b3f4:	69fb      	ldr	r3, [r7, #28]
 800b3f6:	7d1b      	ldrb	r3, [r3, #20]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d105      	bne.n	800b408 <tcp_input+0x234>
 800b3fc:	4b15      	ldr	r3, [pc, #84]	; (800b454 <tcp_input+0x280>)
 800b3fe:	22fb      	movs	r2, #251	; 0xfb
 800b400:	4924      	ldr	r1, [pc, #144]	; (800b494 <tcp_input+0x2c0>)
 800b402:	4816      	ldr	r0, [pc, #88]	; (800b45c <tcp_input+0x288>)
 800b404:	f008 ff46 	bl	8014294 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	7d1b      	ldrb	r3, [r3, #20]
 800b40c:	2b0a      	cmp	r3, #10
 800b40e:	d105      	bne.n	800b41c <tcp_input+0x248>
 800b410:	4b10      	ldr	r3, [pc, #64]	; (800b454 <tcp_input+0x280>)
 800b412:	22fc      	movs	r2, #252	; 0xfc
 800b414:	4920      	ldr	r1, [pc, #128]	; (800b498 <tcp_input+0x2c4>)
 800b416:	4811      	ldr	r0, [pc, #68]	; (800b45c <tcp_input+0x288>)
 800b418:	f008 ff3c 	bl	8014294 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b41c:	69fb      	ldr	r3, [r7, #28]
 800b41e:	7d1b      	ldrb	r3, [r3, #20]
 800b420:	2b01      	cmp	r3, #1
 800b422:	d105      	bne.n	800b430 <tcp_input+0x25c>
 800b424:	4b0b      	ldr	r3, [pc, #44]	; (800b454 <tcp_input+0x280>)
 800b426:	22fd      	movs	r2, #253	; 0xfd
 800b428:	491c      	ldr	r1, [pc, #112]	; (800b49c <tcp_input+0x2c8>)
 800b42a:	480c      	ldr	r0, [pc, #48]	; (800b45c <tcp_input+0x288>)
 800b42c:	f008 ff32 	bl	8014294 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b430:	69fb      	ldr	r3, [r7, #28]
 800b432:	7a1b      	ldrb	r3, [r3, #8]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d033      	beq.n	800b4a0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b438:	69fb      	ldr	r3, [r7, #28]
 800b43a:	7a1a      	ldrb	r2, [r3, #8]
 800b43c:	4b09      	ldr	r3, [pc, #36]	; (800b464 <tcp_input+0x290>)
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b444:	3301      	adds	r3, #1
 800b446:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b448:	429a      	cmp	r2, r3
 800b44a:	d029      	beq.n	800b4a0 <tcp_input+0x2cc>
      prev = pcb;
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	61bb      	str	r3, [r7, #24]
      continue;
 800b450:	e06b      	b.n	800b52a <tcp_input+0x356>
 800b452:	bf00      	nop
 800b454:	080164ac 	.word	0x080164ac
 800b458:	080164e0 	.word	0x080164e0
 800b45c:	080164f8 	.word	0x080164f8
 800b460:	20018c0c 	.word	0x20018c0c
 800b464:	20015470 	.word	0x20015470
 800b468:	20018c10 	.word	0x20018c10
 800b46c:	20018c14 	.word	0x20018c14
 800b470:	20018c12 	.word	0x20018c12
 800b474:	08016520 	.word	0x08016520
 800b478:	08016530 	.word	0x08016530
 800b47c:	0801653c 	.word	0x0801653c
 800b480:	20018c1c 	.word	0x20018c1c
 800b484:	20018c20 	.word	0x20018c20
 800b488:	20018c28 	.word	0x20018c28
 800b48c:	20018c26 	.word	0x20018c26
 800b490:	20018bf0 	.word	0x20018bf0
 800b494:	0801655c 	.word	0x0801655c
 800b498:	08016584 	.word	0x08016584
 800b49c:	080165b0 	.word	0x080165b0
    }

    if (pcb->remote_port == tcphdr->src &&
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	8b1a      	ldrh	r2, [r3, #24]
 800b4a4:	4b72      	ldr	r3, [pc, #456]	; (800b670 <tcp_input+0x49c>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	881b      	ldrh	r3, [r3, #0]
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d13a      	bne.n	800b526 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	8ada      	ldrh	r2, [r3, #22]
 800b4b4:	4b6e      	ldr	r3, [pc, #440]	; (800b670 <tcp_input+0x49c>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	885b      	ldrh	r3, [r3, #2]
 800b4ba:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d132      	bne.n	800b526 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b4c0:	69fb      	ldr	r3, [r7, #28]
 800b4c2:	685a      	ldr	r2, [r3, #4]
 800b4c4:	4b6b      	ldr	r3, [pc, #428]	; (800b674 <tcp_input+0x4a0>)
 800b4c6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d12c      	bne.n	800b526 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	681a      	ldr	r2, [r3, #0]
 800b4d0:	4b68      	ldr	r3, [pc, #416]	; (800b674 <tcp_input+0x4a0>)
 800b4d2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d126      	bne.n	800b526 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b4d8:	69fb      	ldr	r3, [r7, #28]
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	69fa      	ldr	r2, [r7, #28]
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d106      	bne.n	800b4f0 <tcp_input+0x31c>
 800b4e2:	4b65      	ldr	r3, [pc, #404]	; (800b678 <tcp_input+0x4a4>)
 800b4e4:	f240 120d 	movw	r2, #269	; 0x10d
 800b4e8:	4964      	ldr	r1, [pc, #400]	; (800b67c <tcp_input+0x4a8>)
 800b4ea:	4865      	ldr	r0, [pc, #404]	; (800b680 <tcp_input+0x4ac>)
 800b4ec:	f008 fed2 	bl	8014294 <iprintf>
      if (prev != NULL) {
 800b4f0:	69bb      	ldr	r3, [r7, #24]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d00a      	beq.n	800b50c <tcp_input+0x338>
        prev->next = pcb->next;
 800b4f6:	69fb      	ldr	r3, [r7, #28]
 800b4f8:	68da      	ldr	r2, [r3, #12]
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b4fe:	4b61      	ldr	r3, [pc, #388]	; (800b684 <tcp_input+0x4b0>)
 800b500:	681a      	ldr	r2, [r3, #0]
 800b502:	69fb      	ldr	r3, [r7, #28]
 800b504:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b506:	4a5f      	ldr	r2, [pc, #380]	; (800b684 <tcp_input+0x4b0>)
 800b508:	69fb      	ldr	r3, [r7, #28]
 800b50a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	68db      	ldr	r3, [r3, #12]
 800b510:	69fa      	ldr	r2, [r7, #28]
 800b512:	429a      	cmp	r2, r3
 800b514:	d111      	bne.n	800b53a <tcp_input+0x366>
 800b516:	4b58      	ldr	r3, [pc, #352]	; (800b678 <tcp_input+0x4a4>)
 800b518:	f240 1215 	movw	r2, #277	; 0x115
 800b51c:	495a      	ldr	r1, [pc, #360]	; (800b688 <tcp_input+0x4b4>)
 800b51e:	4858      	ldr	r0, [pc, #352]	; (800b680 <tcp_input+0x4ac>)
 800b520:	f008 feb8 	bl	8014294 <iprintf>
      break;
 800b524:	e009      	b.n	800b53a <tcp_input+0x366>
    }
    prev = pcb;
 800b526:	69fb      	ldr	r3, [r7, #28]
 800b528:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b52a:	69fb      	ldr	r3, [r7, #28]
 800b52c:	68db      	ldr	r3, [r3, #12]
 800b52e:	61fb      	str	r3, [r7, #28]
 800b530:	69fb      	ldr	r3, [r7, #28]
 800b532:	2b00      	cmp	r3, #0
 800b534:	f47f af5e 	bne.w	800b3f4 <tcp_input+0x220>
 800b538:	e000      	b.n	800b53c <tcp_input+0x368>
      break;
 800b53a:	bf00      	nop
  }

  if (pcb == NULL) {
 800b53c:	69fb      	ldr	r3, [r7, #28]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	f040 80aa 	bne.w	800b698 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b544:	4b51      	ldr	r3, [pc, #324]	; (800b68c <tcp_input+0x4b8>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	61fb      	str	r3, [r7, #28]
 800b54a:	e03f      	b.n	800b5cc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	7d1b      	ldrb	r3, [r3, #20]
 800b550:	2b0a      	cmp	r3, #10
 800b552:	d006      	beq.n	800b562 <tcp_input+0x38e>
 800b554:	4b48      	ldr	r3, [pc, #288]	; (800b678 <tcp_input+0x4a4>)
 800b556:	f240 121f 	movw	r2, #287	; 0x11f
 800b55a:	494d      	ldr	r1, [pc, #308]	; (800b690 <tcp_input+0x4bc>)
 800b55c:	4848      	ldr	r0, [pc, #288]	; (800b680 <tcp_input+0x4ac>)
 800b55e:	f008 fe99 	bl	8014294 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	7a1b      	ldrb	r3, [r3, #8]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d009      	beq.n	800b57e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b56a:	69fb      	ldr	r3, [r7, #28]
 800b56c:	7a1a      	ldrb	r2, [r3, #8]
 800b56e:	4b41      	ldr	r3, [pc, #260]	; (800b674 <tcp_input+0x4a0>)
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b576:	3301      	adds	r3, #1
 800b578:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d122      	bne.n	800b5c4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800b57e:	69fb      	ldr	r3, [r7, #28]
 800b580:	8b1a      	ldrh	r2, [r3, #24]
 800b582:	4b3b      	ldr	r3, [pc, #236]	; (800b670 <tcp_input+0x49c>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	881b      	ldrh	r3, [r3, #0]
 800b588:	b29b      	uxth	r3, r3
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d11b      	bne.n	800b5c6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800b58e:	69fb      	ldr	r3, [r7, #28]
 800b590:	8ada      	ldrh	r2, [r3, #22]
 800b592:	4b37      	ldr	r3, [pc, #220]	; (800b670 <tcp_input+0x49c>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	885b      	ldrh	r3, [r3, #2]
 800b598:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d113      	bne.n	800b5c6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b59e:	69fb      	ldr	r3, [r7, #28]
 800b5a0:	685a      	ldr	r2, [r3, #4]
 800b5a2:	4b34      	ldr	r3, [pc, #208]	; (800b674 <tcp_input+0x4a0>)
 800b5a4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d10d      	bne.n	800b5c6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	681a      	ldr	r2, [r3, #0]
 800b5ae:	4b31      	ldr	r3, [pc, #196]	; (800b674 <tcp_input+0x4a0>)
 800b5b0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d107      	bne.n	800b5c6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800b5b6:	69f8      	ldr	r0, [r7, #28]
 800b5b8:	f000 fb56 	bl	800bc68 <tcp_timewait_input>
        }
        pbuf_free(p);
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f7fd ffc5 	bl	800954c <pbuf_free>
        return;
 800b5c2:	e1fd      	b.n	800b9c0 <tcp_input+0x7ec>
        continue;
 800b5c4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b5c6:	69fb      	ldr	r3, [r7, #28]
 800b5c8:	68db      	ldr	r3, [r3, #12]
 800b5ca:	61fb      	str	r3, [r7, #28]
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d1bc      	bne.n	800b54c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b5d6:	4b2f      	ldr	r3, [pc, #188]	; (800b694 <tcp_input+0x4c0>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	617b      	str	r3, [r7, #20]
 800b5dc:	e02a      	b.n	800b634 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	7a1b      	ldrb	r3, [r3, #8]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d00c      	beq.n	800b600 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	7a1a      	ldrb	r2, [r3, #8]
 800b5ea:	4b22      	ldr	r3, [pc, #136]	; (800b674 <tcp_input+0x4a0>)
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d002      	beq.n	800b600 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	61bb      	str	r3, [r7, #24]
        continue;
 800b5fe:	e016      	b.n	800b62e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	8ada      	ldrh	r2, [r3, #22]
 800b604:	4b1a      	ldr	r3, [pc, #104]	; (800b670 <tcp_input+0x49c>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	885b      	ldrh	r3, [r3, #2]
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d10c      	bne.n	800b62a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	4b17      	ldr	r3, [pc, #92]	; (800b674 <tcp_input+0x4a0>)
 800b616:	695b      	ldr	r3, [r3, #20]
 800b618:	429a      	cmp	r2, r3
 800b61a:	d00f      	beq.n	800b63c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d00d      	beq.n	800b63e <tcp_input+0x46a>
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d009      	beq.n	800b63e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	617b      	str	r3, [r7, #20]
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d1d1      	bne.n	800b5de <tcp_input+0x40a>
 800b63a:	e000      	b.n	800b63e <tcp_input+0x46a>
            break;
 800b63c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d029      	beq.n	800b698 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b644:	69bb      	ldr	r3, [r7, #24]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d00a      	beq.n	800b660 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	68da      	ldr	r2, [r3, #12]
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b652:	4b10      	ldr	r3, [pc, #64]	; (800b694 <tcp_input+0x4c0>)
 800b654:	681a      	ldr	r2, [r3, #0]
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b65a:	4a0e      	ldr	r2, [pc, #56]	; (800b694 <tcp_input+0x4c0>)
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800b660:	6978      	ldr	r0, [r7, #20]
 800b662:	f000 fa03 	bl	800ba6c <tcp_listen_input>
      }
      pbuf_free(p);
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f7fd ff70 	bl	800954c <pbuf_free>
      return;
 800b66c:	e1a8      	b.n	800b9c0 <tcp_input+0x7ec>
 800b66e:	bf00      	nop
 800b670:	20018c0c 	.word	0x20018c0c
 800b674:	20015470 	.word	0x20015470
 800b678:	080164ac 	.word	0x080164ac
 800b67c:	080165d8 	.word	0x080165d8
 800b680:	080164f8 	.word	0x080164f8
 800b684:	20018bf0 	.word	0x20018bf0
 800b688:	08016604 	.word	0x08016604
 800b68c:	20018bf4 	.word	0x20018bf4
 800b690:	08016630 	.word	0x08016630
 800b694:	20018bec 	.word	0x20018bec
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800b698:	69fb      	ldr	r3, [r7, #28]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	f000 8158 	beq.w	800b950 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b6a0:	4b95      	ldr	r3, [pc, #596]	; (800b8f8 <tcp_input+0x724>)
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	891a      	ldrh	r2, [r3, #8]
 800b6aa:	4b93      	ldr	r3, [pc, #588]	; (800b8f8 <tcp_input+0x724>)
 800b6ac:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b6ae:	4a92      	ldr	r2, [pc, #584]	; (800b8f8 <tcp_input+0x724>)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b6b4:	4b91      	ldr	r3, [pc, #580]	; (800b8fc <tcp_input+0x728>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a8f      	ldr	r2, [pc, #572]	; (800b8f8 <tcp_input+0x724>)
 800b6ba:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b6bc:	4b90      	ldr	r3, [pc, #576]	; (800b900 <tcp_input+0x72c>)
 800b6be:	2200      	movs	r2, #0
 800b6c0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b6c2:	4b90      	ldr	r3, [pc, #576]	; (800b904 <tcp_input+0x730>)
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b6c8:	4b8f      	ldr	r3, [pc, #572]	; (800b908 <tcp_input+0x734>)
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b6ce:	4b8f      	ldr	r3, [pc, #572]	; (800b90c <tcp_input+0x738>)
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	f003 0308 	and.w	r3, r3, #8
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d006      	beq.n	800b6e8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	7b5b      	ldrb	r3, [r3, #13]
 800b6de:	f043 0301 	orr.w	r3, r3, #1
 800b6e2:	b2da      	uxtb	r2, r3
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b6e8:	69fb      	ldr	r3, [r7, #28]
 800b6ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d017      	beq.n	800b720 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b6f0:	69f8      	ldr	r0, [r7, #28]
 800b6f2:	f7ff f929 	bl	800a948 <tcp_process_refused_data>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	f113 0f0d 	cmn.w	r3, #13
 800b6fc:	d007      	beq.n	800b70e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b6fe:	69fb      	ldr	r3, [r7, #28]
 800b700:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b702:	2b00      	cmp	r3, #0
 800b704:	d00c      	beq.n	800b720 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b706:	4b82      	ldr	r3, [pc, #520]	; (800b910 <tcp_input+0x73c>)
 800b708:	881b      	ldrh	r3, [r3, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d008      	beq.n	800b720 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b70e:	69fb      	ldr	r3, [r7, #28]
 800b710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b712:	2b00      	cmp	r3, #0
 800b714:	f040 80e3 	bne.w	800b8de <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b718:	69f8      	ldr	r0, [r7, #28]
 800b71a:	f003 f9ad 	bl	800ea78 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b71e:	e0de      	b.n	800b8de <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800b720:	4a7c      	ldr	r2, [pc, #496]	; (800b914 <tcp_input+0x740>)
 800b722:	69fb      	ldr	r3, [r7, #28]
 800b724:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b726:	69f8      	ldr	r0, [r7, #28]
 800b728:	f000 fb18 	bl	800bd5c <tcp_process>
 800b72c:	4603      	mov	r3, r0
 800b72e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b730:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b734:	f113 0f0d 	cmn.w	r3, #13
 800b738:	f000 80d3 	beq.w	800b8e2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800b73c:	4b71      	ldr	r3, [pc, #452]	; (800b904 <tcp_input+0x730>)
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	f003 0308 	and.w	r3, r3, #8
 800b744:	2b00      	cmp	r3, #0
 800b746:	d015      	beq.n	800b774 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b748:	69fb      	ldr	r3, [r7, #28]
 800b74a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d008      	beq.n	800b764 <tcp_input+0x590>
 800b752:	69fb      	ldr	r3, [r7, #28]
 800b754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b758:	69fa      	ldr	r2, [r7, #28]
 800b75a:	6912      	ldr	r2, [r2, #16]
 800b75c:	f06f 010d 	mvn.w	r1, #13
 800b760:	4610      	mov	r0, r2
 800b762:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b764:	69f9      	ldr	r1, [r7, #28]
 800b766:	486c      	ldr	r0, [pc, #432]	; (800b918 <tcp_input+0x744>)
 800b768:	f7ff fbbc 	bl	800aee4 <tcp_pcb_remove>
        tcp_free(pcb);
 800b76c:	69f8      	ldr	r0, [r7, #28]
 800b76e:	f7fe f9a9 	bl	8009ac4 <tcp_free>
 800b772:	e0da      	b.n	800b92a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800b774:	2300      	movs	r3, #0
 800b776:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b778:	4b63      	ldr	r3, [pc, #396]	; (800b908 <tcp_input+0x734>)
 800b77a:	881b      	ldrh	r3, [r3, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d01d      	beq.n	800b7bc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b780:	4b61      	ldr	r3, [pc, #388]	; (800b908 <tcp_input+0x734>)
 800b782:	881b      	ldrh	r3, [r3, #0]
 800b784:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b786:	69fb      	ldr	r3, [r7, #28]
 800b788:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d00a      	beq.n	800b7a6 <tcp_input+0x5d2>
 800b790:	69fb      	ldr	r3, [r7, #28]
 800b792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b796:	69fa      	ldr	r2, [r7, #28]
 800b798:	6910      	ldr	r0, [r2, #16]
 800b79a:	89fa      	ldrh	r2, [r7, #14]
 800b79c:	69f9      	ldr	r1, [r7, #28]
 800b79e:	4798      	blx	r3
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	74fb      	strb	r3, [r7, #19]
 800b7a4:	e001      	b.n	800b7aa <tcp_input+0x5d6>
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b7aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b7ae:	f113 0f0d 	cmn.w	r3, #13
 800b7b2:	f000 8098 	beq.w	800b8e6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b7b6:	4b54      	ldr	r3, [pc, #336]	; (800b908 <tcp_input+0x734>)
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b7bc:	69f8      	ldr	r0, [r7, #28]
 800b7be:	f000 f915 	bl	800b9ec <tcp_input_delayed_close>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	f040 8090 	bne.w	800b8ea <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b7ca:	4b4d      	ldr	r3, [pc, #308]	; (800b900 <tcp_input+0x72c>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d041      	beq.n	800b856 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d006      	beq.n	800b7e8 <tcp_input+0x614>
 800b7da:	4b50      	ldr	r3, [pc, #320]	; (800b91c <tcp_input+0x748>)
 800b7dc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b7e0:	494f      	ldr	r1, [pc, #316]	; (800b920 <tcp_input+0x74c>)
 800b7e2:	4850      	ldr	r0, [pc, #320]	; (800b924 <tcp_input+0x750>)
 800b7e4:	f008 fd56 	bl	8014294 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b7e8:	69fb      	ldr	r3, [r7, #28]
 800b7ea:	8b5b      	ldrh	r3, [r3, #26]
 800b7ec:	f003 0310 	and.w	r3, r3, #16
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d008      	beq.n	800b806 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b7f4:	4b42      	ldr	r3, [pc, #264]	; (800b900 <tcp_input+0x72c>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f7fd fea7 	bl	800954c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b7fe:	69f8      	ldr	r0, [r7, #28]
 800b800:	f7fe fc48 	bl	800a094 <tcp_abort>
            goto aborted;
 800b804:	e091      	b.n	800b92a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b806:	69fb      	ldr	r3, [r7, #28]
 800b808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d00c      	beq.n	800b82a <tcp_input+0x656>
 800b810:	69fb      	ldr	r3, [r7, #28]
 800b812:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b816:	69fb      	ldr	r3, [r7, #28]
 800b818:	6918      	ldr	r0, [r3, #16]
 800b81a:	4b39      	ldr	r3, [pc, #228]	; (800b900 <tcp_input+0x72c>)
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	2300      	movs	r3, #0
 800b820:	69f9      	ldr	r1, [r7, #28]
 800b822:	47a0      	blx	r4
 800b824:	4603      	mov	r3, r0
 800b826:	74fb      	strb	r3, [r7, #19]
 800b828:	e008      	b.n	800b83c <tcp_input+0x668>
 800b82a:	4b35      	ldr	r3, [pc, #212]	; (800b900 <tcp_input+0x72c>)
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	2300      	movs	r3, #0
 800b830:	69f9      	ldr	r1, [r7, #28]
 800b832:	2000      	movs	r0, #0
 800b834:	f7ff f95e 	bl	800aaf4 <tcp_recv_null>
 800b838:	4603      	mov	r3, r0
 800b83a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b83c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b840:	f113 0f0d 	cmn.w	r3, #13
 800b844:	d053      	beq.n	800b8ee <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b846:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d003      	beq.n	800b856 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b84e:	4b2c      	ldr	r3, [pc, #176]	; (800b900 <tcp_input+0x72c>)
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	69fb      	ldr	r3, [r7, #28]
 800b854:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b856:	4b2b      	ldr	r3, [pc, #172]	; (800b904 <tcp_input+0x730>)
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	f003 0320 	and.w	r3, r3, #32
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d030      	beq.n	800b8c4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800b862:	69fb      	ldr	r3, [r7, #28]
 800b864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b866:	2b00      	cmp	r3, #0
 800b868:	d009      	beq.n	800b87e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b86e:	7b5a      	ldrb	r2, [r3, #13]
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b874:	f042 0220 	orr.w	r2, r2, #32
 800b878:	b2d2      	uxtb	r2, r2
 800b87a:	735a      	strb	r2, [r3, #13]
 800b87c:	e022      	b.n	800b8c4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b87e:	69fb      	ldr	r3, [r7, #28]
 800b880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b882:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b886:	d005      	beq.n	800b894 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b88c:	3301      	adds	r3, #1
 800b88e:	b29a      	uxth	r2, r3
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d00b      	beq.n	800b8b6 <tcp_input+0x6e2>
 800b89e:	69fb      	ldr	r3, [r7, #28]
 800b8a0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b8a4:	69fb      	ldr	r3, [r7, #28]
 800b8a6:	6918      	ldr	r0, [r3, #16]
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	69f9      	ldr	r1, [r7, #28]
 800b8ae:	47a0      	blx	r4
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	74fb      	strb	r3, [r7, #19]
 800b8b4:	e001      	b.n	800b8ba <tcp_input+0x6e6>
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b8ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b8be:	f113 0f0d 	cmn.w	r3, #13
 800b8c2:	d016      	beq.n	800b8f2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b8c4:	4b13      	ldr	r3, [pc, #76]	; (800b914 <tcp_input+0x740>)
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b8ca:	69f8      	ldr	r0, [r7, #28]
 800b8cc:	f000 f88e 	bl	800b9ec <tcp_input_delayed_close>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d128      	bne.n	800b928 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b8d6:	69f8      	ldr	r0, [r7, #28]
 800b8d8:	f002 fac8 	bl	800de6c <tcp_output>
 800b8dc:	e025      	b.n	800b92a <tcp_input+0x756>
        goto aborted;
 800b8de:	bf00      	nop
 800b8e0:	e023      	b.n	800b92a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b8e2:	bf00      	nop
 800b8e4:	e021      	b.n	800b92a <tcp_input+0x756>
              goto aborted;
 800b8e6:	bf00      	nop
 800b8e8:	e01f      	b.n	800b92a <tcp_input+0x756>
          goto aborted;
 800b8ea:	bf00      	nop
 800b8ec:	e01d      	b.n	800b92a <tcp_input+0x756>
            goto aborted;
 800b8ee:	bf00      	nop
 800b8f0:	e01b      	b.n	800b92a <tcp_input+0x756>
              goto aborted;
 800b8f2:	bf00      	nop
 800b8f4:	e019      	b.n	800b92a <tcp_input+0x756>
 800b8f6:	bf00      	nop
 800b8f8:	20018bfc 	.word	0x20018bfc
 800b8fc:	20018c0c 	.word	0x20018c0c
 800b900:	20018c2c 	.word	0x20018c2c
 800b904:	20018c29 	.word	0x20018c29
 800b908:	20018c24 	.word	0x20018c24
 800b90c:	20018c28 	.word	0x20018c28
 800b910:	20018c26 	.word	0x20018c26
 800b914:	20018c30 	.word	0x20018c30
 800b918:	20018bf0 	.word	0x20018bf0
 800b91c:	080164ac 	.word	0x080164ac
 800b920:	08016660 	.word	0x08016660
 800b924:	080164f8 	.word	0x080164f8
          goto aborted;
 800b928:	bf00      	nop
    tcp_input_pcb = NULL;
 800b92a:	4b27      	ldr	r3, [pc, #156]	; (800b9c8 <tcp_input+0x7f4>)
 800b92c:	2200      	movs	r2, #0
 800b92e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b930:	4b26      	ldr	r3, [pc, #152]	; (800b9cc <tcp_input+0x7f8>)
 800b932:	2200      	movs	r2, #0
 800b934:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b936:	4b26      	ldr	r3, [pc, #152]	; (800b9d0 <tcp_input+0x7fc>)
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d03f      	beq.n	800b9be <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800b93e:	4b24      	ldr	r3, [pc, #144]	; (800b9d0 <tcp_input+0x7fc>)
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	4618      	mov	r0, r3
 800b944:	f7fd fe02 	bl	800954c <pbuf_free>
      inseg.p = NULL;
 800b948:	4b21      	ldr	r3, [pc, #132]	; (800b9d0 <tcp_input+0x7fc>)
 800b94a:	2200      	movs	r2, #0
 800b94c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b94e:	e036      	b.n	800b9be <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b950:	4b20      	ldr	r3, [pc, #128]	; (800b9d4 <tcp_input+0x800>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	899b      	ldrh	r3, [r3, #12]
 800b956:	b29b      	uxth	r3, r3
 800b958:	4618      	mov	r0, r3
 800b95a:	f7fc f9f9 	bl	8007d50 <lwip_htons>
 800b95e:	4603      	mov	r3, r0
 800b960:	b2db      	uxtb	r3, r3
 800b962:	f003 0304 	and.w	r3, r3, #4
 800b966:	2b00      	cmp	r3, #0
 800b968:	d118      	bne.n	800b99c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b96a:	4b1b      	ldr	r3, [pc, #108]	; (800b9d8 <tcp_input+0x804>)
 800b96c:	6819      	ldr	r1, [r3, #0]
 800b96e:	4b1b      	ldr	r3, [pc, #108]	; (800b9dc <tcp_input+0x808>)
 800b970:	881b      	ldrh	r3, [r3, #0]
 800b972:	461a      	mov	r2, r3
 800b974:	4b1a      	ldr	r3, [pc, #104]	; (800b9e0 <tcp_input+0x80c>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b97a:	4b16      	ldr	r3, [pc, #88]	; (800b9d4 <tcp_input+0x800>)
 800b97c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b97e:	885b      	ldrh	r3, [r3, #2]
 800b980:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b982:	4a14      	ldr	r2, [pc, #80]	; (800b9d4 <tcp_input+0x800>)
 800b984:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b986:	8812      	ldrh	r2, [r2, #0]
 800b988:	b292      	uxth	r2, r2
 800b98a:	9202      	str	r2, [sp, #8]
 800b98c:	9301      	str	r3, [sp, #4]
 800b98e:	4b15      	ldr	r3, [pc, #84]	; (800b9e4 <tcp_input+0x810>)
 800b990:	9300      	str	r3, [sp, #0]
 800b992:	4b15      	ldr	r3, [pc, #84]	; (800b9e8 <tcp_input+0x814>)
 800b994:	4602      	mov	r2, r0
 800b996:	2000      	movs	r0, #0
 800b998:	f003 f81c 	bl	800e9d4 <tcp_rst>
    pbuf_free(p);
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f7fd fdd5 	bl	800954c <pbuf_free>
  return;
 800b9a2:	e00c      	b.n	800b9be <tcp_input+0x7ea>
    goto dropped;
 800b9a4:	bf00      	nop
 800b9a6:	e006      	b.n	800b9b6 <tcp_input+0x7e2>
    goto dropped;
 800b9a8:	bf00      	nop
 800b9aa:	e004      	b.n	800b9b6 <tcp_input+0x7e2>
    goto dropped;
 800b9ac:	bf00      	nop
 800b9ae:	e002      	b.n	800b9b6 <tcp_input+0x7e2>
      goto dropped;
 800b9b0:	bf00      	nop
 800b9b2:	e000      	b.n	800b9b6 <tcp_input+0x7e2>
      goto dropped;
 800b9b4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f7fd fdc8 	bl	800954c <pbuf_free>
 800b9bc:	e000      	b.n	800b9c0 <tcp_input+0x7ec>
  return;
 800b9be:	bf00      	nop
}
 800b9c0:	3724      	adds	r7, #36	; 0x24
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd90      	pop	{r4, r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	20018c30 	.word	0x20018c30
 800b9cc:	20018c2c 	.word	0x20018c2c
 800b9d0:	20018bfc 	.word	0x20018bfc
 800b9d4:	20018c0c 	.word	0x20018c0c
 800b9d8:	20018c20 	.word	0x20018c20
 800b9dc:	20018c26 	.word	0x20018c26
 800b9e0:	20018c1c 	.word	0x20018c1c
 800b9e4:	20015480 	.word	0x20015480
 800b9e8:	20015484 	.word	0x20015484

0800b9ec <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d106      	bne.n	800ba08 <tcp_input_delayed_close+0x1c>
 800b9fa:	4b17      	ldr	r3, [pc, #92]	; (800ba58 <tcp_input_delayed_close+0x6c>)
 800b9fc:	f240 225a 	movw	r2, #602	; 0x25a
 800ba00:	4916      	ldr	r1, [pc, #88]	; (800ba5c <tcp_input_delayed_close+0x70>)
 800ba02:	4817      	ldr	r0, [pc, #92]	; (800ba60 <tcp_input_delayed_close+0x74>)
 800ba04:	f008 fc46 	bl	8014294 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ba08:	4b16      	ldr	r3, [pc, #88]	; (800ba64 <tcp_input_delayed_close+0x78>)
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	f003 0310 	and.w	r3, r3, #16
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d01c      	beq.n	800ba4e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	8b5b      	ldrh	r3, [r3, #26]
 800ba18:	f003 0310 	and.w	r3, r3, #16
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d10d      	bne.n	800ba3c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d008      	beq.n	800ba3c <tcp_input_delayed_close+0x50>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba30:	687a      	ldr	r2, [r7, #4]
 800ba32:	6912      	ldr	r2, [r2, #16]
 800ba34:	f06f 010e 	mvn.w	r1, #14
 800ba38:	4610      	mov	r0, r2
 800ba3a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ba3c:	6879      	ldr	r1, [r7, #4]
 800ba3e:	480a      	ldr	r0, [pc, #40]	; (800ba68 <tcp_input_delayed_close+0x7c>)
 800ba40:	f7ff fa50 	bl	800aee4 <tcp_pcb_remove>
    tcp_free(pcb);
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f7fe f83d 	bl	8009ac4 <tcp_free>
    return 1;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	e000      	b.n	800ba50 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ba4e:	2300      	movs	r3, #0
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3708      	adds	r7, #8
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	080164ac 	.word	0x080164ac
 800ba5c:	0801667c 	.word	0x0801667c
 800ba60:	080164f8 	.word	0x080164f8
 800ba64:	20018c29 	.word	0x20018c29
 800ba68:	20018bf0 	.word	0x20018bf0

0800ba6c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ba6c:	b590      	push	{r4, r7, lr}
 800ba6e:	b08b      	sub	sp, #44	; 0x2c
 800ba70:	af04      	add	r7, sp, #16
 800ba72:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ba74:	4b6f      	ldr	r3, [pc, #444]	; (800bc34 <tcp_listen_input+0x1c8>)
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	f003 0304 	and.w	r3, r3, #4
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	f040 80d2 	bne.w	800bc26 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d106      	bne.n	800ba96 <tcp_listen_input+0x2a>
 800ba88:	4b6b      	ldr	r3, [pc, #428]	; (800bc38 <tcp_listen_input+0x1cc>)
 800ba8a:	f240 2281 	movw	r2, #641	; 0x281
 800ba8e:	496b      	ldr	r1, [pc, #428]	; (800bc3c <tcp_listen_input+0x1d0>)
 800ba90:	486b      	ldr	r0, [pc, #428]	; (800bc40 <tcp_listen_input+0x1d4>)
 800ba92:	f008 fbff 	bl	8014294 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ba96:	4b67      	ldr	r3, [pc, #412]	; (800bc34 <tcp_listen_input+0x1c8>)
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	f003 0310 	and.w	r3, r3, #16
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d019      	beq.n	800bad6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800baa2:	4b68      	ldr	r3, [pc, #416]	; (800bc44 <tcp_listen_input+0x1d8>)
 800baa4:	6819      	ldr	r1, [r3, #0]
 800baa6:	4b68      	ldr	r3, [pc, #416]	; (800bc48 <tcp_listen_input+0x1dc>)
 800baa8:	881b      	ldrh	r3, [r3, #0]
 800baaa:	461a      	mov	r2, r3
 800baac:	4b67      	ldr	r3, [pc, #412]	; (800bc4c <tcp_listen_input+0x1e0>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bab2:	4b67      	ldr	r3, [pc, #412]	; (800bc50 <tcp_listen_input+0x1e4>)
 800bab4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bab6:	885b      	ldrh	r3, [r3, #2]
 800bab8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800baba:	4a65      	ldr	r2, [pc, #404]	; (800bc50 <tcp_listen_input+0x1e4>)
 800babc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800babe:	8812      	ldrh	r2, [r2, #0]
 800bac0:	b292      	uxth	r2, r2
 800bac2:	9202      	str	r2, [sp, #8]
 800bac4:	9301      	str	r3, [sp, #4]
 800bac6:	4b63      	ldr	r3, [pc, #396]	; (800bc54 <tcp_listen_input+0x1e8>)
 800bac8:	9300      	str	r3, [sp, #0]
 800baca:	4b63      	ldr	r3, [pc, #396]	; (800bc58 <tcp_listen_input+0x1ec>)
 800bacc:	4602      	mov	r2, r0
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f002 ff80 	bl	800e9d4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800bad4:	e0a9      	b.n	800bc2a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800bad6:	4b57      	ldr	r3, [pc, #348]	; (800bc34 <tcp_listen_input+0x1c8>)
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	f003 0302 	and.w	r3, r3, #2
 800bade:	2b00      	cmp	r3, #0
 800bae0:	f000 80a3 	beq.w	800bc2a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	7d5b      	ldrb	r3, [r3, #21]
 800bae8:	4618      	mov	r0, r3
 800baea:	f7ff f927 	bl	800ad3c <tcp_alloc>
 800baee:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d111      	bne.n	800bb1a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	699b      	ldr	r3, [r3, #24]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d00a      	beq.n	800bb14 <tcp_listen_input+0xa8>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	699b      	ldr	r3, [r3, #24]
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	6910      	ldr	r0, [r2, #16]
 800bb06:	f04f 32ff 	mov.w	r2, #4294967295
 800bb0a:	2100      	movs	r1, #0
 800bb0c:	4798      	blx	r3
 800bb0e:	4603      	mov	r3, r0
 800bb10:	73bb      	strb	r3, [r7, #14]
      return;
 800bb12:	e08b      	b.n	800bc2c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bb14:	23f0      	movs	r3, #240	; 0xf0
 800bb16:	73bb      	strb	r3, [r7, #14]
      return;
 800bb18:	e088      	b.n	800bc2c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800bb1a:	4b50      	ldr	r3, [pc, #320]	; (800bc5c <tcp_listen_input+0x1f0>)
 800bb1c:	695a      	ldr	r2, [r3, #20]
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800bb22:	4b4e      	ldr	r3, [pc, #312]	; (800bc5c <tcp_listen_input+0x1f0>)
 800bb24:	691a      	ldr	r2, [r3, #16]
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	8ada      	ldrh	r2, [r3, #22]
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800bb32:	4b47      	ldr	r3, [pc, #284]	; (800bc50 <tcp_listen_input+0x1e4>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	881b      	ldrh	r3, [r3, #0]
 800bb38:	b29a      	uxth	r2, r3
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	2203      	movs	r2, #3
 800bb42:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800bb44:	4b41      	ldr	r3, [pc, #260]	; (800bc4c <tcp_listen_input+0x1e0>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	1c5a      	adds	r2, r3, #1
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800bb56:	6978      	ldr	r0, [r7, #20]
 800bb58:	f7ff fa58 	bl	800b00c <tcp_next_iss>
 800bb5c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	693a      	ldr	r2, [r7, #16]
 800bb62:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	693a      	ldr	r2, [r7, #16]
 800bb68:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	693a      	ldr	r2, [r7, #16]
 800bb6e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	693a      	ldr	r2, [r7, #16]
 800bb74:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800bb76:	4b35      	ldr	r3, [pc, #212]	; (800bc4c <tcp_listen_input+0x1e0>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	1e5a      	subs	r2, r3, #1
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	691a      	ldr	r2, [r3, #16]
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	7a5b      	ldrb	r3, [r3, #9]
 800bb92:	f003 030c 	and.w	r3, r3, #12
 800bb96:	b2da      	uxtb	r2, r3
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	7a1a      	ldrb	r2, [r3, #8]
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800bba4:	4b2e      	ldr	r3, [pc, #184]	; (800bc60 <tcp_listen_input+0x1f4>)
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	60da      	str	r2, [r3, #12]
 800bbac:	4a2c      	ldr	r2, [pc, #176]	; (800bc60 <tcp_listen_input+0x1f4>)
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	6013      	str	r3, [r2, #0]
 800bbb2:	f003 f8d1 	bl	800ed58 <tcp_timer_needed>
 800bbb6:	4b2b      	ldr	r3, [pc, #172]	; (800bc64 <tcp_listen_input+0x1f8>)
 800bbb8:	2201      	movs	r2, #1
 800bbba:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800bbbc:	6978      	ldr	r0, [r7, #20]
 800bbbe:	f001 fd8f 	bl	800d6e0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800bbc2:	4b23      	ldr	r3, [pc, #140]	; (800bc50 <tcp_listen_input+0x1e4>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	89db      	ldrh	r3, [r3, #14]
 800bbc8:	b29a      	uxth	r2, r3
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	3304      	adds	r3, #4
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f006 fe5d 	bl	80128a4 <ip4_route>
 800bbea:	4601      	mov	r1, r0
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	3304      	adds	r3, #4
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	f7ff fa30 	bl	800b058 <tcp_eff_send_mss_netif>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800bc00:	2112      	movs	r1, #18
 800bc02:	6978      	ldr	r0, [r7, #20]
 800bc04:	f002 f844 	bl	800dc90 <tcp_enqueue_flags>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800bc0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d004      	beq.n	800bc1e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800bc14:	2100      	movs	r1, #0
 800bc16:	6978      	ldr	r0, [r7, #20]
 800bc18:	f7fe f97e 	bl	8009f18 <tcp_abandon>
      return;
 800bc1c:	e006      	b.n	800bc2c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800bc1e:	6978      	ldr	r0, [r7, #20]
 800bc20:	f002 f924 	bl	800de6c <tcp_output>
  return;
 800bc24:	e001      	b.n	800bc2a <tcp_listen_input+0x1be>
    return;
 800bc26:	bf00      	nop
 800bc28:	e000      	b.n	800bc2c <tcp_listen_input+0x1c0>
  return;
 800bc2a:	bf00      	nop
}
 800bc2c:	371c      	adds	r7, #28
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd90      	pop	{r4, r7, pc}
 800bc32:	bf00      	nop
 800bc34:	20018c28 	.word	0x20018c28
 800bc38:	080164ac 	.word	0x080164ac
 800bc3c:	080166a4 	.word	0x080166a4
 800bc40:	080164f8 	.word	0x080164f8
 800bc44:	20018c20 	.word	0x20018c20
 800bc48:	20018c26 	.word	0x20018c26
 800bc4c:	20018c1c 	.word	0x20018c1c
 800bc50:	20018c0c 	.word	0x20018c0c
 800bc54:	20015480 	.word	0x20015480
 800bc58:	20015484 	.word	0x20015484
 800bc5c:	20015470 	.word	0x20015470
 800bc60:	20018bf0 	.word	0x20018bf0
 800bc64:	20018bf8 	.word	0x20018bf8

0800bc68 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b086      	sub	sp, #24
 800bc6c:	af04      	add	r7, sp, #16
 800bc6e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800bc70:	4b2f      	ldr	r3, [pc, #188]	; (800bd30 <tcp_timewait_input+0xc8>)
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	f003 0304 	and.w	r3, r3, #4
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d153      	bne.n	800bd24 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d106      	bne.n	800bc90 <tcp_timewait_input+0x28>
 800bc82:	4b2c      	ldr	r3, [pc, #176]	; (800bd34 <tcp_timewait_input+0xcc>)
 800bc84:	f240 22ee 	movw	r2, #750	; 0x2ee
 800bc88:	492b      	ldr	r1, [pc, #172]	; (800bd38 <tcp_timewait_input+0xd0>)
 800bc8a:	482c      	ldr	r0, [pc, #176]	; (800bd3c <tcp_timewait_input+0xd4>)
 800bc8c:	f008 fb02 	bl	8014294 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800bc90:	4b27      	ldr	r3, [pc, #156]	; (800bd30 <tcp_timewait_input+0xc8>)
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	f003 0302 	and.w	r3, r3, #2
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d02a      	beq.n	800bcf2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800bc9c:	4b28      	ldr	r3, [pc, #160]	; (800bd40 <tcp_timewait_input+0xd8>)
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca4:	1ad3      	subs	r3, r2, r3
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	db2d      	blt.n	800bd06 <tcp_timewait_input+0x9e>
 800bcaa:	4b25      	ldr	r3, [pc, #148]	; (800bd40 <tcp_timewait_input+0xd8>)
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb2:	6879      	ldr	r1, [r7, #4]
 800bcb4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bcb6:	440b      	add	r3, r1
 800bcb8:	1ad3      	subs	r3, r2, r3
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	dc23      	bgt.n	800bd06 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bcbe:	4b21      	ldr	r3, [pc, #132]	; (800bd44 <tcp_timewait_input+0xdc>)
 800bcc0:	6819      	ldr	r1, [r3, #0]
 800bcc2:	4b21      	ldr	r3, [pc, #132]	; (800bd48 <tcp_timewait_input+0xe0>)
 800bcc4:	881b      	ldrh	r3, [r3, #0]
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	4b1d      	ldr	r3, [pc, #116]	; (800bd40 <tcp_timewait_input+0xd8>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bcce:	4b1f      	ldr	r3, [pc, #124]	; (800bd4c <tcp_timewait_input+0xe4>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bcd2:	885b      	ldrh	r3, [r3, #2]
 800bcd4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bcd6:	4a1d      	ldr	r2, [pc, #116]	; (800bd4c <tcp_timewait_input+0xe4>)
 800bcd8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bcda:	8812      	ldrh	r2, [r2, #0]
 800bcdc:	b292      	uxth	r2, r2
 800bcde:	9202      	str	r2, [sp, #8]
 800bce0:	9301      	str	r3, [sp, #4]
 800bce2:	4b1b      	ldr	r3, [pc, #108]	; (800bd50 <tcp_timewait_input+0xe8>)
 800bce4:	9300      	str	r3, [sp, #0]
 800bce6:	4b1b      	ldr	r3, [pc, #108]	; (800bd54 <tcp_timewait_input+0xec>)
 800bce8:	4602      	mov	r2, r0
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f002 fe72 	bl	800e9d4 <tcp_rst>
      return;
 800bcf0:	e01b      	b.n	800bd2a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800bcf2:	4b0f      	ldr	r3, [pc, #60]	; (800bd30 <tcp_timewait_input+0xc8>)
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	f003 0301 	and.w	r3, r3, #1
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d003      	beq.n	800bd06 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800bcfe:	4b16      	ldr	r3, [pc, #88]	; (800bd58 <tcp_timewait_input+0xf0>)
 800bd00:	681a      	ldr	r2, [r3, #0]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800bd06:	4b10      	ldr	r3, [pc, #64]	; (800bd48 <tcp_timewait_input+0xe0>)
 800bd08:	881b      	ldrh	r3, [r3, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d00c      	beq.n	800bd28 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	8b5b      	ldrh	r3, [r3, #26]
 800bd12:	f043 0302 	orr.w	r3, r3, #2
 800bd16:	b29a      	uxth	r2, r3
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f002 f8a5 	bl	800de6c <tcp_output>
  }
  return;
 800bd22:	e001      	b.n	800bd28 <tcp_timewait_input+0xc0>
    return;
 800bd24:	bf00      	nop
 800bd26:	e000      	b.n	800bd2a <tcp_timewait_input+0xc2>
  return;
 800bd28:	bf00      	nop
}
 800bd2a:	3708      	adds	r7, #8
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	20018c28 	.word	0x20018c28
 800bd34:	080164ac 	.word	0x080164ac
 800bd38:	080166c4 	.word	0x080166c4
 800bd3c:	080164f8 	.word	0x080164f8
 800bd40:	20018c1c 	.word	0x20018c1c
 800bd44:	20018c20 	.word	0x20018c20
 800bd48:	20018c26 	.word	0x20018c26
 800bd4c:	20018c0c 	.word	0x20018c0c
 800bd50:	20015480 	.word	0x20015480
 800bd54:	20015484 	.word	0x20015484
 800bd58:	20018be4 	.word	0x20018be4

0800bd5c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800bd5c:	b590      	push	{r4, r7, lr}
 800bd5e:	b08d      	sub	sp, #52	; 0x34
 800bd60:	af04      	add	r7, sp, #16
 800bd62:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800bd64:	2300      	movs	r3, #0
 800bd66:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d106      	bne.n	800bd80 <tcp_process+0x24>
 800bd72:	4b9d      	ldr	r3, [pc, #628]	; (800bfe8 <tcp_process+0x28c>)
 800bd74:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800bd78:	499c      	ldr	r1, [pc, #624]	; (800bfec <tcp_process+0x290>)
 800bd7a:	489d      	ldr	r0, [pc, #628]	; (800bff0 <tcp_process+0x294>)
 800bd7c:	f008 fa8a 	bl	8014294 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800bd80:	4b9c      	ldr	r3, [pc, #624]	; (800bff4 <tcp_process+0x298>)
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	f003 0304 	and.w	r3, r3, #4
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d04e      	beq.n	800be2a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	7d1b      	ldrb	r3, [r3, #20]
 800bd90:	2b02      	cmp	r3, #2
 800bd92:	d108      	bne.n	800bda6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bd98:	4b97      	ldr	r3, [pc, #604]	; (800bff8 <tcp_process+0x29c>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d123      	bne.n	800bde8 <tcp_process+0x8c>
        acceptable = 1;
 800bda0:	2301      	movs	r3, #1
 800bda2:	76fb      	strb	r3, [r7, #27]
 800bda4:	e020      	b.n	800bde8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bdaa:	4b94      	ldr	r3, [pc, #592]	; (800bffc <tcp_process+0x2a0>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d102      	bne.n	800bdb8 <tcp_process+0x5c>
        acceptable = 1;
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	76fb      	strb	r3, [r7, #27]
 800bdb6:	e017      	b.n	800bde8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bdb8:	4b90      	ldr	r3, [pc, #576]	; (800bffc <tcp_process+0x2a0>)
 800bdba:	681a      	ldr	r2, [r3, #0]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc0:	1ad3      	subs	r3, r2, r3
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	db10      	blt.n	800bde8 <tcp_process+0x8c>
 800bdc6:	4b8d      	ldr	r3, [pc, #564]	; (800bffc <tcp_process+0x2a0>)
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdce:	6879      	ldr	r1, [r7, #4]
 800bdd0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bdd2:	440b      	add	r3, r1
 800bdd4:	1ad3      	subs	r3, r2, r3
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	dc06      	bgt.n	800bde8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	8b5b      	ldrh	r3, [r3, #26]
 800bdde:	f043 0302 	orr.w	r3, r3, #2
 800bde2:	b29a      	uxth	r2, r3
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800bde8:	7efb      	ldrb	r3, [r7, #27]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d01b      	beq.n	800be26 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	7d1b      	ldrb	r3, [r3, #20]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d106      	bne.n	800be04 <tcp_process+0xa8>
 800bdf6:	4b7c      	ldr	r3, [pc, #496]	; (800bfe8 <tcp_process+0x28c>)
 800bdf8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800bdfc:	4980      	ldr	r1, [pc, #512]	; (800c000 <tcp_process+0x2a4>)
 800bdfe:	487c      	ldr	r0, [pc, #496]	; (800bff0 <tcp_process+0x294>)
 800be00:	f008 fa48 	bl	8014294 <iprintf>
      recv_flags |= TF_RESET;
 800be04:	4b7f      	ldr	r3, [pc, #508]	; (800c004 <tcp_process+0x2a8>)
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	f043 0308 	orr.w	r3, r3, #8
 800be0c:	b2da      	uxtb	r2, r3
 800be0e:	4b7d      	ldr	r3, [pc, #500]	; (800c004 <tcp_process+0x2a8>)
 800be10:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	8b5b      	ldrh	r3, [r3, #26]
 800be16:	f023 0301 	bic.w	r3, r3, #1
 800be1a:	b29a      	uxth	r2, r3
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800be20:	f06f 030d 	mvn.w	r3, #13
 800be24:	e37a      	b.n	800c51c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800be26:	2300      	movs	r3, #0
 800be28:	e378      	b.n	800c51c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800be2a:	4b72      	ldr	r3, [pc, #456]	; (800bff4 <tcp_process+0x298>)
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	f003 0302 	and.w	r3, r3, #2
 800be32:	2b00      	cmp	r3, #0
 800be34:	d010      	beq.n	800be58 <tcp_process+0xfc>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	7d1b      	ldrb	r3, [r3, #20]
 800be3a:	2b02      	cmp	r3, #2
 800be3c:	d00c      	beq.n	800be58 <tcp_process+0xfc>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	7d1b      	ldrb	r3, [r3, #20]
 800be42:	2b03      	cmp	r3, #3
 800be44:	d008      	beq.n	800be58 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	8b5b      	ldrh	r3, [r3, #26]
 800be4a:	f043 0302 	orr.w	r3, r3, #2
 800be4e:	b29a      	uxth	r2, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800be54:	2300      	movs	r3, #0
 800be56:	e361      	b.n	800c51c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	8b5b      	ldrh	r3, [r3, #26]
 800be5c:	f003 0310 	and.w	r3, r3, #16
 800be60:	2b00      	cmp	r3, #0
 800be62:	d103      	bne.n	800be6c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800be64:	4b68      	ldr	r3, [pc, #416]	; (800c008 <tcp_process+0x2ac>)
 800be66:	681a      	ldr	r2, [r3, #0]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2200      	movs	r2, #0
 800be78:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f001 fc2f 	bl	800d6e0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	7d1b      	ldrb	r3, [r3, #20]
 800be86:	3b02      	subs	r3, #2
 800be88:	2b07      	cmp	r3, #7
 800be8a:	f200 8337 	bhi.w	800c4fc <tcp_process+0x7a0>
 800be8e:	a201      	add	r2, pc, #4	; (adr r2, 800be94 <tcp_process+0x138>)
 800be90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be94:	0800beb5 	.word	0x0800beb5
 800be98:	0800c0e5 	.word	0x0800c0e5
 800be9c:	0800c25d 	.word	0x0800c25d
 800bea0:	0800c287 	.word	0x0800c287
 800bea4:	0800c3ab 	.word	0x0800c3ab
 800bea8:	0800c25d 	.word	0x0800c25d
 800beac:	0800c437 	.word	0x0800c437
 800beb0:	0800c4c7 	.word	0x0800c4c7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800beb4:	4b4f      	ldr	r3, [pc, #316]	; (800bff4 <tcp_process+0x298>)
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	f003 0310 	and.w	r3, r3, #16
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	f000 80e4 	beq.w	800c08a <tcp_process+0x32e>
 800bec2:	4b4c      	ldr	r3, [pc, #304]	; (800bff4 <tcp_process+0x298>)
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	f003 0302 	and.w	r3, r3, #2
 800beca:	2b00      	cmp	r3, #0
 800becc:	f000 80dd 	beq.w	800c08a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bed4:	1c5a      	adds	r2, r3, #1
 800bed6:	4b48      	ldr	r3, [pc, #288]	; (800bff8 <tcp_process+0x29c>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	429a      	cmp	r2, r3
 800bedc:	f040 80d5 	bne.w	800c08a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800bee0:	4b46      	ldr	r3, [pc, #280]	; (800bffc <tcp_process+0x2a0>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	1c5a      	adds	r2, r3, #1
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800bef2:	4b41      	ldr	r3, [pc, #260]	; (800bff8 <tcp_process+0x29c>)
 800bef4:	681a      	ldr	r2, [r3, #0]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800befa:	4b44      	ldr	r3, [pc, #272]	; (800c00c <tcp_process+0x2b0>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	89db      	ldrh	r3, [r3, #14]
 800bf00:	b29a      	uxth	r2, r3
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800bf14:	4b39      	ldr	r3, [pc, #228]	; (800bffc <tcp_process+0x2a0>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	1e5a      	subs	r2, r3, #1
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2204      	movs	r2, #4
 800bf22:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	3304      	adds	r3, #4
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f006 fcb9 	bl	80128a4 <ip4_route>
 800bf32:	4601      	mov	r1, r0
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	3304      	adds	r3, #4
 800bf38:	461a      	mov	r2, r3
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	f7ff f88c 	bl	800b058 <tcp_eff_send_mss_netif>
 800bf40:	4603      	mov	r3, r0
 800bf42:	461a      	mov	r2, r3
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf4c:	009a      	lsls	r2, r3, #2
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf52:	005b      	lsls	r3, r3, #1
 800bf54:	f241 111c 	movw	r1, #4380	; 0x111c
 800bf58:	428b      	cmp	r3, r1
 800bf5a:	bf38      	it	cc
 800bf5c:	460b      	movcc	r3, r1
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d204      	bcs.n	800bf6c <tcp_process+0x210>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	b29b      	uxth	r3, r3
 800bf6a:	e00d      	b.n	800bf88 <tcp_process+0x22c>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf70:	005b      	lsls	r3, r3, #1
 800bf72:	f241 121c 	movw	r2, #4380	; 0x111c
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d904      	bls.n	800bf84 <tcp_process+0x228>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf7e:	005b      	lsls	r3, r3, #1
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	e001      	b.n	800bf88 <tcp_process+0x22c>
 800bf84:	f241 131c 	movw	r3, #4380	; 0x111c
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d106      	bne.n	800bfa6 <tcp_process+0x24a>
 800bf98:	4b13      	ldr	r3, [pc, #76]	; (800bfe8 <tcp_process+0x28c>)
 800bf9a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800bf9e:	491c      	ldr	r1, [pc, #112]	; (800c010 <tcp_process+0x2b4>)
 800bfa0:	4813      	ldr	r0, [pc, #76]	; (800bff0 <tcp_process+0x294>)
 800bfa2:	f008 f977 	bl	8014294 <iprintf>
        --pcb->snd_queuelen;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bfac:	3b01      	subs	r3, #1
 800bfae:	b29a      	uxth	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfba:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800bfbc:	69fb      	ldr	r3, [r7, #28]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d12a      	bne.n	800c018 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfc6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d106      	bne.n	800bfdc <tcp_process+0x280>
 800bfce:	4b06      	ldr	r3, [pc, #24]	; (800bfe8 <tcp_process+0x28c>)
 800bfd0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800bfd4:	490f      	ldr	r1, [pc, #60]	; (800c014 <tcp_process+0x2b8>)
 800bfd6:	4806      	ldr	r0, [pc, #24]	; (800bff0 <tcp_process+0x294>)
 800bfd8:	f008 f95c 	bl	8014294 <iprintf>
          pcb->unsent = rseg->next;
 800bfdc:	69fb      	ldr	r3, [r7, #28]
 800bfde:	681a      	ldr	r2, [r3, #0]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	66da      	str	r2, [r3, #108]	; 0x6c
 800bfe4:	e01c      	b.n	800c020 <tcp_process+0x2c4>
 800bfe6:	bf00      	nop
 800bfe8:	080164ac 	.word	0x080164ac
 800bfec:	080166e4 	.word	0x080166e4
 800bff0:	080164f8 	.word	0x080164f8
 800bff4:	20018c28 	.word	0x20018c28
 800bff8:	20018c20 	.word	0x20018c20
 800bffc:	20018c1c 	.word	0x20018c1c
 800c000:	08016700 	.word	0x08016700
 800c004:	20018c29 	.word	0x20018c29
 800c008:	20018be4 	.word	0x20018be4
 800c00c:	20018c0c 	.word	0x20018c0c
 800c010:	08016720 	.word	0x08016720
 800c014:	08016738 	.word	0x08016738
        } else {
          pcb->unacked = rseg->next;
 800c018:	69fb      	ldr	r3, [r7, #28]
 800c01a:	681a      	ldr	r2, [r3, #0]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800c020:	69f8      	ldr	r0, [r7, #28]
 800c022:	f7fe fd22 	bl	800aa6a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d104      	bne.n	800c038 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c034:	861a      	strh	r2, [r3, #48]	; 0x30
 800c036:	e006      	b.n	800c046 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2200      	movs	r2, #0
 800c03c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2200      	movs	r2, #0
 800c042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d00a      	beq.n	800c066 <tcp_process+0x30a>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	6910      	ldr	r0, [r2, #16]
 800c05a:	2200      	movs	r2, #0
 800c05c:	6879      	ldr	r1, [r7, #4]
 800c05e:	4798      	blx	r3
 800c060:	4603      	mov	r3, r0
 800c062:	76bb      	strb	r3, [r7, #26]
 800c064:	e001      	b.n	800c06a <tcp_process+0x30e>
 800c066:	2300      	movs	r3, #0
 800c068:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c06a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c06e:	f113 0f0d 	cmn.w	r3, #13
 800c072:	d102      	bne.n	800c07a <tcp_process+0x31e>
          return ERR_ABRT;
 800c074:	f06f 030c 	mvn.w	r3, #12
 800c078:	e250      	b.n	800c51c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	8b5b      	ldrh	r3, [r3, #26]
 800c07e:	f043 0302 	orr.w	r3, r3, #2
 800c082:	b29a      	uxth	r2, r3
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c088:	e23a      	b.n	800c500 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c08a:	4b98      	ldr	r3, [pc, #608]	; (800c2ec <tcp_process+0x590>)
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	f003 0310 	and.w	r3, r3, #16
 800c092:	2b00      	cmp	r3, #0
 800c094:	f000 8234 	beq.w	800c500 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c098:	4b95      	ldr	r3, [pc, #596]	; (800c2f0 <tcp_process+0x594>)
 800c09a:	6819      	ldr	r1, [r3, #0]
 800c09c:	4b95      	ldr	r3, [pc, #596]	; (800c2f4 <tcp_process+0x598>)
 800c09e:	881b      	ldrh	r3, [r3, #0]
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	4b95      	ldr	r3, [pc, #596]	; (800c2f8 <tcp_process+0x59c>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c0a8:	4b94      	ldr	r3, [pc, #592]	; (800c2fc <tcp_process+0x5a0>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0ac:	885b      	ldrh	r3, [r3, #2]
 800c0ae:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c0b0:	4a92      	ldr	r2, [pc, #584]	; (800c2fc <tcp_process+0x5a0>)
 800c0b2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0b4:	8812      	ldrh	r2, [r2, #0]
 800c0b6:	b292      	uxth	r2, r2
 800c0b8:	9202      	str	r2, [sp, #8]
 800c0ba:	9301      	str	r3, [sp, #4]
 800c0bc:	4b90      	ldr	r3, [pc, #576]	; (800c300 <tcp_process+0x5a4>)
 800c0be:	9300      	str	r3, [sp, #0]
 800c0c0:	4b90      	ldr	r3, [pc, #576]	; (800c304 <tcp_process+0x5a8>)
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f002 fc85 	bl	800e9d4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c0d0:	2b05      	cmp	r3, #5
 800c0d2:	f200 8215 	bhi.w	800c500 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f002 fa4f 	bl	800e580 <tcp_rexmit_rto>
      break;
 800c0e2:	e20d      	b.n	800c500 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c0e4:	4b81      	ldr	r3, [pc, #516]	; (800c2ec <tcp_process+0x590>)
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	f003 0310 	and.w	r3, r3, #16
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	f000 80a1 	beq.w	800c234 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c0f2:	4b7f      	ldr	r3, [pc, #508]	; (800c2f0 <tcp_process+0x594>)
 800c0f4:	681a      	ldr	r2, [r3, #0]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0fa:	1ad3      	subs	r3, r2, r3
 800c0fc:	3b01      	subs	r3, #1
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	db7e      	blt.n	800c200 <tcp_process+0x4a4>
 800c102:	4b7b      	ldr	r3, [pc, #492]	; (800c2f0 <tcp_process+0x594>)
 800c104:	681a      	ldr	r2, [r3, #0]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c10a:	1ad3      	subs	r3, r2, r3
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	dc77      	bgt.n	800c200 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2204      	movs	r2, #4
 800c114:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d102      	bne.n	800c124 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800c11e:	23fa      	movs	r3, #250	; 0xfa
 800c120:	76bb      	strb	r3, [r7, #26]
 800c122:	e01d      	b.n	800c160 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c128:	699b      	ldr	r3, [r3, #24]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d106      	bne.n	800c13c <tcp_process+0x3e0>
 800c12e:	4b76      	ldr	r3, [pc, #472]	; (800c308 <tcp_process+0x5ac>)
 800c130:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c134:	4975      	ldr	r1, [pc, #468]	; (800c30c <tcp_process+0x5b0>)
 800c136:	4876      	ldr	r0, [pc, #472]	; (800c310 <tcp_process+0x5b4>)
 800c138:	f008 f8ac 	bl	8014294 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c140:	699b      	ldr	r3, [r3, #24]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d00a      	beq.n	800c15c <tcp_process+0x400>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c14a:	699b      	ldr	r3, [r3, #24]
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	6910      	ldr	r0, [r2, #16]
 800c150:	2200      	movs	r2, #0
 800c152:	6879      	ldr	r1, [r7, #4]
 800c154:	4798      	blx	r3
 800c156:	4603      	mov	r3, r0
 800c158:	76bb      	strb	r3, [r7, #26]
 800c15a:	e001      	b.n	800c160 <tcp_process+0x404>
 800c15c:	23f0      	movs	r3, #240	; 0xf0
 800c15e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800c160:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d00a      	beq.n	800c17e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800c168:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c16c:	f113 0f0d 	cmn.w	r3, #13
 800c170:	d002      	beq.n	800c178 <tcp_process+0x41c>
              tcp_abort(pcb);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f7fd ff8e 	bl	800a094 <tcp_abort>
            }
            return ERR_ABRT;
 800c178:	f06f 030c 	mvn.w	r3, #12
 800c17c:	e1ce      	b.n	800c51c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 fae0 	bl	800c744 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800c184:	4b63      	ldr	r3, [pc, #396]	; (800c314 <tcp_process+0x5b8>)
 800c186:	881b      	ldrh	r3, [r3, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d005      	beq.n	800c198 <tcp_process+0x43c>
            recv_acked--;
 800c18c:	4b61      	ldr	r3, [pc, #388]	; (800c314 <tcp_process+0x5b8>)
 800c18e:	881b      	ldrh	r3, [r3, #0]
 800c190:	3b01      	subs	r3, #1
 800c192:	b29a      	uxth	r2, r3
 800c194:	4b5f      	ldr	r3, [pc, #380]	; (800c314 <tcp_process+0x5b8>)
 800c196:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c19c:	009a      	lsls	r2, r3, #2
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c1a2:	005b      	lsls	r3, r3, #1
 800c1a4:	f241 111c 	movw	r1, #4380	; 0x111c
 800c1a8:	428b      	cmp	r3, r1
 800c1aa:	bf38      	it	cc
 800c1ac:	460b      	movcc	r3, r1
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d204      	bcs.n	800c1bc <tcp_process+0x460>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c1b6:	009b      	lsls	r3, r3, #2
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	e00d      	b.n	800c1d8 <tcp_process+0x47c>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c1c0:	005b      	lsls	r3, r3, #1
 800c1c2:	f241 121c 	movw	r2, #4380	; 0x111c
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d904      	bls.n	800c1d4 <tcp_process+0x478>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c1ce:	005b      	lsls	r3, r3, #1
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	e001      	b.n	800c1d8 <tcp_process+0x47c>
 800c1d4:	f241 131c 	movw	r3, #4380	; 0x111c
 800c1d8:	687a      	ldr	r2, [r7, #4]
 800c1da:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c1de:	4b4e      	ldr	r3, [pc, #312]	; (800c318 <tcp_process+0x5bc>)
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	f003 0320 	and.w	r3, r3, #32
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d037      	beq.n	800c25a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	8b5b      	ldrh	r3, [r3, #26]
 800c1ee:	f043 0302 	orr.w	r3, r3, #2
 800c1f2:	b29a      	uxth	r2, r3
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2207      	movs	r2, #7
 800c1fc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c1fe:	e02c      	b.n	800c25a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c200:	4b3b      	ldr	r3, [pc, #236]	; (800c2f0 <tcp_process+0x594>)
 800c202:	6819      	ldr	r1, [r3, #0]
 800c204:	4b3b      	ldr	r3, [pc, #236]	; (800c2f4 <tcp_process+0x598>)
 800c206:	881b      	ldrh	r3, [r3, #0]
 800c208:	461a      	mov	r2, r3
 800c20a:	4b3b      	ldr	r3, [pc, #236]	; (800c2f8 <tcp_process+0x59c>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c210:	4b3a      	ldr	r3, [pc, #232]	; (800c2fc <tcp_process+0x5a0>)
 800c212:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c214:	885b      	ldrh	r3, [r3, #2]
 800c216:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c218:	4a38      	ldr	r2, [pc, #224]	; (800c2fc <tcp_process+0x5a0>)
 800c21a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c21c:	8812      	ldrh	r2, [r2, #0]
 800c21e:	b292      	uxth	r2, r2
 800c220:	9202      	str	r2, [sp, #8]
 800c222:	9301      	str	r3, [sp, #4]
 800c224:	4b36      	ldr	r3, [pc, #216]	; (800c300 <tcp_process+0x5a4>)
 800c226:	9300      	str	r3, [sp, #0]
 800c228:	4b36      	ldr	r3, [pc, #216]	; (800c304 <tcp_process+0x5a8>)
 800c22a:	4602      	mov	r2, r0
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f002 fbd1 	bl	800e9d4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c232:	e167      	b.n	800c504 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c234:	4b2d      	ldr	r3, [pc, #180]	; (800c2ec <tcp_process+0x590>)
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	f003 0302 	and.w	r3, r3, #2
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f000 8161 	beq.w	800c504 <tcp_process+0x7a8>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c246:	1e5a      	subs	r2, r3, #1
 800c248:	4b2b      	ldr	r3, [pc, #172]	; (800c2f8 <tcp_process+0x59c>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	f040 8159 	bne.w	800c504 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f002 f9b6 	bl	800e5c4 <tcp_rexmit>
      break;
 800c258:	e154      	b.n	800c504 <tcp_process+0x7a8>
 800c25a:	e153      	b.n	800c504 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 fa71 	bl	800c744 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c262:	4b2d      	ldr	r3, [pc, #180]	; (800c318 <tcp_process+0x5bc>)
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	f003 0320 	and.w	r3, r3, #32
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	f000 814c 	beq.w	800c508 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	8b5b      	ldrh	r3, [r3, #26]
 800c274:	f043 0302 	orr.w	r3, r3, #2
 800c278:	b29a      	uxth	r2, r3
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2207      	movs	r2, #7
 800c282:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c284:	e140      	b.n	800c508 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f000 fa5c 	bl	800c744 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c28c:	4b22      	ldr	r3, [pc, #136]	; (800c318 <tcp_process+0x5bc>)
 800c28e:	781b      	ldrb	r3, [r3, #0]
 800c290:	f003 0320 	and.w	r3, r3, #32
 800c294:	2b00      	cmp	r3, #0
 800c296:	d071      	beq.n	800c37c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c298:	4b14      	ldr	r3, [pc, #80]	; (800c2ec <tcp_process+0x590>)
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	f003 0310 	and.w	r3, r3, #16
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d060      	beq.n	800c366 <tcp_process+0x60a>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c2a8:	4b11      	ldr	r3, [pc, #68]	; (800c2f0 <tcp_process+0x594>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d15a      	bne.n	800c366 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d156      	bne.n	800c366 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	8b5b      	ldrh	r3, [r3, #26]
 800c2bc:	f043 0302 	orr.w	r3, r3, #2
 800c2c0:	b29a      	uxth	r2, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f7fe fdbc 	bl	800ae44 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c2cc:	4b13      	ldr	r3, [pc, #76]	; (800c31c <tcp_process+0x5c0>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d105      	bne.n	800c2e2 <tcp_process+0x586>
 800c2d6:	4b11      	ldr	r3, [pc, #68]	; (800c31c <tcp_process+0x5c0>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	4a0f      	ldr	r2, [pc, #60]	; (800c31c <tcp_process+0x5c0>)
 800c2de:	6013      	str	r3, [r2, #0]
 800c2e0:	e02e      	b.n	800c340 <tcp_process+0x5e4>
 800c2e2:	4b0e      	ldr	r3, [pc, #56]	; (800c31c <tcp_process+0x5c0>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	617b      	str	r3, [r7, #20]
 800c2e8:	e027      	b.n	800c33a <tcp_process+0x5de>
 800c2ea:	bf00      	nop
 800c2ec:	20018c28 	.word	0x20018c28
 800c2f0:	20018c20 	.word	0x20018c20
 800c2f4:	20018c26 	.word	0x20018c26
 800c2f8:	20018c1c 	.word	0x20018c1c
 800c2fc:	20018c0c 	.word	0x20018c0c
 800c300:	20015480 	.word	0x20015480
 800c304:	20015484 	.word	0x20015484
 800c308:	080164ac 	.word	0x080164ac
 800c30c:	0801674c 	.word	0x0801674c
 800c310:	080164f8 	.word	0x080164f8
 800c314:	20018c24 	.word	0x20018c24
 800c318:	20018c29 	.word	0x20018c29
 800c31c:	20018bf0 	.word	0x20018bf0
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	68db      	ldr	r3, [r3, #12]
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	429a      	cmp	r2, r3
 800c328:	d104      	bne.n	800c334 <tcp_process+0x5d8>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	68da      	ldr	r2, [r3, #12]
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	60da      	str	r2, [r3, #12]
 800c332:	e005      	b.n	800c340 <tcp_process+0x5e4>
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	68db      	ldr	r3, [r3, #12]
 800c338:	617b      	str	r3, [r7, #20]
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d1ef      	bne.n	800c320 <tcp_process+0x5c4>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2200      	movs	r2, #0
 800c344:	60da      	str	r2, [r3, #12]
 800c346:	4b77      	ldr	r3, [pc, #476]	; (800c524 <tcp_process+0x7c8>)
 800c348:	2201      	movs	r2, #1
 800c34a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	220a      	movs	r2, #10
 800c350:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c352:	4b75      	ldr	r3, [pc, #468]	; (800c528 <tcp_process+0x7cc>)
 800c354:	681a      	ldr	r2, [r3, #0]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	60da      	str	r2, [r3, #12]
 800c35a:	4a73      	ldr	r2, [pc, #460]	; (800c528 <tcp_process+0x7cc>)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6013      	str	r3, [r2, #0]
 800c360:	f002 fcfa 	bl	800ed58 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800c364:	e0d2      	b.n	800c50c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	8b5b      	ldrh	r3, [r3, #26]
 800c36a:	f043 0302 	orr.w	r3, r3, #2
 800c36e:	b29a      	uxth	r2, r3
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2208      	movs	r2, #8
 800c378:	751a      	strb	r2, [r3, #20]
      break;
 800c37a:	e0c7      	b.n	800c50c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c37c:	4b6b      	ldr	r3, [pc, #428]	; (800c52c <tcp_process+0x7d0>)
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	f003 0310 	and.w	r3, r3, #16
 800c384:	2b00      	cmp	r3, #0
 800c386:	f000 80c1 	beq.w	800c50c <tcp_process+0x7b0>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c38e:	4b68      	ldr	r3, [pc, #416]	; (800c530 <tcp_process+0x7d4>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	429a      	cmp	r2, r3
 800c394:	f040 80ba 	bne.w	800c50c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	f040 80b5 	bne.w	800c50c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2206      	movs	r2, #6
 800c3a6:	751a      	strb	r2, [r3, #20]
      break;
 800c3a8:	e0b0      	b.n	800c50c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f000 f9ca 	bl	800c744 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c3b0:	4b60      	ldr	r3, [pc, #384]	; (800c534 <tcp_process+0x7d8>)
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	f003 0320 	and.w	r3, r3, #32
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	f000 80a9 	beq.w	800c510 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	8b5b      	ldrh	r3, [r3, #26]
 800c3c2:	f043 0302 	orr.w	r3, r3, #2
 800c3c6:	b29a      	uxth	r2, r3
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f7fe fd39 	bl	800ae44 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c3d2:	4b59      	ldr	r3, [pc, #356]	; (800c538 <tcp_process+0x7dc>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	687a      	ldr	r2, [r7, #4]
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d105      	bne.n	800c3e8 <tcp_process+0x68c>
 800c3dc:	4b56      	ldr	r3, [pc, #344]	; (800c538 <tcp_process+0x7dc>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	68db      	ldr	r3, [r3, #12]
 800c3e2:	4a55      	ldr	r2, [pc, #340]	; (800c538 <tcp_process+0x7dc>)
 800c3e4:	6013      	str	r3, [r2, #0]
 800c3e6:	e013      	b.n	800c410 <tcp_process+0x6b4>
 800c3e8:	4b53      	ldr	r3, [pc, #332]	; (800c538 <tcp_process+0x7dc>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	613b      	str	r3, [r7, #16]
 800c3ee:	e00c      	b.n	800c40a <tcp_process+0x6ae>
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	68db      	ldr	r3, [r3, #12]
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d104      	bne.n	800c404 <tcp_process+0x6a8>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	68da      	ldr	r2, [r3, #12]
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	60da      	str	r2, [r3, #12]
 800c402:	e005      	b.n	800c410 <tcp_process+0x6b4>
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	613b      	str	r3, [r7, #16]
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d1ef      	bne.n	800c3f0 <tcp_process+0x694>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2200      	movs	r2, #0
 800c414:	60da      	str	r2, [r3, #12]
 800c416:	4b43      	ldr	r3, [pc, #268]	; (800c524 <tcp_process+0x7c8>)
 800c418:	2201      	movs	r2, #1
 800c41a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	220a      	movs	r2, #10
 800c420:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c422:	4b41      	ldr	r3, [pc, #260]	; (800c528 <tcp_process+0x7cc>)
 800c424:	681a      	ldr	r2, [r3, #0]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	60da      	str	r2, [r3, #12]
 800c42a:	4a3f      	ldr	r2, [pc, #252]	; (800c528 <tcp_process+0x7cc>)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6013      	str	r3, [r2, #0]
 800c430:	f002 fc92 	bl	800ed58 <tcp_timer_needed>
      }
      break;
 800c434:	e06c      	b.n	800c510 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 f984 	bl	800c744 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c43c:	4b3b      	ldr	r3, [pc, #236]	; (800c52c <tcp_process+0x7d0>)
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	f003 0310 	and.w	r3, r3, #16
 800c444:	2b00      	cmp	r3, #0
 800c446:	d065      	beq.n	800c514 <tcp_process+0x7b8>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c44c:	4b38      	ldr	r3, [pc, #224]	; (800c530 <tcp_process+0x7d4>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	429a      	cmp	r2, r3
 800c452:	d15f      	bne.n	800c514 <tcp_process+0x7b8>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d15b      	bne.n	800c514 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f7fe fcf1 	bl	800ae44 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c462:	4b35      	ldr	r3, [pc, #212]	; (800c538 <tcp_process+0x7dc>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d105      	bne.n	800c478 <tcp_process+0x71c>
 800c46c:	4b32      	ldr	r3, [pc, #200]	; (800c538 <tcp_process+0x7dc>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	68db      	ldr	r3, [r3, #12]
 800c472:	4a31      	ldr	r2, [pc, #196]	; (800c538 <tcp_process+0x7dc>)
 800c474:	6013      	str	r3, [r2, #0]
 800c476:	e013      	b.n	800c4a0 <tcp_process+0x744>
 800c478:	4b2f      	ldr	r3, [pc, #188]	; (800c538 <tcp_process+0x7dc>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	60fb      	str	r3, [r7, #12]
 800c47e:	e00c      	b.n	800c49a <tcp_process+0x73e>
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	68db      	ldr	r3, [r3, #12]
 800c484:	687a      	ldr	r2, [r7, #4]
 800c486:	429a      	cmp	r2, r3
 800c488:	d104      	bne.n	800c494 <tcp_process+0x738>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	68da      	ldr	r2, [r3, #12]
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	60da      	str	r2, [r3, #12]
 800c492:	e005      	b.n	800c4a0 <tcp_process+0x744>
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	68db      	ldr	r3, [r3, #12]
 800c498:	60fb      	str	r3, [r7, #12]
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d1ef      	bne.n	800c480 <tcp_process+0x724>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	60da      	str	r2, [r3, #12]
 800c4a6:	4b1f      	ldr	r3, [pc, #124]	; (800c524 <tcp_process+0x7c8>)
 800c4a8:	2201      	movs	r2, #1
 800c4aa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	220a      	movs	r2, #10
 800c4b0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c4b2:	4b1d      	ldr	r3, [pc, #116]	; (800c528 <tcp_process+0x7cc>)
 800c4b4:	681a      	ldr	r2, [r3, #0]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	60da      	str	r2, [r3, #12]
 800c4ba:	4a1b      	ldr	r2, [pc, #108]	; (800c528 <tcp_process+0x7cc>)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6013      	str	r3, [r2, #0]
 800c4c0:	f002 fc4a 	bl	800ed58 <tcp_timer_needed>
      }
      break;
 800c4c4:	e026      	b.n	800c514 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f000 f93c 	bl	800c744 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c4cc:	4b17      	ldr	r3, [pc, #92]	; (800c52c <tcp_process+0x7d0>)
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	f003 0310 	and.w	r3, r3, #16
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d01f      	beq.n	800c518 <tcp_process+0x7bc>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c4dc:	4b14      	ldr	r3, [pc, #80]	; (800c530 <tcp_process+0x7d4>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d119      	bne.n	800c518 <tcp_process+0x7bc>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d115      	bne.n	800c518 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800c4ec:	4b11      	ldr	r3, [pc, #68]	; (800c534 <tcp_process+0x7d8>)
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	f043 0310 	orr.w	r3, r3, #16
 800c4f4:	b2da      	uxtb	r2, r3
 800c4f6:	4b0f      	ldr	r3, [pc, #60]	; (800c534 <tcp_process+0x7d8>)
 800c4f8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c4fa:	e00d      	b.n	800c518 <tcp_process+0x7bc>
    default:
      break;
 800c4fc:	bf00      	nop
 800c4fe:	e00c      	b.n	800c51a <tcp_process+0x7be>
      break;
 800c500:	bf00      	nop
 800c502:	e00a      	b.n	800c51a <tcp_process+0x7be>
      break;
 800c504:	bf00      	nop
 800c506:	e008      	b.n	800c51a <tcp_process+0x7be>
      break;
 800c508:	bf00      	nop
 800c50a:	e006      	b.n	800c51a <tcp_process+0x7be>
      break;
 800c50c:	bf00      	nop
 800c50e:	e004      	b.n	800c51a <tcp_process+0x7be>
      break;
 800c510:	bf00      	nop
 800c512:	e002      	b.n	800c51a <tcp_process+0x7be>
      break;
 800c514:	bf00      	nop
 800c516:	e000      	b.n	800c51a <tcp_process+0x7be>
      break;
 800c518:	bf00      	nop
  }
  return ERR_OK;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3724      	adds	r7, #36	; 0x24
 800c520:	46bd      	mov	sp, r7
 800c522:	bd90      	pop	{r4, r7, pc}
 800c524:	20018bf8 	.word	0x20018bf8
 800c528:	20018bf4 	.word	0x20018bf4
 800c52c:	20018c28 	.word	0x20018c28
 800c530:	20018c20 	.word	0x20018c20
 800c534:	20018c29 	.word	0x20018c29
 800c538:	20018bf0 	.word	0x20018bf0

0800c53c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c53c:	b590      	push	{r4, r7, lr}
 800c53e:	b085      	sub	sp, #20
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d106      	bne.n	800c55a <tcp_oos_insert_segment+0x1e>
 800c54c:	4b3b      	ldr	r3, [pc, #236]	; (800c63c <tcp_oos_insert_segment+0x100>)
 800c54e:	f240 421f 	movw	r2, #1055	; 0x41f
 800c552:	493b      	ldr	r1, [pc, #236]	; (800c640 <tcp_oos_insert_segment+0x104>)
 800c554:	483b      	ldr	r0, [pc, #236]	; (800c644 <tcp_oos_insert_segment+0x108>)
 800c556:	f007 fe9d 	bl	8014294 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	68db      	ldr	r3, [r3, #12]
 800c55e:	899b      	ldrh	r3, [r3, #12]
 800c560:	b29b      	uxth	r3, r3
 800c562:	4618      	mov	r0, r3
 800c564:	f7fb fbf4 	bl	8007d50 <lwip_htons>
 800c568:	4603      	mov	r3, r0
 800c56a:	b2db      	uxtb	r3, r3
 800c56c:	f003 0301 	and.w	r3, r3, #1
 800c570:	2b00      	cmp	r3, #0
 800c572:	d028      	beq.n	800c5c6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c574:	6838      	ldr	r0, [r7, #0]
 800c576:	f7fe fa63 	bl	800aa40 <tcp_segs_free>
    next = NULL;
 800c57a:	2300      	movs	r3, #0
 800c57c:	603b      	str	r3, [r7, #0]
 800c57e:	e056      	b.n	800c62e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	68db      	ldr	r3, [r3, #12]
 800c584:	899b      	ldrh	r3, [r3, #12]
 800c586:	b29b      	uxth	r3, r3
 800c588:	4618      	mov	r0, r3
 800c58a:	f7fb fbe1 	bl	8007d50 <lwip_htons>
 800c58e:	4603      	mov	r3, r0
 800c590:	b2db      	uxtb	r3, r3
 800c592:	f003 0301 	and.w	r3, r3, #1
 800c596:	2b00      	cmp	r3, #0
 800c598:	d00d      	beq.n	800c5b6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	68db      	ldr	r3, [r3, #12]
 800c59e:	899b      	ldrh	r3, [r3, #12]
 800c5a0:	b29c      	uxth	r4, r3
 800c5a2:	2001      	movs	r0, #1
 800c5a4:	f7fb fbd4 	bl	8007d50 <lwip_htons>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	4322      	orrs	r2, r4
 800c5b2:	b292      	uxth	r2, r2
 800c5b4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c5c0:	68f8      	ldr	r0, [r7, #12]
 800c5c2:	f7fe fa52 	bl	800aa6a <tcp_seg_free>
    while (next &&
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d00e      	beq.n	800c5ea <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	891b      	ldrh	r3, [r3, #8]
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	4b1d      	ldr	r3, [pc, #116]	; (800c648 <tcp_oos_insert_segment+0x10c>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	441a      	add	r2, r3
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	68db      	ldr	r3, [r3, #12]
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	6839      	ldr	r1, [r7, #0]
 800c5e0:	8909      	ldrh	r1, [r1, #8]
 800c5e2:	440b      	add	r3, r1
 800c5e4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	daca      	bge.n	800c580 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d01e      	beq.n	800c62e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	891b      	ldrh	r3, [r3, #8]
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	4b14      	ldr	r3, [pc, #80]	; (800c648 <tcp_oos_insert_segment+0x10c>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	441a      	add	r2, r3
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	68db      	ldr	r3, [r3, #12]
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c604:	2b00      	cmp	r3, #0
 800c606:	dd12      	ble.n	800c62e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	68db      	ldr	r3, [r3, #12]
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	b29a      	uxth	r2, r3
 800c610:	4b0d      	ldr	r3, [pc, #52]	; (800c648 <tcp_oos_insert_segment+0x10c>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	b29b      	uxth	r3, r3
 800c616:	1ad3      	subs	r3, r2, r3
 800c618:	b29a      	uxth	r2, r3
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	685a      	ldr	r2, [r3, #4]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	891b      	ldrh	r3, [r3, #8]
 800c626:	4619      	mov	r1, r3
 800c628:	4610      	mov	r0, r2
 800c62a:	f7fc fe09 	bl	8009240 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	683a      	ldr	r2, [r7, #0]
 800c632:	601a      	str	r2, [r3, #0]
}
 800c634:	bf00      	nop
 800c636:	3714      	adds	r7, #20
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd90      	pop	{r4, r7, pc}
 800c63c:	080164ac 	.word	0x080164ac
 800c640:	0801676c 	.word	0x0801676c
 800c644:	080164f8 	.word	0x080164f8
 800c648:	20018c1c 	.word	0x20018c1c

0800c64c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800c64c:	b5b0      	push	{r4, r5, r7, lr}
 800c64e:	b086      	sub	sp, #24
 800c650:	af00      	add	r7, sp, #0
 800c652:	60f8      	str	r0, [r7, #12]
 800c654:	60b9      	str	r1, [r7, #8]
 800c656:	607a      	str	r2, [r7, #4]
 800c658:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800c65a:	e03e      	b.n	800c6da <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7fc fffc 	bl	8009668 <pbuf_clen>
 800c670:	4603      	mov	r3, r0
 800c672:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c67a:	8a7a      	ldrh	r2, [r7, #18]
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d906      	bls.n	800c68e <tcp_free_acked_segments+0x42>
 800c680:	4b2a      	ldr	r3, [pc, #168]	; (800c72c <tcp_free_acked_segments+0xe0>)
 800c682:	f240 4257 	movw	r2, #1111	; 0x457
 800c686:	492a      	ldr	r1, [pc, #168]	; (800c730 <tcp_free_acked_segments+0xe4>)
 800c688:	482a      	ldr	r0, [pc, #168]	; (800c734 <tcp_free_acked_segments+0xe8>)
 800c68a:	f007 fe03 	bl	8014294 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800c694:	8a7b      	ldrh	r3, [r7, #18]
 800c696:	1ad3      	subs	r3, r2, r3
 800c698:	b29a      	uxth	r2, r3
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	891a      	ldrh	r2, [r3, #8]
 800c6a4:	4b24      	ldr	r3, [pc, #144]	; (800c738 <tcp_free_acked_segments+0xec>)
 800c6a6:	881b      	ldrh	r3, [r3, #0]
 800c6a8:	4413      	add	r3, r2
 800c6aa:	b29a      	uxth	r2, r3
 800c6ac:	4b22      	ldr	r3, [pc, #136]	; (800c738 <tcp_free_acked_segments+0xec>)
 800c6ae:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800c6b0:	6978      	ldr	r0, [r7, #20]
 800c6b2:	f7fe f9da 	bl	800aa6a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d00c      	beq.n	800c6da <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d109      	bne.n	800c6da <tcp_free_acked_segments+0x8e>
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d106      	bne.n	800c6da <tcp_free_acked_segments+0x8e>
 800c6cc:	4b17      	ldr	r3, [pc, #92]	; (800c72c <tcp_free_acked_segments+0xe0>)
 800c6ce:	f240 4261 	movw	r2, #1121	; 0x461
 800c6d2:	491a      	ldr	r1, [pc, #104]	; (800c73c <tcp_free_acked_segments+0xf0>)
 800c6d4:	4817      	ldr	r0, [pc, #92]	; (800c734 <tcp_free_acked_segments+0xe8>)
 800c6d6:	f007 fddd 	bl	8014294 <iprintf>
  while (seg_list != NULL &&
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d020      	beq.n	800c722 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7fb fb47 	bl	8007d7a <lwip_htonl>
 800c6ec:	4604      	mov	r4, r0
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	891b      	ldrh	r3, [r3, #8]
 800c6f2:	461d      	mov	r5, r3
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	68db      	ldr	r3, [r3, #12]
 800c6f8:	899b      	ldrh	r3, [r3, #12]
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f7fb fb27 	bl	8007d50 <lwip_htons>
 800c702:	4603      	mov	r3, r0
 800c704:	b2db      	uxtb	r3, r3
 800c706:	f003 0303 	and.w	r3, r3, #3
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d001      	beq.n	800c712 <tcp_free_acked_segments+0xc6>
 800c70e:	2301      	movs	r3, #1
 800c710:	e000      	b.n	800c714 <tcp_free_acked_segments+0xc8>
 800c712:	2300      	movs	r3, #0
 800c714:	442b      	add	r3, r5
 800c716:	18e2      	adds	r2, r4, r3
 800c718:	4b09      	ldr	r3, [pc, #36]	; (800c740 <tcp_free_acked_segments+0xf4>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800c71e:	2b00      	cmp	r3, #0
 800c720:	dd9c      	ble.n	800c65c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800c722:	68bb      	ldr	r3, [r7, #8]
}
 800c724:	4618      	mov	r0, r3
 800c726:	3718      	adds	r7, #24
 800c728:	46bd      	mov	sp, r7
 800c72a:	bdb0      	pop	{r4, r5, r7, pc}
 800c72c:	080164ac 	.word	0x080164ac
 800c730:	08016794 	.word	0x08016794
 800c734:	080164f8 	.word	0x080164f8
 800c738:	20018c24 	.word	0x20018c24
 800c73c:	080167bc 	.word	0x080167bc
 800c740:	20018c20 	.word	0x20018c20

0800c744 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c744:	b5b0      	push	{r4, r5, r7, lr}
 800c746:	b094      	sub	sp, #80	; 0x50
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800c74c:	2300      	movs	r3, #0
 800c74e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d106      	bne.n	800c764 <tcp_receive+0x20>
 800c756:	4b91      	ldr	r3, [pc, #580]	; (800c99c <tcp_receive+0x258>)
 800c758:	f240 427b 	movw	r2, #1147	; 0x47b
 800c75c:	4990      	ldr	r1, [pc, #576]	; (800c9a0 <tcp_receive+0x25c>)
 800c75e:	4891      	ldr	r0, [pc, #580]	; (800c9a4 <tcp_receive+0x260>)
 800c760:	f007 fd98 	bl	8014294 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	7d1b      	ldrb	r3, [r3, #20]
 800c768:	2b03      	cmp	r3, #3
 800c76a:	d806      	bhi.n	800c77a <tcp_receive+0x36>
 800c76c:	4b8b      	ldr	r3, [pc, #556]	; (800c99c <tcp_receive+0x258>)
 800c76e:	f240 427c 	movw	r2, #1148	; 0x47c
 800c772:	498d      	ldr	r1, [pc, #564]	; (800c9a8 <tcp_receive+0x264>)
 800c774:	488b      	ldr	r0, [pc, #556]	; (800c9a4 <tcp_receive+0x260>)
 800c776:	f007 fd8d 	bl	8014294 <iprintf>

  if (flags & TCP_ACK) {
 800c77a:	4b8c      	ldr	r3, [pc, #560]	; (800c9ac <tcp_receive+0x268>)
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	f003 0310 	and.w	r3, r3, #16
 800c782:	2b00      	cmp	r3, #0
 800c784:	f000 8264 	beq.w	800cc50 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c78e:	461a      	mov	r2, r3
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c794:	4413      	add	r3, r2
 800c796:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c79c:	4b84      	ldr	r3, [pc, #528]	; (800c9b0 <tcp_receive+0x26c>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	1ad3      	subs	r3, r2, r3
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	db1b      	blt.n	800c7de <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c7aa:	4b81      	ldr	r3, [pc, #516]	; (800c9b0 <tcp_receive+0x26c>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d106      	bne.n	800c7c0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c7b6:	4b7f      	ldr	r3, [pc, #508]	; (800c9b4 <tcp_receive+0x270>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	1ad3      	subs	r3, r2, r3
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	db0e      	blt.n	800c7de <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c7c4:	4b7b      	ldr	r3, [pc, #492]	; (800c9b4 <tcp_receive+0x270>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d125      	bne.n	800c818 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c7cc:	4b7a      	ldr	r3, [pc, #488]	; (800c9b8 <tcp_receive+0x274>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	89db      	ldrh	r3, [r3, #14]
 800c7d2:	b29a      	uxth	r2, r3
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d91c      	bls.n	800c818 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c7de:	4b76      	ldr	r3, [pc, #472]	; (800c9b8 <tcp_receive+0x274>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	89db      	ldrh	r3, [r3, #14]
 800c7e4:	b29a      	uxth	r2, r3
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d205      	bcs.n	800c808 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800c808:	4b69      	ldr	r3, [pc, #420]	; (800c9b0 <tcp_receive+0x26c>)
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800c810:	4b68      	ldr	r3, [pc, #416]	; (800c9b4 <tcp_receive+0x270>)
 800c812:	681a      	ldr	r2, [r3, #0]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c818:	4b66      	ldr	r3, [pc, #408]	; (800c9b4 <tcp_receive+0x270>)
 800c81a:	681a      	ldr	r2, [r3, #0]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c820:	1ad3      	subs	r3, r2, r3
 800c822:	2b00      	cmp	r3, #0
 800c824:	dc58      	bgt.n	800c8d8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800c826:	4b65      	ldr	r3, [pc, #404]	; (800c9bc <tcp_receive+0x278>)
 800c828:	881b      	ldrh	r3, [r3, #0]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d14b      	bne.n	800c8c6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800c838:	4413      	add	r3, r2
 800c83a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d142      	bne.n	800c8c6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c846:	2b00      	cmp	r3, #0
 800c848:	db3d      	blt.n	800c8c6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c84e:	4b59      	ldr	r3, [pc, #356]	; (800c9b4 <tcp_receive+0x270>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	429a      	cmp	r2, r3
 800c854:	d137      	bne.n	800c8c6 <tcp_receive+0x182>
              found_dupack = 1;
 800c856:	2301      	movs	r3, #1
 800c858:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c860:	2bff      	cmp	r3, #255	; 0xff
 800c862:	d007      	beq.n	800c874 <tcp_receive+0x130>
                ++pcb->dupacks;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c86a:	3301      	adds	r3, #1
 800c86c:	b2da      	uxtb	r2, r3
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c87a:	2b03      	cmp	r3, #3
 800c87c:	d91b      	bls.n	800c8b6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c888:	4413      	add	r3, r2
 800c88a:	b29a      	uxth	r2, r3
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c892:	429a      	cmp	r2, r3
 800c894:	d30a      	bcc.n	800c8ac <tcp_receive+0x168>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8a0:	4413      	add	r3, r2
 800c8a2:	b29a      	uxth	r2, r3
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c8aa:	e004      	b.n	800c8b6 <tcp_receive+0x172>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c8b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c8bc:	2b02      	cmp	r3, #2
 800c8be:	d902      	bls.n	800c8c6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f001 feeb 	bl	800e69c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c8c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	f040 8161 	bne.w	800cb90 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c8d6:	e15b      	b.n	800cb90 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c8d8:	4b36      	ldr	r3, [pc, #216]	; (800c9b4 <tcp_receive+0x270>)
 800c8da:	681a      	ldr	r2, [r3, #0]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8e0:	1ad3      	subs	r3, r2, r3
 800c8e2:	3b01      	subs	r3, #1
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	f2c0 814e 	blt.w	800cb86 <tcp_receive+0x442>
 800c8ea:	4b32      	ldr	r3, [pc, #200]	; (800c9b4 <tcp_receive+0x270>)
 800c8ec:	681a      	ldr	r2, [r3, #0]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8f2:	1ad3      	subs	r3, r2, r3
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	f300 8146 	bgt.w	800cb86 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	8b5b      	ldrh	r3, [r3, #26]
 800c8fe:	f003 0304 	and.w	r3, r3, #4
 800c902:	2b00      	cmp	r3, #0
 800c904:	d010      	beq.n	800c928 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	8b5b      	ldrh	r3, [r3, #26]
 800c90a:	f023 0304 	bic.w	r3, r3, #4
 800c90e:	b29a      	uxth	r2, r3
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2200      	movs	r2, #0
 800c924:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2200      	movs	r2, #0
 800c92c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c936:	10db      	asrs	r3, r3, #3
 800c938:	b21b      	sxth	r3, r3
 800c93a:	b29a      	uxth	r2, r3
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c942:	b29b      	uxth	r3, r3
 800c944:	4413      	add	r3, r2
 800c946:	b29b      	uxth	r3, r3
 800c948:	b21a      	sxth	r2, r3
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c950:	4b18      	ldr	r3, [pc, #96]	; (800c9b4 <tcp_receive+0x270>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	b29a      	uxth	r2, r3
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c95a:	b29b      	uxth	r3, r3
 800c95c:	1ad3      	subs	r3, r2, r3
 800c95e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2200      	movs	r2, #0
 800c964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800c968:	4b12      	ldr	r3, [pc, #72]	; (800c9b4 <tcp_receive+0x270>)
 800c96a:	681a      	ldr	r2, [r3, #0]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	7d1b      	ldrb	r3, [r3, #20]
 800c974:	2b03      	cmp	r3, #3
 800c976:	f240 8097 	bls.w	800caa8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c986:	429a      	cmp	r2, r3
 800c988:	d245      	bcs.n	800ca16 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	8b5b      	ldrh	r3, [r3, #26]
 800c98e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c992:	2b00      	cmp	r3, #0
 800c994:	d014      	beq.n	800c9c0 <tcp_receive+0x27c>
 800c996:	2301      	movs	r3, #1
 800c998:	e013      	b.n	800c9c2 <tcp_receive+0x27e>
 800c99a:	bf00      	nop
 800c99c:	080164ac 	.word	0x080164ac
 800c9a0:	080167dc 	.word	0x080167dc
 800c9a4:	080164f8 	.word	0x080164f8
 800c9a8:	080167f8 	.word	0x080167f8
 800c9ac:	20018c28 	.word	0x20018c28
 800c9b0:	20018c1c 	.word	0x20018c1c
 800c9b4:	20018c20 	.word	0x20018c20
 800c9b8:	20018c0c 	.word	0x20018c0c
 800c9bc:	20018c26 	.word	0x20018c26
 800c9c0:	2302      	movs	r3, #2
 800c9c2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c9c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c9ca:	b29a      	uxth	r2, r3
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c9d0:	fb12 f303 	smulbb	r3, r2, r3
 800c9d4:	b29b      	uxth	r3, r3
 800c9d6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	bf28      	it	cs
 800c9dc:	4613      	movcs	r3, r2
 800c9de:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c9e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c9e8:	4413      	add	r3, r2
 800c9ea:	b29a      	uxth	r2, r3
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d309      	bcc.n	800ca0a <tcp_receive+0x2c6>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c9fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c9fe:	4413      	add	r3, r2
 800ca00:	b29a      	uxth	r2, r3
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ca08:	e04e      	b.n	800caa8 <tcp_receive+0x364>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca10:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ca14:	e048      	b.n	800caa8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ca1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ca1e:	4413      	add	r3, r2
 800ca20:	b29a      	uxth	r2, r3
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	d309      	bcc.n	800ca40 <tcp_receive+0x2fc>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ca32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ca34:	4413      	add	r3, r2
 800ca36:	b29a      	uxth	r2, r3
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ca3e:	e004      	b.n	800ca4a <tcp_receive+0x306>
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d326      	bcc.n	800caa8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ca66:	1ad3      	subs	r3, r2, r3
 800ca68:	b29a      	uxth	r2, r3
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca7a:	4413      	add	r3, r2
 800ca7c:	b29a      	uxth	r2, r3
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d30a      	bcc.n	800ca9e <tcp_receive+0x35a>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca92:	4413      	add	r3, r2
 800ca94:	b29a      	uxth	r2, r3
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ca9c:	e004      	b.n	800caa8 <tcp_receive+0x364>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800caa4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cab0:	4a98      	ldr	r2, [pc, #608]	; (800cd14 <tcp_receive+0x5d0>)
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f7ff fdca 	bl	800c64c <tcp_free_acked_segments>
 800cab8:	4602      	mov	r2, r0
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cac6:	4a94      	ldr	r2, [pc, #592]	; (800cd18 <tcp_receive+0x5d4>)
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f7ff fdbf 	bl	800c64c <tcp_free_acked_segments>
 800cace:	4602      	mov	r2, r0
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d104      	bne.n	800cae6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cae2:	861a      	strh	r2, [r3, #48]	; 0x30
 800cae4:	e002      	b.n	800caec <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2200      	movs	r2, #0
 800caea:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2200      	movs	r2, #0
 800caf0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d103      	bne.n	800cb02 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2200      	movs	r2, #0
 800cafe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800cb08:	4b84      	ldr	r3, [pc, #528]	; (800cd1c <tcp_receive+0x5d8>)
 800cb0a:	881b      	ldrh	r3, [r3, #0]
 800cb0c:	4413      	add	r3, r2
 800cb0e:	b29a      	uxth	r2, r3
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	8b5b      	ldrh	r3, [r3, #26]
 800cb1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d035      	beq.n	800cb8e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d118      	bne.n	800cb5c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d00c      	beq.n	800cb4c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb3a:	68db      	ldr	r3, [r3, #12]
 800cb3c:	685b      	ldr	r3, [r3, #4]
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f7fb f91b 	bl	8007d7a <lwip_htonl>
 800cb44:	4603      	mov	r3, r0
 800cb46:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	dc20      	bgt.n	800cb8e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	8b5b      	ldrh	r3, [r3, #26]
 800cb50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cb54:	b29a      	uxth	r2, r3
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cb5a:	e018      	b.n	800cb8e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb64:	68db      	ldr	r3, [r3, #12]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f7fb f906 	bl	8007d7a <lwip_htonl>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	1ae3      	subs	r3, r4, r3
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	dc0b      	bgt.n	800cb8e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	8b5b      	ldrh	r3, [r3, #26]
 800cb7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cb7e:	b29a      	uxth	r2, r3
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cb84:	e003      	b.n	800cb8e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f001 ff76 	bl	800ea78 <tcp_send_empty_ack>
 800cb8c:	e000      	b.n	800cb90 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cb8e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d05b      	beq.n	800cc50 <tcp_receive+0x50c>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb9c:	4b60      	ldr	r3, [pc, #384]	; (800cd20 <tcp_receive+0x5dc>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	1ad3      	subs	r3, r2, r3
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	da54      	bge.n	800cc50 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800cba6:	4b5f      	ldr	r3, [pc, #380]	; (800cd24 <tcp_receive+0x5e0>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	b29a      	uxth	r2, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	1ad3      	subs	r3, r2, r3
 800cbb4:	b29b      	uxth	r3, r3
 800cbb6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800cbba:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cbc4:	10db      	asrs	r3, r3, #3
 800cbc6:	b21b      	sxth	r3, r3
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	1ad3      	subs	r3, r2, r3
 800cbcc:	b29b      	uxth	r3, r3
 800cbce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cbd8:	b29a      	uxth	r2, r3
 800cbda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cbde:	4413      	add	r3, r2
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	b21a      	sxth	r2, r3
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800cbe8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	da05      	bge.n	800cbfc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800cbf0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cbf4:	425b      	negs	r3, r3
 800cbf6:	b29b      	uxth	r3, r3
 800cbf8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800cbfc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cc06:	109b      	asrs	r3, r3, #2
 800cc08:	b21b      	sxth	r3, r3
 800cc0a:	b29b      	uxth	r3, r3
 800cc0c:	1ad3      	subs	r3, r2, r3
 800cc0e:	b29b      	uxth	r3, r3
 800cc10:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cc1a:	b29a      	uxth	r2, r3
 800cc1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cc20:	4413      	add	r3, r2
 800cc22:	b29b      	uxth	r3, r3
 800cc24:	b21a      	sxth	r2, r3
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cc30:	10db      	asrs	r3, r3, #3
 800cc32:	b21b      	sxth	r3, r3
 800cc34:	b29a      	uxth	r2, r3
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cc3c:	b29b      	uxth	r3, r3
 800cc3e:	4413      	add	r3, r2
 800cc40:	b29b      	uxth	r3, r3
 800cc42:	b21a      	sxth	r2, r3
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800cc50:	4b35      	ldr	r3, [pc, #212]	; (800cd28 <tcp_receive+0x5e4>)
 800cc52:	881b      	ldrh	r3, [r3, #0]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	f000 84e2 	beq.w	800d61e <tcp_receive+0xeda>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	7d1b      	ldrb	r3, [r3, #20]
 800cc5e:	2b06      	cmp	r3, #6
 800cc60:	f200 84dd 	bhi.w	800d61e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc68:	4b30      	ldr	r3, [pc, #192]	; (800cd2c <tcp_receive+0x5e8>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	1ad3      	subs	r3, r2, r3
 800cc6e:	3b01      	subs	r3, #1
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	f2c0 808f 	blt.w	800cd94 <tcp_receive+0x650>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc7a:	4b2b      	ldr	r3, [pc, #172]	; (800cd28 <tcp_receive+0x5e4>)
 800cc7c:	881b      	ldrh	r3, [r3, #0]
 800cc7e:	4619      	mov	r1, r3
 800cc80:	4b2a      	ldr	r3, [pc, #168]	; (800cd2c <tcp_receive+0x5e8>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	440b      	add	r3, r1
 800cc86:	1ad3      	subs	r3, r2, r3
 800cc88:	3301      	adds	r3, #1
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	f300 8082 	bgt.w	800cd94 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800cc90:	4b27      	ldr	r3, [pc, #156]	; (800cd30 <tcp_receive+0x5ec>)
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc9a:	4b24      	ldr	r3, [pc, #144]	; (800cd2c <tcp_receive+0x5e8>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	1ad3      	subs	r3, r2, r3
 800cca0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800cca2:	4b23      	ldr	r3, [pc, #140]	; (800cd30 <tcp_receive+0x5ec>)
 800cca4:	685b      	ldr	r3, [r3, #4]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d106      	bne.n	800ccb8 <tcp_receive+0x574>
 800ccaa:	4b22      	ldr	r3, [pc, #136]	; (800cd34 <tcp_receive+0x5f0>)
 800ccac:	f240 5294 	movw	r2, #1428	; 0x594
 800ccb0:	4921      	ldr	r1, [pc, #132]	; (800cd38 <tcp_receive+0x5f4>)
 800ccb2:	4822      	ldr	r0, [pc, #136]	; (800cd3c <tcp_receive+0x5f8>)
 800ccb4:	f007 faee 	bl	8014294 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800ccb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d906      	bls.n	800ccd0 <tcp_receive+0x58c>
 800ccc2:	4b1c      	ldr	r3, [pc, #112]	; (800cd34 <tcp_receive+0x5f0>)
 800ccc4:	f240 5295 	movw	r2, #1429	; 0x595
 800ccc8:	491d      	ldr	r1, [pc, #116]	; (800cd40 <tcp_receive+0x5fc>)
 800ccca:	481c      	ldr	r0, [pc, #112]	; (800cd3c <tcp_receive+0x5f8>)
 800cccc:	f007 fae2 	bl	8014294 <iprintf>
      off = (u16_t)off32;
 800ccd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ccd6:	4b16      	ldr	r3, [pc, #88]	; (800cd30 <tcp_receive+0x5ec>)
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	891b      	ldrh	r3, [r3, #8]
 800ccdc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d906      	bls.n	800ccf2 <tcp_receive+0x5ae>
 800cce4:	4b13      	ldr	r3, [pc, #76]	; (800cd34 <tcp_receive+0x5f0>)
 800cce6:	f240 5297 	movw	r2, #1431	; 0x597
 800ccea:	4916      	ldr	r1, [pc, #88]	; (800cd44 <tcp_receive+0x600>)
 800ccec:	4813      	ldr	r0, [pc, #76]	; (800cd3c <tcp_receive+0x5f8>)
 800ccee:	f007 fad1 	bl	8014294 <iprintf>
      inseg.len -= off;
 800ccf2:	4b0f      	ldr	r3, [pc, #60]	; (800cd30 <tcp_receive+0x5ec>)
 800ccf4:	891a      	ldrh	r2, [r3, #8]
 800ccf6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ccfa:	1ad3      	subs	r3, r2, r3
 800ccfc:	b29a      	uxth	r2, r3
 800ccfe:	4b0c      	ldr	r3, [pc, #48]	; (800cd30 <tcp_receive+0x5ec>)
 800cd00:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800cd02:	4b0b      	ldr	r3, [pc, #44]	; (800cd30 <tcp_receive+0x5ec>)
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	891a      	ldrh	r2, [r3, #8]
 800cd08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cd0c:	1ad3      	subs	r3, r2, r3
 800cd0e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800cd10:	e02a      	b.n	800cd68 <tcp_receive+0x624>
 800cd12:	bf00      	nop
 800cd14:	08016814 	.word	0x08016814
 800cd18:	0801681c 	.word	0x0801681c
 800cd1c:	20018c24 	.word	0x20018c24
 800cd20:	20018c20 	.word	0x20018c20
 800cd24:	20018be4 	.word	0x20018be4
 800cd28:	20018c26 	.word	0x20018c26
 800cd2c:	20018c1c 	.word	0x20018c1c
 800cd30:	20018bfc 	.word	0x20018bfc
 800cd34:	080164ac 	.word	0x080164ac
 800cd38:	08016824 	.word	0x08016824
 800cd3c:	080164f8 	.word	0x080164f8
 800cd40:	08016834 	.word	0x08016834
 800cd44:	08016844 	.word	0x08016844
        off -= p->len;
 800cd48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd4a:	895b      	ldrh	r3, [r3, #10]
 800cd4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cd50:	1ad3      	subs	r3, r2, r3
 800cd52:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800cd56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd58:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cd5a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800cd5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd5e:	2200      	movs	r2, #0
 800cd60:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800cd62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800cd68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd6a:	895b      	ldrh	r3, [r3, #10]
 800cd6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d8e9      	bhi.n	800cd48 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800cd74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cd78:	4619      	mov	r1, r3
 800cd7a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cd7c:	f7fc fb60 	bl	8009440 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd84:	4a91      	ldr	r2, [pc, #580]	; (800cfcc <tcp_receive+0x888>)
 800cd86:	6013      	str	r3, [r2, #0]
 800cd88:	4b91      	ldr	r3, [pc, #580]	; (800cfd0 <tcp_receive+0x88c>)
 800cd8a:	68db      	ldr	r3, [r3, #12]
 800cd8c:	4a8f      	ldr	r2, [pc, #572]	; (800cfcc <tcp_receive+0x888>)
 800cd8e:	6812      	ldr	r2, [r2, #0]
 800cd90:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cd92:	e00d      	b.n	800cdb0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800cd94:	4b8d      	ldr	r3, [pc, #564]	; (800cfcc <tcp_receive+0x888>)
 800cd96:	681a      	ldr	r2, [r3, #0]
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd9c:	1ad3      	subs	r3, r2, r3
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	da06      	bge.n	800cdb0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	8b5b      	ldrh	r3, [r3, #26]
 800cda6:	f043 0302 	orr.w	r3, r3, #2
 800cdaa:	b29a      	uxth	r2, r3
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cdb0:	4b86      	ldr	r3, [pc, #536]	; (800cfcc <tcp_receive+0x888>)
 800cdb2:	681a      	ldr	r2, [r3, #0]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdb8:	1ad3      	subs	r3, r2, r3
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	f2c0 842a 	blt.w	800d614 <tcp_receive+0xed0>
 800cdc0:	4b82      	ldr	r3, [pc, #520]	; (800cfcc <tcp_receive+0x888>)
 800cdc2:	681a      	ldr	r2, [r3, #0]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc8:	6879      	ldr	r1, [r7, #4]
 800cdca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cdcc:	440b      	add	r3, r1
 800cdce:	1ad3      	subs	r3, r2, r3
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	f300 841e 	bgt.w	800d614 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cddc:	4b7b      	ldr	r3, [pc, #492]	; (800cfcc <tcp_receive+0x888>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	429a      	cmp	r2, r3
 800cde2:	f040 829a 	bne.w	800d31a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800cde6:	4b7a      	ldr	r3, [pc, #488]	; (800cfd0 <tcp_receive+0x88c>)
 800cde8:	891c      	ldrh	r4, [r3, #8]
 800cdea:	4b79      	ldr	r3, [pc, #484]	; (800cfd0 <tcp_receive+0x88c>)
 800cdec:	68db      	ldr	r3, [r3, #12]
 800cdee:	899b      	ldrh	r3, [r3, #12]
 800cdf0:	b29b      	uxth	r3, r3
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f7fa ffac 	bl	8007d50 <lwip_htons>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	b2db      	uxtb	r3, r3
 800cdfc:	f003 0303 	and.w	r3, r3, #3
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d001      	beq.n	800ce08 <tcp_receive+0x6c4>
 800ce04:	2301      	movs	r3, #1
 800ce06:	e000      	b.n	800ce0a <tcp_receive+0x6c6>
 800ce08:	2300      	movs	r3, #0
 800ce0a:	4423      	add	r3, r4
 800ce0c:	b29a      	uxth	r2, r3
 800ce0e:	4b71      	ldr	r3, [pc, #452]	; (800cfd4 <tcp_receive+0x890>)
 800ce10:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ce16:	4b6f      	ldr	r3, [pc, #444]	; (800cfd4 <tcp_receive+0x890>)
 800ce18:	881b      	ldrh	r3, [r3, #0]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d275      	bcs.n	800cf0a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ce1e:	4b6c      	ldr	r3, [pc, #432]	; (800cfd0 <tcp_receive+0x88c>)
 800ce20:	68db      	ldr	r3, [r3, #12]
 800ce22:	899b      	ldrh	r3, [r3, #12]
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7fa ff92 	bl	8007d50 <lwip_htons>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	b2db      	uxtb	r3, r3
 800ce30:	f003 0301 	and.w	r3, r3, #1
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d01f      	beq.n	800ce78 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ce38:	4b65      	ldr	r3, [pc, #404]	; (800cfd0 <tcp_receive+0x88c>)
 800ce3a:	68db      	ldr	r3, [r3, #12]
 800ce3c:	899b      	ldrh	r3, [r3, #12]
 800ce3e:	b29b      	uxth	r3, r3
 800ce40:	b21b      	sxth	r3, r3
 800ce42:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ce46:	b21c      	sxth	r4, r3
 800ce48:	4b61      	ldr	r3, [pc, #388]	; (800cfd0 <tcp_receive+0x88c>)
 800ce4a:	68db      	ldr	r3, [r3, #12]
 800ce4c:	899b      	ldrh	r3, [r3, #12]
 800ce4e:	b29b      	uxth	r3, r3
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7fa ff7d 	bl	8007d50 <lwip_htons>
 800ce56:	4603      	mov	r3, r0
 800ce58:	b2db      	uxtb	r3, r3
 800ce5a:	b29b      	uxth	r3, r3
 800ce5c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ce60:	b29b      	uxth	r3, r3
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7fa ff74 	bl	8007d50 <lwip_htons>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	b21b      	sxth	r3, r3
 800ce6c:	4323      	orrs	r3, r4
 800ce6e:	b21a      	sxth	r2, r3
 800ce70:	4b57      	ldr	r3, [pc, #348]	; (800cfd0 <tcp_receive+0x88c>)
 800ce72:	68db      	ldr	r3, [r3, #12]
 800ce74:	b292      	uxth	r2, r2
 800ce76:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ce7c:	4b54      	ldr	r3, [pc, #336]	; (800cfd0 <tcp_receive+0x88c>)
 800ce7e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ce80:	4b53      	ldr	r3, [pc, #332]	; (800cfd0 <tcp_receive+0x88c>)
 800ce82:	68db      	ldr	r3, [r3, #12]
 800ce84:	899b      	ldrh	r3, [r3, #12]
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7fa ff61 	bl	8007d50 <lwip_htons>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	b2db      	uxtb	r3, r3
 800ce92:	f003 0302 	and.w	r3, r3, #2
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d005      	beq.n	800cea6 <tcp_receive+0x762>
            inseg.len -= 1;
 800ce9a:	4b4d      	ldr	r3, [pc, #308]	; (800cfd0 <tcp_receive+0x88c>)
 800ce9c:	891b      	ldrh	r3, [r3, #8]
 800ce9e:	3b01      	subs	r3, #1
 800cea0:	b29a      	uxth	r2, r3
 800cea2:	4b4b      	ldr	r3, [pc, #300]	; (800cfd0 <tcp_receive+0x88c>)
 800cea4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800cea6:	4b4a      	ldr	r3, [pc, #296]	; (800cfd0 <tcp_receive+0x88c>)
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	4a49      	ldr	r2, [pc, #292]	; (800cfd0 <tcp_receive+0x88c>)
 800ceac:	8912      	ldrh	r2, [r2, #8]
 800ceae:	4611      	mov	r1, r2
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f7fc f9c5 	bl	8009240 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ceb6:	4b46      	ldr	r3, [pc, #280]	; (800cfd0 <tcp_receive+0x88c>)
 800ceb8:	891c      	ldrh	r4, [r3, #8]
 800ceba:	4b45      	ldr	r3, [pc, #276]	; (800cfd0 <tcp_receive+0x88c>)
 800cebc:	68db      	ldr	r3, [r3, #12]
 800cebe:	899b      	ldrh	r3, [r3, #12]
 800cec0:	b29b      	uxth	r3, r3
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7fa ff44 	bl	8007d50 <lwip_htons>
 800cec8:	4603      	mov	r3, r0
 800ceca:	b2db      	uxtb	r3, r3
 800cecc:	f003 0303 	and.w	r3, r3, #3
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d001      	beq.n	800ced8 <tcp_receive+0x794>
 800ced4:	2301      	movs	r3, #1
 800ced6:	e000      	b.n	800ceda <tcp_receive+0x796>
 800ced8:	2300      	movs	r3, #0
 800ceda:	4423      	add	r3, r4
 800cedc:	b29a      	uxth	r2, r3
 800cede:	4b3d      	ldr	r3, [pc, #244]	; (800cfd4 <tcp_receive+0x890>)
 800cee0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cee2:	4b3c      	ldr	r3, [pc, #240]	; (800cfd4 <tcp_receive+0x890>)
 800cee4:	881b      	ldrh	r3, [r3, #0]
 800cee6:	461a      	mov	r2, r3
 800cee8:	4b38      	ldr	r3, [pc, #224]	; (800cfcc <tcp_receive+0x888>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	441a      	add	r2, r3
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef2:	6879      	ldr	r1, [r7, #4]
 800cef4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cef6:	440b      	add	r3, r1
 800cef8:	429a      	cmp	r2, r3
 800cefa:	d006      	beq.n	800cf0a <tcp_receive+0x7c6>
 800cefc:	4b36      	ldr	r3, [pc, #216]	; (800cfd8 <tcp_receive+0x894>)
 800cefe:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800cf02:	4936      	ldr	r1, [pc, #216]	; (800cfdc <tcp_receive+0x898>)
 800cf04:	4836      	ldr	r0, [pc, #216]	; (800cfe0 <tcp_receive+0x89c>)
 800cf06:	f007 f9c5 	bl	8014294 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	f000 80e7 	beq.w	800d0e2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cf14:	4b2e      	ldr	r3, [pc, #184]	; (800cfd0 <tcp_receive+0x88c>)
 800cf16:	68db      	ldr	r3, [r3, #12]
 800cf18:	899b      	ldrh	r3, [r3, #12]
 800cf1a:	b29b      	uxth	r3, r3
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7fa ff17 	bl	8007d50 <lwip_htons>
 800cf22:	4603      	mov	r3, r0
 800cf24:	b2db      	uxtb	r3, r3
 800cf26:	f003 0301 	and.w	r3, r3, #1
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d010      	beq.n	800cf50 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800cf2e:	e00a      	b.n	800cf46 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf34:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800cf40:	68f8      	ldr	r0, [r7, #12]
 800cf42:	f7fd fd92 	bl	800aa6a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d1f0      	bne.n	800cf30 <tcp_receive+0x7ec>
 800cf4e:	e0c8      	b.n	800d0e2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf54:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800cf56:	e052      	b.n	800cffe <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cf58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf5a:	68db      	ldr	r3, [r3, #12]
 800cf5c:	899b      	ldrh	r3, [r3, #12]
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	4618      	mov	r0, r3
 800cf62:	f7fa fef5 	bl	8007d50 <lwip_htons>
 800cf66:	4603      	mov	r3, r0
 800cf68:	b2db      	uxtb	r3, r3
 800cf6a:	f003 0301 	and.w	r3, r3, #1
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d03d      	beq.n	800cfee <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800cf72:	4b17      	ldr	r3, [pc, #92]	; (800cfd0 <tcp_receive+0x88c>)
 800cf74:	68db      	ldr	r3, [r3, #12]
 800cf76:	899b      	ldrh	r3, [r3, #12]
 800cf78:	b29b      	uxth	r3, r3
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f7fa fee8 	bl	8007d50 <lwip_htons>
 800cf80:	4603      	mov	r3, r0
 800cf82:	b2db      	uxtb	r3, r3
 800cf84:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d130      	bne.n	800cfee <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800cf8c:	4b10      	ldr	r3, [pc, #64]	; (800cfd0 <tcp_receive+0x88c>)
 800cf8e:	68db      	ldr	r3, [r3, #12]
 800cf90:	899b      	ldrh	r3, [r3, #12]
 800cf92:	b29c      	uxth	r4, r3
 800cf94:	2001      	movs	r0, #1
 800cf96:	f7fa fedb 	bl	8007d50 <lwip_htons>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	4b0c      	ldr	r3, [pc, #48]	; (800cfd0 <tcp_receive+0x88c>)
 800cfa0:	68db      	ldr	r3, [r3, #12]
 800cfa2:	4322      	orrs	r2, r4
 800cfa4:	b292      	uxth	r2, r2
 800cfa6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800cfa8:	4b09      	ldr	r3, [pc, #36]	; (800cfd0 <tcp_receive+0x88c>)
 800cfaa:	891c      	ldrh	r4, [r3, #8]
 800cfac:	4b08      	ldr	r3, [pc, #32]	; (800cfd0 <tcp_receive+0x88c>)
 800cfae:	68db      	ldr	r3, [r3, #12]
 800cfb0:	899b      	ldrh	r3, [r3, #12]
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7fa fecb 	bl	8007d50 <lwip_htons>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	b2db      	uxtb	r3, r3
 800cfbe:	f003 0303 	and.w	r3, r3, #3
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d00e      	beq.n	800cfe4 <tcp_receive+0x8a0>
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	e00d      	b.n	800cfe6 <tcp_receive+0x8a2>
 800cfca:	bf00      	nop
 800cfcc:	20018c1c 	.word	0x20018c1c
 800cfd0:	20018bfc 	.word	0x20018bfc
 800cfd4:	20018c26 	.word	0x20018c26
 800cfd8:	080164ac 	.word	0x080164ac
 800cfdc:	08016854 	.word	0x08016854
 800cfe0:	080164f8 	.word	0x080164f8
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	4423      	add	r3, r4
 800cfe8:	b29a      	uxth	r2, r3
 800cfea:	4b98      	ldr	r3, [pc, #608]	; (800d24c <tcp_receive+0xb08>)
 800cfec:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800cfee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cff0:	613b      	str	r3, [r7, #16]
              next = next->next;
 800cff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800cff8:	6938      	ldr	r0, [r7, #16]
 800cffa:	f7fd fd36 	bl	800aa6a <tcp_seg_free>
            while (next &&
 800cffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d000:	2b00      	cmp	r3, #0
 800d002:	d00e      	beq.n	800d022 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d004:	4b91      	ldr	r3, [pc, #580]	; (800d24c <tcp_receive+0xb08>)
 800d006:	881b      	ldrh	r3, [r3, #0]
 800d008:	461a      	mov	r2, r3
 800d00a:	4b91      	ldr	r3, [pc, #580]	; (800d250 <tcp_receive+0xb0c>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	441a      	add	r2, r3
 800d010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d012:	68db      	ldr	r3, [r3, #12]
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d018:	8909      	ldrh	r1, [r1, #8]
 800d01a:	440b      	add	r3, r1
 800d01c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d01e:	2b00      	cmp	r3, #0
 800d020:	da9a      	bge.n	800cf58 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d024:	2b00      	cmp	r3, #0
 800d026:	d059      	beq.n	800d0dc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800d028:	4b88      	ldr	r3, [pc, #544]	; (800d24c <tcp_receive+0xb08>)
 800d02a:	881b      	ldrh	r3, [r3, #0]
 800d02c:	461a      	mov	r2, r3
 800d02e:	4b88      	ldr	r3, [pc, #544]	; (800d250 <tcp_receive+0xb0c>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	441a      	add	r2, r3
 800d034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d036:	68db      	ldr	r3, [r3, #12]
 800d038:	685b      	ldr	r3, [r3, #4]
 800d03a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	dd4d      	ble.n	800d0dc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d042:	68db      	ldr	r3, [r3, #12]
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	b29a      	uxth	r2, r3
 800d048:	4b81      	ldr	r3, [pc, #516]	; (800d250 <tcp_receive+0xb0c>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	1ad3      	subs	r3, r2, r3
 800d050:	b29a      	uxth	r2, r3
 800d052:	4b80      	ldr	r3, [pc, #512]	; (800d254 <tcp_receive+0xb10>)
 800d054:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d056:	4b7f      	ldr	r3, [pc, #508]	; (800d254 <tcp_receive+0xb10>)
 800d058:	68db      	ldr	r3, [r3, #12]
 800d05a:	899b      	ldrh	r3, [r3, #12]
 800d05c:	b29b      	uxth	r3, r3
 800d05e:	4618      	mov	r0, r3
 800d060:	f7fa fe76 	bl	8007d50 <lwip_htons>
 800d064:	4603      	mov	r3, r0
 800d066:	b2db      	uxtb	r3, r3
 800d068:	f003 0302 	and.w	r3, r3, #2
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d005      	beq.n	800d07c <tcp_receive+0x938>
                inseg.len -= 1;
 800d070:	4b78      	ldr	r3, [pc, #480]	; (800d254 <tcp_receive+0xb10>)
 800d072:	891b      	ldrh	r3, [r3, #8]
 800d074:	3b01      	subs	r3, #1
 800d076:	b29a      	uxth	r2, r3
 800d078:	4b76      	ldr	r3, [pc, #472]	; (800d254 <tcp_receive+0xb10>)
 800d07a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d07c:	4b75      	ldr	r3, [pc, #468]	; (800d254 <tcp_receive+0xb10>)
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	4a74      	ldr	r2, [pc, #464]	; (800d254 <tcp_receive+0xb10>)
 800d082:	8912      	ldrh	r2, [r2, #8]
 800d084:	4611      	mov	r1, r2
 800d086:	4618      	mov	r0, r3
 800d088:	f7fc f8da 	bl	8009240 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d08c:	4b71      	ldr	r3, [pc, #452]	; (800d254 <tcp_receive+0xb10>)
 800d08e:	891c      	ldrh	r4, [r3, #8]
 800d090:	4b70      	ldr	r3, [pc, #448]	; (800d254 <tcp_receive+0xb10>)
 800d092:	68db      	ldr	r3, [r3, #12]
 800d094:	899b      	ldrh	r3, [r3, #12]
 800d096:	b29b      	uxth	r3, r3
 800d098:	4618      	mov	r0, r3
 800d09a:	f7fa fe59 	bl	8007d50 <lwip_htons>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	b2db      	uxtb	r3, r3
 800d0a2:	f003 0303 	and.w	r3, r3, #3
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d001      	beq.n	800d0ae <tcp_receive+0x96a>
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	e000      	b.n	800d0b0 <tcp_receive+0x96c>
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	4423      	add	r3, r4
 800d0b2:	b29a      	uxth	r2, r3
 800d0b4:	4b65      	ldr	r3, [pc, #404]	; (800d24c <tcp_receive+0xb08>)
 800d0b6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d0b8:	4b64      	ldr	r3, [pc, #400]	; (800d24c <tcp_receive+0xb08>)
 800d0ba:	881b      	ldrh	r3, [r3, #0]
 800d0bc:	461a      	mov	r2, r3
 800d0be:	4b64      	ldr	r3, [pc, #400]	; (800d250 <tcp_receive+0xb0c>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	441a      	add	r2, r3
 800d0c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0c6:	68db      	ldr	r3, [r3, #12]
 800d0c8:	685b      	ldr	r3, [r3, #4]
 800d0ca:	429a      	cmp	r2, r3
 800d0cc:	d006      	beq.n	800d0dc <tcp_receive+0x998>
 800d0ce:	4b62      	ldr	r3, [pc, #392]	; (800d258 <tcp_receive+0xb14>)
 800d0d0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800d0d4:	4961      	ldr	r1, [pc, #388]	; (800d25c <tcp_receive+0xb18>)
 800d0d6:	4862      	ldr	r0, [pc, #392]	; (800d260 <tcp_receive+0xb1c>)
 800d0d8:	f007 f8dc 	bl	8014294 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d0e0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d0e2:	4b5a      	ldr	r3, [pc, #360]	; (800d24c <tcp_receive+0xb08>)
 800d0e4:	881b      	ldrh	r3, [r3, #0]
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	4b59      	ldr	r3, [pc, #356]	; (800d250 <tcp_receive+0xb0c>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	441a      	add	r2, r3
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d0f6:	4b55      	ldr	r3, [pc, #340]	; (800d24c <tcp_receive+0xb08>)
 800d0f8:	881b      	ldrh	r3, [r3, #0]
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	d206      	bcs.n	800d10c <tcp_receive+0x9c8>
 800d0fe:	4b56      	ldr	r3, [pc, #344]	; (800d258 <tcp_receive+0xb14>)
 800d100:	f240 6207 	movw	r2, #1543	; 0x607
 800d104:	4957      	ldr	r1, [pc, #348]	; (800d264 <tcp_receive+0xb20>)
 800d106:	4856      	ldr	r0, [pc, #344]	; (800d260 <tcp_receive+0xb1c>)
 800d108:	f007 f8c4 	bl	8014294 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d110:	4b4e      	ldr	r3, [pc, #312]	; (800d24c <tcp_receive+0xb08>)
 800d112:	881b      	ldrh	r3, [r3, #0]
 800d114:	1ad3      	subs	r3, r2, r3
 800d116:	b29a      	uxth	r2, r3
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f7fc ffc5 	bl	800a0ac <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d122:	4b4c      	ldr	r3, [pc, #304]	; (800d254 <tcp_receive+0xb10>)
 800d124:	685b      	ldr	r3, [r3, #4]
 800d126:	891b      	ldrh	r3, [r3, #8]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d006      	beq.n	800d13a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800d12c:	4b49      	ldr	r3, [pc, #292]	; (800d254 <tcp_receive+0xb10>)
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	4a4d      	ldr	r2, [pc, #308]	; (800d268 <tcp_receive+0xb24>)
 800d132:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d134:	4b47      	ldr	r3, [pc, #284]	; (800d254 <tcp_receive+0xb10>)
 800d136:	2200      	movs	r2, #0
 800d138:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d13a:	4b46      	ldr	r3, [pc, #280]	; (800d254 <tcp_receive+0xb10>)
 800d13c:	68db      	ldr	r3, [r3, #12]
 800d13e:	899b      	ldrh	r3, [r3, #12]
 800d140:	b29b      	uxth	r3, r3
 800d142:	4618      	mov	r0, r3
 800d144:	f7fa fe04 	bl	8007d50 <lwip_htons>
 800d148:	4603      	mov	r3, r0
 800d14a:	b2db      	uxtb	r3, r3
 800d14c:	f003 0301 	and.w	r3, r3, #1
 800d150:	2b00      	cmp	r3, #0
 800d152:	f000 80b8 	beq.w	800d2c6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d156:	4b45      	ldr	r3, [pc, #276]	; (800d26c <tcp_receive+0xb28>)
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	f043 0320 	orr.w	r3, r3, #32
 800d15e:	b2da      	uxtb	r2, r3
 800d160:	4b42      	ldr	r3, [pc, #264]	; (800d26c <tcp_receive+0xb28>)
 800d162:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d164:	e0af      	b.n	800d2c6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d16a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	4a36      	ldr	r2, [pc, #216]	; (800d250 <tcp_receive+0xb0c>)
 800d176:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	891b      	ldrh	r3, [r3, #8]
 800d17c:	461c      	mov	r4, r3
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	68db      	ldr	r3, [r3, #12]
 800d182:	899b      	ldrh	r3, [r3, #12]
 800d184:	b29b      	uxth	r3, r3
 800d186:	4618      	mov	r0, r3
 800d188:	f7fa fde2 	bl	8007d50 <lwip_htons>
 800d18c:	4603      	mov	r3, r0
 800d18e:	b2db      	uxtb	r3, r3
 800d190:	f003 0303 	and.w	r3, r3, #3
 800d194:	2b00      	cmp	r3, #0
 800d196:	d001      	beq.n	800d19c <tcp_receive+0xa58>
 800d198:	2301      	movs	r3, #1
 800d19a:	e000      	b.n	800d19e <tcp_receive+0xa5a>
 800d19c:	2300      	movs	r3, #0
 800d19e:	191a      	adds	r2, r3, r4
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1a4:	441a      	add	r2, r3
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1ae:	461c      	mov	r4, r3
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	891b      	ldrh	r3, [r3, #8]
 800d1b4:	461d      	mov	r5, r3
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	68db      	ldr	r3, [r3, #12]
 800d1ba:	899b      	ldrh	r3, [r3, #12]
 800d1bc:	b29b      	uxth	r3, r3
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7fa fdc6 	bl	8007d50 <lwip_htons>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	f003 0303 	and.w	r3, r3, #3
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d001      	beq.n	800d1d4 <tcp_receive+0xa90>
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	e000      	b.n	800d1d6 <tcp_receive+0xa92>
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	442b      	add	r3, r5
 800d1d8:	429c      	cmp	r4, r3
 800d1da:	d206      	bcs.n	800d1ea <tcp_receive+0xaa6>
 800d1dc:	4b1e      	ldr	r3, [pc, #120]	; (800d258 <tcp_receive+0xb14>)
 800d1de:	f240 622b 	movw	r2, #1579	; 0x62b
 800d1e2:	4923      	ldr	r1, [pc, #140]	; (800d270 <tcp_receive+0xb2c>)
 800d1e4:	481e      	ldr	r0, [pc, #120]	; (800d260 <tcp_receive+0xb1c>)
 800d1e6:	f007 f855 	bl	8014294 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	891b      	ldrh	r3, [r3, #8]
 800d1ee:	461c      	mov	r4, r3
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	68db      	ldr	r3, [r3, #12]
 800d1f4:	899b      	ldrh	r3, [r3, #12]
 800d1f6:	b29b      	uxth	r3, r3
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f7fa fda9 	bl	8007d50 <lwip_htons>
 800d1fe:	4603      	mov	r3, r0
 800d200:	b2db      	uxtb	r3, r3
 800d202:	f003 0303 	and.w	r3, r3, #3
 800d206:	2b00      	cmp	r3, #0
 800d208:	d001      	beq.n	800d20e <tcp_receive+0xaca>
 800d20a:	2301      	movs	r3, #1
 800d20c:	e000      	b.n	800d210 <tcp_receive+0xacc>
 800d20e:	2300      	movs	r3, #0
 800d210:	1919      	adds	r1, r3, r4
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d216:	b28b      	uxth	r3, r1
 800d218:	1ad3      	subs	r3, r2, r3
 800d21a:	b29a      	uxth	r2, r3
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f7fc ff43 	bl	800a0ac <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	685b      	ldr	r3, [r3, #4]
 800d22a:	891b      	ldrh	r3, [r3, #8]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d028      	beq.n	800d282 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d230:	4b0d      	ldr	r3, [pc, #52]	; (800d268 <tcp_receive+0xb24>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d01d      	beq.n	800d274 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800d238:	4b0b      	ldr	r3, [pc, #44]	; (800d268 <tcp_receive+0xb24>)
 800d23a:	681a      	ldr	r2, [r3, #0]
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	685b      	ldr	r3, [r3, #4]
 800d240:	4619      	mov	r1, r3
 800d242:	4610      	mov	r0, r2
 800d244:	f7fc fa50 	bl	80096e8 <pbuf_cat>
 800d248:	e018      	b.n	800d27c <tcp_receive+0xb38>
 800d24a:	bf00      	nop
 800d24c:	20018c26 	.word	0x20018c26
 800d250:	20018c1c 	.word	0x20018c1c
 800d254:	20018bfc 	.word	0x20018bfc
 800d258:	080164ac 	.word	0x080164ac
 800d25c:	0801688c 	.word	0x0801688c
 800d260:	080164f8 	.word	0x080164f8
 800d264:	080168c8 	.word	0x080168c8
 800d268:	20018c2c 	.word	0x20018c2c
 800d26c:	20018c29 	.word	0x20018c29
 800d270:	080168e8 	.word	0x080168e8
            } else {
              recv_data = cseg->p;
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	4a70      	ldr	r2, [pc, #448]	; (800d43c <tcp_receive+0xcf8>)
 800d27a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	2200      	movs	r2, #0
 800d280:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	68db      	ldr	r3, [r3, #12]
 800d286:	899b      	ldrh	r3, [r3, #12]
 800d288:	b29b      	uxth	r3, r3
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7fa fd60 	bl	8007d50 <lwip_htons>
 800d290:	4603      	mov	r3, r0
 800d292:	b2db      	uxtb	r3, r3
 800d294:	f003 0301 	and.w	r3, r3, #1
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d00d      	beq.n	800d2b8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d29c:	4b68      	ldr	r3, [pc, #416]	; (800d440 <tcp_receive+0xcfc>)
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	f043 0320 	orr.w	r3, r3, #32
 800d2a4:	b2da      	uxtb	r2, r3
 800d2a6:	4b66      	ldr	r3, [pc, #408]	; (800d440 <tcp_receive+0xcfc>)
 800d2a8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	7d1b      	ldrb	r3, [r3, #20]
 800d2ae:	2b04      	cmp	r3, #4
 800d2b0:	d102      	bne.n	800d2b8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2207      	movs	r2, #7
 800d2b6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	681a      	ldr	r2, [r3, #0]
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800d2c0:	68b8      	ldr	r0, [r7, #8]
 800d2c2:	f7fd fbd2 	bl	800aa6a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d008      	beq.n	800d2e0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2d2:	68db      	ldr	r3, [r3, #12]
 800d2d4:	685a      	ldr	r2, [r3, #4]
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	f43f af43 	beq.w	800d166 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	8b5b      	ldrh	r3, [r3, #26]
 800d2e4:	f003 0301 	and.w	r3, r3, #1
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d00e      	beq.n	800d30a <tcp_receive+0xbc6>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	8b5b      	ldrh	r3, [r3, #26]
 800d2f0:	f023 0301 	bic.w	r3, r3, #1
 800d2f4:	b29a      	uxth	r2, r3
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	835a      	strh	r2, [r3, #26]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	8b5b      	ldrh	r3, [r3, #26]
 800d2fe:	f043 0302 	orr.w	r3, r3, #2
 800d302:	b29a      	uxth	r2, r3
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d308:	e188      	b.n	800d61c <tcp_receive+0xed8>
        tcp_ack(pcb);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	8b5b      	ldrh	r3, [r3, #26]
 800d30e:	f043 0301 	orr.w	r3, r3, #1
 800d312:	b29a      	uxth	r2, r3
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d318:	e180      	b.n	800d61c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d106      	bne.n	800d330 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d322:	4848      	ldr	r0, [pc, #288]	; (800d444 <tcp_receive+0xd00>)
 800d324:	f7fd fbba 	bl	800aa9c <tcp_seg_copy>
 800d328:	4602      	mov	r2, r0
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	675a      	str	r2, [r3, #116]	; 0x74
 800d32e:	e16d      	b.n	800d60c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800d330:	2300      	movs	r3, #0
 800d332:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d338:	63bb      	str	r3, [r7, #56]	; 0x38
 800d33a:	e157      	b.n	800d5ec <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800d33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d33e:	68db      	ldr	r3, [r3, #12]
 800d340:	685a      	ldr	r2, [r3, #4]
 800d342:	4b41      	ldr	r3, [pc, #260]	; (800d448 <tcp_receive+0xd04>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	429a      	cmp	r2, r3
 800d348:	d11d      	bne.n	800d386 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d34a:	4b3e      	ldr	r3, [pc, #248]	; (800d444 <tcp_receive+0xd00>)
 800d34c:	891a      	ldrh	r2, [r3, #8]
 800d34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d350:	891b      	ldrh	r3, [r3, #8]
 800d352:	429a      	cmp	r2, r3
 800d354:	f240 814f 	bls.w	800d5f6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d358:	483a      	ldr	r0, [pc, #232]	; (800d444 <tcp_receive+0xd00>)
 800d35a:	f7fd fb9f 	bl	800aa9c <tcp_seg_copy>
 800d35e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	2b00      	cmp	r3, #0
 800d364:	f000 8149 	beq.w	800d5fa <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800d368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d003      	beq.n	800d376 <tcp_receive+0xc32>
                    prev->next = cseg;
 800d36e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d370:	697a      	ldr	r2, [r7, #20]
 800d372:	601a      	str	r2, [r3, #0]
 800d374:	e002      	b.n	800d37c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	697a      	ldr	r2, [r7, #20]
 800d37a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d37c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d37e:	6978      	ldr	r0, [r7, #20]
 800d380:	f7ff f8dc 	bl	800c53c <tcp_oos_insert_segment>
                }
                break;
 800d384:	e139      	b.n	800d5fa <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d117      	bne.n	800d3bc <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d38c:	4b2e      	ldr	r3, [pc, #184]	; (800d448 <tcp_receive+0xd04>)
 800d38e:	681a      	ldr	r2, [r3, #0]
 800d390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d392:	68db      	ldr	r3, [r3, #12]
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	1ad3      	subs	r3, r2, r3
 800d398:	2b00      	cmp	r3, #0
 800d39a:	da57      	bge.n	800d44c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d39c:	4829      	ldr	r0, [pc, #164]	; (800d444 <tcp_receive+0xd00>)
 800d39e:	f7fd fb7d 	bl	800aa9c <tcp_seg_copy>
 800d3a2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800d3a4:	69bb      	ldr	r3, [r7, #24]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	f000 8129 	beq.w	800d5fe <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	69ba      	ldr	r2, [r7, #24]
 800d3b0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800d3b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d3b4:	69b8      	ldr	r0, [r7, #24]
 800d3b6:	f7ff f8c1 	bl	800c53c <tcp_oos_insert_segment>
                  }
                  break;
 800d3ba:	e120      	b.n	800d5fe <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800d3bc:	4b22      	ldr	r3, [pc, #136]	; (800d448 <tcp_receive+0xd04>)
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3c2:	68db      	ldr	r3, [r3, #12]
 800d3c4:	685b      	ldr	r3, [r3, #4]
 800d3c6:	1ad3      	subs	r3, r2, r3
 800d3c8:	3b01      	subs	r3, #1
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	db3e      	blt.n	800d44c <tcp_receive+0xd08>
 800d3ce:	4b1e      	ldr	r3, [pc, #120]	; (800d448 <tcp_receive+0xd04>)
 800d3d0:	681a      	ldr	r2, [r3, #0]
 800d3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d4:	68db      	ldr	r3, [r3, #12]
 800d3d6:	685b      	ldr	r3, [r3, #4]
 800d3d8:	1ad3      	subs	r3, r2, r3
 800d3da:	3301      	adds	r3, #1
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	dc35      	bgt.n	800d44c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d3e0:	4818      	ldr	r0, [pc, #96]	; (800d444 <tcp_receive+0xd00>)
 800d3e2:	f7fd fb5b 	bl	800aa9c <tcp_seg_copy>
 800d3e6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	f000 8109 	beq.w	800d602 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3f2:	68db      	ldr	r3, [r3, #12]
 800d3f4:	685b      	ldr	r3, [r3, #4]
 800d3f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3f8:	8912      	ldrh	r2, [r2, #8]
 800d3fa:	441a      	add	r2, r3
 800d3fc:	4b12      	ldr	r3, [pc, #72]	; (800d448 <tcp_receive+0xd04>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	1ad3      	subs	r3, r2, r3
 800d402:	2b00      	cmp	r3, #0
 800d404:	dd12      	ble.n	800d42c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d406:	4b10      	ldr	r3, [pc, #64]	; (800d448 <tcp_receive+0xd04>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	b29a      	uxth	r2, r3
 800d40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d40e:	68db      	ldr	r3, [r3, #12]
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	b29b      	uxth	r3, r3
 800d414:	1ad3      	subs	r3, r2, r3
 800d416:	b29a      	uxth	r2, r3
 800d418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d41a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d41c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d41e:	685a      	ldr	r2, [r3, #4]
 800d420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d422:	891b      	ldrh	r3, [r3, #8]
 800d424:	4619      	mov	r1, r3
 800d426:	4610      	mov	r0, r2
 800d428:	f7fb ff0a 	bl	8009240 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d42c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d42e:	69fa      	ldr	r2, [r7, #28]
 800d430:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d432:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d434:	69f8      	ldr	r0, [r7, #28]
 800d436:	f7ff f881 	bl	800c53c <tcp_oos_insert_segment>
                  }
                  break;
 800d43a:	e0e2      	b.n	800d602 <tcp_receive+0xebe>
 800d43c:	20018c2c 	.word	0x20018c2c
 800d440:	20018c29 	.word	0x20018c29
 800d444:	20018bfc 	.word	0x20018bfc
 800d448:	20018c1c 	.word	0x20018c1c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800d44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d44e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	2b00      	cmp	r3, #0
 800d456:	f040 80c6 	bne.w	800d5e6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d45a:	4b80      	ldr	r3, [pc, #512]	; (800d65c <tcp_receive+0xf18>)
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d460:	68db      	ldr	r3, [r3, #12]
 800d462:	685b      	ldr	r3, [r3, #4]
 800d464:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d466:	2b00      	cmp	r3, #0
 800d468:	f340 80bd 	ble.w	800d5e6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d46e:	68db      	ldr	r3, [r3, #12]
 800d470:	899b      	ldrh	r3, [r3, #12]
 800d472:	b29b      	uxth	r3, r3
 800d474:	4618      	mov	r0, r3
 800d476:	f7fa fc6b 	bl	8007d50 <lwip_htons>
 800d47a:	4603      	mov	r3, r0
 800d47c:	b2db      	uxtb	r3, r3
 800d47e:	f003 0301 	and.w	r3, r3, #1
 800d482:	2b00      	cmp	r3, #0
 800d484:	f040 80bf 	bne.w	800d606 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d488:	4875      	ldr	r0, [pc, #468]	; (800d660 <tcp_receive+0xf1c>)
 800d48a:	f7fd fb07 	bl	800aa9c <tcp_seg_copy>
 800d48e:	4602      	mov	r2, r0
 800d490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d492:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	f000 80b6 	beq.w	800d60a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a0:	68db      	ldr	r3, [r3, #12]
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4a6:	8912      	ldrh	r2, [r2, #8]
 800d4a8:	441a      	add	r2, r3
 800d4aa:	4b6c      	ldr	r3, [pc, #432]	; (800d65c <tcp_receive+0xf18>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	1ad3      	subs	r3, r2, r3
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	dd12      	ble.n	800d4da <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d4b4:	4b69      	ldr	r3, [pc, #420]	; (800d65c <tcp_receive+0xf18>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	b29a      	uxth	r2, r3
 800d4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4bc:	68db      	ldr	r3, [r3, #12]
 800d4be:	685b      	ldr	r3, [r3, #4]
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	1ad3      	subs	r3, r2, r3
 800d4c4:	b29a      	uxth	r2, r3
 800d4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4cc:	685a      	ldr	r2, [r3, #4]
 800d4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4d0:	891b      	ldrh	r3, [r3, #8]
 800d4d2:	4619      	mov	r1, r3
 800d4d4:	4610      	mov	r0, r2
 800d4d6:	f7fb feb3 	bl	8009240 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d4da:	4b62      	ldr	r3, [pc, #392]	; (800d664 <tcp_receive+0xf20>)
 800d4dc:	881b      	ldrh	r3, [r3, #0]
 800d4de:	461a      	mov	r2, r3
 800d4e0:	4b5e      	ldr	r3, [pc, #376]	; (800d65c <tcp_receive+0xf18>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	441a      	add	r2, r3
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ea:	6879      	ldr	r1, [r7, #4]
 800d4ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d4ee:	440b      	add	r3, r1
 800d4f0:	1ad3      	subs	r3, r2, r3
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	f340 8089 	ble.w	800d60a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	68db      	ldr	r3, [r3, #12]
 800d4fe:	899b      	ldrh	r3, [r3, #12]
 800d500:	b29b      	uxth	r3, r3
 800d502:	4618      	mov	r0, r3
 800d504:	f7fa fc24 	bl	8007d50 <lwip_htons>
 800d508:	4603      	mov	r3, r0
 800d50a:	b2db      	uxtb	r3, r3
 800d50c:	f003 0301 	and.w	r3, r3, #1
 800d510:	2b00      	cmp	r3, #0
 800d512:	d022      	beq.n	800d55a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	68db      	ldr	r3, [r3, #12]
 800d51a:	899b      	ldrh	r3, [r3, #12]
 800d51c:	b29b      	uxth	r3, r3
 800d51e:	b21b      	sxth	r3, r3
 800d520:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d524:	b21c      	sxth	r4, r3
 800d526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	68db      	ldr	r3, [r3, #12]
 800d52c:	899b      	ldrh	r3, [r3, #12]
 800d52e:	b29b      	uxth	r3, r3
 800d530:	4618      	mov	r0, r3
 800d532:	f7fa fc0d 	bl	8007d50 <lwip_htons>
 800d536:	4603      	mov	r3, r0
 800d538:	b2db      	uxtb	r3, r3
 800d53a:	b29b      	uxth	r3, r3
 800d53c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d540:	b29b      	uxth	r3, r3
 800d542:	4618      	mov	r0, r3
 800d544:	f7fa fc04 	bl	8007d50 <lwip_htons>
 800d548:	4603      	mov	r3, r0
 800d54a:	b21b      	sxth	r3, r3
 800d54c:	4323      	orrs	r3, r4
 800d54e:	b21a      	sxth	r2, r3
 800d550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	68db      	ldr	r3, [r3, #12]
 800d556:	b292      	uxth	r2, r2
 800d558:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d55e:	b29a      	uxth	r2, r3
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d564:	4413      	add	r3, r2
 800d566:	b299      	uxth	r1, r3
 800d568:	4b3c      	ldr	r3, [pc, #240]	; (800d65c <tcp_receive+0xf18>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	b29a      	uxth	r2, r3
 800d56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	1a8a      	subs	r2, r1, r2
 800d574:	b292      	uxth	r2, r2
 800d576:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	685a      	ldr	r2, [r3, #4]
 800d57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	891b      	ldrh	r3, [r3, #8]
 800d584:	4619      	mov	r1, r3
 800d586:	4610      	mov	r0, r2
 800d588:	f7fb fe5a 	bl	8009240 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	891c      	ldrh	r4, [r3, #8]
 800d592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	899b      	ldrh	r3, [r3, #12]
 800d59a:	b29b      	uxth	r3, r3
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7fa fbd7 	bl	8007d50 <lwip_htons>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	b2db      	uxtb	r3, r3
 800d5a6:	f003 0303 	and.w	r3, r3, #3
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d001      	beq.n	800d5b2 <tcp_receive+0xe6e>
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	e000      	b.n	800d5b4 <tcp_receive+0xe70>
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	4423      	add	r3, r4
 800d5b6:	b29a      	uxth	r2, r3
 800d5b8:	4b2a      	ldr	r3, [pc, #168]	; (800d664 <tcp_receive+0xf20>)
 800d5ba:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d5bc:	4b29      	ldr	r3, [pc, #164]	; (800d664 <tcp_receive+0xf20>)
 800d5be:	881b      	ldrh	r3, [r3, #0]
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	4b26      	ldr	r3, [pc, #152]	; (800d65c <tcp_receive+0xf18>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	441a      	add	r2, r3
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5cc:	6879      	ldr	r1, [r7, #4]
 800d5ce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d5d0:	440b      	add	r3, r1
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d019      	beq.n	800d60a <tcp_receive+0xec6>
 800d5d6:	4b24      	ldr	r3, [pc, #144]	; (800d668 <tcp_receive+0xf24>)
 800d5d8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800d5dc:	4923      	ldr	r1, [pc, #140]	; (800d66c <tcp_receive+0xf28>)
 800d5de:	4824      	ldr	r0, [pc, #144]	; (800d670 <tcp_receive+0xf2c>)
 800d5e0:	f006 fe58 	bl	8014294 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d5e4:	e011      	b.n	800d60a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800d5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	f47f aea4 	bne.w	800d33c <tcp_receive+0xbf8>
 800d5f4:	e00a      	b.n	800d60c <tcp_receive+0xec8>
                break;
 800d5f6:	bf00      	nop
 800d5f8:	e008      	b.n	800d60c <tcp_receive+0xec8>
                break;
 800d5fa:	bf00      	nop
 800d5fc:	e006      	b.n	800d60c <tcp_receive+0xec8>
                  break;
 800d5fe:	bf00      	nop
 800d600:	e004      	b.n	800d60c <tcp_receive+0xec8>
                  break;
 800d602:	bf00      	nop
 800d604:	e002      	b.n	800d60c <tcp_receive+0xec8>
                  break;
 800d606:	bf00      	nop
 800d608:	e000      	b.n	800d60c <tcp_receive+0xec8>
                break;
 800d60a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f001 fa33 	bl	800ea78 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800d612:	e003      	b.n	800d61c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f001 fa2f 	bl	800ea78 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d61a:	e01a      	b.n	800d652 <tcp_receive+0xf0e>
 800d61c:	e019      	b.n	800d652 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d61e:	4b0f      	ldr	r3, [pc, #60]	; (800d65c <tcp_receive+0xf18>)
 800d620:	681a      	ldr	r2, [r3, #0]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d626:	1ad3      	subs	r3, r2, r3
 800d628:	2b00      	cmp	r3, #0
 800d62a:	db0a      	blt.n	800d642 <tcp_receive+0xefe>
 800d62c:	4b0b      	ldr	r3, [pc, #44]	; (800d65c <tcp_receive+0xf18>)
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d634:	6879      	ldr	r1, [r7, #4]
 800d636:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d638:	440b      	add	r3, r1
 800d63a:	1ad3      	subs	r3, r2, r3
 800d63c:	3301      	adds	r3, #1
 800d63e:	2b00      	cmp	r3, #0
 800d640:	dd07      	ble.n	800d652 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	8b5b      	ldrh	r3, [r3, #26]
 800d646:	f043 0302 	orr.w	r3, r3, #2
 800d64a:	b29a      	uxth	r2, r3
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800d650:	e7ff      	b.n	800d652 <tcp_receive+0xf0e>
 800d652:	bf00      	nop
 800d654:	3750      	adds	r7, #80	; 0x50
 800d656:	46bd      	mov	sp, r7
 800d658:	bdb0      	pop	{r4, r5, r7, pc}
 800d65a:	bf00      	nop
 800d65c:	20018c1c 	.word	0x20018c1c
 800d660:	20018bfc 	.word	0x20018bfc
 800d664:	20018c26 	.word	0x20018c26
 800d668:	080164ac 	.word	0x080164ac
 800d66c:	08016854 	.word	0x08016854
 800d670:	080164f8 	.word	0x080164f8

0800d674 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800d674:	b480      	push	{r7}
 800d676:	b083      	sub	sp, #12
 800d678:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800d67a:	4b15      	ldr	r3, [pc, #84]	; (800d6d0 <tcp_get_next_optbyte+0x5c>)
 800d67c:	881b      	ldrh	r3, [r3, #0]
 800d67e:	1c5a      	adds	r2, r3, #1
 800d680:	b291      	uxth	r1, r2
 800d682:	4a13      	ldr	r2, [pc, #76]	; (800d6d0 <tcp_get_next_optbyte+0x5c>)
 800d684:	8011      	strh	r1, [r2, #0]
 800d686:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800d688:	4b12      	ldr	r3, [pc, #72]	; (800d6d4 <tcp_get_next_optbyte+0x60>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d004      	beq.n	800d69a <tcp_get_next_optbyte+0x26>
 800d690:	4b11      	ldr	r3, [pc, #68]	; (800d6d8 <tcp_get_next_optbyte+0x64>)
 800d692:	881b      	ldrh	r3, [r3, #0]
 800d694:	88fa      	ldrh	r2, [r7, #6]
 800d696:	429a      	cmp	r2, r3
 800d698:	d208      	bcs.n	800d6ac <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800d69a:	4b10      	ldr	r3, [pc, #64]	; (800d6dc <tcp_get_next_optbyte+0x68>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	3314      	adds	r3, #20
 800d6a0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800d6a2:	88fb      	ldrh	r3, [r7, #6]
 800d6a4:	683a      	ldr	r2, [r7, #0]
 800d6a6:	4413      	add	r3, r2
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	e00b      	b.n	800d6c4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800d6ac:	88fb      	ldrh	r3, [r7, #6]
 800d6ae:	b2da      	uxtb	r2, r3
 800d6b0:	4b09      	ldr	r3, [pc, #36]	; (800d6d8 <tcp_get_next_optbyte+0x64>)
 800d6b2:	881b      	ldrh	r3, [r3, #0]
 800d6b4:	b2db      	uxtb	r3, r3
 800d6b6:	1ad3      	subs	r3, r2, r3
 800d6b8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800d6ba:	4b06      	ldr	r3, [pc, #24]	; (800d6d4 <tcp_get_next_optbyte+0x60>)
 800d6bc:	681a      	ldr	r2, [r3, #0]
 800d6be:	797b      	ldrb	r3, [r7, #5]
 800d6c0:	4413      	add	r3, r2
 800d6c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	370c      	adds	r7, #12
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr
 800d6d0:	20018c18 	.word	0x20018c18
 800d6d4:	20018c14 	.word	0x20018c14
 800d6d8:	20018c12 	.word	0x20018c12
 800d6dc:	20018c0c 	.word	0x20018c0c

0800d6e0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b084      	sub	sp, #16
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d106      	bne.n	800d6fc <tcp_parseopt+0x1c>
 800d6ee:	4b32      	ldr	r3, [pc, #200]	; (800d7b8 <tcp_parseopt+0xd8>)
 800d6f0:	f240 727d 	movw	r2, #1917	; 0x77d
 800d6f4:	4931      	ldr	r1, [pc, #196]	; (800d7bc <tcp_parseopt+0xdc>)
 800d6f6:	4832      	ldr	r0, [pc, #200]	; (800d7c0 <tcp_parseopt+0xe0>)
 800d6f8:	f006 fdcc 	bl	8014294 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d6fc:	4b31      	ldr	r3, [pc, #196]	; (800d7c4 <tcp_parseopt+0xe4>)
 800d6fe:	881b      	ldrh	r3, [r3, #0]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d055      	beq.n	800d7b0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d704:	4b30      	ldr	r3, [pc, #192]	; (800d7c8 <tcp_parseopt+0xe8>)
 800d706:	2200      	movs	r2, #0
 800d708:	801a      	strh	r2, [r3, #0]
 800d70a:	e045      	b.n	800d798 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800d70c:	f7ff ffb2 	bl	800d674 <tcp_get_next_optbyte>
 800d710:	4603      	mov	r3, r0
 800d712:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d714:	7bfb      	ldrb	r3, [r7, #15]
 800d716:	2b02      	cmp	r3, #2
 800d718:	d006      	beq.n	800d728 <tcp_parseopt+0x48>
 800d71a:	2b02      	cmp	r3, #2
 800d71c:	dc2b      	bgt.n	800d776 <tcp_parseopt+0x96>
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d041      	beq.n	800d7a6 <tcp_parseopt+0xc6>
 800d722:	2b01      	cmp	r3, #1
 800d724:	d127      	bne.n	800d776 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800d726:	e037      	b.n	800d798 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d728:	f7ff ffa4 	bl	800d674 <tcp_get_next_optbyte>
 800d72c:	4603      	mov	r3, r0
 800d72e:	2b04      	cmp	r3, #4
 800d730:	d13b      	bne.n	800d7aa <tcp_parseopt+0xca>
 800d732:	4b25      	ldr	r3, [pc, #148]	; (800d7c8 <tcp_parseopt+0xe8>)
 800d734:	881b      	ldrh	r3, [r3, #0]
 800d736:	3301      	adds	r3, #1
 800d738:	4a22      	ldr	r2, [pc, #136]	; (800d7c4 <tcp_parseopt+0xe4>)
 800d73a:	8812      	ldrh	r2, [r2, #0]
 800d73c:	4293      	cmp	r3, r2
 800d73e:	da34      	bge.n	800d7aa <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800d740:	f7ff ff98 	bl	800d674 <tcp_get_next_optbyte>
 800d744:	4603      	mov	r3, r0
 800d746:	b29b      	uxth	r3, r3
 800d748:	021b      	lsls	r3, r3, #8
 800d74a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800d74c:	f7ff ff92 	bl	800d674 <tcp_get_next_optbyte>
 800d750:	4603      	mov	r3, r0
 800d752:	b29a      	uxth	r2, r3
 800d754:	89bb      	ldrh	r3, [r7, #12]
 800d756:	4313      	orrs	r3, r2
 800d758:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d75a:	89bb      	ldrh	r3, [r7, #12]
 800d75c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d760:	d804      	bhi.n	800d76c <tcp_parseopt+0x8c>
 800d762:	89bb      	ldrh	r3, [r7, #12]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d001      	beq.n	800d76c <tcp_parseopt+0x8c>
 800d768:	89ba      	ldrh	r2, [r7, #12]
 800d76a:	e001      	b.n	800d770 <tcp_parseopt+0x90>
 800d76c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800d774:	e010      	b.n	800d798 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800d776:	f7ff ff7d 	bl	800d674 <tcp_get_next_optbyte>
 800d77a:	4603      	mov	r3, r0
 800d77c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800d77e:	7afb      	ldrb	r3, [r7, #11]
 800d780:	2b01      	cmp	r3, #1
 800d782:	d914      	bls.n	800d7ae <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d784:	7afb      	ldrb	r3, [r7, #11]
 800d786:	b29a      	uxth	r2, r3
 800d788:	4b0f      	ldr	r3, [pc, #60]	; (800d7c8 <tcp_parseopt+0xe8>)
 800d78a:	881b      	ldrh	r3, [r3, #0]
 800d78c:	4413      	add	r3, r2
 800d78e:	b29b      	uxth	r3, r3
 800d790:	3b02      	subs	r3, #2
 800d792:	b29a      	uxth	r2, r3
 800d794:	4b0c      	ldr	r3, [pc, #48]	; (800d7c8 <tcp_parseopt+0xe8>)
 800d796:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d798:	4b0b      	ldr	r3, [pc, #44]	; (800d7c8 <tcp_parseopt+0xe8>)
 800d79a:	881a      	ldrh	r2, [r3, #0]
 800d79c:	4b09      	ldr	r3, [pc, #36]	; (800d7c4 <tcp_parseopt+0xe4>)
 800d79e:	881b      	ldrh	r3, [r3, #0]
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d3b3      	bcc.n	800d70c <tcp_parseopt+0x2c>
 800d7a4:	e004      	b.n	800d7b0 <tcp_parseopt+0xd0>
          return;
 800d7a6:	bf00      	nop
 800d7a8:	e002      	b.n	800d7b0 <tcp_parseopt+0xd0>
            return;
 800d7aa:	bf00      	nop
 800d7ac:	e000      	b.n	800d7b0 <tcp_parseopt+0xd0>
            return;
 800d7ae:	bf00      	nop
      }
    }
  }
}
 800d7b0:	3710      	adds	r7, #16
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	080164ac 	.word	0x080164ac
 800d7bc:	08016910 	.word	0x08016910
 800d7c0:	080164f8 	.word	0x080164f8
 800d7c4:	20018c10 	.word	0x20018c10
 800d7c8:	20018c18 	.word	0x20018c18

0800d7cc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d7d0:	4b05      	ldr	r3, [pc, #20]	; (800d7e8 <tcp_trigger_input_pcb_close+0x1c>)
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	f043 0310 	orr.w	r3, r3, #16
 800d7d8:	b2da      	uxtb	r2, r3
 800d7da:	4b03      	ldr	r3, [pc, #12]	; (800d7e8 <tcp_trigger_input_pcb_close+0x1c>)
 800d7dc:	701a      	strb	r2, [r3, #0]
}
 800d7de:	bf00      	nop
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e6:	4770      	bx	lr
 800d7e8:	20018c29 	.word	0x20018c29

0800d7ec <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b084      	sub	sp, #16
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	60f8      	str	r0, [r7, #12]
 800d7f4:	60b9      	str	r1, [r7, #8]
 800d7f6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d00a      	beq.n	800d814 <tcp_route+0x28>
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	7a1b      	ldrb	r3, [r3, #8]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d006      	beq.n	800d814 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	7a1b      	ldrb	r3, [r3, #8]
 800d80a:	4618      	mov	r0, r3
 800d80c:	f7fb fb10 	bl	8008e30 <netif_get_by_index>
 800d810:	4603      	mov	r3, r0
 800d812:	e003      	b.n	800d81c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f005 f845 	bl	80128a4 <ip4_route>
 800d81a:	4603      	mov	r3, r0
  }
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3710      	adds	r7, #16
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800d824:	b590      	push	{r4, r7, lr}
 800d826:	b087      	sub	sp, #28
 800d828:	af00      	add	r7, sp, #0
 800d82a:	60f8      	str	r0, [r7, #12]
 800d82c:	60b9      	str	r1, [r7, #8]
 800d82e:	603b      	str	r3, [r7, #0]
 800d830:	4613      	mov	r3, r2
 800d832:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d105      	bne.n	800d846 <tcp_create_segment+0x22>
 800d83a:	4b44      	ldr	r3, [pc, #272]	; (800d94c <tcp_create_segment+0x128>)
 800d83c:	22a3      	movs	r2, #163	; 0xa3
 800d83e:	4944      	ldr	r1, [pc, #272]	; (800d950 <tcp_create_segment+0x12c>)
 800d840:	4844      	ldr	r0, [pc, #272]	; (800d954 <tcp_create_segment+0x130>)
 800d842:	f006 fd27 	bl	8014294 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d105      	bne.n	800d858 <tcp_create_segment+0x34>
 800d84c:	4b3f      	ldr	r3, [pc, #252]	; (800d94c <tcp_create_segment+0x128>)
 800d84e:	22a4      	movs	r2, #164	; 0xa4
 800d850:	4941      	ldr	r1, [pc, #260]	; (800d958 <tcp_create_segment+0x134>)
 800d852:	4840      	ldr	r0, [pc, #256]	; (800d954 <tcp_create_segment+0x130>)
 800d854:	f006 fd1e 	bl	8014294 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d858:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d85c:	009b      	lsls	r3, r3, #2
 800d85e:	b2db      	uxtb	r3, r3
 800d860:	f003 0304 	and.w	r3, r3, #4
 800d864:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d866:	2003      	movs	r0, #3
 800d868:	f7fa ff4a 	bl	8008700 <memp_malloc>
 800d86c:	6138      	str	r0, [r7, #16]
 800d86e:	693b      	ldr	r3, [r7, #16]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d104      	bne.n	800d87e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d874:	68b8      	ldr	r0, [r7, #8]
 800d876:	f7fb fe69 	bl	800954c <pbuf_free>
    return NULL;
 800d87a:	2300      	movs	r3, #0
 800d87c:	e061      	b.n	800d942 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800d87e:	693b      	ldr	r3, [r7, #16]
 800d880:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d884:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	2200      	movs	r2, #0
 800d88a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	68ba      	ldr	r2, [r7, #8]
 800d890:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	891a      	ldrh	r2, [r3, #8]
 800d896:	7dfb      	ldrb	r3, [r7, #23]
 800d898:	b29b      	uxth	r3, r3
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d205      	bcs.n	800d8aa <tcp_create_segment+0x86>
 800d89e:	4b2b      	ldr	r3, [pc, #172]	; (800d94c <tcp_create_segment+0x128>)
 800d8a0:	22b0      	movs	r2, #176	; 0xb0
 800d8a2:	492e      	ldr	r1, [pc, #184]	; (800d95c <tcp_create_segment+0x138>)
 800d8a4:	482b      	ldr	r0, [pc, #172]	; (800d954 <tcp_create_segment+0x130>)
 800d8a6:	f006 fcf5 	bl	8014294 <iprintf>
  seg->len = p->tot_len - optlen;
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	891a      	ldrh	r2, [r3, #8]
 800d8ae:	7dfb      	ldrb	r3, [r7, #23]
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	1ad3      	subs	r3, r2, r3
 800d8b4:	b29a      	uxth	r2, r3
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d8ba:	2114      	movs	r1, #20
 800d8bc:	68b8      	ldr	r0, [r7, #8]
 800d8be:	f7fb fdaf 	bl	8009420 <pbuf_add_header>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d004      	beq.n	800d8d2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d8c8:	6938      	ldr	r0, [r7, #16]
 800d8ca:	f7fd f8ce 	bl	800aa6a <tcp_seg_free>
    return NULL;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	e037      	b.n	800d942 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	685b      	ldr	r3, [r3, #4]
 800d8d6:	685a      	ldr	r2, [r3, #4]
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	8ada      	ldrh	r2, [r3, #22]
 800d8e0:	693b      	ldr	r3, [r7, #16]
 800d8e2:	68dc      	ldr	r4, [r3, #12]
 800d8e4:	4610      	mov	r0, r2
 800d8e6:	f7fa fa33 	bl	8007d50 <lwip_htons>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	8b1a      	ldrh	r2, [r3, #24]
 800d8f2:	693b      	ldr	r3, [r7, #16]
 800d8f4:	68dc      	ldr	r4, [r3, #12]
 800d8f6:	4610      	mov	r0, r2
 800d8f8:	f7fa fa2a 	bl	8007d50 <lwip_htons>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	68dc      	ldr	r4, [r3, #12]
 800d904:	6838      	ldr	r0, [r7, #0]
 800d906:	f7fa fa38 	bl	8007d7a <lwip_htonl>
 800d90a:	4603      	mov	r3, r0
 800d90c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d90e:	7dfb      	ldrb	r3, [r7, #23]
 800d910:	089b      	lsrs	r3, r3, #2
 800d912:	b2db      	uxtb	r3, r3
 800d914:	b29b      	uxth	r3, r3
 800d916:	3305      	adds	r3, #5
 800d918:	b29b      	uxth	r3, r3
 800d91a:	031b      	lsls	r3, r3, #12
 800d91c:	b29a      	uxth	r2, r3
 800d91e:	79fb      	ldrb	r3, [r7, #7]
 800d920:	b29b      	uxth	r3, r3
 800d922:	4313      	orrs	r3, r2
 800d924:	b29a      	uxth	r2, r3
 800d926:	693b      	ldr	r3, [r7, #16]
 800d928:	68dc      	ldr	r4, [r3, #12]
 800d92a:	4610      	mov	r0, r2
 800d92c:	f7fa fa10 	bl	8007d50 <lwip_htons>
 800d930:	4603      	mov	r3, r0
 800d932:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d934:	693b      	ldr	r3, [r7, #16]
 800d936:	68db      	ldr	r3, [r3, #12]
 800d938:	2200      	movs	r2, #0
 800d93a:	749a      	strb	r2, [r3, #18]
 800d93c:	2200      	movs	r2, #0
 800d93e:	74da      	strb	r2, [r3, #19]
  return seg;
 800d940:	693b      	ldr	r3, [r7, #16]
}
 800d942:	4618      	mov	r0, r3
 800d944:	371c      	adds	r7, #28
 800d946:	46bd      	mov	sp, r7
 800d948:	bd90      	pop	{r4, r7, pc}
 800d94a:	bf00      	nop
 800d94c:	0801692c 	.word	0x0801692c
 800d950:	08016960 	.word	0x08016960
 800d954:	08016980 	.word	0x08016980
 800d958:	080169a8 	.word	0x080169a8
 800d95c:	080169cc 	.word	0x080169cc

0800d960 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800d960:	b590      	push	{r4, r7, lr}
 800d962:	b08b      	sub	sp, #44	; 0x2c
 800d964:	af02      	add	r7, sp, #8
 800d966:	6078      	str	r0, [r7, #4]
 800d968:	460b      	mov	r3, r1
 800d96a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800d96c:	2300      	movs	r3, #0
 800d96e:	61fb      	str	r3, [r7, #28]
 800d970:	2300      	movs	r3, #0
 800d972:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d974:	2300      	movs	r3, #0
 800d976:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d106      	bne.n	800d98c <tcp_split_unsent_seg+0x2c>
 800d97e:	4b95      	ldr	r3, [pc, #596]	; (800dbd4 <tcp_split_unsent_seg+0x274>)
 800d980:	f240 324b 	movw	r2, #843	; 0x34b
 800d984:	4994      	ldr	r1, [pc, #592]	; (800dbd8 <tcp_split_unsent_seg+0x278>)
 800d986:	4895      	ldr	r0, [pc, #596]	; (800dbdc <tcp_split_unsent_seg+0x27c>)
 800d988:	f006 fc84 	bl	8014294 <iprintf>

  useg = pcb->unsent;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d990:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d102      	bne.n	800d99e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800d998:	f04f 33ff 	mov.w	r3, #4294967295
 800d99c:	e116      	b.n	800dbcc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800d99e:	887b      	ldrh	r3, [r7, #2]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d109      	bne.n	800d9b8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d9a4:	4b8b      	ldr	r3, [pc, #556]	; (800dbd4 <tcp_split_unsent_seg+0x274>)
 800d9a6:	f240 3253 	movw	r2, #851	; 0x353
 800d9aa:	498d      	ldr	r1, [pc, #564]	; (800dbe0 <tcp_split_unsent_seg+0x280>)
 800d9ac:	488b      	ldr	r0, [pc, #556]	; (800dbdc <tcp_split_unsent_seg+0x27c>)
 800d9ae:	f006 fc71 	bl	8014294 <iprintf>
    return ERR_VAL;
 800d9b2:	f06f 0305 	mvn.w	r3, #5
 800d9b6:	e109      	b.n	800dbcc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	891b      	ldrh	r3, [r3, #8]
 800d9bc:	887a      	ldrh	r2, [r7, #2]
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d301      	bcc.n	800d9c6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	e102      	b.n	800dbcc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d9ca:	887a      	ldrh	r2, [r7, #2]
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d906      	bls.n	800d9de <tcp_split_unsent_seg+0x7e>
 800d9d0:	4b80      	ldr	r3, [pc, #512]	; (800dbd4 <tcp_split_unsent_seg+0x274>)
 800d9d2:	f240 325b 	movw	r2, #859	; 0x35b
 800d9d6:	4983      	ldr	r1, [pc, #524]	; (800dbe4 <tcp_split_unsent_seg+0x284>)
 800d9d8:	4880      	ldr	r0, [pc, #512]	; (800dbdc <tcp_split_unsent_seg+0x27c>)
 800d9da:	f006 fc5b 	bl	8014294 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	891b      	ldrh	r3, [r3, #8]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d106      	bne.n	800d9f4 <tcp_split_unsent_seg+0x94>
 800d9e6:	4b7b      	ldr	r3, [pc, #492]	; (800dbd4 <tcp_split_unsent_seg+0x274>)
 800d9e8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800d9ec:	497e      	ldr	r1, [pc, #504]	; (800dbe8 <tcp_split_unsent_seg+0x288>)
 800d9ee:	487b      	ldr	r0, [pc, #492]	; (800dbdc <tcp_split_unsent_seg+0x27c>)
 800d9f0:	f006 fc50 	bl	8014294 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	7a9b      	ldrb	r3, [r3, #10]
 800d9f8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d9fa:	7bfb      	ldrb	r3, [r7, #15]
 800d9fc:	009b      	lsls	r3, r3, #2
 800d9fe:	b2db      	uxtb	r3, r3
 800da00:	f003 0304 	and.w	r3, r3, #4
 800da04:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	891a      	ldrh	r2, [r3, #8]
 800da0a:	887b      	ldrh	r3, [r7, #2]
 800da0c:	1ad3      	subs	r3, r2, r3
 800da0e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800da10:	7bbb      	ldrb	r3, [r7, #14]
 800da12:	b29a      	uxth	r2, r3
 800da14:	89bb      	ldrh	r3, [r7, #12]
 800da16:	4413      	add	r3, r2
 800da18:	b29b      	uxth	r3, r3
 800da1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800da1e:	4619      	mov	r1, r3
 800da20:	2036      	movs	r0, #54	; 0x36
 800da22:	f7fb faaf 	bl	8008f84 <pbuf_alloc>
 800da26:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800da28:	693b      	ldr	r3, [r7, #16]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	f000 80b7 	beq.w	800db9e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	685b      	ldr	r3, [r3, #4]
 800da34:	891a      	ldrh	r2, [r3, #8]
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	891b      	ldrh	r3, [r3, #8]
 800da3a:	1ad3      	subs	r3, r2, r3
 800da3c:	b29a      	uxth	r2, r3
 800da3e:	887b      	ldrh	r3, [r7, #2]
 800da40:	4413      	add	r3, r2
 800da42:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	6858      	ldr	r0, [r3, #4]
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	685a      	ldr	r2, [r3, #4]
 800da4c:	7bbb      	ldrb	r3, [r7, #14]
 800da4e:	18d1      	adds	r1, r2, r3
 800da50:	897b      	ldrh	r3, [r7, #10]
 800da52:	89ba      	ldrh	r2, [r7, #12]
 800da54:	f7fb ff80 	bl	8009958 <pbuf_copy_partial>
 800da58:	4603      	mov	r3, r0
 800da5a:	461a      	mov	r2, r3
 800da5c:	89bb      	ldrh	r3, [r7, #12]
 800da5e:	4293      	cmp	r3, r2
 800da60:	f040 809f 	bne.w	800dba2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	68db      	ldr	r3, [r3, #12]
 800da68:	899b      	ldrh	r3, [r3, #12]
 800da6a:	b29b      	uxth	r3, r3
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7fa f96f 	bl	8007d50 <lwip_htons>
 800da72:	4603      	mov	r3, r0
 800da74:	b2db      	uxtb	r3, r3
 800da76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da7a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800da7c:	2300      	movs	r3, #0
 800da7e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800da80:	7efb      	ldrb	r3, [r7, #27]
 800da82:	f003 0308 	and.w	r3, r3, #8
 800da86:	2b00      	cmp	r3, #0
 800da88:	d007      	beq.n	800da9a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800da8a:	7efb      	ldrb	r3, [r7, #27]
 800da8c:	f023 0308 	bic.w	r3, r3, #8
 800da90:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800da92:	7ebb      	ldrb	r3, [r7, #26]
 800da94:	f043 0308 	orr.w	r3, r3, #8
 800da98:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800da9a:	7efb      	ldrb	r3, [r7, #27]
 800da9c:	f003 0301 	and.w	r3, r3, #1
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d007      	beq.n	800dab4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800daa4:	7efb      	ldrb	r3, [r7, #27]
 800daa6:	f023 0301 	bic.w	r3, r3, #1
 800daaa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800daac:	7ebb      	ldrb	r3, [r7, #26]
 800daae:	f043 0301 	orr.w	r3, r3, #1
 800dab2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	68db      	ldr	r3, [r3, #12]
 800dab8:	685b      	ldr	r3, [r3, #4]
 800daba:	4618      	mov	r0, r3
 800dabc:	f7fa f95d 	bl	8007d7a <lwip_htonl>
 800dac0:	4602      	mov	r2, r0
 800dac2:	887b      	ldrh	r3, [r7, #2]
 800dac4:	18d1      	adds	r1, r2, r3
 800dac6:	7eba      	ldrb	r2, [r7, #26]
 800dac8:	7bfb      	ldrb	r3, [r7, #15]
 800daca:	9300      	str	r3, [sp, #0]
 800dacc:	460b      	mov	r3, r1
 800dace:	6939      	ldr	r1, [r7, #16]
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f7ff fea7 	bl	800d824 <tcp_create_segment>
 800dad6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800dad8:	69fb      	ldr	r3, [r7, #28]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d063      	beq.n	800dba6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	685b      	ldr	r3, [r3, #4]
 800dae2:	4618      	mov	r0, r3
 800dae4:	f7fb fdc0 	bl	8009668 <pbuf_clen>
 800dae8:	4603      	mov	r3, r0
 800daea:	461a      	mov	r2, r3
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800daf2:	1a9b      	subs	r3, r3, r2
 800daf4:	b29a      	uxth	r2, r3
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	6858      	ldr	r0, [r3, #4]
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	685b      	ldr	r3, [r3, #4]
 800db04:	891a      	ldrh	r2, [r3, #8]
 800db06:	89bb      	ldrh	r3, [r7, #12]
 800db08:	1ad3      	subs	r3, r2, r3
 800db0a:	b29b      	uxth	r3, r3
 800db0c:	4619      	mov	r1, r3
 800db0e:	f7fb fb97 	bl	8009240 <pbuf_realloc>
  useg->len -= remainder;
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	891a      	ldrh	r2, [r3, #8]
 800db16:	89bb      	ldrh	r3, [r7, #12]
 800db18:	1ad3      	subs	r3, r2, r3
 800db1a:	b29a      	uxth	r2, r3
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	68db      	ldr	r3, [r3, #12]
 800db24:	899b      	ldrh	r3, [r3, #12]
 800db26:	b29c      	uxth	r4, r3
 800db28:	7efb      	ldrb	r3, [r7, #27]
 800db2a:	b29b      	uxth	r3, r3
 800db2c:	4618      	mov	r0, r3
 800db2e:	f7fa f90f 	bl	8007d50 <lwip_htons>
 800db32:	4603      	mov	r3, r0
 800db34:	461a      	mov	r2, r3
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	68db      	ldr	r3, [r3, #12]
 800db3a:	4322      	orrs	r2, r4
 800db3c:	b292      	uxth	r2, r2
 800db3e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	685b      	ldr	r3, [r3, #4]
 800db44:	4618      	mov	r0, r3
 800db46:	f7fb fd8f 	bl	8009668 <pbuf_clen>
 800db4a:	4603      	mov	r3, r0
 800db4c:	461a      	mov	r2, r3
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800db54:	4413      	add	r3, r2
 800db56:	b29a      	uxth	r2, r3
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800db5e:	69fb      	ldr	r3, [r7, #28]
 800db60:	685b      	ldr	r3, [r3, #4]
 800db62:	4618      	mov	r0, r3
 800db64:	f7fb fd80 	bl	8009668 <pbuf_clen>
 800db68:	4603      	mov	r3, r0
 800db6a:	461a      	mov	r2, r3
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800db72:	4413      	add	r3, r2
 800db74:	b29a      	uxth	r2, r3
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	681a      	ldr	r2, [r3, #0]
 800db80:	69fb      	ldr	r3, [r7, #28]
 800db82:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800db84:	697b      	ldr	r3, [r7, #20]
 800db86:	69fa      	ldr	r2, [r7, #28]
 800db88:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800db8a:	69fb      	ldr	r3, [r7, #28]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d103      	bne.n	800db9a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2200      	movs	r2, #0
 800db96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800db9a:	2300      	movs	r3, #0
 800db9c:	e016      	b.n	800dbcc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800db9e:	bf00      	nop
 800dba0:	e002      	b.n	800dba8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800dba2:	bf00      	nop
 800dba4:	e000      	b.n	800dba8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800dba6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800dba8:	69fb      	ldr	r3, [r7, #28]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d006      	beq.n	800dbbc <tcp_split_unsent_seg+0x25c>
 800dbae:	4b09      	ldr	r3, [pc, #36]	; (800dbd4 <tcp_split_unsent_seg+0x274>)
 800dbb0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800dbb4:	490d      	ldr	r1, [pc, #52]	; (800dbec <tcp_split_unsent_seg+0x28c>)
 800dbb6:	4809      	ldr	r0, [pc, #36]	; (800dbdc <tcp_split_unsent_seg+0x27c>)
 800dbb8:	f006 fb6c 	bl	8014294 <iprintf>
  if (p != NULL) {
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d002      	beq.n	800dbc8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800dbc2:	6938      	ldr	r0, [r7, #16]
 800dbc4:	f7fb fcc2 	bl	800954c <pbuf_free>
  }

  return ERR_MEM;
 800dbc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3724      	adds	r7, #36	; 0x24
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd90      	pop	{r4, r7, pc}
 800dbd4:	0801692c 	.word	0x0801692c
 800dbd8:	08016cc0 	.word	0x08016cc0
 800dbdc:	08016980 	.word	0x08016980
 800dbe0:	08016ce4 	.word	0x08016ce4
 800dbe4:	08016d08 	.word	0x08016d08
 800dbe8:	08016d18 	.word	0x08016d18
 800dbec:	08016d28 	.word	0x08016d28

0800dbf0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800dbf0:	b590      	push	{r4, r7, lr}
 800dbf2:	b085      	sub	sp, #20
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d106      	bne.n	800dc0c <tcp_send_fin+0x1c>
 800dbfe:	4b21      	ldr	r3, [pc, #132]	; (800dc84 <tcp_send_fin+0x94>)
 800dc00:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800dc04:	4920      	ldr	r1, [pc, #128]	; (800dc88 <tcp_send_fin+0x98>)
 800dc06:	4821      	ldr	r0, [pc, #132]	; (800dc8c <tcp_send_fin+0x9c>)
 800dc08:	f006 fb44 	bl	8014294 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d02e      	beq.n	800dc72 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc18:	60fb      	str	r3, [r7, #12]
 800dc1a:	e002      	b.n	800dc22 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d1f8      	bne.n	800dc1c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	68db      	ldr	r3, [r3, #12]
 800dc2e:	899b      	ldrh	r3, [r3, #12]
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7fa f88c 	bl	8007d50 <lwip_htons>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	b2db      	uxtb	r3, r3
 800dc3c:	f003 0307 	and.w	r3, r3, #7
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d116      	bne.n	800dc72 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	68db      	ldr	r3, [r3, #12]
 800dc48:	899b      	ldrh	r3, [r3, #12]
 800dc4a:	b29c      	uxth	r4, r3
 800dc4c:	2001      	movs	r0, #1
 800dc4e:	f7fa f87f 	bl	8007d50 <lwip_htons>
 800dc52:	4603      	mov	r3, r0
 800dc54:	461a      	mov	r2, r3
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	68db      	ldr	r3, [r3, #12]
 800dc5a:	4322      	orrs	r2, r4
 800dc5c:	b292      	uxth	r2, r2
 800dc5e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	8b5b      	ldrh	r3, [r3, #26]
 800dc64:	f043 0320 	orr.w	r3, r3, #32
 800dc68:	b29a      	uxth	r2, r3
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	e004      	b.n	800dc7c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800dc72:	2101      	movs	r1, #1
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f000 f80b 	bl	800dc90 <tcp_enqueue_flags>
 800dc7a:	4603      	mov	r3, r0
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3714      	adds	r7, #20
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd90      	pop	{r4, r7, pc}
 800dc84:	0801692c 	.word	0x0801692c
 800dc88:	08016d34 	.word	0x08016d34
 800dc8c:	08016980 	.word	0x08016980

0800dc90 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b08a      	sub	sp, #40	; 0x28
 800dc94:	af02      	add	r7, sp, #8
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	460b      	mov	r3, r1
 800dc9a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800dca0:	2300      	movs	r3, #0
 800dca2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800dca4:	78fb      	ldrb	r3, [r7, #3]
 800dca6:	f003 0303 	and.w	r3, r3, #3
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d106      	bne.n	800dcbc <tcp_enqueue_flags+0x2c>
 800dcae:	4b67      	ldr	r3, [pc, #412]	; (800de4c <tcp_enqueue_flags+0x1bc>)
 800dcb0:	f240 4211 	movw	r2, #1041	; 0x411
 800dcb4:	4966      	ldr	r1, [pc, #408]	; (800de50 <tcp_enqueue_flags+0x1c0>)
 800dcb6:	4867      	ldr	r0, [pc, #412]	; (800de54 <tcp_enqueue_flags+0x1c4>)
 800dcb8:	f006 faec 	bl	8014294 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d106      	bne.n	800dcd0 <tcp_enqueue_flags+0x40>
 800dcc2:	4b62      	ldr	r3, [pc, #392]	; (800de4c <tcp_enqueue_flags+0x1bc>)
 800dcc4:	f240 4213 	movw	r2, #1043	; 0x413
 800dcc8:	4963      	ldr	r1, [pc, #396]	; (800de58 <tcp_enqueue_flags+0x1c8>)
 800dcca:	4862      	ldr	r0, [pc, #392]	; (800de54 <tcp_enqueue_flags+0x1c4>)
 800dccc:	f006 fae2 	bl	8014294 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800dcd0:	78fb      	ldrb	r3, [r7, #3]
 800dcd2:	f003 0302 	and.w	r3, r3, #2
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d001      	beq.n	800dcde <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800dcda:	2301      	movs	r3, #1
 800dcdc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dcde:	7ffb      	ldrb	r3, [r7, #31]
 800dce0:	009b      	lsls	r3, r3, #2
 800dce2:	b2db      	uxtb	r3, r3
 800dce4:	f003 0304 	and.w	r3, r3, #4
 800dce8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800dcea:	7dfb      	ldrb	r3, [r7, #23]
 800dcec:	b29b      	uxth	r3, r3
 800dcee:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dcf2:	4619      	mov	r1, r3
 800dcf4:	2036      	movs	r0, #54	; 0x36
 800dcf6:	f7fb f945 	bl	8008f84 <pbuf_alloc>
 800dcfa:	6138      	str	r0, [r7, #16]
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d109      	bne.n	800dd16 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	8b5b      	ldrh	r3, [r3, #26]
 800dd06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd0a:	b29a      	uxth	r2, r3
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800dd10:	f04f 33ff 	mov.w	r3, #4294967295
 800dd14:	e095      	b.n	800de42 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800dd16:	693b      	ldr	r3, [r7, #16]
 800dd18:	895a      	ldrh	r2, [r3, #10]
 800dd1a:	7dfb      	ldrb	r3, [r7, #23]
 800dd1c:	b29b      	uxth	r3, r3
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d206      	bcs.n	800dd30 <tcp_enqueue_flags+0xa0>
 800dd22:	4b4a      	ldr	r3, [pc, #296]	; (800de4c <tcp_enqueue_flags+0x1bc>)
 800dd24:	f240 4239 	movw	r2, #1081	; 0x439
 800dd28:	494c      	ldr	r1, [pc, #304]	; (800de5c <tcp_enqueue_flags+0x1cc>)
 800dd2a:	484a      	ldr	r0, [pc, #296]	; (800de54 <tcp_enqueue_flags+0x1c4>)
 800dd2c:	f006 fab2 	bl	8014294 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800dd34:	78fa      	ldrb	r2, [r7, #3]
 800dd36:	7ffb      	ldrb	r3, [r7, #31]
 800dd38:	9300      	str	r3, [sp, #0]
 800dd3a:	460b      	mov	r3, r1
 800dd3c:	6939      	ldr	r1, [r7, #16]
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f7ff fd70 	bl	800d824 <tcp_create_segment>
 800dd44:	60f8      	str	r0, [r7, #12]
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d109      	bne.n	800dd60 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	8b5b      	ldrh	r3, [r3, #26]
 800dd50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd54:	b29a      	uxth	r2, r3
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800dd5a:	f04f 33ff 	mov.w	r3, #4294967295
 800dd5e:	e070      	b.n	800de42 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	68db      	ldr	r3, [r3, #12]
 800dd64:	f003 0303 	and.w	r3, r3, #3
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d006      	beq.n	800dd7a <tcp_enqueue_flags+0xea>
 800dd6c:	4b37      	ldr	r3, [pc, #220]	; (800de4c <tcp_enqueue_flags+0x1bc>)
 800dd6e:	f240 4242 	movw	r2, #1090	; 0x442
 800dd72:	493b      	ldr	r1, [pc, #236]	; (800de60 <tcp_enqueue_flags+0x1d0>)
 800dd74:	4837      	ldr	r0, [pc, #220]	; (800de54 <tcp_enqueue_flags+0x1c4>)
 800dd76:	f006 fa8d 	bl	8014294 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	891b      	ldrh	r3, [r3, #8]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d006      	beq.n	800dd90 <tcp_enqueue_flags+0x100>
 800dd82:	4b32      	ldr	r3, [pc, #200]	; (800de4c <tcp_enqueue_flags+0x1bc>)
 800dd84:	f240 4243 	movw	r2, #1091	; 0x443
 800dd88:	4936      	ldr	r1, [pc, #216]	; (800de64 <tcp_enqueue_flags+0x1d4>)
 800dd8a:	4832      	ldr	r0, [pc, #200]	; (800de54 <tcp_enqueue_flags+0x1c4>)
 800dd8c:	f006 fa82 	bl	8014294 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d103      	bne.n	800dda0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	68fa      	ldr	r2, [r7, #12]
 800dd9c:	66da      	str	r2, [r3, #108]	; 0x6c
 800dd9e:	e00d      	b.n	800ddbc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dda4:	61bb      	str	r3, [r7, #24]
 800dda6:	e002      	b.n	800ddae <tcp_enqueue_flags+0x11e>
 800dda8:	69bb      	ldr	r3, [r7, #24]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	61bb      	str	r3, [r7, #24]
 800ddae:	69bb      	ldr	r3, [r7, #24]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d1f8      	bne.n	800dda8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ddb6:	69bb      	ldr	r3, [r7, #24]
 800ddb8:	68fa      	ldr	r2, [r7, #12]
 800ddba:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ddc4:	78fb      	ldrb	r3, [r7, #3]
 800ddc6:	f003 0302 	and.w	r3, r3, #2
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d104      	bne.n	800ddd8 <tcp_enqueue_flags+0x148>
 800ddce:	78fb      	ldrb	r3, [r7, #3]
 800ddd0:	f003 0301 	and.w	r3, r3, #1
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d004      	beq.n	800dde2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dddc:	1c5a      	adds	r2, r3, #1
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800dde2:	78fb      	ldrb	r3, [r7, #3]
 800dde4:	f003 0301 	and.w	r3, r3, #1
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d006      	beq.n	800ddfa <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	8b5b      	ldrh	r3, [r3, #26]
 800ddf0:	f043 0320 	orr.w	r3, r3, #32
 800ddf4:	b29a      	uxth	r2, r3
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	685b      	ldr	r3, [r3, #4]
 800ddfe:	4618      	mov	r0, r3
 800de00:	f7fb fc32 	bl	8009668 <pbuf_clen>
 800de04:	4603      	mov	r3, r0
 800de06:	461a      	mov	r2, r3
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800de0e:	4413      	add	r3, r2
 800de10:	b29a      	uxth	r2, r3
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d00e      	beq.n	800de40 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de26:	2b00      	cmp	r3, #0
 800de28:	d10a      	bne.n	800de40 <tcp_enqueue_flags+0x1b0>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d106      	bne.n	800de40 <tcp_enqueue_flags+0x1b0>
 800de32:	4b06      	ldr	r3, [pc, #24]	; (800de4c <tcp_enqueue_flags+0x1bc>)
 800de34:	f240 4265 	movw	r2, #1125	; 0x465
 800de38:	490b      	ldr	r1, [pc, #44]	; (800de68 <tcp_enqueue_flags+0x1d8>)
 800de3a:	4806      	ldr	r0, [pc, #24]	; (800de54 <tcp_enqueue_flags+0x1c4>)
 800de3c:	f006 fa2a 	bl	8014294 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800de40:	2300      	movs	r3, #0
}
 800de42:	4618      	mov	r0, r3
 800de44:	3720      	adds	r7, #32
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}
 800de4a:	bf00      	nop
 800de4c:	0801692c 	.word	0x0801692c
 800de50:	08016d50 	.word	0x08016d50
 800de54:	08016980 	.word	0x08016980
 800de58:	08016da8 	.word	0x08016da8
 800de5c:	08016dc8 	.word	0x08016dc8
 800de60:	08016e04 	.word	0x08016e04
 800de64:	08016e1c 	.word	0x08016e1c
 800de68:	08016e48 	.word	0x08016e48

0800de6c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800de6c:	b5b0      	push	{r4, r5, r7, lr}
 800de6e:	b08a      	sub	sp, #40	; 0x28
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d106      	bne.n	800de88 <tcp_output+0x1c>
 800de7a:	4b8a      	ldr	r3, [pc, #552]	; (800e0a4 <tcp_output+0x238>)
 800de7c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800de80:	4989      	ldr	r1, [pc, #548]	; (800e0a8 <tcp_output+0x23c>)
 800de82:	488a      	ldr	r0, [pc, #552]	; (800e0ac <tcp_output+0x240>)
 800de84:	f006 fa06 	bl	8014294 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	7d1b      	ldrb	r3, [r3, #20]
 800de8c:	2b01      	cmp	r3, #1
 800de8e:	d106      	bne.n	800de9e <tcp_output+0x32>
 800de90:	4b84      	ldr	r3, [pc, #528]	; (800e0a4 <tcp_output+0x238>)
 800de92:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800de96:	4986      	ldr	r1, [pc, #536]	; (800e0b0 <tcp_output+0x244>)
 800de98:	4884      	ldr	r0, [pc, #528]	; (800e0ac <tcp_output+0x240>)
 800de9a:	f006 f9fb 	bl	8014294 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800de9e:	4b85      	ldr	r3, [pc, #532]	; (800e0b4 <tcp_output+0x248>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	687a      	ldr	r2, [r7, #4]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d101      	bne.n	800deac <tcp_output+0x40>
    return ERR_OK;
 800dea8:	2300      	movs	r3, #0
 800deaa:	e1ce      	b.n	800e24a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800deb8:	4293      	cmp	r3, r2
 800deba:	bf28      	it	cs
 800debc:	4613      	movcs	r3, r2
 800debe:	b29b      	uxth	r3, r3
 800dec0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dec6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800dec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deca:	2b00      	cmp	r3, #0
 800decc:	d10b      	bne.n	800dee6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	8b5b      	ldrh	r3, [r3, #26]
 800ded2:	f003 0302 	and.w	r3, r3, #2
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	f000 81aa 	beq.w	800e230 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f000 fdcb 	bl	800ea78 <tcp_send_empty_ack>
 800dee2:	4603      	mov	r3, r0
 800dee4:	e1b1      	b.n	800e24a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800dee6:	6879      	ldr	r1, [r7, #4]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	3304      	adds	r3, #4
 800deec:	461a      	mov	r2, r3
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f7ff fc7c 	bl	800d7ec <tcp_route>
 800def4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d102      	bne.n	800df02 <tcp_output+0x96>
    return ERR_RTE;
 800defc:	f06f 0303 	mvn.w	r3, #3
 800df00:	e1a3      	b.n	800e24a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d003      	beq.n	800df10 <tcp_output+0xa4>
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d111      	bne.n	800df34 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d002      	beq.n	800df1c <tcp_output+0xb0>
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	3304      	adds	r3, #4
 800df1a:	e000      	b.n	800df1e <tcp_output+0xb2>
 800df1c:	2300      	movs	r3, #0
 800df1e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800df20:	693b      	ldr	r3, [r7, #16]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d102      	bne.n	800df2c <tcp_output+0xc0>
      return ERR_RTE;
 800df26:	f06f 0303 	mvn.w	r3, #3
 800df2a:	e18e      	b.n	800e24a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800df2c:	693b      	ldr	r3, [r7, #16]
 800df2e:	681a      	ldr	r2, [r3, #0]
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800df34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df36:	68db      	ldr	r3, [r3, #12]
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7f9 ff1d 	bl	8007d7a <lwip_htonl>
 800df40:	4602      	mov	r2, r0
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df46:	1ad3      	subs	r3, r2, r3
 800df48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df4a:	8912      	ldrh	r2, [r2, #8]
 800df4c:	4413      	add	r3, r2
 800df4e:	69ba      	ldr	r2, [r7, #24]
 800df50:	429a      	cmp	r2, r3
 800df52:	d227      	bcs.n	800dfa4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800df5a:	461a      	mov	r2, r3
 800df5c:	69bb      	ldr	r3, [r7, #24]
 800df5e:	4293      	cmp	r3, r2
 800df60:	d114      	bne.n	800df8c <tcp_output+0x120>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df66:	2b00      	cmp	r3, #0
 800df68:	d110      	bne.n	800df8c <tcp_output+0x120>
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800df70:	2b00      	cmp	r3, #0
 800df72:	d10b      	bne.n	800df8c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2200      	movs	r2, #0
 800df78:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2201      	movs	r2, #1
 800df80:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2200      	movs	r2, #0
 800df88:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	8b5b      	ldrh	r3, [r3, #26]
 800df90:	f003 0302 	and.w	r3, r3, #2
 800df94:	2b00      	cmp	r3, #0
 800df96:	f000 814d 	beq.w	800e234 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f000 fd6c 	bl	800ea78 <tcp_send_empty_ack>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	e152      	b.n	800e24a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfb0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800dfb2:	6a3b      	ldr	r3, [r7, #32]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	f000 811c 	beq.w	800e1f2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800dfba:	e002      	b.n	800dfc2 <tcp_output+0x156>
 800dfbc:	6a3b      	ldr	r3, [r7, #32]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	623b      	str	r3, [r7, #32]
 800dfc2:	6a3b      	ldr	r3, [r7, #32]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d1f8      	bne.n	800dfbc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800dfca:	e112      	b.n	800e1f2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800dfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfce:	68db      	ldr	r3, [r3, #12]
 800dfd0:	899b      	ldrh	r3, [r3, #12]
 800dfd2:	b29b      	uxth	r3, r3
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f7f9 febb 	bl	8007d50 <lwip_htons>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	b2db      	uxtb	r3, r3
 800dfde:	f003 0304 	and.w	r3, r3, #4
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d006      	beq.n	800dff4 <tcp_output+0x188>
 800dfe6:	4b2f      	ldr	r3, [pc, #188]	; (800e0a4 <tcp_output+0x238>)
 800dfe8:	f240 5236 	movw	r2, #1334	; 0x536
 800dfec:	4932      	ldr	r1, [pc, #200]	; (800e0b8 <tcp_output+0x24c>)
 800dfee:	482f      	ldr	r0, [pc, #188]	; (800e0ac <tcp_output+0x240>)
 800dff0:	f006 f950 	bl	8014294 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d01f      	beq.n	800e03c <tcp_output+0x1d0>
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	8b5b      	ldrh	r3, [r3, #26]
 800e000:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e004:	2b00      	cmp	r3, #0
 800e006:	d119      	bne.n	800e03c <tcp_output+0x1d0>
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d00b      	beq.n	800e028 <tcp_output+0x1bc>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d110      	bne.n	800e03c <tcp_output+0x1d0>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e01e:	891a      	ldrh	r2, [r3, #8]
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e024:	429a      	cmp	r2, r3
 800e026:	d209      	bcs.n	800e03c <tcp_output+0x1d0>
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d004      	beq.n	800e03c <tcp_output+0x1d0>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e038:	2b08      	cmp	r3, #8
 800e03a:	d901      	bls.n	800e040 <tcp_output+0x1d4>
 800e03c:	2301      	movs	r3, #1
 800e03e:	e000      	b.n	800e042 <tcp_output+0x1d6>
 800e040:	2300      	movs	r3, #0
 800e042:	2b00      	cmp	r3, #0
 800e044:	d106      	bne.n	800e054 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	8b5b      	ldrh	r3, [r3, #26]
 800e04a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e04e:	2b00      	cmp	r3, #0
 800e050:	f000 80e4 	beq.w	800e21c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	7d1b      	ldrb	r3, [r3, #20]
 800e058:	2b02      	cmp	r3, #2
 800e05a:	d00d      	beq.n	800e078 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e05e:	68db      	ldr	r3, [r3, #12]
 800e060:	899b      	ldrh	r3, [r3, #12]
 800e062:	b29c      	uxth	r4, r3
 800e064:	2010      	movs	r0, #16
 800e066:	f7f9 fe73 	bl	8007d50 <lwip_htons>
 800e06a:	4603      	mov	r3, r0
 800e06c:	461a      	mov	r2, r3
 800e06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e070:	68db      	ldr	r3, [r3, #12]
 800e072:	4322      	orrs	r2, r4
 800e074:	b292      	uxth	r2, r2
 800e076:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e078:	697a      	ldr	r2, [r7, #20]
 800e07a:	6879      	ldr	r1, [r7, #4]
 800e07c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e07e:	f000 f909 	bl	800e294 <tcp_output_segment>
 800e082:	4603      	mov	r3, r0
 800e084:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d016      	beq.n	800e0bc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	8b5b      	ldrh	r3, [r3, #26]
 800e092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e096:	b29a      	uxth	r2, r3
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	835a      	strh	r2, [r3, #26]
      return err;
 800e09c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0a0:	e0d3      	b.n	800e24a <tcp_output+0x3de>
 800e0a2:	bf00      	nop
 800e0a4:	0801692c 	.word	0x0801692c
 800e0a8:	08016e70 	.word	0x08016e70
 800e0ac:	08016980 	.word	0x08016980
 800e0b0:	08016e88 	.word	0x08016e88
 800e0b4:	20018c30 	.word	0x20018c30
 800e0b8:	08016eb0 	.word	0x08016eb0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0be:	681a      	ldr	r2, [r3, #0]
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	7d1b      	ldrb	r3, [r3, #20]
 800e0c8:	2b02      	cmp	r3, #2
 800e0ca:	d006      	beq.n	800e0da <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	8b5b      	ldrh	r3, [r3, #26]
 800e0d0:	f023 0303 	bic.w	r3, r3, #3
 800e0d4:	b29a      	uxth	r2, r3
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0dc:	68db      	ldr	r3, [r3, #12]
 800e0de:	685b      	ldr	r3, [r3, #4]
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7f9 fe4a 	bl	8007d7a <lwip_htonl>
 800e0e6:	4604      	mov	r4, r0
 800e0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ea:	891b      	ldrh	r3, [r3, #8]
 800e0ec:	461d      	mov	r5, r3
 800e0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f0:	68db      	ldr	r3, [r3, #12]
 800e0f2:	899b      	ldrh	r3, [r3, #12]
 800e0f4:	b29b      	uxth	r3, r3
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f7f9 fe2a 	bl	8007d50 <lwip_htons>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	b2db      	uxtb	r3, r3
 800e100:	f003 0303 	and.w	r3, r3, #3
 800e104:	2b00      	cmp	r3, #0
 800e106:	d001      	beq.n	800e10c <tcp_output+0x2a0>
 800e108:	2301      	movs	r3, #1
 800e10a:	e000      	b.n	800e10e <tcp_output+0x2a2>
 800e10c:	2300      	movs	r3, #0
 800e10e:	442b      	add	r3, r5
 800e110:	4423      	add	r3, r4
 800e112:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	1ad3      	subs	r3, r2, r3
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	da02      	bge.n	800e126 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	68ba      	ldr	r2, [r7, #8]
 800e124:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e128:	891b      	ldrh	r3, [r3, #8]
 800e12a:	461c      	mov	r4, r3
 800e12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e12e:	68db      	ldr	r3, [r3, #12]
 800e130:	899b      	ldrh	r3, [r3, #12]
 800e132:	b29b      	uxth	r3, r3
 800e134:	4618      	mov	r0, r3
 800e136:	f7f9 fe0b 	bl	8007d50 <lwip_htons>
 800e13a:	4603      	mov	r3, r0
 800e13c:	b2db      	uxtb	r3, r3
 800e13e:	f003 0303 	and.w	r3, r3, #3
 800e142:	2b00      	cmp	r3, #0
 800e144:	d001      	beq.n	800e14a <tcp_output+0x2de>
 800e146:	2301      	movs	r3, #1
 800e148:	e000      	b.n	800e14c <tcp_output+0x2e0>
 800e14a:	2300      	movs	r3, #0
 800e14c:	4423      	add	r3, r4
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d049      	beq.n	800e1e6 <tcp_output+0x37a>
      seg->next = NULL;
 800e152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e154:	2200      	movs	r2, #0
 800e156:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d105      	bne.n	800e16c <tcp_output+0x300>
        pcb->unacked = seg;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e164:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800e166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e168:	623b      	str	r3, [r7, #32]
 800e16a:	e03f      	b.n	800e1ec <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16e:	68db      	ldr	r3, [r3, #12]
 800e170:	685b      	ldr	r3, [r3, #4]
 800e172:	4618      	mov	r0, r3
 800e174:	f7f9 fe01 	bl	8007d7a <lwip_htonl>
 800e178:	4604      	mov	r4, r0
 800e17a:	6a3b      	ldr	r3, [r7, #32]
 800e17c:	68db      	ldr	r3, [r3, #12]
 800e17e:	685b      	ldr	r3, [r3, #4]
 800e180:	4618      	mov	r0, r3
 800e182:	f7f9 fdfa 	bl	8007d7a <lwip_htonl>
 800e186:	4603      	mov	r3, r0
 800e188:	1ae3      	subs	r3, r4, r3
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	da24      	bge.n	800e1d8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	3370      	adds	r3, #112	; 0x70
 800e192:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e194:	e002      	b.n	800e19c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e196:	69fb      	ldr	r3, [r7, #28]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e19c:	69fb      	ldr	r3, [r7, #28]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d011      	beq.n	800e1c8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e1a4:	69fb      	ldr	r3, [r7, #28]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	68db      	ldr	r3, [r3, #12]
 800e1aa:	685b      	ldr	r3, [r3, #4]
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f7f9 fde4 	bl	8007d7a <lwip_htonl>
 800e1b2:	4604      	mov	r4, r0
 800e1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b6:	68db      	ldr	r3, [r3, #12]
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7f9 fddd 	bl	8007d7a <lwip_htonl>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	dbe6      	blt.n	800e196 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e1c8:	69fb      	ldr	r3, [r7, #28]
 800e1ca:	681a      	ldr	r2, [r3, #0]
 800e1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ce:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1d4:	601a      	str	r2, [r3, #0]
 800e1d6:	e009      	b.n	800e1ec <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e1d8:	6a3b      	ldr	r3, [r7, #32]
 800e1da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1dc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e1de:	6a3b      	ldr	r3, [r7, #32]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	623b      	str	r3, [r7, #32]
 800e1e4:	e002      	b.n	800e1ec <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e1e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1e8:	f7fc fc3f 	bl	800aa6a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1f0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800e1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d012      	beq.n	800e21e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fa:	68db      	ldr	r3, [r3, #12]
 800e1fc:	685b      	ldr	r3, [r3, #4]
 800e1fe:	4618      	mov	r0, r3
 800e200:	f7f9 fdbb 	bl	8007d7a <lwip_htonl>
 800e204:	4602      	mov	r2, r0
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e20a:	1ad3      	subs	r3, r2, r3
 800e20c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e20e:	8912      	ldrh	r2, [r2, #8]
 800e210:	4413      	add	r3, r2
  while (seg != NULL &&
 800e212:	69ba      	ldr	r2, [r7, #24]
 800e214:	429a      	cmp	r2, r3
 800e216:	f4bf aed9 	bcs.w	800dfcc <tcp_output+0x160>
 800e21a:	e000      	b.n	800e21e <tcp_output+0x3b2>
      break;
 800e21c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e222:	2b00      	cmp	r3, #0
 800e224:	d108      	bne.n	800e238 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2200      	movs	r2, #0
 800e22a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800e22e:	e004      	b.n	800e23a <tcp_output+0x3ce>
    goto output_done;
 800e230:	bf00      	nop
 800e232:	e002      	b.n	800e23a <tcp_output+0x3ce>
    goto output_done;
 800e234:	bf00      	nop
 800e236:	e000      	b.n	800e23a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e238:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	8b5b      	ldrh	r3, [r3, #26]
 800e23e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e242:	b29a      	uxth	r2, r3
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e248:	2300      	movs	r3, #0
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3728      	adds	r7, #40	; 0x28
 800e24e:	46bd      	mov	sp, r7
 800e250:	bdb0      	pop	{r4, r5, r7, pc}
 800e252:	bf00      	nop

0800e254 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b082      	sub	sp, #8
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d106      	bne.n	800e270 <tcp_output_segment_busy+0x1c>
 800e262:	4b09      	ldr	r3, [pc, #36]	; (800e288 <tcp_output_segment_busy+0x34>)
 800e264:	f240 529a 	movw	r2, #1434	; 0x59a
 800e268:	4908      	ldr	r1, [pc, #32]	; (800e28c <tcp_output_segment_busy+0x38>)
 800e26a:	4809      	ldr	r0, [pc, #36]	; (800e290 <tcp_output_segment_busy+0x3c>)
 800e26c:	f006 f812 	bl	8014294 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	685b      	ldr	r3, [r3, #4]
 800e274:	7b9b      	ldrb	r3, [r3, #14]
 800e276:	2b01      	cmp	r3, #1
 800e278:	d001      	beq.n	800e27e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e27a:	2301      	movs	r3, #1
 800e27c:	e000      	b.n	800e280 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e27e:	2300      	movs	r3, #0
}
 800e280:	4618      	mov	r0, r3
 800e282:	3708      	adds	r7, #8
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}
 800e288:	0801692c 	.word	0x0801692c
 800e28c:	08016ec8 	.word	0x08016ec8
 800e290:	08016980 	.word	0x08016980

0800e294 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e294:	b5b0      	push	{r4, r5, r7, lr}
 800e296:	b08c      	sub	sp, #48	; 0x30
 800e298:	af04      	add	r7, sp, #16
 800e29a:	60f8      	str	r0, [r7, #12]
 800e29c:	60b9      	str	r1, [r7, #8]
 800e29e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d106      	bne.n	800e2b4 <tcp_output_segment+0x20>
 800e2a6:	4b63      	ldr	r3, [pc, #396]	; (800e434 <tcp_output_segment+0x1a0>)
 800e2a8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800e2ac:	4962      	ldr	r1, [pc, #392]	; (800e438 <tcp_output_segment+0x1a4>)
 800e2ae:	4863      	ldr	r0, [pc, #396]	; (800e43c <tcp_output_segment+0x1a8>)
 800e2b0:	f005 fff0 	bl	8014294 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d106      	bne.n	800e2c8 <tcp_output_segment+0x34>
 800e2ba:	4b5e      	ldr	r3, [pc, #376]	; (800e434 <tcp_output_segment+0x1a0>)
 800e2bc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800e2c0:	495f      	ldr	r1, [pc, #380]	; (800e440 <tcp_output_segment+0x1ac>)
 800e2c2:	485e      	ldr	r0, [pc, #376]	; (800e43c <tcp_output_segment+0x1a8>)
 800e2c4:	f005 ffe6 	bl	8014294 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d106      	bne.n	800e2dc <tcp_output_segment+0x48>
 800e2ce:	4b59      	ldr	r3, [pc, #356]	; (800e434 <tcp_output_segment+0x1a0>)
 800e2d0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800e2d4:	495b      	ldr	r1, [pc, #364]	; (800e444 <tcp_output_segment+0x1b0>)
 800e2d6:	4859      	ldr	r0, [pc, #356]	; (800e43c <tcp_output_segment+0x1a8>)
 800e2d8:	f005 ffdc 	bl	8014294 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e2dc:	68f8      	ldr	r0, [r7, #12]
 800e2de:	f7ff ffb9 	bl	800e254 <tcp_output_segment_busy>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d001      	beq.n	800e2ec <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	e09f      	b.n	800e42c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	68dc      	ldr	r4, [r3, #12]
 800e2f4:	4610      	mov	r0, r2
 800e2f6:	f7f9 fd40 	bl	8007d7a <lwip_htonl>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	68dc      	ldr	r4, [r3, #12]
 800e306:	4610      	mov	r0, r2
 800e308:	f7f9 fd22 	bl	8007d50 <lwip_htons>
 800e30c:	4603      	mov	r3, r0
 800e30e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e314:	68ba      	ldr	r2, [r7, #8]
 800e316:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e318:	441a      	add	r2, r3
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	68db      	ldr	r3, [r3, #12]
 800e322:	3314      	adds	r3, #20
 800e324:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	7a9b      	ldrb	r3, [r3, #10]
 800e32a:	f003 0301 	and.w	r3, r3, #1
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d015      	beq.n	800e35e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e332:	68bb      	ldr	r3, [r7, #8]
 800e334:	3304      	adds	r3, #4
 800e336:	461a      	mov	r2, r3
 800e338:	6879      	ldr	r1, [r7, #4]
 800e33a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e33e:	f7fc fe8b 	bl	800b058 <tcp_eff_send_mss_netif>
 800e342:	4603      	mov	r3, r0
 800e344:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e346:	8b7b      	ldrh	r3, [r7, #26]
 800e348:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800e34c:	4618      	mov	r0, r3
 800e34e:	f7f9 fd14 	bl	8007d7a <lwip_htonl>
 800e352:	4602      	mov	r2, r0
 800e354:	69fb      	ldr	r3, [r7, #28]
 800e356:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e358:	69fb      	ldr	r3, [r7, #28]
 800e35a:	3304      	adds	r3, #4
 800e35c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e364:	2b00      	cmp	r3, #0
 800e366:	da02      	bge.n	800e36e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	2200      	movs	r2, #0
 800e36c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e372:	2b00      	cmp	r3, #0
 800e374:	d10c      	bne.n	800e390 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e376:	4b34      	ldr	r3, [pc, #208]	; (800e448 <tcp_output_segment+0x1b4>)
 800e378:	681a      	ldr	r2, [r3, #0]
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	68db      	ldr	r3, [r3, #12]
 800e382:	685b      	ldr	r3, [r3, #4]
 800e384:	4618      	mov	r0, r3
 800e386:	f7f9 fcf8 	bl	8007d7a <lwip_htonl>
 800e38a:	4602      	mov	r2, r0
 800e38c:	68bb      	ldr	r3, [r7, #8]
 800e38e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	68da      	ldr	r2, [r3, #12]
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	685b      	ldr	r3, [r3, #4]
 800e39a:	1ad3      	subs	r3, r2, r3
 800e39c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	685b      	ldr	r3, [r3, #4]
 800e3a2:	8959      	ldrh	r1, [r3, #10]
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	685b      	ldr	r3, [r3, #4]
 800e3a8:	8b3a      	ldrh	r2, [r7, #24]
 800e3aa:	1a8a      	subs	r2, r1, r2
 800e3ac:	b292      	uxth	r2, r2
 800e3ae:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	8919      	ldrh	r1, [r3, #8]
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	685b      	ldr	r3, [r3, #4]
 800e3ba:	8b3a      	ldrh	r2, [r7, #24]
 800e3bc:	1a8a      	subs	r2, r1, r2
 800e3be:	b292      	uxth	r2, r2
 800e3c0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	685b      	ldr	r3, [r3, #4]
 800e3c6:	68fa      	ldr	r2, [r7, #12]
 800e3c8:	68d2      	ldr	r2, [r2, #12]
 800e3ca:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	68db      	ldr	r3, [r3, #12]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	741a      	strb	r2, [r3, #16]
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	68db      	ldr	r3, [r3, #12]
 800e3dc:	f103 0214 	add.w	r2, r3, #20
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	7a9b      	ldrb	r3, [r3, #10]
 800e3e4:	009b      	lsls	r3, r3, #2
 800e3e6:	f003 0304 	and.w	r3, r3, #4
 800e3ea:	4413      	add	r3, r2
 800e3ec:	69fa      	ldr	r2, [r7, #28]
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	d006      	beq.n	800e400 <tcp_output_segment+0x16c>
 800e3f2:	4b10      	ldr	r3, [pc, #64]	; (800e434 <tcp_output_segment+0x1a0>)
 800e3f4:	f240 621c 	movw	r2, #1564	; 0x61c
 800e3f8:	4914      	ldr	r1, [pc, #80]	; (800e44c <tcp_output_segment+0x1b8>)
 800e3fa:	4810      	ldr	r0, [pc, #64]	; (800e43c <tcp_output_segment+0x1a8>)
 800e3fc:	f005 ff4a 	bl	8014294 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	6858      	ldr	r0, [r3, #4]
 800e404:	68b9      	ldr	r1, [r7, #8]
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	1d1c      	adds	r4, r3, #4
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	7add      	ldrb	r5, [r3, #11]
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	7a9b      	ldrb	r3, [r3, #10]
 800e412:	687a      	ldr	r2, [r7, #4]
 800e414:	9202      	str	r2, [sp, #8]
 800e416:	2206      	movs	r2, #6
 800e418:	9201      	str	r2, [sp, #4]
 800e41a:	9300      	str	r3, [sp, #0]
 800e41c:	462b      	mov	r3, r5
 800e41e:	4622      	mov	r2, r4
 800e420:	f004 fc1c 	bl	8012c5c <ip4_output_if>
 800e424:	4603      	mov	r3, r0
 800e426:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e428:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3720      	adds	r7, #32
 800e430:	46bd      	mov	sp, r7
 800e432:	bdb0      	pop	{r4, r5, r7, pc}
 800e434:	0801692c 	.word	0x0801692c
 800e438:	08016ef0 	.word	0x08016ef0
 800e43c:	08016980 	.word	0x08016980
 800e440:	08016f10 	.word	0x08016f10
 800e444:	08016f30 	.word	0x08016f30
 800e448:	20018be4 	.word	0x20018be4
 800e44c:	08016f54 	.word	0x08016f54

0800e450 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e450:	b5b0      	push	{r4, r5, r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d106      	bne.n	800e46c <tcp_rexmit_rto_prepare+0x1c>
 800e45e:	4b31      	ldr	r3, [pc, #196]	; (800e524 <tcp_rexmit_rto_prepare+0xd4>)
 800e460:	f240 6263 	movw	r2, #1635	; 0x663
 800e464:	4930      	ldr	r1, [pc, #192]	; (800e528 <tcp_rexmit_rto_prepare+0xd8>)
 800e466:	4831      	ldr	r0, [pc, #196]	; (800e52c <tcp_rexmit_rto_prepare+0xdc>)
 800e468:	f005 ff14 	bl	8014294 <iprintf>

  if (pcb->unacked == NULL) {
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e470:	2b00      	cmp	r3, #0
 800e472:	d102      	bne.n	800e47a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e474:	f06f 0305 	mvn.w	r3, #5
 800e478:	e050      	b.n	800e51c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e47e:	60fb      	str	r3, [r7, #12]
 800e480:	e00b      	b.n	800e49a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e482:	68f8      	ldr	r0, [r7, #12]
 800e484:	f7ff fee6 	bl	800e254 <tcp_output_segment_busy>
 800e488:	4603      	mov	r3, r0
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d002      	beq.n	800e494 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e48e:	f06f 0305 	mvn.w	r3, #5
 800e492:	e043      	b.n	800e51c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	60fb      	str	r3, [r7, #12]
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d1ef      	bne.n	800e482 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e4a2:	68f8      	ldr	r0, [r7, #12]
 800e4a4:	f7ff fed6 	bl	800e254 <tcp_output_segment_busy>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d002      	beq.n	800e4b4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e4ae:	f06f 0305 	mvn.w	r3, #5
 800e4b2:	e033      	b.n	800e51c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	8b5b      	ldrh	r3, [r3, #26]
 800e4ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e4d2:	b29a      	uxth	r2, r3
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	68db      	ldr	r3, [r3, #12]
 800e4dc:	685b      	ldr	r3, [r3, #4]
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7f9 fc4b 	bl	8007d7a <lwip_htonl>
 800e4e4:	4604      	mov	r4, r0
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	891b      	ldrh	r3, [r3, #8]
 800e4ea:	461d      	mov	r5, r3
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	68db      	ldr	r3, [r3, #12]
 800e4f0:	899b      	ldrh	r3, [r3, #12]
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7f9 fc2b 	bl	8007d50 <lwip_htons>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	b2db      	uxtb	r3, r3
 800e4fe:	f003 0303 	and.w	r3, r3, #3
 800e502:	2b00      	cmp	r3, #0
 800e504:	d001      	beq.n	800e50a <tcp_rexmit_rto_prepare+0xba>
 800e506:	2301      	movs	r3, #1
 800e508:	e000      	b.n	800e50c <tcp_rexmit_rto_prepare+0xbc>
 800e50a:	2300      	movs	r3, #0
 800e50c:	442b      	add	r3, r5
 800e50e:	18e2      	adds	r2, r4, r3
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2200      	movs	r2, #0
 800e518:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800e51a:	2300      	movs	r3, #0
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3710      	adds	r7, #16
 800e520:	46bd      	mov	sp, r7
 800e522:	bdb0      	pop	{r4, r5, r7, pc}
 800e524:	0801692c 	.word	0x0801692c
 800e528:	08016f68 	.word	0x08016f68
 800e52c:	08016980 	.word	0x08016980

0800e530 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b082      	sub	sp, #8
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d106      	bne.n	800e54c <tcp_rexmit_rto_commit+0x1c>
 800e53e:	4b0d      	ldr	r3, [pc, #52]	; (800e574 <tcp_rexmit_rto_commit+0x44>)
 800e540:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e544:	490c      	ldr	r1, [pc, #48]	; (800e578 <tcp_rexmit_rto_commit+0x48>)
 800e546:	480d      	ldr	r0, [pc, #52]	; (800e57c <tcp_rexmit_rto_commit+0x4c>)
 800e548:	f005 fea4 	bl	8014294 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e552:	2bff      	cmp	r3, #255	; 0xff
 800e554:	d007      	beq.n	800e566 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e55c:	3301      	adds	r3, #1
 800e55e:	b2da      	uxtb	r2, r3
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f7ff fc80 	bl	800de6c <tcp_output>
}
 800e56c:	bf00      	nop
 800e56e:	3708      	adds	r7, #8
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}
 800e574:	0801692c 	.word	0x0801692c
 800e578:	08016f8c 	.word	0x08016f8c
 800e57c:	08016980 	.word	0x08016980

0800e580 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b082      	sub	sp, #8
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d106      	bne.n	800e59c <tcp_rexmit_rto+0x1c>
 800e58e:	4b0a      	ldr	r3, [pc, #40]	; (800e5b8 <tcp_rexmit_rto+0x38>)
 800e590:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800e594:	4909      	ldr	r1, [pc, #36]	; (800e5bc <tcp_rexmit_rto+0x3c>)
 800e596:	480a      	ldr	r0, [pc, #40]	; (800e5c0 <tcp_rexmit_rto+0x40>)
 800e598:	f005 fe7c 	bl	8014294 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f7ff ff57 	bl	800e450 <tcp_rexmit_rto_prepare>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d102      	bne.n	800e5ae <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f7ff ffc1 	bl	800e530 <tcp_rexmit_rto_commit>
  }
}
 800e5ae:	bf00      	nop
 800e5b0:	3708      	adds	r7, #8
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}
 800e5b6:	bf00      	nop
 800e5b8:	0801692c 	.word	0x0801692c
 800e5bc:	08016fb0 	.word	0x08016fb0
 800e5c0:	08016980 	.word	0x08016980

0800e5c4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e5c4:	b590      	push	{r4, r7, lr}
 800e5c6:	b085      	sub	sp, #20
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d106      	bne.n	800e5e0 <tcp_rexmit+0x1c>
 800e5d2:	4b2f      	ldr	r3, [pc, #188]	; (800e690 <tcp_rexmit+0xcc>)
 800e5d4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800e5d8:	492e      	ldr	r1, [pc, #184]	; (800e694 <tcp_rexmit+0xd0>)
 800e5da:	482f      	ldr	r0, [pc, #188]	; (800e698 <tcp_rexmit+0xd4>)
 800e5dc:	f005 fe5a 	bl	8014294 <iprintf>

  if (pcb->unacked == NULL) {
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d102      	bne.n	800e5ee <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e5e8:	f06f 0305 	mvn.w	r3, #5
 800e5ec:	e04c      	b.n	800e688 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5f2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e5f4:	68b8      	ldr	r0, [r7, #8]
 800e5f6:	f7ff fe2d 	bl	800e254 <tcp_output_segment_busy>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d002      	beq.n	800e606 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e600:	f06f 0305 	mvn.w	r3, #5
 800e604:	e040      	b.n	800e688 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	681a      	ldr	r2, [r3, #0]
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	336c      	adds	r3, #108	; 0x6c
 800e612:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e614:	e002      	b.n	800e61c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d011      	beq.n	800e648 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	68db      	ldr	r3, [r3, #12]
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	4618      	mov	r0, r3
 800e62e:	f7f9 fba4 	bl	8007d7a <lwip_htonl>
 800e632:	4604      	mov	r4, r0
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	68db      	ldr	r3, [r3, #12]
 800e638:	685b      	ldr	r3, [r3, #4]
 800e63a:	4618      	mov	r0, r3
 800e63c:	f7f9 fb9d 	bl	8007d7a <lwip_htonl>
 800e640:	4603      	mov	r3, r0
 800e642:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e644:	2b00      	cmp	r3, #0
 800e646:	dbe6      	blt.n	800e616 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	681a      	ldr	r2, [r3, #0]
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	68ba      	ldr	r2, [r7, #8]
 800e654:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d103      	bne.n	800e666 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2200      	movs	r2, #0
 800e662:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e66c:	2bff      	cmp	r3, #255	; 0xff
 800e66e:	d007      	beq.n	800e680 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e676:	3301      	adds	r3, #1
 800e678:	b2da      	uxtb	r2, r3
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2200      	movs	r2, #0
 800e684:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e686:	2300      	movs	r3, #0
}
 800e688:	4618      	mov	r0, r3
 800e68a:	3714      	adds	r7, #20
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd90      	pop	{r4, r7, pc}
 800e690:	0801692c 	.word	0x0801692c
 800e694:	08016fcc 	.word	0x08016fcc
 800e698:	08016980 	.word	0x08016980

0800e69c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b082      	sub	sp, #8
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d106      	bne.n	800e6b8 <tcp_rexmit_fast+0x1c>
 800e6aa:	4b2a      	ldr	r3, [pc, #168]	; (800e754 <tcp_rexmit_fast+0xb8>)
 800e6ac:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800e6b0:	4929      	ldr	r1, [pc, #164]	; (800e758 <tcp_rexmit_fast+0xbc>)
 800e6b2:	482a      	ldr	r0, [pc, #168]	; (800e75c <tcp_rexmit_fast+0xc0>)
 800e6b4:	f005 fdee 	bl	8014294 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d044      	beq.n	800e74a <tcp_rexmit_fast+0xae>
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	8b5b      	ldrh	r3, [r3, #26]
 800e6c4:	f003 0304 	and.w	r3, r3, #4
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d13e      	bne.n	800e74a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f7ff ff79 	bl	800e5c4 <tcp_rexmit>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d138      	bne.n	800e74a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e6e4:	4293      	cmp	r3, r2
 800e6e6:	bf28      	it	cs
 800e6e8:	4613      	movcs	r3, r2
 800e6ea:	b29b      	uxth	r3, r3
 800e6ec:	0fda      	lsrs	r2, r3, #31
 800e6ee:	4413      	add	r3, r2
 800e6f0:	105b      	asrs	r3, r3, #1
 800e6f2:	b29a      	uxth	r2, r3
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e700:	461a      	mov	r2, r3
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e706:	005b      	lsls	r3, r3, #1
 800e708:	429a      	cmp	r2, r3
 800e70a:	d206      	bcs.n	800e71a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e710:	005b      	lsls	r3, r3, #1
 800e712:	b29a      	uxth	r2, r3
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e724:	4619      	mov	r1, r3
 800e726:	0049      	lsls	r1, r1, #1
 800e728:	440b      	add	r3, r1
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	4413      	add	r3, r2
 800e72e:	b29a      	uxth	r2, r3
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	8b5b      	ldrh	r3, [r3, #26]
 800e73a:	f043 0304 	orr.w	r3, r3, #4
 800e73e:	b29a      	uxth	r2, r3
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2200      	movs	r2, #0
 800e748:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800e74a:	bf00      	nop
 800e74c:	3708      	adds	r7, #8
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}
 800e752:	bf00      	nop
 800e754:	0801692c 	.word	0x0801692c
 800e758:	08016fe4 	.word	0x08016fe4
 800e75c:	08016980 	.word	0x08016980

0800e760 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b086      	sub	sp, #24
 800e764:	af00      	add	r7, sp, #0
 800e766:	60f8      	str	r0, [r7, #12]
 800e768:	607b      	str	r3, [r7, #4]
 800e76a:	460b      	mov	r3, r1
 800e76c:	817b      	strh	r3, [r7, #10]
 800e76e:	4613      	mov	r3, r2
 800e770:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e772:	897a      	ldrh	r2, [r7, #10]
 800e774:	893b      	ldrh	r3, [r7, #8]
 800e776:	4413      	add	r3, r2
 800e778:	b29b      	uxth	r3, r3
 800e77a:	3314      	adds	r3, #20
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e782:	4619      	mov	r1, r3
 800e784:	2022      	movs	r0, #34	; 0x22
 800e786:	f7fa fbfd 	bl	8008f84 <pbuf_alloc>
 800e78a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d04d      	beq.n	800e82e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e792:	897b      	ldrh	r3, [r7, #10]
 800e794:	3313      	adds	r3, #19
 800e796:	697a      	ldr	r2, [r7, #20]
 800e798:	8952      	ldrh	r2, [r2, #10]
 800e79a:	4293      	cmp	r3, r2
 800e79c:	db06      	blt.n	800e7ac <tcp_output_alloc_header_common+0x4c>
 800e79e:	4b26      	ldr	r3, [pc, #152]	; (800e838 <tcp_output_alloc_header_common+0xd8>)
 800e7a0:	f240 7223 	movw	r2, #1827	; 0x723
 800e7a4:	4925      	ldr	r1, [pc, #148]	; (800e83c <tcp_output_alloc_header_common+0xdc>)
 800e7a6:	4826      	ldr	r0, [pc, #152]	; (800e840 <tcp_output_alloc_header_common+0xe0>)
 800e7a8:	f005 fd74 	bl	8014294 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	685b      	ldr	r3, [r3, #4]
 800e7b0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e7b2:	8c3b      	ldrh	r3, [r7, #32]
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f7f9 facb 	bl	8007d50 <lwip_htons>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	461a      	mov	r2, r3
 800e7be:	693b      	ldr	r3, [r7, #16]
 800e7c0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e7c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f7f9 fac3 	bl	8007d50 <lwip_htons>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	461a      	mov	r2, r3
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e7d2:	693b      	ldr	r3, [r7, #16]
 800e7d4:	687a      	ldr	r2, [r7, #4]
 800e7d6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e7d8:	68f8      	ldr	r0, [r7, #12]
 800e7da:	f7f9 face 	bl	8007d7a <lwip_htonl>
 800e7de:	4602      	mov	r2, r0
 800e7e0:	693b      	ldr	r3, [r7, #16]
 800e7e2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e7e4:	897b      	ldrh	r3, [r7, #10]
 800e7e6:	089b      	lsrs	r3, r3, #2
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	3305      	adds	r3, #5
 800e7ec:	b29b      	uxth	r3, r3
 800e7ee:	031b      	lsls	r3, r3, #12
 800e7f0:	b29a      	uxth	r2, r3
 800e7f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e7f6:	b29b      	uxth	r3, r3
 800e7f8:	4313      	orrs	r3, r2
 800e7fa:	b29b      	uxth	r3, r3
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f7f9 faa7 	bl	8007d50 <lwip_htons>
 800e802:	4603      	mov	r3, r0
 800e804:	461a      	mov	r2, r3
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e80a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e80c:	4618      	mov	r0, r3
 800e80e:	f7f9 fa9f 	bl	8007d50 <lwip_htons>
 800e812:	4603      	mov	r3, r0
 800e814:	461a      	mov	r2, r3
 800e816:	693b      	ldr	r3, [r7, #16]
 800e818:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	2200      	movs	r2, #0
 800e81e:	741a      	strb	r2, [r3, #16]
 800e820:	2200      	movs	r2, #0
 800e822:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	2200      	movs	r2, #0
 800e828:	749a      	strb	r2, [r3, #18]
 800e82a:	2200      	movs	r2, #0
 800e82c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e82e:	697b      	ldr	r3, [r7, #20]
}
 800e830:	4618      	mov	r0, r3
 800e832:	3718      	adds	r7, #24
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}
 800e838:	0801692c 	.word	0x0801692c
 800e83c:	08017004 	.word	0x08017004
 800e840:	08016980 	.word	0x08016980

0800e844 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e844:	b5b0      	push	{r4, r5, r7, lr}
 800e846:	b08a      	sub	sp, #40	; 0x28
 800e848:	af04      	add	r7, sp, #16
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	607b      	str	r3, [r7, #4]
 800e84e:	460b      	mov	r3, r1
 800e850:	817b      	strh	r3, [r7, #10]
 800e852:	4613      	mov	r3, r2
 800e854:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d106      	bne.n	800e86a <tcp_output_alloc_header+0x26>
 800e85c:	4b15      	ldr	r3, [pc, #84]	; (800e8b4 <tcp_output_alloc_header+0x70>)
 800e85e:	f240 7242 	movw	r2, #1858	; 0x742
 800e862:	4915      	ldr	r1, [pc, #84]	; (800e8b8 <tcp_output_alloc_header+0x74>)
 800e864:	4815      	ldr	r0, [pc, #84]	; (800e8bc <tcp_output_alloc_header+0x78>)
 800e866:	f005 fd15 	bl	8014294 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	8adb      	ldrh	r3, [r3, #22]
 800e872:	68fa      	ldr	r2, [r7, #12]
 800e874:	8b12      	ldrh	r2, [r2, #24]
 800e876:	68f9      	ldr	r1, [r7, #12]
 800e878:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800e87a:	893d      	ldrh	r5, [r7, #8]
 800e87c:	897c      	ldrh	r4, [r7, #10]
 800e87e:	9103      	str	r1, [sp, #12]
 800e880:	2110      	movs	r1, #16
 800e882:	9102      	str	r1, [sp, #8]
 800e884:	9201      	str	r2, [sp, #4]
 800e886:	9300      	str	r3, [sp, #0]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	462a      	mov	r2, r5
 800e88c:	4621      	mov	r1, r4
 800e88e:	f7ff ff67 	bl	800e760 <tcp_output_alloc_header_common>
 800e892:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d006      	beq.n	800e8a8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e89e:	68fa      	ldr	r2, [r7, #12]
 800e8a0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e8a2:	441a      	add	r2, r3
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800e8a8:	697b      	ldr	r3, [r7, #20]
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3718      	adds	r7, #24
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bdb0      	pop	{r4, r5, r7, pc}
 800e8b2:	bf00      	nop
 800e8b4:	0801692c 	.word	0x0801692c
 800e8b8:	08017034 	.word	0x08017034
 800e8bc:	08016980 	.word	0x08016980

0800e8c0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b088      	sub	sp, #32
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	60f8      	str	r0, [r7, #12]
 800e8c8:	60b9      	str	r1, [r7, #8]
 800e8ca:	4611      	mov	r1, r2
 800e8cc:	461a      	mov	r2, r3
 800e8ce:	460b      	mov	r3, r1
 800e8d0:	71fb      	strb	r3, [r7, #7]
 800e8d2:	4613      	mov	r3, r2
 800e8d4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e8da:	68bb      	ldr	r3, [r7, #8]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d106      	bne.n	800e8ee <tcp_output_fill_options+0x2e>
 800e8e0:	4b13      	ldr	r3, [pc, #76]	; (800e930 <tcp_output_fill_options+0x70>)
 800e8e2:	f240 7256 	movw	r2, #1878	; 0x756
 800e8e6:	4913      	ldr	r1, [pc, #76]	; (800e934 <tcp_output_fill_options+0x74>)
 800e8e8:	4813      	ldr	r0, [pc, #76]	; (800e938 <tcp_output_fill_options+0x78>)
 800e8ea:	f005 fcd3 	bl	8014294 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	685b      	ldr	r3, [r3, #4]
 800e8f2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e8f4:	69bb      	ldr	r3, [r7, #24]
 800e8f6:	3314      	adds	r3, #20
 800e8f8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e8fa:	69bb      	ldr	r3, [r7, #24]
 800e8fc:	f103 0214 	add.w	r2, r3, #20
 800e900:	8bfb      	ldrh	r3, [r7, #30]
 800e902:	009b      	lsls	r3, r3, #2
 800e904:	4619      	mov	r1, r3
 800e906:	79fb      	ldrb	r3, [r7, #7]
 800e908:	009b      	lsls	r3, r3, #2
 800e90a:	f003 0304 	and.w	r3, r3, #4
 800e90e:	440b      	add	r3, r1
 800e910:	4413      	add	r3, r2
 800e912:	697a      	ldr	r2, [r7, #20]
 800e914:	429a      	cmp	r2, r3
 800e916:	d006      	beq.n	800e926 <tcp_output_fill_options+0x66>
 800e918:	4b05      	ldr	r3, [pc, #20]	; (800e930 <tcp_output_fill_options+0x70>)
 800e91a:	f240 7275 	movw	r2, #1909	; 0x775
 800e91e:	4907      	ldr	r1, [pc, #28]	; (800e93c <tcp_output_fill_options+0x7c>)
 800e920:	4805      	ldr	r0, [pc, #20]	; (800e938 <tcp_output_fill_options+0x78>)
 800e922:	f005 fcb7 	bl	8014294 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800e926:	bf00      	nop
 800e928:	3720      	adds	r7, #32
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}
 800e92e:	bf00      	nop
 800e930:	0801692c 	.word	0x0801692c
 800e934:	0801705c 	.word	0x0801705c
 800e938:	08016980 	.word	0x08016980
 800e93c:	08016f54 	.word	0x08016f54

0800e940 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b08a      	sub	sp, #40	; 0x28
 800e944:	af04      	add	r7, sp, #16
 800e946:	60f8      	str	r0, [r7, #12]
 800e948:	60b9      	str	r1, [r7, #8]
 800e94a:	607a      	str	r2, [r7, #4]
 800e94c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d106      	bne.n	800e962 <tcp_output_control_segment+0x22>
 800e954:	4b1c      	ldr	r3, [pc, #112]	; (800e9c8 <tcp_output_control_segment+0x88>)
 800e956:	f240 7287 	movw	r2, #1927	; 0x787
 800e95a:	491c      	ldr	r1, [pc, #112]	; (800e9cc <tcp_output_control_segment+0x8c>)
 800e95c:	481c      	ldr	r0, [pc, #112]	; (800e9d0 <tcp_output_control_segment+0x90>)
 800e95e:	f005 fc99 	bl	8014294 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800e962:	683a      	ldr	r2, [r7, #0]
 800e964:	6879      	ldr	r1, [r7, #4]
 800e966:	68f8      	ldr	r0, [r7, #12]
 800e968:	f7fe ff40 	bl	800d7ec <tcp_route>
 800e96c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d102      	bne.n	800e97a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800e974:	23fc      	movs	r3, #252	; 0xfc
 800e976:	75fb      	strb	r3, [r7, #23]
 800e978:	e01c      	b.n	800e9b4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d006      	beq.n	800e98e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	7adb      	ldrb	r3, [r3, #11]
 800e984:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	7a9b      	ldrb	r3, [r3, #10]
 800e98a:	757b      	strb	r3, [r7, #21]
 800e98c:	e003      	b.n	800e996 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800e98e:	23ff      	movs	r3, #255	; 0xff
 800e990:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800e992:	2300      	movs	r3, #0
 800e994:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800e996:	7dba      	ldrb	r2, [r7, #22]
 800e998:	693b      	ldr	r3, [r7, #16]
 800e99a:	9302      	str	r3, [sp, #8]
 800e99c:	2306      	movs	r3, #6
 800e99e:	9301      	str	r3, [sp, #4]
 800e9a0:	7d7b      	ldrb	r3, [r7, #21]
 800e9a2:	9300      	str	r3, [sp, #0]
 800e9a4:	4613      	mov	r3, r2
 800e9a6:	683a      	ldr	r2, [r7, #0]
 800e9a8:	6879      	ldr	r1, [r7, #4]
 800e9aa:	68b8      	ldr	r0, [r7, #8]
 800e9ac:	f004 f956 	bl	8012c5c <ip4_output_if>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800e9b4:	68b8      	ldr	r0, [r7, #8]
 800e9b6:	f7fa fdc9 	bl	800954c <pbuf_free>
  return err;
 800e9ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3718      	adds	r7, #24
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}
 800e9c6:	bf00      	nop
 800e9c8:	0801692c 	.word	0x0801692c
 800e9cc:	08017084 	.word	0x08017084
 800e9d0:	08016980 	.word	0x08016980

0800e9d4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e9d4:	b590      	push	{r4, r7, lr}
 800e9d6:	b08b      	sub	sp, #44	; 0x2c
 800e9d8:	af04      	add	r7, sp, #16
 800e9da:	60f8      	str	r0, [r7, #12]
 800e9dc:	60b9      	str	r1, [r7, #8]
 800e9de:	607a      	str	r2, [r7, #4]
 800e9e0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d106      	bne.n	800e9f6 <tcp_rst+0x22>
 800e9e8:	4b1f      	ldr	r3, [pc, #124]	; (800ea68 <tcp_rst+0x94>)
 800e9ea:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800e9ee:	491f      	ldr	r1, [pc, #124]	; (800ea6c <tcp_rst+0x98>)
 800e9f0:	481f      	ldr	r0, [pc, #124]	; (800ea70 <tcp_rst+0x9c>)
 800e9f2:	f005 fc4f 	bl	8014294 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d106      	bne.n	800ea0a <tcp_rst+0x36>
 800e9fc:	4b1a      	ldr	r3, [pc, #104]	; (800ea68 <tcp_rst+0x94>)
 800e9fe:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800ea02:	491c      	ldr	r1, [pc, #112]	; (800ea74 <tcp_rst+0xa0>)
 800ea04:	481a      	ldr	r0, [pc, #104]	; (800ea70 <tcp_rst+0x9c>)
 800ea06:	f005 fc45 	bl	8014294 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800ea0e:	f246 0308 	movw	r3, #24584	; 0x6008
 800ea12:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800ea14:	7dfb      	ldrb	r3, [r7, #23]
 800ea16:	b29c      	uxth	r4, r3
 800ea18:	68b8      	ldr	r0, [r7, #8]
 800ea1a:	f7f9 f9ae 	bl	8007d7a <lwip_htonl>
 800ea1e:	4602      	mov	r2, r0
 800ea20:	8abb      	ldrh	r3, [r7, #20]
 800ea22:	9303      	str	r3, [sp, #12]
 800ea24:	2314      	movs	r3, #20
 800ea26:	9302      	str	r3, [sp, #8]
 800ea28:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ea2a:	9301      	str	r3, [sp, #4]
 800ea2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ea2e:	9300      	str	r3, [sp, #0]
 800ea30:	4613      	mov	r3, r2
 800ea32:	2200      	movs	r2, #0
 800ea34:	4621      	mov	r1, r4
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f7ff fe92 	bl	800e760 <tcp_output_alloc_header_common>
 800ea3c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d00c      	beq.n	800ea5e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ea44:	7dfb      	ldrb	r3, [r7, #23]
 800ea46:	2200      	movs	r2, #0
 800ea48:	6939      	ldr	r1, [r7, #16]
 800ea4a:	68f8      	ldr	r0, [r7, #12]
 800ea4c:	f7ff ff38 	bl	800e8c0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ea50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea52:	683a      	ldr	r2, [r7, #0]
 800ea54:	6939      	ldr	r1, [r7, #16]
 800ea56:	68f8      	ldr	r0, [r7, #12]
 800ea58:	f7ff ff72 	bl	800e940 <tcp_output_control_segment>
 800ea5c:	e000      	b.n	800ea60 <tcp_rst+0x8c>
    return;
 800ea5e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ea60:	371c      	adds	r7, #28
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd90      	pop	{r4, r7, pc}
 800ea66:	bf00      	nop
 800ea68:	0801692c 	.word	0x0801692c
 800ea6c:	080170b0 	.word	0x080170b0
 800ea70:	08016980 	.word	0x08016980
 800ea74:	080170cc 	.word	0x080170cc

0800ea78 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ea78:	b590      	push	{r4, r7, lr}
 800ea7a:	b087      	sub	sp, #28
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800ea80:	2300      	movs	r3, #0
 800ea82:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800ea84:	2300      	movs	r3, #0
 800ea86:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d106      	bne.n	800ea9c <tcp_send_empty_ack+0x24>
 800ea8e:	4b28      	ldr	r3, [pc, #160]	; (800eb30 <tcp_send_empty_ack+0xb8>)
 800ea90:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800ea94:	4927      	ldr	r1, [pc, #156]	; (800eb34 <tcp_send_empty_ack+0xbc>)
 800ea96:	4828      	ldr	r0, [pc, #160]	; (800eb38 <tcp_send_empty_ack+0xc0>)
 800ea98:	f005 fbfc 	bl	8014294 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ea9c:	7dfb      	ldrb	r3, [r7, #23]
 800ea9e:	009b      	lsls	r3, r3, #2
 800eaa0:	b2db      	uxtb	r3, r3
 800eaa2:	f003 0304 	and.w	r3, r3, #4
 800eaa6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800eaa8:	7d7b      	ldrb	r3, [r7, #21]
 800eaaa:	b29c      	uxth	r4, r3
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7f9 f962 	bl	8007d7a <lwip_htonl>
 800eab6:	4603      	mov	r3, r0
 800eab8:	2200      	movs	r2, #0
 800eaba:	4621      	mov	r1, r4
 800eabc:	6878      	ldr	r0, [r7, #4]
 800eabe:	f7ff fec1 	bl	800e844 <tcp_output_alloc_header>
 800eac2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d109      	bne.n	800eade <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	8b5b      	ldrh	r3, [r3, #26]
 800eace:	f043 0303 	orr.w	r3, r3, #3
 800ead2:	b29a      	uxth	r2, r3
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ead8:	f06f 0301 	mvn.w	r3, #1
 800eadc:	e023      	b.n	800eb26 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800eade:	7dbb      	ldrb	r3, [r7, #22]
 800eae0:	7dfa      	ldrb	r2, [r7, #23]
 800eae2:	6939      	ldr	r1, [r7, #16]
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f7ff feeb 	bl	800e8c0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800eaea:	687a      	ldr	r2, [r7, #4]
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	3304      	adds	r3, #4
 800eaf0:	6939      	ldr	r1, [r7, #16]
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f7ff ff24 	bl	800e940 <tcp_output_control_segment>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800eafc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d007      	beq.n	800eb14 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	8b5b      	ldrh	r3, [r3, #26]
 800eb08:	f043 0303 	orr.w	r3, r3, #3
 800eb0c:	b29a      	uxth	r2, r3
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	835a      	strh	r2, [r3, #26]
 800eb12:	e006      	b.n	800eb22 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	8b5b      	ldrh	r3, [r3, #26]
 800eb18:	f023 0303 	bic.w	r3, r3, #3
 800eb1c:	b29a      	uxth	r2, r3
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800eb22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	371c      	adds	r7, #28
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd90      	pop	{r4, r7, pc}
 800eb2e:	bf00      	nop
 800eb30:	0801692c 	.word	0x0801692c
 800eb34:	080170e8 	.word	0x080170e8
 800eb38:	08016980 	.word	0x08016980

0800eb3c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800eb3c:	b590      	push	{r4, r7, lr}
 800eb3e:	b087      	sub	sp, #28
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800eb44:	2300      	movs	r3, #0
 800eb46:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d106      	bne.n	800eb5c <tcp_keepalive+0x20>
 800eb4e:	4b18      	ldr	r3, [pc, #96]	; (800ebb0 <tcp_keepalive+0x74>)
 800eb50:	f640 0224 	movw	r2, #2084	; 0x824
 800eb54:	4917      	ldr	r1, [pc, #92]	; (800ebb4 <tcp_keepalive+0x78>)
 800eb56:	4818      	ldr	r0, [pc, #96]	; (800ebb8 <tcp_keepalive+0x7c>)
 800eb58:	f005 fb9c 	bl	8014294 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800eb5c:	7dfb      	ldrb	r3, [r7, #23]
 800eb5e:	b29c      	uxth	r4, r3
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb64:	3b01      	subs	r3, #1
 800eb66:	4618      	mov	r0, r3
 800eb68:	f7f9 f907 	bl	8007d7a <lwip_htonl>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	2200      	movs	r2, #0
 800eb70:	4621      	mov	r1, r4
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f7ff fe66 	bl	800e844 <tcp_output_alloc_header>
 800eb78:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d102      	bne.n	800eb86 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800eb80:	f04f 33ff 	mov.w	r3, #4294967295
 800eb84:	e010      	b.n	800eba8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800eb86:	7dfb      	ldrb	r3, [r7, #23]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	6939      	ldr	r1, [r7, #16]
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f7ff fe97 	bl	800e8c0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800eb92:	687a      	ldr	r2, [r7, #4]
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	3304      	adds	r3, #4
 800eb98:	6939      	ldr	r1, [r7, #16]
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f7ff fed0 	bl	800e940 <tcp_output_control_segment>
 800eba0:	4603      	mov	r3, r0
 800eba2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800eba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	371c      	adds	r7, #28
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd90      	pop	{r4, r7, pc}
 800ebb0:	0801692c 	.word	0x0801692c
 800ebb4:	08017108 	.word	0x08017108
 800ebb8:	08016980 	.word	0x08016980

0800ebbc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ebbc:	b590      	push	{r4, r7, lr}
 800ebbe:	b08b      	sub	sp, #44	; 0x2c
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d106      	bne.n	800ebde <tcp_zero_window_probe+0x22>
 800ebd0:	4b4c      	ldr	r3, [pc, #304]	; (800ed04 <tcp_zero_window_probe+0x148>)
 800ebd2:	f640 024f 	movw	r2, #2127	; 0x84f
 800ebd6:	494c      	ldr	r1, [pc, #304]	; (800ed08 <tcp_zero_window_probe+0x14c>)
 800ebd8:	484c      	ldr	r0, [pc, #304]	; (800ed0c <tcp_zero_window_probe+0x150>)
 800ebda:	f005 fb5b 	bl	8014294 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebe2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ebe4:	6a3b      	ldr	r3, [r7, #32]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d101      	bne.n	800ebee <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ebea:	2300      	movs	r3, #0
 800ebec:	e086      	b.n	800ecfc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ebf4:	2bff      	cmp	r3, #255	; 0xff
 800ebf6:	d007      	beq.n	800ec08 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ebfe:	3301      	adds	r3, #1
 800ec00:	b2da      	uxtb	r2, r3
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ec08:	6a3b      	ldr	r3, [r7, #32]
 800ec0a:	68db      	ldr	r3, [r3, #12]
 800ec0c:	899b      	ldrh	r3, [r3, #12]
 800ec0e:	b29b      	uxth	r3, r3
 800ec10:	4618      	mov	r0, r3
 800ec12:	f7f9 f89d 	bl	8007d50 <lwip_htons>
 800ec16:	4603      	mov	r3, r0
 800ec18:	b2db      	uxtb	r3, r3
 800ec1a:	f003 0301 	and.w	r3, r3, #1
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d005      	beq.n	800ec2e <tcp_zero_window_probe+0x72>
 800ec22:	6a3b      	ldr	r3, [r7, #32]
 800ec24:	891b      	ldrh	r3, [r3, #8]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d101      	bne.n	800ec2e <tcp_zero_window_probe+0x72>
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	e000      	b.n	800ec30 <tcp_zero_window_probe+0x74>
 800ec2e:	2300      	movs	r3, #0
 800ec30:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ec32:	7ffb      	ldrb	r3, [r7, #31]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	bf0c      	ite	eq
 800ec38:	2301      	moveq	r3, #1
 800ec3a:	2300      	movne	r3, #0
 800ec3c:	b2db      	uxtb	r3, r3
 800ec3e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ec40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec44:	b299      	uxth	r1, r3
 800ec46:	6a3b      	ldr	r3, [r7, #32]
 800ec48:	68db      	ldr	r3, [r3, #12]
 800ec4a:	685b      	ldr	r3, [r3, #4]
 800ec4c:	8bba      	ldrh	r2, [r7, #28]
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	f7ff fdf8 	bl	800e844 <tcp_output_alloc_header>
 800ec54:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ec56:	69bb      	ldr	r3, [r7, #24]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d102      	bne.n	800ec62 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ec5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ec60:	e04c      	b.n	800ecfc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ec62:	69bb      	ldr	r3, [r7, #24]
 800ec64:	685b      	ldr	r3, [r3, #4]
 800ec66:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ec68:	7ffb      	ldrb	r3, [r7, #31]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d011      	beq.n	800ec92 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	899b      	ldrh	r3, [r3, #12]
 800ec72:	b29b      	uxth	r3, r3
 800ec74:	b21b      	sxth	r3, r3
 800ec76:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ec7a:	b21c      	sxth	r4, r3
 800ec7c:	2011      	movs	r0, #17
 800ec7e:	f7f9 f867 	bl	8007d50 <lwip_htons>
 800ec82:	4603      	mov	r3, r0
 800ec84:	b21b      	sxth	r3, r3
 800ec86:	4323      	orrs	r3, r4
 800ec88:	b21b      	sxth	r3, r3
 800ec8a:	b29a      	uxth	r2, r3
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	819a      	strh	r2, [r3, #12]
 800ec90:	e010      	b.n	800ecb4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ec92:	69bb      	ldr	r3, [r7, #24]
 800ec94:	685b      	ldr	r3, [r3, #4]
 800ec96:	3314      	adds	r3, #20
 800ec98:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ec9a:	6a3b      	ldr	r3, [r7, #32]
 800ec9c:	6858      	ldr	r0, [r3, #4]
 800ec9e:	6a3b      	ldr	r3, [r7, #32]
 800eca0:	685b      	ldr	r3, [r3, #4]
 800eca2:	891a      	ldrh	r2, [r3, #8]
 800eca4:	6a3b      	ldr	r3, [r7, #32]
 800eca6:	891b      	ldrh	r3, [r3, #8]
 800eca8:	1ad3      	subs	r3, r2, r3
 800ecaa:	b29b      	uxth	r3, r3
 800ecac:	2201      	movs	r2, #1
 800ecae:	6939      	ldr	r1, [r7, #16]
 800ecb0:	f7fa fe52 	bl	8009958 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ecb4:	6a3b      	ldr	r3, [r7, #32]
 800ecb6:	68db      	ldr	r3, [r3, #12]
 800ecb8:	685b      	ldr	r3, [r3, #4]
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f7f9 f85d 	bl	8007d7a <lwip_htonl>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	3301      	adds	r3, #1
 800ecc4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	1ad3      	subs	r3, r2, r3
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	da02      	bge.n	800ecd8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	68fa      	ldr	r2, [r7, #12]
 800ecd6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ecd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecdc:	2200      	movs	r2, #0
 800ecde:	69b9      	ldr	r1, [r7, #24]
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	f7ff fded 	bl	800e8c0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ece6:	687a      	ldr	r2, [r7, #4]
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	3304      	adds	r3, #4
 800ecec:	69b9      	ldr	r1, [r7, #24]
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f7ff fe26 	bl	800e940 <tcp_output_control_segment>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ecf8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	372c      	adds	r7, #44	; 0x2c
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd90      	pop	{r4, r7, pc}
 800ed04:	0801692c 	.word	0x0801692c
 800ed08:	08017124 	.word	0x08017124
 800ed0c:	08016980 	.word	0x08016980

0800ed10 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b082      	sub	sp, #8
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ed18:	f7fa ff0c 	bl	8009b34 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ed1c:	4b0a      	ldr	r3, [pc, #40]	; (800ed48 <tcpip_tcp_timer+0x38>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d103      	bne.n	800ed2c <tcpip_tcp_timer+0x1c>
 800ed24:	4b09      	ldr	r3, [pc, #36]	; (800ed4c <tcpip_tcp_timer+0x3c>)
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d005      	beq.n	800ed38 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	4908      	ldr	r1, [pc, #32]	; (800ed50 <tcpip_tcp_timer+0x40>)
 800ed30:	20fa      	movs	r0, #250	; 0xfa
 800ed32:	f000 f8f3 	bl	800ef1c <sys_timeout>
 800ed36:	e003      	b.n	800ed40 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ed38:	4b06      	ldr	r3, [pc, #24]	; (800ed54 <tcpip_tcp_timer+0x44>)
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	601a      	str	r2, [r3, #0]
  }
}
 800ed3e:	bf00      	nop
 800ed40:	bf00      	nop
 800ed42:	3708      	adds	r7, #8
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}
 800ed48:	20018bf0 	.word	0x20018bf0
 800ed4c:	20018bf4 	.word	0x20018bf4
 800ed50:	0800ed11 	.word	0x0800ed11
 800ed54:	20018c3c 	.word	0x20018c3c

0800ed58 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ed5c:	4b0a      	ldr	r3, [pc, #40]	; (800ed88 <tcp_timer_needed+0x30>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d10f      	bne.n	800ed84 <tcp_timer_needed+0x2c>
 800ed64:	4b09      	ldr	r3, [pc, #36]	; (800ed8c <tcp_timer_needed+0x34>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d103      	bne.n	800ed74 <tcp_timer_needed+0x1c>
 800ed6c:	4b08      	ldr	r3, [pc, #32]	; (800ed90 <tcp_timer_needed+0x38>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d007      	beq.n	800ed84 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ed74:	4b04      	ldr	r3, [pc, #16]	; (800ed88 <tcp_timer_needed+0x30>)
 800ed76:	2201      	movs	r2, #1
 800ed78:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	4905      	ldr	r1, [pc, #20]	; (800ed94 <tcp_timer_needed+0x3c>)
 800ed7e:	20fa      	movs	r0, #250	; 0xfa
 800ed80:	f000 f8cc 	bl	800ef1c <sys_timeout>
  }
}
 800ed84:	bf00      	nop
 800ed86:	bd80      	pop	{r7, pc}
 800ed88:	20018c3c 	.word	0x20018c3c
 800ed8c:	20018bf0 	.word	0x20018bf0
 800ed90:	20018bf4 	.word	0x20018bf4
 800ed94:	0800ed11 	.word	0x0800ed11

0800ed98 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b086      	sub	sp, #24
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	60f8      	str	r0, [r7, #12]
 800eda0:	60b9      	str	r1, [r7, #8]
 800eda2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800eda4:	200a      	movs	r0, #10
 800eda6:	f7f9 fcab 	bl	8008700 <memp_malloc>
 800edaa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800edac:	693b      	ldr	r3, [r7, #16]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d109      	bne.n	800edc6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d151      	bne.n	800ee5c <sys_timeout_abs+0xc4>
 800edb8:	4b2a      	ldr	r3, [pc, #168]	; (800ee64 <sys_timeout_abs+0xcc>)
 800edba:	22be      	movs	r2, #190	; 0xbe
 800edbc:	492a      	ldr	r1, [pc, #168]	; (800ee68 <sys_timeout_abs+0xd0>)
 800edbe:	482b      	ldr	r0, [pc, #172]	; (800ee6c <sys_timeout_abs+0xd4>)
 800edc0:	f005 fa68 	bl	8014294 <iprintf>
    return;
 800edc4:	e04a      	b.n	800ee5c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	2200      	movs	r2, #0
 800edca:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800edcc:	693b      	ldr	r3, [r7, #16]
 800edce:	68ba      	ldr	r2, [r7, #8]
 800edd0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800edd2:	693b      	ldr	r3, [r7, #16]
 800edd4:	687a      	ldr	r2, [r7, #4]
 800edd6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	68fa      	ldr	r2, [r7, #12]
 800eddc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800edde:	4b24      	ldr	r3, [pc, #144]	; (800ee70 <sys_timeout_abs+0xd8>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d103      	bne.n	800edee <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ede6:	4a22      	ldr	r2, [pc, #136]	; (800ee70 <sys_timeout_abs+0xd8>)
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	6013      	str	r3, [r2, #0]
    return;
 800edec:	e037      	b.n	800ee5e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800edee:	693b      	ldr	r3, [r7, #16]
 800edf0:	685a      	ldr	r2, [r3, #4]
 800edf2:	4b1f      	ldr	r3, [pc, #124]	; (800ee70 <sys_timeout_abs+0xd8>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	685b      	ldr	r3, [r3, #4]
 800edf8:	1ad3      	subs	r3, r2, r3
 800edfa:	0fdb      	lsrs	r3, r3, #31
 800edfc:	f003 0301 	and.w	r3, r3, #1
 800ee00:	b2db      	uxtb	r3, r3
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d007      	beq.n	800ee16 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ee06:	4b1a      	ldr	r3, [pc, #104]	; (800ee70 <sys_timeout_abs+0xd8>)
 800ee08:	681a      	ldr	r2, [r3, #0]
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ee0e:	4a18      	ldr	r2, [pc, #96]	; (800ee70 <sys_timeout_abs+0xd8>)
 800ee10:	693b      	ldr	r3, [r7, #16]
 800ee12:	6013      	str	r3, [r2, #0]
 800ee14:	e023      	b.n	800ee5e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ee16:	4b16      	ldr	r3, [pc, #88]	; (800ee70 <sys_timeout_abs+0xd8>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	617b      	str	r3, [r7, #20]
 800ee1c:	e01a      	b.n	800ee54 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d00b      	beq.n	800ee3e <sys_timeout_abs+0xa6>
 800ee26:	693b      	ldr	r3, [r7, #16]
 800ee28:	685a      	ldr	r2, [r3, #4]
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	685b      	ldr	r3, [r3, #4]
 800ee30:	1ad3      	subs	r3, r2, r3
 800ee32:	0fdb      	lsrs	r3, r3, #31
 800ee34:	f003 0301 	and.w	r3, r3, #1
 800ee38:	b2db      	uxtb	r3, r3
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d007      	beq.n	800ee4e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	681a      	ldr	r2, [r3, #0]
 800ee42:	693b      	ldr	r3, [r7, #16]
 800ee44:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	693a      	ldr	r2, [r7, #16]
 800ee4a:	601a      	str	r2, [r3, #0]
        break;
 800ee4c:	e007      	b.n	800ee5e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ee4e:	697b      	ldr	r3, [r7, #20]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	617b      	str	r3, [r7, #20]
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d1e1      	bne.n	800ee1e <sys_timeout_abs+0x86>
 800ee5a:	e000      	b.n	800ee5e <sys_timeout_abs+0xc6>
    return;
 800ee5c:	bf00      	nop
      }
    }
  }
}
 800ee5e:	3718      	adds	r7, #24
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}
 800ee64:	08017148 	.word	0x08017148
 800ee68:	0801717c 	.word	0x0801717c
 800ee6c:	080171bc 	.word	0x080171bc
 800ee70:	20018c34 	.word	0x20018c34

0800ee74 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b086      	sub	sp, #24
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ee80:	697b      	ldr	r3, [r7, #20]
 800ee82:	685b      	ldr	r3, [r3, #4]
 800ee84:	4798      	blx	r3

  now = sys_now();
 800ee86:	f7f5 fcb3 	bl	80047f0 <sys_now>
 800ee8a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	681a      	ldr	r2, [r3, #0]
 800ee90:	4b0f      	ldr	r3, [pc, #60]	; (800eed0 <lwip_cyclic_timer+0x5c>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	4413      	add	r3, r2
 800ee96:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ee98:	68fa      	ldr	r2, [r7, #12]
 800ee9a:	693b      	ldr	r3, [r7, #16]
 800ee9c:	1ad3      	subs	r3, r2, r3
 800ee9e:	0fdb      	lsrs	r3, r3, #31
 800eea0:	f003 0301 	and.w	r3, r3, #1
 800eea4:	b2db      	uxtb	r3, r3
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d009      	beq.n	800eebe <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	681a      	ldr	r2, [r3, #0]
 800eeae:	693b      	ldr	r3, [r7, #16]
 800eeb0:	4413      	add	r3, r2
 800eeb2:	687a      	ldr	r2, [r7, #4]
 800eeb4:	4907      	ldr	r1, [pc, #28]	; (800eed4 <lwip_cyclic_timer+0x60>)
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7ff ff6e 	bl	800ed98 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800eebc:	e004      	b.n	800eec8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800eebe:	687a      	ldr	r2, [r7, #4]
 800eec0:	4904      	ldr	r1, [pc, #16]	; (800eed4 <lwip_cyclic_timer+0x60>)
 800eec2:	68f8      	ldr	r0, [r7, #12]
 800eec4:	f7ff ff68 	bl	800ed98 <sys_timeout_abs>
}
 800eec8:	bf00      	nop
 800eeca:	3718      	adds	r7, #24
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}
 800eed0:	20018c38 	.word	0x20018c38
 800eed4:	0800ee75 	.word	0x0800ee75

0800eed8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b082      	sub	sp, #8
 800eedc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800eede:	2301      	movs	r3, #1
 800eee0:	607b      	str	r3, [r7, #4]
 800eee2:	e00e      	b.n	800ef02 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800eee4:	4a0b      	ldr	r2, [pc, #44]	; (800ef14 <sys_timeouts_init+0x3c>)
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	00db      	lsls	r3, r3, #3
 800eef0:	4a08      	ldr	r2, [pc, #32]	; (800ef14 <sys_timeouts_init+0x3c>)
 800eef2:	4413      	add	r3, r2
 800eef4:	461a      	mov	r2, r3
 800eef6:	4908      	ldr	r1, [pc, #32]	; (800ef18 <sys_timeouts_init+0x40>)
 800eef8:	f000 f810 	bl	800ef1c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	3301      	adds	r3, #1
 800ef00:	607b      	str	r3, [r7, #4]
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	2b04      	cmp	r3, #4
 800ef06:	d9ed      	bls.n	800eee4 <sys_timeouts_init+0xc>
  }
}
 800ef08:	bf00      	nop
 800ef0a:	bf00      	nop
 800ef0c:	3708      	adds	r7, #8
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}
 800ef12:	bf00      	nop
 800ef14:	08018114 	.word	0x08018114
 800ef18:	0800ee75 	.word	0x0800ee75

0800ef1c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b086      	sub	sp, #24
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	60f8      	str	r0, [r7, #12]
 800ef24:	60b9      	str	r1, [r7, #8]
 800ef26:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef2e:	d306      	bcc.n	800ef3e <sys_timeout+0x22>
 800ef30:	4b0a      	ldr	r3, [pc, #40]	; (800ef5c <sys_timeout+0x40>)
 800ef32:	f240 1229 	movw	r2, #297	; 0x129
 800ef36:	490a      	ldr	r1, [pc, #40]	; (800ef60 <sys_timeout+0x44>)
 800ef38:	480a      	ldr	r0, [pc, #40]	; (800ef64 <sys_timeout+0x48>)
 800ef3a:	f005 f9ab 	bl	8014294 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ef3e:	f7f5 fc57 	bl	80047f0 <sys_now>
 800ef42:	4602      	mov	r2, r0
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	4413      	add	r3, r2
 800ef48:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ef4a:	687a      	ldr	r2, [r7, #4]
 800ef4c:	68b9      	ldr	r1, [r7, #8]
 800ef4e:	6978      	ldr	r0, [r7, #20]
 800ef50:	f7ff ff22 	bl	800ed98 <sys_timeout_abs>
#endif
}
 800ef54:	bf00      	nop
 800ef56:	3718      	adds	r7, #24
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}
 800ef5c:	08017148 	.word	0x08017148
 800ef60:	080171e4 	.word	0x080171e4
 800ef64:	080171bc 	.word	0x080171bc

0800ef68 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b084      	sub	sp, #16
 800ef6c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ef6e:	f7f5 fc3f 	bl	80047f0 <sys_now>
 800ef72:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800ef74:	4b17      	ldr	r3, [pc, #92]	; (800efd4 <sys_check_timeouts+0x6c>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d022      	beq.n	800efc6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	685b      	ldr	r3, [r3, #4]
 800ef84:	68fa      	ldr	r2, [r7, #12]
 800ef86:	1ad3      	subs	r3, r2, r3
 800ef88:	0fdb      	lsrs	r3, r3, #31
 800ef8a:	f003 0301 	and.w	r3, r3, #1
 800ef8e:	b2db      	uxtb	r3, r3
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d11a      	bne.n	800efca <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	4a0e      	ldr	r2, [pc, #56]	; (800efd4 <sys_check_timeouts+0x6c>)
 800ef9a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	689b      	ldr	r3, [r3, #8]
 800efa0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	68db      	ldr	r3, [r3, #12]
 800efa6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	685b      	ldr	r3, [r3, #4]
 800efac:	4a0a      	ldr	r2, [pc, #40]	; (800efd8 <sys_check_timeouts+0x70>)
 800efae:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800efb0:	68b9      	ldr	r1, [r7, #8]
 800efb2:	200a      	movs	r0, #10
 800efb4:	f7f9 fc1a 	bl	80087ec <memp_free>
    if (handler != NULL) {
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d0da      	beq.n	800ef74 <sys_check_timeouts+0xc>
      handler(arg);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6838      	ldr	r0, [r7, #0]
 800efc2:	4798      	blx	r3
  do {
 800efc4:	e7d6      	b.n	800ef74 <sys_check_timeouts+0xc>
      return;
 800efc6:	bf00      	nop
 800efc8:	e000      	b.n	800efcc <sys_check_timeouts+0x64>
      return;
 800efca:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800efcc:	3710      	adds	r7, #16
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}
 800efd2:	bf00      	nop
 800efd4:	20018c34 	.word	0x20018c34
 800efd8:	20018c38 	.word	0x20018c38

0800efdc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b082      	sub	sp, #8
 800efe0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800efe2:	4b16      	ldr	r3, [pc, #88]	; (800f03c <sys_timeouts_sleeptime+0x60>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d102      	bne.n	800eff0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800efea:	f04f 33ff 	mov.w	r3, #4294967295
 800efee:	e020      	b.n	800f032 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800eff0:	f7f5 fbfe 	bl	80047f0 <sys_now>
 800eff4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800eff6:	4b11      	ldr	r3, [pc, #68]	; (800f03c <sys_timeouts_sleeptime+0x60>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	685a      	ldr	r2, [r3, #4]
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	1ad3      	subs	r3, r2, r3
 800f000:	0fdb      	lsrs	r3, r3, #31
 800f002:	f003 0301 	and.w	r3, r3, #1
 800f006:	b2db      	uxtb	r3, r3
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d001      	beq.n	800f010 <sys_timeouts_sleeptime+0x34>
    return 0;
 800f00c:	2300      	movs	r3, #0
 800f00e:	e010      	b.n	800f032 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800f010:	4b0a      	ldr	r3, [pc, #40]	; (800f03c <sys_timeouts_sleeptime+0x60>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	685a      	ldr	r2, [r3, #4]
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	1ad3      	subs	r3, r2, r3
 800f01a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	da06      	bge.n	800f030 <sys_timeouts_sleeptime+0x54>
 800f022:	4b07      	ldr	r3, [pc, #28]	; (800f040 <sys_timeouts_sleeptime+0x64>)
 800f024:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800f028:	4906      	ldr	r1, [pc, #24]	; (800f044 <sys_timeouts_sleeptime+0x68>)
 800f02a:	4807      	ldr	r0, [pc, #28]	; (800f048 <sys_timeouts_sleeptime+0x6c>)
 800f02c:	f005 f932 	bl	8014294 <iprintf>
    return ret;
 800f030:	683b      	ldr	r3, [r7, #0]
  }
}
 800f032:	4618      	mov	r0, r3
 800f034:	3708      	adds	r7, #8
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}
 800f03a:	bf00      	nop
 800f03c:	20018c34 	.word	0x20018c34
 800f040:	08017148 	.word	0x08017148
 800f044:	0801721c 	.word	0x0801721c
 800f048:	080171bc 	.word	0x080171bc

0800f04c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f050:	f005 f938 	bl	80142c4 <rand>
 800f054:	4603      	mov	r3, r0
 800f056:	b29b      	uxth	r3, r3
 800f058:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f05c:	b29b      	uxth	r3, r3
 800f05e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f062:	b29a      	uxth	r2, r3
 800f064:	4b01      	ldr	r3, [pc, #4]	; (800f06c <udp_init+0x20>)
 800f066:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f068:	bf00      	nop
 800f06a:	bd80      	pop	{r7, pc}
 800f06c:	2000002c 	.word	0x2000002c

0800f070 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800f070:	b480      	push	{r7}
 800f072:	b083      	sub	sp, #12
 800f074:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800f076:	2300      	movs	r3, #0
 800f078:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800f07a:	4b17      	ldr	r3, [pc, #92]	; (800f0d8 <udp_new_port+0x68>)
 800f07c:	881b      	ldrh	r3, [r3, #0]
 800f07e:	1c5a      	adds	r2, r3, #1
 800f080:	b291      	uxth	r1, r2
 800f082:	4a15      	ldr	r2, [pc, #84]	; (800f0d8 <udp_new_port+0x68>)
 800f084:	8011      	strh	r1, [r2, #0]
 800f086:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f08a:	4293      	cmp	r3, r2
 800f08c:	d103      	bne.n	800f096 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800f08e:	4b12      	ldr	r3, [pc, #72]	; (800f0d8 <udp_new_port+0x68>)
 800f090:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f094:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f096:	4b11      	ldr	r3, [pc, #68]	; (800f0dc <udp_new_port+0x6c>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	603b      	str	r3, [r7, #0]
 800f09c:	e011      	b.n	800f0c2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	8a5a      	ldrh	r2, [r3, #18]
 800f0a2:	4b0d      	ldr	r3, [pc, #52]	; (800f0d8 <udp_new_port+0x68>)
 800f0a4:	881b      	ldrh	r3, [r3, #0]
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d108      	bne.n	800f0bc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800f0aa:	88fb      	ldrh	r3, [r7, #6]
 800f0ac:	3301      	adds	r3, #1
 800f0ae:	80fb      	strh	r3, [r7, #6]
 800f0b0:	88fb      	ldrh	r3, [r7, #6]
 800f0b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f0b6:	d3e0      	bcc.n	800f07a <udp_new_port+0xa>
        return 0;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	e007      	b.n	800f0cc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	68db      	ldr	r3, [r3, #12]
 800f0c0:	603b      	str	r3, [r7, #0]
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d1ea      	bne.n	800f09e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800f0c8:	4b03      	ldr	r3, [pc, #12]	; (800f0d8 <udp_new_port+0x68>)
 800f0ca:	881b      	ldrh	r3, [r3, #0]
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	370c      	adds	r7, #12
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d6:	4770      	bx	lr
 800f0d8:	2000002c 	.word	0x2000002c
 800f0dc:	20018c40 	.word	0x20018c40

0800f0e0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b084      	sub	sp, #16
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	60f8      	str	r0, [r7, #12]
 800f0e8:	60b9      	str	r1, [r7, #8]
 800f0ea:	4613      	mov	r3, r2
 800f0ec:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d105      	bne.n	800f100 <udp_input_local_match+0x20>
 800f0f4:	4b27      	ldr	r3, [pc, #156]	; (800f194 <udp_input_local_match+0xb4>)
 800f0f6:	2287      	movs	r2, #135	; 0x87
 800f0f8:	4927      	ldr	r1, [pc, #156]	; (800f198 <udp_input_local_match+0xb8>)
 800f0fa:	4828      	ldr	r0, [pc, #160]	; (800f19c <udp_input_local_match+0xbc>)
 800f0fc:	f005 f8ca 	bl	8014294 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d105      	bne.n	800f112 <udp_input_local_match+0x32>
 800f106:	4b23      	ldr	r3, [pc, #140]	; (800f194 <udp_input_local_match+0xb4>)
 800f108:	2288      	movs	r2, #136	; 0x88
 800f10a:	4925      	ldr	r1, [pc, #148]	; (800f1a0 <udp_input_local_match+0xc0>)
 800f10c:	4823      	ldr	r0, [pc, #140]	; (800f19c <udp_input_local_match+0xbc>)
 800f10e:	f005 f8c1 	bl	8014294 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	7a1b      	ldrb	r3, [r3, #8]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d00b      	beq.n	800f132 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	7a1a      	ldrb	r2, [r3, #8]
 800f11e:	4b21      	ldr	r3, [pc, #132]	; (800f1a4 <udp_input_local_match+0xc4>)
 800f120:	685b      	ldr	r3, [r3, #4]
 800f122:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f126:	3301      	adds	r3, #1
 800f128:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d001      	beq.n	800f132 <udp_input_local_match+0x52>
    return 0;
 800f12e:	2300      	movs	r3, #0
 800f130:	e02b      	b.n	800f18a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f132:	79fb      	ldrb	r3, [r7, #7]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d018      	beq.n	800f16a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d013      	beq.n	800f166 <udp_input_local_match+0x86>
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d00f      	beq.n	800f166 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f146:	4b17      	ldr	r3, [pc, #92]	; (800f1a4 <udp_input_local_match+0xc4>)
 800f148:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f14e:	d00a      	beq.n	800f166 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	681a      	ldr	r2, [r3, #0]
 800f154:	4b13      	ldr	r3, [pc, #76]	; (800f1a4 <udp_input_local_match+0xc4>)
 800f156:	695b      	ldr	r3, [r3, #20]
 800f158:	405a      	eors	r2, r3
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	3308      	adds	r3, #8
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f162:	2b00      	cmp	r3, #0
 800f164:	d110      	bne.n	800f188 <udp_input_local_match+0xa8>
          return 1;
 800f166:	2301      	movs	r3, #1
 800f168:	e00f      	b.n	800f18a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d009      	beq.n	800f184 <udp_input_local_match+0xa4>
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d005      	beq.n	800f184 <udp_input_local_match+0xa4>
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	681a      	ldr	r2, [r3, #0]
 800f17c:	4b09      	ldr	r3, [pc, #36]	; (800f1a4 <udp_input_local_match+0xc4>)
 800f17e:	695b      	ldr	r3, [r3, #20]
 800f180:	429a      	cmp	r2, r3
 800f182:	d101      	bne.n	800f188 <udp_input_local_match+0xa8>
        return 1;
 800f184:	2301      	movs	r3, #1
 800f186:	e000      	b.n	800f18a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f188:	2300      	movs	r3, #0
}
 800f18a:	4618      	mov	r0, r3
 800f18c:	3710      	adds	r7, #16
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}
 800f192:	bf00      	nop
 800f194:	08017230 	.word	0x08017230
 800f198:	08017260 	.word	0x08017260
 800f19c:	08017284 	.word	0x08017284
 800f1a0:	080172ac 	.word	0x080172ac
 800f1a4:	20015470 	.word	0x20015470

0800f1a8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f1a8:	b590      	push	{r4, r7, lr}
 800f1aa:	b08d      	sub	sp, #52	; 0x34
 800f1ac:	af02      	add	r7, sp, #8
 800f1ae:	6078      	str	r0, [r7, #4]
 800f1b0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d105      	bne.n	800f1c8 <udp_input+0x20>
 800f1bc:	4b7c      	ldr	r3, [pc, #496]	; (800f3b0 <udp_input+0x208>)
 800f1be:	22cf      	movs	r2, #207	; 0xcf
 800f1c0:	497c      	ldr	r1, [pc, #496]	; (800f3b4 <udp_input+0x20c>)
 800f1c2:	487d      	ldr	r0, [pc, #500]	; (800f3b8 <udp_input+0x210>)
 800f1c4:	f005 f866 	bl	8014294 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d105      	bne.n	800f1da <udp_input+0x32>
 800f1ce:	4b78      	ldr	r3, [pc, #480]	; (800f3b0 <udp_input+0x208>)
 800f1d0:	22d0      	movs	r2, #208	; 0xd0
 800f1d2:	497a      	ldr	r1, [pc, #488]	; (800f3bc <udp_input+0x214>)
 800f1d4:	4878      	ldr	r0, [pc, #480]	; (800f3b8 <udp_input+0x210>)
 800f1d6:	f005 f85d 	bl	8014294 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	895b      	ldrh	r3, [r3, #10]
 800f1de:	2b07      	cmp	r3, #7
 800f1e0:	d803      	bhi.n	800f1ea <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f7fa f9b2 	bl	800954c <pbuf_free>
    goto end;
 800f1e8:	e0de      	b.n	800f3a8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f1f0:	4b73      	ldr	r3, [pc, #460]	; (800f3c0 <udp_input+0x218>)
 800f1f2:	695b      	ldr	r3, [r3, #20]
 800f1f4:	4a72      	ldr	r2, [pc, #456]	; (800f3c0 <udp_input+0x218>)
 800f1f6:	6812      	ldr	r2, [r2, #0]
 800f1f8:	4611      	mov	r1, r2
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f003 fe06 	bl	8012e0c <ip4_addr_isbroadcast_u32>
 800f200:	4603      	mov	r3, r0
 800f202:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f204:	697b      	ldr	r3, [r7, #20]
 800f206:	881b      	ldrh	r3, [r3, #0]
 800f208:	b29b      	uxth	r3, r3
 800f20a:	4618      	mov	r0, r3
 800f20c:	f7f8 fda0 	bl	8007d50 <lwip_htons>
 800f210:	4603      	mov	r3, r0
 800f212:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	885b      	ldrh	r3, [r3, #2]
 800f218:	b29b      	uxth	r3, r3
 800f21a:	4618      	mov	r0, r3
 800f21c:	f7f8 fd98 	bl	8007d50 <lwip_htons>
 800f220:	4603      	mov	r3, r0
 800f222:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f224:	2300      	movs	r3, #0
 800f226:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800f228:	2300      	movs	r3, #0
 800f22a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f22c:	2300      	movs	r3, #0
 800f22e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f230:	4b64      	ldr	r3, [pc, #400]	; (800f3c4 <udp_input+0x21c>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	627b      	str	r3, [r7, #36]	; 0x24
 800f236:	e054      	b.n	800f2e2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f23a:	8a5b      	ldrh	r3, [r3, #18]
 800f23c:	89fa      	ldrh	r2, [r7, #14]
 800f23e:	429a      	cmp	r2, r3
 800f240:	d14a      	bne.n	800f2d8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f242:	7cfb      	ldrb	r3, [r7, #19]
 800f244:	461a      	mov	r2, r3
 800f246:	6839      	ldr	r1, [r7, #0]
 800f248:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f24a:	f7ff ff49 	bl	800f0e0 <udp_input_local_match>
 800f24e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f250:	2b00      	cmp	r3, #0
 800f252:	d041      	beq.n	800f2d8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f256:	7c1b      	ldrb	r3, [r3, #16]
 800f258:	f003 0304 	and.w	r3, r3, #4
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d11d      	bne.n	800f29c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f260:	69fb      	ldr	r3, [r7, #28]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d102      	bne.n	800f26c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f268:	61fb      	str	r3, [r7, #28]
 800f26a:	e017      	b.n	800f29c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f26c:	7cfb      	ldrb	r3, [r7, #19]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d014      	beq.n	800f29c <udp_input+0xf4>
 800f272:	4b53      	ldr	r3, [pc, #332]	; (800f3c0 <udp_input+0x218>)
 800f274:	695b      	ldr	r3, [r3, #20]
 800f276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f27a:	d10f      	bne.n	800f29c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f27c:	69fb      	ldr	r3, [r7, #28]
 800f27e:	681a      	ldr	r2, [r3, #0]
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	3304      	adds	r3, #4
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	429a      	cmp	r2, r3
 800f288:	d008      	beq.n	800f29c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f28c:	681a      	ldr	r2, [r3, #0]
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	3304      	adds	r3, #4
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	429a      	cmp	r2, r3
 800f296:	d101      	bne.n	800f29c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f29a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f29e:	8a9b      	ldrh	r3, [r3, #20]
 800f2a0:	8a3a      	ldrh	r2, [r7, #16]
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d118      	bne.n	800f2d8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d005      	beq.n	800f2ba <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2b0:	685a      	ldr	r2, [r3, #4]
 800f2b2:	4b43      	ldr	r3, [pc, #268]	; (800f3c0 <udp_input+0x218>)
 800f2b4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f2b6:	429a      	cmp	r2, r3
 800f2b8:	d10e      	bne.n	800f2d8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f2ba:	6a3b      	ldr	r3, [r7, #32]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d014      	beq.n	800f2ea <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c2:	68da      	ldr	r2, [r3, #12]
 800f2c4:	6a3b      	ldr	r3, [r7, #32]
 800f2c6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f2c8:	4b3e      	ldr	r3, [pc, #248]	; (800f3c4 <udp_input+0x21c>)
 800f2ca:	681a      	ldr	r2, [r3, #0]
 800f2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ce:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f2d0:	4a3c      	ldr	r2, [pc, #240]	; (800f3c4 <udp_input+0x21c>)
 800f2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f2d6:	e008      	b.n	800f2ea <udp_input+0x142>
      }
    }

    prev = pcb;
 800f2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2da:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2de:	68db      	ldr	r3, [r3, #12]
 800f2e0:	627b      	str	r3, [r7, #36]	; 0x24
 800f2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d1a7      	bne.n	800f238 <udp_input+0x90>
 800f2e8:	e000      	b.n	800f2ec <udp_input+0x144>
        break;
 800f2ea:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d101      	bne.n	800f2f6 <udp_input+0x14e>
    pcb = uncon_pcb;
 800f2f2:	69fb      	ldr	r3, [r7, #28]
 800f2f4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d002      	beq.n	800f302 <udp_input+0x15a>
    for_us = 1;
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	76fb      	strb	r3, [r7, #27]
 800f300:	e00a      	b.n	800f318 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	3304      	adds	r3, #4
 800f306:	681a      	ldr	r2, [r3, #0]
 800f308:	4b2d      	ldr	r3, [pc, #180]	; (800f3c0 <udp_input+0x218>)
 800f30a:	695b      	ldr	r3, [r3, #20]
 800f30c:	429a      	cmp	r2, r3
 800f30e:	bf0c      	ite	eq
 800f310:	2301      	moveq	r3, #1
 800f312:	2300      	movne	r3, #0
 800f314:	b2db      	uxtb	r3, r3
 800f316:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f318:	7efb      	ldrb	r3, [r7, #27]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d041      	beq.n	800f3a2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f31e:	2108      	movs	r1, #8
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	f7fa f88d 	bl	8009440 <pbuf_remove_header>
 800f326:	4603      	mov	r3, r0
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d00a      	beq.n	800f342 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f32c:	4b20      	ldr	r3, [pc, #128]	; (800f3b0 <udp_input+0x208>)
 800f32e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800f332:	4925      	ldr	r1, [pc, #148]	; (800f3c8 <udp_input+0x220>)
 800f334:	4820      	ldr	r0, [pc, #128]	; (800f3b8 <udp_input+0x210>)
 800f336:	f004 ffad 	bl	8014294 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f7fa f906 	bl	800954c <pbuf_free>
      goto end;
 800f340:	e032      	b.n	800f3a8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f344:	2b00      	cmp	r3, #0
 800f346:	d012      	beq.n	800f36e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f34a:	699b      	ldr	r3, [r3, #24]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d00a      	beq.n	800f366 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f352:	699c      	ldr	r4, [r3, #24]
 800f354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f356:	69d8      	ldr	r0, [r3, #28]
 800f358:	8a3b      	ldrh	r3, [r7, #16]
 800f35a:	9300      	str	r3, [sp, #0]
 800f35c:	4b1b      	ldr	r3, [pc, #108]	; (800f3cc <udp_input+0x224>)
 800f35e:	687a      	ldr	r2, [r7, #4]
 800f360:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f362:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f364:	e021      	b.n	800f3aa <udp_input+0x202>
        pbuf_free(p);
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f7fa f8f0 	bl	800954c <pbuf_free>
        goto end;
 800f36c:	e01c      	b.n	800f3a8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f36e:	7cfb      	ldrb	r3, [r7, #19]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d112      	bne.n	800f39a <udp_input+0x1f2>
 800f374:	4b12      	ldr	r3, [pc, #72]	; (800f3c0 <udp_input+0x218>)
 800f376:	695b      	ldr	r3, [r3, #20]
 800f378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f37c:	2be0      	cmp	r3, #224	; 0xe0
 800f37e:	d00c      	beq.n	800f39a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f380:	4b0f      	ldr	r3, [pc, #60]	; (800f3c0 <udp_input+0x218>)
 800f382:	899b      	ldrh	r3, [r3, #12]
 800f384:	3308      	adds	r3, #8
 800f386:	b29b      	uxth	r3, r3
 800f388:	b21b      	sxth	r3, r3
 800f38a:	4619      	mov	r1, r3
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f7fa f8ca 	bl	8009526 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f392:	2103      	movs	r1, #3
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f003 f9fb 	bl	8012790 <icmp_dest_unreach>
      pbuf_free(p);
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f7fa f8d6 	bl	800954c <pbuf_free>
  return;
 800f3a0:	e003      	b.n	800f3aa <udp_input+0x202>
    pbuf_free(p);
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f7fa f8d2 	bl	800954c <pbuf_free>
  return;
 800f3a8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f3aa:	372c      	adds	r7, #44	; 0x2c
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd90      	pop	{r4, r7, pc}
 800f3b0:	08017230 	.word	0x08017230
 800f3b4:	080172d4 	.word	0x080172d4
 800f3b8:	08017284 	.word	0x08017284
 800f3bc:	080172ec 	.word	0x080172ec
 800f3c0:	20015470 	.word	0x20015470
 800f3c4:	20018c40 	.word	0x20018c40
 800f3c8:	08017308 	.word	0x08017308
 800f3cc:	20015480 	.word	0x20015480

0800f3d0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b088      	sub	sp, #32
 800f3d4:	af02      	add	r7, sp, #8
 800f3d6:	60f8      	str	r0, [r7, #12]
 800f3d8:	60b9      	str	r1, [r7, #8]
 800f3da:	607a      	str	r2, [r7, #4]
 800f3dc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d109      	bne.n	800f3f8 <udp_sendto_if+0x28>
 800f3e4:	4b2e      	ldr	r3, [pc, #184]	; (800f4a0 <udp_sendto_if+0xd0>)
 800f3e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f3ea:	492e      	ldr	r1, [pc, #184]	; (800f4a4 <udp_sendto_if+0xd4>)
 800f3ec:	482e      	ldr	r0, [pc, #184]	; (800f4a8 <udp_sendto_if+0xd8>)
 800f3ee:	f004 ff51 	bl	8014294 <iprintf>
 800f3f2:	f06f 030f 	mvn.w	r3, #15
 800f3f6:	e04f      	b.n	800f498 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d109      	bne.n	800f412 <udp_sendto_if+0x42>
 800f3fe:	4b28      	ldr	r3, [pc, #160]	; (800f4a0 <udp_sendto_if+0xd0>)
 800f400:	f240 2281 	movw	r2, #641	; 0x281
 800f404:	4929      	ldr	r1, [pc, #164]	; (800f4ac <udp_sendto_if+0xdc>)
 800f406:	4828      	ldr	r0, [pc, #160]	; (800f4a8 <udp_sendto_if+0xd8>)
 800f408:	f004 ff44 	bl	8014294 <iprintf>
 800f40c:	f06f 030f 	mvn.w	r3, #15
 800f410:	e042      	b.n	800f498 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d109      	bne.n	800f42c <udp_sendto_if+0x5c>
 800f418:	4b21      	ldr	r3, [pc, #132]	; (800f4a0 <udp_sendto_if+0xd0>)
 800f41a:	f240 2282 	movw	r2, #642	; 0x282
 800f41e:	4924      	ldr	r1, [pc, #144]	; (800f4b0 <udp_sendto_if+0xe0>)
 800f420:	4821      	ldr	r0, [pc, #132]	; (800f4a8 <udp_sendto_if+0xd8>)
 800f422:	f004 ff37 	bl	8014294 <iprintf>
 800f426:	f06f 030f 	mvn.w	r3, #15
 800f42a:	e035      	b.n	800f498 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800f42c:	6a3b      	ldr	r3, [r7, #32]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d109      	bne.n	800f446 <udp_sendto_if+0x76>
 800f432:	4b1b      	ldr	r3, [pc, #108]	; (800f4a0 <udp_sendto_if+0xd0>)
 800f434:	f240 2283 	movw	r2, #643	; 0x283
 800f438:	491e      	ldr	r1, [pc, #120]	; (800f4b4 <udp_sendto_if+0xe4>)
 800f43a:	481b      	ldr	r0, [pc, #108]	; (800f4a8 <udp_sendto_if+0xd8>)
 800f43c:	f004 ff2a 	bl	8014294 <iprintf>
 800f440:	f06f 030f 	mvn.w	r3, #15
 800f444:	e028      	b.n	800f498 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d009      	beq.n	800f460 <udp_sendto_if+0x90>
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d005      	beq.n	800f460 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f45c:	2be0      	cmp	r3, #224	; 0xe0
 800f45e:	d103      	bne.n	800f468 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800f460:	6a3b      	ldr	r3, [r7, #32]
 800f462:	3304      	adds	r3, #4
 800f464:	617b      	str	r3, [r7, #20]
 800f466:	e00b      	b.n	800f480 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	681a      	ldr	r2, [r3, #0]
 800f46c:	6a3b      	ldr	r3, [r7, #32]
 800f46e:	3304      	adds	r3, #4
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	429a      	cmp	r2, r3
 800f474:	d002      	beq.n	800f47c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800f476:	f06f 0303 	mvn.w	r3, #3
 800f47a:	e00d      	b.n	800f498 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800f480:	887a      	ldrh	r2, [r7, #2]
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	9301      	str	r3, [sp, #4]
 800f486:	6a3b      	ldr	r3, [r7, #32]
 800f488:	9300      	str	r3, [sp, #0]
 800f48a:	4613      	mov	r3, r2
 800f48c:	687a      	ldr	r2, [r7, #4]
 800f48e:	68b9      	ldr	r1, [r7, #8]
 800f490:	68f8      	ldr	r0, [r7, #12]
 800f492:	f000 f811 	bl	800f4b8 <udp_sendto_if_src>
 800f496:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f498:	4618      	mov	r0, r3
 800f49a:	3718      	adds	r7, #24
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd80      	pop	{r7, pc}
 800f4a0:	08017230 	.word	0x08017230
 800f4a4:	080173a4 	.word	0x080173a4
 800f4a8:	08017284 	.word	0x08017284
 800f4ac:	080173c0 	.word	0x080173c0
 800f4b0:	080173dc 	.word	0x080173dc
 800f4b4:	080173fc 	.word	0x080173fc

0800f4b8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b08c      	sub	sp, #48	; 0x30
 800f4bc:	af04      	add	r7, sp, #16
 800f4be:	60f8      	str	r0, [r7, #12]
 800f4c0:	60b9      	str	r1, [r7, #8]
 800f4c2:	607a      	str	r2, [r7, #4]
 800f4c4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d109      	bne.n	800f4e0 <udp_sendto_if_src+0x28>
 800f4cc:	4b65      	ldr	r3, [pc, #404]	; (800f664 <udp_sendto_if_src+0x1ac>)
 800f4ce:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f4d2:	4965      	ldr	r1, [pc, #404]	; (800f668 <udp_sendto_if_src+0x1b0>)
 800f4d4:	4865      	ldr	r0, [pc, #404]	; (800f66c <udp_sendto_if_src+0x1b4>)
 800f4d6:	f004 fedd 	bl	8014294 <iprintf>
 800f4da:	f06f 030f 	mvn.w	r3, #15
 800f4de:	e0bc      	b.n	800f65a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d109      	bne.n	800f4fa <udp_sendto_if_src+0x42>
 800f4e6:	4b5f      	ldr	r3, [pc, #380]	; (800f664 <udp_sendto_if_src+0x1ac>)
 800f4e8:	f240 22d2 	movw	r2, #722	; 0x2d2
 800f4ec:	4960      	ldr	r1, [pc, #384]	; (800f670 <udp_sendto_if_src+0x1b8>)
 800f4ee:	485f      	ldr	r0, [pc, #380]	; (800f66c <udp_sendto_if_src+0x1b4>)
 800f4f0:	f004 fed0 	bl	8014294 <iprintf>
 800f4f4:	f06f 030f 	mvn.w	r3, #15
 800f4f8:	e0af      	b.n	800f65a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d109      	bne.n	800f514 <udp_sendto_if_src+0x5c>
 800f500:	4b58      	ldr	r3, [pc, #352]	; (800f664 <udp_sendto_if_src+0x1ac>)
 800f502:	f240 22d3 	movw	r2, #723	; 0x2d3
 800f506:	495b      	ldr	r1, [pc, #364]	; (800f674 <udp_sendto_if_src+0x1bc>)
 800f508:	4858      	ldr	r0, [pc, #352]	; (800f66c <udp_sendto_if_src+0x1b4>)
 800f50a:	f004 fec3 	bl	8014294 <iprintf>
 800f50e:	f06f 030f 	mvn.w	r3, #15
 800f512:	e0a2      	b.n	800f65a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800f514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f516:	2b00      	cmp	r3, #0
 800f518:	d109      	bne.n	800f52e <udp_sendto_if_src+0x76>
 800f51a:	4b52      	ldr	r3, [pc, #328]	; (800f664 <udp_sendto_if_src+0x1ac>)
 800f51c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800f520:	4955      	ldr	r1, [pc, #340]	; (800f678 <udp_sendto_if_src+0x1c0>)
 800f522:	4852      	ldr	r0, [pc, #328]	; (800f66c <udp_sendto_if_src+0x1b4>)
 800f524:	f004 feb6 	bl	8014294 <iprintf>
 800f528:	f06f 030f 	mvn.w	r3, #15
 800f52c:	e095      	b.n	800f65a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800f52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f530:	2b00      	cmp	r3, #0
 800f532:	d109      	bne.n	800f548 <udp_sendto_if_src+0x90>
 800f534:	4b4b      	ldr	r3, [pc, #300]	; (800f664 <udp_sendto_if_src+0x1ac>)
 800f536:	f240 22d5 	movw	r2, #725	; 0x2d5
 800f53a:	4950      	ldr	r1, [pc, #320]	; (800f67c <udp_sendto_if_src+0x1c4>)
 800f53c:	484b      	ldr	r0, [pc, #300]	; (800f66c <udp_sendto_if_src+0x1b4>)
 800f53e:	f004 fea9 	bl	8014294 <iprintf>
 800f542:	f06f 030f 	mvn.w	r3, #15
 800f546:	e088      	b.n	800f65a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	8a5b      	ldrh	r3, [r3, #18]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d10f      	bne.n	800f570 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f550:	68f9      	ldr	r1, [r7, #12]
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	8a5b      	ldrh	r3, [r3, #18]
 800f556:	461a      	mov	r2, r3
 800f558:	68f8      	ldr	r0, [r7, #12]
 800f55a:	f000 f893 	bl	800f684 <udp_bind>
 800f55e:	4603      	mov	r3, r0
 800f560:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800f562:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d002      	beq.n	800f570 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800f56a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f56e:	e074      	b.n	800f65a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	891b      	ldrh	r3, [r3, #8]
 800f574:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800f578:	4293      	cmp	r3, r2
 800f57a:	d902      	bls.n	800f582 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800f57c:	f04f 33ff 	mov.w	r3, #4294967295
 800f580:	e06b      	b.n	800f65a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800f582:	2108      	movs	r1, #8
 800f584:	68b8      	ldr	r0, [r7, #8]
 800f586:	f7f9 ff4b 	bl	8009420 <pbuf_add_header>
 800f58a:	4603      	mov	r3, r0
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d015      	beq.n	800f5bc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800f590:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f594:	2108      	movs	r1, #8
 800f596:	2022      	movs	r0, #34	; 0x22
 800f598:	f7f9 fcf4 	bl	8008f84 <pbuf_alloc>
 800f59c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800f59e:	69fb      	ldr	r3, [r7, #28]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d102      	bne.n	800f5aa <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800f5a4:	f04f 33ff 	mov.w	r3, #4294967295
 800f5a8:	e057      	b.n	800f65a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	891b      	ldrh	r3, [r3, #8]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d006      	beq.n	800f5c0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800f5b2:	68b9      	ldr	r1, [r7, #8]
 800f5b4:	69f8      	ldr	r0, [r7, #28]
 800f5b6:	f7fa f8ed 	bl	8009794 <pbuf_chain>
 800f5ba:	e001      	b.n	800f5c0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800f5bc:	68bb      	ldr	r3, [r7, #8]
 800f5be:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800f5c0:	69fb      	ldr	r3, [r7, #28]
 800f5c2:	895b      	ldrh	r3, [r3, #10]
 800f5c4:	2b07      	cmp	r3, #7
 800f5c6:	d806      	bhi.n	800f5d6 <udp_sendto_if_src+0x11e>
 800f5c8:	4b26      	ldr	r3, [pc, #152]	; (800f664 <udp_sendto_if_src+0x1ac>)
 800f5ca:	f240 320d 	movw	r2, #781	; 0x30d
 800f5ce:	492c      	ldr	r1, [pc, #176]	; (800f680 <udp_sendto_if_src+0x1c8>)
 800f5d0:	4826      	ldr	r0, [pc, #152]	; (800f66c <udp_sendto_if_src+0x1b4>)
 800f5d2:	f004 fe5f 	bl	8014294 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800f5d6:	69fb      	ldr	r3, [r7, #28]
 800f5d8:	685b      	ldr	r3, [r3, #4]
 800f5da:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	8a5b      	ldrh	r3, [r3, #18]
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	f7f8 fbb5 	bl	8007d50 <lwip_htons>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	461a      	mov	r2, r3
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800f5ee:	887b      	ldrh	r3, [r7, #2]
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f7f8 fbad 	bl	8007d50 <lwip_htons>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	461a      	mov	r2, r3
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	2200      	movs	r2, #0
 800f602:	719a      	strb	r2, [r3, #6]
 800f604:	2200      	movs	r2, #0
 800f606:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800f608:	69fb      	ldr	r3, [r7, #28]
 800f60a:	891b      	ldrh	r3, [r3, #8]
 800f60c:	4618      	mov	r0, r3
 800f60e:	f7f8 fb9f 	bl	8007d50 <lwip_htons>
 800f612:	4603      	mov	r3, r0
 800f614:	461a      	mov	r2, r3
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800f61a:	2311      	movs	r3, #17
 800f61c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	7adb      	ldrb	r3, [r3, #11]
 800f622:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	7a9b      	ldrb	r3, [r3, #10]
 800f628:	7cb9      	ldrb	r1, [r7, #18]
 800f62a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f62c:	9202      	str	r2, [sp, #8]
 800f62e:	7cfa      	ldrb	r2, [r7, #19]
 800f630:	9201      	str	r2, [sp, #4]
 800f632:	9300      	str	r3, [sp, #0]
 800f634:	460b      	mov	r3, r1
 800f636:	687a      	ldr	r2, [r7, #4]
 800f638:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f63a:	69f8      	ldr	r0, [r7, #28]
 800f63c:	f003 fb38 	bl	8012cb0 <ip4_output_if_src>
 800f640:	4603      	mov	r3, r0
 800f642:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800f644:	69fa      	ldr	r2, [r7, #28]
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	429a      	cmp	r2, r3
 800f64a:	d004      	beq.n	800f656 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800f64c:	69f8      	ldr	r0, [r7, #28]
 800f64e:	f7f9 ff7d 	bl	800954c <pbuf_free>
    q = NULL;
 800f652:	2300      	movs	r3, #0
 800f654:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800f656:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	3720      	adds	r7, #32
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}
 800f662:	bf00      	nop
 800f664:	08017230 	.word	0x08017230
 800f668:	0801741c 	.word	0x0801741c
 800f66c:	08017284 	.word	0x08017284
 800f670:	0801743c 	.word	0x0801743c
 800f674:	0801745c 	.word	0x0801745c
 800f678:	08017480 	.word	0x08017480
 800f67c:	080174a4 	.word	0x080174a4
 800f680:	080174c8 	.word	0x080174c8

0800f684 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b086      	sub	sp, #24
 800f688:	af00      	add	r7, sp, #0
 800f68a:	60f8      	str	r0, [r7, #12]
 800f68c:	60b9      	str	r1, [r7, #8]
 800f68e:	4613      	mov	r3, r2
 800f690:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d101      	bne.n	800f69c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800f698:	4b39      	ldr	r3, [pc, #228]	; (800f780 <udp_bind+0xfc>)
 800f69a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d109      	bne.n	800f6b6 <udp_bind+0x32>
 800f6a2:	4b38      	ldr	r3, [pc, #224]	; (800f784 <udp_bind+0x100>)
 800f6a4:	f240 32b7 	movw	r2, #951	; 0x3b7
 800f6a8:	4937      	ldr	r1, [pc, #220]	; (800f788 <udp_bind+0x104>)
 800f6aa:	4838      	ldr	r0, [pc, #224]	; (800f78c <udp_bind+0x108>)
 800f6ac:	f004 fdf2 	bl	8014294 <iprintf>
 800f6b0:	f06f 030f 	mvn.w	r3, #15
 800f6b4:	e060      	b.n	800f778 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f6ba:	4b35      	ldr	r3, [pc, #212]	; (800f790 <udp_bind+0x10c>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	617b      	str	r3, [r7, #20]
 800f6c0:	e009      	b.n	800f6d6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800f6c2:	68fa      	ldr	r2, [r7, #12]
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	d102      	bne.n	800f6d0 <udp_bind+0x4c>
      rebind = 1;
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	74fb      	strb	r3, [r7, #19]
      break;
 800f6ce:	e005      	b.n	800f6dc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f6d0:	697b      	ldr	r3, [r7, #20]
 800f6d2:	68db      	ldr	r3, [r3, #12]
 800f6d4:	617b      	str	r3, [r7, #20]
 800f6d6:	697b      	ldr	r3, [r7, #20]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d1f2      	bne.n	800f6c2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800f6dc:	88fb      	ldrh	r3, [r7, #6]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d109      	bne.n	800f6f6 <udp_bind+0x72>
    port = udp_new_port();
 800f6e2:	f7ff fcc5 	bl	800f070 <udp_new_port>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f6ea:	88fb      	ldrh	r3, [r7, #6]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d12c      	bne.n	800f74a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800f6f0:	f06f 0307 	mvn.w	r3, #7
 800f6f4:	e040      	b.n	800f778 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f6f6:	4b26      	ldr	r3, [pc, #152]	; (800f790 <udp_bind+0x10c>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	617b      	str	r3, [r7, #20]
 800f6fc:	e022      	b.n	800f744 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800f6fe:	68fa      	ldr	r2, [r7, #12]
 800f700:	697b      	ldr	r3, [r7, #20]
 800f702:	429a      	cmp	r2, r3
 800f704:	d01b      	beq.n	800f73e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	8a5b      	ldrh	r3, [r3, #18]
 800f70a:	88fa      	ldrh	r2, [r7, #6]
 800f70c:	429a      	cmp	r2, r3
 800f70e:	d116      	bne.n	800f73e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	681a      	ldr	r2, [r3, #0]
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800f718:	429a      	cmp	r2, r3
 800f71a:	d00d      	beq.n	800f738 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d00a      	beq.n	800f738 <udp_bind+0xb4>
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d006      	beq.n	800f738 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f72a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d003      	beq.n	800f738 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d102      	bne.n	800f73e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800f738:	f06f 0307 	mvn.w	r3, #7
 800f73c:	e01c      	b.n	800f778 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f73e:	697b      	ldr	r3, [r7, #20]
 800f740:	68db      	ldr	r3, [r3, #12]
 800f742:	617b      	str	r3, [r7, #20]
 800f744:	697b      	ldr	r3, [r7, #20]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d1d9      	bne.n	800f6fe <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d002      	beq.n	800f756 <udp_bind+0xd2>
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	e000      	b.n	800f758 <udp_bind+0xd4>
 800f756:	2300      	movs	r3, #0
 800f758:	68fa      	ldr	r2, [r7, #12]
 800f75a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	88fa      	ldrh	r2, [r7, #6]
 800f760:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800f762:	7cfb      	ldrb	r3, [r7, #19]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d106      	bne.n	800f776 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800f768:	4b09      	ldr	r3, [pc, #36]	; (800f790 <udp_bind+0x10c>)
 800f76a:	681a      	ldr	r2, [r3, #0]
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800f770:	4a07      	ldr	r2, [pc, #28]	; (800f790 <udp_bind+0x10c>)
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800f776:	2300      	movs	r3, #0
}
 800f778:	4618      	mov	r0, r3
 800f77a:	3718      	adds	r7, #24
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}
 800f780:	0801813c 	.word	0x0801813c
 800f784:	08017230 	.word	0x08017230
 800f788:	080174f8 	.word	0x080174f8
 800f78c:	08017284 	.word	0x08017284
 800f790:	20018c40 	.word	0x20018c40

0800f794 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b086      	sub	sp, #24
 800f798:	af00      	add	r7, sp, #0
 800f79a:	60f8      	str	r0, [r7, #12]
 800f79c:	60b9      	str	r1, [r7, #8]
 800f79e:	4613      	mov	r3, r2
 800f7a0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d109      	bne.n	800f7bc <udp_connect+0x28>
 800f7a8:	4b2c      	ldr	r3, [pc, #176]	; (800f85c <udp_connect+0xc8>)
 800f7aa:	f240 4235 	movw	r2, #1077	; 0x435
 800f7ae:	492c      	ldr	r1, [pc, #176]	; (800f860 <udp_connect+0xcc>)
 800f7b0:	482c      	ldr	r0, [pc, #176]	; (800f864 <udp_connect+0xd0>)
 800f7b2:	f004 fd6f 	bl	8014294 <iprintf>
 800f7b6:	f06f 030f 	mvn.w	r3, #15
 800f7ba:	e04b      	b.n	800f854 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f7bc:	68bb      	ldr	r3, [r7, #8]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d109      	bne.n	800f7d6 <udp_connect+0x42>
 800f7c2:	4b26      	ldr	r3, [pc, #152]	; (800f85c <udp_connect+0xc8>)
 800f7c4:	f240 4236 	movw	r2, #1078	; 0x436
 800f7c8:	4927      	ldr	r1, [pc, #156]	; (800f868 <udp_connect+0xd4>)
 800f7ca:	4826      	ldr	r0, [pc, #152]	; (800f864 <udp_connect+0xd0>)
 800f7cc:	f004 fd62 	bl	8014294 <iprintf>
 800f7d0:	f06f 030f 	mvn.w	r3, #15
 800f7d4:	e03e      	b.n	800f854 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	8a5b      	ldrh	r3, [r3, #18]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d10f      	bne.n	800f7fe <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f7de:	68f9      	ldr	r1, [r7, #12]
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	8a5b      	ldrh	r3, [r3, #18]
 800f7e4:	461a      	mov	r2, r3
 800f7e6:	68f8      	ldr	r0, [r7, #12]
 800f7e8:	f7ff ff4c 	bl	800f684 <udp_bind>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800f7f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d002      	beq.n	800f7fe <udp_connect+0x6a>
      return err;
 800f7f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f7fc:	e02a      	b.n	800f854 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d002      	beq.n	800f80a <udp_connect+0x76>
 800f804:	68bb      	ldr	r3, [r7, #8]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	e000      	b.n	800f80c <udp_connect+0x78>
 800f80a:	2300      	movs	r3, #0
 800f80c:	68fa      	ldr	r2, [r7, #12]
 800f80e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	88fa      	ldrh	r2, [r7, #6]
 800f814:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	7c1b      	ldrb	r3, [r3, #16]
 800f81a:	f043 0304 	orr.w	r3, r3, #4
 800f81e:	b2da      	uxtb	r2, r3
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f824:	4b11      	ldr	r3, [pc, #68]	; (800f86c <udp_connect+0xd8>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	617b      	str	r3, [r7, #20]
 800f82a:	e008      	b.n	800f83e <udp_connect+0xaa>
    if (pcb == ipcb) {
 800f82c:	68fa      	ldr	r2, [r7, #12]
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	429a      	cmp	r2, r3
 800f832:	d101      	bne.n	800f838 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800f834:	2300      	movs	r3, #0
 800f836:	e00d      	b.n	800f854 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f838:	697b      	ldr	r3, [r7, #20]
 800f83a:	68db      	ldr	r3, [r3, #12]
 800f83c:	617b      	str	r3, [r7, #20]
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d1f3      	bne.n	800f82c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800f844:	4b09      	ldr	r3, [pc, #36]	; (800f86c <udp_connect+0xd8>)
 800f846:	681a      	ldr	r2, [r3, #0]
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800f84c:	4a07      	ldr	r2, [pc, #28]	; (800f86c <udp_connect+0xd8>)
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800f852:	2300      	movs	r3, #0
}
 800f854:	4618      	mov	r0, r3
 800f856:	3718      	adds	r7, #24
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}
 800f85c:	08017230 	.word	0x08017230
 800f860:	08017510 	.word	0x08017510
 800f864:	08017284 	.word	0x08017284
 800f868:	0801752c 	.word	0x0801752c
 800f86c:	20018c40 	.word	0x20018c40

0800f870 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b084      	sub	sp, #16
 800f874:	af00      	add	r7, sp, #0
 800f876:	60f8      	str	r0, [r7, #12]
 800f878:	60b9      	str	r1, [r7, #8]
 800f87a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d107      	bne.n	800f892 <udp_recv+0x22>
 800f882:	4b08      	ldr	r3, [pc, #32]	; (800f8a4 <udp_recv+0x34>)
 800f884:	f240 428a 	movw	r2, #1162	; 0x48a
 800f888:	4907      	ldr	r1, [pc, #28]	; (800f8a8 <udp_recv+0x38>)
 800f88a:	4808      	ldr	r0, [pc, #32]	; (800f8ac <udp_recv+0x3c>)
 800f88c:	f004 fd02 	bl	8014294 <iprintf>
 800f890:	e005      	b.n	800f89e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	68ba      	ldr	r2, [r7, #8]
 800f896:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	687a      	ldr	r2, [r7, #4]
 800f89c:	61da      	str	r2, [r3, #28]
}
 800f89e:	3710      	adds	r7, #16
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	bd80      	pop	{r7, pc}
 800f8a4:	08017230 	.word	0x08017230
 800f8a8:	08017564 	.word	0x08017564
 800f8ac:	08017284 	.word	0x08017284

0800f8b0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b084      	sub	sp, #16
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d107      	bne.n	800f8ce <udp_remove+0x1e>
 800f8be:	4b19      	ldr	r3, [pc, #100]	; (800f924 <udp_remove+0x74>)
 800f8c0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800f8c4:	4918      	ldr	r1, [pc, #96]	; (800f928 <udp_remove+0x78>)
 800f8c6:	4819      	ldr	r0, [pc, #100]	; (800f92c <udp_remove+0x7c>)
 800f8c8:	f004 fce4 	bl	8014294 <iprintf>
 800f8cc:	e026      	b.n	800f91c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800f8ce:	4b18      	ldr	r3, [pc, #96]	; (800f930 <udp_remove+0x80>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	687a      	ldr	r2, [r7, #4]
 800f8d4:	429a      	cmp	r2, r3
 800f8d6:	d105      	bne.n	800f8e4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800f8d8:	4b15      	ldr	r3, [pc, #84]	; (800f930 <udp_remove+0x80>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	68db      	ldr	r3, [r3, #12]
 800f8de:	4a14      	ldr	r2, [pc, #80]	; (800f930 <udp_remove+0x80>)
 800f8e0:	6013      	str	r3, [r2, #0]
 800f8e2:	e017      	b.n	800f914 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f8e4:	4b12      	ldr	r3, [pc, #72]	; (800f930 <udp_remove+0x80>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	60fb      	str	r3, [r7, #12]
 800f8ea:	e010      	b.n	800f90e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	68db      	ldr	r3, [r3, #12]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d009      	beq.n	800f908 <udp_remove+0x58>
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	68db      	ldr	r3, [r3, #12]
 800f8f8:	687a      	ldr	r2, [r7, #4]
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d104      	bne.n	800f908 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	68da      	ldr	r2, [r3, #12]
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	60da      	str	r2, [r3, #12]
        break;
 800f906:	e005      	b.n	800f914 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	68db      	ldr	r3, [r3, #12]
 800f90c:	60fb      	str	r3, [r7, #12]
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d1eb      	bne.n	800f8ec <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800f914:	6879      	ldr	r1, [r7, #4]
 800f916:	2000      	movs	r0, #0
 800f918:	f7f8 ff68 	bl	80087ec <memp_free>
}
 800f91c:	3710      	adds	r7, #16
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}
 800f922:	bf00      	nop
 800f924:	08017230 	.word	0x08017230
 800f928:	0801757c 	.word	0x0801757c
 800f92c:	08017284 	.word	0x08017284
 800f930:	20018c40 	.word	0x20018c40

0800f934 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b082      	sub	sp, #8
 800f938:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800f93a:	2000      	movs	r0, #0
 800f93c:	f7f8 fee0 	bl	8008700 <memp_malloc>
 800f940:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d007      	beq.n	800f958 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800f948:	2220      	movs	r2, #32
 800f94a:	2100      	movs	r1, #0
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f004 fc04 	bl	801415a <memset>
    pcb->ttl = UDP_TTL;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	22ff      	movs	r2, #255	; 0xff
 800f956:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800f958:	687b      	ldr	r3, [r7, #4]
}
 800f95a:	4618      	mov	r0, r3
 800f95c:	3708      	adds	r7, #8
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}
	...

0800f964 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f964:	b480      	push	{r7}
 800f966:	b085      	sub	sp, #20
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
 800f96c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d01e      	beq.n	800f9b2 <udp_netif_ip_addr_changed+0x4e>
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d01a      	beq.n	800f9b2 <udp_netif_ip_addr_changed+0x4e>
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d017      	beq.n	800f9b2 <udp_netif_ip_addr_changed+0x4e>
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d013      	beq.n	800f9b2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f98a:	4b0d      	ldr	r3, [pc, #52]	; (800f9c0 <udp_netif_ip_addr_changed+0x5c>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	60fb      	str	r3, [r7, #12]
 800f990:	e00c      	b.n	800f9ac <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	681a      	ldr	r2, [r3, #0]
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	429a      	cmp	r2, r3
 800f99c:	d103      	bne.n	800f9a6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	681a      	ldr	r2, [r3, #0]
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	68db      	ldr	r3, [r3, #12]
 800f9aa:	60fb      	str	r3, [r7, #12]
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d1ef      	bne.n	800f992 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f9b2:	bf00      	nop
 800f9b4:	3714      	adds	r7, #20
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9bc:	4770      	bx	lr
 800f9be:	bf00      	nop
 800f9c0:	20018c40 	.word	0x20018c40

0800f9c4 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800f9c8:	4b20      	ldr	r3, [pc, #128]	; (800fa4c <dhcp_inc_pcb_refcount+0x88>)
 800f9ca:	781b      	ldrb	r3, [r3, #0]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d133      	bne.n	800fa38 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800f9d0:	4b1f      	ldr	r3, [pc, #124]	; (800fa50 <dhcp_inc_pcb_refcount+0x8c>)
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d005      	beq.n	800f9e4 <dhcp_inc_pcb_refcount+0x20>
 800f9d8:	4b1e      	ldr	r3, [pc, #120]	; (800fa54 <dhcp_inc_pcb_refcount+0x90>)
 800f9da:	22e5      	movs	r2, #229	; 0xe5
 800f9dc:	491e      	ldr	r1, [pc, #120]	; (800fa58 <dhcp_inc_pcb_refcount+0x94>)
 800f9de:	481f      	ldr	r0, [pc, #124]	; (800fa5c <dhcp_inc_pcb_refcount+0x98>)
 800f9e0:	f004 fc58 	bl	8014294 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800f9e4:	f7ff ffa6 	bl	800f934 <udp_new>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	4a19      	ldr	r2, [pc, #100]	; (800fa50 <dhcp_inc_pcb_refcount+0x8c>)
 800f9ec:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800f9ee:	4b18      	ldr	r3, [pc, #96]	; (800fa50 <dhcp_inc_pcb_refcount+0x8c>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d102      	bne.n	800f9fc <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800f9f6:	f04f 33ff 	mov.w	r3, #4294967295
 800f9fa:	e024      	b.n	800fa46 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800f9fc:	4b14      	ldr	r3, [pc, #80]	; (800fa50 <dhcp_inc_pcb_refcount+0x8c>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	7a5a      	ldrb	r2, [r3, #9]
 800fa02:	4b13      	ldr	r3, [pc, #76]	; (800fa50 <dhcp_inc_pcb_refcount+0x8c>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	f042 0220 	orr.w	r2, r2, #32
 800fa0a:	b2d2      	uxtb	r2, r2
 800fa0c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800fa0e:	4b10      	ldr	r3, [pc, #64]	; (800fa50 <dhcp_inc_pcb_refcount+0x8c>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	2244      	movs	r2, #68	; 0x44
 800fa14:	4912      	ldr	r1, [pc, #72]	; (800fa60 <dhcp_inc_pcb_refcount+0x9c>)
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7ff fe34 	bl	800f684 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800fa1c:	4b0c      	ldr	r3, [pc, #48]	; (800fa50 <dhcp_inc_pcb_refcount+0x8c>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	2243      	movs	r2, #67	; 0x43
 800fa22:	490f      	ldr	r1, [pc, #60]	; (800fa60 <dhcp_inc_pcb_refcount+0x9c>)
 800fa24:	4618      	mov	r0, r3
 800fa26:	f7ff feb5 	bl	800f794 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800fa2a:	4b09      	ldr	r3, [pc, #36]	; (800fa50 <dhcp_inc_pcb_refcount+0x8c>)
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	2200      	movs	r2, #0
 800fa30:	490c      	ldr	r1, [pc, #48]	; (800fa64 <dhcp_inc_pcb_refcount+0xa0>)
 800fa32:	4618      	mov	r0, r3
 800fa34:	f7ff ff1c 	bl	800f870 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800fa38:	4b04      	ldr	r3, [pc, #16]	; (800fa4c <dhcp_inc_pcb_refcount+0x88>)
 800fa3a:	781b      	ldrb	r3, [r3, #0]
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	b2da      	uxtb	r2, r3
 800fa40:	4b02      	ldr	r3, [pc, #8]	; (800fa4c <dhcp_inc_pcb_refcount+0x88>)
 800fa42:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800fa44:	2300      	movs	r3, #0
}
 800fa46:	4618      	mov	r0, r3
 800fa48:	bd80      	pop	{r7, pc}
 800fa4a:	bf00      	nop
 800fa4c:	20018c70 	.word	0x20018c70
 800fa50:	20018c6c 	.word	0x20018c6c
 800fa54:	08017594 	.word	0x08017594
 800fa58:	080175cc 	.word	0x080175cc
 800fa5c:	080175f4 	.word	0x080175f4
 800fa60:	0801813c 	.word	0x0801813c
 800fa64:	080112f9 	.word	0x080112f9

0800fa68 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800fa6c:	4b0e      	ldr	r3, [pc, #56]	; (800faa8 <dhcp_dec_pcb_refcount+0x40>)
 800fa6e:	781b      	ldrb	r3, [r3, #0]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d105      	bne.n	800fa80 <dhcp_dec_pcb_refcount+0x18>
 800fa74:	4b0d      	ldr	r3, [pc, #52]	; (800faac <dhcp_dec_pcb_refcount+0x44>)
 800fa76:	22ff      	movs	r2, #255	; 0xff
 800fa78:	490d      	ldr	r1, [pc, #52]	; (800fab0 <dhcp_dec_pcb_refcount+0x48>)
 800fa7a:	480e      	ldr	r0, [pc, #56]	; (800fab4 <dhcp_dec_pcb_refcount+0x4c>)
 800fa7c:	f004 fc0a 	bl	8014294 <iprintf>
  dhcp_pcb_refcount--;
 800fa80:	4b09      	ldr	r3, [pc, #36]	; (800faa8 <dhcp_dec_pcb_refcount+0x40>)
 800fa82:	781b      	ldrb	r3, [r3, #0]
 800fa84:	3b01      	subs	r3, #1
 800fa86:	b2da      	uxtb	r2, r3
 800fa88:	4b07      	ldr	r3, [pc, #28]	; (800faa8 <dhcp_dec_pcb_refcount+0x40>)
 800fa8a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800fa8c:	4b06      	ldr	r3, [pc, #24]	; (800faa8 <dhcp_dec_pcb_refcount+0x40>)
 800fa8e:	781b      	ldrb	r3, [r3, #0]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d107      	bne.n	800faa4 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800fa94:	4b08      	ldr	r3, [pc, #32]	; (800fab8 <dhcp_dec_pcb_refcount+0x50>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f7ff ff09 	bl	800f8b0 <udp_remove>
    dhcp_pcb = NULL;
 800fa9e:	4b06      	ldr	r3, [pc, #24]	; (800fab8 <dhcp_dec_pcb_refcount+0x50>)
 800faa0:	2200      	movs	r2, #0
 800faa2:	601a      	str	r2, [r3, #0]
  }
}
 800faa4:	bf00      	nop
 800faa6:	bd80      	pop	{r7, pc}
 800faa8:	20018c70 	.word	0x20018c70
 800faac:	08017594 	.word	0x08017594
 800fab0:	0801761c 	.word	0x0801761c
 800fab4:	080175f4 	.word	0x080175f4
 800fab8:	20018c6c 	.word	0x20018c6c

0800fabc <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b084      	sub	sp, #16
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fac8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800faca:	210c      	movs	r1, #12
 800facc:	68f8      	ldr	r0, [r7, #12]
 800face:	f001 f855 	bl	8010b7c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800fad2:	4b06      	ldr	r3, [pc, #24]	; (800faec <dhcp_handle_nak+0x30>)
 800fad4:	4a05      	ldr	r2, [pc, #20]	; (800faec <dhcp_handle_nak+0x30>)
 800fad6:	4905      	ldr	r1, [pc, #20]	; (800faec <dhcp_handle_nak+0x30>)
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f7f9 f829 	bl	8008b30 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f000 fc48 	bl	8010374 <dhcp_discover>
}
 800fae4:	bf00      	nop
 800fae6:	3710      	adds	r7, #16
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}
 800faec:	0801813c 	.word	0x0801813c

0800faf0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b084      	sub	sp, #16
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fafc:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800fafe:	2108      	movs	r1, #8
 800fb00:	68f8      	ldr	r0, [r7, #12]
 800fb02:	f001 f83b 	bl	8010b7c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	331c      	adds	r3, #28
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	4619      	mov	r1, r3
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f002 fb3c 	bl	801218c <etharp_query>
 800fb14:	4603      	mov	r3, r0
 800fb16:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	799b      	ldrb	r3, [r3, #6]
 800fb1c:	2bff      	cmp	r3, #255	; 0xff
 800fb1e:	d005      	beq.n	800fb2c <dhcp_check+0x3c>
    dhcp->tries++;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	799b      	ldrb	r3, [r3, #6]
 800fb24:	3301      	adds	r3, #1
 800fb26:	b2da      	uxtb	r2, r3
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800fb2c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800fb30:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fb32:	893b      	ldrh	r3, [r7, #8]
 800fb34:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fb38:	4a06      	ldr	r2, [pc, #24]	; (800fb54 <dhcp_check+0x64>)
 800fb3a:	fb82 1203 	smull	r1, r2, r2, r3
 800fb3e:	1152      	asrs	r2, r2, #5
 800fb40:	17db      	asrs	r3, r3, #31
 800fb42:	1ad3      	subs	r3, r2, r3
 800fb44:	b29a      	uxth	r2, r3
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800fb4a:	bf00      	nop
 800fb4c:	3710      	adds	r7, #16
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	bd80      	pop	{r7, pc}
 800fb52:	bf00      	nop
 800fb54:	10624dd3 	.word	0x10624dd3

0800fb58 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b084      	sub	sp, #16
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb66:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800fb68:	4b0c      	ldr	r3, [pc, #48]	; (800fb9c <dhcp_handle_offer+0x44>)
 800fb6a:	789b      	ldrb	r3, [r3, #2]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d011      	beq.n	800fb94 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	2200      	movs	r2, #0
 800fb74:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800fb76:	4b0a      	ldr	r3, [pc, #40]	; (800fba0 <dhcp_handle_offer+0x48>)
 800fb78:	689b      	ldr	r3, [r3, #8]
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f7f8 f8fd 	bl	8007d7a <lwip_htonl>
 800fb80:	4602      	mov	r2, r0
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	691a      	ldr	r2, [r3, #16]
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	f000 f808 	bl	800fba4 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800fb94:	bf00      	nop
 800fb96:	3710      	adds	r7, #16
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}
 800fb9c:	20018c64 	.word	0x20018c64
 800fba0:	20018c44 	.word	0x20018c44

0800fba4 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800fba4:	b5b0      	push	{r4, r5, r7, lr}
 800fba6:	b08a      	sub	sp, #40	; 0x28
 800fba8:	af02      	add	r7, sp, #8
 800fbaa:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d109      	bne.n	800fbc6 <dhcp_select+0x22>
 800fbb2:	4b71      	ldr	r3, [pc, #452]	; (800fd78 <dhcp_select+0x1d4>)
 800fbb4:	f240 1277 	movw	r2, #375	; 0x177
 800fbb8:	4970      	ldr	r1, [pc, #448]	; (800fd7c <dhcp_select+0x1d8>)
 800fbba:	4871      	ldr	r0, [pc, #452]	; (800fd80 <dhcp_select+0x1dc>)
 800fbbc:	f004 fb6a 	bl	8014294 <iprintf>
 800fbc0:	f06f 030f 	mvn.w	r3, #15
 800fbc4:	e0d3      	b.n	800fd6e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbca:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800fbcc:	69bb      	ldr	r3, [r7, #24]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d109      	bne.n	800fbe6 <dhcp_select+0x42>
 800fbd2:	4b69      	ldr	r3, [pc, #420]	; (800fd78 <dhcp_select+0x1d4>)
 800fbd4:	f240 1279 	movw	r2, #377	; 0x179
 800fbd8:	496a      	ldr	r1, [pc, #424]	; (800fd84 <dhcp_select+0x1e0>)
 800fbda:	4869      	ldr	r0, [pc, #420]	; (800fd80 <dhcp_select+0x1dc>)
 800fbdc:	f004 fb5a 	bl	8014294 <iprintf>
 800fbe0:	f06f 0305 	mvn.w	r3, #5
 800fbe4:	e0c3      	b.n	800fd6e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800fbe6:	2101      	movs	r1, #1
 800fbe8:	69b8      	ldr	r0, [r7, #24]
 800fbea:	f000 ffc7 	bl	8010b7c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800fbee:	f107 030c 	add.w	r3, r7, #12
 800fbf2:	2203      	movs	r2, #3
 800fbf4:	69b9      	ldr	r1, [r7, #24]
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f001 fc4c 	bl	8011494 <dhcp_create_msg>
 800fbfc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	f000 8085 	beq.w	800fd10 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	685b      	ldr	r3, [r3, #4]
 800fc0a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fc0c:	89b8      	ldrh	r0, [r7, #12]
 800fc0e:	693b      	ldr	r3, [r7, #16]
 800fc10:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fc14:	2302      	movs	r3, #2
 800fc16:	2239      	movs	r2, #57	; 0x39
 800fc18:	f000 ffca 	bl	8010bb0 <dhcp_option>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800fc20:	89b8      	ldrh	r0, [r7, #12]
 800fc22:	693b      	ldr	r3, [r7, #16]
 800fc24:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc2c:	461a      	mov	r2, r3
 800fc2e:	f001 f819 	bl	8010c64 <dhcp_option_short>
 800fc32:	4603      	mov	r3, r0
 800fc34:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800fc36:	89b8      	ldrh	r0, [r7, #12]
 800fc38:	693b      	ldr	r3, [r7, #16]
 800fc3a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fc3e:	2304      	movs	r3, #4
 800fc40:	2232      	movs	r2, #50	; 0x32
 800fc42:	f000 ffb5 	bl	8010bb0 <dhcp_option>
 800fc46:	4603      	mov	r3, r0
 800fc48:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800fc4a:	89bc      	ldrh	r4, [r7, #12]
 800fc4c:	693b      	ldr	r3, [r7, #16]
 800fc4e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800fc52:	69bb      	ldr	r3, [r7, #24]
 800fc54:	69db      	ldr	r3, [r3, #28]
 800fc56:	4618      	mov	r0, r3
 800fc58:	f7f8 f88f 	bl	8007d7a <lwip_htonl>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	461a      	mov	r2, r3
 800fc60:	4629      	mov	r1, r5
 800fc62:	4620      	mov	r0, r4
 800fc64:	f001 f830 	bl	8010cc8 <dhcp_option_long>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800fc6c:	89b8      	ldrh	r0, [r7, #12]
 800fc6e:	693b      	ldr	r3, [r7, #16]
 800fc70:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fc74:	2304      	movs	r3, #4
 800fc76:	2236      	movs	r2, #54	; 0x36
 800fc78:	f000 ff9a 	bl	8010bb0 <dhcp_option>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800fc80:	89bc      	ldrh	r4, [r7, #12]
 800fc82:	693b      	ldr	r3, [r7, #16]
 800fc84:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800fc88:	69bb      	ldr	r3, [r7, #24]
 800fc8a:	699b      	ldr	r3, [r3, #24]
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f7f8 f874 	bl	8007d7a <lwip_htonl>
 800fc92:	4603      	mov	r3, r0
 800fc94:	461a      	mov	r2, r3
 800fc96:	4629      	mov	r1, r5
 800fc98:	4620      	mov	r0, r4
 800fc9a:	f001 f815 	bl	8010cc8 <dhcp_option_long>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fca2:	89b8      	ldrh	r0, [r7, #12]
 800fca4:	693b      	ldr	r3, [r7, #16]
 800fca6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fcaa:	2303      	movs	r3, #3
 800fcac:	2237      	movs	r2, #55	; 0x37
 800fcae:	f000 ff7f 	bl	8010bb0 <dhcp_option>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	77bb      	strb	r3, [r7, #30]
 800fcba:	e00e      	b.n	800fcda <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fcbc:	89b8      	ldrh	r0, [r7, #12]
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fcc4:	7fbb      	ldrb	r3, [r7, #30]
 800fcc6:	4a30      	ldr	r2, [pc, #192]	; (800fd88 <dhcp_select+0x1e4>)
 800fcc8:	5cd3      	ldrb	r3, [r2, r3]
 800fcca:	461a      	mov	r2, r3
 800fccc:	f000 ffa4 	bl	8010c18 <dhcp_option_byte>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fcd4:	7fbb      	ldrb	r3, [r7, #30]
 800fcd6:	3301      	adds	r3, #1
 800fcd8:	77bb      	strb	r3, [r7, #30]
 800fcda:	7fbb      	ldrb	r3, [r7, #30]
 800fcdc:	2b02      	cmp	r3, #2
 800fcde:	d9ed      	bls.n	800fcbc <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fce0:	89b8      	ldrh	r0, [r7, #12]
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	33f0      	adds	r3, #240	; 0xf0
 800fce6:	697a      	ldr	r2, [r7, #20]
 800fce8:	4619      	mov	r1, r3
 800fcea:	f001 fca9 	bl	8011640 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800fcee:	4b27      	ldr	r3, [pc, #156]	; (800fd8c <dhcp_select+0x1e8>)
 800fcf0:	6818      	ldr	r0, [r3, #0]
 800fcf2:	4b27      	ldr	r3, [pc, #156]	; (800fd90 <dhcp_select+0x1ec>)
 800fcf4:	9301      	str	r3, [sp, #4]
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	9300      	str	r3, [sp, #0]
 800fcfa:	2343      	movs	r3, #67	; 0x43
 800fcfc:	4a25      	ldr	r2, [pc, #148]	; (800fd94 <dhcp_select+0x1f0>)
 800fcfe:	6979      	ldr	r1, [r7, #20]
 800fd00:	f7ff fbda 	bl	800f4b8 <udp_sendto_if_src>
 800fd04:	4603      	mov	r3, r0
 800fd06:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800fd08:	6978      	ldr	r0, [r7, #20]
 800fd0a:	f7f9 fc1f 	bl	800954c <pbuf_free>
 800fd0e:	e001      	b.n	800fd14 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800fd10:	23ff      	movs	r3, #255	; 0xff
 800fd12:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800fd14:	69bb      	ldr	r3, [r7, #24]
 800fd16:	799b      	ldrb	r3, [r3, #6]
 800fd18:	2bff      	cmp	r3, #255	; 0xff
 800fd1a:	d005      	beq.n	800fd28 <dhcp_select+0x184>
    dhcp->tries++;
 800fd1c:	69bb      	ldr	r3, [r7, #24]
 800fd1e:	799b      	ldrb	r3, [r3, #6]
 800fd20:	3301      	adds	r3, #1
 800fd22:	b2da      	uxtb	r2, r3
 800fd24:	69bb      	ldr	r3, [r7, #24]
 800fd26:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800fd28:	69bb      	ldr	r3, [r7, #24]
 800fd2a:	799b      	ldrb	r3, [r3, #6]
 800fd2c:	2b05      	cmp	r3, #5
 800fd2e:	d80d      	bhi.n	800fd4c <dhcp_select+0x1a8>
 800fd30:	69bb      	ldr	r3, [r7, #24]
 800fd32:	799b      	ldrb	r3, [r3, #6]
 800fd34:	461a      	mov	r2, r3
 800fd36:	2301      	movs	r3, #1
 800fd38:	4093      	lsls	r3, r2
 800fd3a:	b29b      	uxth	r3, r3
 800fd3c:	461a      	mov	r2, r3
 800fd3e:	0152      	lsls	r2, r2, #5
 800fd40:	1ad2      	subs	r2, r2, r3
 800fd42:	0092      	lsls	r2, r2, #2
 800fd44:	4413      	add	r3, r2
 800fd46:	00db      	lsls	r3, r3, #3
 800fd48:	b29b      	uxth	r3, r3
 800fd4a:	e001      	b.n	800fd50 <dhcp_select+0x1ac>
 800fd4c:	f64e 2360 	movw	r3, #60000	; 0xea60
 800fd50:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fd52:	89fb      	ldrh	r3, [r7, #14]
 800fd54:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fd58:	4a0f      	ldr	r2, [pc, #60]	; (800fd98 <dhcp_select+0x1f4>)
 800fd5a:	fb82 1203 	smull	r1, r2, r2, r3
 800fd5e:	1152      	asrs	r2, r2, #5
 800fd60:	17db      	asrs	r3, r3, #31
 800fd62:	1ad3      	subs	r3, r2, r3
 800fd64:	b29a      	uxth	r2, r3
 800fd66:	69bb      	ldr	r3, [r7, #24]
 800fd68:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fd6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fd6e:	4618      	mov	r0, r3
 800fd70:	3720      	adds	r7, #32
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bdb0      	pop	{r4, r5, r7, pc}
 800fd76:	bf00      	nop
 800fd78:	08017594 	.word	0x08017594
 800fd7c:	08017640 	.word	0x08017640
 800fd80:	080175f4 	.word	0x080175f4
 800fd84:	0801765c 	.word	0x0801765c
 800fd88:	20000030 	.word	0x20000030
 800fd8c:	20018c6c 	.word	0x20018c6c
 800fd90:	0801813c 	.word	0x0801813c
 800fd94:	08018140 	.word	0x08018140
 800fd98:	10624dd3 	.word	0x10624dd3

0800fd9c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b082      	sub	sp, #8
 800fda0:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800fda2:	4b27      	ldr	r3, [pc, #156]	; (800fe40 <dhcp_coarse_tmr+0xa4>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	607b      	str	r3, [r7, #4]
 800fda8:	e042      	b.n	800fe30 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdae:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d039      	beq.n	800fe2a <dhcp_coarse_tmr+0x8e>
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	795b      	ldrb	r3, [r3, #5]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d035      	beq.n	800fe2a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800fdbe:	683b      	ldr	r3, [r7, #0]
 800fdc0:	8a9b      	ldrh	r3, [r3, #20]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d012      	beq.n	800fdec <dhcp_coarse_tmr+0x50>
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	8a5b      	ldrh	r3, [r3, #18]
 800fdca:	3301      	adds	r3, #1
 800fdcc:	b29a      	uxth	r2, r3
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	825a      	strh	r2, [r3, #18]
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	8a5a      	ldrh	r2, [r3, #18]
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	8a9b      	ldrh	r3, [r3, #20]
 800fdda:	429a      	cmp	r2, r3
 800fddc:	d106      	bne.n	800fdec <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f000 fe32 	bl	8010a48 <dhcp_release_and_stop>
        dhcp_start(netif);
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f000 f969 	bl	80100bc <dhcp_start>
 800fdea:	e01e      	b.n	800fe2a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	8a1b      	ldrh	r3, [r3, #16]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d00b      	beq.n	800fe0c <dhcp_coarse_tmr+0x70>
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	8a1b      	ldrh	r3, [r3, #16]
 800fdf8:	1e5a      	subs	r2, r3, #1
 800fdfa:	b291      	uxth	r1, r2
 800fdfc:	683a      	ldr	r2, [r7, #0]
 800fdfe:	8211      	strh	r1, [r2, #16]
 800fe00:	2b01      	cmp	r3, #1
 800fe02:	d103      	bne.n	800fe0c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f000 f8c6 	bl	800ff96 <dhcp_t2_timeout>
 800fe0a:	e00e      	b.n	800fe2a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	89db      	ldrh	r3, [r3, #14]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d00a      	beq.n	800fe2a <dhcp_coarse_tmr+0x8e>
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	89db      	ldrh	r3, [r3, #14]
 800fe18:	1e5a      	subs	r2, r3, #1
 800fe1a:	b291      	uxth	r1, r2
 800fe1c:	683a      	ldr	r2, [r7, #0]
 800fe1e:	81d1      	strh	r1, [r2, #14]
 800fe20:	2b01      	cmp	r3, #1
 800fe22:	d102      	bne.n	800fe2a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f000 f888 	bl	800ff3a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	607b      	str	r3, [r7, #4]
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d1b9      	bne.n	800fdaa <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800fe36:	bf00      	nop
 800fe38:	bf00      	nop
 800fe3a:	3708      	adds	r7, #8
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}
 800fe40:	20018bd8 	.word	0x20018bd8

0800fe44 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b082      	sub	sp, #8
 800fe48:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800fe4a:	4b16      	ldr	r3, [pc, #88]	; (800fea4 <dhcp_fine_tmr+0x60>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	607b      	str	r3, [r7, #4]
 800fe50:	e020      	b.n	800fe94 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe56:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d017      	beq.n	800fe8e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	891b      	ldrh	r3, [r3, #8]
 800fe62:	2b01      	cmp	r3, #1
 800fe64:	d906      	bls.n	800fe74 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	891b      	ldrh	r3, [r3, #8]
 800fe6a:	3b01      	subs	r3, #1
 800fe6c:	b29a      	uxth	r2, r3
 800fe6e:	683b      	ldr	r3, [r7, #0]
 800fe70:	811a      	strh	r2, [r3, #8]
 800fe72:	e00c      	b.n	800fe8e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	891b      	ldrh	r3, [r3, #8]
 800fe78:	2b01      	cmp	r3, #1
 800fe7a:	d108      	bne.n	800fe8e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	891b      	ldrh	r3, [r3, #8]
 800fe80:	3b01      	subs	r3, #1
 800fe82:	b29a      	uxth	r2, r3
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f000 f80d 	bl	800fea8 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	607b      	str	r3, [r7, #4]
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d1db      	bne.n	800fe52 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800fe9a:	bf00      	nop
 800fe9c:	bf00      	nop
 800fe9e:	3708      	adds	r7, #8
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}
 800fea4:	20018bd8 	.word	0x20018bd8

0800fea8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b084      	sub	sp, #16
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feb4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	795b      	ldrb	r3, [r3, #5]
 800feba:	2b0c      	cmp	r3, #12
 800febc:	d003      	beq.n	800fec6 <dhcp_timeout+0x1e>
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	795b      	ldrb	r3, [r3, #5]
 800fec2:	2b06      	cmp	r3, #6
 800fec4:	d103      	bne.n	800fece <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f000 fa54 	bl	8010374 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800fecc:	e031      	b.n	800ff32 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	795b      	ldrb	r3, [r3, #5]
 800fed2:	2b01      	cmp	r3, #1
 800fed4:	d10e      	bne.n	800fef4 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	799b      	ldrb	r3, [r3, #6]
 800feda:	2b05      	cmp	r3, #5
 800fedc:	d803      	bhi.n	800fee6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f7ff fe60 	bl	800fba4 <dhcp_select>
}
 800fee4:	e025      	b.n	800ff32 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800fee6:	6878      	ldr	r0, [r7, #4]
 800fee8:	f000 fdae 	bl	8010a48 <dhcp_release_and_stop>
      dhcp_start(netif);
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	f000 f8e5 	bl	80100bc <dhcp_start>
}
 800fef2:	e01e      	b.n	800ff32 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	795b      	ldrb	r3, [r3, #5]
 800fef8:	2b08      	cmp	r3, #8
 800fefa:	d10b      	bne.n	800ff14 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	799b      	ldrb	r3, [r3, #6]
 800ff00:	2b01      	cmp	r3, #1
 800ff02:	d803      	bhi.n	800ff0c <dhcp_timeout+0x64>
      dhcp_check(netif);
 800ff04:	6878      	ldr	r0, [r7, #4]
 800ff06:	f7ff fdf3 	bl	800faf0 <dhcp_check>
}
 800ff0a:	e012      	b.n	800ff32 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f000 fad3 	bl	80104b8 <dhcp_bind>
}
 800ff12:	e00e      	b.n	800ff32 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	795b      	ldrb	r3, [r3, #5]
 800ff18:	2b03      	cmp	r3, #3
 800ff1a:	d10a      	bne.n	800ff32 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	799b      	ldrb	r3, [r3, #6]
 800ff20:	2b01      	cmp	r3, #1
 800ff22:	d803      	bhi.n	800ff2c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f000 fcd9 	bl	80108dc <dhcp_reboot>
}
 800ff2a:	e002      	b.n	800ff32 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f000 fa21 	bl	8010374 <dhcp_discover>
}
 800ff32:	bf00      	nop
 800ff34:	3710      	adds	r7, #16
 800ff36:	46bd      	mov	sp, r7
 800ff38:	bd80      	pop	{r7, pc}

0800ff3a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800ff3a:	b580      	push	{r7, lr}
 800ff3c:	b084      	sub	sp, #16
 800ff3e:	af00      	add	r7, sp, #0
 800ff40:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff46:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	795b      	ldrb	r3, [r3, #5]
 800ff4c:	2b01      	cmp	r3, #1
 800ff4e:	d007      	beq.n	800ff60 <dhcp_t1_timeout+0x26>
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	795b      	ldrb	r3, [r3, #5]
 800ff54:	2b0a      	cmp	r3, #10
 800ff56:	d003      	beq.n	800ff60 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ff5c:	2b05      	cmp	r3, #5
 800ff5e:	d116      	bne.n	800ff8e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f000 fb83 	bl	801066c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	899b      	ldrh	r3, [r3, #12]
 800ff6a:	461a      	mov	r2, r3
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	8a5b      	ldrh	r3, [r3, #18]
 800ff70:	1ad3      	subs	r3, r2, r3
 800ff72:	2b01      	cmp	r3, #1
 800ff74:	dd0b      	ble.n	800ff8e <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	899b      	ldrh	r3, [r3, #12]
 800ff7a:	461a      	mov	r2, r3
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	8a5b      	ldrh	r3, [r3, #18]
 800ff80:	1ad3      	subs	r3, r2, r3
 800ff82:	0fda      	lsrs	r2, r3, #31
 800ff84:	4413      	add	r3, r2
 800ff86:	105b      	asrs	r3, r3, #1
 800ff88:	b29a      	uxth	r2, r3
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800ff8e:	bf00      	nop
 800ff90:	3710      	adds	r7, #16
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bd80      	pop	{r7, pc}

0800ff96 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800ff96:	b580      	push	{r7, lr}
 800ff98:	b084      	sub	sp, #16
 800ff9a:	af00      	add	r7, sp, #0
 800ff9c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffa2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	795b      	ldrb	r3, [r3, #5]
 800ffa8:	2b01      	cmp	r3, #1
 800ffaa:	d00b      	beq.n	800ffc4 <dhcp_t2_timeout+0x2e>
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	795b      	ldrb	r3, [r3, #5]
 800ffb0:	2b0a      	cmp	r3, #10
 800ffb2:	d007      	beq.n	800ffc4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ffb8:	2b05      	cmp	r3, #5
 800ffba:	d003      	beq.n	800ffc4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	795b      	ldrb	r3, [r3, #5]
 800ffc0:	2b04      	cmp	r3, #4
 800ffc2:	d116      	bne.n	800fff2 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f000 fbed 	bl	80107a4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	8a9b      	ldrh	r3, [r3, #20]
 800ffce:	461a      	mov	r2, r3
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	8a5b      	ldrh	r3, [r3, #18]
 800ffd4:	1ad3      	subs	r3, r2, r3
 800ffd6:	2b01      	cmp	r3, #1
 800ffd8:	dd0b      	ble.n	800fff2 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	8a9b      	ldrh	r3, [r3, #20]
 800ffde:	461a      	mov	r2, r3
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	8a5b      	ldrh	r3, [r3, #18]
 800ffe4:	1ad3      	subs	r3, r2, r3
 800ffe6:	0fda      	lsrs	r2, r3, #31
 800ffe8:	4413      	add	r3, r2
 800ffea:	105b      	asrs	r3, r3, #1
 800ffec:	b29a      	uxth	r2, r3
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800fff2:	bf00      	nop
 800fff4:	3710      	adds	r7, #16
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bd80      	pop	{r7, pc}
	...

0800fffc <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b084      	sub	sp, #16
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
 8010004:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801000a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	2200      	movs	r2, #0
 8010010:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	2200      	movs	r2, #0
 8010016:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8010018:	4b26      	ldr	r3, [pc, #152]	; (80100b4 <dhcp_handle_ack+0xb8>)
 801001a:	78db      	ldrb	r3, [r3, #3]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d003      	beq.n	8010028 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8010020:	4b25      	ldr	r3, [pc, #148]	; (80100b8 <dhcp_handle_ack+0xbc>)
 8010022:	68da      	ldr	r2, [r3, #12]
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8010028:	4b22      	ldr	r3, [pc, #136]	; (80100b4 <dhcp_handle_ack+0xb8>)
 801002a:	791b      	ldrb	r3, [r3, #4]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d004      	beq.n	801003a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8010030:	4b21      	ldr	r3, [pc, #132]	; (80100b8 <dhcp_handle_ack+0xbc>)
 8010032:	691a      	ldr	r2, [r3, #16]
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	62da      	str	r2, [r3, #44]	; 0x2c
 8010038:	e004      	b.n	8010044 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801003e:	085a      	lsrs	r2, r3, #1
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8010044:	4b1b      	ldr	r3, [pc, #108]	; (80100b4 <dhcp_handle_ack+0xb8>)
 8010046:	795b      	ldrb	r3, [r3, #5]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d004      	beq.n	8010056 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801004c:	4b1a      	ldr	r3, [pc, #104]	; (80100b8 <dhcp_handle_ack+0xbc>)
 801004e:	695a      	ldr	r2, [r3, #20]
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	631a      	str	r2, [r3, #48]	; 0x30
 8010054:	e007      	b.n	8010066 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801005a:	4613      	mov	r3, r2
 801005c:	00db      	lsls	r3, r3, #3
 801005e:	1a9b      	subs	r3, r3, r2
 8010060:	08da      	lsrs	r2, r3, #3
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8010066:	683b      	ldr	r3, [r7, #0]
 8010068:	691a      	ldr	r2, [r3, #16]
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801006e:	4b11      	ldr	r3, [pc, #68]	; (80100b4 <dhcp_handle_ack+0xb8>)
 8010070:	799b      	ldrb	r3, [r3, #6]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d00b      	beq.n	801008e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8010076:	4b10      	ldr	r3, [pc, #64]	; (80100b8 <dhcp_handle_ack+0xbc>)
 8010078:	699b      	ldr	r3, [r3, #24]
 801007a:	4618      	mov	r0, r3
 801007c:	f7f7 fe7d 	bl	8007d7a <lwip_htonl>
 8010080:	4602      	mov	r2, r0
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	2201      	movs	r2, #1
 801008a:	71da      	strb	r2, [r3, #7]
 801008c:	e002      	b.n	8010094 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	2200      	movs	r2, #0
 8010092:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8010094:	4b07      	ldr	r3, [pc, #28]	; (80100b4 <dhcp_handle_ack+0xb8>)
 8010096:	79db      	ldrb	r3, [r3, #7]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d007      	beq.n	80100ac <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801009c:	4b06      	ldr	r3, [pc, #24]	; (80100b8 <dhcp_handle_ack+0xbc>)
 801009e:	69db      	ldr	r3, [r3, #28]
 80100a0:	4618      	mov	r0, r3
 80100a2:	f7f7 fe6a 	bl	8007d7a <lwip_htonl>
 80100a6:	4602      	mov	r2, r0
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80100ac:	bf00      	nop
 80100ae:	3710      	adds	r7, #16
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd80      	pop	{r7, pc}
 80100b4:	20018c64 	.word	0x20018c64
 80100b8:	20018c44 	.word	0x20018c44

080100bc <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b084      	sub	sp, #16
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d109      	bne.n	80100de <dhcp_start+0x22>
 80100ca:	4b37      	ldr	r3, [pc, #220]	; (80101a8 <dhcp_start+0xec>)
 80100cc:	f240 22e7 	movw	r2, #743	; 0x2e7
 80100d0:	4936      	ldr	r1, [pc, #216]	; (80101ac <dhcp_start+0xf0>)
 80100d2:	4837      	ldr	r0, [pc, #220]	; (80101b0 <dhcp_start+0xf4>)
 80100d4:	f004 f8de 	bl	8014294 <iprintf>
 80100d8:	f06f 030f 	mvn.w	r3, #15
 80100dc:	e060      	b.n	80101a0 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80100e4:	f003 0301 	and.w	r3, r3, #1
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d109      	bne.n	8010100 <dhcp_start+0x44>
 80100ec:	4b2e      	ldr	r3, [pc, #184]	; (80101a8 <dhcp_start+0xec>)
 80100ee:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80100f2:	4930      	ldr	r1, [pc, #192]	; (80101b4 <dhcp_start+0xf8>)
 80100f4:	482e      	ldr	r0, [pc, #184]	; (80101b0 <dhcp_start+0xf4>)
 80100f6:	f004 f8cd 	bl	8014294 <iprintf>
 80100fa:	f06f 030f 	mvn.w	r3, #15
 80100fe:	e04f      	b.n	80101a0 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010104:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801010a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801010e:	d202      	bcs.n	8010116 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8010110:	f04f 33ff 	mov.w	r3, #4294967295
 8010114:	e044      	b.n	80101a0 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d10d      	bne.n	8010138 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801011c:	2034      	movs	r0, #52	; 0x34
 801011e:	f7f8 f94b 	bl	80083b8 <mem_malloc>
 8010122:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d102      	bne.n	8010130 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801012a:	f04f 33ff 	mov.w	r3, #4294967295
 801012e:	e037      	b.n	80101a0 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	68fa      	ldr	r2, [r7, #12]
 8010134:	625a      	str	r2, [r3, #36]	; 0x24
 8010136:	e005      	b.n	8010144 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	791b      	ldrb	r3, [r3, #4]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d001      	beq.n	8010144 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8010140:	f7ff fc92 	bl	800fa68 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8010144:	2234      	movs	r2, #52	; 0x34
 8010146:	2100      	movs	r1, #0
 8010148:	68f8      	ldr	r0, [r7, #12]
 801014a:	f004 f806 	bl	801415a <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801014e:	f7ff fc39 	bl	800f9c4 <dhcp_inc_pcb_refcount>
 8010152:	4603      	mov	r3, r0
 8010154:	2b00      	cmp	r3, #0
 8010156:	d002      	beq.n	801015e <dhcp_start+0xa2>
    return ERR_MEM;
 8010158:	f04f 33ff 	mov.w	r3, #4294967295
 801015c:	e020      	b.n	80101a0 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	2201      	movs	r2, #1
 8010162:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801016a:	f003 0304 	and.w	r3, r3, #4
 801016e:	2b00      	cmp	r3, #0
 8010170:	d105      	bne.n	801017e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8010172:	2102      	movs	r1, #2
 8010174:	68f8      	ldr	r0, [r7, #12]
 8010176:	f000 fd01 	bl	8010b7c <dhcp_set_state>
    return ERR_OK;
 801017a:	2300      	movs	r3, #0
 801017c:	e010      	b.n	80101a0 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f000 f8f8 	bl	8010374 <dhcp_discover>
 8010184:	4603      	mov	r3, r0
 8010186:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8010188:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d005      	beq.n	801019c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f000 fc59 	bl	8010a48 <dhcp_release_and_stop>
    return ERR_MEM;
 8010196:	f04f 33ff 	mov.w	r3, #4294967295
 801019a:	e001      	b.n	80101a0 <dhcp_start+0xe4>
  }
  return result;
 801019c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80101a0:	4618      	mov	r0, r3
 80101a2:	3710      	adds	r7, #16
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}
 80101a8:	08017594 	.word	0x08017594
 80101ac:	08017678 	.word	0x08017678
 80101b0:	080175f4 	.word	0x080175f4
 80101b4:	080176bc 	.word	0x080176bc

080101b8 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b084      	sub	sp, #16
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101c4:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d025      	beq.n	8010218 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	795b      	ldrb	r3, [r3, #5]
 80101d0:	2b0a      	cmp	r3, #10
 80101d2:	d008      	beq.n	80101e6 <dhcp_network_changed+0x2e>
 80101d4:	2b0a      	cmp	r3, #10
 80101d6:	dc0d      	bgt.n	80101f4 <dhcp_network_changed+0x3c>
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d01f      	beq.n	801021c <dhcp_network_changed+0x64>
 80101dc:	2b00      	cmp	r3, #0
 80101de:	db09      	blt.n	80101f4 <dhcp_network_changed+0x3c>
 80101e0:	3b03      	subs	r3, #3
 80101e2:	2b02      	cmp	r3, #2
 80101e4:	d806      	bhi.n	80101f4 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	2200      	movs	r2, #0
 80101ea:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80101ec:	6878      	ldr	r0, [r7, #4]
 80101ee:	f000 fb75 	bl	80108dc <dhcp_reboot>
      break;
 80101f2:	e014      	b.n	801021e <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	795b      	ldrb	r3, [r3, #5]
 80101f8:	2b0c      	cmp	r3, #12
 80101fa:	d906      	bls.n	801020a <dhcp_network_changed+0x52>
 80101fc:	4b09      	ldr	r3, [pc, #36]	; (8010224 <dhcp_network_changed+0x6c>)
 80101fe:	f240 326d 	movw	r2, #877	; 0x36d
 8010202:	4909      	ldr	r1, [pc, #36]	; (8010228 <dhcp_network_changed+0x70>)
 8010204:	4809      	ldr	r0, [pc, #36]	; (801022c <dhcp_network_changed+0x74>)
 8010206:	f004 f845 	bl	8014294 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	2200      	movs	r2, #0
 801020e:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f000 f8af 	bl	8010374 <dhcp_discover>
      break;
 8010216:	e002      	b.n	801021e <dhcp_network_changed+0x66>
    return;
 8010218:	bf00      	nop
 801021a:	e000      	b.n	801021e <dhcp_network_changed+0x66>
      break;
 801021c:	bf00      	nop
  }
}
 801021e:	3710      	adds	r7, #16
 8010220:	46bd      	mov	sp, r7
 8010222:	bd80      	pop	{r7, pc}
 8010224:	08017594 	.word	0x08017594
 8010228:	080176e0 	.word	0x080176e0
 801022c:	080175f4 	.word	0x080175f4

08010230 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b084      	sub	sp, #16
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
 8010238:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d107      	bne.n	8010250 <dhcp_arp_reply+0x20>
 8010240:	4b0e      	ldr	r3, [pc, #56]	; (801027c <dhcp_arp_reply+0x4c>)
 8010242:	f240 328b 	movw	r2, #907	; 0x38b
 8010246:	490e      	ldr	r1, [pc, #56]	; (8010280 <dhcp_arp_reply+0x50>)
 8010248:	480e      	ldr	r0, [pc, #56]	; (8010284 <dhcp_arp_reply+0x54>)
 801024a:	f004 f823 	bl	8014294 <iprintf>
 801024e:	e012      	b.n	8010276 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010254:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d00c      	beq.n	8010276 <dhcp_arp_reply+0x46>
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	795b      	ldrb	r3, [r3, #5]
 8010260:	2b08      	cmp	r3, #8
 8010262:	d108      	bne.n	8010276 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	681a      	ldr	r2, [r3, #0]
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	69db      	ldr	r3, [r3, #28]
 801026c:	429a      	cmp	r2, r3
 801026e:	d102      	bne.n	8010276 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8010270:	6878      	ldr	r0, [r7, #4]
 8010272:	f000 f809 	bl	8010288 <dhcp_decline>
    }
  }
}
 8010276:	3710      	adds	r7, #16
 8010278:	46bd      	mov	sp, r7
 801027a:	bd80      	pop	{r7, pc}
 801027c:	08017594 	.word	0x08017594
 8010280:	08017678 	.word	0x08017678
 8010284:	080175f4 	.word	0x080175f4

08010288 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8010288:	b5b0      	push	{r4, r5, r7, lr}
 801028a:	b08a      	sub	sp, #40	; 0x28
 801028c:	af02      	add	r7, sp, #8
 801028e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010294:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8010296:	210c      	movs	r1, #12
 8010298:	69b8      	ldr	r0, [r7, #24]
 801029a:	f000 fc6f 	bl	8010b7c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801029e:	f107 030c 	add.w	r3, r7, #12
 80102a2:	2204      	movs	r2, #4
 80102a4:	69b9      	ldr	r1, [r7, #24]
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f001 f8f4 	bl	8011494 <dhcp_create_msg>
 80102ac:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d035      	beq.n	8010320 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	685b      	ldr	r3, [r3, #4]
 80102b8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80102ba:	89b8      	ldrh	r0, [r7, #12]
 80102bc:	693b      	ldr	r3, [r7, #16]
 80102be:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80102c2:	2304      	movs	r3, #4
 80102c4:	2232      	movs	r2, #50	; 0x32
 80102c6:	f000 fc73 	bl	8010bb0 <dhcp_option>
 80102ca:	4603      	mov	r3, r0
 80102cc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80102ce:	89bc      	ldrh	r4, [r7, #12]
 80102d0:	693b      	ldr	r3, [r7, #16]
 80102d2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80102d6:	69bb      	ldr	r3, [r7, #24]
 80102d8:	69db      	ldr	r3, [r3, #28]
 80102da:	4618      	mov	r0, r3
 80102dc:	f7f7 fd4d 	bl	8007d7a <lwip_htonl>
 80102e0:	4603      	mov	r3, r0
 80102e2:	461a      	mov	r2, r3
 80102e4:	4629      	mov	r1, r5
 80102e6:	4620      	mov	r0, r4
 80102e8:	f000 fcee 	bl	8010cc8 <dhcp_option_long>
 80102ec:	4603      	mov	r3, r0
 80102ee:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80102f0:	89b8      	ldrh	r0, [r7, #12]
 80102f2:	693b      	ldr	r3, [r7, #16]
 80102f4:	33f0      	adds	r3, #240	; 0xf0
 80102f6:	697a      	ldr	r2, [r7, #20]
 80102f8:	4619      	mov	r1, r3
 80102fa:	f001 f9a1 	bl	8011640 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80102fe:	4b19      	ldr	r3, [pc, #100]	; (8010364 <dhcp_decline+0xdc>)
 8010300:	6818      	ldr	r0, [r3, #0]
 8010302:	4b19      	ldr	r3, [pc, #100]	; (8010368 <dhcp_decline+0xe0>)
 8010304:	9301      	str	r3, [sp, #4]
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	9300      	str	r3, [sp, #0]
 801030a:	2343      	movs	r3, #67	; 0x43
 801030c:	4a17      	ldr	r2, [pc, #92]	; (801036c <dhcp_decline+0xe4>)
 801030e:	6979      	ldr	r1, [r7, #20]
 8010310:	f7ff f8d2 	bl	800f4b8 <udp_sendto_if_src>
 8010314:	4603      	mov	r3, r0
 8010316:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010318:	6978      	ldr	r0, [r7, #20]
 801031a:	f7f9 f917 	bl	800954c <pbuf_free>
 801031e:	e001      	b.n	8010324 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010320:	23ff      	movs	r3, #255	; 0xff
 8010322:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010324:	69bb      	ldr	r3, [r7, #24]
 8010326:	799b      	ldrb	r3, [r3, #6]
 8010328:	2bff      	cmp	r3, #255	; 0xff
 801032a:	d005      	beq.n	8010338 <dhcp_decline+0xb0>
    dhcp->tries++;
 801032c:	69bb      	ldr	r3, [r7, #24]
 801032e:	799b      	ldrb	r3, [r3, #6]
 8010330:	3301      	adds	r3, #1
 8010332:	b2da      	uxtb	r2, r3
 8010334:	69bb      	ldr	r3, [r7, #24]
 8010336:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8010338:	f242 7310 	movw	r3, #10000	; 0x2710
 801033c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801033e:	89fb      	ldrh	r3, [r7, #14]
 8010340:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010344:	4a0a      	ldr	r2, [pc, #40]	; (8010370 <dhcp_decline+0xe8>)
 8010346:	fb82 1203 	smull	r1, r2, r2, r3
 801034a:	1152      	asrs	r2, r2, #5
 801034c:	17db      	asrs	r3, r3, #31
 801034e:	1ad3      	subs	r3, r2, r3
 8010350:	b29a      	uxth	r2, r3
 8010352:	69bb      	ldr	r3, [r7, #24]
 8010354:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010356:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801035a:	4618      	mov	r0, r3
 801035c:	3720      	adds	r7, #32
 801035e:	46bd      	mov	sp, r7
 8010360:	bdb0      	pop	{r4, r5, r7, pc}
 8010362:	bf00      	nop
 8010364:	20018c6c 	.word	0x20018c6c
 8010368:	0801813c 	.word	0x0801813c
 801036c:	08018140 	.word	0x08018140
 8010370:	10624dd3 	.word	0x10624dd3

08010374 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b08a      	sub	sp, #40	; 0x28
 8010378:	af02      	add	r7, sp, #8
 801037a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010380:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8010382:	2300      	movs	r3, #0
 8010384:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8010386:	69bb      	ldr	r3, [r7, #24]
 8010388:	2200      	movs	r2, #0
 801038a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801038c:	2106      	movs	r1, #6
 801038e:	69b8      	ldr	r0, [r7, #24]
 8010390:	f000 fbf4 	bl	8010b7c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8010394:	f107 0308 	add.w	r3, r7, #8
 8010398:	2201      	movs	r2, #1
 801039a:	69b9      	ldr	r1, [r7, #24]
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f001 f879 	bl	8011494 <dhcp_create_msg>
 80103a2:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80103a4:	693b      	ldr	r3, [r7, #16]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d04b      	beq.n	8010442 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80103aa:	693b      	ldr	r3, [r7, #16]
 80103ac:	685b      	ldr	r3, [r3, #4]
 80103ae:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80103b0:	8938      	ldrh	r0, [r7, #8]
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80103b8:	2302      	movs	r3, #2
 80103ba:	2239      	movs	r2, #57	; 0x39
 80103bc:	f000 fbf8 	bl	8010bb0 <dhcp_option>
 80103c0:	4603      	mov	r3, r0
 80103c2:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80103c4:	8938      	ldrh	r0, [r7, #8]
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80103d0:	461a      	mov	r2, r3
 80103d2:	f000 fc47 	bl	8010c64 <dhcp_option_short>
 80103d6:	4603      	mov	r3, r0
 80103d8:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80103da:	8938      	ldrh	r0, [r7, #8]
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80103e2:	2303      	movs	r3, #3
 80103e4:	2237      	movs	r2, #55	; 0x37
 80103e6:	f000 fbe3 	bl	8010bb0 <dhcp_option>
 80103ea:	4603      	mov	r3, r0
 80103ec:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80103ee:	2300      	movs	r3, #0
 80103f0:	77fb      	strb	r3, [r7, #31]
 80103f2:	e00e      	b.n	8010412 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80103f4:	8938      	ldrh	r0, [r7, #8]
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80103fc:	7ffb      	ldrb	r3, [r7, #31]
 80103fe:	4a29      	ldr	r2, [pc, #164]	; (80104a4 <dhcp_discover+0x130>)
 8010400:	5cd3      	ldrb	r3, [r2, r3]
 8010402:	461a      	mov	r2, r3
 8010404:	f000 fc08 	bl	8010c18 <dhcp_option_byte>
 8010408:	4603      	mov	r3, r0
 801040a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801040c:	7ffb      	ldrb	r3, [r7, #31]
 801040e:	3301      	adds	r3, #1
 8010410:	77fb      	strb	r3, [r7, #31]
 8010412:	7ffb      	ldrb	r3, [r7, #31]
 8010414:	2b02      	cmp	r3, #2
 8010416:	d9ed      	bls.n	80103f4 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010418:	8938      	ldrh	r0, [r7, #8]
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	33f0      	adds	r3, #240	; 0xf0
 801041e:	693a      	ldr	r2, [r7, #16]
 8010420:	4619      	mov	r1, r3
 8010422:	f001 f90d 	bl	8011640 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8010426:	4b20      	ldr	r3, [pc, #128]	; (80104a8 <dhcp_discover+0x134>)
 8010428:	6818      	ldr	r0, [r3, #0]
 801042a:	4b20      	ldr	r3, [pc, #128]	; (80104ac <dhcp_discover+0x138>)
 801042c:	9301      	str	r3, [sp, #4]
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	9300      	str	r3, [sp, #0]
 8010432:	2343      	movs	r3, #67	; 0x43
 8010434:	4a1e      	ldr	r2, [pc, #120]	; (80104b0 <dhcp_discover+0x13c>)
 8010436:	6939      	ldr	r1, [r7, #16]
 8010438:	f7ff f83e 	bl	800f4b8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801043c:	6938      	ldr	r0, [r7, #16]
 801043e:	f7f9 f885 	bl	800954c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8010442:	69bb      	ldr	r3, [r7, #24]
 8010444:	799b      	ldrb	r3, [r3, #6]
 8010446:	2bff      	cmp	r3, #255	; 0xff
 8010448:	d005      	beq.n	8010456 <dhcp_discover+0xe2>
    dhcp->tries++;
 801044a:	69bb      	ldr	r3, [r7, #24]
 801044c:	799b      	ldrb	r3, [r3, #6]
 801044e:	3301      	adds	r3, #1
 8010450:	b2da      	uxtb	r2, r3
 8010452:	69bb      	ldr	r3, [r7, #24]
 8010454:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8010456:	69bb      	ldr	r3, [r7, #24]
 8010458:	799b      	ldrb	r3, [r3, #6]
 801045a:	2b05      	cmp	r3, #5
 801045c:	d80d      	bhi.n	801047a <dhcp_discover+0x106>
 801045e:	69bb      	ldr	r3, [r7, #24]
 8010460:	799b      	ldrb	r3, [r3, #6]
 8010462:	461a      	mov	r2, r3
 8010464:	2301      	movs	r3, #1
 8010466:	4093      	lsls	r3, r2
 8010468:	b29b      	uxth	r3, r3
 801046a:	461a      	mov	r2, r3
 801046c:	0152      	lsls	r2, r2, #5
 801046e:	1ad2      	subs	r2, r2, r3
 8010470:	0092      	lsls	r2, r2, #2
 8010472:	4413      	add	r3, r2
 8010474:	00db      	lsls	r3, r3, #3
 8010476:	b29b      	uxth	r3, r3
 8010478:	e001      	b.n	801047e <dhcp_discover+0x10a>
 801047a:	f64e 2360 	movw	r3, #60000	; 0xea60
 801047e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010480:	897b      	ldrh	r3, [r7, #10]
 8010482:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010486:	4a0b      	ldr	r2, [pc, #44]	; (80104b4 <dhcp_discover+0x140>)
 8010488:	fb82 1203 	smull	r1, r2, r2, r3
 801048c:	1152      	asrs	r2, r2, #5
 801048e:	17db      	asrs	r3, r3, #31
 8010490:	1ad3      	subs	r3, r2, r3
 8010492:	b29a      	uxth	r2, r3
 8010494:	69bb      	ldr	r3, [r7, #24]
 8010496:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010498:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801049c:	4618      	mov	r0, r3
 801049e:	3720      	adds	r7, #32
 80104a0:	46bd      	mov	sp, r7
 80104a2:	bd80      	pop	{r7, pc}
 80104a4:	20000030 	.word	0x20000030
 80104a8:	20018c6c 	.word	0x20018c6c
 80104ac:	0801813c 	.word	0x0801813c
 80104b0:	08018140 	.word	0x08018140
 80104b4:	10624dd3 	.word	0x10624dd3

080104b8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b088      	sub	sp, #32
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d107      	bne.n	80104d6 <dhcp_bind+0x1e>
 80104c6:	4b64      	ldr	r3, [pc, #400]	; (8010658 <dhcp_bind+0x1a0>)
 80104c8:	f240 4215 	movw	r2, #1045	; 0x415
 80104cc:	4963      	ldr	r1, [pc, #396]	; (801065c <dhcp_bind+0x1a4>)
 80104ce:	4864      	ldr	r0, [pc, #400]	; (8010660 <dhcp_bind+0x1a8>)
 80104d0:	f003 fee0 	bl	8014294 <iprintf>
 80104d4:	e0bc      	b.n	8010650 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104da:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80104dc:	69bb      	ldr	r3, [r7, #24]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d107      	bne.n	80104f2 <dhcp_bind+0x3a>
 80104e2:	4b5d      	ldr	r3, [pc, #372]	; (8010658 <dhcp_bind+0x1a0>)
 80104e4:	f240 4217 	movw	r2, #1047	; 0x417
 80104e8:	495e      	ldr	r1, [pc, #376]	; (8010664 <dhcp_bind+0x1ac>)
 80104ea:	485d      	ldr	r0, [pc, #372]	; (8010660 <dhcp_bind+0x1a8>)
 80104ec:	f003 fed2 	bl	8014294 <iprintf>
 80104f0:	e0ae      	b.n	8010650 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80104f2:	69bb      	ldr	r3, [r7, #24]
 80104f4:	2200      	movs	r2, #0
 80104f6:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80104f8:	69bb      	ldr	r3, [r7, #24]
 80104fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010500:	d019      	beq.n	8010536 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010502:	69bb      	ldr	r3, [r7, #24]
 8010504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010506:	331e      	adds	r3, #30
 8010508:	4a57      	ldr	r2, [pc, #348]	; (8010668 <dhcp_bind+0x1b0>)
 801050a:	fba2 2303 	umull	r2, r3, r2, r3
 801050e:	095b      	lsrs	r3, r3, #5
 8010510:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010512:	69fb      	ldr	r3, [r7, #28]
 8010514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010518:	d302      	bcc.n	8010520 <dhcp_bind+0x68>
      timeout = 0xffff;
 801051a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801051e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8010520:	69fb      	ldr	r3, [r7, #28]
 8010522:	b29a      	uxth	r2, r3
 8010524:	69bb      	ldr	r3, [r7, #24]
 8010526:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8010528:	69bb      	ldr	r3, [r7, #24]
 801052a:	8a9b      	ldrh	r3, [r3, #20]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d102      	bne.n	8010536 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8010530:	69bb      	ldr	r3, [r7, #24]
 8010532:	2201      	movs	r2, #1
 8010534:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8010536:	69bb      	ldr	r3, [r7, #24]
 8010538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801053a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801053e:	d01d      	beq.n	801057c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010540:	69bb      	ldr	r3, [r7, #24]
 8010542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010544:	331e      	adds	r3, #30
 8010546:	4a48      	ldr	r2, [pc, #288]	; (8010668 <dhcp_bind+0x1b0>)
 8010548:	fba2 2303 	umull	r2, r3, r2, r3
 801054c:	095b      	lsrs	r3, r3, #5
 801054e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010550:	69fb      	ldr	r3, [r7, #28]
 8010552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010556:	d302      	bcc.n	801055e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8010558:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801055c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801055e:	69fb      	ldr	r3, [r7, #28]
 8010560:	b29a      	uxth	r2, r3
 8010562:	69bb      	ldr	r3, [r7, #24]
 8010564:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8010566:	69bb      	ldr	r3, [r7, #24]
 8010568:	895b      	ldrh	r3, [r3, #10]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d102      	bne.n	8010574 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801056e:	69bb      	ldr	r3, [r7, #24]
 8010570:	2201      	movs	r2, #1
 8010572:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8010574:	69bb      	ldr	r3, [r7, #24]
 8010576:	895a      	ldrh	r2, [r3, #10]
 8010578:	69bb      	ldr	r3, [r7, #24]
 801057a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801057c:	69bb      	ldr	r3, [r7, #24]
 801057e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010584:	d01d      	beq.n	80105c2 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010586:	69bb      	ldr	r3, [r7, #24]
 8010588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801058a:	331e      	adds	r3, #30
 801058c:	4a36      	ldr	r2, [pc, #216]	; (8010668 <dhcp_bind+0x1b0>)
 801058e:	fba2 2303 	umull	r2, r3, r2, r3
 8010592:	095b      	lsrs	r3, r3, #5
 8010594:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010596:	69fb      	ldr	r3, [r7, #28]
 8010598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801059c:	d302      	bcc.n	80105a4 <dhcp_bind+0xec>
      timeout = 0xffff;
 801059e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80105a2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80105a4:	69fb      	ldr	r3, [r7, #28]
 80105a6:	b29a      	uxth	r2, r3
 80105a8:	69bb      	ldr	r3, [r7, #24]
 80105aa:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80105ac:	69bb      	ldr	r3, [r7, #24]
 80105ae:	899b      	ldrh	r3, [r3, #12]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d102      	bne.n	80105ba <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80105b4:	69bb      	ldr	r3, [r7, #24]
 80105b6:	2201      	movs	r2, #1
 80105b8:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80105ba:	69bb      	ldr	r3, [r7, #24]
 80105bc:	899a      	ldrh	r2, [r3, #12]
 80105be:	69bb      	ldr	r3, [r7, #24]
 80105c0:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80105c2:	69bb      	ldr	r3, [r7, #24]
 80105c4:	895a      	ldrh	r2, [r3, #10]
 80105c6:	69bb      	ldr	r3, [r7, #24]
 80105c8:	899b      	ldrh	r3, [r3, #12]
 80105ca:	429a      	cmp	r2, r3
 80105cc:	d306      	bcc.n	80105dc <dhcp_bind+0x124>
 80105ce:	69bb      	ldr	r3, [r7, #24]
 80105d0:	899b      	ldrh	r3, [r3, #12]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d002      	beq.n	80105dc <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80105d6:	69bb      	ldr	r3, [r7, #24]
 80105d8:	2200      	movs	r2, #0
 80105da:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80105dc:	69bb      	ldr	r3, [r7, #24]
 80105de:	79db      	ldrb	r3, [r3, #7]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d003      	beq.n	80105ec <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80105e4:	69bb      	ldr	r3, [r7, #24]
 80105e6:	6a1b      	ldr	r3, [r3, #32]
 80105e8:	613b      	str	r3, [r7, #16]
 80105ea:	e014      	b.n	8010616 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80105ec:	69bb      	ldr	r3, [r7, #24]
 80105ee:	331c      	adds	r3, #28
 80105f0:	781b      	ldrb	r3, [r3, #0]
 80105f2:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80105f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	db02      	blt.n	8010602 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80105fc:	23ff      	movs	r3, #255	; 0xff
 80105fe:	613b      	str	r3, [r7, #16]
 8010600:	e009      	b.n	8010616 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8010602:	7dfb      	ldrb	r3, [r7, #23]
 8010604:	2bbf      	cmp	r3, #191	; 0xbf
 8010606:	d903      	bls.n	8010610 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8010608:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801060c:	613b      	str	r3, [r7, #16]
 801060e:	e002      	b.n	8010616 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8010610:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010614:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8010616:	69bb      	ldr	r3, [r7, #24]
 8010618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801061a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d108      	bne.n	8010634 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8010622:	69bb      	ldr	r3, [r7, #24]
 8010624:	69da      	ldr	r2, [r3, #28]
 8010626:	693b      	ldr	r3, [r7, #16]
 8010628:	4013      	ands	r3, r2
 801062a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010632:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8010634:	210a      	movs	r1, #10
 8010636:	69b8      	ldr	r0, [r7, #24]
 8010638:	f000 faa0 	bl	8010b7c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801063c:	69bb      	ldr	r3, [r7, #24]
 801063e:	f103 011c 	add.w	r1, r3, #28
 8010642:	f107 030c 	add.w	r3, r7, #12
 8010646:	f107 0210 	add.w	r2, r7, #16
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f7f8 fa70 	bl	8008b30 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8010650:	3720      	adds	r7, #32
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}
 8010656:	bf00      	nop
 8010658:	08017594 	.word	0x08017594
 801065c:	080176f4 	.word	0x080176f4
 8010660:	080175f4 	.word	0x080175f4
 8010664:	08017710 	.word	0x08017710
 8010668:	88888889 	.word	0x88888889

0801066c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801066c:	b580      	push	{r7, lr}
 801066e:	b08a      	sub	sp, #40	; 0x28
 8010670:	af02      	add	r7, sp, #8
 8010672:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010678:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801067a:	2105      	movs	r1, #5
 801067c:	69b8      	ldr	r0, [r7, #24]
 801067e:	f000 fa7d 	bl	8010b7c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010682:	f107 030c 	add.w	r3, r7, #12
 8010686:	2203      	movs	r2, #3
 8010688:	69b9      	ldr	r1, [r7, #24]
 801068a:	6878      	ldr	r0, [r7, #4]
 801068c:	f000 ff02 	bl	8011494 <dhcp_create_msg>
 8010690:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010692:	697b      	ldr	r3, [r7, #20]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d04e      	beq.n	8010736 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010698:	697b      	ldr	r3, [r7, #20]
 801069a:	685b      	ldr	r3, [r3, #4]
 801069c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801069e:	89b8      	ldrh	r0, [r7, #12]
 80106a0:	693b      	ldr	r3, [r7, #16]
 80106a2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80106a6:	2302      	movs	r3, #2
 80106a8:	2239      	movs	r2, #57	; 0x39
 80106aa:	f000 fa81 	bl	8010bb0 <dhcp_option>
 80106ae:	4603      	mov	r3, r0
 80106b0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80106b2:	89b8      	ldrh	r0, [r7, #12]
 80106b4:	693b      	ldr	r3, [r7, #16]
 80106b6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80106be:	461a      	mov	r2, r3
 80106c0:	f000 fad0 	bl	8010c64 <dhcp_option_short>
 80106c4:	4603      	mov	r3, r0
 80106c6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80106c8:	89b8      	ldrh	r0, [r7, #12]
 80106ca:	693b      	ldr	r3, [r7, #16]
 80106cc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80106d0:	2303      	movs	r3, #3
 80106d2:	2237      	movs	r2, #55	; 0x37
 80106d4:	f000 fa6c 	bl	8010bb0 <dhcp_option>
 80106d8:	4603      	mov	r3, r0
 80106da:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80106dc:	2300      	movs	r3, #0
 80106de:	77bb      	strb	r3, [r7, #30]
 80106e0:	e00e      	b.n	8010700 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80106e2:	89b8      	ldrh	r0, [r7, #12]
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80106ea:	7fbb      	ldrb	r3, [r7, #30]
 80106ec:	4a2a      	ldr	r2, [pc, #168]	; (8010798 <dhcp_renew+0x12c>)
 80106ee:	5cd3      	ldrb	r3, [r2, r3]
 80106f0:	461a      	mov	r2, r3
 80106f2:	f000 fa91 	bl	8010c18 <dhcp_option_byte>
 80106f6:	4603      	mov	r3, r0
 80106f8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80106fa:	7fbb      	ldrb	r3, [r7, #30]
 80106fc:	3301      	adds	r3, #1
 80106fe:	77bb      	strb	r3, [r7, #30]
 8010700:	7fbb      	ldrb	r3, [r7, #30]
 8010702:	2b02      	cmp	r3, #2
 8010704:	d9ed      	bls.n	80106e2 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010706:	89b8      	ldrh	r0, [r7, #12]
 8010708:	693b      	ldr	r3, [r7, #16]
 801070a:	33f0      	adds	r3, #240	; 0xf0
 801070c:	697a      	ldr	r2, [r7, #20]
 801070e:	4619      	mov	r1, r3
 8010710:	f000 ff96 	bl	8011640 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010714:	4b21      	ldr	r3, [pc, #132]	; (801079c <dhcp_renew+0x130>)
 8010716:	6818      	ldr	r0, [r3, #0]
 8010718:	69bb      	ldr	r3, [r7, #24]
 801071a:	f103 0218 	add.w	r2, r3, #24
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	9300      	str	r3, [sp, #0]
 8010722:	2343      	movs	r3, #67	; 0x43
 8010724:	6979      	ldr	r1, [r7, #20]
 8010726:	f7fe fe53 	bl	800f3d0 <udp_sendto_if>
 801072a:	4603      	mov	r3, r0
 801072c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801072e:	6978      	ldr	r0, [r7, #20]
 8010730:	f7f8 ff0c 	bl	800954c <pbuf_free>
 8010734:	e001      	b.n	801073a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010736:	23ff      	movs	r3, #255	; 0xff
 8010738:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801073a:	69bb      	ldr	r3, [r7, #24]
 801073c:	799b      	ldrb	r3, [r3, #6]
 801073e:	2bff      	cmp	r3, #255	; 0xff
 8010740:	d005      	beq.n	801074e <dhcp_renew+0xe2>
    dhcp->tries++;
 8010742:	69bb      	ldr	r3, [r7, #24]
 8010744:	799b      	ldrb	r3, [r3, #6]
 8010746:	3301      	adds	r3, #1
 8010748:	b2da      	uxtb	r2, r3
 801074a:	69bb      	ldr	r3, [r7, #24]
 801074c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801074e:	69bb      	ldr	r3, [r7, #24]
 8010750:	799b      	ldrb	r3, [r3, #6]
 8010752:	2b09      	cmp	r3, #9
 8010754:	d80a      	bhi.n	801076c <dhcp_renew+0x100>
 8010756:	69bb      	ldr	r3, [r7, #24]
 8010758:	799b      	ldrb	r3, [r3, #6]
 801075a:	b29b      	uxth	r3, r3
 801075c:	461a      	mov	r2, r3
 801075e:	0152      	lsls	r2, r2, #5
 8010760:	1ad2      	subs	r2, r2, r3
 8010762:	0092      	lsls	r2, r2, #2
 8010764:	4413      	add	r3, r2
 8010766:	011b      	lsls	r3, r3, #4
 8010768:	b29b      	uxth	r3, r3
 801076a:	e001      	b.n	8010770 <dhcp_renew+0x104>
 801076c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8010770:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010772:	89fb      	ldrh	r3, [r7, #14]
 8010774:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010778:	4a09      	ldr	r2, [pc, #36]	; (80107a0 <dhcp_renew+0x134>)
 801077a:	fb82 1203 	smull	r1, r2, r2, r3
 801077e:	1152      	asrs	r2, r2, #5
 8010780:	17db      	asrs	r3, r3, #31
 8010782:	1ad3      	subs	r3, r2, r3
 8010784:	b29a      	uxth	r2, r3
 8010786:	69bb      	ldr	r3, [r7, #24]
 8010788:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801078a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801078e:	4618      	mov	r0, r3
 8010790:	3720      	adds	r7, #32
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}
 8010796:	bf00      	nop
 8010798:	20000030 	.word	0x20000030
 801079c:	20018c6c 	.word	0x20018c6c
 80107a0:	10624dd3 	.word	0x10624dd3

080107a4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b08a      	sub	sp, #40	; 0x28
 80107a8:	af02      	add	r7, sp, #8
 80107aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107b0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80107b2:	2104      	movs	r1, #4
 80107b4:	69b8      	ldr	r0, [r7, #24]
 80107b6:	f000 f9e1 	bl	8010b7c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80107ba:	f107 030c 	add.w	r3, r7, #12
 80107be:	2203      	movs	r2, #3
 80107c0:	69b9      	ldr	r1, [r7, #24]
 80107c2:	6878      	ldr	r0, [r7, #4]
 80107c4:	f000 fe66 	bl	8011494 <dhcp_create_msg>
 80107c8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80107ca:	697b      	ldr	r3, [r7, #20]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d04c      	beq.n	801086a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	685b      	ldr	r3, [r3, #4]
 80107d4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80107d6:	89b8      	ldrh	r0, [r7, #12]
 80107d8:	693b      	ldr	r3, [r7, #16]
 80107da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80107de:	2302      	movs	r3, #2
 80107e0:	2239      	movs	r2, #57	; 0x39
 80107e2:	f000 f9e5 	bl	8010bb0 <dhcp_option>
 80107e6:	4603      	mov	r3, r0
 80107e8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80107ea:	89b8      	ldrh	r0, [r7, #12]
 80107ec:	693b      	ldr	r3, [r7, #16]
 80107ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80107f6:	461a      	mov	r2, r3
 80107f8:	f000 fa34 	bl	8010c64 <dhcp_option_short>
 80107fc:	4603      	mov	r3, r0
 80107fe:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010800:	89b8      	ldrh	r0, [r7, #12]
 8010802:	693b      	ldr	r3, [r7, #16]
 8010804:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010808:	2303      	movs	r3, #3
 801080a:	2237      	movs	r2, #55	; 0x37
 801080c:	f000 f9d0 	bl	8010bb0 <dhcp_option>
 8010810:	4603      	mov	r3, r0
 8010812:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010814:	2300      	movs	r3, #0
 8010816:	77bb      	strb	r3, [r7, #30]
 8010818:	e00e      	b.n	8010838 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801081a:	89b8      	ldrh	r0, [r7, #12]
 801081c:	693b      	ldr	r3, [r7, #16]
 801081e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010822:	7fbb      	ldrb	r3, [r7, #30]
 8010824:	4a29      	ldr	r2, [pc, #164]	; (80108cc <dhcp_rebind+0x128>)
 8010826:	5cd3      	ldrb	r3, [r2, r3]
 8010828:	461a      	mov	r2, r3
 801082a:	f000 f9f5 	bl	8010c18 <dhcp_option_byte>
 801082e:	4603      	mov	r3, r0
 8010830:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010832:	7fbb      	ldrb	r3, [r7, #30]
 8010834:	3301      	adds	r3, #1
 8010836:	77bb      	strb	r3, [r7, #30]
 8010838:	7fbb      	ldrb	r3, [r7, #30]
 801083a:	2b02      	cmp	r3, #2
 801083c:	d9ed      	bls.n	801081a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801083e:	89b8      	ldrh	r0, [r7, #12]
 8010840:	693b      	ldr	r3, [r7, #16]
 8010842:	33f0      	adds	r3, #240	; 0xf0
 8010844:	697a      	ldr	r2, [r7, #20]
 8010846:	4619      	mov	r1, r3
 8010848:	f000 fefa 	bl	8011640 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801084c:	4b20      	ldr	r3, [pc, #128]	; (80108d0 <dhcp_rebind+0x12c>)
 801084e:	6818      	ldr	r0, [r3, #0]
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	9300      	str	r3, [sp, #0]
 8010854:	2343      	movs	r3, #67	; 0x43
 8010856:	4a1f      	ldr	r2, [pc, #124]	; (80108d4 <dhcp_rebind+0x130>)
 8010858:	6979      	ldr	r1, [r7, #20]
 801085a:	f7fe fdb9 	bl	800f3d0 <udp_sendto_if>
 801085e:	4603      	mov	r3, r0
 8010860:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010862:	6978      	ldr	r0, [r7, #20]
 8010864:	f7f8 fe72 	bl	800954c <pbuf_free>
 8010868:	e001      	b.n	801086e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801086a:	23ff      	movs	r3, #255	; 0xff
 801086c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801086e:	69bb      	ldr	r3, [r7, #24]
 8010870:	799b      	ldrb	r3, [r3, #6]
 8010872:	2bff      	cmp	r3, #255	; 0xff
 8010874:	d005      	beq.n	8010882 <dhcp_rebind+0xde>
    dhcp->tries++;
 8010876:	69bb      	ldr	r3, [r7, #24]
 8010878:	799b      	ldrb	r3, [r3, #6]
 801087a:	3301      	adds	r3, #1
 801087c:	b2da      	uxtb	r2, r3
 801087e:	69bb      	ldr	r3, [r7, #24]
 8010880:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8010882:	69bb      	ldr	r3, [r7, #24]
 8010884:	799b      	ldrb	r3, [r3, #6]
 8010886:	2b09      	cmp	r3, #9
 8010888:	d80a      	bhi.n	80108a0 <dhcp_rebind+0xfc>
 801088a:	69bb      	ldr	r3, [r7, #24]
 801088c:	799b      	ldrb	r3, [r3, #6]
 801088e:	b29b      	uxth	r3, r3
 8010890:	461a      	mov	r2, r3
 8010892:	0152      	lsls	r2, r2, #5
 8010894:	1ad2      	subs	r2, r2, r3
 8010896:	0092      	lsls	r2, r2, #2
 8010898:	4413      	add	r3, r2
 801089a:	00db      	lsls	r3, r3, #3
 801089c:	b29b      	uxth	r3, r3
 801089e:	e001      	b.n	80108a4 <dhcp_rebind+0x100>
 80108a0:	f242 7310 	movw	r3, #10000	; 0x2710
 80108a4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80108a6:	89fb      	ldrh	r3, [r7, #14]
 80108a8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80108ac:	4a0a      	ldr	r2, [pc, #40]	; (80108d8 <dhcp_rebind+0x134>)
 80108ae:	fb82 1203 	smull	r1, r2, r2, r3
 80108b2:	1152      	asrs	r2, r2, #5
 80108b4:	17db      	asrs	r3, r3, #31
 80108b6:	1ad3      	subs	r3, r2, r3
 80108b8:	b29a      	uxth	r2, r3
 80108ba:	69bb      	ldr	r3, [r7, #24]
 80108bc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80108be:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80108c2:	4618      	mov	r0, r3
 80108c4:	3720      	adds	r7, #32
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}
 80108ca:	bf00      	nop
 80108cc:	20000030 	.word	0x20000030
 80108d0:	20018c6c 	.word	0x20018c6c
 80108d4:	08018140 	.word	0x08018140
 80108d8:	10624dd3 	.word	0x10624dd3

080108dc <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80108dc:	b5b0      	push	{r4, r5, r7, lr}
 80108de:	b08a      	sub	sp, #40	; 0x28
 80108e0:	af02      	add	r7, sp, #8
 80108e2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108e8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80108ea:	2103      	movs	r1, #3
 80108ec:	69b8      	ldr	r0, [r7, #24]
 80108ee:	f000 f945 	bl	8010b7c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80108f2:	f107 030c 	add.w	r3, r7, #12
 80108f6:	2203      	movs	r2, #3
 80108f8:	69b9      	ldr	r1, [r7, #24]
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	f000 fdca 	bl	8011494 <dhcp_create_msg>
 8010900:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010902:	697b      	ldr	r3, [r7, #20]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d066      	beq.n	80109d6 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010908:	697b      	ldr	r3, [r7, #20]
 801090a:	685b      	ldr	r3, [r3, #4]
 801090c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801090e:	89b8      	ldrh	r0, [r7, #12]
 8010910:	693b      	ldr	r3, [r7, #16]
 8010912:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010916:	2302      	movs	r3, #2
 8010918:	2239      	movs	r2, #57	; 0x39
 801091a:	f000 f949 	bl	8010bb0 <dhcp_option>
 801091e:	4603      	mov	r3, r0
 8010920:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8010922:	89b8      	ldrh	r0, [r7, #12]
 8010924:	693b      	ldr	r3, [r7, #16]
 8010926:	33f0      	adds	r3, #240	; 0xf0
 8010928:	f44f 7210 	mov.w	r2, #576	; 0x240
 801092c:	4619      	mov	r1, r3
 801092e:	f000 f999 	bl	8010c64 <dhcp_option_short>
 8010932:	4603      	mov	r3, r0
 8010934:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8010936:	89b8      	ldrh	r0, [r7, #12]
 8010938:	693b      	ldr	r3, [r7, #16]
 801093a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801093e:	2304      	movs	r3, #4
 8010940:	2232      	movs	r2, #50	; 0x32
 8010942:	f000 f935 	bl	8010bb0 <dhcp_option>
 8010946:	4603      	mov	r3, r0
 8010948:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801094a:	89bc      	ldrh	r4, [r7, #12]
 801094c:	693b      	ldr	r3, [r7, #16]
 801094e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010952:	69bb      	ldr	r3, [r7, #24]
 8010954:	69db      	ldr	r3, [r3, #28]
 8010956:	4618      	mov	r0, r3
 8010958:	f7f7 fa0f 	bl	8007d7a <lwip_htonl>
 801095c:	4603      	mov	r3, r0
 801095e:	461a      	mov	r2, r3
 8010960:	4629      	mov	r1, r5
 8010962:	4620      	mov	r0, r4
 8010964:	f000 f9b0 	bl	8010cc8 <dhcp_option_long>
 8010968:	4603      	mov	r3, r0
 801096a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801096c:	89b8      	ldrh	r0, [r7, #12]
 801096e:	693b      	ldr	r3, [r7, #16]
 8010970:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010974:	2303      	movs	r3, #3
 8010976:	2237      	movs	r2, #55	; 0x37
 8010978:	f000 f91a 	bl	8010bb0 <dhcp_option>
 801097c:	4603      	mov	r3, r0
 801097e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010980:	2300      	movs	r3, #0
 8010982:	77bb      	strb	r3, [r7, #30]
 8010984:	e00e      	b.n	80109a4 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010986:	89b8      	ldrh	r0, [r7, #12]
 8010988:	693b      	ldr	r3, [r7, #16]
 801098a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801098e:	7fbb      	ldrb	r3, [r7, #30]
 8010990:	4a29      	ldr	r2, [pc, #164]	; (8010a38 <dhcp_reboot+0x15c>)
 8010992:	5cd3      	ldrb	r3, [r2, r3]
 8010994:	461a      	mov	r2, r3
 8010996:	f000 f93f 	bl	8010c18 <dhcp_option_byte>
 801099a:	4603      	mov	r3, r0
 801099c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801099e:	7fbb      	ldrb	r3, [r7, #30]
 80109a0:	3301      	adds	r3, #1
 80109a2:	77bb      	strb	r3, [r7, #30]
 80109a4:	7fbb      	ldrb	r3, [r7, #30]
 80109a6:	2b02      	cmp	r3, #2
 80109a8:	d9ed      	bls.n	8010986 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80109aa:	89b8      	ldrh	r0, [r7, #12]
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	33f0      	adds	r3, #240	; 0xf0
 80109b0:	697a      	ldr	r2, [r7, #20]
 80109b2:	4619      	mov	r1, r3
 80109b4:	f000 fe44 	bl	8011640 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80109b8:	4b20      	ldr	r3, [pc, #128]	; (8010a3c <dhcp_reboot+0x160>)
 80109ba:	6818      	ldr	r0, [r3, #0]
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	9300      	str	r3, [sp, #0]
 80109c0:	2343      	movs	r3, #67	; 0x43
 80109c2:	4a1f      	ldr	r2, [pc, #124]	; (8010a40 <dhcp_reboot+0x164>)
 80109c4:	6979      	ldr	r1, [r7, #20]
 80109c6:	f7fe fd03 	bl	800f3d0 <udp_sendto_if>
 80109ca:	4603      	mov	r3, r0
 80109cc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80109ce:	6978      	ldr	r0, [r7, #20]
 80109d0:	f7f8 fdbc 	bl	800954c <pbuf_free>
 80109d4:	e001      	b.n	80109da <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80109d6:	23ff      	movs	r3, #255	; 0xff
 80109d8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80109da:	69bb      	ldr	r3, [r7, #24]
 80109dc:	799b      	ldrb	r3, [r3, #6]
 80109de:	2bff      	cmp	r3, #255	; 0xff
 80109e0:	d005      	beq.n	80109ee <dhcp_reboot+0x112>
    dhcp->tries++;
 80109e2:	69bb      	ldr	r3, [r7, #24]
 80109e4:	799b      	ldrb	r3, [r3, #6]
 80109e6:	3301      	adds	r3, #1
 80109e8:	b2da      	uxtb	r2, r3
 80109ea:	69bb      	ldr	r3, [r7, #24]
 80109ec:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80109ee:	69bb      	ldr	r3, [r7, #24]
 80109f0:	799b      	ldrb	r3, [r3, #6]
 80109f2:	2b09      	cmp	r3, #9
 80109f4:	d80a      	bhi.n	8010a0c <dhcp_reboot+0x130>
 80109f6:	69bb      	ldr	r3, [r7, #24]
 80109f8:	799b      	ldrb	r3, [r3, #6]
 80109fa:	b29b      	uxth	r3, r3
 80109fc:	461a      	mov	r2, r3
 80109fe:	0152      	lsls	r2, r2, #5
 8010a00:	1ad2      	subs	r2, r2, r3
 8010a02:	0092      	lsls	r2, r2, #2
 8010a04:	4413      	add	r3, r2
 8010a06:	00db      	lsls	r3, r3, #3
 8010a08:	b29b      	uxth	r3, r3
 8010a0a:	e001      	b.n	8010a10 <dhcp_reboot+0x134>
 8010a0c:	f242 7310 	movw	r3, #10000	; 0x2710
 8010a10:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010a12:	89fb      	ldrh	r3, [r7, #14]
 8010a14:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010a18:	4a0a      	ldr	r2, [pc, #40]	; (8010a44 <dhcp_reboot+0x168>)
 8010a1a:	fb82 1203 	smull	r1, r2, r2, r3
 8010a1e:	1152      	asrs	r2, r2, #5
 8010a20:	17db      	asrs	r3, r3, #31
 8010a22:	1ad3      	subs	r3, r2, r3
 8010a24:	b29a      	uxth	r2, r3
 8010a26:	69bb      	ldr	r3, [r7, #24]
 8010a28:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010a2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010a2e:	4618      	mov	r0, r3
 8010a30:	3720      	adds	r7, #32
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bdb0      	pop	{r4, r5, r7, pc}
 8010a36:	bf00      	nop
 8010a38:	20000030 	.word	0x20000030
 8010a3c:	20018c6c 	.word	0x20018c6c
 8010a40:	08018140 	.word	0x08018140
 8010a44:	10624dd3 	.word	0x10624dd3

08010a48 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8010a48:	b5b0      	push	{r4, r5, r7, lr}
 8010a4a:	b08a      	sub	sp, #40	; 0x28
 8010a4c:	af02      	add	r7, sp, #8
 8010a4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a54:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8010a56:	69fb      	ldr	r3, [r7, #28]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	f000 8084 	beq.w	8010b66 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8010a5e:	69fb      	ldr	r3, [r7, #28]
 8010a60:	795b      	ldrb	r3, [r3, #5]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	f000 8081 	beq.w	8010b6a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8010a68:	69fb      	ldr	r3, [r7, #28]
 8010a6a:	699b      	ldr	r3, [r3, #24]
 8010a6c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8010a6e:	69fb      	ldr	r3, [r7, #28]
 8010a70:	2200      	movs	r2, #0
 8010a72:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8010a74:	69fb      	ldr	r3, [r7, #28]
 8010a76:	2200      	movs	r2, #0
 8010a78:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8010a7a:	69fb      	ldr	r3, [r7, #28]
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8010a80:	69fb      	ldr	r3, [r7, #28]
 8010a82:	2200      	movs	r2, #0
 8010a84:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8010a86:	69fb      	ldr	r3, [r7, #28]
 8010a88:	2200      	movs	r2, #0
 8010a8a:	631a      	str	r2, [r3, #48]	; 0x30
 8010a8c:	69fb      	ldr	r3, [r7, #28]
 8010a8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010a90:	69fb      	ldr	r3, [r7, #28]
 8010a92:	62da      	str	r2, [r3, #44]	; 0x2c
 8010a94:	69fb      	ldr	r3, [r7, #28]
 8010a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a98:	69fb      	ldr	r3, [r7, #28]
 8010a9a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8010a9c:	69fb      	ldr	r3, [r7, #28]
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	829a      	strh	r2, [r3, #20]
 8010aa2:	69fb      	ldr	r3, [r7, #28]
 8010aa4:	8a9a      	ldrh	r2, [r3, #20]
 8010aa6:	69fb      	ldr	r3, [r7, #28]
 8010aa8:	825a      	strh	r2, [r3, #18]
 8010aaa:	69fb      	ldr	r3, [r7, #28]
 8010aac:	8a5a      	ldrh	r2, [r3, #18]
 8010aae:	69fb      	ldr	r3, [r7, #28]
 8010ab0:	821a      	strh	r2, [r3, #16]
 8010ab2:	69fb      	ldr	r3, [r7, #28]
 8010ab4:	8a1a      	ldrh	r2, [r3, #16]
 8010ab6:	69fb      	ldr	r3, [r7, #28]
 8010ab8:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8010aba:	6878      	ldr	r0, [r7, #4]
 8010abc:	f000 fdee 	bl	801169c <dhcp_supplied_address>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d03b      	beq.n	8010b3e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8010ac6:	f107 030e 	add.w	r3, r7, #14
 8010aca:	2207      	movs	r2, #7
 8010acc:	69f9      	ldr	r1, [r7, #28]
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	f000 fce0 	bl	8011494 <dhcp_create_msg>
 8010ad4:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8010ad6:	69bb      	ldr	r3, [r7, #24]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d030      	beq.n	8010b3e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010adc:	69bb      	ldr	r3, [r7, #24]
 8010ade:	685b      	ldr	r3, [r3, #4]
 8010ae0:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8010ae2:	89f8      	ldrh	r0, [r7, #14]
 8010ae4:	697b      	ldr	r3, [r7, #20]
 8010ae6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010aea:	2304      	movs	r3, #4
 8010aec:	2236      	movs	r2, #54	; 0x36
 8010aee:	f000 f85f 	bl	8010bb0 <dhcp_option>
 8010af2:	4603      	mov	r3, r0
 8010af4:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8010af6:	89fc      	ldrh	r4, [r7, #14]
 8010af8:	697b      	ldr	r3, [r7, #20]
 8010afa:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010afe:	693b      	ldr	r3, [r7, #16]
 8010b00:	4618      	mov	r0, r3
 8010b02:	f7f7 f93a 	bl	8007d7a <lwip_htonl>
 8010b06:	4603      	mov	r3, r0
 8010b08:	461a      	mov	r2, r3
 8010b0a:	4629      	mov	r1, r5
 8010b0c:	4620      	mov	r0, r4
 8010b0e:	f000 f8db 	bl	8010cc8 <dhcp_option_long>
 8010b12:	4603      	mov	r3, r0
 8010b14:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010b16:	89f8      	ldrh	r0, [r7, #14]
 8010b18:	697b      	ldr	r3, [r7, #20]
 8010b1a:	33f0      	adds	r3, #240	; 0xf0
 8010b1c:	69ba      	ldr	r2, [r7, #24]
 8010b1e:	4619      	mov	r1, r3
 8010b20:	f000 fd8e 	bl	8011640 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010b24:	4b13      	ldr	r3, [pc, #76]	; (8010b74 <dhcp_release_and_stop+0x12c>)
 8010b26:	6818      	ldr	r0, [r3, #0]
 8010b28:	f107 0210 	add.w	r2, r7, #16
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	9300      	str	r3, [sp, #0]
 8010b30:	2343      	movs	r3, #67	; 0x43
 8010b32:	69b9      	ldr	r1, [r7, #24]
 8010b34:	f7fe fc4c 	bl	800f3d0 <udp_sendto_if>
      pbuf_free(p_out);
 8010b38:	69b8      	ldr	r0, [r7, #24]
 8010b3a:	f7f8 fd07 	bl	800954c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8010b3e:	4b0e      	ldr	r3, [pc, #56]	; (8010b78 <dhcp_release_and_stop+0x130>)
 8010b40:	4a0d      	ldr	r2, [pc, #52]	; (8010b78 <dhcp_release_and_stop+0x130>)
 8010b42:	490d      	ldr	r1, [pc, #52]	; (8010b78 <dhcp_release_and_stop+0x130>)
 8010b44:	6878      	ldr	r0, [r7, #4]
 8010b46:	f7f7 fff3 	bl	8008b30 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8010b4a:	2100      	movs	r1, #0
 8010b4c:	69f8      	ldr	r0, [r7, #28]
 8010b4e:	f000 f815 	bl	8010b7c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8010b52:	69fb      	ldr	r3, [r7, #28]
 8010b54:	791b      	ldrb	r3, [r3, #4]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d008      	beq.n	8010b6c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8010b5a:	f7fe ff85 	bl	800fa68 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8010b5e:	69fb      	ldr	r3, [r7, #28]
 8010b60:	2200      	movs	r2, #0
 8010b62:	711a      	strb	r2, [r3, #4]
 8010b64:	e002      	b.n	8010b6c <dhcp_release_and_stop+0x124>
    return;
 8010b66:	bf00      	nop
 8010b68:	e000      	b.n	8010b6c <dhcp_release_and_stop+0x124>
    return;
 8010b6a:	bf00      	nop
  }
}
 8010b6c:	3720      	adds	r7, #32
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	bdb0      	pop	{r4, r5, r7, pc}
 8010b72:	bf00      	nop
 8010b74:	20018c6c 	.word	0x20018c6c
 8010b78:	0801813c 	.word	0x0801813c

08010b7c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8010b7c:	b480      	push	{r7}
 8010b7e:	b083      	sub	sp, #12
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
 8010b84:	460b      	mov	r3, r1
 8010b86:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	795b      	ldrb	r3, [r3, #5]
 8010b8c:	78fa      	ldrb	r2, [r7, #3]
 8010b8e:	429a      	cmp	r2, r3
 8010b90:	d008      	beq.n	8010ba4 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	78fa      	ldrb	r2, [r7, #3]
 8010b96:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	811a      	strh	r2, [r3, #8]
  }
}
 8010ba4:	bf00      	nop
 8010ba6:	370c      	adds	r7, #12
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bae:	4770      	bx	lr

08010bb0 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b082      	sub	sp, #8
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6039      	str	r1, [r7, #0]
 8010bb8:	4611      	mov	r1, r2
 8010bba:	461a      	mov	r2, r3
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	80fb      	strh	r3, [r7, #6]
 8010bc0:	460b      	mov	r3, r1
 8010bc2:	717b      	strb	r3, [r7, #5]
 8010bc4:	4613      	mov	r3, r2
 8010bc6:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8010bc8:	88fa      	ldrh	r2, [r7, #6]
 8010bca:	793b      	ldrb	r3, [r7, #4]
 8010bcc:	4413      	add	r3, r2
 8010bce:	3302      	adds	r3, #2
 8010bd0:	2b44      	cmp	r3, #68	; 0x44
 8010bd2:	d906      	bls.n	8010be2 <dhcp_option+0x32>
 8010bd4:	4b0d      	ldr	r3, [pc, #52]	; (8010c0c <dhcp_option+0x5c>)
 8010bd6:	f240 529a 	movw	r2, #1434	; 0x59a
 8010bda:	490d      	ldr	r1, [pc, #52]	; (8010c10 <dhcp_option+0x60>)
 8010bdc:	480d      	ldr	r0, [pc, #52]	; (8010c14 <dhcp_option+0x64>)
 8010bde:	f003 fb59 	bl	8014294 <iprintf>
  options[options_out_len++] = option_type;
 8010be2:	88fb      	ldrh	r3, [r7, #6]
 8010be4:	1c5a      	adds	r2, r3, #1
 8010be6:	80fa      	strh	r2, [r7, #6]
 8010be8:	461a      	mov	r2, r3
 8010bea:	683b      	ldr	r3, [r7, #0]
 8010bec:	4413      	add	r3, r2
 8010bee:	797a      	ldrb	r2, [r7, #5]
 8010bf0:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8010bf2:	88fb      	ldrh	r3, [r7, #6]
 8010bf4:	1c5a      	adds	r2, r3, #1
 8010bf6:	80fa      	strh	r2, [r7, #6]
 8010bf8:	461a      	mov	r2, r3
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	4413      	add	r3, r2
 8010bfe:	793a      	ldrb	r2, [r7, #4]
 8010c00:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010c02:	88fb      	ldrh	r3, [r7, #6]
}
 8010c04:	4618      	mov	r0, r3
 8010c06:	3708      	adds	r7, #8
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	bd80      	pop	{r7, pc}
 8010c0c:	08017594 	.word	0x08017594
 8010c10:	08017728 	.word	0x08017728
 8010c14:	080175f4 	.word	0x080175f4

08010c18 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b082      	sub	sp, #8
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	4603      	mov	r3, r0
 8010c20:	6039      	str	r1, [r7, #0]
 8010c22:	80fb      	strh	r3, [r7, #6]
 8010c24:	4613      	mov	r3, r2
 8010c26:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8010c28:	88fb      	ldrh	r3, [r7, #6]
 8010c2a:	2b43      	cmp	r3, #67	; 0x43
 8010c2c:	d906      	bls.n	8010c3c <dhcp_option_byte+0x24>
 8010c2e:	4b0a      	ldr	r3, [pc, #40]	; (8010c58 <dhcp_option_byte+0x40>)
 8010c30:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8010c34:	4909      	ldr	r1, [pc, #36]	; (8010c5c <dhcp_option_byte+0x44>)
 8010c36:	480a      	ldr	r0, [pc, #40]	; (8010c60 <dhcp_option_byte+0x48>)
 8010c38:	f003 fb2c 	bl	8014294 <iprintf>
  options[options_out_len++] = value;
 8010c3c:	88fb      	ldrh	r3, [r7, #6]
 8010c3e:	1c5a      	adds	r2, r3, #1
 8010c40:	80fa      	strh	r2, [r7, #6]
 8010c42:	461a      	mov	r2, r3
 8010c44:	683b      	ldr	r3, [r7, #0]
 8010c46:	4413      	add	r3, r2
 8010c48:	797a      	ldrb	r2, [r7, #5]
 8010c4a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010c4c:	88fb      	ldrh	r3, [r7, #6]
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3708      	adds	r7, #8
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}
 8010c56:	bf00      	nop
 8010c58:	08017594 	.word	0x08017594
 8010c5c:	0801776c 	.word	0x0801776c
 8010c60:	080175f4 	.word	0x080175f4

08010c64 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b082      	sub	sp, #8
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	6039      	str	r1, [r7, #0]
 8010c6e:	80fb      	strh	r3, [r7, #6]
 8010c70:	4613      	mov	r3, r2
 8010c72:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8010c74:	88fb      	ldrh	r3, [r7, #6]
 8010c76:	3302      	adds	r3, #2
 8010c78:	2b44      	cmp	r3, #68	; 0x44
 8010c7a:	d906      	bls.n	8010c8a <dhcp_option_short+0x26>
 8010c7c:	4b0f      	ldr	r3, [pc, #60]	; (8010cbc <dhcp_option_short+0x58>)
 8010c7e:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8010c82:	490f      	ldr	r1, [pc, #60]	; (8010cc0 <dhcp_option_short+0x5c>)
 8010c84:	480f      	ldr	r0, [pc, #60]	; (8010cc4 <dhcp_option_short+0x60>)
 8010c86:	f003 fb05 	bl	8014294 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8010c8a:	88bb      	ldrh	r3, [r7, #4]
 8010c8c:	0a1b      	lsrs	r3, r3, #8
 8010c8e:	b29a      	uxth	r2, r3
 8010c90:	88fb      	ldrh	r3, [r7, #6]
 8010c92:	1c59      	adds	r1, r3, #1
 8010c94:	80f9      	strh	r1, [r7, #6]
 8010c96:	4619      	mov	r1, r3
 8010c98:	683b      	ldr	r3, [r7, #0]
 8010c9a:	440b      	add	r3, r1
 8010c9c:	b2d2      	uxtb	r2, r2
 8010c9e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8010ca0:	88fb      	ldrh	r3, [r7, #6]
 8010ca2:	1c5a      	adds	r2, r3, #1
 8010ca4:	80fa      	strh	r2, [r7, #6]
 8010ca6:	461a      	mov	r2, r3
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	4413      	add	r3, r2
 8010cac:	88ba      	ldrh	r2, [r7, #4]
 8010cae:	b2d2      	uxtb	r2, r2
 8010cb0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010cb2:	88fb      	ldrh	r3, [r7, #6]
}
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	3708      	adds	r7, #8
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}
 8010cbc:	08017594 	.word	0x08017594
 8010cc0:	080177a4 	.word	0x080177a4
 8010cc4:	080175f4 	.word	0x080175f4

08010cc8 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b084      	sub	sp, #16
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	4603      	mov	r3, r0
 8010cd0:	60b9      	str	r1, [r7, #8]
 8010cd2:	607a      	str	r2, [r7, #4]
 8010cd4:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8010cd6:	89fb      	ldrh	r3, [r7, #14]
 8010cd8:	3304      	adds	r3, #4
 8010cda:	2b44      	cmp	r3, #68	; 0x44
 8010cdc:	d906      	bls.n	8010cec <dhcp_option_long+0x24>
 8010cde:	4b19      	ldr	r3, [pc, #100]	; (8010d44 <dhcp_option_long+0x7c>)
 8010ce0:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8010ce4:	4918      	ldr	r1, [pc, #96]	; (8010d48 <dhcp_option_long+0x80>)
 8010ce6:	4819      	ldr	r0, [pc, #100]	; (8010d4c <dhcp_option_long+0x84>)
 8010ce8:	f003 fad4 	bl	8014294 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	0e1a      	lsrs	r2, r3, #24
 8010cf0:	89fb      	ldrh	r3, [r7, #14]
 8010cf2:	1c59      	adds	r1, r3, #1
 8010cf4:	81f9      	strh	r1, [r7, #14]
 8010cf6:	4619      	mov	r1, r3
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	440b      	add	r3, r1
 8010cfc:	b2d2      	uxtb	r2, r2
 8010cfe:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	0c1a      	lsrs	r2, r3, #16
 8010d04:	89fb      	ldrh	r3, [r7, #14]
 8010d06:	1c59      	adds	r1, r3, #1
 8010d08:	81f9      	strh	r1, [r7, #14]
 8010d0a:	4619      	mov	r1, r3
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	440b      	add	r3, r1
 8010d10:	b2d2      	uxtb	r2, r2
 8010d12:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	0a1a      	lsrs	r2, r3, #8
 8010d18:	89fb      	ldrh	r3, [r7, #14]
 8010d1a:	1c59      	adds	r1, r3, #1
 8010d1c:	81f9      	strh	r1, [r7, #14]
 8010d1e:	4619      	mov	r1, r3
 8010d20:	68bb      	ldr	r3, [r7, #8]
 8010d22:	440b      	add	r3, r1
 8010d24:	b2d2      	uxtb	r2, r2
 8010d26:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8010d28:	89fb      	ldrh	r3, [r7, #14]
 8010d2a:	1c5a      	adds	r2, r3, #1
 8010d2c:	81fa      	strh	r2, [r7, #14]
 8010d2e:	461a      	mov	r2, r3
 8010d30:	68bb      	ldr	r3, [r7, #8]
 8010d32:	4413      	add	r3, r2
 8010d34:	687a      	ldr	r2, [r7, #4]
 8010d36:	b2d2      	uxtb	r2, r2
 8010d38:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010d3a:	89fb      	ldrh	r3, [r7, #14]
}
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	3710      	adds	r7, #16
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}
 8010d44:	08017594 	.word	0x08017594
 8010d48:	080177e0 	.word	0x080177e0
 8010d4c:	080175f4 	.word	0x080175f4

08010d50 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b090      	sub	sp, #64	; 0x40
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
 8010d58:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8010d5e:	2300      	movs	r3, #0
 8010d60:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8010d62:	2208      	movs	r2, #8
 8010d64:	2100      	movs	r1, #0
 8010d66:	48b5      	ldr	r0, [pc, #724]	; (801103c <dhcp_parse_reply+0x2ec>)
 8010d68:	f003 f9f7 	bl	801415a <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	895b      	ldrh	r3, [r3, #10]
 8010d70:	2b2b      	cmp	r3, #43	; 0x2b
 8010d72:	d802      	bhi.n	8010d7a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8010d74:	f06f 0301 	mvn.w	r3, #1
 8010d78:	e2a7      	b.n	80112ca <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	685b      	ldr	r3, [r3, #4]
 8010d7e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8010d80:	23f0      	movs	r3, #240	; 0xf0
 8010d82:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	891b      	ldrh	r3, [r3, #8]
 8010d88:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010d8e:	e00c      	b.n	8010daa <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8010d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d92:	895b      	ldrh	r3, [r3, #10]
 8010d94:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010d96:	1ad3      	subs	r3, r2, r3
 8010d98:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8010d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d9c:	895b      	ldrh	r3, [r3, #10]
 8010d9e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8010da0:	1ad3      	subs	r3, r2, r3
 8010da2:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8010da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d004      	beq.n	8010dba <dhcp_parse_reply+0x6a>
 8010db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010db2:	895b      	ldrh	r3, [r3, #10]
 8010db4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010db6:	429a      	cmp	r2, r3
 8010db8:	d2ea      	bcs.n	8010d90 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8010dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d102      	bne.n	8010dc6 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8010dc0:	f06f 0301 	mvn.w	r3, #1
 8010dc4:	e281      	b.n	80112ca <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8010dc6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010dc8:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8010dca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010dcc:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8010dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dd0:	685b      	ldr	r3, [r3, #4]
 8010dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8010dd4:	e239      	b.n	801124a <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8010dd6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010dd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010dda:	4413      	add	r3, r2
 8010ddc:	781b      	ldrb	r3, [r3, #0]
 8010dde:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8010de0:	2300      	movs	r3, #0
 8010de2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8010de6:	f04f 33ff 	mov.w	r3, #4294967295
 8010dea:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8010dec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010dee:	3302      	adds	r3, #2
 8010df0:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8010df2:	8bfa      	ldrh	r2, [r7, #30]
 8010df4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010df6:	429a      	cmp	r2, r3
 8010df8:	d202      	bcs.n	8010e00 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8010dfa:	f06f 0301 	mvn.w	r3, #1
 8010dfe:	e264      	b.n	80112ca <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8010e00:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010e02:	3301      	adds	r3, #1
 8010e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e06:	8952      	ldrh	r2, [r2, #10]
 8010e08:	4293      	cmp	r3, r2
 8010e0a:	da07      	bge.n	8010e1c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8010e0c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010e0e:	3301      	adds	r3, #1
 8010e10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010e12:	4413      	add	r3, r2
 8010e14:	781b      	ldrb	r3, [r3, #0]
 8010e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010e1a:	e00b      	b.n	8010e34 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8010e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d004      	beq.n	8010e2e <dhcp_parse_reply+0xde>
 8010e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	685b      	ldr	r3, [r3, #4]
 8010e2a:	781b      	ldrb	r3, [r3, #0]
 8010e2c:	e000      	b.n	8010e30 <dhcp_parse_reply+0xe0>
 8010e2e:	2300      	movs	r3, #0
 8010e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8010e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8010e3c:	7dfb      	ldrb	r3, [r7, #23]
 8010e3e:	2b3b      	cmp	r3, #59	; 0x3b
 8010e40:	f200 812c 	bhi.w	801109c <dhcp_parse_reply+0x34c>
 8010e44:	a201      	add	r2, pc, #4	; (adr r2, 8010e4c <dhcp_parse_reply+0xfc>)
 8010e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e4a:	bf00      	nop
 8010e4c:	08010f3d 	.word	0x08010f3d
 8010e50:	08010f4d 	.word	0x08010f4d
 8010e54:	0801109d 	.word	0x0801109d
 8010e58:	08010f6f 	.word	0x08010f6f
 8010e5c:	0801109d 	.word	0x0801109d
 8010e60:	0801109d 	.word	0x0801109d
 8010e64:	0801109d 	.word	0x0801109d
 8010e68:	0801109d 	.word	0x0801109d
 8010e6c:	0801109d 	.word	0x0801109d
 8010e70:	0801109d 	.word	0x0801109d
 8010e74:	0801109d 	.word	0x0801109d
 8010e78:	0801109d 	.word	0x0801109d
 8010e7c:	0801109d 	.word	0x0801109d
 8010e80:	0801109d 	.word	0x0801109d
 8010e84:	0801109d 	.word	0x0801109d
 8010e88:	0801109d 	.word	0x0801109d
 8010e8c:	0801109d 	.word	0x0801109d
 8010e90:	0801109d 	.word	0x0801109d
 8010e94:	0801109d 	.word	0x0801109d
 8010e98:	0801109d 	.word	0x0801109d
 8010e9c:	0801109d 	.word	0x0801109d
 8010ea0:	0801109d 	.word	0x0801109d
 8010ea4:	0801109d 	.word	0x0801109d
 8010ea8:	0801109d 	.word	0x0801109d
 8010eac:	0801109d 	.word	0x0801109d
 8010eb0:	0801109d 	.word	0x0801109d
 8010eb4:	0801109d 	.word	0x0801109d
 8010eb8:	0801109d 	.word	0x0801109d
 8010ebc:	0801109d 	.word	0x0801109d
 8010ec0:	0801109d 	.word	0x0801109d
 8010ec4:	0801109d 	.word	0x0801109d
 8010ec8:	0801109d 	.word	0x0801109d
 8010ecc:	0801109d 	.word	0x0801109d
 8010ed0:	0801109d 	.word	0x0801109d
 8010ed4:	0801109d 	.word	0x0801109d
 8010ed8:	0801109d 	.word	0x0801109d
 8010edc:	0801109d 	.word	0x0801109d
 8010ee0:	0801109d 	.word	0x0801109d
 8010ee4:	0801109d 	.word	0x0801109d
 8010ee8:	0801109d 	.word	0x0801109d
 8010eec:	0801109d 	.word	0x0801109d
 8010ef0:	0801109d 	.word	0x0801109d
 8010ef4:	0801109d 	.word	0x0801109d
 8010ef8:	0801109d 	.word	0x0801109d
 8010efc:	0801109d 	.word	0x0801109d
 8010f00:	0801109d 	.word	0x0801109d
 8010f04:	0801109d 	.word	0x0801109d
 8010f08:	0801109d 	.word	0x0801109d
 8010f0c:	0801109d 	.word	0x0801109d
 8010f10:	0801109d 	.word	0x0801109d
 8010f14:	0801109d 	.word	0x0801109d
 8010f18:	08010f9b 	.word	0x08010f9b
 8010f1c:	08010fbd 	.word	0x08010fbd
 8010f20:	08010ff9 	.word	0x08010ff9
 8010f24:	0801101b 	.word	0x0801101b
 8010f28:	0801109d 	.word	0x0801109d
 8010f2c:	0801109d 	.word	0x0801109d
 8010f30:	0801109d 	.word	0x0801109d
 8010f34:	08011059 	.word	0x08011059
 8010f38:	0801107b 	.word	0x0801107b
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010f42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8010f4a:	e0ab      	b.n	80110a4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f50:	2b04      	cmp	r3, #4
 8010f52:	d009      	beq.n	8010f68 <dhcp_parse_reply+0x218>
 8010f54:	4b3a      	ldr	r3, [pc, #232]	; (8011040 <dhcp_parse_reply+0x2f0>)
 8010f56:	f240 622e 	movw	r2, #1582	; 0x62e
 8010f5a:	493a      	ldr	r1, [pc, #232]	; (8011044 <dhcp_parse_reply+0x2f4>)
 8010f5c:	483a      	ldr	r0, [pc, #232]	; (8011048 <dhcp_parse_reply+0x2f8>)
 8010f5e:	f003 f999 	bl	8014294 <iprintf>
 8010f62:	f06f 0305 	mvn.w	r3, #5
 8010f66:	e1b0      	b.n	80112ca <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8010f68:	2306      	movs	r3, #6
 8010f6a:	623b      	str	r3, [r7, #32]
        break;
 8010f6c:	e09a      	b.n	80110a4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8010f6e:	2304      	movs	r3, #4
 8010f70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8010f74:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010f78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	d209      	bcs.n	8010f94 <dhcp_parse_reply+0x244>
 8010f80:	4b2f      	ldr	r3, [pc, #188]	; (8011040 <dhcp_parse_reply+0x2f0>)
 8010f82:	f240 6233 	movw	r2, #1587	; 0x633
 8010f86:	4931      	ldr	r1, [pc, #196]	; (801104c <dhcp_parse_reply+0x2fc>)
 8010f88:	482f      	ldr	r0, [pc, #188]	; (8011048 <dhcp_parse_reply+0x2f8>)
 8010f8a:	f003 f983 	bl	8014294 <iprintf>
 8010f8e:	f06f 0305 	mvn.w	r3, #5
 8010f92:	e19a      	b.n	80112ca <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8010f94:	2307      	movs	r3, #7
 8010f96:	623b      	str	r3, [r7, #32]
        break;
 8010f98:	e084      	b.n	80110a4 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f9e:	2b04      	cmp	r3, #4
 8010fa0:	d009      	beq.n	8010fb6 <dhcp_parse_reply+0x266>
 8010fa2:	4b27      	ldr	r3, [pc, #156]	; (8011040 <dhcp_parse_reply+0x2f0>)
 8010fa4:	f240 6241 	movw	r2, #1601	; 0x641
 8010fa8:	4926      	ldr	r1, [pc, #152]	; (8011044 <dhcp_parse_reply+0x2f4>)
 8010faa:	4827      	ldr	r0, [pc, #156]	; (8011048 <dhcp_parse_reply+0x2f8>)
 8010fac:	f003 f972 	bl	8014294 <iprintf>
 8010fb0:	f06f 0305 	mvn.w	r3, #5
 8010fb4:	e189      	b.n	80112ca <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8010fb6:	2303      	movs	r3, #3
 8010fb8:	623b      	str	r3, [r7, #32]
        break;
 8010fba:	e073      	b.n	80110a4 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8010fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fc0:	2b01      	cmp	r3, #1
 8010fc2:	d009      	beq.n	8010fd8 <dhcp_parse_reply+0x288>
 8010fc4:	4b1e      	ldr	r3, [pc, #120]	; (8011040 <dhcp_parse_reply+0x2f0>)
 8010fc6:	f240 624f 	movw	r2, #1615	; 0x64f
 8010fca:	4921      	ldr	r1, [pc, #132]	; (8011050 <dhcp_parse_reply+0x300>)
 8010fcc:	481e      	ldr	r0, [pc, #120]	; (8011048 <dhcp_parse_reply+0x2f8>)
 8010fce:	f003 f961 	bl	8014294 <iprintf>
 8010fd2:	f06f 0305 	mvn.w	r3, #5
 8010fd6:	e178      	b.n	80112ca <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8010fd8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010fda:	2bf0      	cmp	r3, #240	; 0xf0
 8010fdc:	d009      	beq.n	8010ff2 <dhcp_parse_reply+0x2a2>
 8010fde:	4b18      	ldr	r3, [pc, #96]	; (8011040 <dhcp_parse_reply+0x2f0>)
 8010fe0:	f240 6251 	movw	r2, #1617	; 0x651
 8010fe4:	491b      	ldr	r1, [pc, #108]	; (8011054 <dhcp_parse_reply+0x304>)
 8010fe6:	4818      	ldr	r0, [pc, #96]	; (8011048 <dhcp_parse_reply+0x2f8>)
 8010fe8:	f003 f954 	bl	8014294 <iprintf>
 8010fec:	f06f 0305 	mvn.w	r3, #5
 8010ff0:	e16b      	b.n	80112ca <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	623b      	str	r3, [r7, #32]
        break;
 8010ff6:	e055      	b.n	80110a4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8010ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ffc:	2b01      	cmp	r3, #1
 8010ffe:	d009      	beq.n	8011014 <dhcp_parse_reply+0x2c4>
 8011000:	4b0f      	ldr	r3, [pc, #60]	; (8011040 <dhcp_parse_reply+0x2f0>)
 8011002:	f240 6255 	movw	r2, #1621	; 0x655
 8011006:	4912      	ldr	r1, [pc, #72]	; (8011050 <dhcp_parse_reply+0x300>)
 8011008:	480f      	ldr	r0, [pc, #60]	; (8011048 <dhcp_parse_reply+0x2f8>)
 801100a:	f003 f943 	bl	8014294 <iprintf>
 801100e:	f06f 0305 	mvn.w	r3, #5
 8011012:	e15a      	b.n	80112ca <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8011014:	2301      	movs	r3, #1
 8011016:	623b      	str	r3, [r7, #32]
        break;
 8011018:	e044      	b.n	80110a4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801101a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801101e:	2b04      	cmp	r3, #4
 8011020:	d009      	beq.n	8011036 <dhcp_parse_reply+0x2e6>
 8011022:	4b07      	ldr	r3, [pc, #28]	; (8011040 <dhcp_parse_reply+0x2f0>)
 8011024:	f240 6259 	movw	r2, #1625	; 0x659
 8011028:	4906      	ldr	r1, [pc, #24]	; (8011044 <dhcp_parse_reply+0x2f4>)
 801102a:	4807      	ldr	r0, [pc, #28]	; (8011048 <dhcp_parse_reply+0x2f8>)
 801102c:	f003 f932 	bl	8014294 <iprintf>
 8011030:	f06f 0305 	mvn.w	r3, #5
 8011034:	e149      	b.n	80112ca <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8011036:	2302      	movs	r3, #2
 8011038:	623b      	str	r3, [r7, #32]
        break;
 801103a:	e033      	b.n	80110a4 <dhcp_parse_reply+0x354>
 801103c:	20018c64 	.word	0x20018c64
 8011040:	08017594 	.word	0x08017594
 8011044:	0801781c 	.word	0x0801781c
 8011048:	080175f4 	.word	0x080175f4
 801104c:	08017828 	.word	0x08017828
 8011050:	0801783c 	.word	0x0801783c
 8011054:	08017848 	.word	0x08017848
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801105c:	2b04      	cmp	r3, #4
 801105e:	d009      	beq.n	8011074 <dhcp_parse_reply+0x324>
 8011060:	4b9c      	ldr	r3, [pc, #624]	; (80112d4 <dhcp_parse_reply+0x584>)
 8011062:	f240 625d 	movw	r2, #1629	; 0x65d
 8011066:	499c      	ldr	r1, [pc, #624]	; (80112d8 <dhcp_parse_reply+0x588>)
 8011068:	489c      	ldr	r0, [pc, #624]	; (80112dc <dhcp_parse_reply+0x58c>)
 801106a:	f003 f913 	bl	8014294 <iprintf>
 801106e:	f06f 0305 	mvn.w	r3, #5
 8011072:	e12a      	b.n	80112ca <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8011074:	2304      	movs	r3, #4
 8011076:	623b      	str	r3, [r7, #32]
        break;
 8011078:	e014      	b.n	80110a4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801107a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801107e:	2b04      	cmp	r3, #4
 8011080:	d009      	beq.n	8011096 <dhcp_parse_reply+0x346>
 8011082:	4b94      	ldr	r3, [pc, #592]	; (80112d4 <dhcp_parse_reply+0x584>)
 8011084:	f240 6261 	movw	r2, #1633	; 0x661
 8011088:	4993      	ldr	r1, [pc, #588]	; (80112d8 <dhcp_parse_reply+0x588>)
 801108a:	4894      	ldr	r0, [pc, #592]	; (80112dc <dhcp_parse_reply+0x58c>)
 801108c:	f003 f902 	bl	8014294 <iprintf>
 8011090:	f06f 0305 	mvn.w	r3, #5
 8011094:	e119      	b.n	80112ca <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8011096:	2305      	movs	r3, #5
 8011098:	623b      	str	r3, [r7, #32]
        break;
 801109a:	e003      	b.n	80110a4 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 801109c:	2300      	movs	r3, #0
 801109e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80110a2:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80110a4:	7dfb      	ldrb	r3, [r7, #23]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d103      	bne.n	80110b2 <dhcp_parse_reply+0x362>
      offset++;
 80110aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80110ac:	3301      	adds	r3, #1
 80110ae:	877b      	strh	r3, [r7, #58]	; 0x3a
 80110b0:	e0a1      	b.n	80111f6 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80110b2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80110b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110b8:	4413      	add	r3, r2
 80110ba:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80110be:	4293      	cmp	r3, r2
 80110c0:	dd02      	ble.n	80110c8 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 80110c2:	f06f 0301 	mvn.w	r3, #1
 80110c6:	e100      	b.n	80112ca <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 80110c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110cc:	b29a      	uxth	r2, r3
 80110ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80110d0:	4413      	add	r3, r2
 80110d2:	b29b      	uxth	r3, r3
 80110d4:	3302      	adds	r3, #2
 80110d6:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80110d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80110dc:	2b00      	cmp	r3, #0
 80110de:	f000 808a 	beq.w	80111f6 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 80110e2:	2300      	movs	r3, #0
 80110e4:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80110e6:	6a3b      	ldr	r3, [r7, #32]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	db02      	blt.n	80110f2 <dhcp_parse_reply+0x3a2>
 80110ec:	6a3b      	ldr	r3, [r7, #32]
 80110ee:	2b07      	cmp	r3, #7
 80110f0:	dd06      	ble.n	8011100 <dhcp_parse_reply+0x3b0>
 80110f2:	4b78      	ldr	r3, [pc, #480]	; (80112d4 <dhcp_parse_reply+0x584>)
 80110f4:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80110f8:	4979      	ldr	r1, [pc, #484]	; (80112e0 <dhcp_parse_reply+0x590>)
 80110fa:	4878      	ldr	r0, [pc, #480]	; (80112dc <dhcp_parse_reply+0x58c>)
 80110fc:	f003 f8ca 	bl	8014294 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8011100:	4a78      	ldr	r2, [pc, #480]	; (80112e4 <dhcp_parse_reply+0x594>)
 8011102:	6a3b      	ldr	r3, [r7, #32]
 8011104:	4413      	add	r3, r2
 8011106:	781b      	ldrb	r3, [r3, #0]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d174      	bne.n	80111f6 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 801110c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011110:	2b04      	cmp	r3, #4
 8011112:	bf28      	it	cs
 8011114:	2304      	movcs	r3, #4
 8011116:	b2db      	uxtb	r3, r3
 8011118:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801111a:	8bfb      	ldrh	r3, [r7, #30]
 801111c:	8aba      	ldrh	r2, [r7, #20]
 801111e:	f107 0108 	add.w	r1, r7, #8
 8011122:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011124:	f7f8 fc18 	bl	8009958 <pbuf_copy_partial>
 8011128:	4603      	mov	r3, r0
 801112a:	461a      	mov	r2, r3
 801112c:	8abb      	ldrh	r3, [r7, #20]
 801112e:	4293      	cmp	r3, r2
 8011130:	d002      	beq.n	8011138 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8011132:	f06f 0301 	mvn.w	r3, #1
 8011136:	e0c8      	b.n	80112ca <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8011138:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801113c:	2b04      	cmp	r3, #4
 801113e:	d933      	bls.n	80111a8 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8011140:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011144:	f003 0303 	and.w	r3, r3, #3
 8011148:	b2db      	uxtb	r3, r3
 801114a:	2b00      	cmp	r3, #0
 801114c:	d009      	beq.n	8011162 <dhcp_parse_reply+0x412>
 801114e:	4b61      	ldr	r3, [pc, #388]	; (80112d4 <dhcp_parse_reply+0x584>)
 8011150:	f240 6281 	movw	r2, #1665	; 0x681
 8011154:	4964      	ldr	r1, [pc, #400]	; (80112e8 <dhcp_parse_reply+0x598>)
 8011156:	4861      	ldr	r0, [pc, #388]	; (80112dc <dhcp_parse_reply+0x58c>)
 8011158:	f003 f89c 	bl	8014294 <iprintf>
 801115c:	f06f 0305 	mvn.w	r3, #5
 8011160:	e0b3      	b.n	80112ca <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8011162:	4a60      	ldr	r2, [pc, #384]	; (80112e4 <dhcp_parse_reply+0x594>)
 8011164:	6a3b      	ldr	r3, [r7, #32]
 8011166:	4413      	add	r3, r2
 8011168:	2201      	movs	r2, #1
 801116a:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	4618      	mov	r0, r3
 8011170:	f7f6 fe03 	bl	8007d7a <lwip_htonl>
 8011174:	4602      	mov	r2, r0
 8011176:	495d      	ldr	r1, [pc, #372]	; (80112ec <dhcp_parse_reply+0x59c>)
 8011178:	6a3b      	ldr	r3, [r7, #32]
 801117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801117e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011182:	3b04      	subs	r3, #4
 8011184:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8011188:	8bfb      	ldrh	r3, [r7, #30]
 801118a:	3304      	adds	r3, #4
 801118c:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801118e:	8a7a      	ldrh	r2, [r7, #18]
 8011190:	8bfb      	ldrh	r3, [r7, #30]
 8011192:	429a      	cmp	r2, r3
 8011194:	d202      	bcs.n	801119c <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8011196:	f06f 0301 	mvn.w	r3, #1
 801119a:	e096      	b.n	80112ca <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 801119c:	8a7b      	ldrh	r3, [r7, #18]
 801119e:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80111a0:	6a3b      	ldr	r3, [r7, #32]
 80111a2:	3301      	adds	r3, #1
 80111a4:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80111a6:	e79e      	b.n	80110e6 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 80111a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80111ac:	2b04      	cmp	r3, #4
 80111ae:	d106      	bne.n	80111be <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	4618      	mov	r0, r3
 80111b4:	f7f6 fde1 	bl	8007d7a <lwip_htonl>
 80111b8:	4603      	mov	r3, r0
 80111ba:	60bb      	str	r3, [r7, #8]
 80111bc:	e011      	b.n	80111e2 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80111be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80111c2:	2b01      	cmp	r3, #1
 80111c4:	d009      	beq.n	80111da <dhcp_parse_reply+0x48a>
 80111c6:	4b43      	ldr	r3, [pc, #268]	; (80112d4 <dhcp_parse_reply+0x584>)
 80111c8:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80111cc:	4948      	ldr	r1, [pc, #288]	; (80112f0 <dhcp_parse_reply+0x5a0>)
 80111ce:	4843      	ldr	r0, [pc, #268]	; (80112dc <dhcp_parse_reply+0x58c>)
 80111d0:	f003 f860 	bl	8014294 <iprintf>
 80111d4:	f06f 0305 	mvn.w	r3, #5
 80111d8:	e077      	b.n	80112ca <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 80111da:	f107 0308 	add.w	r3, r7, #8
 80111de:	781b      	ldrb	r3, [r3, #0]
 80111e0:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80111e2:	4a40      	ldr	r2, [pc, #256]	; (80112e4 <dhcp_parse_reply+0x594>)
 80111e4:	6a3b      	ldr	r3, [r7, #32]
 80111e6:	4413      	add	r3, r2
 80111e8:	2201      	movs	r2, #1
 80111ea:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80111ec:	68ba      	ldr	r2, [r7, #8]
 80111ee:	493f      	ldr	r1, [pc, #252]	; (80112ec <dhcp_parse_reply+0x59c>)
 80111f0:	6a3b      	ldr	r3, [r7, #32]
 80111f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80111f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f8:	895b      	ldrh	r3, [r3, #10]
 80111fa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80111fc:	429a      	cmp	r2, r3
 80111fe:	d324      	bcc.n	801124a <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8011200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011202:	895b      	ldrh	r3, [r3, #10]
 8011204:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011206:	1ad3      	subs	r3, r2, r3
 8011208:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801120a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801120c:	895b      	ldrh	r3, [r3, #10]
 801120e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8011210:	1ad3      	subs	r3, r2, r3
 8011212:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8011214:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011216:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011218:	429a      	cmp	r2, r3
 801121a:	d213      	bcs.n	8011244 <dhcp_parse_reply+0x4f4>
        q = q->next;
 801121c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8011222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011224:	2b00      	cmp	r3, #0
 8011226:	d109      	bne.n	801123c <dhcp_parse_reply+0x4ec>
 8011228:	4b2a      	ldr	r3, [pc, #168]	; (80112d4 <dhcp_parse_reply+0x584>)
 801122a:	f240 629d 	movw	r2, #1693	; 0x69d
 801122e:	4931      	ldr	r1, [pc, #196]	; (80112f4 <dhcp_parse_reply+0x5a4>)
 8011230:	482a      	ldr	r0, [pc, #168]	; (80112dc <dhcp_parse_reply+0x58c>)
 8011232:	f003 f82f 	bl	8014294 <iprintf>
 8011236:	f06f 0305 	mvn.w	r3, #5
 801123a:	e046      	b.n	80112ca <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 801123c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801123e:	685b      	ldr	r3, [r3, #4]
 8011240:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011242:	e002      	b.n	801124a <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8011244:	f06f 0301 	mvn.w	r3, #1
 8011248:	e03f      	b.n	80112ca <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801124a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801124c:	2b00      	cmp	r3, #0
 801124e:	d00a      	beq.n	8011266 <dhcp_parse_reply+0x516>
 8011250:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011252:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011254:	429a      	cmp	r2, r3
 8011256:	d206      	bcs.n	8011266 <dhcp_parse_reply+0x516>
 8011258:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801125a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801125c:	4413      	add	r3, r2
 801125e:	781b      	ldrb	r3, [r3, #0]
 8011260:	2bff      	cmp	r3, #255	; 0xff
 8011262:	f47f adb8 	bne.w	8010dd6 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8011266:	4b1f      	ldr	r3, [pc, #124]	; (80112e4 <dhcp_parse_reply+0x594>)
 8011268:	781b      	ldrb	r3, [r3, #0]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d018      	beq.n	80112a0 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801126e:	4b1f      	ldr	r3, [pc, #124]	; (80112ec <dhcp_parse_reply+0x59c>)
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8011274:	4b1b      	ldr	r3, [pc, #108]	; (80112e4 <dhcp_parse_reply+0x594>)
 8011276:	2200      	movs	r2, #0
 8011278:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	2b01      	cmp	r3, #1
 801127e:	d102      	bne.n	8011286 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8011280:	2301      	movs	r3, #1
 8011282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011284:	e00c      	b.n	80112a0 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	2b02      	cmp	r3, #2
 801128a:	d102      	bne.n	8011292 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 801128c:	2301      	movs	r3, #1
 801128e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011290:	e006      	b.n	80112a0 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	2b03      	cmp	r3, #3
 8011296:	d103      	bne.n	80112a0 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8011298:	2301      	movs	r3, #1
 801129a:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801129c:	2301      	movs	r3, #1
 801129e:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80112a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d006      	beq.n	80112b4 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80112a6:	2300      	movs	r3, #0
 80112a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80112aa:	236c      	movs	r3, #108	; 0x6c
 80112ac:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80112ae:	23ec      	movs	r3, #236	; 0xec
 80112b0:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80112b2:	e56a      	b.n	8010d8a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80112b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d006      	beq.n	80112c8 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 80112ba:	2300      	movs	r3, #0
 80112bc:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80112be:	232c      	movs	r3, #44	; 0x2c
 80112c0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80112c2:	236c      	movs	r3, #108	; 0x6c
 80112c4:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80112c6:	e560      	b.n	8010d8a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80112c8:	2300      	movs	r3, #0
}
 80112ca:	4618      	mov	r0, r3
 80112cc:	3740      	adds	r7, #64	; 0x40
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bd80      	pop	{r7, pc}
 80112d2:	bf00      	nop
 80112d4:	08017594 	.word	0x08017594
 80112d8:	0801781c 	.word	0x0801781c
 80112dc:	080175f4 	.word	0x080175f4
 80112e0:	08017860 	.word	0x08017860
 80112e4:	20018c64 	.word	0x20018c64
 80112e8:	08017874 	.word	0x08017874
 80112ec:	20018c44 	.word	0x20018c44
 80112f0:	0801788c 	.word	0x0801788c
 80112f4:	080178a0 	.word	0x080178a0

080112f8 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b08a      	sub	sp, #40	; 0x28
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	60f8      	str	r0, [r7, #12]
 8011300:	60b9      	str	r1, [r7, #8]
 8011302:	607a      	str	r2, [r7, #4]
 8011304:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8011306:	4b60      	ldr	r3, [pc, #384]	; (8011488 <dhcp_recv+0x190>)
 8011308:	685b      	ldr	r3, [r3, #4]
 801130a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801130c:	6a3b      	ldr	r3, [r7, #32]
 801130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011310:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	685b      	ldr	r3, [r3, #4]
 8011316:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8011318:	69fb      	ldr	r3, [r7, #28]
 801131a:	2b00      	cmp	r3, #0
 801131c:	f000 809d 	beq.w	801145a <dhcp_recv+0x162>
 8011320:	69fb      	ldr	r3, [r7, #28]
 8011322:	791b      	ldrb	r3, [r3, #4]
 8011324:	2b00      	cmp	r3, #0
 8011326:	f000 8098 	beq.w	801145a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	895b      	ldrh	r3, [r3, #10]
 801132e:	2b2b      	cmp	r3, #43	; 0x2b
 8011330:	f240 8095 	bls.w	801145e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8011334:	69bb      	ldr	r3, [r7, #24]
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	2b02      	cmp	r3, #2
 801133a:	f040 8092 	bne.w	8011462 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801133e:	2300      	movs	r3, #0
 8011340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011344:	e012      	b.n	801136c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8011346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801134a:	6a3a      	ldr	r2, [r7, #32]
 801134c:	4413      	add	r3, r2
 801134e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8011352:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011356:	69b9      	ldr	r1, [r7, #24]
 8011358:	440b      	add	r3, r1
 801135a:	7f1b      	ldrb	r3, [r3, #28]
 801135c:	429a      	cmp	r2, r3
 801135e:	f040 8082 	bne.w	8011466 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011366:	3301      	adds	r3, #1
 8011368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801136c:	6a3b      	ldr	r3, [r7, #32]
 801136e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011372:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011376:	429a      	cmp	r2, r3
 8011378:	d203      	bcs.n	8011382 <dhcp_recv+0x8a>
 801137a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801137e:	2b05      	cmp	r3, #5
 8011380:	d9e1      	bls.n	8011346 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8011382:	69bb      	ldr	r3, [r7, #24]
 8011384:	685b      	ldr	r3, [r3, #4]
 8011386:	4618      	mov	r0, r3
 8011388:	f7f6 fcf7 	bl	8007d7a <lwip_htonl>
 801138c:	4602      	mov	r2, r0
 801138e:	69fb      	ldr	r3, [r7, #28]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	429a      	cmp	r2, r3
 8011394:	d169      	bne.n	801146a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8011396:	69f9      	ldr	r1, [r7, #28]
 8011398:	6878      	ldr	r0, [r7, #4]
 801139a:	f7ff fcd9 	bl	8010d50 <dhcp_parse_reply>
 801139e:	4603      	mov	r3, r0
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d164      	bne.n	801146e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80113a4:	4b39      	ldr	r3, [pc, #228]	; (801148c <dhcp_recv+0x194>)
 80113a6:	785b      	ldrb	r3, [r3, #1]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d062      	beq.n	8011472 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	685b      	ldr	r3, [r3, #4]
 80113b0:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80113b2:	4b37      	ldr	r3, [pc, #220]	; (8011490 <dhcp_recv+0x198>)
 80113b4:	685b      	ldr	r3, [r3, #4]
 80113b6:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80113b8:	7cfb      	ldrb	r3, [r7, #19]
 80113ba:	2b05      	cmp	r3, #5
 80113bc:	d12a      	bne.n	8011414 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80113be:	69fb      	ldr	r3, [r7, #28]
 80113c0:	795b      	ldrb	r3, [r3, #5]
 80113c2:	2b01      	cmp	r3, #1
 80113c4:	d112      	bne.n	80113ec <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80113c6:	6979      	ldr	r1, [r7, #20]
 80113c8:	6a38      	ldr	r0, [r7, #32]
 80113ca:	f7fe fe17 	bl	800fffc <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80113ce:	6a3b      	ldr	r3, [r7, #32]
 80113d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80113d4:	f003 0308 	and.w	r3, r3, #8
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d003      	beq.n	80113e4 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80113dc:	6a38      	ldr	r0, [r7, #32]
 80113de:	f7fe fb87 	bl	800faf0 <dhcp_check>
 80113e2:	e049      	b.n	8011478 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80113e4:	6a38      	ldr	r0, [r7, #32]
 80113e6:	f7ff f867 	bl	80104b8 <dhcp_bind>
 80113ea:	e045      	b.n	8011478 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80113ec:	69fb      	ldr	r3, [r7, #28]
 80113ee:	795b      	ldrb	r3, [r3, #5]
 80113f0:	2b03      	cmp	r3, #3
 80113f2:	d007      	beq.n	8011404 <dhcp_recv+0x10c>
 80113f4:	69fb      	ldr	r3, [r7, #28]
 80113f6:	795b      	ldrb	r3, [r3, #5]
 80113f8:	2b04      	cmp	r3, #4
 80113fa:	d003      	beq.n	8011404 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80113fc:	69fb      	ldr	r3, [r7, #28]
 80113fe:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8011400:	2b05      	cmp	r3, #5
 8011402:	d139      	bne.n	8011478 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8011404:	6979      	ldr	r1, [r7, #20]
 8011406:	6a38      	ldr	r0, [r7, #32]
 8011408:	f7fe fdf8 	bl	800fffc <dhcp_handle_ack>
      dhcp_bind(netif);
 801140c:	6a38      	ldr	r0, [r7, #32]
 801140e:	f7ff f853 	bl	80104b8 <dhcp_bind>
 8011412:	e031      	b.n	8011478 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8011414:	7cfb      	ldrb	r3, [r7, #19]
 8011416:	2b06      	cmp	r3, #6
 8011418:	d113      	bne.n	8011442 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801141a:	69fb      	ldr	r3, [r7, #28]
 801141c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801141e:	2b03      	cmp	r3, #3
 8011420:	d00b      	beq.n	801143a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8011422:	69fb      	ldr	r3, [r7, #28]
 8011424:	795b      	ldrb	r3, [r3, #5]
 8011426:	2b01      	cmp	r3, #1
 8011428:	d007      	beq.n	801143a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801142a:	69fb      	ldr	r3, [r7, #28]
 801142c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801142e:	2b04      	cmp	r3, #4
 8011430:	d003      	beq.n	801143a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8011432:	69fb      	ldr	r3, [r7, #28]
 8011434:	795b      	ldrb	r3, [r3, #5]
 8011436:	2b05      	cmp	r3, #5
 8011438:	d103      	bne.n	8011442 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801143a:	6a38      	ldr	r0, [r7, #32]
 801143c:	f7fe fb3e 	bl	800fabc <dhcp_handle_nak>
 8011440:	e01a      	b.n	8011478 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8011442:	7cfb      	ldrb	r3, [r7, #19]
 8011444:	2b02      	cmp	r3, #2
 8011446:	d116      	bne.n	8011476 <dhcp_recv+0x17e>
 8011448:	69fb      	ldr	r3, [r7, #28]
 801144a:	795b      	ldrb	r3, [r3, #5]
 801144c:	2b06      	cmp	r3, #6
 801144e:	d112      	bne.n	8011476 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8011450:	6979      	ldr	r1, [r7, #20]
 8011452:	6a38      	ldr	r0, [r7, #32]
 8011454:	f7fe fb80 	bl	800fb58 <dhcp_handle_offer>
 8011458:	e00e      	b.n	8011478 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801145a:	bf00      	nop
 801145c:	e00c      	b.n	8011478 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801145e:	bf00      	nop
 8011460:	e00a      	b.n	8011478 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011462:	bf00      	nop
 8011464:	e008      	b.n	8011478 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8011466:	bf00      	nop
 8011468:	e006      	b.n	8011478 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801146a:	bf00      	nop
 801146c:	e004      	b.n	8011478 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801146e:	bf00      	nop
 8011470:	e002      	b.n	8011478 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011472:	bf00      	nop
 8011474:	e000      	b.n	8011478 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8011476:	bf00      	nop
  pbuf_free(p);
 8011478:	6878      	ldr	r0, [r7, #4]
 801147a:	f7f8 f867 	bl	800954c <pbuf_free>
}
 801147e:	bf00      	nop
 8011480:	3728      	adds	r7, #40	; 0x28
 8011482:	46bd      	mov	sp, r7
 8011484:	bd80      	pop	{r7, pc}
 8011486:	bf00      	nop
 8011488:	20015470 	.word	0x20015470
 801148c:	20018c64 	.word	0x20018c64
 8011490:	20018c44 	.word	0x20018c44

08011494 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b088      	sub	sp, #32
 8011498:	af00      	add	r7, sp, #0
 801149a:	60f8      	str	r0, [r7, #12]
 801149c:	60b9      	str	r1, [r7, #8]
 801149e:	603b      	str	r3, [r7, #0]
 80114a0:	4613      	mov	r3, r2
 80114a2:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d108      	bne.n	80114bc <dhcp_create_msg+0x28>
 80114aa:	4b5f      	ldr	r3, [pc, #380]	; (8011628 <dhcp_create_msg+0x194>)
 80114ac:	f240 7269 	movw	r2, #1897	; 0x769
 80114b0:	495e      	ldr	r1, [pc, #376]	; (801162c <dhcp_create_msg+0x198>)
 80114b2:	485f      	ldr	r0, [pc, #380]	; (8011630 <dhcp_create_msg+0x19c>)
 80114b4:	f002 feee 	bl	8014294 <iprintf>
 80114b8:	2300      	movs	r3, #0
 80114ba:	e0b1      	b.n	8011620 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80114bc:	68bb      	ldr	r3, [r7, #8]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d108      	bne.n	80114d4 <dhcp_create_msg+0x40>
 80114c2:	4b59      	ldr	r3, [pc, #356]	; (8011628 <dhcp_create_msg+0x194>)
 80114c4:	f240 726a 	movw	r2, #1898	; 0x76a
 80114c8:	495a      	ldr	r1, [pc, #360]	; (8011634 <dhcp_create_msg+0x1a0>)
 80114ca:	4859      	ldr	r0, [pc, #356]	; (8011630 <dhcp_create_msg+0x19c>)
 80114cc:	f002 fee2 	bl	8014294 <iprintf>
 80114d0:	2300      	movs	r3, #0
 80114d2:	e0a5      	b.n	8011620 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80114d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80114d8:	f44f 719a 	mov.w	r1, #308	; 0x134
 80114dc:	2036      	movs	r0, #54	; 0x36
 80114de:	f7f7 fd51 	bl	8008f84 <pbuf_alloc>
 80114e2:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80114e4:	69bb      	ldr	r3, [r7, #24]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d101      	bne.n	80114ee <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80114ea:	2300      	movs	r3, #0
 80114ec:	e098      	b.n	8011620 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80114ee:	69bb      	ldr	r3, [r7, #24]
 80114f0:	895b      	ldrh	r3, [r3, #10]
 80114f2:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80114f6:	d206      	bcs.n	8011506 <dhcp_create_msg+0x72>
 80114f8:	4b4b      	ldr	r3, [pc, #300]	; (8011628 <dhcp_create_msg+0x194>)
 80114fa:	f240 7271 	movw	r2, #1905	; 0x771
 80114fe:	494e      	ldr	r1, [pc, #312]	; (8011638 <dhcp_create_msg+0x1a4>)
 8011500:	484b      	ldr	r0, [pc, #300]	; (8011630 <dhcp_create_msg+0x19c>)
 8011502:	f002 fec7 	bl	8014294 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8011506:	79fb      	ldrb	r3, [r7, #7]
 8011508:	2b03      	cmp	r3, #3
 801150a:	d103      	bne.n	8011514 <dhcp_create_msg+0x80>
 801150c:	68bb      	ldr	r3, [r7, #8]
 801150e:	795b      	ldrb	r3, [r3, #5]
 8011510:	2b03      	cmp	r3, #3
 8011512:	d10d      	bne.n	8011530 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	799b      	ldrb	r3, [r3, #6]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d105      	bne.n	8011528 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801151c:	f002 fed2 	bl	80142c4 <rand>
 8011520:	4603      	mov	r3, r0
 8011522:	461a      	mov	r2, r3
 8011524:	4b45      	ldr	r3, [pc, #276]	; (801163c <dhcp_create_msg+0x1a8>)
 8011526:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8011528:	4b44      	ldr	r3, [pc, #272]	; (801163c <dhcp_create_msg+0x1a8>)
 801152a:	681a      	ldr	r2, [r3, #0]
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8011530:	69bb      	ldr	r3, [r7, #24]
 8011532:	685b      	ldr	r3, [r3, #4]
 8011534:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8011536:	f44f 729a 	mov.w	r2, #308	; 0x134
 801153a:	2100      	movs	r1, #0
 801153c:	6978      	ldr	r0, [r7, #20]
 801153e:	f002 fe0c 	bl	801415a <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8011542:	697b      	ldr	r3, [r7, #20]
 8011544:	2201      	movs	r2, #1
 8011546:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8011548:	697b      	ldr	r3, [r7, #20]
 801154a:	2201      	movs	r2, #1
 801154c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8011554:	697b      	ldr	r3, [r7, #20]
 8011556:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8011558:	68bb      	ldr	r3, [r7, #8]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	4618      	mov	r0, r3
 801155e:	f7f6 fc0c 	bl	8007d7a <lwip_htonl>
 8011562:	4602      	mov	r2, r0
 8011564:	697b      	ldr	r3, [r7, #20]
 8011566:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8011568:	79fb      	ldrb	r3, [r7, #7]
 801156a:	2b08      	cmp	r3, #8
 801156c:	d010      	beq.n	8011590 <dhcp_create_msg+0xfc>
 801156e:	79fb      	ldrb	r3, [r7, #7]
 8011570:	2b04      	cmp	r3, #4
 8011572:	d00d      	beq.n	8011590 <dhcp_create_msg+0xfc>
 8011574:	79fb      	ldrb	r3, [r7, #7]
 8011576:	2b07      	cmp	r3, #7
 8011578:	d00a      	beq.n	8011590 <dhcp_create_msg+0xfc>
 801157a:	79fb      	ldrb	r3, [r7, #7]
 801157c:	2b03      	cmp	r3, #3
 801157e:	d10c      	bne.n	801159a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8011584:	2b05      	cmp	r3, #5
 8011586:	d003      	beq.n	8011590 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8011588:	68bb      	ldr	r3, [r7, #8]
 801158a:	795b      	ldrb	r3, [r3, #5]
 801158c:	2b04      	cmp	r3, #4
 801158e:	d104      	bne.n	801159a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	3304      	adds	r3, #4
 8011594:	681a      	ldr	r2, [r3, #0]
 8011596:	697b      	ldr	r3, [r7, #20]
 8011598:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801159a:	2300      	movs	r3, #0
 801159c:	83fb      	strh	r3, [r7, #30]
 801159e:	e00c      	b.n	80115ba <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80115a0:	8bfa      	ldrh	r2, [r7, #30]
 80115a2:	8bfb      	ldrh	r3, [r7, #30]
 80115a4:	68f9      	ldr	r1, [r7, #12]
 80115a6:	440a      	add	r2, r1
 80115a8:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80115ac:	697a      	ldr	r2, [r7, #20]
 80115ae:	4413      	add	r3, r2
 80115b0:	460a      	mov	r2, r1
 80115b2:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80115b4:	8bfb      	ldrh	r3, [r7, #30]
 80115b6:	3301      	adds	r3, #1
 80115b8:	83fb      	strh	r3, [r7, #30]
 80115ba:	8bfb      	ldrh	r3, [r7, #30]
 80115bc:	2b05      	cmp	r3, #5
 80115be:	d9ef      	bls.n	80115a0 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80115c0:	697b      	ldr	r3, [r7, #20]
 80115c2:	2200      	movs	r2, #0
 80115c4:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80115c8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80115cc:	2200      	movs	r2, #0
 80115ce:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80115d2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80115d6:	2200      	movs	r2, #0
 80115d8:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80115dc:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80115e0:	2200      	movs	r2, #0
 80115e2:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80115e6:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80115f0:	2301      	movs	r3, #1
 80115f2:	2235      	movs	r2, #53	; 0x35
 80115f4:	2000      	movs	r0, #0
 80115f6:	f7ff fadb 	bl	8010bb0 <dhcp_option>
 80115fa:	4603      	mov	r3, r0
 80115fc:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80115fe:	697b      	ldr	r3, [r7, #20]
 8011600:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011604:	79fa      	ldrb	r2, [r7, #7]
 8011606:	8a7b      	ldrh	r3, [r7, #18]
 8011608:	4618      	mov	r0, r3
 801160a:	f7ff fb05 	bl	8010c18 <dhcp_option_byte>
 801160e:	4603      	mov	r3, r0
 8011610:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8011612:	683b      	ldr	r3, [r7, #0]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d002      	beq.n	801161e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8011618:	683b      	ldr	r3, [r7, #0]
 801161a:	8a7a      	ldrh	r2, [r7, #18]
 801161c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801161e:	69bb      	ldr	r3, [r7, #24]
}
 8011620:	4618      	mov	r0, r3
 8011622:	3720      	adds	r7, #32
 8011624:	46bd      	mov	sp, r7
 8011626:	bd80      	pop	{r7, pc}
 8011628:	08017594 	.word	0x08017594
 801162c:	080178b4 	.word	0x080178b4
 8011630:	080175f4 	.word	0x080175f4
 8011634:	080178d4 	.word	0x080178d4
 8011638:	080178f4 	.word	0x080178f4
 801163c:	20018c74 	.word	0x20018c74

08011640 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8011640:	b580      	push	{r7, lr}
 8011642:	b084      	sub	sp, #16
 8011644:	af00      	add	r7, sp, #0
 8011646:	4603      	mov	r3, r0
 8011648:	60b9      	str	r1, [r7, #8]
 801164a:	607a      	str	r2, [r7, #4]
 801164c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801164e:	89fb      	ldrh	r3, [r7, #14]
 8011650:	1c5a      	adds	r2, r3, #1
 8011652:	81fa      	strh	r2, [r7, #14]
 8011654:	461a      	mov	r2, r3
 8011656:	68bb      	ldr	r3, [r7, #8]
 8011658:	4413      	add	r3, r2
 801165a:	22ff      	movs	r2, #255	; 0xff
 801165c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801165e:	e007      	b.n	8011670 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8011660:	89fb      	ldrh	r3, [r7, #14]
 8011662:	1c5a      	adds	r2, r3, #1
 8011664:	81fa      	strh	r2, [r7, #14]
 8011666:	461a      	mov	r2, r3
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	4413      	add	r3, r2
 801166c:	2200      	movs	r2, #0
 801166e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8011670:	89fb      	ldrh	r3, [r7, #14]
 8011672:	2b43      	cmp	r3, #67	; 0x43
 8011674:	d904      	bls.n	8011680 <dhcp_option_trailer+0x40>
 8011676:	89fb      	ldrh	r3, [r7, #14]
 8011678:	f003 0303 	and.w	r3, r3, #3
 801167c:	2b00      	cmp	r3, #0
 801167e:	d002      	beq.n	8011686 <dhcp_option_trailer+0x46>
 8011680:	89fb      	ldrh	r3, [r7, #14]
 8011682:	2b43      	cmp	r3, #67	; 0x43
 8011684:	d9ec      	bls.n	8011660 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8011686:	89fb      	ldrh	r3, [r7, #14]
 8011688:	33f0      	adds	r3, #240	; 0xf0
 801168a:	b29b      	uxth	r3, r3
 801168c:	4619      	mov	r1, r3
 801168e:	6878      	ldr	r0, [r7, #4]
 8011690:	f7f7 fdd6 	bl	8009240 <pbuf_realloc>
}
 8011694:	bf00      	nop
 8011696:	3710      	adds	r7, #16
 8011698:	46bd      	mov	sp, r7
 801169a:	bd80      	pop	{r7, pc}

0801169c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801169c:	b480      	push	{r7}
 801169e:	b085      	sub	sp, #20
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d017      	beq.n	80116da <dhcp_supplied_address+0x3e>
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d013      	beq.n	80116da <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116b6:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	795b      	ldrb	r3, [r3, #5]
 80116bc:	2b0a      	cmp	r3, #10
 80116be:	d007      	beq.n	80116d0 <dhcp_supplied_address+0x34>
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	795b      	ldrb	r3, [r3, #5]
 80116c4:	2b05      	cmp	r3, #5
 80116c6:	d003      	beq.n	80116d0 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80116cc:	2b04      	cmp	r3, #4
 80116ce:	d101      	bne.n	80116d4 <dhcp_supplied_address+0x38>
 80116d0:	2301      	movs	r3, #1
 80116d2:	e000      	b.n	80116d6 <dhcp_supplied_address+0x3a>
 80116d4:	2300      	movs	r3, #0
 80116d6:	b2db      	uxtb	r3, r3
 80116d8:	e000      	b.n	80116dc <dhcp_supplied_address+0x40>
  }
  return 0;
 80116da:	2300      	movs	r3, #0
}
 80116dc:	4618      	mov	r0, r3
 80116de:	3714      	adds	r7, #20
 80116e0:	46bd      	mov	sp, r7
 80116e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e6:	4770      	bx	lr

080116e8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b082      	sub	sp, #8
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80116f0:	4915      	ldr	r1, [pc, #84]	; (8011748 <etharp_free_entry+0x60>)
 80116f2:	687a      	ldr	r2, [r7, #4]
 80116f4:	4613      	mov	r3, r2
 80116f6:	005b      	lsls	r3, r3, #1
 80116f8:	4413      	add	r3, r2
 80116fa:	00db      	lsls	r3, r3, #3
 80116fc:	440b      	add	r3, r1
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d013      	beq.n	801172c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011704:	4910      	ldr	r1, [pc, #64]	; (8011748 <etharp_free_entry+0x60>)
 8011706:	687a      	ldr	r2, [r7, #4]
 8011708:	4613      	mov	r3, r2
 801170a:	005b      	lsls	r3, r3, #1
 801170c:	4413      	add	r3, r2
 801170e:	00db      	lsls	r3, r3, #3
 8011710:	440b      	add	r3, r1
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	4618      	mov	r0, r3
 8011716:	f7f7 ff19 	bl	800954c <pbuf_free>
    arp_table[i].q = NULL;
 801171a:	490b      	ldr	r1, [pc, #44]	; (8011748 <etharp_free_entry+0x60>)
 801171c:	687a      	ldr	r2, [r7, #4]
 801171e:	4613      	mov	r3, r2
 8011720:	005b      	lsls	r3, r3, #1
 8011722:	4413      	add	r3, r2
 8011724:	00db      	lsls	r3, r3, #3
 8011726:	440b      	add	r3, r1
 8011728:	2200      	movs	r2, #0
 801172a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801172c:	4906      	ldr	r1, [pc, #24]	; (8011748 <etharp_free_entry+0x60>)
 801172e:	687a      	ldr	r2, [r7, #4]
 8011730:	4613      	mov	r3, r2
 8011732:	005b      	lsls	r3, r3, #1
 8011734:	4413      	add	r3, r2
 8011736:	00db      	lsls	r3, r3, #3
 8011738:	440b      	add	r3, r1
 801173a:	3314      	adds	r3, #20
 801173c:	2200      	movs	r2, #0
 801173e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011740:	bf00      	nop
 8011742:	3708      	adds	r7, #8
 8011744:	46bd      	mov	sp, r7
 8011746:	bd80      	pop	{r7, pc}
 8011748:	20018c78 	.word	0x20018c78

0801174c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b082      	sub	sp, #8
 8011750:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011752:	2300      	movs	r3, #0
 8011754:	607b      	str	r3, [r7, #4]
 8011756:	e096      	b.n	8011886 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011758:	494f      	ldr	r1, [pc, #316]	; (8011898 <etharp_tmr+0x14c>)
 801175a:	687a      	ldr	r2, [r7, #4]
 801175c:	4613      	mov	r3, r2
 801175e:	005b      	lsls	r3, r3, #1
 8011760:	4413      	add	r3, r2
 8011762:	00db      	lsls	r3, r3, #3
 8011764:	440b      	add	r3, r1
 8011766:	3314      	adds	r3, #20
 8011768:	781b      	ldrb	r3, [r3, #0]
 801176a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801176c:	78fb      	ldrb	r3, [r7, #3]
 801176e:	2b00      	cmp	r3, #0
 8011770:	f000 8086 	beq.w	8011880 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011774:	4948      	ldr	r1, [pc, #288]	; (8011898 <etharp_tmr+0x14c>)
 8011776:	687a      	ldr	r2, [r7, #4]
 8011778:	4613      	mov	r3, r2
 801177a:	005b      	lsls	r3, r3, #1
 801177c:	4413      	add	r3, r2
 801177e:	00db      	lsls	r3, r3, #3
 8011780:	440b      	add	r3, r1
 8011782:	3312      	adds	r3, #18
 8011784:	881b      	ldrh	r3, [r3, #0]
 8011786:	3301      	adds	r3, #1
 8011788:	b298      	uxth	r0, r3
 801178a:	4943      	ldr	r1, [pc, #268]	; (8011898 <etharp_tmr+0x14c>)
 801178c:	687a      	ldr	r2, [r7, #4]
 801178e:	4613      	mov	r3, r2
 8011790:	005b      	lsls	r3, r3, #1
 8011792:	4413      	add	r3, r2
 8011794:	00db      	lsls	r3, r3, #3
 8011796:	440b      	add	r3, r1
 8011798:	3312      	adds	r3, #18
 801179a:	4602      	mov	r2, r0
 801179c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801179e:	493e      	ldr	r1, [pc, #248]	; (8011898 <etharp_tmr+0x14c>)
 80117a0:	687a      	ldr	r2, [r7, #4]
 80117a2:	4613      	mov	r3, r2
 80117a4:	005b      	lsls	r3, r3, #1
 80117a6:	4413      	add	r3, r2
 80117a8:	00db      	lsls	r3, r3, #3
 80117aa:	440b      	add	r3, r1
 80117ac:	3312      	adds	r3, #18
 80117ae:	881b      	ldrh	r3, [r3, #0]
 80117b0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80117b4:	d215      	bcs.n	80117e2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80117b6:	4938      	ldr	r1, [pc, #224]	; (8011898 <etharp_tmr+0x14c>)
 80117b8:	687a      	ldr	r2, [r7, #4]
 80117ba:	4613      	mov	r3, r2
 80117bc:	005b      	lsls	r3, r3, #1
 80117be:	4413      	add	r3, r2
 80117c0:	00db      	lsls	r3, r3, #3
 80117c2:	440b      	add	r3, r1
 80117c4:	3314      	adds	r3, #20
 80117c6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80117c8:	2b01      	cmp	r3, #1
 80117ca:	d10e      	bne.n	80117ea <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80117cc:	4932      	ldr	r1, [pc, #200]	; (8011898 <etharp_tmr+0x14c>)
 80117ce:	687a      	ldr	r2, [r7, #4]
 80117d0:	4613      	mov	r3, r2
 80117d2:	005b      	lsls	r3, r3, #1
 80117d4:	4413      	add	r3, r2
 80117d6:	00db      	lsls	r3, r3, #3
 80117d8:	440b      	add	r3, r1
 80117da:	3312      	adds	r3, #18
 80117dc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80117de:	2b04      	cmp	r3, #4
 80117e0:	d903      	bls.n	80117ea <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80117e2:	6878      	ldr	r0, [r7, #4]
 80117e4:	f7ff ff80 	bl	80116e8 <etharp_free_entry>
 80117e8:	e04a      	b.n	8011880 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80117ea:	492b      	ldr	r1, [pc, #172]	; (8011898 <etharp_tmr+0x14c>)
 80117ec:	687a      	ldr	r2, [r7, #4]
 80117ee:	4613      	mov	r3, r2
 80117f0:	005b      	lsls	r3, r3, #1
 80117f2:	4413      	add	r3, r2
 80117f4:	00db      	lsls	r3, r3, #3
 80117f6:	440b      	add	r3, r1
 80117f8:	3314      	adds	r3, #20
 80117fa:	781b      	ldrb	r3, [r3, #0]
 80117fc:	2b03      	cmp	r3, #3
 80117fe:	d10a      	bne.n	8011816 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011800:	4925      	ldr	r1, [pc, #148]	; (8011898 <etharp_tmr+0x14c>)
 8011802:	687a      	ldr	r2, [r7, #4]
 8011804:	4613      	mov	r3, r2
 8011806:	005b      	lsls	r3, r3, #1
 8011808:	4413      	add	r3, r2
 801180a:	00db      	lsls	r3, r3, #3
 801180c:	440b      	add	r3, r1
 801180e:	3314      	adds	r3, #20
 8011810:	2204      	movs	r2, #4
 8011812:	701a      	strb	r2, [r3, #0]
 8011814:	e034      	b.n	8011880 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011816:	4920      	ldr	r1, [pc, #128]	; (8011898 <etharp_tmr+0x14c>)
 8011818:	687a      	ldr	r2, [r7, #4]
 801181a:	4613      	mov	r3, r2
 801181c:	005b      	lsls	r3, r3, #1
 801181e:	4413      	add	r3, r2
 8011820:	00db      	lsls	r3, r3, #3
 8011822:	440b      	add	r3, r1
 8011824:	3314      	adds	r3, #20
 8011826:	781b      	ldrb	r3, [r3, #0]
 8011828:	2b04      	cmp	r3, #4
 801182a:	d10a      	bne.n	8011842 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801182c:	491a      	ldr	r1, [pc, #104]	; (8011898 <etharp_tmr+0x14c>)
 801182e:	687a      	ldr	r2, [r7, #4]
 8011830:	4613      	mov	r3, r2
 8011832:	005b      	lsls	r3, r3, #1
 8011834:	4413      	add	r3, r2
 8011836:	00db      	lsls	r3, r3, #3
 8011838:	440b      	add	r3, r1
 801183a:	3314      	adds	r3, #20
 801183c:	2202      	movs	r2, #2
 801183e:	701a      	strb	r2, [r3, #0]
 8011840:	e01e      	b.n	8011880 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011842:	4915      	ldr	r1, [pc, #84]	; (8011898 <etharp_tmr+0x14c>)
 8011844:	687a      	ldr	r2, [r7, #4]
 8011846:	4613      	mov	r3, r2
 8011848:	005b      	lsls	r3, r3, #1
 801184a:	4413      	add	r3, r2
 801184c:	00db      	lsls	r3, r3, #3
 801184e:	440b      	add	r3, r1
 8011850:	3314      	adds	r3, #20
 8011852:	781b      	ldrb	r3, [r3, #0]
 8011854:	2b01      	cmp	r3, #1
 8011856:	d113      	bne.n	8011880 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011858:	490f      	ldr	r1, [pc, #60]	; (8011898 <etharp_tmr+0x14c>)
 801185a:	687a      	ldr	r2, [r7, #4]
 801185c:	4613      	mov	r3, r2
 801185e:	005b      	lsls	r3, r3, #1
 8011860:	4413      	add	r3, r2
 8011862:	00db      	lsls	r3, r3, #3
 8011864:	440b      	add	r3, r1
 8011866:	3308      	adds	r3, #8
 8011868:	6818      	ldr	r0, [r3, #0]
 801186a:	687a      	ldr	r2, [r7, #4]
 801186c:	4613      	mov	r3, r2
 801186e:	005b      	lsls	r3, r3, #1
 8011870:	4413      	add	r3, r2
 8011872:	00db      	lsls	r3, r3, #3
 8011874:	4a08      	ldr	r2, [pc, #32]	; (8011898 <etharp_tmr+0x14c>)
 8011876:	4413      	add	r3, r2
 8011878:	3304      	adds	r3, #4
 801187a:	4619      	mov	r1, r3
 801187c:	f000 fe72 	bl	8012564 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	3301      	adds	r3, #1
 8011884:	607b      	str	r3, [r7, #4]
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	2b09      	cmp	r3, #9
 801188a:	f77f af65 	ble.w	8011758 <etharp_tmr+0xc>
      }
    }
  }
}
 801188e:	bf00      	nop
 8011890:	bf00      	nop
 8011892:	3708      	adds	r7, #8
 8011894:	46bd      	mov	sp, r7
 8011896:	bd80      	pop	{r7, pc}
 8011898:	20018c78 	.word	0x20018c78

0801189c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b08a      	sub	sp, #40	; 0x28
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	60f8      	str	r0, [r7, #12]
 80118a4:	460b      	mov	r3, r1
 80118a6:	607a      	str	r2, [r7, #4]
 80118a8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80118aa:	230a      	movs	r3, #10
 80118ac:	84fb      	strh	r3, [r7, #38]	; 0x26
 80118ae:	230a      	movs	r3, #10
 80118b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80118b2:	230a      	movs	r3, #10
 80118b4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80118b6:	2300      	movs	r3, #0
 80118b8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80118ba:	230a      	movs	r3, #10
 80118bc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80118be:	2300      	movs	r3, #0
 80118c0:	83bb      	strh	r3, [r7, #28]
 80118c2:	2300      	movs	r3, #0
 80118c4:	837b      	strh	r3, [r7, #26]
 80118c6:	2300      	movs	r3, #0
 80118c8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80118ca:	2300      	movs	r3, #0
 80118cc:	843b      	strh	r3, [r7, #32]
 80118ce:	e0ae      	b.n	8011a2e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80118d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80118d4:	49a6      	ldr	r1, [pc, #664]	; (8011b70 <etharp_find_entry+0x2d4>)
 80118d6:	4613      	mov	r3, r2
 80118d8:	005b      	lsls	r3, r3, #1
 80118da:	4413      	add	r3, r2
 80118dc:	00db      	lsls	r3, r3, #3
 80118de:	440b      	add	r3, r1
 80118e0:	3314      	adds	r3, #20
 80118e2:	781b      	ldrb	r3, [r3, #0]
 80118e4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80118e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80118ea:	2b0a      	cmp	r3, #10
 80118ec:	d105      	bne.n	80118fa <etharp_find_entry+0x5e>
 80118ee:	7dfb      	ldrb	r3, [r7, #23]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d102      	bne.n	80118fa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80118f4:	8c3b      	ldrh	r3, [r7, #32]
 80118f6:	847b      	strh	r3, [r7, #34]	; 0x22
 80118f8:	e095      	b.n	8011a26 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80118fa:	7dfb      	ldrb	r3, [r7, #23]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	f000 8092 	beq.w	8011a26 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011902:	7dfb      	ldrb	r3, [r7, #23]
 8011904:	2b01      	cmp	r3, #1
 8011906:	d009      	beq.n	801191c <etharp_find_entry+0x80>
 8011908:	7dfb      	ldrb	r3, [r7, #23]
 801190a:	2b01      	cmp	r3, #1
 801190c:	d806      	bhi.n	801191c <etharp_find_entry+0x80>
 801190e:	4b99      	ldr	r3, [pc, #612]	; (8011b74 <etharp_find_entry+0x2d8>)
 8011910:	f240 1223 	movw	r2, #291	; 0x123
 8011914:	4998      	ldr	r1, [pc, #608]	; (8011b78 <etharp_find_entry+0x2dc>)
 8011916:	4899      	ldr	r0, [pc, #612]	; (8011b7c <etharp_find_entry+0x2e0>)
 8011918:	f002 fcbc 	bl	8014294 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d020      	beq.n	8011964 <etharp_find_entry+0xc8>
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	6819      	ldr	r1, [r3, #0]
 8011926:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801192a:	4891      	ldr	r0, [pc, #580]	; (8011b70 <etharp_find_entry+0x2d4>)
 801192c:	4613      	mov	r3, r2
 801192e:	005b      	lsls	r3, r3, #1
 8011930:	4413      	add	r3, r2
 8011932:	00db      	lsls	r3, r3, #3
 8011934:	4403      	add	r3, r0
 8011936:	3304      	adds	r3, #4
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	4299      	cmp	r1, r3
 801193c:	d112      	bne.n	8011964 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d00c      	beq.n	801195e <etharp_find_entry+0xc2>
 8011944:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011948:	4989      	ldr	r1, [pc, #548]	; (8011b70 <etharp_find_entry+0x2d4>)
 801194a:	4613      	mov	r3, r2
 801194c:	005b      	lsls	r3, r3, #1
 801194e:	4413      	add	r3, r2
 8011950:	00db      	lsls	r3, r3, #3
 8011952:	440b      	add	r3, r1
 8011954:	3308      	adds	r3, #8
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	687a      	ldr	r2, [r7, #4]
 801195a:	429a      	cmp	r2, r3
 801195c:	d102      	bne.n	8011964 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801195e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011962:	e100      	b.n	8011b66 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011964:	7dfb      	ldrb	r3, [r7, #23]
 8011966:	2b01      	cmp	r3, #1
 8011968:	d140      	bne.n	80119ec <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801196a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801196e:	4980      	ldr	r1, [pc, #512]	; (8011b70 <etharp_find_entry+0x2d4>)
 8011970:	4613      	mov	r3, r2
 8011972:	005b      	lsls	r3, r3, #1
 8011974:	4413      	add	r3, r2
 8011976:	00db      	lsls	r3, r3, #3
 8011978:	440b      	add	r3, r1
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d01a      	beq.n	80119b6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011980:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011984:	497a      	ldr	r1, [pc, #488]	; (8011b70 <etharp_find_entry+0x2d4>)
 8011986:	4613      	mov	r3, r2
 8011988:	005b      	lsls	r3, r3, #1
 801198a:	4413      	add	r3, r2
 801198c:	00db      	lsls	r3, r3, #3
 801198e:	440b      	add	r3, r1
 8011990:	3312      	adds	r3, #18
 8011992:	881b      	ldrh	r3, [r3, #0]
 8011994:	8bba      	ldrh	r2, [r7, #28]
 8011996:	429a      	cmp	r2, r3
 8011998:	d845      	bhi.n	8011a26 <etharp_find_entry+0x18a>
            old_queue = i;
 801199a:	8c3b      	ldrh	r3, [r7, #32]
 801199c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801199e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119a2:	4973      	ldr	r1, [pc, #460]	; (8011b70 <etharp_find_entry+0x2d4>)
 80119a4:	4613      	mov	r3, r2
 80119a6:	005b      	lsls	r3, r3, #1
 80119a8:	4413      	add	r3, r2
 80119aa:	00db      	lsls	r3, r3, #3
 80119ac:	440b      	add	r3, r1
 80119ae:	3312      	adds	r3, #18
 80119b0:	881b      	ldrh	r3, [r3, #0]
 80119b2:	83bb      	strh	r3, [r7, #28]
 80119b4:	e037      	b.n	8011a26 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80119b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119ba:	496d      	ldr	r1, [pc, #436]	; (8011b70 <etharp_find_entry+0x2d4>)
 80119bc:	4613      	mov	r3, r2
 80119be:	005b      	lsls	r3, r3, #1
 80119c0:	4413      	add	r3, r2
 80119c2:	00db      	lsls	r3, r3, #3
 80119c4:	440b      	add	r3, r1
 80119c6:	3312      	adds	r3, #18
 80119c8:	881b      	ldrh	r3, [r3, #0]
 80119ca:	8b7a      	ldrh	r2, [r7, #26]
 80119cc:	429a      	cmp	r2, r3
 80119ce:	d82a      	bhi.n	8011a26 <etharp_find_entry+0x18a>
            old_pending = i;
 80119d0:	8c3b      	ldrh	r3, [r7, #32]
 80119d2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80119d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119d8:	4965      	ldr	r1, [pc, #404]	; (8011b70 <etharp_find_entry+0x2d4>)
 80119da:	4613      	mov	r3, r2
 80119dc:	005b      	lsls	r3, r3, #1
 80119de:	4413      	add	r3, r2
 80119e0:	00db      	lsls	r3, r3, #3
 80119e2:	440b      	add	r3, r1
 80119e4:	3312      	adds	r3, #18
 80119e6:	881b      	ldrh	r3, [r3, #0]
 80119e8:	837b      	strh	r3, [r7, #26]
 80119ea:	e01c      	b.n	8011a26 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80119ec:	7dfb      	ldrb	r3, [r7, #23]
 80119ee:	2b01      	cmp	r3, #1
 80119f0:	d919      	bls.n	8011a26 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80119f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119f6:	495e      	ldr	r1, [pc, #376]	; (8011b70 <etharp_find_entry+0x2d4>)
 80119f8:	4613      	mov	r3, r2
 80119fa:	005b      	lsls	r3, r3, #1
 80119fc:	4413      	add	r3, r2
 80119fe:	00db      	lsls	r3, r3, #3
 8011a00:	440b      	add	r3, r1
 8011a02:	3312      	adds	r3, #18
 8011a04:	881b      	ldrh	r3, [r3, #0]
 8011a06:	8b3a      	ldrh	r2, [r7, #24]
 8011a08:	429a      	cmp	r2, r3
 8011a0a:	d80c      	bhi.n	8011a26 <etharp_find_entry+0x18a>
            old_stable = i;
 8011a0c:	8c3b      	ldrh	r3, [r7, #32]
 8011a0e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8011a10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a14:	4956      	ldr	r1, [pc, #344]	; (8011b70 <etharp_find_entry+0x2d4>)
 8011a16:	4613      	mov	r3, r2
 8011a18:	005b      	lsls	r3, r3, #1
 8011a1a:	4413      	add	r3, r2
 8011a1c:	00db      	lsls	r3, r3, #3
 8011a1e:	440b      	add	r3, r1
 8011a20:	3312      	adds	r3, #18
 8011a22:	881b      	ldrh	r3, [r3, #0]
 8011a24:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011a26:	8c3b      	ldrh	r3, [r7, #32]
 8011a28:	3301      	adds	r3, #1
 8011a2a:	b29b      	uxth	r3, r3
 8011a2c:	843b      	strh	r3, [r7, #32]
 8011a2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011a32:	2b09      	cmp	r3, #9
 8011a34:	f77f af4c 	ble.w	80118d0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011a38:	7afb      	ldrb	r3, [r7, #11]
 8011a3a:	f003 0302 	and.w	r3, r3, #2
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d108      	bne.n	8011a54 <etharp_find_entry+0x1b8>
 8011a42:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011a46:	2b0a      	cmp	r3, #10
 8011a48:	d107      	bne.n	8011a5a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011a4a:	7afb      	ldrb	r3, [r7, #11]
 8011a4c:	f003 0301 	and.w	r3, r3, #1
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d102      	bne.n	8011a5a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011a54:	f04f 33ff 	mov.w	r3, #4294967295
 8011a58:	e085      	b.n	8011b66 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011a5a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011a5e:	2b09      	cmp	r3, #9
 8011a60:	dc02      	bgt.n	8011a68 <etharp_find_entry+0x1cc>
    i = empty;
 8011a62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a64:	843b      	strh	r3, [r7, #32]
 8011a66:	e039      	b.n	8011adc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011a68:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011a6c:	2b09      	cmp	r3, #9
 8011a6e:	dc14      	bgt.n	8011a9a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011a70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011a72:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011a74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a78:	493d      	ldr	r1, [pc, #244]	; (8011b70 <etharp_find_entry+0x2d4>)
 8011a7a:	4613      	mov	r3, r2
 8011a7c:	005b      	lsls	r3, r3, #1
 8011a7e:	4413      	add	r3, r2
 8011a80:	00db      	lsls	r3, r3, #3
 8011a82:	440b      	add	r3, r1
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d018      	beq.n	8011abc <etharp_find_entry+0x220>
 8011a8a:	4b3a      	ldr	r3, [pc, #232]	; (8011b74 <etharp_find_entry+0x2d8>)
 8011a8c:	f240 126d 	movw	r2, #365	; 0x16d
 8011a90:	493b      	ldr	r1, [pc, #236]	; (8011b80 <etharp_find_entry+0x2e4>)
 8011a92:	483a      	ldr	r0, [pc, #232]	; (8011b7c <etharp_find_entry+0x2e0>)
 8011a94:	f002 fbfe 	bl	8014294 <iprintf>
 8011a98:	e010      	b.n	8011abc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011a9a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011a9e:	2b09      	cmp	r3, #9
 8011aa0:	dc02      	bgt.n	8011aa8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011aa2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011aa4:	843b      	strh	r3, [r7, #32]
 8011aa6:	e009      	b.n	8011abc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011aa8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011aac:	2b09      	cmp	r3, #9
 8011aae:	dc02      	bgt.n	8011ab6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011ab0:	8bfb      	ldrh	r3, [r7, #30]
 8011ab2:	843b      	strh	r3, [r7, #32]
 8011ab4:	e002      	b.n	8011abc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8011aba:	e054      	b.n	8011b66 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011abc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011ac0:	2b09      	cmp	r3, #9
 8011ac2:	dd06      	ble.n	8011ad2 <etharp_find_entry+0x236>
 8011ac4:	4b2b      	ldr	r3, [pc, #172]	; (8011b74 <etharp_find_entry+0x2d8>)
 8011ac6:	f240 127f 	movw	r2, #383	; 0x17f
 8011aca:	492e      	ldr	r1, [pc, #184]	; (8011b84 <etharp_find_entry+0x2e8>)
 8011acc:	482b      	ldr	r0, [pc, #172]	; (8011b7c <etharp_find_entry+0x2e0>)
 8011ace:	f002 fbe1 	bl	8014294 <iprintf>
    etharp_free_entry(i);
 8011ad2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	f7ff fe06 	bl	80116e8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011adc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011ae0:	2b09      	cmp	r3, #9
 8011ae2:	dd06      	ble.n	8011af2 <etharp_find_entry+0x256>
 8011ae4:	4b23      	ldr	r3, [pc, #140]	; (8011b74 <etharp_find_entry+0x2d8>)
 8011ae6:	f240 1283 	movw	r2, #387	; 0x183
 8011aea:	4926      	ldr	r1, [pc, #152]	; (8011b84 <etharp_find_entry+0x2e8>)
 8011aec:	4823      	ldr	r0, [pc, #140]	; (8011b7c <etharp_find_entry+0x2e0>)
 8011aee:	f002 fbd1 	bl	8014294 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011af2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011af6:	491e      	ldr	r1, [pc, #120]	; (8011b70 <etharp_find_entry+0x2d4>)
 8011af8:	4613      	mov	r3, r2
 8011afa:	005b      	lsls	r3, r3, #1
 8011afc:	4413      	add	r3, r2
 8011afe:	00db      	lsls	r3, r3, #3
 8011b00:	440b      	add	r3, r1
 8011b02:	3314      	adds	r3, #20
 8011b04:	781b      	ldrb	r3, [r3, #0]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d006      	beq.n	8011b18 <etharp_find_entry+0x27c>
 8011b0a:	4b1a      	ldr	r3, [pc, #104]	; (8011b74 <etharp_find_entry+0x2d8>)
 8011b0c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8011b10:	491d      	ldr	r1, [pc, #116]	; (8011b88 <etharp_find_entry+0x2ec>)
 8011b12:	481a      	ldr	r0, [pc, #104]	; (8011b7c <etharp_find_entry+0x2e0>)
 8011b14:	f002 fbbe 	bl	8014294 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d00b      	beq.n	8011b36 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011b1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	6819      	ldr	r1, [r3, #0]
 8011b26:	4812      	ldr	r0, [pc, #72]	; (8011b70 <etharp_find_entry+0x2d4>)
 8011b28:	4613      	mov	r3, r2
 8011b2a:	005b      	lsls	r3, r3, #1
 8011b2c:	4413      	add	r3, r2
 8011b2e:	00db      	lsls	r3, r3, #3
 8011b30:	4403      	add	r3, r0
 8011b32:	3304      	adds	r3, #4
 8011b34:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011b36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b3a:	490d      	ldr	r1, [pc, #52]	; (8011b70 <etharp_find_entry+0x2d4>)
 8011b3c:	4613      	mov	r3, r2
 8011b3e:	005b      	lsls	r3, r3, #1
 8011b40:	4413      	add	r3, r2
 8011b42:	00db      	lsls	r3, r3, #3
 8011b44:	440b      	add	r3, r1
 8011b46:	3312      	adds	r3, #18
 8011b48:	2200      	movs	r2, #0
 8011b4a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011b4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b50:	4907      	ldr	r1, [pc, #28]	; (8011b70 <etharp_find_entry+0x2d4>)
 8011b52:	4613      	mov	r3, r2
 8011b54:	005b      	lsls	r3, r3, #1
 8011b56:	4413      	add	r3, r2
 8011b58:	00db      	lsls	r3, r3, #3
 8011b5a:	440b      	add	r3, r1
 8011b5c:	3308      	adds	r3, #8
 8011b5e:	687a      	ldr	r2, [r7, #4]
 8011b60:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011b62:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011b66:	4618      	mov	r0, r3
 8011b68:	3728      	adds	r7, #40	; 0x28
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	bd80      	pop	{r7, pc}
 8011b6e:	bf00      	nop
 8011b70:	20018c78 	.word	0x20018c78
 8011b74:	08017934 	.word	0x08017934
 8011b78:	0801796c 	.word	0x0801796c
 8011b7c:	080179ac 	.word	0x080179ac
 8011b80:	080179d4 	.word	0x080179d4
 8011b84:	080179ec 	.word	0x080179ec
 8011b88:	08017a00 	.word	0x08017a00

08011b8c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b088      	sub	sp, #32
 8011b90:	af02      	add	r7, sp, #8
 8011b92:	60f8      	str	r0, [r7, #12]
 8011b94:	60b9      	str	r1, [r7, #8]
 8011b96:	607a      	str	r2, [r7, #4]
 8011b98:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011ba0:	2b06      	cmp	r3, #6
 8011ba2:	d006      	beq.n	8011bb2 <etharp_update_arp_entry+0x26>
 8011ba4:	4b48      	ldr	r3, [pc, #288]	; (8011cc8 <etharp_update_arp_entry+0x13c>)
 8011ba6:	f240 12a9 	movw	r2, #425	; 0x1a9
 8011baa:	4948      	ldr	r1, [pc, #288]	; (8011ccc <etharp_update_arp_entry+0x140>)
 8011bac:	4848      	ldr	r0, [pc, #288]	; (8011cd0 <etharp_update_arp_entry+0x144>)
 8011bae:	f002 fb71 	bl	8014294 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011bb2:	68bb      	ldr	r3, [r7, #8]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d012      	beq.n	8011bde <etharp_update_arp_entry+0x52>
 8011bb8:	68bb      	ldr	r3, [r7, #8]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d00e      	beq.n	8011bde <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011bc0:	68bb      	ldr	r3, [r7, #8]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	68f9      	ldr	r1, [r7, #12]
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f001 f920 	bl	8012e0c <ip4_addr_isbroadcast_u32>
 8011bcc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d105      	bne.n	8011bde <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011bd2:	68bb      	ldr	r3, [r7, #8]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011bda:	2be0      	cmp	r3, #224	; 0xe0
 8011bdc:	d102      	bne.n	8011be4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011bde:	f06f 030f 	mvn.w	r3, #15
 8011be2:	e06c      	b.n	8011cbe <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011be4:	78fb      	ldrb	r3, [r7, #3]
 8011be6:	68fa      	ldr	r2, [r7, #12]
 8011be8:	4619      	mov	r1, r3
 8011bea:	68b8      	ldr	r0, [r7, #8]
 8011bec:	f7ff fe56 	bl	801189c <etharp_find_entry>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011bf4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	da02      	bge.n	8011c02 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011bfc:	8afb      	ldrh	r3, [r7, #22]
 8011bfe:	b25b      	sxtb	r3, r3
 8011c00:	e05d      	b.n	8011cbe <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011c02:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c06:	4933      	ldr	r1, [pc, #204]	; (8011cd4 <etharp_update_arp_entry+0x148>)
 8011c08:	4613      	mov	r3, r2
 8011c0a:	005b      	lsls	r3, r3, #1
 8011c0c:	4413      	add	r3, r2
 8011c0e:	00db      	lsls	r3, r3, #3
 8011c10:	440b      	add	r3, r1
 8011c12:	3314      	adds	r3, #20
 8011c14:	2202      	movs	r2, #2
 8011c16:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011c18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c1c:	492d      	ldr	r1, [pc, #180]	; (8011cd4 <etharp_update_arp_entry+0x148>)
 8011c1e:	4613      	mov	r3, r2
 8011c20:	005b      	lsls	r3, r3, #1
 8011c22:	4413      	add	r3, r2
 8011c24:	00db      	lsls	r3, r3, #3
 8011c26:	440b      	add	r3, r1
 8011c28:	3308      	adds	r3, #8
 8011c2a:	68fa      	ldr	r2, [r7, #12]
 8011c2c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011c2e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c32:	4613      	mov	r3, r2
 8011c34:	005b      	lsls	r3, r3, #1
 8011c36:	4413      	add	r3, r2
 8011c38:	00db      	lsls	r3, r3, #3
 8011c3a:	3308      	adds	r3, #8
 8011c3c:	4a25      	ldr	r2, [pc, #148]	; (8011cd4 <etharp_update_arp_entry+0x148>)
 8011c3e:	4413      	add	r3, r2
 8011c40:	3304      	adds	r3, #4
 8011c42:	2206      	movs	r2, #6
 8011c44:	6879      	ldr	r1, [r7, #4]
 8011c46:	4618      	mov	r0, r3
 8011c48:	f002 fa79 	bl	801413e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011c4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c50:	4920      	ldr	r1, [pc, #128]	; (8011cd4 <etharp_update_arp_entry+0x148>)
 8011c52:	4613      	mov	r3, r2
 8011c54:	005b      	lsls	r3, r3, #1
 8011c56:	4413      	add	r3, r2
 8011c58:	00db      	lsls	r3, r3, #3
 8011c5a:	440b      	add	r3, r1
 8011c5c:	3312      	adds	r3, #18
 8011c5e:	2200      	movs	r2, #0
 8011c60:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011c62:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c66:	491b      	ldr	r1, [pc, #108]	; (8011cd4 <etharp_update_arp_entry+0x148>)
 8011c68:	4613      	mov	r3, r2
 8011c6a:	005b      	lsls	r3, r3, #1
 8011c6c:	4413      	add	r3, r2
 8011c6e:	00db      	lsls	r3, r3, #3
 8011c70:	440b      	add	r3, r1
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d021      	beq.n	8011cbc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011c78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c7c:	4915      	ldr	r1, [pc, #84]	; (8011cd4 <etharp_update_arp_entry+0x148>)
 8011c7e:	4613      	mov	r3, r2
 8011c80:	005b      	lsls	r3, r3, #1
 8011c82:	4413      	add	r3, r2
 8011c84:	00db      	lsls	r3, r3, #3
 8011c86:	440b      	add	r3, r1
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011c8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c90:	4910      	ldr	r1, [pc, #64]	; (8011cd4 <etharp_update_arp_entry+0x148>)
 8011c92:	4613      	mov	r3, r2
 8011c94:	005b      	lsls	r3, r3, #1
 8011c96:	4413      	add	r3, r2
 8011c98:	00db      	lsls	r3, r3, #3
 8011c9a:	440b      	add	r3, r1
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8011ca6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011caa:	9300      	str	r3, [sp, #0]
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	6939      	ldr	r1, [r7, #16]
 8011cb0:	68f8      	ldr	r0, [r7, #12]
 8011cb2:	f001 ffb9 	bl	8013c28 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011cb6:	6938      	ldr	r0, [r7, #16]
 8011cb8:	f7f7 fc48 	bl	800954c <pbuf_free>
  }
  return ERR_OK;
 8011cbc:	2300      	movs	r3, #0
}
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	3718      	adds	r7, #24
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	bd80      	pop	{r7, pc}
 8011cc6:	bf00      	nop
 8011cc8:	08017934 	.word	0x08017934
 8011ccc:	08017a2c 	.word	0x08017a2c
 8011cd0:	080179ac 	.word	0x080179ac
 8011cd4:	20018c78 	.word	0x20018c78

08011cd8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b084      	sub	sp, #16
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	60fb      	str	r3, [r7, #12]
 8011ce4:	e01e      	b.n	8011d24 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011ce6:	4913      	ldr	r1, [pc, #76]	; (8011d34 <etharp_cleanup_netif+0x5c>)
 8011ce8:	68fa      	ldr	r2, [r7, #12]
 8011cea:	4613      	mov	r3, r2
 8011cec:	005b      	lsls	r3, r3, #1
 8011cee:	4413      	add	r3, r2
 8011cf0:	00db      	lsls	r3, r3, #3
 8011cf2:	440b      	add	r3, r1
 8011cf4:	3314      	adds	r3, #20
 8011cf6:	781b      	ldrb	r3, [r3, #0]
 8011cf8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011cfa:	7afb      	ldrb	r3, [r7, #11]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d00e      	beq.n	8011d1e <etharp_cleanup_netif+0x46>
 8011d00:	490c      	ldr	r1, [pc, #48]	; (8011d34 <etharp_cleanup_netif+0x5c>)
 8011d02:	68fa      	ldr	r2, [r7, #12]
 8011d04:	4613      	mov	r3, r2
 8011d06:	005b      	lsls	r3, r3, #1
 8011d08:	4413      	add	r3, r2
 8011d0a:	00db      	lsls	r3, r3, #3
 8011d0c:	440b      	add	r3, r1
 8011d0e:	3308      	adds	r3, #8
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	687a      	ldr	r2, [r7, #4]
 8011d14:	429a      	cmp	r2, r3
 8011d16:	d102      	bne.n	8011d1e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011d18:	68f8      	ldr	r0, [r7, #12]
 8011d1a:	f7ff fce5 	bl	80116e8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	3301      	adds	r3, #1
 8011d22:	60fb      	str	r3, [r7, #12]
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	2b09      	cmp	r3, #9
 8011d28:	dddd      	ble.n	8011ce6 <etharp_cleanup_netif+0xe>
    }
  }
}
 8011d2a:	bf00      	nop
 8011d2c:	bf00      	nop
 8011d2e:	3710      	adds	r7, #16
 8011d30:	46bd      	mov	sp, r7
 8011d32:	bd80      	pop	{r7, pc}
 8011d34:	20018c78 	.word	0x20018c78

08011d38 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011d38:	b5b0      	push	{r4, r5, r7, lr}
 8011d3a:	b08a      	sub	sp, #40	; 0x28
 8011d3c:	af04      	add	r7, sp, #16
 8011d3e:	6078      	str	r0, [r7, #4]
 8011d40:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d107      	bne.n	8011d58 <etharp_input+0x20>
 8011d48:	4b3f      	ldr	r3, [pc, #252]	; (8011e48 <etharp_input+0x110>)
 8011d4a:	f240 228a 	movw	r2, #650	; 0x28a
 8011d4e:	493f      	ldr	r1, [pc, #252]	; (8011e4c <etharp_input+0x114>)
 8011d50:	483f      	ldr	r0, [pc, #252]	; (8011e50 <etharp_input+0x118>)
 8011d52:	f002 fa9f 	bl	8014294 <iprintf>
 8011d56:	e074      	b.n	8011e42 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	685b      	ldr	r3, [r3, #4]
 8011d5c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011d5e:	693b      	ldr	r3, [r7, #16]
 8011d60:	881b      	ldrh	r3, [r3, #0]
 8011d62:	b29b      	uxth	r3, r3
 8011d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011d68:	d10c      	bne.n	8011d84 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011d6a:	693b      	ldr	r3, [r7, #16]
 8011d6c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011d6e:	2b06      	cmp	r3, #6
 8011d70:	d108      	bne.n	8011d84 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011d72:	693b      	ldr	r3, [r7, #16]
 8011d74:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011d76:	2b04      	cmp	r3, #4
 8011d78:	d104      	bne.n	8011d84 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011d7a:	693b      	ldr	r3, [r7, #16]
 8011d7c:	885b      	ldrh	r3, [r3, #2]
 8011d7e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011d80:	2b08      	cmp	r3, #8
 8011d82:	d003      	beq.n	8011d8c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011d84:	6878      	ldr	r0, [r7, #4]
 8011d86:	f7f7 fbe1 	bl	800954c <pbuf_free>
    return;
 8011d8a:	e05a      	b.n	8011e42 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011d8c:	693b      	ldr	r3, [r7, #16]
 8011d8e:	330e      	adds	r3, #14
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011d94:	693b      	ldr	r3, [r7, #16]
 8011d96:	3318      	adds	r3, #24
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	3304      	adds	r3, #4
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d102      	bne.n	8011dac <etharp_input+0x74>
    for_us = 0;
 8011da6:	2300      	movs	r3, #0
 8011da8:	75fb      	strb	r3, [r7, #23]
 8011daa:	e009      	b.n	8011dc0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011dac:	68ba      	ldr	r2, [r7, #8]
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	3304      	adds	r3, #4
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	429a      	cmp	r2, r3
 8011db6:	bf0c      	ite	eq
 8011db8:	2301      	moveq	r3, #1
 8011dba:	2300      	movne	r3, #0
 8011dbc:	b2db      	uxtb	r3, r3
 8011dbe:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011dc0:	693b      	ldr	r3, [r7, #16]
 8011dc2:	f103 0208 	add.w	r2, r3, #8
 8011dc6:	7dfb      	ldrb	r3, [r7, #23]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d001      	beq.n	8011dd0 <etharp_input+0x98>
 8011dcc:	2301      	movs	r3, #1
 8011dce:	e000      	b.n	8011dd2 <etharp_input+0x9a>
 8011dd0:	2302      	movs	r3, #2
 8011dd2:	f107 010c 	add.w	r1, r7, #12
 8011dd6:	6838      	ldr	r0, [r7, #0]
 8011dd8:	f7ff fed8 	bl	8011b8c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011ddc:	693b      	ldr	r3, [r7, #16]
 8011dde:	88db      	ldrh	r3, [r3, #6]
 8011de0:	b29b      	uxth	r3, r3
 8011de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011de6:	d003      	beq.n	8011df0 <etharp_input+0xb8>
 8011de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011dec:	d01e      	beq.n	8011e2c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011dee:	e025      	b.n	8011e3c <etharp_input+0x104>
      if (for_us) {
 8011df0:	7dfb      	ldrb	r3, [r7, #23]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d021      	beq.n	8011e3a <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011df6:	683b      	ldr	r3, [r7, #0]
 8011df8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8011dfc:	693b      	ldr	r3, [r7, #16]
 8011dfe:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011e02:	683b      	ldr	r3, [r7, #0]
 8011e04:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8011e08:	683b      	ldr	r3, [r7, #0]
 8011e0a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011e0c:	693a      	ldr	r2, [r7, #16]
 8011e0e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011e10:	2102      	movs	r1, #2
 8011e12:	9103      	str	r1, [sp, #12]
 8011e14:	f107 010c 	add.w	r1, r7, #12
 8011e18:	9102      	str	r1, [sp, #8]
 8011e1a:	9201      	str	r2, [sp, #4]
 8011e1c:	9300      	str	r3, [sp, #0]
 8011e1e:	462b      	mov	r3, r5
 8011e20:	4622      	mov	r2, r4
 8011e22:	4601      	mov	r1, r0
 8011e24:	6838      	ldr	r0, [r7, #0]
 8011e26:	f000 faef 	bl	8012408 <etharp_raw>
      break;
 8011e2a:	e006      	b.n	8011e3a <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8011e2c:	f107 030c 	add.w	r3, r7, #12
 8011e30:	4619      	mov	r1, r3
 8011e32:	6838      	ldr	r0, [r7, #0]
 8011e34:	f7fe f9fc 	bl	8010230 <dhcp_arp_reply>
      break;
 8011e38:	e000      	b.n	8011e3c <etharp_input+0x104>
      break;
 8011e3a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011e3c:	6878      	ldr	r0, [r7, #4]
 8011e3e:	f7f7 fb85 	bl	800954c <pbuf_free>
}
 8011e42:	3718      	adds	r7, #24
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bdb0      	pop	{r4, r5, r7, pc}
 8011e48:	08017934 	.word	0x08017934
 8011e4c:	08017a84 	.word	0x08017a84
 8011e50:	080179ac 	.word	0x080179ac

08011e54 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b086      	sub	sp, #24
 8011e58:	af02      	add	r7, sp, #8
 8011e5a:	60f8      	str	r0, [r7, #12]
 8011e5c:	60b9      	str	r1, [r7, #8]
 8011e5e:	4613      	mov	r3, r2
 8011e60:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011e62:	79fa      	ldrb	r2, [r7, #7]
 8011e64:	4944      	ldr	r1, [pc, #272]	; (8011f78 <etharp_output_to_arp_index+0x124>)
 8011e66:	4613      	mov	r3, r2
 8011e68:	005b      	lsls	r3, r3, #1
 8011e6a:	4413      	add	r3, r2
 8011e6c:	00db      	lsls	r3, r3, #3
 8011e6e:	440b      	add	r3, r1
 8011e70:	3314      	adds	r3, #20
 8011e72:	781b      	ldrb	r3, [r3, #0]
 8011e74:	2b01      	cmp	r3, #1
 8011e76:	d806      	bhi.n	8011e86 <etharp_output_to_arp_index+0x32>
 8011e78:	4b40      	ldr	r3, [pc, #256]	; (8011f7c <etharp_output_to_arp_index+0x128>)
 8011e7a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011e7e:	4940      	ldr	r1, [pc, #256]	; (8011f80 <etharp_output_to_arp_index+0x12c>)
 8011e80:	4840      	ldr	r0, [pc, #256]	; (8011f84 <etharp_output_to_arp_index+0x130>)
 8011e82:	f002 fa07 	bl	8014294 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011e86:	79fa      	ldrb	r2, [r7, #7]
 8011e88:	493b      	ldr	r1, [pc, #236]	; (8011f78 <etharp_output_to_arp_index+0x124>)
 8011e8a:	4613      	mov	r3, r2
 8011e8c:	005b      	lsls	r3, r3, #1
 8011e8e:	4413      	add	r3, r2
 8011e90:	00db      	lsls	r3, r3, #3
 8011e92:	440b      	add	r3, r1
 8011e94:	3314      	adds	r3, #20
 8011e96:	781b      	ldrb	r3, [r3, #0]
 8011e98:	2b02      	cmp	r3, #2
 8011e9a:	d153      	bne.n	8011f44 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011e9c:	79fa      	ldrb	r2, [r7, #7]
 8011e9e:	4936      	ldr	r1, [pc, #216]	; (8011f78 <etharp_output_to_arp_index+0x124>)
 8011ea0:	4613      	mov	r3, r2
 8011ea2:	005b      	lsls	r3, r3, #1
 8011ea4:	4413      	add	r3, r2
 8011ea6:	00db      	lsls	r3, r3, #3
 8011ea8:	440b      	add	r3, r1
 8011eaa:	3312      	adds	r3, #18
 8011eac:	881b      	ldrh	r3, [r3, #0]
 8011eae:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8011eb2:	d919      	bls.n	8011ee8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011eb4:	79fa      	ldrb	r2, [r7, #7]
 8011eb6:	4613      	mov	r3, r2
 8011eb8:	005b      	lsls	r3, r3, #1
 8011eba:	4413      	add	r3, r2
 8011ebc:	00db      	lsls	r3, r3, #3
 8011ebe:	4a2e      	ldr	r2, [pc, #184]	; (8011f78 <etharp_output_to_arp_index+0x124>)
 8011ec0:	4413      	add	r3, r2
 8011ec2:	3304      	adds	r3, #4
 8011ec4:	4619      	mov	r1, r3
 8011ec6:	68f8      	ldr	r0, [r7, #12]
 8011ec8:	f000 fb4c 	bl	8012564 <etharp_request>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d138      	bne.n	8011f44 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011ed2:	79fa      	ldrb	r2, [r7, #7]
 8011ed4:	4928      	ldr	r1, [pc, #160]	; (8011f78 <etharp_output_to_arp_index+0x124>)
 8011ed6:	4613      	mov	r3, r2
 8011ed8:	005b      	lsls	r3, r3, #1
 8011eda:	4413      	add	r3, r2
 8011edc:	00db      	lsls	r3, r3, #3
 8011ede:	440b      	add	r3, r1
 8011ee0:	3314      	adds	r3, #20
 8011ee2:	2203      	movs	r2, #3
 8011ee4:	701a      	strb	r2, [r3, #0]
 8011ee6:	e02d      	b.n	8011f44 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011ee8:	79fa      	ldrb	r2, [r7, #7]
 8011eea:	4923      	ldr	r1, [pc, #140]	; (8011f78 <etharp_output_to_arp_index+0x124>)
 8011eec:	4613      	mov	r3, r2
 8011eee:	005b      	lsls	r3, r3, #1
 8011ef0:	4413      	add	r3, r2
 8011ef2:	00db      	lsls	r3, r3, #3
 8011ef4:	440b      	add	r3, r1
 8011ef6:	3312      	adds	r3, #18
 8011ef8:	881b      	ldrh	r3, [r3, #0]
 8011efa:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011efe:	d321      	bcc.n	8011f44 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011f00:	79fa      	ldrb	r2, [r7, #7]
 8011f02:	4613      	mov	r3, r2
 8011f04:	005b      	lsls	r3, r3, #1
 8011f06:	4413      	add	r3, r2
 8011f08:	00db      	lsls	r3, r3, #3
 8011f0a:	4a1b      	ldr	r2, [pc, #108]	; (8011f78 <etharp_output_to_arp_index+0x124>)
 8011f0c:	4413      	add	r3, r2
 8011f0e:	1d19      	adds	r1, r3, #4
 8011f10:	79fa      	ldrb	r2, [r7, #7]
 8011f12:	4613      	mov	r3, r2
 8011f14:	005b      	lsls	r3, r3, #1
 8011f16:	4413      	add	r3, r2
 8011f18:	00db      	lsls	r3, r3, #3
 8011f1a:	3308      	adds	r3, #8
 8011f1c:	4a16      	ldr	r2, [pc, #88]	; (8011f78 <etharp_output_to_arp_index+0x124>)
 8011f1e:	4413      	add	r3, r2
 8011f20:	3304      	adds	r3, #4
 8011f22:	461a      	mov	r2, r3
 8011f24:	68f8      	ldr	r0, [r7, #12]
 8011f26:	f000 fafb 	bl	8012520 <etharp_request_dst>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d109      	bne.n	8011f44 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011f30:	79fa      	ldrb	r2, [r7, #7]
 8011f32:	4911      	ldr	r1, [pc, #68]	; (8011f78 <etharp_output_to_arp_index+0x124>)
 8011f34:	4613      	mov	r3, r2
 8011f36:	005b      	lsls	r3, r3, #1
 8011f38:	4413      	add	r3, r2
 8011f3a:	00db      	lsls	r3, r3, #3
 8011f3c:	440b      	add	r3, r1
 8011f3e:	3314      	adds	r3, #20
 8011f40:	2203      	movs	r2, #3
 8011f42:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8011f4a:	79fa      	ldrb	r2, [r7, #7]
 8011f4c:	4613      	mov	r3, r2
 8011f4e:	005b      	lsls	r3, r3, #1
 8011f50:	4413      	add	r3, r2
 8011f52:	00db      	lsls	r3, r3, #3
 8011f54:	3308      	adds	r3, #8
 8011f56:	4a08      	ldr	r2, [pc, #32]	; (8011f78 <etharp_output_to_arp_index+0x124>)
 8011f58:	4413      	add	r3, r2
 8011f5a:	3304      	adds	r3, #4
 8011f5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011f60:	9200      	str	r2, [sp, #0]
 8011f62:	460a      	mov	r2, r1
 8011f64:	68b9      	ldr	r1, [r7, #8]
 8011f66:	68f8      	ldr	r0, [r7, #12]
 8011f68:	f001 fe5e 	bl	8013c28 <ethernet_output>
 8011f6c:	4603      	mov	r3, r0
}
 8011f6e:	4618      	mov	r0, r3
 8011f70:	3710      	adds	r7, #16
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}
 8011f76:	bf00      	nop
 8011f78:	20018c78 	.word	0x20018c78
 8011f7c:	08017934 	.word	0x08017934
 8011f80:	08017aa4 	.word	0x08017aa4
 8011f84:	080179ac 	.word	0x080179ac

08011f88 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b08a      	sub	sp, #40	; 0x28
 8011f8c:	af02      	add	r7, sp, #8
 8011f8e:	60f8      	str	r0, [r7, #12]
 8011f90:	60b9      	str	r1, [r7, #8]
 8011f92:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d106      	bne.n	8011fac <etharp_output+0x24>
 8011f9e:	4b73      	ldr	r3, [pc, #460]	; (801216c <etharp_output+0x1e4>)
 8011fa0:	f240 321e 	movw	r2, #798	; 0x31e
 8011fa4:	4972      	ldr	r1, [pc, #456]	; (8012170 <etharp_output+0x1e8>)
 8011fa6:	4873      	ldr	r0, [pc, #460]	; (8012174 <etharp_output+0x1ec>)
 8011fa8:	f002 f974 	bl	8014294 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011fac:	68bb      	ldr	r3, [r7, #8]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d106      	bne.n	8011fc0 <etharp_output+0x38>
 8011fb2:	4b6e      	ldr	r3, [pc, #440]	; (801216c <etharp_output+0x1e4>)
 8011fb4:	f240 321f 	movw	r2, #799	; 0x31f
 8011fb8:	496f      	ldr	r1, [pc, #444]	; (8012178 <etharp_output+0x1f0>)
 8011fba:	486e      	ldr	r0, [pc, #440]	; (8012174 <etharp_output+0x1ec>)
 8011fbc:	f002 f96a 	bl	8014294 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d106      	bne.n	8011fd4 <etharp_output+0x4c>
 8011fc6:	4b69      	ldr	r3, [pc, #420]	; (801216c <etharp_output+0x1e4>)
 8011fc8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011fcc:	496b      	ldr	r1, [pc, #428]	; (801217c <etharp_output+0x1f4>)
 8011fce:	4869      	ldr	r0, [pc, #420]	; (8012174 <etharp_output+0x1ec>)
 8011fd0:	f002 f960 	bl	8014294 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	68f9      	ldr	r1, [r7, #12]
 8011fda:	4618      	mov	r0, r3
 8011fdc:	f000 ff16 	bl	8012e0c <ip4_addr_isbroadcast_u32>
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d002      	beq.n	8011fec <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011fe6:	4b66      	ldr	r3, [pc, #408]	; (8012180 <etharp_output+0x1f8>)
 8011fe8:	61fb      	str	r3, [r7, #28]
 8011fea:	e0af      	b.n	801214c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011ff4:	2be0      	cmp	r3, #224	; 0xe0
 8011ff6:	d118      	bne.n	801202a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011ff8:	2301      	movs	r3, #1
 8011ffa:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012000:	235e      	movs	r3, #94	; 0x5e
 8012002:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	3301      	adds	r3, #1
 8012008:	781b      	ldrb	r3, [r3, #0]
 801200a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801200e:	b2db      	uxtb	r3, r3
 8012010:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	3302      	adds	r3, #2
 8012016:	781b      	ldrb	r3, [r3, #0]
 8012018:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	3303      	adds	r3, #3
 801201e:	781b      	ldrb	r3, [r3, #0]
 8012020:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012022:	f107 0310 	add.w	r3, r7, #16
 8012026:	61fb      	str	r3, [r7, #28]
 8012028:	e090      	b.n	801214c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	681a      	ldr	r2, [r3, #0]
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	3304      	adds	r3, #4
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	405a      	eors	r2, r3
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	3308      	adds	r3, #8
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	4013      	ands	r3, r2
 801203e:	2b00      	cmp	r3, #0
 8012040:	d012      	beq.n	8012068 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012048:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801204c:	4293      	cmp	r3, r2
 801204e:	d00b      	beq.n	8012068 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	330c      	adds	r3, #12
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d003      	beq.n	8012062 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	330c      	adds	r3, #12
 801205e:	61bb      	str	r3, [r7, #24]
 8012060:	e002      	b.n	8012068 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012062:	f06f 0303 	mvn.w	r3, #3
 8012066:	e07d      	b.n	8012164 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012068:	4b46      	ldr	r3, [pc, #280]	; (8012184 <etharp_output+0x1fc>)
 801206a:	781b      	ldrb	r3, [r3, #0]
 801206c:	4619      	mov	r1, r3
 801206e:	4a46      	ldr	r2, [pc, #280]	; (8012188 <etharp_output+0x200>)
 8012070:	460b      	mov	r3, r1
 8012072:	005b      	lsls	r3, r3, #1
 8012074:	440b      	add	r3, r1
 8012076:	00db      	lsls	r3, r3, #3
 8012078:	4413      	add	r3, r2
 801207a:	3314      	adds	r3, #20
 801207c:	781b      	ldrb	r3, [r3, #0]
 801207e:	2b01      	cmp	r3, #1
 8012080:	d925      	bls.n	80120ce <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012082:	4b40      	ldr	r3, [pc, #256]	; (8012184 <etharp_output+0x1fc>)
 8012084:	781b      	ldrb	r3, [r3, #0]
 8012086:	4619      	mov	r1, r3
 8012088:	4a3f      	ldr	r2, [pc, #252]	; (8012188 <etharp_output+0x200>)
 801208a:	460b      	mov	r3, r1
 801208c:	005b      	lsls	r3, r3, #1
 801208e:	440b      	add	r3, r1
 8012090:	00db      	lsls	r3, r3, #3
 8012092:	4413      	add	r3, r2
 8012094:	3308      	adds	r3, #8
 8012096:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012098:	68fa      	ldr	r2, [r7, #12]
 801209a:	429a      	cmp	r2, r3
 801209c:	d117      	bne.n	80120ce <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801209e:	69bb      	ldr	r3, [r7, #24]
 80120a0:	681a      	ldr	r2, [r3, #0]
 80120a2:	4b38      	ldr	r3, [pc, #224]	; (8012184 <etharp_output+0x1fc>)
 80120a4:	781b      	ldrb	r3, [r3, #0]
 80120a6:	4618      	mov	r0, r3
 80120a8:	4937      	ldr	r1, [pc, #220]	; (8012188 <etharp_output+0x200>)
 80120aa:	4603      	mov	r3, r0
 80120ac:	005b      	lsls	r3, r3, #1
 80120ae:	4403      	add	r3, r0
 80120b0:	00db      	lsls	r3, r3, #3
 80120b2:	440b      	add	r3, r1
 80120b4:	3304      	adds	r3, #4
 80120b6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80120b8:	429a      	cmp	r2, r3
 80120ba:	d108      	bne.n	80120ce <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80120bc:	4b31      	ldr	r3, [pc, #196]	; (8012184 <etharp_output+0x1fc>)
 80120be:	781b      	ldrb	r3, [r3, #0]
 80120c0:	461a      	mov	r2, r3
 80120c2:	68b9      	ldr	r1, [r7, #8]
 80120c4:	68f8      	ldr	r0, [r7, #12]
 80120c6:	f7ff fec5 	bl	8011e54 <etharp_output_to_arp_index>
 80120ca:	4603      	mov	r3, r0
 80120cc:	e04a      	b.n	8012164 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80120ce:	2300      	movs	r3, #0
 80120d0:	75fb      	strb	r3, [r7, #23]
 80120d2:	e031      	b.n	8012138 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80120d4:	7dfa      	ldrb	r2, [r7, #23]
 80120d6:	492c      	ldr	r1, [pc, #176]	; (8012188 <etharp_output+0x200>)
 80120d8:	4613      	mov	r3, r2
 80120da:	005b      	lsls	r3, r3, #1
 80120dc:	4413      	add	r3, r2
 80120de:	00db      	lsls	r3, r3, #3
 80120e0:	440b      	add	r3, r1
 80120e2:	3314      	adds	r3, #20
 80120e4:	781b      	ldrb	r3, [r3, #0]
 80120e6:	2b01      	cmp	r3, #1
 80120e8:	d923      	bls.n	8012132 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80120ea:	7dfa      	ldrb	r2, [r7, #23]
 80120ec:	4926      	ldr	r1, [pc, #152]	; (8012188 <etharp_output+0x200>)
 80120ee:	4613      	mov	r3, r2
 80120f0:	005b      	lsls	r3, r3, #1
 80120f2:	4413      	add	r3, r2
 80120f4:	00db      	lsls	r3, r3, #3
 80120f6:	440b      	add	r3, r1
 80120f8:	3308      	adds	r3, #8
 80120fa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80120fc:	68fa      	ldr	r2, [r7, #12]
 80120fe:	429a      	cmp	r2, r3
 8012100:	d117      	bne.n	8012132 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012102:	69bb      	ldr	r3, [r7, #24]
 8012104:	6819      	ldr	r1, [r3, #0]
 8012106:	7dfa      	ldrb	r2, [r7, #23]
 8012108:	481f      	ldr	r0, [pc, #124]	; (8012188 <etharp_output+0x200>)
 801210a:	4613      	mov	r3, r2
 801210c:	005b      	lsls	r3, r3, #1
 801210e:	4413      	add	r3, r2
 8012110:	00db      	lsls	r3, r3, #3
 8012112:	4403      	add	r3, r0
 8012114:	3304      	adds	r3, #4
 8012116:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012118:	4299      	cmp	r1, r3
 801211a:	d10a      	bne.n	8012132 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801211c:	4a19      	ldr	r2, [pc, #100]	; (8012184 <etharp_output+0x1fc>)
 801211e:	7dfb      	ldrb	r3, [r7, #23]
 8012120:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012122:	7dfb      	ldrb	r3, [r7, #23]
 8012124:	461a      	mov	r2, r3
 8012126:	68b9      	ldr	r1, [r7, #8]
 8012128:	68f8      	ldr	r0, [r7, #12]
 801212a:	f7ff fe93 	bl	8011e54 <etharp_output_to_arp_index>
 801212e:	4603      	mov	r3, r0
 8012130:	e018      	b.n	8012164 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012132:	7dfb      	ldrb	r3, [r7, #23]
 8012134:	3301      	adds	r3, #1
 8012136:	75fb      	strb	r3, [r7, #23]
 8012138:	7dfb      	ldrb	r3, [r7, #23]
 801213a:	2b09      	cmp	r3, #9
 801213c:	d9ca      	bls.n	80120d4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801213e:	68ba      	ldr	r2, [r7, #8]
 8012140:	69b9      	ldr	r1, [r7, #24]
 8012142:	68f8      	ldr	r0, [r7, #12]
 8012144:	f000 f822 	bl	801218c <etharp_query>
 8012148:	4603      	mov	r3, r0
 801214a:	e00b      	b.n	8012164 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8012152:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012156:	9300      	str	r3, [sp, #0]
 8012158:	69fb      	ldr	r3, [r7, #28]
 801215a:	68b9      	ldr	r1, [r7, #8]
 801215c:	68f8      	ldr	r0, [r7, #12]
 801215e:	f001 fd63 	bl	8013c28 <ethernet_output>
 8012162:	4603      	mov	r3, r0
}
 8012164:	4618      	mov	r0, r3
 8012166:	3720      	adds	r7, #32
 8012168:	46bd      	mov	sp, r7
 801216a:	bd80      	pop	{r7, pc}
 801216c:	08017934 	.word	0x08017934
 8012170:	08017a84 	.word	0x08017a84
 8012174:	080179ac 	.word	0x080179ac
 8012178:	08017ad4 	.word	0x08017ad4
 801217c:	08017a74 	.word	0x08017a74
 8012180:	08018144 	.word	0x08018144
 8012184:	20018d68 	.word	0x20018d68
 8012188:	20018c78 	.word	0x20018c78

0801218c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b08c      	sub	sp, #48	; 0x30
 8012190:	af02      	add	r7, sp, #8
 8012192:	60f8      	str	r0, [r7, #12]
 8012194:	60b9      	str	r1, [r7, #8]
 8012196:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	332a      	adds	r3, #42	; 0x2a
 801219c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801219e:	23ff      	movs	r3, #255	; 0xff
 80121a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80121a4:	2300      	movs	r3, #0
 80121a6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80121a8:	68bb      	ldr	r3, [r7, #8]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	68f9      	ldr	r1, [r7, #12]
 80121ae:	4618      	mov	r0, r3
 80121b0:	f000 fe2c 	bl	8012e0c <ip4_addr_isbroadcast_u32>
 80121b4:	4603      	mov	r3, r0
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d10c      	bne.n	80121d4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80121ba:	68bb      	ldr	r3, [r7, #8]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80121c2:	2be0      	cmp	r3, #224	; 0xe0
 80121c4:	d006      	beq.n	80121d4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80121c6:	68bb      	ldr	r3, [r7, #8]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d003      	beq.n	80121d4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80121cc:	68bb      	ldr	r3, [r7, #8]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d102      	bne.n	80121da <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80121d4:	f06f 030f 	mvn.w	r3, #15
 80121d8:	e101      	b.n	80123de <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80121da:	68fa      	ldr	r2, [r7, #12]
 80121dc:	2101      	movs	r1, #1
 80121de:	68b8      	ldr	r0, [r7, #8]
 80121e0:	f7ff fb5c 	bl	801189c <etharp_find_entry>
 80121e4:	4603      	mov	r3, r0
 80121e6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80121e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	da02      	bge.n	80121f6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80121f0:	8a7b      	ldrh	r3, [r7, #18]
 80121f2:	b25b      	sxtb	r3, r3
 80121f4:	e0f3      	b.n	80123de <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80121f6:	8a7b      	ldrh	r3, [r7, #18]
 80121f8:	2b7e      	cmp	r3, #126	; 0x7e
 80121fa:	d906      	bls.n	801220a <etharp_query+0x7e>
 80121fc:	4b7a      	ldr	r3, [pc, #488]	; (80123e8 <etharp_query+0x25c>)
 80121fe:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012202:	497a      	ldr	r1, [pc, #488]	; (80123ec <etharp_query+0x260>)
 8012204:	487a      	ldr	r0, [pc, #488]	; (80123f0 <etharp_query+0x264>)
 8012206:	f002 f845 	bl	8014294 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801220a:	8a7b      	ldrh	r3, [r7, #18]
 801220c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801220e:	7c7a      	ldrb	r2, [r7, #17]
 8012210:	4978      	ldr	r1, [pc, #480]	; (80123f4 <etharp_query+0x268>)
 8012212:	4613      	mov	r3, r2
 8012214:	005b      	lsls	r3, r3, #1
 8012216:	4413      	add	r3, r2
 8012218:	00db      	lsls	r3, r3, #3
 801221a:	440b      	add	r3, r1
 801221c:	3314      	adds	r3, #20
 801221e:	781b      	ldrb	r3, [r3, #0]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d115      	bne.n	8012250 <etharp_query+0xc4>
    is_new_entry = 1;
 8012224:	2301      	movs	r3, #1
 8012226:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012228:	7c7a      	ldrb	r2, [r7, #17]
 801222a:	4972      	ldr	r1, [pc, #456]	; (80123f4 <etharp_query+0x268>)
 801222c:	4613      	mov	r3, r2
 801222e:	005b      	lsls	r3, r3, #1
 8012230:	4413      	add	r3, r2
 8012232:	00db      	lsls	r3, r3, #3
 8012234:	440b      	add	r3, r1
 8012236:	3314      	adds	r3, #20
 8012238:	2201      	movs	r2, #1
 801223a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801223c:	7c7a      	ldrb	r2, [r7, #17]
 801223e:	496d      	ldr	r1, [pc, #436]	; (80123f4 <etharp_query+0x268>)
 8012240:	4613      	mov	r3, r2
 8012242:	005b      	lsls	r3, r3, #1
 8012244:	4413      	add	r3, r2
 8012246:	00db      	lsls	r3, r3, #3
 8012248:	440b      	add	r3, r1
 801224a:	3308      	adds	r3, #8
 801224c:	68fa      	ldr	r2, [r7, #12]
 801224e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012250:	7c7a      	ldrb	r2, [r7, #17]
 8012252:	4968      	ldr	r1, [pc, #416]	; (80123f4 <etharp_query+0x268>)
 8012254:	4613      	mov	r3, r2
 8012256:	005b      	lsls	r3, r3, #1
 8012258:	4413      	add	r3, r2
 801225a:	00db      	lsls	r3, r3, #3
 801225c:	440b      	add	r3, r1
 801225e:	3314      	adds	r3, #20
 8012260:	781b      	ldrb	r3, [r3, #0]
 8012262:	2b01      	cmp	r3, #1
 8012264:	d011      	beq.n	801228a <etharp_query+0xfe>
 8012266:	7c7a      	ldrb	r2, [r7, #17]
 8012268:	4962      	ldr	r1, [pc, #392]	; (80123f4 <etharp_query+0x268>)
 801226a:	4613      	mov	r3, r2
 801226c:	005b      	lsls	r3, r3, #1
 801226e:	4413      	add	r3, r2
 8012270:	00db      	lsls	r3, r3, #3
 8012272:	440b      	add	r3, r1
 8012274:	3314      	adds	r3, #20
 8012276:	781b      	ldrb	r3, [r3, #0]
 8012278:	2b01      	cmp	r3, #1
 801227a:	d806      	bhi.n	801228a <etharp_query+0xfe>
 801227c:	4b5a      	ldr	r3, [pc, #360]	; (80123e8 <etharp_query+0x25c>)
 801227e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8012282:	495d      	ldr	r1, [pc, #372]	; (80123f8 <etharp_query+0x26c>)
 8012284:	485a      	ldr	r0, [pc, #360]	; (80123f0 <etharp_query+0x264>)
 8012286:	f002 f805 	bl	8014294 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801228a:	6a3b      	ldr	r3, [r7, #32]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d102      	bne.n	8012296 <etharp_query+0x10a>
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d10c      	bne.n	80122b0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012296:	68b9      	ldr	r1, [r7, #8]
 8012298:	68f8      	ldr	r0, [r7, #12]
 801229a:	f000 f963 	bl	8012564 <etharp_request>
 801229e:	4603      	mov	r3, r0
 80122a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d102      	bne.n	80122b0 <etharp_query+0x124>
      return result;
 80122aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80122ae:	e096      	b.n	80123de <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d106      	bne.n	80122c4 <etharp_query+0x138>
 80122b6:	4b4c      	ldr	r3, [pc, #304]	; (80123e8 <etharp_query+0x25c>)
 80122b8:	f240 32e1 	movw	r2, #993	; 0x3e1
 80122bc:	494f      	ldr	r1, [pc, #316]	; (80123fc <etharp_query+0x270>)
 80122be:	484c      	ldr	r0, [pc, #304]	; (80123f0 <etharp_query+0x264>)
 80122c0:	f001 ffe8 	bl	8014294 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80122c4:	7c7a      	ldrb	r2, [r7, #17]
 80122c6:	494b      	ldr	r1, [pc, #300]	; (80123f4 <etharp_query+0x268>)
 80122c8:	4613      	mov	r3, r2
 80122ca:	005b      	lsls	r3, r3, #1
 80122cc:	4413      	add	r3, r2
 80122ce:	00db      	lsls	r3, r3, #3
 80122d0:	440b      	add	r3, r1
 80122d2:	3314      	adds	r3, #20
 80122d4:	781b      	ldrb	r3, [r3, #0]
 80122d6:	2b01      	cmp	r3, #1
 80122d8:	d917      	bls.n	801230a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80122da:	4a49      	ldr	r2, [pc, #292]	; (8012400 <etharp_query+0x274>)
 80122dc:	7c7b      	ldrb	r3, [r7, #17]
 80122de:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80122e0:	7c7a      	ldrb	r2, [r7, #17]
 80122e2:	4613      	mov	r3, r2
 80122e4:	005b      	lsls	r3, r3, #1
 80122e6:	4413      	add	r3, r2
 80122e8:	00db      	lsls	r3, r3, #3
 80122ea:	3308      	adds	r3, #8
 80122ec:	4a41      	ldr	r2, [pc, #260]	; (80123f4 <etharp_query+0x268>)
 80122ee:	4413      	add	r3, r2
 80122f0:	3304      	adds	r3, #4
 80122f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80122f6:	9200      	str	r2, [sp, #0]
 80122f8:	697a      	ldr	r2, [r7, #20]
 80122fa:	6879      	ldr	r1, [r7, #4]
 80122fc:	68f8      	ldr	r0, [r7, #12]
 80122fe:	f001 fc93 	bl	8013c28 <ethernet_output>
 8012302:	4603      	mov	r3, r0
 8012304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012308:	e067      	b.n	80123da <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801230a:	7c7a      	ldrb	r2, [r7, #17]
 801230c:	4939      	ldr	r1, [pc, #228]	; (80123f4 <etharp_query+0x268>)
 801230e:	4613      	mov	r3, r2
 8012310:	005b      	lsls	r3, r3, #1
 8012312:	4413      	add	r3, r2
 8012314:	00db      	lsls	r3, r3, #3
 8012316:	440b      	add	r3, r1
 8012318:	3314      	adds	r3, #20
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	2b01      	cmp	r3, #1
 801231e:	d15c      	bne.n	80123da <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012320:	2300      	movs	r3, #0
 8012322:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012328:	e01c      	b.n	8012364 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801232a:	69fb      	ldr	r3, [r7, #28]
 801232c:	895a      	ldrh	r2, [r3, #10]
 801232e:	69fb      	ldr	r3, [r7, #28]
 8012330:	891b      	ldrh	r3, [r3, #8]
 8012332:	429a      	cmp	r2, r3
 8012334:	d10a      	bne.n	801234c <etharp_query+0x1c0>
 8012336:	69fb      	ldr	r3, [r7, #28]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d006      	beq.n	801234c <etharp_query+0x1c0>
 801233e:	4b2a      	ldr	r3, [pc, #168]	; (80123e8 <etharp_query+0x25c>)
 8012340:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012344:	492f      	ldr	r1, [pc, #188]	; (8012404 <etharp_query+0x278>)
 8012346:	482a      	ldr	r0, [pc, #168]	; (80123f0 <etharp_query+0x264>)
 8012348:	f001 ffa4 	bl	8014294 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801234c:	69fb      	ldr	r3, [r7, #28]
 801234e:	7b1b      	ldrb	r3, [r3, #12]
 8012350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012354:	2b00      	cmp	r3, #0
 8012356:	d002      	beq.n	801235e <etharp_query+0x1d2>
        copy_needed = 1;
 8012358:	2301      	movs	r3, #1
 801235a:	61bb      	str	r3, [r7, #24]
        break;
 801235c:	e005      	b.n	801236a <etharp_query+0x1de>
      }
      p = p->next;
 801235e:	69fb      	ldr	r3, [r7, #28]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012364:	69fb      	ldr	r3, [r7, #28]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d1df      	bne.n	801232a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801236a:	69bb      	ldr	r3, [r7, #24]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d007      	beq.n	8012380 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012370:	687a      	ldr	r2, [r7, #4]
 8012372:	f44f 7120 	mov.w	r1, #640	; 0x280
 8012376:	200e      	movs	r0, #14
 8012378:	f7f7 fb60 	bl	8009a3c <pbuf_clone>
 801237c:	61f8      	str	r0, [r7, #28]
 801237e:	e004      	b.n	801238a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012384:	69f8      	ldr	r0, [r7, #28]
 8012386:	f7f7 f987 	bl	8009698 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801238a:	69fb      	ldr	r3, [r7, #28]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d021      	beq.n	80123d4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012390:	7c7a      	ldrb	r2, [r7, #17]
 8012392:	4918      	ldr	r1, [pc, #96]	; (80123f4 <etharp_query+0x268>)
 8012394:	4613      	mov	r3, r2
 8012396:	005b      	lsls	r3, r3, #1
 8012398:	4413      	add	r3, r2
 801239a:	00db      	lsls	r3, r3, #3
 801239c:	440b      	add	r3, r1
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d00a      	beq.n	80123ba <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80123a4:	7c7a      	ldrb	r2, [r7, #17]
 80123a6:	4913      	ldr	r1, [pc, #76]	; (80123f4 <etharp_query+0x268>)
 80123a8:	4613      	mov	r3, r2
 80123aa:	005b      	lsls	r3, r3, #1
 80123ac:	4413      	add	r3, r2
 80123ae:	00db      	lsls	r3, r3, #3
 80123b0:	440b      	add	r3, r1
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	4618      	mov	r0, r3
 80123b6:	f7f7 f8c9 	bl	800954c <pbuf_free>
      }
      arp_table[i].q = p;
 80123ba:	7c7a      	ldrb	r2, [r7, #17]
 80123bc:	490d      	ldr	r1, [pc, #52]	; (80123f4 <etharp_query+0x268>)
 80123be:	4613      	mov	r3, r2
 80123c0:	005b      	lsls	r3, r3, #1
 80123c2:	4413      	add	r3, r2
 80123c4:	00db      	lsls	r3, r3, #3
 80123c6:	440b      	add	r3, r1
 80123c8:	69fa      	ldr	r2, [r7, #28]
 80123ca:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80123cc:	2300      	movs	r3, #0
 80123ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80123d2:	e002      	b.n	80123da <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80123d4:	23ff      	movs	r3, #255	; 0xff
 80123d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80123da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80123de:	4618      	mov	r0, r3
 80123e0:	3728      	adds	r7, #40	; 0x28
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}
 80123e6:	bf00      	nop
 80123e8:	08017934 	.word	0x08017934
 80123ec:	08017ae0 	.word	0x08017ae0
 80123f0:	080179ac 	.word	0x080179ac
 80123f4:	20018c78 	.word	0x20018c78
 80123f8:	08017af0 	.word	0x08017af0
 80123fc:	08017ad4 	.word	0x08017ad4
 8012400:	20018d68 	.word	0x20018d68
 8012404:	08017b18 	.word	0x08017b18

08012408 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b08a      	sub	sp, #40	; 0x28
 801240c:	af02      	add	r7, sp, #8
 801240e:	60f8      	str	r0, [r7, #12]
 8012410:	60b9      	str	r1, [r7, #8]
 8012412:	607a      	str	r2, [r7, #4]
 8012414:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012416:	2300      	movs	r3, #0
 8012418:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d106      	bne.n	801242e <etharp_raw+0x26>
 8012420:	4b3a      	ldr	r3, [pc, #232]	; (801250c <etharp_raw+0x104>)
 8012422:	f240 4257 	movw	r2, #1111	; 0x457
 8012426:	493a      	ldr	r1, [pc, #232]	; (8012510 <etharp_raw+0x108>)
 8012428:	483a      	ldr	r0, [pc, #232]	; (8012514 <etharp_raw+0x10c>)
 801242a:	f001 ff33 	bl	8014294 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801242e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012432:	211c      	movs	r1, #28
 8012434:	200e      	movs	r0, #14
 8012436:	f7f6 fda5 	bl	8008f84 <pbuf_alloc>
 801243a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801243c:	69bb      	ldr	r3, [r7, #24]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d102      	bne.n	8012448 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012442:	f04f 33ff 	mov.w	r3, #4294967295
 8012446:	e05d      	b.n	8012504 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012448:	69bb      	ldr	r3, [r7, #24]
 801244a:	895b      	ldrh	r3, [r3, #10]
 801244c:	2b1b      	cmp	r3, #27
 801244e:	d806      	bhi.n	801245e <etharp_raw+0x56>
 8012450:	4b2e      	ldr	r3, [pc, #184]	; (801250c <etharp_raw+0x104>)
 8012452:	f240 4262 	movw	r2, #1122	; 0x462
 8012456:	4930      	ldr	r1, [pc, #192]	; (8012518 <etharp_raw+0x110>)
 8012458:	482e      	ldr	r0, [pc, #184]	; (8012514 <etharp_raw+0x10c>)
 801245a:	f001 ff1b 	bl	8014294 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801245e:	69bb      	ldr	r3, [r7, #24]
 8012460:	685b      	ldr	r3, [r3, #4]
 8012462:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012464:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012466:	4618      	mov	r0, r3
 8012468:	f7f5 fc72 	bl	8007d50 <lwip_htons>
 801246c:	4603      	mov	r3, r0
 801246e:	461a      	mov	r2, r3
 8012470:	697b      	ldr	r3, [r7, #20]
 8012472:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801247a:	2b06      	cmp	r3, #6
 801247c:	d006      	beq.n	801248c <etharp_raw+0x84>
 801247e:	4b23      	ldr	r3, [pc, #140]	; (801250c <etharp_raw+0x104>)
 8012480:	f240 4269 	movw	r2, #1129	; 0x469
 8012484:	4925      	ldr	r1, [pc, #148]	; (801251c <etharp_raw+0x114>)
 8012486:	4823      	ldr	r0, [pc, #140]	; (8012514 <etharp_raw+0x10c>)
 8012488:	f001 ff04 	bl	8014294 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801248c:	697b      	ldr	r3, [r7, #20]
 801248e:	3308      	adds	r3, #8
 8012490:	2206      	movs	r2, #6
 8012492:	6839      	ldr	r1, [r7, #0]
 8012494:	4618      	mov	r0, r3
 8012496:	f001 fe52 	bl	801413e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801249a:	697b      	ldr	r3, [r7, #20]
 801249c:	3312      	adds	r3, #18
 801249e:	2206      	movs	r2, #6
 80124a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80124a2:	4618      	mov	r0, r3
 80124a4:	f001 fe4b 	bl	801413e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80124a8:	697b      	ldr	r3, [r7, #20]
 80124aa:	330e      	adds	r3, #14
 80124ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80124ae:	6812      	ldr	r2, [r2, #0]
 80124b0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80124b2:	697b      	ldr	r3, [r7, #20]
 80124b4:	3318      	adds	r3, #24
 80124b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80124b8:	6812      	ldr	r2, [r2, #0]
 80124ba:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80124bc:	697b      	ldr	r3, [r7, #20]
 80124be:	2200      	movs	r2, #0
 80124c0:	701a      	strb	r2, [r3, #0]
 80124c2:	2200      	movs	r2, #0
 80124c4:	f042 0201 	orr.w	r2, r2, #1
 80124c8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80124ca:	697b      	ldr	r3, [r7, #20]
 80124cc:	2200      	movs	r2, #0
 80124ce:	f042 0208 	orr.w	r2, r2, #8
 80124d2:	709a      	strb	r2, [r3, #2]
 80124d4:	2200      	movs	r2, #0
 80124d6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80124d8:	697b      	ldr	r3, [r7, #20]
 80124da:	2206      	movs	r2, #6
 80124dc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80124de:	697b      	ldr	r3, [r7, #20]
 80124e0:	2204      	movs	r2, #4
 80124e2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80124e4:	f640 0306 	movw	r3, #2054	; 0x806
 80124e8:	9300      	str	r3, [sp, #0]
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	68ba      	ldr	r2, [r7, #8]
 80124ee:	69b9      	ldr	r1, [r7, #24]
 80124f0:	68f8      	ldr	r0, [r7, #12]
 80124f2:	f001 fb99 	bl	8013c28 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80124f6:	69b8      	ldr	r0, [r7, #24]
 80124f8:	f7f7 f828 	bl	800954c <pbuf_free>
  p = NULL;
 80124fc:	2300      	movs	r3, #0
 80124fe:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012500:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012504:	4618      	mov	r0, r3
 8012506:	3720      	adds	r7, #32
 8012508:	46bd      	mov	sp, r7
 801250a:	bd80      	pop	{r7, pc}
 801250c:	08017934 	.word	0x08017934
 8012510:	08017a84 	.word	0x08017a84
 8012514:	080179ac 	.word	0x080179ac
 8012518:	08017b34 	.word	0x08017b34
 801251c:	08017b68 	.word	0x08017b68

08012520 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012520:	b580      	push	{r7, lr}
 8012522:	b088      	sub	sp, #32
 8012524:	af04      	add	r7, sp, #16
 8012526:	60f8      	str	r0, [r7, #12]
 8012528:	60b9      	str	r1, [r7, #8]
 801252a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801253c:	2201      	movs	r2, #1
 801253e:	9203      	str	r2, [sp, #12]
 8012540:	68ba      	ldr	r2, [r7, #8]
 8012542:	9202      	str	r2, [sp, #8]
 8012544:	4a06      	ldr	r2, [pc, #24]	; (8012560 <etharp_request_dst+0x40>)
 8012546:	9201      	str	r2, [sp, #4]
 8012548:	9300      	str	r3, [sp, #0]
 801254a:	4603      	mov	r3, r0
 801254c:	687a      	ldr	r2, [r7, #4]
 801254e:	68f8      	ldr	r0, [r7, #12]
 8012550:	f7ff ff5a 	bl	8012408 <etharp_raw>
 8012554:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012556:	4618      	mov	r0, r3
 8012558:	3710      	adds	r7, #16
 801255a:	46bd      	mov	sp, r7
 801255c:	bd80      	pop	{r7, pc}
 801255e:	bf00      	nop
 8012560:	0801814c 	.word	0x0801814c

08012564 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b082      	sub	sp, #8
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
 801256c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801256e:	4a05      	ldr	r2, [pc, #20]	; (8012584 <etharp_request+0x20>)
 8012570:	6839      	ldr	r1, [r7, #0]
 8012572:	6878      	ldr	r0, [r7, #4]
 8012574:	f7ff ffd4 	bl	8012520 <etharp_request_dst>
 8012578:	4603      	mov	r3, r0
}
 801257a:	4618      	mov	r0, r3
 801257c:	3708      	adds	r7, #8
 801257e:	46bd      	mov	sp, r7
 8012580:	bd80      	pop	{r7, pc}
 8012582:	bf00      	nop
 8012584:	08018144 	.word	0x08018144

08012588 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b08e      	sub	sp, #56	; 0x38
 801258c:	af04      	add	r7, sp, #16
 801258e:	6078      	str	r0, [r7, #4]
 8012590:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012592:	4b79      	ldr	r3, [pc, #484]	; (8012778 <icmp_input+0x1f0>)
 8012594:	689b      	ldr	r3, [r3, #8]
 8012596:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801259a:	781b      	ldrb	r3, [r3, #0]
 801259c:	f003 030f 	and.w	r3, r3, #15
 80125a0:	b2db      	uxtb	r3, r3
 80125a2:	009b      	lsls	r3, r3, #2
 80125a4:	b2db      	uxtb	r3, r3
 80125a6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80125a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80125aa:	2b13      	cmp	r3, #19
 80125ac:	f240 80cd 	bls.w	801274a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	895b      	ldrh	r3, [r3, #10]
 80125b4:	2b03      	cmp	r3, #3
 80125b6:	f240 80ca 	bls.w	801274e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	685b      	ldr	r3, [r3, #4]
 80125be:	781b      	ldrb	r3, [r3, #0]
 80125c0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80125c4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	f000 80b7 	beq.w	801273c <icmp_input+0x1b4>
 80125ce:	2b08      	cmp	r3, #8
 80125d0:	f040 80b7 	bne.w	8012742 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80125d4:	4b69      	ldr	r3, [pc, #420]	; (801277c <icmp_input+0x1f4>)
 80125d6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80125d8:	4b67      	ldr	r3, [pc, #412]	; (8012778 <icmp_input+0x1f0>)
 80125da:	695b      	ldr	r3, [r3, #20]
 80125dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80125e0:	2be0      	cmp	r3, #224	; 0xe0
 80125e2:	f000 80bb 	beq.w	801275c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80125e6:	4b64      	ldr	r3, [pc, #400]	; (8012778 <icmp_input+0x1f0>)
 80125e8:	695b      	ldr	r3, [r3, #20]
 80125ea:	4a63      	ldr	r2, [pc, #396]	; (8012778 <icmp_input+0x1f0>)
 80125ec:	6812      	ldr	r2, [r2, #0]
 80125ee:	4611      	mov	r1, r2
 80125f0:	4618      	mov	r0, r3
 80125f2:	f000 fc0b 	bl	8012e0c <ip4_addr_isbroadcast_u32>
 80125f6:	4603      	mov	r3, r0
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	f040 80b1 	bne.w	8012760 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	891b      	ldrh	r3, [r3, #8]
 8012602:	2b07      	cmp	r3, #7
 8012604:	f240 80a5 	bls.w	8012752 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012608:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801260a:	330e      	adds	r3, #14
 801260c:	4619      	mov	r1, r3
 801260e:	6878      	ldr	r0, [r7, #4]
 8012610:	f7f6 ff06 	bl	8009420 <pbuf_add_header>
 8012614:	4603      	mov	r3, r0
 8012616:	2b00      	cmp	r3, #0
 8012618:	d04b      	beq.n	80126b2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	891a      	ldrh	r2, [r3, #8]
 801261e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012620:	4413      	add	r3, r2
 8012622:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	891b      	ldrh	r3, [r3, #8]
 8012628:	8b7a      	ldrh	r2, [r7, #26]
 801262a:	429a      	cmp	r2, r3
 801262c:	f0c0 809a 	bcc.w	8012764 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012630:	8b7b      	ldrh	r3, [r7, #26]
 8012632:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012636:	4619      	mov	r1, r3
 8012638:	200e      	movs	r0, #14
 801263a:	f7f6 fca3 	bl	8008f84 <pbuf_alloc>
 801263e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012640:	697b      	ldr	r3, [r7, #20]
 8012642:	2b00      	cmp	r3, #0
 8012644:	f000 8090 	beq.w	8012768 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012648:	697b      	ldr	r3, [r7, #20]
 801264a:	895b      	ldrh	r3, [r3, #10]
 801264c:	461a      	mov	r2, r3
 801264e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012650:	3308      	adds	r3, #8
 8012652:	429a      	cmp	r2, r3
 8012654:	d203      	bcs.n	801265e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012656:	6978      	ldr	r0, [r7, #20]
 8012658:	f7f6 ff78 	bl	800954c <pbuf_free>
          goto icmperr;
 801265c:	e085      	b.n	801276a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801265e:	697b      	ldr	r3, [r7, #20]
 8012660:	685b      	ldr	r3, [r3, #4]
 8012662:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012666:	4618      	mov	r0, r3
 8012668:	f001 fd69 	bl	801413e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801266c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801266e:	4619      	mov	r1, r3
 8012670:	6978      	ldr	r0, [r7, #20]
 8012672:	f7f6 fee5 	bl	8009440 <pbuf_remove_header>
 8012676:	4603      	mov	r3, r0
 8012678:	2b00      	cmp	r3, #0
 801267a:	d009      	beq.n	8012690 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801267c:	4b40      	ldr	r3, [pc, #256]	; (8012780 <icmp_input+0x1f8>)
 801267e:	22b6      	movs	r2, #182	; 0xb6
 8012680:	4940      	ldr	r1, [pc, #256]	; (8012784 <icmp_input+0x1fc>)
 8012682:	4841      	ldr	r0, [pc, #260]	; (8012788 <icmp_input+0x200>)
 8012684:	f001 fe06 	bl	8014294 <iprintf>
          pbuf_free(r);
 8012688:	6978      	ldr	r0, [r7, #20]
 801268a:	f7f6 ff5f 	bl	800954c <pbuf_free>
          goto icmperr;
 801268e:	e06c      	b.n	801276a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012690:	6879      	ldr	r1, [r7, #4]
 8012692:	6978      	ldr	r0, [r7, #20]
 8012694:	f7f7 f88e 	bl	80097b4 <pbuf_copy>
 8012698:	4603      	mov	r3, r0
 801269a:	2b00      	cmp	r3, #0
 801269c:	d003      	beq.n	80126a6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801269e:	6978      	ldr	r0, [r7, #20]
 80126a0:	f7f6 ff54 	bl	800954c <pbuf_free>
          goto icmperr;
 80126a4:	e061      	b.n	801276a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	f7f6 ff50 	bl	800954c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80126ac:	697b      	ldr	r3, [r7, #20]
 80126ae:	607b      	str	r3, [r7, #4]
 80126b0:	e00f      	b.n	80126d2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80126b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80126b4:	330e      	adds	r3, #14
 80126b6:	4619      	mov	r1, r3
 80126b8:	6878      	ldr	r0, [r7, #4]
 80126ba:	f7f6 fec1 	bl	8009440 <pbuf_remove_header>
 80126be:	4603      	mov	r3, r0
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d006      	beq.n	80126d2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80126c4:	4b2e      	ldr	r3, [pc, #184]	; (8012780 <icmp_input+0x1f8>)
 80126c6:	22c7      	movs	r2, #199	; 0xc7
 80126c8:	4930      	ldr	r1, [pc, #192]	; (801278c <icmp_input+0x204>)
 80126ca:	482f      	ldr	r0, [pc, #188]	; (8012788 <icmp_input+0x200>)
 80126cc:	f001 fde2 	bl	8014294 <iprintf>
          goto icmperr;
 80126d0:	e04b      	b.n	801276a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	685b      	ldr	r3, [r3, #4]
 80126d6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80126d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80126da:	4619      	mov	r1, r3
 80126dc:	6878      	ldr	r0, [r7, #4]
 80126de:	f7f6 fe9f 	bl	8009420 <pbuf_add_header>
 80126e2:	4603      	mov	r3, r0
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d12b      	bne.n	8012740 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	685b      	ldr	r3, [r3, #4]
 80126ec:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80126ee:	69fb      	ldr	r3, [r7, #28]
 80126f0:	681a      	ldr	r2, [r3, #0]
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80126f6:	4b20      	ldr	r3, [pc, #128]	; (8012778 <icmp_input+0x1f0>)
 80126f8:	691a      	ldr	r2, [r3, #16]
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80126fe:	693b      	ldr	r3, [r7, #16]
 8012700:	2200      	movs	r2, #0
 8012702:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8012704:	693b      	ldr	r3, [r7, #16]
 8012706:	2200      	movs	r2, #0
 8012708:	709a      	strb	r2, [r3, #2]
 801270a:	2200      	movs	r2, #0
 801270c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	22ff      	movs	r2, #255	; 0xff
 8012712:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	2200      	movs	r2, #0
 8012718:	729a      	strb	r2, [r3, #10]
 801271a:	2200      	movs	r2, #0
 801271c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801271e:	683b      	ldr	r3, [r7, #0]
 8012720:	9302      	str	r3, [sp, #8]
 8012722:	2301      	movs	r3, #1
 8012724:	9301      	str	r3, [sp, #4]
 8012726:	2300      	movs	r3, #0
 8012728:	9300      	str	r3, [sp, #0]
 801272a:	23ff      	movs	r3, #255	; 0xff
 801272c:	2200      	movs	r2, #0
 801272e:	69f9      	ldr	r1, [r7, #28]
 8012730:	6878      	ldr	r0, [r7, #4]
 8012732:	f000 fa93 	bl	8012c5c <ip4_output_if>
 8012736:	4603      	mov	r3, r0
 8012738:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801273a:	e001      	b.n	8012740 <icmp_input+0x1b8>
      break;
 801273c:	bf00      	nop
 801273e:	e000      	b.n	8012742 <icmp_input+0x1ba>
      break;
 8012740:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012742:	6878      	ldr	r0, [r7, #4]
 8012744:	f7f6 ff02 	bl	800954c <pbuf_free>
  return;
 8012748:	e013      	b.n	8012772 <icmp_input+0x1ea>
    goto lenerr;
 801274a:	bf00      	nop
 801274c:	e002      	b.n	8012754 <icmp_input+0x1cc>
    goto lenerr;
 801274e:	bf00      	nop
 8012750:	e000      	b.n	8012754 <icmp_input+0x1cc>
        goto lenerr;
 8012752:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012754:	6878      	ldr	r0, [r7, #4]
 8012756:	f7f6 fef9 	bl	800954c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801275a:	e00a      	b.n	8012772 <icmp_input+0x1ea>
        goto icmperr;
 801275c:	bf00      	nop
 801275e:	e004      	b.n	801276a <icmp_input+0x1e2>
        goto icmperr;
 8012760:	bf00      	nop
 8012762:	e002      	b.n	801276a <icmp_input+0x1e2>
          goto icmperr;
 8012764:	bf00      	nop
 8012766:	e000      	b.n	801276a <icmp_input+0x1e2>
          goto icmperr;
 8012768:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801276a:	6878      	ldr	r0, [r7, #4]
 801276c:	f7f6 feee 	bl	800954c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012770:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012772:	3728      	adds	r7, #40	; 0x28
 8012774:	46bd      	mov	sp, r7
 8012776:	bd80      	pop	{r7, pc}
 8012778:	20015470 	.word	0x20015470
 801277c:	20015484 	.word	0x20015484
 8012780:	08017bac 	.word	0x08017bac
 8012784:	08017be4 	.word	0x08017be4
 8012788:	08017c1c 	.word	0x08017c1c
 801278c:	08017c44 	.word	0x08017c44

08012790 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b082      	sub	sp, #8
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
 8012798:	460b      	mov	r3, r1
 801279a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801279c:	78fb      	ldrb	r3, [r7, #3]
 801279e:	461a      	mov	r2, r3
 80127a0:	2103      	movs	r1, #3
 80127a2:	6878      	ldr	r0, [r7, #4]
 80127a4:	f000 f814 	bl	80127d0 <icmp_send_response>
}
 80127a8:	bf00      	nop
 80127aa:	3708      	adds	r7, #8
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}

080127b0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b082      	sub	sp, #8
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
 80127b8:	460b      	mov	r3, r1
 80127ba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80127bc:	78fb      	ldrb	r3, [r7, #3]
 80127be:	461a      	mov	r2, r3
 80127c0:	210b      	movs	r1, #11
 80127c2:	6878      	ldr	r0, [r7, #4]
 80127c4:	f000 f804 	bl	80127d0 <icmp_send_response>
}
 80127c8:	bf00      	nop
 80127ca:	3708      	adds	r7, #8
 80127cc:	46bd      	mov	sp, r7
 80127ce:	bd80      	pop	{r7, pc}

080127d0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b08c      	sub	sp, #48	; 0x30
 80127d4:	af04      	add	r7, sp, #16
 80127d6:	6078      	str	r0, [r7, #4]
 80127d8:	460b      	mov	r3, r1
 80127da:	70fb      	strb	r3, [r7, #3]
 80127dc:	4613      	mov	r3, r2
 80127de:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80127e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80127e4:	2124      	movs	r1, #36	; 0x24
 80127e6:	2022      	movs	r0, #34	; 0x22
 80127e8:	f7f6 fbcc 	bl	8008f84 <pbuf_alloc>
 80127ec:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80127ee:	69fb      	ldr	r3, [r7, #28]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d04c      	beq.n	801288e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80127f4:	69fb      	ldr	r3, [r7, #28]
 80127f6:	895b      	ldrh	r3, [r3, #10]
 80127f8:	2b23      	cmp	r3, #35	; 0x23
 80127fa:	d806      	bhi.n	801280a <icmp_send_response+0x3a>
 80127fc:	4b26      	ldr	r3, [pc, #152]	; (8012898 <icmp_send_response+0xc8>)
 80127fe:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8012802:	4926      	ldr	r1, [pc, #152]	; (801289c <icmp_send_response+0xcc>)
 8012804:	4826      	ldr	r0, [pc, #152]	; (80128a0 <icmp_send_response+0xd0>)
 8012806:	f001 fd45 	bl	8014294 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	685b      	ldr	r3, [r3, #4]
 801280e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012810:	69fb      	ldr	r3, [r7, #28]
 8012812:	685b      	ldr	r3, [r3, #4]
 8012814:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8012816:	697b      	ldr	r3, [r7, #20]
 8012818:	78fa      	ldrb	r2, [r7, #3]
 801281a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801281c:	697b      	ldr	r3, [r7, #20]
 801281e:	78ba      	ldrb	r2, [r7, #2]
 8012820:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012822:	697b      	ldr	r3, [r7, #20]
 8012824:	2200      	movs	r2, #0
 8012826:	711a      	strb	r2, [r3, #4]
 8012828:	2200      	movs	r2, #0
 801282a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801282c:	697b      	ldr	r3, [r7, #20]
 801282e:	2200      	movs	r2, #0
 8012830:	719a      	strb	r2, [r3, #6]
 8012832:	2200      	movs	r2, #0
 8012834:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012836:	69fb      	ldr	r3, [r7, #28]
 8012838:	685b      	ldr	r3, [r3, #4]
 801283a:	f103 0008 	add.w	r0, r3, #8
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	685b      	ldr	r3, [r3, #4]
 8012842:	221c      	movs	r2, #28
 8012844:	4619      	mov	r1, r3
 8012846:	f001 fc7a 	bl	801413e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801284a:	69bb      	ldr	r3, [r7, #24]
 801284c:	68db      	ldr	r3, [r3, #12]
 801284e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012850:	f107 030c 	add.w	r3, r7, #12
 8012854:	4618      	mov	r0, r3
 8012856:	f000 f825 	bl	80128a4 <ip4_route>
 801285a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801285c:	693b      	ldr	r3, [r7, #16]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d011      	beq.n	8012886 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012862:	697b      	ldr	r3, [r7, #20]
 8012864:	2200      	movs	r2, #0
 8012866:	709a      	strb	r2, [r3, #2]
 8012868:	2200      	movs	r2, #0
 801286a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801286c:	f107 020c 	add.w	r2, r7, #12
 8012870:	693b      	ldr	r3, [r7, #16]
 8012872:	9302      	str	r3, [sp, #8]
 8012874:	2301      	movs	r3, #1
 8012876:	9301      	str	r3, [sp, #4]
 8012878:	2300      	movs	r3, #0
 801287a:	9300      	str	r3, [sp, #0]
 801287c:	23ff      	movs	r3, #255	; 0xff
 801287e:	2100      	movs	r1, #0
 8012880:	69f8      	ldr	r0, [r7, #28]
 8012882:	f000 f9eb 	bl	8012c5c <ip4_output_if>
  }
  pbuf_free(q);
 8012886:	69f8      	ldr	r0, [r7, #28]
 8012888:	f7f6 fe60 	bl	800954c <pbuf_free>
 801288c:	e000      	b.n	8012890 <icmp_send_response+0xc0>
    return;
 801288e:	bf00      	nop
}
 8012890:	3720      	adds	r7, #32
 8012892:	46bd      	mov	sp, r7
 8012894:	bd80      	pop	{r7, pc}
 8012896:	bf00      	nop
 8012898:	08017bac 	.word	0x08017bac
 801289c:	08017c78 	.word	0x08017c78
 80128a0:	08017c1c 	.word	0x08017c1c

080128a4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80128a4:	b480      	push	{r7}
 80128a6:	b085      	sub	sp, #20
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80128ac:	4b33      	ldr	r3, [pc, #204]	; (801297c <ip4_route+0xd8>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	60fb      	str	r3, [r7, #12]
 80128b2:	e036      	b.n	8012922 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80128ba:	f003 0301 	and.w	r3, r3, #1
 80128be:	b2db      	uxtb	r3, r3
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d02b      	beq.n	801291c <ip4_route+0x78>
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80128ca:	089b      	lsrs	r3, r3, #2
 80128cc:	f003 0301 	and.w	r3, r3, #1
 80128d0:	b2db      	uxtb	r3, r3
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d022      	beq.n	801291c <ip4_route+0x78>
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	3304      	adds	r3, #4
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d01d      	beq.n	801291c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	681a      	ldr	r2, [r3, #0]
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	3304      	adds	r3, #4
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	405a      	eors	r2, r3
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	3308      	adds	r3, #8
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	4013      	ands	r3, r2
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d101      	bne.n	80128fc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	e038      	b.n	801296e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012902:	f003 0302 	and.w	r3, r3, #2
 8012906:	2b00      	cmp	r3, #0
 8012908:	d108      	bne.n	801291c <ip4_route+0x78>
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	681a      	ldr	r2, [r3, #0]
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	330c      	adds	r3, #12
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	429a      	cmp	r2, r3
 8012916:	d101      	bne.n	801291c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	e028      	b.n	801296e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	60fb      	str	r3, [r7, #12]
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d1c5      	bne.n	80128b4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012928:	4b15      	ldr	r3, [pc, #84]	; (8012980 <ip4_route+0xdc>)
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d01a      	beq.n	8012966 <ip4_route+0xc2>
 8012930:	4b13      	ldr	r3, [pc, #76]	; (8012980 <ip4_route+0xdc>)
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012938:	f003 0301 	and.w	r3, r3, #1
 801293c:	2b00      	cmp	r3, #0
 801293e:	d012      	beq.n	8012966 <ip4_route+0xc2>
 8012940:	4b0f      	ldr	r3, [pc, #60]	; (8012980 <ip4_route+0xdc>)
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012948:	f003 0304 	and.w	r3, r3, #4
 801294c:	2b00      	cmp	r3, #0
 801294e:	d00a      	beq.n	8012966 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012950:	4b0b      	ldr	r3, [pc, #44]	; (8012980 <ip4_route+0xdc>)
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	3304      	adds	r3, #4
 8012956:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012958:	2b00      	cmp	r3, #0
 801295a:	d004      	beq.n	8012966 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	b2db      	uxtb	r3, r3
 8012962:	2b7f      	cmp	r3, #127	; 0x7f
 8012964:	d101      	bne.n	801296a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012966:	2300      	movs	r3, #0
 8012968:	e001      	b.n	801296e <ip4_route+0xca>
  }

  return netif_default;
 801296a:	4b05      	ldr	r3, [pc, #20]	; (8012980 <ip4_route+0xdc>)
 801296c:	681b      	ldr	r3, [r3, #0]
}
 801296e:	4618      	mov	r0, r3
 8012970:	3714      	adds	r7, #20
 8012972:	46bd      	mov	sp, r7
 8012974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012978:	4770      	bx	lr
 801297a:	bf00      	nop
 801297c:	20018bd8 	.word	0x20018bd8
 8012980:	20018bdc 	.word	0x20018bdc

08012984 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012984:	b580      	push	{r7, lr}
 8012986:	b082      	sub	sp, #8
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012992:	f003 0301 	and.w	r3, r3, #1
 8012996:	b2db      	uxtb	r3, r3
 8012998:	2b00      	cmp	r3, #0
 801299a:	d016      	beq.n	80129ca <ip4_input_accept+0x46>
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	3304      	adds	r3, #4
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d011      	beq.n	80129ca <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80129a6:	4b0b      	ldr	r3, [pc, #44]	; (80129d4 <ip4_input_accept+0x50>)
 80129a8:	695a      	ldr	r2, [r3, #20]
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	3304      	adds	r3, #4
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	429a      	cmp	r2, r3
 80129b2:	d008      	beq.n	80129c6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80129b4:	4b07      	ldr	r3, [pc, #28]	; (80129d4 <ip4_input_accept+0x50>)
 80129b6:	695b      	ldr	r3, [r3, #20]
 80129b8:	6879      	ldr	r1, [r7, #4]
 80129ba:	4618      	mov	r0, r3
 80129bc:	f000 fa26 	bl	8012e0c <ip4_addr_isbroadcast_u32>
 80129c0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d001      	beq.n	80129ca <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80129c6:	2301      	movs	r3, #1
 80129c8:	e000      	b.n	80129cc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80129ca:	2300      	movs	r3, #0
}
 80129cc:	4618      	mov	r0, r3
 80129ce:	3708      	adds	r7, #8
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bd80      	pop	{r7, pc}
 80129d4:	20015470 	.word	0x20015470

080129d8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b088      	sub	sp, #32
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
 80129e0:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80129e2:	2301      	movs	r3, #1
 80129e4:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	685b      	ldr	r3, [r3, #4]
 80129ea:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80129ec:	69fb      	ldr	r3, [r7, #28]
 80129ee:	781b      	ldrb	r3, [r3, #0]
 80129f0:	091b      	lsrs	r3, r3, #4
 80129f2:	b2db      	uxtb	r3, r3
 80129f4:	2b04      	cmp	r3, #4
 80129f6:	d004      	beq.n	8012a02 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80129f8:	6878      	ldr	r0, [r7, #4]
 80129fa:	f7f6 fda7 	bl	800954c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80129fe:	2300      	movs	r3, #0
 8012a00:	e123      	b.n	8012c4a <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012a02:	69fb      	ldr	r3, [r7, #28]
 8012a04:	781b      	ldrb	r3, [r3, #0]
 8012a06:	f003 030f 	and.w	r3, r3, #15
 8012a0a:	b2db      	uxtb	r3, r3
 8012a0c:	009b      	lsls	r3, r3, #2
 8012a0e:	b2db      	uxtb	r3, r3
 8012a10:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012a12:	69fb      	ldr	r3, [r7, #28]
 8012a14:	885b      	ldrh	r3, [r3, #2]
 8012a16:	b29b      	uxth	r3, r3
 8012a18:	4618      	mov	r0, r3
 8012a1a:	f7f5 f999 	bl	8007d50 <lwip_htons>
 8012a1e:	4603      	mov	r3, r0
 8012a20:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	891b      	ldrh	r3, [r3, #8]
 8012a26:	8a3a      	ldrh	r2, [r7, #16]
 8012a28:	429a      	cmp	r2, r3
 8012a2a:	d204      	bcs.n	8012a36 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8012a2c:	8a3b      	ldrh	r3, [r7, #16]
 8012a2e:	4619      	mov	r1, r3
 8012a30:	6878      	ldr	r0, [r7, #4]
 8012a32:	f7f6 fc05 	bl	8009240 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	895b      	ldrh	r3, [r3, #10]
 8012a3a:	8a7a      	ldrh	r2, [r7, #18]
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d807      	bhi.n	8012a50 <ip4_input+0x78>
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	891b      	ldrh	r3, [r3, #8]
 8012a44:	8a3a      	ldrh	r2, [r7, #16]
 8012a46:	429a      	cmp	r2, r3
 8012a48:	d802      	bhi.n	8012a50 <ip4_input+0x78>
 8012a4a:	8a7b      	ldrh	r3, [r7, #18]
 8012a4c:	2b13      	cmp	r3, #19
 8012a4e:	d804      	bhi.n	8012a5a <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012a50:	6878      	ldr	r0, [r7, #4]
 8012a52:	f7f6 fd7b 	bl	800954c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012a56:	2300      	movs	r3, #0
 8012a58:	e0f7      	b.n	8012c4a <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012a5a:	69fb      	ldr	r3, [r7, #28]
 8012a5c:	691b      	ldr	r3, [r3, #16]
 8012a5e:	4a7d      	ldr	r2, [pc, #500]	; (8012c54 <ip4_input+0x27c>)
 8012a60:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012a62:	69fb      	ldr	r3, [r7, #28]
 8012a64:	68db      	ldr	r3, [r3, #12]
 8012a66:	4a7b      	ldr	r2, [pc, #492]	; (8012c54 <ip4_input+0x27c>)
 8012a68:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012a6a:	4b7a      	ldr	r3, [pc, #488]	; (8012c54 <ip4_input+0x27c>)
 8012a6c:	695b      	ldr	r3, [r3, #20]
 8012a6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012a72:	2be0      	cmp	r3, #224	; 0xe0
 8012a74:	d112      	bne.n	8012a9c <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012a76:	683b      	ldr	r3, [r7, #0]
 8012a78:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012a7c:	f003 0301 	and.w	r3, r3, #1
 8012a80:	b2db      	uxtb	r3, r3
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d007      	beq.n	8012a96 <ip4_input+0xbe>
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	3304      	adds	r3, #4
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d002      	beq.n	8012a96 <ip4_input+0xbe>
      netif = inp;
 8012a90:	683b      	ldr	r3, [r7, #0]
 8012a92:	61bb      	str	r3, [r7, #24]
 8012a94:	e02a      	b.n	8012aec <ip4_input+0x114>
    } else {
      netif = NULL;
 8012a96:	2300      	movs	r3, #0
 8012a98:	61bb      	str	r3, [r7, #24]
 8012a9a:	e027      	b.n	8012aec <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012a9c:	6838      	ldr	r0, [r7, #0]
 8012a9e:	f7ff ff71 	bl	8012984 <ip4_input_accept>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d002      	beq.n	8012aae <ip4_input+0xd6>
      netif = inp;
 8012aa8:	683b      	ldr	r3, [r7, #0]
 8012aaa:	61bb      	str	r3, [r7, #24]
 8012aac:	e01e      	b.n	8012aec <ip4_input+0x114>
    } else {
      netif = NULL;
 8012aae:	2300      	movs	r3, #0
 8012ab0:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012ab2:	4b68      	ldr	r3, [pc, #416]	; (8012c54 <ip4_input+0x27c>)
 8012ab4:	695b      	ldr	r3, [r3, #20]
 8012ab6:	b2db      	uxtb	r3, r3
 8012ab8:	2b7f      	cmp	r3, #127	; 0x7f
 8012aba:	d017      	beq.n	8012aec <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012abc:	4b66      	ldr	r3, [pc, #408]	; (8012c58 <ip4_input+0x280>)
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	61bb      	str	r3, [r7, #24]
 8012ac2:	e00e      	b.n	8012ae2 <ip4_input+0x10a>
          if (netif == inp) {
 8012ac4:	69ba      	ldr	r2, [r7, #24]
 8012ac6:	683b      	ldr	r3, [r7, #0]
 8012ac8:	429a      	cmp	r2, r3
 8012aca:	d006      	beq.n	8012ada <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012acc:	69b8      	ldr	r0, [r7, #24]
 8012ace:	f7ff ff59 	bl	8012984 <ip4_input_accept>
 8012ad2:	4603      	mov	r3, r0
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d108      	bne.n	8012aea <ip4_input+0x112>
 8012ad8:	e000      	b.n	8012adc <ip4_input+0x104>
            continue;
 8012ada:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012adc:	69bb      	ldr	r3, [r7, #24]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	61bb      	str	r3, [r7, #24]
 8012ae2:	69bb      	ldr	r3, [r7, #24]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d1ed      	bne.n	8012ac4 <ip4_input+0xec>
 8012ae8:	e000      	b.n	8012aec <ip4_input+0x114>
            break;
 8012aea:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8012aec:	69bb      	ldr	r3, [r7, #24]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d111      	bne.n	8012b16 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8012af2:	69fb      	ldr	r3, [r7, #28]
 8012af4:	7a5b      	ldrb	r3, [r3, #9]
 8012af6:	2b11      	cmp	r3, #17
 8012af8:	d10d      	bne.n	8012b16 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8012afa:	8a7b      	ldrh	r3, [r7, #18]
 8012afc:	69fa      	ldr	r2, [r7, #28]
 8012afe:	4413      	add	r3, r2
 8012b00:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	885b      	ldrh	r3, [r3, #2]
 8012b06:	b29b      	uxth	r3, r3
 8012b08:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8012b0c:	d103      	bne.n	8012b16 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8012b0e:	683b      	ldr	r3, [r7, #0]
 8012b10:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8012b12:	2300      	movs	r3, #0
 8012b14:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8012b16:	697b      	ldr	r3, [r7, #20]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d017      	beq.n	8012b4c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8012b1c:	4b4d      	ldr	r3, [pc, #308]	; (8012c54 <ip4_input+0x27c>)
 8012b1e:	691b      	ldr	r3, [r3, #16]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d013      	beq.n	8012b4c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012b24:	4b4b      	ldr	r3, [pc, #300]	; (8012c54 <ip4_input+0x27c>)
 8012b26:	691b      	ldr	r3, [r3, #16]
 8012b28:	6839      	ldr	r1, [r7, #0]
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	f000 f96e 	bl	8012e0c <ip4_addr_isbroadcast_u32>
 8012b30:	4603      	mov	r3, r0
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d105      	bne.n	8012b42 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012b36:	4b47      	ldr	r3, [pc, #284]	; (8012c54 <ip4_input+0x27c>)
 8012b38:	691b      	ldr	r3, [r3, #16]
 8012b3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012b3e:	2be0      	cmp	r3, #224	; 0xe0
 8012b40:	d104      	bne.n	8012b4c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012b42:	6878      	ldr	r0, [r7, #4]
 8012b44:	f7f6 fd02 	bl	800954c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012b48:	2300      	movs	r3, #0
 8012b4a:	e07e      	b.n	8012c4a <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012b4c:	69bb      	ldr	r3, [r7, #24]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d104      	bne.n	8012b5c <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012b52:	6878      	ldr	r0, [r7, #4]
 8012b54:	f7f6 fcfa 	bl	800954c <pbuf_free>
    return ERR_OK;
 8012b58:	2300      	movs	r3, #0
 8012b5a:	e076      	b.n	8012c4a <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012b5c:	69fb      	ldr	r3, [r7, #28]
 8012b5e:	88db      	ldrh	r3, [r3, #6]
 8012b60:	b29b      	uxth	r3, r3
 8012b62:	461a      	mov	r2, r3
 8012b64:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012b68:	4013      	ands	r3, r2
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d00b      	beq.n	8012b86 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012b6e:	6878      	ldr	r0, [r7, #4]
 8012b70:	f000 fc92 	bl	8013498 <ip4_reass>
 8012b74:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d101      	bne.n	8012b80 <ip4_input+0x1a8>
      return ERR_OK;
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	e064      	b.n	8012c4a <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	685b      	ldr	r3, [r3, #4]
 8012b84:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012b86:	4a33      	ldr	r2, [pc, #204]	; (8012c54 <ip4_input+0x27c>)
 8012b88:	69bb      	ldr	r3, [r7, #24]
 8012b8a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012b8c:	4a31      	ldr	r2, [pc, #196]	; (8012c54 <ip4_input+0x27c>)
 8012b8e:	683b      	ldr	r3, [r7, #0]
 8012b90:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012b92:	4a30      	ldr	r2, [pc, #192]	; (8012c54 <ip4_input+0x27c>)
 8012b94:	69fb      	ldr	r3, [r7, #28]
 8012b96:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012b98:	69fb      	ldr	r3, [r7, #28]
 8012b9a:	781b      	ldrb	r3, [r3, #0]
 8012b9c:	f003 030f 	and.w	r3, r3, #15
 8012ba0:	b2db      	uxtb	r3, r3
 8012ba2:	009b      	lsls	r3, r3, #2
 8012ba4:	b2db      	uxtb	r3, r3
 8012ba6:	b29a      	uxth	r2, r3
 8012ba8:	4b2a      	ldr	r3, [pc, #168]	; (8012c54 <ip4_input+0x27c>)
 8012baa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012bac:	8a7b      	ldrh	r3, [r7, #18]
 8012bae:	4619      	mov	r1, r3
 8012bb0:	6878      	ldr	r0, [r7, #4]
 8012bb2:	f7f6 fc45 	bl	8009440 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012bb6:	69fb      	ldr	r3, [r7, #28]
 8012bb8:	7a5b      	ldrb	r3, [r3, #9]
 8012bba:	2b11      	cmp	r3, #17
 8012bbc:	d006      	beq.n	8012bcc <ip4_input+0x1f4>
 8012bbe:	2b11      	cmp	r3, #17
 8012bc0:	dc13      	bgt.n	8012bea <ip4_input+0x212>
 8012bc2:	2b01      	cmp	r3, #1
 8012bc4:	d00c      	beq.n	8012be0 <ip4_input+0x208>
 8012bc6:	2b06      	cmp	r3, #6
 8012bc8:	d005      	beq.n	8012bd6 <ip4_input+0x1fe>
 8012bca:	e00e      	b.n	8012bea <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012bcc:	6839      	ldr	r1, [r7, #0]
 8012bce:	6878      	ldr	r0, [r7, #4]
 8012bd0:	f7fc faea 	bl	800f1a8 <udp_input>
        break;
 8012bd4:	e026      	b.n	8012c24 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012bd6:	6839      	ldr	r1, [r7, #0]
 8012bd8:	6878      	ldr	r0, [r7, #4]
 8012bda:	f7f8 fafb 	bl	800b1d4 <tcp_input>
        break;
 8012bde:	e021      	b.n	8012c24 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012be0:	6839      	ldr	r1, [r7, #0]
 8012be2:	6878      	ldr	r0, [r7, #4]
 8012be4:	f7ff fcd0 	bl	8012588 <icmp_input>
        break;
 8012be8:	e01c      	b.n	8012c24 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012bea:	4b1a      	ldr	r3, [pc, #104]	; (8012c54 <ip4_input+0x27c>)
 8012bec:	695b      	ldr	r3, [r3, #20]
 8012bee:	69b9      	ldr	r1, [r7, #24]
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f000 f90b 	bl	8012e0c <ip4_addr_isbroadcast_u32>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d10f      	bne.n	8012c1c <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012bfc:	4b15      	ldr	r3, [pc, #84]	; (8012c54 <ip4_input+0x27c>)
 8012bfe:	695b      	ldr	r3, [r3, #20]
 8012c00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012c04:	2be0      	cmp	r3, #224	; 0xe0
 8012c06:	d009      	beq.n	8012c1c <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012c08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012c0c:	4619      	mov	r1, r3
 8012c0e:	6878      	ldr	r0, [r7, #4]
 8012c10:	f7f6 fc89 	bl	8009526 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012c14:	2102      	movs	r1, #2
 8012c16:	6878      	ldr	r0, [r7, #4]
 8012c18:	f7ff fdba 	bl	8012790 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012c1c:	6878      	ldr	r0, [r7, #4]
 8012c1e:	f7f6 fc95 	bl	800954c <pbuf_free>
        break;
 8012c22:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012c24:	4b0b      	ldr	r3, [pc, #44]	; (8012c54 <ip4_input+0x27c>)
 8012c26:	2200      	movs	r2, #0
 8012c28:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012c2a:	4b0a      	ldr	r3, [pc, #40]	; (8012c54 <ip4_input+0x27c>)
 8012c2c:	2200      	movs	r2, #0
 8012c2e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012c30:	4b08      	ldr	r3, [pc, #32]	; (8012c54 <ip4_input+0x27c>)
 8012c32:	2200      	movs	r2, #0
 8012c34:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012c36:	4b07      	ldr	r3, [pc, #28]	; (8012c54 <ip4_input+0x27c>)
 8012c38:	2200      	movs	r2, #0
 8012c3a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012c3c:	4b05      	ldr	r3, [pc, #20]	; (8012c54 <ip4_input+0x27c>)
 8012c3e:	2200      	movs	r2, #0
 8012c40:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012c42:	4b04      	ldr	r3, [pc, #16]	; (8012c54 <ip4_input+0x27c>)
 8012c44:	2200      	movs	r2, #0
 8012c46:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012c48:	2300      	movs	r3, #0
}
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	3720      	adds	r7, #32
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	bd80      	pop	{r7, pc}
 8012c52:	bf00      	nop
 8012c54:	20015470 	.word	0x20015470
 8012c58:	20018bd8 	.word	0x20018bd8

08012c5c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b08a      	sub	sp, #40	; 0x28
 8012c60:	af04      	add	r7, sp, #16
 8012c62:	60f8      	str	r0, [r7, #12]
 8012c64:	60b9      	str	r1, [r7, #8]
 8012c66:	607a      	str	r2, [r7, #4]
 8012c68:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012c6a:	68bb      	ldr	r3, [r7, #8]
 8012c6c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d009      	beq.n	8012c88 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012c74:	68bb      	ldr	r3, [r7, #8]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d003      	beq.n	8012c82 <ip4_output_if+0x26>
 8012c7a:	68bb      	ldr	r3, [r7, #8]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d102      	bne.n	8012c88 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c84:	3304      	adds	r3, #4
 8012c86:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012c88:	78fa      	ldrb	r2, [r7, #3]
 8012c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c8c:	9302      	str	r3, [sp, #8]
 8012c8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012c92:	9301      	str	r3, [sp, #4]
 8012c94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012c98:	9300      	str	r3, [sp, #0]
 8012c9a:	4613      	mov	r3, r2
 8012c9c:	687a      	ldr	r2, [r7, #4]
 8012c9e:	6979      	ldr	r1, [r7, #20]
 8012ca0:	68f8      	ldr	r0, [r7, #12]
 8012ca2:	f000 f805 	bl	8012cb0 <ip4_output_if_src>
 8012ca6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012ca8:	4618      	mov	r0, r3
 8012caa:	3718      	adds	r7, #24
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}

08012cb0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b088      	sub	sp, #32
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	60f8      	str	r0, [r7, #12]
 8012cb8:	60b9      	str	r1, [r7, #8]
 8012cba:	607a      	str	r2, [r7, #4]
 8012cbc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	7b9b      	ldrb	r3, [r3, #14]
 8012cc2:	2b01      	cmp	r3, #1
 8012cc4:	d006      	beq.n	8012cd4 <ip4_output_if_src+0x24>
 8012cc6:	4b4b      	ldr	r3, [pc, #300]	; (8012df4 <ip4_output_if_src+0x144>)
 8012cc8:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012ccc:	494a      	ldr	r1, [pc, #296]	; (8012df8 <ip4_output_if_src+0x148>)
 8012cce:	484b      	ldr	r0, [pc, #300]	; (8012dfc <ip4_output_if_src+0x14c>)
 8012cd0:	f001 fae0 	bl	8014294 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d060      	beq.n	8012d9c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012cda:	2314      	movs	r3, #20
 8012cdc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012cde:	2114      	movs	r1, #20
 8012ce0:	68f8      	ldr	r0, [r7, #12]
 8012ce2:	f7f6 fb9d 	bl	8009420 <pbuf_add_header>
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d002      	beq.n	8012cf2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012cec:	f06f 0301 	mvn.w	r3, #1
 8012cf0:	e07c      	b.n	8012dec <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	685b      	ldr	r3, [r3, #4]
 8012cf6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	895b      	ldrh	r3, [r3, #10]
 8012cfc:	2b13      	cmp	r3, #19
 8012cfe:	d806      	bhi.n	8012d0e <ip4_output_if_src+0x5e>
 8012d00:	4b3c      	ldr	r3, [pc, #240]	; (8012df4 <ip4_output_if_src+0x144>)
 8012d02:	f44f 7262 	mov.w	r2, #904	; 0x388
 8012d06:	493e      	ldr	r1, [pc, #248]	; (8012e00 <ip4_output_if_src+0x150>)
 8012d08:	483c      	ldr	r0, [pc, #240]	; (8012dfc <ip4_output_if_src+0x14c>)
 8012d0a:	f001 fac3 	bl	8014294 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012d0e:	69fb      	ldr	r3, [r7, #28]
 8012d10:	78fa      	ldrb	r2, [r7, #3]
 8012d12:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012d14:	69fb      	ldr	r3, [r7, #28]
 8012d16:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012d1a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	681a      	ldr	r2, [r3, #0]
 8012d20:	69fb      	ldr	r3, [r7, #28]
 8012d22:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012d24:	8b7b      	ldrh	r3, [r7, #26]
 8012d26:	089b      	lsrs	r3, r3, #2
 8012d28:	b29b      	uxth	r3, r3
 8012d2a:	b2db      	uxtb	r3, r3
 8012d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d30:	b2da      	uxtb	r2, r3
 8012d32:	69fb      	ldr	r3, [r7, #28]
 8012d34:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012d36:	69fb      	ldr	r3, [r7, #28]
 8012d38:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012d3c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	891b      	ldrh	r3, [r3, #8]
 8012d42:	4618      	mov	r0, r3
 8012d44:	f7f5 f804 	bl	8007d50 <lwip_htons>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	461a      	mov	r2, r3
 8012d4c:	69fb      	ldr	r3, [r7, #28]
 8012d4e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012d50:	69fb      	ldr	r3, [r7, #28]
 8012d52:	2200      	movs	r2, #0
 8012d54:	719a      	strb	r2, [r3, #6]
 8012d56:	2200      	movs	r2, #0
 8012d58:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012d5a:	4b2a      	ldr	r3, [pc, #168]	; (8012e04 <ip4_output_if_src+0x154>)
 8012d5c:	881b      	ldrh	r3, [r3, #0]
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f7f4 fff6 	bl	8007d50 <lwip_htons>
 8012d64:	4603      	mov	r3, r0
 8012d66:	461a      	mov	r2, r3
 8012d68:	69fb      	ldr	r3, [r7, #28]
 8012d6a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012d6c:	4b25      	ldr	r3, [pc, #148]	; (8012e04 <ip4_output_if_src+0x154>)
 8012d6e:	881b      	ldrh	r3, [r3, #0]
 8012d70:	3301      	adds	r3, #1
 8012d72:	b29a      	uxth	r2, r3
 8012d74:	4b23      	ldr	r3, [pc, #140]	; (8012e04 <ip4_output_if_src+0x154>)
 8012d76:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012d78:	68bb      	ldr	r3, [r7, #8]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d104      	bne.n	8012d88 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012d7e:	4b22      	ldr	r3, [pc, #136]	; (8012e08 <ip4_output_if_src+0x158>)
 8012d80:	681a      	ldr	r2, [r3, #0]
 8012d82:	69fb      	ldr	r3, [r7, #28]
 8012d84:	60da      	str	r2, [r3, #12]
 8012d86:	e003      	b.n	8012d90 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012d88:	68bb      	ldr	r3, [r7, #8]
 8012d8a:	681a      	ldr	r2, [r3, #0]
 8012d8c:	69fb      	ldr	r3, [r7, #28]
 8012d8e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012d90:	69fb      	ldr	r3, [r7, #28]
 8012d92:	2200      	movs	r2, #0
 8012d94:	729a      	strb	r2, [r3, #10]
 8012d96:	2200      	movs	r2, #0
 8012d98:	72da      	strb	r2, [r3, #11]
 8012d9a:	e00f      	b.n	8012dbc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	895b      	ldrh	r3, [r3, #10]
 8012da0:	2b13      	cmp	r3, #19
 8012da2:	d802      	bhi.n	8012daa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012da4:	f06f 0301 	mvn.w	r3, #1
 8012da8:	e020      	b.n	8012dec <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	685b      	ldr	r3, [r3, #4]
 8012dae:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012db0:	69fb      	ldr	r3, [r7, #28]
 8012db2:	691b      	ldr	r3, [r3, #16]
 8012db4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012db6:	f107 0314 	add.w	r3, r7, #20
 8012dba:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d00c      	beq.n	8012dde <ip4_output_if_src+0x12e>
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	891a      	ldrh	r2, [r3, #8]
 8012dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012dcc:	429a      	cmp	r2, r3
 8012dce:	d906      	bls.n	8012dde <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012dd0:	687a      	ldr	r2, [r7, #4]
 8012dd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012dd4:	68f8      	ldr	r0, [r7, #12]
 8012dd6:	f000 fd53 	bl	8013880 <ip4_frag>
 8012dda:	4603      	mov	r3, r0
 8012ddc:	e006      	b.n	8012dec <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012de0:	695b      	ldr	r3, [r3, #20]
 8012de2:	687a      	ldr	r2, [r7, #4]
 8012de4:	68f9      	ldr	r1, [r7, #12]
 8012de6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012de8:	4798      	blx	r3
 8012dea:	4603      	mov	r3, r0
}
 8012dec:	4618      	mov	r0, r3
 8012dee:	3720      	adds	r7, #32
 8012df0:	46bd      	mov	sp, r7
 8012df2:	bd80      	pop	{r7, pc}
 8012df4:	08017ca4 	.word	0x08017ca4
 8012df8:	08017cd8 	.word	0x08017cd8
 8012dfc:	08017ce4 	.word	0x08017ce4
 8012e00:	08017d0c 	.word	0x08017d0c
 8012e04:	20018d6a 	.word	0x20018d6a
 8012e08:	0801813c 	.word	0x0801813c

08012e0c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012e0c:	b480      	push	{r7}
 8012e0e:	b085      	sub	sp, #20
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
 8012e14:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e20:	d002      	beq.n	8012e28 <ip4_addr_isbroadcast_u32+0x1c>
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d101      	bne.n	8012e2c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012e28:	2301      	movs	r3, #1
 8012e2a:	e02a      	b.n	8012e82 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012e2c:	683b      	ldr	r3, [r7, #0]
 8012e2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012e32:	f003 0302 	and.w	r3, r3, #2
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d101      	bne.n	8012e3e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	e021      	b.n	8012e82 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012e3e:	683b      	ldr	r3, [r7, #0]
 8012e40:	3304      	adds	r3, #4
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	687a      	ldr	r2, [r7, #4]
 8012e46:	429a      	cmp	r2, r3
 8012e48:	d101      	bne.n	8012e4e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	e019      	b.n	8012e82 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012e4e:	68fa      	ldr	r2, [r7, #12]
 8012e50:	683b      	ldr	r3, [r7, #0]
 8012e52:	3304      	adds	r3, #4
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	405a      	eors	r2, r3
 8012e58:	683b      	ldr	r3, [r7, #0]
 8012e5a:	3308      	adds	r3, #8
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	4013      	ands	r3, r2
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d10d      	bne.n	8012e80 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012e64:	683b      	ldr	r3, [r7, #0]
 8012e66:	3308      	adds	r3, #8
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	43da      	mvns	r2, r3
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012e70:	683b      	ldr	r3, [r7, #0]
 8012e72:	3308      	adds	r3, #8
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012e78:	429a      	cmp	r2, r3
 8012e7a:	d101      	bne.n	8012e80 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012e7c:	2301      	movs	r3, #1
 8012e7e:	e000      	b.n	8012e82 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012e80:	2300      	movs	r3, #0
  }
}
 8012e82:	4618      	mov	r0, r3
 8012e84:	3714      	adds	r7, #20
 8012e86:	46bd      	mov	sp, r7
 8012e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e8c:	4770      	bx	lr
	...

08012e90 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b084      	sub	sp, #16
 8012e94:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012e96:	2300      	movs	r3, #0
 8012e98:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012e9a:	4b12      	ldr	r3, [pc, #72]	; (8012ee4 <ip_reass_tmr+0x54>)
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012ea0:	e018      	b.n	8012ed4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	7fdb      	ldrb	r3, [r3, #31]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d00b      	beq.n	8012ec2 <ip_reass_tmr+0x32>
      r->timer--;
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	7fdb      	ldrb	r3, [r3, #31]
 8012eae:	3b01      	subs	r3, #1
 8012eb0:	b2da      	uxtb	r2, r3
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	60fb      	str	r3, [r7, #12]
 8012ec0:	e008      	b.n	8012ed4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012ecc:	68b9      	ldr	r1, [r7, #8]
 8012ece:	6878      	ldr	r0, [r7, #4]
 8012ed0:	f000 f80a 	bl	8012ee8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d1e3      	bne.n	8012ea2 <ip_reass_tmr+0x12>
    }
  }
}
 8012eda:	bf00      	nop
 8012edc:	bf00      	nop
 8012ede:	3710      	adds	r7, #16
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	bd80      	pop	{r7, pc}
 8012ee4:	20018d6c 	.word	0x20018d6c

08012ee8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b088      	sub	sp, #32
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
 8012ef0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012ef6:	683a      	ldr	r2, [r7, #0]
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	429a      	cmp	r2, r3
 8012efc:	d105      	bne.n	8012f0a <ip_reass_free_complete_datagram+0x22>
 8012efe:	4b45      	ldr	r3, [pc, #276]	; (8013014 <ip_reass_free_complete_datagram+0x12c>)
 8012f00:	22ab      	movs	r2, #171	; 0xab
 8012f02:	4945      	ldr	r1, [pc, #276]	; (8013018 <ip_reass_free_complete_datagram+0x130>)
 8012f04:	4845      	ldr	r0, [pc, #276]	; (801301c <ip_reass_free_complete_datagram+0x134>)
 8012f06:	f001 f9c5 	bl	8014294 <iprintf>
  if (prev != NULL) {
 8012f0a:	683b      	ldr	r3, [r7, #0]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d00a      	beq.n	8012f26 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012f10:	683b      	ldr	r3, [r7, #0]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	687a      	ldr	r2, [r7, #4]
 8012f16:	429a      	cmp	r2, r3
 8012f18:	d005      	beq.n	8012f26 <ip_reass_free_complete_datagram+0x3e>
 8012f1a:	4b3e      	ldr	r3, [pc, #248]	; (8013014 <ip_reass_free_complete_datagram+0x12c>)
 8012f1c:	22ad      	movs	r2, #173	; 0xad
 8012f1e:	4940      	ldr	r1, [pc, #256]	; (8013020 <ip_reass_free_complete_datagram+0x138>)
 8012f20:	483e      	ldr	r0, [pc, #248]	; (801301c <ip_reass_free_complete_datagram+0x134>)
 8012f22:	f001 f9b7 	bl	8014294 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	685b      	ldr	r3, [r3, #4]
 8012f2a:	685b      	ldr	r3, [r3, #4]
 8012f2c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012f2e:	697b      	ldr	r3, [r7, #20]
 8012f30:	889b      	ldrh	r3, [r3, #4]
 8012f32:	b29b      	uxth	r3, r3
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d12a      	bne.n	8012f8e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	685b      	ldr	r3, [r3, #4]
 8012f3c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012f3e:	697b      	ldr	r3, [r7, #20]
 8012f40:	681a      	ldr	r2, [r3, #0]
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012f46:	69bb      	ldr	r3, [r7, #24]
 8012f48:	6858      	ldr	r0, [r3, #4]
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	3308      	adds	r3, #8
 8012f4e:	2214      	movs	r2, #20
 8012f50:	4619      	mov	r1, r3
 8012f52:	f001 f8f4 	bl	801413e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012f56:	2101      	movs	r1, #1
 8012f58:	69b8      	ldr	r0, [r7, #24]
 8012f5a:	f7ff fc29 	bl	80127b0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012f5e:	69b8      	ldr	r0, [r7, #24]
 8012f60:	f7f6 fb82 	bl	8009668 <pbuf_clen>
 8012f64:	4603      	mov	r3, r0
 8012f66:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012f68:	8bfa      	ldrh	r2, [r7, #30]
 8012f6a:	8a7b      	ldrh	r3, [r7, #18]
 8012f6c:	4413      	add	r3, r2
 8012f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012f72:	db05      	blt.n	8012f80 <ip_reass_free_complete_datagram+0x98>
 8012f74:	4b27      	ldr	r3, [pc, #156]	; (8013014 <ip_reass_free_complete_datagram+0x12c>)
 8012f76:	22bc      	movs	r2, #188	; 0xbc
 8012f78:	492a      	ldr	r1, [pc, #168]	; (8013024 <ip_reass_free_complete_datagram+0x13c>)
 8012f7a:	4828      	ldr	r0, [pc, #160]	; (801301c <ip_reass_free_complete_datagram+0x134>)
 8012f7c:	f001 f98a 	bl	8014294 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012f80:	8bfa      	ldrh	r2, [r7, #30]
 8012f82:	8a7b      	ldrh	r3, [r7, #18]
 8012f84:	4413      	add	r3, r2
 8012f86:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012f88:	69b8      	ldr	r0, [r7, #24]
 8012f8a:	f7f6 fadf 	bl	800954c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	685b      	ldr	r3, [r3, #4]
 8012f92:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012f94:	e01f      	b.n	8012fd6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012f96:	69bb      	ldr	r3, [r7, #24]
 8012f98:	685b      	ldr	r3, [r3, #4]
 8012f9a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012f9c:	69bb      	ldr	r3, [r7, #24]
 8012f9e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012fa0:	697b      	ldr	r3, [r7, #20]
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012fa6:	68f8      	ldr	r0, [r7, #12]
 8012fa8:	f7f6 fb5e 	bl	8009668 <pbuf_clen>
 8012fac:	4603      	mov	r3, r0
 8012fae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012fb0:	8bfa      	ldrh	r2, [r7, #30]
 8012fb2:	8a7b      	ldrh	r3, [r7, #18]
 8012fb4:	4413      	add	r3, r2
 8012fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012fba:	db05      	blt.n	8012fc8 <ip_reass_free_complete_datagram+0xe0>
 8012fbc:	4b15      	ldr	r3, [pc, #84]	; (8013014 <ip_reass_free_complete_datagram+0x12c>)
 8012fbe:	22cc      	movs	r2, #204	; 0xcc
 8012fc0:	4918      	ldr	r1, [pc, #96]	; (8013024 <ip_reass_free_complete_datagram+0x13c>)
 8012fc2:	4816      	ldr	r0, [pc, #88]	; (801301c <ip_reass_free_complete_datagram+0x134>)
 8012fc4:	f001 f966 	bl	8014294 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012fc8:	8bfa      	ldrh	r2, [r7, #30]
 8012fca:	8a7b      	ldrh	r3, [r7, #18]
 8012fcc:	4413      	add	r3, r2
 8012fce:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012fd0:	68f8      	ldr	r0, [r7, #12]
 8012fd2:	f7f6 fabb 	bl	800954c <pbuf_free>
  while (p != NULL) {
 8012fd6:	69bb      	ldr	r3, [r7, #24]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d1dc      	bne.n	8012f96 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012fdc:	6839      	ldr	r1, [r7, #0]
 8012fde:	6878      	ldr	r0, [r7, #4]
 8012fe0:	f000 f8c2 	bl	8013168 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012fe4:	4b10      	ldr	r3, [pc, #64]	; (8013028 <ip_reass_free_complete_datagram+0x140>)
 8012fe6:	881b      	ldrh	r3, [r3, #0]
 8012fe8:	8bfa      	ldrh	r2, [r7, #30]
 8012fea:	429a      	cmp	r2, r3
 8012fec:	d905      	bls.n	8012ffa <ip_reass_free_complete_datagram+0x112>
 8012fee:	4b09      	ldr	r3, [pc, #36]	; (8013014 <ip_reass_free_complete_datagram+0x12c>)
 8012ff0:	22d2      	movs	r2, #210	; 0xd2
 8012ff2:	490e      	ldr	r1, [pc, #56]	; (801302c <ip_reass_free_complete_datagram+0x144>)
 8012ff4:	4809      	ldr	r0, [pc, #36]	; (801301c <ip_reass_free_complete_datagram+0x134>)
 8012ff6:	f001 f94d 	bl	8014294 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012ffa:	4b0b      	ldr	r3, [pc, #44]	; (8013028 <ip_reass_free_complete_datagram+0x140>)
 8012ffc:	881a      	ldrh	r2, [r3, #0]
 8012ffe:	8bfb      	ldrh	r3, [r7, #30]
 8013000:	1ad3      	subs	r3, r2, r3
 8013002:	b29a      	uxth	r2, r3
 8013004:	4b08      	ldr	r3, [pc, #32]	; (8013028 <ip_reass_free_complete_datagram+0x140>)
 8013006:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013008:	8bfb      	ldrh	r3, [r7, #30]
}
 801300a:	4618      	mov	r0, r3
 801300c:	3720      	adds	r7, #32
 801300e:	46bd      	mov	sp, r7
 8013010:	bd80      	pop	{r7, pc}
 8013012:	bf00      	nop
 8013014:	08017d3c 	.word	0x08017d3c
 8013018:	08017d78 	.word	0x08017d78
 801301c:	08017d84 	.word	0x08017d84
 8013020:	08017dac 	.word	0x08017dac
 8013024:	08017dc0 	.word	0x08017dc0
 8013028:	20018d70 	.word	0x20018d70
 801302c:	08017de0 	.word	0x08017de0

08013030 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b08a      	sub	sp, #40	; 0x28
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
 8013038:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801303a:	2300      	movs	r3, #0
 801303c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801303e:	2300      	movs	r3, #0
 8013040:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013042:	2300      	movs	r3, #0
 8013044:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013046:	2300      	movs	r3, #0
 8013048:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801304a:	2300      	movs	r3, #0
 801304c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801304e:	4b28      	ldr	r3, [pc, #160]	; (80130f0 <ip_reass_remove_oldest_datagram+0xc0>)
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013054:	e030      	b.n	80130b8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013058:	695a      	ldr	r2, [r3, #20]
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	68db      	ldr	r3, [r3, #12]
 801305e:	429a      	cmp	r2, r3
 8013060:	d10c      	bne.n	801307c <ip_reass_remove_oldest_datagram+0x4c>
 8013062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013064:	699a      	ldr	r2, [r3, #24]
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	691b      	ldr	r3, [r3, #16]
 801306a:	429a      	cmp	r2, r3
 801306c:	d106      	bne.n	801307c <ip_reass_remove_oldest_datagram+0x4c>
 801306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013070:	899a      	ldrh	r2, [r3, #12]
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	889b      	ldrh	r3, [r3, #4]
 8013076:	b29b      	uxth	r3, r3
 8013078:	429a      	cmp	r2, r3
 801307a:	d014      	beq.n	80130a6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801307c:	693b      	ldr	r3, [r7, #16]
 801307e:	3301      	adds	r3, #1
 8013080:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013082:	6a3b      	ldr	r3, [r7, #32]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d104      	bne.n	8013092 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801308a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801308c:	69fb      	ldr	r3, [r7, #28]
 801308e:	61bb      	str	r3, [r7, #24]
 8013090:	e009      	b.n	80130a6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013094:	7fda      	ldrb	r2, [r3, #31]
 8013096:	6a3b      	ldr	r3, [r7, #32]
 8013098:	7fdb      	ldrb	r3, [r3, #31]
 801309a:	429a      	cmp	r2, r3
 801309c:	d803      	bhi.n	80130a6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80130a2:	69fb      	ldr	r3, [r7, #28]
 80130a4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80130a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d001      	beq.n	80130b2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80130ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80130b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80130b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d1cb      	bne.n	8013056 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80130be:	6a3b      	ldr	r3, [r7, #32]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d008      	beq.n	80130d6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80130c4:	69b9      	ldr	r1, [r7, #24]
 80130c6:	6a38      	ldr	r0, [r7, #32]
 80130c8:	f7ff ff0e 	bl	8012ee8 <ip_reass_free_complete_datagram>
 80130cc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80130ce:	697a      	ldr	r2, [r7, #20]
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	4413      	add	r3, r2
 80130d4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80130d6:	697a      	ldr	r2, [r7, #20]
 80130d8:	683b      	ldr	r3, [r7, #0]
 80130da:	429a      	cmp	r2, r3
 80130dc:	da02      	bge.n	80130e4 <ip_reass_remove_oldest_datagram+0xb4>
 80130de:	693b      	ldr	r3, [r7, #16]
 80130e0:	2b01      	cmp	r3, #1
 80130e2:	dcac      	bgt.n	801303e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80130e4:	697b      	ldr	r3, [r7, #20]
}
 80130e6:	4618      	mov	r0, r3
 80130e8:	3728      	adds	r7, #40	; 0x28
 80130ea:	46bd      	mov	sp, r7
 80130ec:	bd80      	pop	{r7, pc}
 80130ee:	bf00      	nop
 80130f0:	20018d6c 	.word	0x20018d6c

080130f4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b084      	sub	sp, #16
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]
 80130fc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80130fe:	2004      	movs	r0, #4
 8013100:	f7f5 fafe 	bl	8008700 <memp_malloc>
 8013104:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d110      	bne.n	801312e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801310c:	6839      	ldr	r1, [r7, #0]
 801310e:	6878      	ldr	r0, [r7, #4]
 8013110:	f7ff ff8e 	bl	8013030 <ip_reass_remove_oldest_datagram>
 8013114:	4602      	mov	r2, r0
 8013116:	683b      	ldr	r3, [r7, #0]
 8013118:	4293      	cmp	r3, r2
 801311a:	dc03      	bgt.n	8013124 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801311c:	2004      	movs	r0, #4
 801311e:	f7f5 faef 	bl	8008700 <memp_malloc>
 8013122:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d101      	bne.n	801312e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801312a:	2300      	movs	r3, #0
 801312c:	e016      	b.n	801315c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801312e:	2220      	movs	r2, #32
 8013130:	2100      	movs	r1, #0
 8013132:	68f8      	ldr	r0, [r7, #12]
 8013134:	f001 f811 	bl	801415a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	220f      	movs	r2, #15
 801313c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801313e:	4b09      	ldr	r3, [pc, #36]	; (8013164 <ip_reass_enqueue_new_datagram+0x70>)
 8013140:	681a      	ldr	r2, [r3, #0]
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013146:	4a07      	ldr	r2, [pc, #28]	; (8013164 <ip_reass_enqueue_new_datagram+0x70>)
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	3308      	adds	r3, #8
 8013150:	2214      	movs	r2, #20
 8013152:	6879      	ldr	r1, [r7, #4]
 8013154:	4618      	mov	r0, r3
 8013156:	f000 fff2 	bl	801413e <memcpy>
  return ipr;
 801315a:	68fb      	ldr	r3, [r7, #12]
}
 801315c:	4618      	mov	r0, r3
 801315e:	3710      	adds	r7, #16
 8013160:	46bd      	mov	sp, r7
 8013162:	bd80      	pop	{r7, pc}
 8013164:	20018d6c 	.word	0x20018d6c

08013168 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b082      	sub	sp, #8
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
 8013170:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013172:	4b10      	ldr	r3, [pc, #64]	; (80131b4 <ip_reass_dequeue_datagram+0x4c>)
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	687a      	ldr	r2, [r7, #4]
 8013178:	429a      	cmp	r2, r3
 801317a:	d104      	bne.n	8013186 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	4a0c      	ldr	r2, [pc, #48]	; (80131b4 <ip_reass_dequeue_datagram+0x4c>)
 8013182:	6013      	str	r3, [r2, #0]
 8013184:	e00d      	b.n	80131a2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013186:	683b      	ldr	r3, [r7, #0]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d106      	bne.n	801319a <ip_reass_dequeue_datagram+0x32>
 801318c:	4b0a      	ldr	r3, [pc, #40]	; (80131b8 <ip_reass_dequeue_datagram+0x50>)
 801318e:	f240 1245 	movw	r2, #325	; 0x145
 8013192:	490a      	ldr	r1, [pc, #40]	; (80131bc <ip_reass_dequeue_datagram+0x54>)
 8013194:	480a      	ldr	r0, [pc, #40]	; (80131c0 <ip_reass_dequeue_datagram+0x58>)
 8013196:	f001 f87d 	bl	8014294 <iprintf>
    prev->next = ipr->next;
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	681a      	ldr	r2, [r3, #0]
 801319e:	683b      	ldr	r3, [r7, #0]
 80131a0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80131a2:	6879      	ldr	r1, [r7, #4]
 80131a4:	2004      	movs	r0, #4
 80131a6:	f7f5 fb21 	bl	80087ec <memp_free>
}
 80131aa:	bf00      	nop
 80131ac:	3708      	adds	r7, #8
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}
 80131b2:	bf00      	nop
 80131b4:	20018d6c 	.word	0x20018d6c
 80131b8:	08017d3c 	.word	0x08017d3c
 80131bc:	08017e04 	.word	0x08017e04
 80131c0:	08017d84 	.word	0x08017d84

080131c4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b08c      	sub	sp, #48	; 0x30
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	60f8      	str	r0, [r7, #12]
 80131cc:	60b9      	str	r1, [r7, #8]
 80131ce:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80131d0:	2300      	movs	r3, #0
 80131d2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80131d4:	2301      	movs	r3, #1
 80131d6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80131d8:	68bb      	ldr	r3, [r7, #8]
 80131da:	685b      	ldr	r3, [r3, #4]
 80131dc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80131de:	69fb      	ldr	r3, [r7, #28]
 80131e0:	885b      	ldrh	r3, [r3, #2]
 80131e2:	b29b      	uxth	r3, r3
 80131e4:	4618      	mov	r0, r3
 80131e6:	f7f4 fdb3 	bl	8007d50 <lwip_htons>
 80131ea:	4603      	mov	r3, r0
 80131ec:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80131ee:	69fb      	ldr	r3, [r7, #28]
 80131f0:	781b      	ldrb	r3, [r3, #0]
 80131f2:	f003 030f 	and.w	r3, r3, #15
 80131f6:	b2db      	uxtb	r3, r3
 80131f8:	009b      	lsls	r3, r3, #2
 80131fa:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80131fc:	7e7b      	ldrb	r3, [r7, #25]
 80131fe:	b29b      	uxth	r3, r3
 8013200:	8b7a      	ldrh	r2, [r7, #26]
 8013202:	429a      	cmp	r2, r3
 8013204:	d202      	bcs.n	801320c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013206:	f04f 33ff 	mov.w	r3, #4294967295
 801320a:	e135      	b.n	8013478 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801320c:	7e7b      	ldrb	r3, [r7, #25]
 801320e:	b29b      	uxth	r3, r3
 8013210:	8b7a      	ldrh	r2, [r7, #26]
 8013212:	1ad3      	subs	r3, r2, r3
 8013214:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013216:	69fb      	ldr	r3, [r7, #28]
 8013218:	88db      	ldrh	r3, [r3, #6]
 801321a:	b29b      	uxth	r3, r3
 801321c:	4618      	mov	r0, r3
 801321e:	f7f4 fd97 	bl	8007d50 <lwip_htons>
 8013222:	4603      	mov	r3, r0
 8013224:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013228:	b29b      	uxth	r3, r3
 801322a:	00db      	lsls	r3, r3, #3
 801322c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801322e:	68bb      	ldr	r3, [r7, #8]
 8013230:	685b      	ldr	r3, [r3, #4]
 8013232:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013236:	2200      	movs	r2, #0
 8013238:	701a      	strb	r2, [r3, #0]
 801323a:	2200      	movs	r2, #0
 801323c:	705a      	strb	r2, [r3, #1]
 801323e:	2200      	movs	r2, #0
 8013240:	709a      	strb	r2, [r3, #2]
 8013242:	2200      	movs	r2, #0
 8013244:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013248:	8afa      	ldrh	r2, [r7, #22]
 801324a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801324c:	8afa      	ldrh	r2, [r7, #22]
 801324e:	8b7b      	ldrh	r3, [r7, #26]
 8013250:	4413      	add	r3, r2
 8013252:	b29a      	uxth	r2, r3
 8013254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013256:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801325a:	88db      	ldrh	r3, [r3, #6]
 801325c:	b29b      	uxth	r3, r3
 801325e:	8afa      	ldrh	r2, [r7, #22]
 8013260:	429a      	cmp	r2, r3
 8013262:	d902      	bls.n	801326a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013264:	f04f 33ff 	mov.w	r3, #4294967295
 8013268:	e106      	b.n	8013478 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	685b      	ldr	r3, [r3, #4]
 801326e:	627b      	str	r3, [r7, #36]	; 0x24
 8013270:	e068      	b.n	8013344 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013274:	685b      	ldr	r3, [r3, #4]
 8013276:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801327a:	889b      	ldrh	r3, [r3, #4]
 801327c:	b29a      	uxth	r2, r3
 801327e:	693b      	ldr	r3, [r7, #16]
 8013280:	889b      	ldrh	r3, [r3, #4]
 8013282:	b29b      	uxth	r3, r3
 8013284:	429a      	cmp	r2, r3
 8013286:	d235      	bcs.n	80132f4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801328a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801328c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801328e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013290:	2b00      	cmp	r3, #0
 8013292:	d020      	beq.n	80132d6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013296:	889b      	ldrh	r3, [r3, #4]
 8013298:	b29a      	uxth	r2, r3
 801329a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801329c:	88db      	ldrh	r3, [r3, #6]
 801329e:	b29b      	uxth	r3, r3
 80132a0:	429a      	cmp	r2, r3
 80132a2:	d307      	bcc.n	80132b4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80132a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132a6:	88db      	ldrh	r3, [r3, #6]
 80132a8:	b29a      	uxth	r2, r3
 80132aa:	693b      	ldr	r3, [r7, #16]
 80132ac:	889b      	ldrh	r3, [r3, #4]
 80132ae:	b29b      	uxth	r3, r3
 80132b0:	429a      	cmp	r2, r3
 80132b2:	d902      	bls.n	80132ba <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80132b4:	f04f 33ff 	mov.w	r3, #4294967295
 80132b8:	e0de      	b.n	8013478 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80132ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132bc:	68ba      	ldr	r2, [r7, #8]
 80132be:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80132c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132c2:	88db      	ldrh	r3, [r3, #6]
 80132c4:	b29a      	uxth	r2, r3
 80132c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132c8:	889b      	ldrh	r3, [r3, #4]
 80132ca:	b29b      	uxth	r3, r3
 80132cc:	429a      	cmp	r2, r3
 80132ce:	d03d      	beq.n	801334c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80132d0:	2300      	movs	r3, #0
 80132d2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80132d4:	e03a      	b.n	801334c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80132d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132d8:	88db      	ldrh	r3, [r3, #6]
 80132da:	b29a      	uxth	r2, r3
 80132dc:	693b      	ldr	r3, [r7, #16]
 80132de:	889b      	ldrh	r3, [r3, #4]
 80132e0:	b29b      	uxth	r3, r3
 80132e2:	429a      	cmp	r2, r3
 80132e4:	d902      	bls.n	80132ec <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80132e6:	f04f 33ff 	mov.w	r3, #4294967295
 80132ea:	e0c5      	b.n	8013478 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	68ba      	ldr	r2, [r7, #8]
 80132f0:	605a      	str	r2, [r3, #4]
      break;
 80132f2:	e02b      	b.n	801334c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80132f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132f6:	889b      	ldrh	r3, [r3, #4]
 80132f8:	b29a      	uxth	r2, r3
 80132fa:	693b      	ldr	r3, [r7, #16]
 80132fc:	889b      	ldrh	r3, [r3, #4]
 80132fe:	b29b      	uxth	r3, r3
 8013300:	429a      	cmp	r2, r3
 8013302:	d102      	bne.n	801330a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013304:	f04f 33ff 	mov.w	r3, #4294967295
 8013308:	e0b6      	b.n	8013478 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801330a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801330c:	889b      	ldrh	r3, [r3, #4]
 801330e:	b29a      	uxth	r2, r3
 8013310:	693b      	ldr	r3, [r7, #16]
 8013312:	88db      	ldrh	r3, [r3, #6]
 8013314:	b29b      	uxth	r3, r3
 8013316:	429a      	cmp	r2, r3
 8013318:	d202      	bcs.n	8013320 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801331a:	f04f 33ff 	mov.w	r3, #4294967295
 801331e:	e0ab      	b.n	8013478 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013322:	2b00      	cmp	r3, #0
 8013324:	d009      	beq.n	801333a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013328:	88db      	ldrh	r3, [r3, #6]
 801332a:	b29a      	uxth	r2, r3
 801332c:	693b      	ldr	r3, [r7, #16]
 801332e:	889b      	ldrh	r3, [r3, #4]
 8013330:	b29b      	uxth	r3, r3
 8013332:	429a      	cmp	r2, r3
 8013334:	d001      	beq.n	801333a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013336:	2300      	movs	r3, #0
 8013338:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801333a:	693b      	ldr	r3, [r7, #16]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013340:	693b      	ldr	r3, [r7, #16]
 8013342:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013346:	2b00      	cmp	r3, #0
 8013348:	d193      	bne.n	8013272 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801334a:	e000      	b.n	801334e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801334c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013350:	2b00      	cmp	r3, #0
 8013352:	d12d      	bne.n	80133b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013356:	2b00      	cmp	r3, #0
 8013358:	d01c      	beq.n	8013394 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801335a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801335c:	88db      	ldrh	r3, [r3, #6]
 801335e:	b29a      	uxth	r2, r3
 8013360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013362:	889b      	ldrh	r3, [r3, #4]
 8013364:	b29b      	uxth	r3, r3
 8013366:	429a      	cmp	r2, r3
 8013368:	d906      	bls.n	8013378 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801336a:	4b45      	ldr	r3, [pc, #276]	; (8013480 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801336c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013370:	4944      	ldr	r1, [pc, #272]	; (8013484 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013372:	4845      	ldr	r0, [pc, #276]	; (8013488 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013374:	f000 ff8e 	bl	8014294 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801337a:	68ba      	ldr	r2, [r7, #8]
 801337c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013380:	88db      	ldrh	r3, [r3, #6]
 8013382:	b29a      	uxth	r2, r3
 8013384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013386:	889b      	ldrh	r3, [r3, #4]
 8013388:	b29b      	uxth	r3, r3
 801338a:	429a      	cmp	r2, r3
 801338c:	d010      	beq.n	80133b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801338e:	2300      	movs	r3, #0
 8013390:	623b      	str	r3, [r7, #32]
 8013392:	e00d      	b.n	80133b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	685b      	ldr	r3, [r3, #4]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d006      	beq.n	80133aa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801339c:	4b38      	ldr	r3, [pc, #224]	; (8013480 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801339e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80133a2:	493a      	ldr	r1, [pc, #232]	; (801348c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80133a4:	4838      	ldr	r0, [pc, #224]	; (8013488 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80133a6:	f000 ff75 	bl	8014294 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	68ba      	ldr	r2, [r7, #8]
 80133ae:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d105      	bne.n	80133c2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	7f9b      	ldrb	r3, [r3, #30]
 80133ba:	f003 0301 	and.w	r3, r3, #1
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d059      	beq.n	8013476 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80133c2:	6a3b      	ldr	r3, [r7, #32]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d04f      	beq.n	8013468 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	685b      	ldr	r3, [r3, #4]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d006      	beq.n	80133de <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	685b      	ldr	r3, [r3, #4]
 80133d4:	685b      	ldr	r3, [r3, #4]
 80133d6:	889b      	ldrh	r3, [r3, #4]
 80133d8:	b29b      	uxth	r3, r3
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d002      	beq.n	80133e4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80133de:	2300      	movs	r3, #0
 80133e0:	623b      	str	r3, [r7, #32]
 80133e2:	e041      	b.n	8013468 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80133e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133e6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80133e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80133ee:	e012      	b.n	8013416 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80133f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133f2:	685b      	ldr	r3, [r3, #4]
 80133f4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80133f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133f8:	88db      	ldrh	r3, [r3, #6]
 80133fa:	b29a      	uxth	r2, r3
 80133fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133fe:	889b      	ldrh	r3, [r3, #4]
 8013400:	b29b      	uxth	r3, r3
 8013402:	429a      	cmp	r2, r3
 8013404:	d002      	beq.n	801340c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013406:	2300      	movs	r3, #0
 8013408:	623b      	str	r3, [r7, #32]
            break;
 801340a:	e007      	b.n	801341c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801340c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801340e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013418:	2b00      	cmp	r3, #0
 801341a:	d1e9      	bne.n	80133f0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801341c:	6a3b      	ldr	r3, [r7, #32]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d022      	beq.n	8013468 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	685b      	ldr	r3, [r3, #4]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d106      	bne.n	8013438 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801342a:	4b15      	ldr	r3, [pc, #84]	; (8013480 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801342c:	f240 12df 	movw	r2, #479	; 0x1df
 8013430:	4917      	ldr	r1, [pc, #92]	; (8013490 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013432:	4815      	ldr	r0, [pc, #84]	; (8013488 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013434:	f000 ff2e 	bl	8014294 <iprintf>
          LWIP_ASSERT("sanity check",
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	685b      	ldr	r3, [r3, #4]
 801343c:	685b      	ldr	r3, [r3, #4]
 801343e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013440:	429a      	cmp	r2, r3
 8013442:	d106      	bne.n	8013452 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013444:	4b0e      	ldr	r3, [pc, #56]	; (8013480 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013446:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801344a:	4911      	ldr	r1, [pc, #68]	; (8013490 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801344c:	480e      	ldr	r0, [pc, #56]	; (8013488 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801344e:	f000 ff21 	bl	8014294 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d006      	beq.n	8013468 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801345a:	4b09      	ldr	r3, [pc, #36]	; (8013480 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801345c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8013460:	490c      	ldr	r1, [pc, #48]	; (8013494 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013462:	4809      	ldr	r0, [pc, #36]	; (8013488 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013464:	f000 ff16 	bl	8014294 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013468:	6a3b      	ldr	r3, [r7, #32]
 801346a:	2b00      	cmp	r3, #0
 801346c:	bf14      	ite	ne
 801346e:	2301      	movne	r3, #1
 8013470:	2300      	moveq	r3, #0
 8013472:	b2db      	uxtb	r3, r3
 8013474:	e000      	b.n	8013478 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013476:	2300      	movs	r3, #0
}
 8013478:	4618      	mov	r0, r3
 801347a:	3730      	adds	r7, #48	; 0x30
 801347c:	46bd      	mov	sp, r7
 801347e:	bd80      	pop	{r7, pc}
 8013480:	08017d3c 	.word	0x08017d3c
 8013484:	08017e20 	.word	0x08017e20
 8013488:	08017d84 	.word	0x08017d84
 801348c:	08017e40 	.word	0x08017e40
 8013490:	08017e78 	.word	0x08017e78
 8013494:	08017e88 	.word	0x08017e88

08013498 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b08e      	sub	sp, #56	; 0x38
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	685b      	ldr	r3, [r3, #4]
 80134a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80134a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134a8:	781b      	ldrb	r3, [r3, #0]
 80134aa:	f003 030f 	and.w	r3, r3, #15
 80134ae:	b2db      	uxtb	r3, r3
 80134b0:	009b      	lsls	r3, r3, #2
 80134b2:	b2db      	uxtb	r3, r3
 80134b4:	2b14      	cmp	r3, #20
 80134b6:	f040 8171 	bne.w	801379c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80134ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134bc:	88db      	ldrh	r3, [r3, #6]
 80134be:	b29b      	uxth	r3, r3
 80134c0:	4618      	mov	r0, r3
 80134c2:	f7f4 fc45 	bl	8007d50 <lwip_htons>
 80134c6:	4603      	mov	r3, r0
 80134c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80134cc:	b29b      	uxth	r3, r3
 80134ce:	00db      	lsls	r3, r3, #3
 80134d0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80134d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134d4:	885b      	ldrh	r3, [r3, #2]
 80134d6:	b29b      	uxth	r3, r3
 80134d8:	4618      	mov	r0, r3
 80134da:	f7f4 fc39 	bl	8007d50 <lwip_htons>
 80134de:	4603      	mov	r3, r0
 80134e0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80134e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134e4:	781b      	ldrb	r3, [r3, #0]
 80134e6:	f003 030f 	and.w	r3, r3, #15
 80134ea:	b2db      	uxtb	r3, r3
 80134ec:	009b      	lsls	r3, r3, #2
 80134ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80134f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80134f6:	b29b      	uxth	r3, r3
 80134f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80134fa:	429a      	cmp	r2, r3
 80134fc:	f0c0 8150 	bcc.w	80137a0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013500:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013504:	b29b      	uxth	r3, r3
 8013506:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013508:	1ad3      	subs	r3, r2, r3
 801350a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801350c:	6878      	ldr	r0, [r7, #4]
 801350e:	f7f6 f8ab 	bl	8009668 <pbuf_clen>
 8013512:	4603      	mov	r3, r0
 8013514:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013516:	4b8c      	ldr	r3, [pc, #560]	; (8013748 <ip4_reass+0x2b0>)
 8013518:	881b      	ldrh	r3, [r3, #0]
 801351a:	461a      	mov	r2, r3
 801351c:	8c3b      	ldrh	r3, [r7, #32]
 801351e:	4413      	add	r3, r2
 8013520:	2b0a      	cmp	r3, #10
 8013522:	dd10      	ble.n	8013546 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013524:	8c3b      	ldrh	r3, [r7, #32]
 8013526:	4619      	mov	r1, r3
 8013528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801352a:	f7ff fd81 	bl	8013030 <ip_reass_remove_oldest_datagram>
 801352e:	4603      	mov	r3, r0
 8013530:	2b00      	cmp	r3, #0
 8013532:	f000 8137 	beq.w	80137a4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013536:	4b84      	ldr	r3, [pc, #528]	; (8013748 <ip4_reass+0x2b0>)
 8013538:	881b      	ldrh	r3, [r3, #0]
 801353a:	461a      	mov	r2, r3
 801353c:	8c3b      	ldrh	r3, [r7, #32]
 801353e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013540:	2b0a      	cmp	r3, #10
 8013542:	f300 812f 	bgt.w	80137a4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013546:	4b81      	ldr	r3, [pc, #516]	; (801374c <ip4_reass+0x2b4>)
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	633b      	str	r3, [r7, #48]	; 0x30
 801354c:	e015      	b.n	801357a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801354e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013550:	695a      	ldr	r2, [r3, #20]
 8013552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013554:	68db      	ldr	r3, [r3, #12]
 8013556:	429a      	cmp	r2, r3
 8013558:	d10c      	bne.n	8013574 <ip4_reass+0xdc>
 801355a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801355c:	699a      	ldr	r2, [r3, #24]
 801355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013560:	691b      	ldr	r3, [r3, #16]
 8013562:	429a      	cmp	r2, r3
 8013564:	d106      	bne.n	8013574 <ip4_reass+0xdc>
 8013566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013568:	899a      	ldrh	r2, [r3, #12]
 801356a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801356c:	889b      	ldrh	r3, [r3, #4]
 801356e:	b29b      	uxth	r3, r3
 8013570:	429a      	cmp	r2, r3
 8013572:	d006      	beq.n	8013582 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	633b      	str	r3, [r7, #48]	; 0x30
 801357a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801357c:	2b00      	cmp	r3, #0
 801357e:	d1e6      	bne.n	801354e <ip4_reass+0xb6>
 8013580:	e000      	b.n	8013584 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013582:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013586:	2b00      	cmp	r3, #0
 8013588:	d109      	bne.n	801359e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801358a:	8c3b      	ldrh	r3, [r7, #32]
 801358c:	4619      	mov	r1, r3
 801358e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013590:	f7ff fdb0 	bl	80130f4 <ip_reass_enqueue_new_datagram>
 8013594:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013598:	2b00      	cmp	r3, #0
 801359a:	d11c      	bne.n	80135d6 <ip4_reass+0x13e>
      goto nullreturn;
 801359c:	e105      	b.n	80137aa <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801359e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135a0:	88db      	ldrh	r3, [r3, #6]
 80135a2:	b29b      	uxth	r3, r3
 80135a4:	4618      	mov	r0, r3
 80135a6:	f7f4 fbd3 	bl	8007d50 <lwip_htons>
 80135aa:	4603      	mov	r3, r0
 80135ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d110      	bne.n	80135d6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80135b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135b6:	89db      	ldrh	r3, [r3, #14]
 80135b8:	4618      	mov	r0, r3
 80135ba:	f7f4 fbc9 	bl	8007d50 <lwip_htons>
 80135be:	4603      	mov	r3, r0
 80135c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d006      	beq.n	80135d6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80135c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ca:	3308      	adds	r3, #8
 80135cc:	2214      	movs	r2, #20
 80135ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80135d0:	4618      	mov	r0, r3
 80135d2:	f000 fdb4 	bl	801413e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80135d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135d8:	88db      	ldrh	r3, [r3, #6]
 80135da:	b29b      	uxth	r3, r3
 80135dc:	f003 0320 	and.w	r3, r3, #32
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	bf0c      	ite	eq
 80135e4:	2301      	moveq	r3, #1
 80135e6:	2300      	movne	r3, #0
 80135e8:	b2db      	uxtb	r3, r3
 80135ea:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80135ec:	69fb      	ldr	r3, [r7, #28]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d00e      	beq.n	8013610 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80135f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80135f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80135f6:	4413      	add	r3, r2
 80135f8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80135fa:	8b7a      	ldrh	r2, [r7, #26]
 80135fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80135fe:	429a      	cmp	r2, r3
 8013600:	f0c0 80a0 	bcc.w	8013744 <ip4_reass+0x2ac>
 8013604:	8b7b      	ldrh	r3, [r7, #26]
 8013606:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801360a:	4293      	cmp	r3, r2
 801360c:	f200 809a 	bhi.w	8013744 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013610:	69fa      	ldr	r2, [r7, #28]
 8013612:	6879      	ldr	r1, [r7, #4]
 8013614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013616:	f7ff fdd5 	bl	80131c4 <ip_reass_chain_frag_into_datagram_and_validate>
 801361a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801361c:	697b      	ldr	r3, [r7, #20]
 801361e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013622:	f000 809b 	beq.w	801375c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013626:	4b48      	ldr	r3, [pc, #288]	; (8013748 <ip4_reass+0x2b0>)
 8013628:	881a      	ldrh	r2, [r3, #0]
 801362a:	8c3b      	ldrh	r3, [r7, #32]
 801362c:	4413      	add	r3, r2
 801362e:	b29a      	uxth	r2, r3
 8013630:	4b45      	ldr	r3, [pc, #276]	; (8013748 <ip4_reass+0x2b0>)
 8013632:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013634:	69fb      	ldr	r3, [r7, #28]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d00d      	beq.n	8013656 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801363a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801363c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801363e:	4413      	add	r3, r2
 8013640:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013644:	8a7a      	ldrh	r2, [r7, #18]
 8013646:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801364a:	7f9b      	ldrb	r3, [r3, #30]
 801364c:	f043 0301 	orr.w	r3, r3, #1
 8013650:	b2da      	uxtb	r2, r3
 8013652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013654:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013656:	697b      	ldr	r3, [r7, #20]
 8013658:	2b01      	cmp	r3, #1
 801365a:	d171      	bne.n	8013740 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801365c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801365e:	8b9b      	ldrh	r3, [r3, #28]
 8013660:	3314      	adds	r3, #20
 8013662:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013666:	685b      	ldr	r3, [r3, #4]
 8013668:	685b      	ldr	r3, [r3, #4]
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013670:	685b      	ldr	r3, [r3, #4]
 8013672:	685b      	ldr	r3, [r3, #4]
 8013674:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013678:	3308      	adds	r3, #8
 801367a:	2214      	movs	r2, #20
 801367c:	4619      	mov	r1, r3
 801367e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013680:	f000 fd5d 	bl	801413e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013684:	8a3b      	ldrh	r3, [r7, #16]
 8013686:	4618      	mov	r0, r3
 8013688:	f7f4 fb62 	bl	8007d50 <lwip_htons>
 801368c:	4603      	mov	r3, r0
 801368e:	461a      	mov	r2, r3
 8013690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013692:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013696:	2200      	movs	r2, #0
 8013698:	719a      	strb	r2, [r3, #6]
 801369a:	2200      	movs	r2, #0
 801369c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801369e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136a0:	2200      	movs	r2, #0
 80136a2:	729a      	strb	r2, [r3, #10]
 80136a4:	2200      	movs	r2, #0
 80136a6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80136a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136aa:	685b      	ldr	r3, [r3, #4]
 80136ac:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80136ae:	e00d      	b.n	80136cc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80136b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136b2:	685b      	ldr	r3, [r3, #4]
 80136b4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80136b6:	2114      	movs	r1, #20
 80136b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80136ba:	f7f5 fec1 	bl	8009440 <pbuf_remove_header>
      pbuf_cat(p, r);
 80136be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80136c0:	6878      	ldr	r0, [r7, #4]
 80136c2:	f7f6 f811 	bl	80096e8 <pbuf_cat>
      r = iprh->next_pbuf;
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80136cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d1ee      	bne.n	80136b0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80136d2:	4b1e      	ldr	r3, [pc, #120]	; (801374c <ip4_reass+0x2b4>)
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136d8:	429a      	cmp	r2, r3
 80136da:	d102      	bne.n	80136e2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80136dc:	2300      	movs	r3, #0
 80136de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80136e0:	e010      	b.n	8013704 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80136e2:	4b1a      	ldr	r3, [pc, #104]	; (801374c <ip4_reass+0x2b4>)
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80136e8:	e007      	b.n	80136fa <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80136ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136f0:	429a      	cmp	r2, r3
 80136f2:	d006      	beq.n	8013702 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80136f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80136fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d1f4      	bne.n	80136ea <ip4_reass+0x252>
 8013700:	e000      	b.n	8013704 <ip4_reass+0x26c>
          break;
 8013702:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013704:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013706:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013708:	f7ff fd2e 	bl	8013168 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801370c:	6878      	ldr	r0, [r7, #4]
 801370e:	f7f5 ffab 	bl	8009668 <pbuf_clen>
 8013712:	4603      	mov	r3, r0
 8013714:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013716:	4b0c      	ldr	r3, [pc, #48]	; (8013748 <ip4_reass+0x2b0>)
 8013718:	881b      	ldrh	r3, [r3, #0]
 801371a:	8c3a      	ldrh	r2, [r7, #32]
 801371c:	429a      	cmp	r2, r3
 801371e:	d906      	bls.n	801372e <ip4_reass+0x296>
 8013720:	4b0b      	ldr	r3, [pc, #44]	; (8013750 <ip4_reass+0x2b8>)
 8013722:	f240 229b 	movw	r2, #667	; 0x29b
 8013726:	490b      	ldr	r1, [pc, #44]	; (8013754 <ip4_reass+0x2bc>)
 8013728:	480b      	ldr	r0, [pc, #44]	; (8013758 <ip4_reass+0x2c0>)
 801372a:	f000 fdb3 	bl	8014294 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801372e:	4b06      	ldr	r3, [pc, #24]	; (8013748 <ip4_reass+0x2b0>)
 8013730:	881a      	ldrh	r2, [r3, #0]
 8013732:	8c3b      	ldrh	r3, [r7, #32]
 8013734:	1ad3      	subs	r3, r2, r3
 8013736:	b29a      	uxth	r2, r3
 8013738:	4b03      	ldr	r3, [pc, #12]	; (8013748 <ip4_reass+0x2b0>)
 801373a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	e038      	b.n	80137b2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013740:	2300      	movs	r3, #0
 8013742:	e036      	b.n	80137b2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8013744:	bf00      	nop
 8013746:	e00a      	b.n	801375e <ip4_reass+0x2c6>
 8013748:	20018d70 	.word	0x20018d70
 801374c:	20018d6c 	.word	0x20018d6c
 8013750:	08017d3c 	.word	0x08017d3c
 8013754:	08017eac 	.word	0x08017eac
 8013758:	08017d84 	.word	0x08017d84
    goto nullreturn_ipr;
 801375c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801375e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013760:	2b00      	cmp	r3, #0
 8013762:	d106      	bne.n	8013772 <ip4_reass+0x2da>
 8013764:	4b15      	ldr	r3, [pc, #84]	; (80137bc <ip4_reass+0x324>)
 8013766:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801376a:	4915      	ldr	r1, [pc, #84]	; (80137c0 <ip4_reass+0x328>)
 801376c:	4815      	ldr	r0, [pc, #84]	; (80137c4 <ip4_reass+0x32c>)
 801376e:	f000 fd91 	bl	8014294 <iprintf>
  if (ipr->p == NULL) {
 8013772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013774:	685b      	ldr	r3, [r3, #4]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d116      	bne.n	80137a8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801377a:	4b13      	ldr	r3, [pc, #76]	; (80137c8 <ip4_reass+0x330>)
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013780:	429a      	cmp	r2, r3
 8013782:	d006      	beq.n	8013792 <ip4_reass+0x2fa>
 8013784:	4b0d      	ldr	r3, [pc, #52]	; (80137bc <ip4_reass+0x324>)
 8013786:	f240 22ab 	movw	r2, #683	; 0x2ab
 801378a:	4910      	ldr	r1, [pc, #64]	; (80137cc <ip4_reass+0x334>)
 801378c:	480d      	ldr	r0, [pc, #52]	; (80137c4 <ip4_reass+0x32c>)
 801378e:	f000 fd81 	bl	8014294 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013792:	2100      	movs	r1, #0
 8013794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013796:	f7ff fce7 	bl	8013168 <ip_reass_dequeue_datagram>
 801379a:	e006      	b.n	80137aa <ip4_reass+0x312>
    goto nullreturn;
 801379c:	bf00      	nop
 801379e:	e004      	b.n	80137aa <ip4_reass+0x312>
    goto nullreturn;
 80137a0:	bf00      	nop
 80137a2:	e002      	b.n	80137aa <ip4_reass+0x312>
      goto nullreturn;
 80137a4:	bf00      	nop
 80137a6:	e000      	b.n	80137aa <ip4_reass+0x312>
  }

nullreturn:
 80137a8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80137aa:	6878      	ldr	r0, [r7, #4]
 80137ac:	f7f5 fece 	bl	800954c <pbuf_free>
  return NULL;
 80137b0:	2300      	movs	r3, #0
}
 80137b2:	4618      	mov	r0, r3
 80137b4:	3738      	adds	r7, #56	; 0x38
 80137b6:	46bd      	mov	sp, r7
 80137b8:	bd80      	pop	{r7, pc}
 80137ba:	bf00      	nop
 80137bc:	08017d3c 	.word	0x08017d3c
 80137c0:	08017ec8 	.word	0x08017ec8
 80137c4:	08017d84 	.word	0x08017d84
 80137c8:	20018d6c 	.word	0x20018d6c
 80137cc:	08017ed4 	.word	0x08017ed4

080137d0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80137d4:	2005      	movs	r0, #5
 80137d6:	f7f4 ff93 	bl	8008700 <memp_malloc>
 80137da:	4603      	mov	r3, r0
}
 80137dc:	4618      	mov	r0, r3
 80137de:	bd80      	pop	{r7, pc}

080137e0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b082      	sub	sp, #8
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d106      	bne.n	80137fc <ip_frag_free_pbuf_custom_ref+0x1c>
 80137ee:	4b07      	ldr	r3, [pc, #28]	; (801380c <ip_frag_free_pbuf_custom_ref+0x2c>)
 80137f0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80137f4:	4906      	ldr	r1, [pc, #24]	; (8013810 <ip_frag_free_pbuf_custom_ref+0x30>)
 80137f6:	4807      	ldr	r0, [pc, #28]	; (8013814 <ip_frag_free_pbuf_custom_ref+0x34>)
 80137f8:	f000 fd4c 	bl	8014294 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80137fc:	6879      	ldr	r1, [r7, #4]
 80137fe:	2005      	movs	r0, #5
 8013800:	f7f4 fff4 	bl	80087ec <memp_free>
}
 8013804:	bf00      	nop
 8013806:	3708      	adds	r7, #8
 8013808:	46bd      	mov	sp, r7
 801380a:	bd80      	pop	{r7, pc}
 801380c:	08017d3c 	.word	0x08017d3c
 8013810:	08017ef4 	.word	0x08017ef4
 8013814:	08017d84 	.word	0x08017d84

08013818 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013818:	b580      	push	{r7, lr}
 801381a:	b084      	sub	sp, #16
 801381c:	af00      	add	r7, sp, #0
 801381e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d106      	bne.n	8013838 <ipfrag_free_pbuf_custom+0x20>
 801382a:	4b11      	ldr	r3, [pc, #68]	; (8013870 <ipfrag_free_pbuf_custom+0x58>)
 801382c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8013830:	4910      	ldr	r1, [pc, #64]	; (8013874 <ipfrag_free_pbuf_custom+0x5c>)
 8013832:	4811      	ldr	r0, [pc, #68]	; (8013878 <ipfrag_free_pbuf_custom+0x60>)
 8013834:	f000 fd2e 	bl	8014294 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013838:	68fa      	ldr	r2, [r7, #12]
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	429a      	cmp	r2, r3
 801383e:	d006      	beq.n	801384e <ipfrag_free_pbuf_custom+0x36>
 8013840:	4b0b      	ldr	r3, [pc, #44]	; (8013870 <ipfrag_free_pbuf_custom+0x58>)
 8013842:	f240 22cf 	movw	r2, #719	; 0x2cf
 8013846:	490d      	ldr	r1, [pc, #52]	; (801387c <ipfrag_free_pbuf_custom+0x64>)
 8013848:	480b      	ldr	r0, [pc, #44]	; (8013878 <ipfrag_free_pbuf_custom+0x60>)
 801384a:	f000 fd23 	bl	8014294 <iprintf>
  if (pcr->original != NULL) {
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	695b      	ldr	r3, [r3, #20]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d004      	beq.n	8013860 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	695b      	ldr	r3, [r3, #20]
 801385a:	4618      	mov	r0, r3
 801385c:	f7f5 fe76 	bl	800954c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013860:	68f8      	ldr	r0, [r7, #12]
 8013862:	f7ff ffbd 	bl	80137e0 <ip_frag_free_pbuf_custom_ref>
}
 8013866:	bf00      	nop
 8013868:	3710      	adds	r7, #16
 801386a:	46bd      	mov	sp, r7
 801386c:	bd80      	pop	{r7, pc}
 801386e:	bf00      	nop
 8013870:	08017d3c 	.word	0x08017d3c
 8013874:	08017f00 	.word	0x08017f00
 8013878:	08017d84 	.word	0x08017d84
 801387c:	08017f0c 	.word	0x08017f0c

08013880 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013880:	b580      	push	{r7, lr}
 8013882:	b094      	sub	sp, #80	; 0x50
 8013884:	af02      	add	r7, sp, #8
 8013886:	60f8      	str	r0, [r7, #12]
 8013888:	60b9      	str	r1, [r7, #8]
 801388a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801388c:	2300      	movs	r3, #0
 801388e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013892:	68bb      	ldr	r3, [r7, #8]
 8013894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013896:	3b14      	subs	r3, #20
 8013898:	2b00      	cmp	r3, #0
 801389a:	da00      	bge.n	801389e <ip4_frag+0x1e>
 801389c:	3307      	adds	r3, #7
 801389e:	10db      	asrs	r3, r3, #3
 80138a0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80138a2:	2314      	movs	r3, #20
 80138a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	685b      	ldr	r3, [r3, #4]
 80138aa:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80138ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138ae:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80138b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138b2:	781b      	ldrb	r3, [r3, #0]
 80138b4:	f003 030f 	and.w	r3, r3, #15
 80138b8:	b2db      	uxtb	r3, r3
 80138ba:	009b      	lsls	r3, r3, #2
 80138bc:	b2db      	uxtb	r3, r3
 80138be:	2b14      	cmp	r3, #20
 80138c0:	d002      	beq.n	80138c8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80138c2:	f06f 0305 	mvn.w	r3, #5
 80138c6:	e110      	b.n	8013aea <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	895b      	ldrh	r3, [r3, #10]
 80138cc:	2b13      	cmp	r3, #19
 80138ce:	d809      	bhi.n	80138e4 <ip4_frag+0x64>
 80138d0:	4b88      	ldr	r3, [pc, #544]	; (8013af4 <ip4_frag+0x274>)
 80138d2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80138d6:	4988      	ldr	r1, [pc, #544]	; (8013af8 <ip4_frag+0x278>)
 80138d8:	4888      	ldr	r0, [pc, #544]	; (8013afc <ip4_frag+0x27c>)
 80138da:	f000 fcdb 	bl	8014294 <iprintf>
 80138de:	f06f 0305 	mvn.w	r3, #5
 80138e2:	e102      	b.n	8013aea <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80138e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138e6:	88db      	ldrh	r3, [r3, #6]
 80138e8:	b29b      	uxth	r3, r3
 80138ea:	4618      	mov	r0, r3
 80138ec:	f7f4 fa30 	bl	8007d50 <lwip_htons>
 80138f0:	4603      	mov	r3, r0
 80138f2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80138f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80138f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80138fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80138fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013900:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013904:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	891b      	ldrh	r3, [r3, #8]
 801390a:	3b14      	subs	r3, #20
 801390c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8013910:	e0e1      	b.n	8013ad6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013912:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013914:	00db      	lsls	r3, r3, #3
 8013916:	b29b      	uxth	r3, r3
 8013918:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801391c:	4293      	cmp	r3, r2
 801391e:	bf28      	it	cs
 8013920:	4613      	movcs	r3, r2
 8013922:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013924:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013928:	2114      	movs	r1, #20
 801392a:	200e      	movs	r0, #14
 801392c:	f7f5 fb2a 	bl	8008f84 <pbuf_alloc>
 8013930:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8013932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013934:	2b00      	cmp	r3, #0
 8013936:	f000 80d5 	beq.w	8013ae4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801393c:	895b      	ldrh	r3, [r3, #10]
 801393e:	2b13      	cmp	r3, #19
 8013940:	d806      	bhi.n	8013950 <ip4_frag+0xd0>
 8013942:	4b6c      	ldr	r3, [pc, #432]	; (8013af4 <ip4_frag+0x274>)
 8013944:	f44f 7249 	mov.w	r2, #804	; 0x324
 8013948:	496d      	ldr	r1, [pc, #436]	; (8013b00 <ip4_frag+0x280>)
 801394a:	486c      	ldr	r0, [pc, #432]	; (8013afc <ip4_frag+0x27c>)
 801394c:	f000 fca2 	bl	8014294 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013952:	685b      	ldr	r3, [r3, #4]
 8013954:	2214      	movs	r2, #20
 8013956:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013958:	4618      	mov	r0, r3
 801395a:	f000 fbf0 	bl	801413e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013960:	685b      	ldr	r3, [r3, #4]
 8013962:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8013964:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013966:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801396a:	e064      	b.n	8013a36 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	895a      	ldrh	r2, [r3, #10]
 8013970:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013972:	1ad3      	subs	r3, r2, r3
 8013974:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	895b      	ldrh	r3, [r3, #10]
 801397a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801397c:	429a      	cmp	r2, r3
 801397e:	d906      	bls.n	801398e <ip4_frag+0x10e>
 8013980:	4b5c      	ldr	r3, [pc, #368]	; (8013af4 <ip4_frag+0x274>)
 8013982:	f240 322d 	movw	r2, #813	; 0x32d
 8013986:	495f      	ldr	r1, [pc, #380]	; (8013b04 <ip4_frag+0x284>)
 8013988:	485c      	ldr	r0, [pc, #368]	; (8013afc <ip4_frag+0x27c>)
 801398a:	f000 fc83 	bl	8014294 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801398e:	8bfa      	ldrh	r2, [r7, #30]
 8013990:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013994:	4293      	cmp	r3, r2
 8013996:	bf28      	it	cs
 8013998:	4613      	movcs	r3, r2
 801399a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801399e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d105      	bne.n	80139b2 <ip4_frag+0x132>
        poff = 0;
 80139a6:	2300      	movs	r3, #0
 80139a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	60fb      	str	r3, [r7, #12]
        continue;
 80139b0:	e041      	b.n	8013a36 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80139b2:	f7ff ff0d 	bl	80137d0 <ip_frag_alloc_pbuf_custom_ref>
 80139b6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80139b8:	69bb      	ldr	r3, [r7, #24]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d103      	bne.n	80139c6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80139be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80139c0:	f7f5 fdc4 	bl	800954c <pbuf_free>
        goto memerr;
 80139c4:	e08f      	b.n	8013ae6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80139c6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80139cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80139ce:	4413      	add	r3, r2
 80139d0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80139d4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80139d8:	9201      	str	r2, [sp, #4]
 80139da:	9300      	str	r3, [sp, #0]
 80139dc:	4603      	mov	r3, r0
 80139de:	2241      	movs	r2, #65	; 0x41
 80139e0:	2000      	movs	r0, #0
 80139e2:	f7f5 fbf9 	bl	80091d8 <pbuf_alloced_custom>
 80139e6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80139e8:	697b      	ldr	r3, [r7, #20]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d106      	bne.n	80139fc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80139ee:	69b8      	ldr	r0, [r7, #24]
 80139f0:	f7ff fef6 	bl	80137e0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80139f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80139f6:	f7f5 fda9 	bl	800954c <pbuf_free>
        goto memerr;
 80139fa:	e074      	b.n	8013ae6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80139fc:	68f8      	ldr	r0, [r7, #12]
 80139fe:	f7f5 fe4b 	bl	8009698 <pbuf_ref>
      pcr->original = p;
 8013a02:	69bb      	ldr	r3, [r7, #24]
 8013a04:	68fa      	ldr	r2, [r7, #12]
 8013a06:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013a08:	69bb      	ldr	r3, [r7, #24]
 8013a0a:	4a3f      	ldr	r2, [pc, #252]	; (8013b08 <ip4_frag+0x288>)
 8013a0c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013a0e:	6979      	ldr	r1, [r7, #20]
 8013a10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a12:	f7f5 fe69 	bl	80096e8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013a16:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013a1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013a1e:	1ad3      	subs	r3, r2, r3
 8013a20:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013a24:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d004      	beq.n	8013a36 <ip4_frag+0x1b6>
        poff = 0;
 8013a2c:	2300      	movs	r3, #0
 8013a2e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013a36:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d196      	bne.n	801396c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013a3e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013a40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013a44:	4413      	add	r3, r2
 8013a46:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013a48:	68bb      	ldr	r3, [r7, #8]
 8013a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013a4c:	f1a3 0213 	sub.w	r2, r3, #19
 8013a50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013a54:	429a      	cmp	r2, r3
 8013a56:	bfcc      	ite	gt
 8013a58:	2301      	movgt	r3, #1
 8013a5a:	2300      	movle	r3, #0
 8013a5c:	b2db      	uxtb	r3, r3
 8013a5e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013a60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013a64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013a68:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8013a6a:	6a3b      	ldr	r3, [r7, #32]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d002      	beq.n	8013a76 <ip4_frag+0x1f6>
 8013a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d003      	beq.n	8013a7e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013a76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013a78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013a7c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013a7e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013a80:	4618      	mov	r0, r3
 8013a82:	f7f4 f965 	bl	8007d50 <lwip_htons>
 8013a86:	4603      	mov	r3, r0
 8013a88:	461a      	mov	r2, r3
 8013a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a8c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013a8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013a90:	3314      	adds	r3, #20
 8013a92:	b29b      	uxth	r3, r3
 8013a94:	4618      	mov	r0, r3
 8013a96:	f7f4 f95b 	bl	8007d50 <lwip_htons>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	461a      	mov	r2, r3
 8013a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aa0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	729a      	strb	r2, [r3, #10]
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013aac:	68bb      	ldr	r3, [r7, #8]
 8013aae:	695b      	ldr	r3, [r3, #20]
 8013ab0:	687a      	ldr	r2, [r7, #4]
 8013ab2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013ab4:	68b8      	ldr	r0, [r7, #8]
 8013ab6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013ab8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013aba:	f7f5 fd47 	bl	800954c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013abe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013ac2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013ac4:	1ad3      	subs	r3, r2, r3
 8013ac6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8013aca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013ace:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013ad0:	4413      	add	r3, r2
 8013ad2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8013ad6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	f47f af19 	bne.w	8013912 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	e002      	b.n	8013aea <ip4_frag+0x26a>
      goto memerr;
 8013ae4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013ae6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013aea:	4618      	mov	r0, r3
 8013aec:	3748      	adds	r7, #72	; 0x48
 8013aee:	46bd      	mov	sp, r7
 8013af0:	bd80      	pop	{r7, pc}
 8013af2:	bf00      	nop
 8013af4:	08017d3c 	.word	0x08017d3c
 8013af8:	08017f18 	.word	0x08017f18
 8013afc:	08017d84 	.word	0x08017d84
 8013b00:	08017f34 	.word	0x08017f34
 8013b04:	08017f54 	.word	0x08017f54
 8013b08:	08013819 	.word	0x08013819

08013b0c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b086      	sub	sp, #24
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]
 8013b14:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013b16:	230e      	movs	r3, #14
 8013b18:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	895b      	ldrh	r3, [r3, #10]
 8013b1e:	2b0e      	cmp	r3, #14
 8013b20:	d96e      	bls.n	8013c00 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	7bdb      	ldrb	r3, [r3, #15]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d106      	bne.n	8013b38 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013b2a:	683b      	ldr	r3, [r7, #0]
 8013b2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013b30:	3301      	adds	r3, #1
 8013b32:	b2da      	uxtb	r2, r3
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	685b      	ldr	r3, [r3, #4]
 8013b3c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013b3e:	693b      	ldr	r3, [r7, #16]
 8013b40:	7b1a      	ldrb	r2, [r3, #12]
 8013b42:	7b5b      	ldrb	r3, [r3, #13]
 8013b44:	021b      	lsls	r3, r3, #8
 8013b46:	4313      	orrs	r3, r2
 8013b48:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013b4a:	693b      	ldr	r3, [r7, #16]
 8013b4c:	781b      	ldrb	r3, [r3, #0]
 8013b4e:	f003 0301 	and.w	r3, r3, #1
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d023      	beq.n	8013b9e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013b56:	693b      	ldr	r3, [r7, #16]
 8013b58:	781b      	ldrb	r3, [r3, #0]
 8013b5a:	2b01      	cmp	r3, #1
 8013b5c:	d10f      	bne.n	8013b7e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013b5e:	693b      	ldr	r3, [r7, #16]
 8013b60:	785b      	ldrb	r3, [r3, #1]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d11b      	bne.n	8013b9e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013b66:	693b      	ldr	r3, [r7, #16]
 8013b68:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013b6a:	2b5e      	cmp	r3, #94	; 0x5e
 8013b6c:	d117      	bne.n	8013b9e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	7b5b      	ldrb	r3, [r3, #13]
 8013b72:	f043 0310 	orr.w	r3, r3, #16
 8013b76:	b2da      	uxtb	r2, r3
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	735a      	strb	r2, [r3, #13]
 8013b7c:	e00f      	b.n	8013b9e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013b7e:	693b      	ldr	r3, [r7, #16]
 8013b80:	2206      	movs	r2, #6
 8013b82:	4928      	ldr	r1, [pc, #160]	; (8013c24 <ethernet_input+0x118>)
 8013b84:	4618      	mov	r0, r3
 8013b86:	f000 faca 	bl	801411e <memcmp>
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d106      	bne.n	8013b9e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	7b5b      	ldrb	r3, [r3, #13]
 8013b94:	f043 0308 	orr.w	r3, r3, #8
 8013b98:	b2da      	uxtb	r2, r3
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013b9e:	89fb      	ldrh	r3, [r7, #14]
 8013ba0:	2b08      	cmp	r3, #8
 8013ba2:	d003      	beq.n	8013bac <ethernet_input+0xa0>
 8013ba4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013ba8:	d014      	beq.n	8013bd4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013baa:	e032      	b.n	8013c12 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013bac:	683b      	ldr	r3, [r7, #0]
 8013bae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013bb2:	f003 0308 	and.w	r3, r3, #8
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d024      	beq.n	8013c04 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013bba:	8afb      	ldrh	r3, [r7, #22]
 8013bbc:	4619      	mov	r1, r3
 8013bbe:	6878      	ldr	r0, [r7, #4]
 8013bc0:	f7f5 fc3e 	bl	8009440 <pbuf_remove_header>
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d11e      	bne.n	8013c08 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013bca:	6839      	ldr	r1, [r7, #0]
 8013bcc:	6878      	ldr	r0, [r7, #4]
 8013bce:	f7fe ff03 	bl	80129d8 <ip4_input>
      break;
 8013bd2:	e013      	b.n	8013bfc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013bd4:	683b      	ldr	r3, [r7, #0]
 8013bd6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013bda:	f003 0308 	and.w	r3, r3, #8
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d014      	beq.n	8013c0c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013be2:	8afb      	ldrh	r3, [r7, #22]
 8013be4:	4619      	mov	r1, r3
 8013be6:	6878      	ldr	r0, [r7, #4]
 8013be8:	f7f5 fc2a 	bl	8009440 <pbuf_remove_header>
 8013bec:	4603      	mov	r3, r0
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d10e      	bne.n	8013c10 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013bf2:	6839      	ldr	r1, [r7, #0]
 8013bf4:	6878      	ldr	r0, [r7, #4]
 8013bf6:	f7fe f89f 	bl	8011d38 <etharp_input>
      break;
 8013bfa:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	e00c      	b.n	8013c1a <ethernet_input+0x10e>
    goto free_and_return;
 8013c00:	bf00      	nop
 8013c02:	e006      	b.n	8013c12 <ethernet_input+0x106>
        goto free_and_return;
 8013c04:	bf00      	nop
 8013c06:	e004      	b.n	8013c12 <ethernet_input+0x106>
        goto free_and_return;
 8013c08:	bf00      	nop
 8013c0a:	e002      	b.n	8013c12 <ethernet_input+0x106>
        goto free_and_return;
 8013c0c:	bf00      	nop
 8013c0e:	e000      	b.n	8013c12 <ethernet_input+0x106>
        goto free_and_return;
 8013c10:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013c12:	6878      	ldr	r0, [r7, #4]
 8013c14:	f7f5 fc9a 	bl	800954c <pbuf_free>
  return ERR_OK;
 8013c18:	2300      	movs	r3, #0
}
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	3718      	adds	r7, #24
 8013c1e:	46bd      	mov	sp, r7
 8013c20:	bd80      	pop	{r7, pc}
 8013c22:	bf00      	nop
 8013c24:	08018144 	.word	0x08018144

08013c28 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b086      	sub	sp, #24
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	60f8      	str	r0, [r7, #12]
 8013c30:	60b9      	str	r1, [r7, #8]
 8013c32:	607a      	str	r2, [r7, #4]
 8013c34:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013c36:	8c3b      	ldrh	r3, [r7, #32]
 8013c38:	4618      	mov	r0, r3
 8013c3a:	f7f4 f889 	bl	8007d50 <lwip_htons>
 8013c3e:	4603      	mov	r3, r0
 8013c40:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013c42:	210e      	movs	r1, #14
 8013c44:	68b8      	ldr	r0, [r7, #8]
 8013c46:	f7f5 fbeb 	bl	8009420 <pbuf_add_header>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d125      	bne.n	8013c9c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013c50:	68bb      	ldr	r3, [r7, #8]
 8013c52:	685b      	ldr	r3, [r3, #4]
 8013c54:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013c56:	693b      	ldr	r3, [r7, #16]
 8013c58:	8afa      	ldrh	r2, [r7, #22]
 8013c5a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013c5c:	693b      	ldr	r3, [r7, #16]
 8013c5e:	2206      	movs	r2, #6
 8013c60:	6839      	ldr	r1, [r7, #0]
 8013c62:	4618      	mov	r0, r3
 8013c64:	f000 fa6b 	bl	801413e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013c68:	693b      	ldr	r3, [r7, #16]
 8013c6a:	3306      	adds	r3, #6
 8013c6c:	2206      	movs	r2, #6
 8013c6e:	6879      	ldr	r1, [r7, #4]
 8013c70:	4618      	mov	r0, r3
 8013c72:	f000 fa64 	bl	801413e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013c7c:	2b06      	cmp	r3, #6
 8013c7e:	d006      	beq.n	8013c8e <ethernet_output+0x66>
 8013c80:	4b0a      	ldr	r3, [pc, #40]	; (8013cac <ethernet_output+0x84>)
 8013c82:	f44f 7299 	mov.w	r2, #306	; 0x132
 8013c86:	490a      	ldr	r1, [pc, #40]	; (8013cb0 <ethernet_output+0x88>)
 8013c88:	480a      	ldr	r0, [pc, #40]	; (8013cb4 <ethernet_output+0x8c>)
 8013c8a:	f000 fb03 	bl	8014294 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	699b      	ldr	r3, [r3, #24]
 8013c92:	68b9      	ldr	r1, [r7, #8]
 8013c94:	68f8      	ldr	r0, [r7, #12]
 8013c96:	4798      	blx	r3
 8013c98:	4603      	mov	r3, r0
 8013c9a:	e002      	b.n	8013ca2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013c9c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013c9e:	f06f 0301 	mvn.w	r3, #1
}
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	3718      	adds	r7, #24
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	bd80      	pop	{r7, pc}
 8013caa:	bf00      	nop
 8013cac:	08017f64 	.word	0x08017f64
 8013cb0:	08017f9c 	.word	0x08017f9c
 8013cb4:	08017fd0 	.word	0x08017fd0

08013cb8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8013cb8:	b580      	push	{r7, lr}
 8013cba:	b086      	sub	sp, #24
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
 8013cc0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8013cc2:	683b      	ldr	r3, [r7, #0]
 8013cc4:	60bb      	str	r3, [r7, #8]
 8013cc6:	2304      	movs	r3, #4
 8013cc8:	60fb      	str	r3, [r7, #12]
 8013cca:	2300      	movs	r3, #0
 8013ccc:	613b      	str	r3, [r7, #16]
 8013cce:	2300      	movs	r3, #0
 8013cd0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8013cd2:	f107 0308 	add.w	r3, r7, #8
 8013cd6:	2100      	movs	r1, #0
 8013cd8:	4618      	mov	r0, r3
 8013cda:	f7f1 f957 	bl	8004f8c <osMessageCreate>
 8013cde:	4602      	mov	r2, r0
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d102      	bne.n	8013cf2 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8013cec:	f04f 33ff 	mov.w	r3, #4294967295
 8013cf0:	e000      	b.n	8013cf4 <sys_mbox_new+0x3c>

  return ERR_OK;
 8013cf2:	2300      	movs	r3, #0
}
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	3718      	adds	r7, #24
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd80      	pop	{r7, pc}

08013cfc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b084      	sub	sp, #16
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	6078      	str	r0, [r7, #4]
 8013d04:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	6839      	ldr	r1, [r7, #0]
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	4618      	mov	r0, r3
 8013d10:	f7f1 f964 	bl	8004fdc <osMessagePut>
 8013d14:	4603      	mov	r3, r0
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d102      	bne.n	8013d20 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	73fb      	strb	r3, [r7, #15]
 8013d1e:	e001      	b.n	8013d24 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8013d20:	23ff      	movs	r3, #255	; 0xff
 8013d22:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8013d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013d28:	4618      	mov	r0, r3
 8013d2a:	3710      	adds	r7, #16
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	bd80      	pop	{r7, pc}

08013d30 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b08c      	sub	sp, #48	; 0x30
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	61f8      	str	r0, [r7, #28]
 8013d38:	61b9      	str	r1, [r7, #24]
 8013d3a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8013d3c:	f7f0 ff96 	bl	8004c6c <osKernelSysTick>
 8013d40:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8013d42:	697b      	ldr	r3, [r7, #20]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d017      	beq.n	8013d78 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8013d48:	69fb      	ldr	r3, [r7, #28]
 8013d4a:	6819      	ldr	r1, [r3, #0]
 8013d4c:	f107 0320 	add.w	r3, r7, #32
 8013d50:	697a      	ldr	r2, [r7, #20]
 8013d52:	4618      	mov	r0, r3
 8013d54:	f7f1 f982 	bl	800505c <osMessageGet>

    if(event.status == osEventMessage)
 8013d58:	6a3b      	ldr	r3, [r7, #32]
 8013d5a:	2b10      	cmp	r3, #16
 8013d5c:	d109      	bne.n	8013d72 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8013d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d60:	461a      	mov	r2, r3
 8013d62:	69bb      	ldr	r3, [r7, #24]
 8013d64:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8013d66:	f7f0 ff81 	bl	8004c6c <osKernelSysTick>
 8013d6a:	4602      	mov	r2, r0
 8013d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d6e:	1ad3      	subs	r3, r2, r3
 8013d70:	e019      	b.n	8013da6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8013d72:	f04f 33ff 	mov.w	r3, #4294967295
 8013d76:	e016      	b.n	8013da6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8013d78:	69fb      	ldr	r3, [r7, #28]
 8013d7a:	6819      	ldr	r1, [r3, #0]
 8013d7c:	463b      	mov	r3, r7
 8013d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8013d82:	4618      	mov	r0, r3
 8013d84:	f7f1 f96a 	bl	800505c <osMessageGet>
 8013d88:	f107 0320 	add.w	r3, r7, #32
 8013d8c:	463a      	mov	r2, r7
 8013d8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8013d90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8013d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d96:	461a      	mov	r2, r3
 8013d98:	69bb      	ldr	r3, [r7, #24]
 8013d9a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8013d9c:	f7f0 ff66 	bl	8004c6c <osKernelSysTick>
 8013da0:	4602      	mov	r2, r0
 8013da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013da4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8013da6:	4618      	mov	r0, r3
 8013da8:	3730      	adds	r7, #48	; 0x30
 8013daa:	46bd      	mov	sp, r7
 8013dac:	bd80      	pop	{r7, pc}

08013dae <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8013dae:	b480      	push	{r7}
 8013db0:	b083      	sub	sp, #12
 8013db2:	af00      	add	r7, sp, #0
 8013db4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d101      	bne.n	8013dc2 <sys_mbox_valid+0x14>
    return 0;
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	e000      	b.n	8013dc4 <sys_mbox_valid+0x16>
  else
    return 1;
 8013dc2:	2301      	movs	r3, #1
}
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	370c      	adds	r7, #12
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dce:	4770      	bx	lr

08013dd0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8013dd4:	4803      	ldr	r0, [pc, #12]	; (8013de4 <sys_init+0x14>)
 8013dd6:	f7f0 ffb9 	bl	8004d4c <osMutexCreate>
 8013dda:	4603      	mov	r3, r0
 8013ddc:	4a02      	ldr	r2, [pc, #8]	; (8013de8 <sys_init+0x18>)
 8013dde:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8013de0:	bf00      	nop
 8013de2:	bd80      	pop	{r7, pc}
 8013de4:	08018154 	.word	0x08018154
 8013de8:	20018d74 	.word	0x20018d74

08013dec <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b084      	sub	sp, #16
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8013df4:	2300      	movs	r3, #0
 8013df6:	60bb      	str	r3, [r7, #8]
 8013df8:	2300      	movs	r3, #0
 8013dfa:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8013dfc:	f107 0308 	add.w	r3, r7, #8
 8013e00:	4618      	mov	r0, r3
 8013e02:	f7f0 ffa3 	bl	8004d4c <osMutexCreate>
 8013e06:	4602      	mov	r2, r0
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d102      	bne.n	8013e1a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8013e14:	f04f 33ff 	mov.w	r3, #4294967295
 8013e18:	e000      	b.n	8013e1c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8013e1a:	2300      	movs	r3, #0
}
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	3710      	adds	r7, #16
 8013e20:	46bd      	mov	sp, r7
 8013e22:	bd80      	pop	{r7, pc}

08013e24 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b082      	sub	sp, #8
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	f04f 31ff 	mov.w	r1, #4294967295
 8013e34:	4618      	mov	r0, r3
 8013e36:	f7f0 ffa1 	bl	8004d7c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8013e3a:	bf00      	nop
 8013e3c:	3708      	adds	r7, #8
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	bd80      	pop	{r7, pc}

08013e42 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8013e42:	b580      	push	{r7, lr}
 8013e44:	b082      	sub	sp, #8
 8013e46:	af00      	add	r7, sp, #0
 8013e48:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	4618      	mov	r0, r3
 8013e50:	f7f0 ffe2 	bl	8004e18 <osMutexRelease>
}
 8013e54:	bf00      	nop
 8013e56:	3708      	adds	r7, #8
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	bd80      	pop	{r7, pc}

08013e5c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b08c      	sub	sp, #48	; 0x30
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	60f8      	str	r0, [r7, #12]
 8013e64:	60b9      	str	r1, [r7, #8]
 8013e66:	607a      	str	r2, [r7, #4]
 8013e68:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8013e6a:	f107 0314 	add.w	r3, r7, #20
 8013e6e:	2200      	movs	r2, #0
 8013e70:	601a      	str	r2, [r3, #0]
 8013e72:	605a      	str	r2, [r3, #4]
 8013e74:	609a      	str	r2, [r3, #8]
 8013e76:	60da      	str	r2, [r3, #12]
 8013e78:	611a      	str	r2, [r3, #16]
 8013e7a:	615a      	str	r2, [r3, #20]
 8013e7c:	619a      	str	r2, [r3, #24]
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	617b      	str	r3, [r7, #20]
 8013e82:	68bb      	ldr	r3, [r7, #8]
 8013e84:	61bb      	str	r3, [r7, #24]
 8013e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e88:	b21b      	sxth	r3, r3
 8013e8a:	83bb      	strh	r3, [r7, #28]
 8013e8c:	683b      	ldr	r3, [r7, #0]
 8013e8e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8013e90:	f107 0314 	add.w	r3, r7, #20
 8013e94:	6879      	ldr	r1, [r7, #4]
 8013e96:	4618      	mov	r0, r3
 8013e98:	f7f0 fef8 	bl	8004c8c <osThreadCreate>
 8013e9c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	3730      	adds	r7, #48	; 0x30
 8013ea2:	46bd      	mov	sp, r7
 8013ea4:	bd80      	pop	{r7, pc}
	...

08013ea8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8013eac:	4b04      	ldr	r3, [pc, #16]	; (8013ec0 <sys_arch_protect+0x18>)
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	f7f0 ff61 	bl	8004d7c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8013eba:	2301      	movs	r3, #1
}
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	bd80      	pop	{r7, pc}
 8013ec0:	20018d74 	.word	0x20018d74

08013ec4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b082      	sub	sp, #8
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8013ecc:	4b04      	ldr	r3, [pc, #16]	; (8013ee0 <sys_arch_unprotect+0x1c>)
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	f7f0 ffa1 	bl	8004e18 <osMutexRelease>
}
 8013ed6:	bf00      	nop
 8013ed8:	3708      	adds	r7, #8
 8013eda:	46bd      	mov	sp, r7
 8013edc:	bd80      	pop	{r7, pc}
 8013ede:	bf00      	nop
 8013ee0:	20018d74 	.word	0x20018d74

08013ee4 <std>:
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	b510      	push	{r4, lr}
 8013ee8:	4604      	mov	r4, r0
 8013eea:	e9c0 3300 	strd	r3, r3, [r0]
 8013eee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013ef2:	6083      	str	r3, [r0, #8]
 8013ef4:	8181      	strh	r1, [r0, #12]
 8013ef6:	6643      	str	r3, [r0, #100]	; 0x64
 8013ef8:	81c2      	strh	r2, [r0, #14]
 8013efa:	6183      	str	r3, [r0, #24]
 8013efc:	4619      	mov	r1, r3
 8013efe:	2208      	movs	r2, #8
 8013f00:	305c      	adds	r0, #92	; 0x5c
 8013f02:	f000 f92a 	bl	801415a <memset>
 8013f06:	4b05      	ldr	r3, [pc, #20]	; (8013f1c <std+0x38>)
 8013f08:	6263      	str	r3, [r4, #36]	; 0x24
 8013f0a:	4b05      	ldr	r3, [pc, #20]	; (8013f20 <std+0x3c>)
 8013f0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8013f0e:	4b05      	ldr	r3, [pc, #20]	; (8013f24 <std+0x40>)
 8013f10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013f12:	4b05      	ldr	r3, [pc, #20]	; (8013f28 <std+0x44>)
 8013f14:	6224      	str	r4, [r4, #32]
 8013f16:	6323      	str	r3, [r4, #48]	; 0x30
 8013f18:	bd10      	pop	{r4, pc}
 8013f1a:	bf00      	nop
 8013f1c:	08014435 	.word	0x08014435
 8013f20:	08014457 	.word	0x08014457
 8013f24:	0801448f 	.word	0x0801448f
 8013f28:	080144b3 	.word	0x080144b3

08013f2c <_cleanup_r>:
 8013f2c:	4901      	ldr	r1, [pc, #4]	; (8013f34 <_cleanup_r+0x8>)
 8013f2e:	f000 b8af 	b.w	8014090 <_fwalk_reent>
 8013f32:	bf00      	nop
 8013f34:	08014649 	.word	0x08014649

08013f38 <__sfmoreglue>:
 8013f38:	b570      	push	{r4, r5, r6, lr}
 8013f3a:	2268      	movs	r2, #104	; 0x68
 8013f3c:	1e4d      	subs	r5, r1, #1
 8013f3e:	4355      	muls	r5, r2
 8013f40:	460e      	mov	r6, r1
 8013f42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013f46:	f000 f931 	bl	80141ac <_malloc_r>
 8013f4a:	4604      	mov	r4, r0
 8013f4c:	b140      	cbz	r0, 8013f60 <__sfmoreglue+0x28>
 8013f4e:	2100      	movs	r1, #0
 8013f50:	e9c0 1600 	strd	r1, r6, [r0]
 8013f54:	300c      	adds	r0, #12
 8013f56:	60a0      	str	r0, [r4, #8]
 8013f58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013f5c:	f000 f8fd 	bl	801415a <memset>
 8013f60:	4620      	mov	r0, r4
 8013f62:	bd70      	pop	{r4, r5, r6, pc}

08013f64 <__sfp_lock_acquire>:
 8013f64:	4801      	ldr	r0, [pc, #4]	; (8013f6c <__sfp_lock_acquire+0x8>)
 8013f66:	f000 b8d8 	b.w	801411a <__retarget_lock_acquire_recursive>
 8013f6a:	bf00      	nop
 8013f6c:	20018d79 	.word	0x20018d79

08013f70 <__sfp_lock_release>:
 8013f70:	4801      	ldr	r0, [pc, #4]	; (8013f78 <__sfp_lock_release+0x8>)
 8013f72:	f000 b8d3 	b.w	801411c <__retarget_lock_release_recursive>
 8013f76:	bf00      	nop
 8013f78:	20018d79 	.word	0x20018d79

08013f7c <__sinit_lock_acquire>:
 8013f7c:	4801      	ldr	r0, [pc, #4]	; (8013f84 <__sinit_lock_acquire+0x8>)
 8013f7e:	f000 b8cc 	b.w	801411a <__retarget_lock_acquire_recursive>
 8013f82:	bf00      	nop
 8013f84:	20018d7a 	.word	0x20018d7a

08013f88 <__sinit_lock_release>:
 8013f88:	4801      	ldr	r0, [pc, #4]	; (8013f90 <__sinit_lock_release+0x8>)
 8013f8a:	f000 b8c7 	b.w	801411c <__retarget_lock_release_recursive>
 8013f8e:	bf00      	nop
 8013f90:	20018d7a 	.word	0x20018d7a

08013f94 <__sinit>:
 8013f94:	b510      	push	{r4, lr}
 8013f96:	4604      	mov	r4, r0
 8013f98:	f7ff fff0 	bl	8013f7c <__sinit_lock_acquire>
 8013f9c:	69a3      	ldr	r3, [r4, #24]
 8013f9e:	b11b      	cbz	r3, 8013fa8 <__sinit+0x14>
 8013fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013fa4:	f7ff bff0 	b.w	8013f88 <__sinit_lock_release>
 8013fa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013fac:	6523      	str	r3, [r4, #80]	; 0x50
 8013fae:	4b13      	ldr	r3, [pc, #76]	; (8013ffc <__sinit+0x68>)
 8013fb0:	4a13      	ldr	r2, [pc, #76]	; (8014000 <__sinit+0x6c>)
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8013fb6:	42a3      	cmp	r3, r4
 8013fb8:	bf04      	itt	eq
 8013fba:	2301      	moveq	r3, #1
 8013fbc:	61a3      	streq	r3, [r4, #24]
 8013fbe:	4620      	mov	r0, r4
 8013fc0:	f000 f820 	bl	8014004 <__sfp>
 8013fc4:	6060      	str	r0, [r4, #4]
 8013fc6:	4620      	mov	r0, r4
 8013fc8:	f000 f81c 	bl	8014004 <__sfp>
 8013fcc:	60a0      	str	r0, [r4, #8]
 8013fce:	4620      	mov	r0, r4
 8013fd0:	f000 f818 	bl	8014004 <__sfp>
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	60e0      	str	r0, [r4, #12]
 8013fd8:	2104      	movs	r1, #4
 8013fda:	6860      	ldr	r0, [r4, #4]
 8013fdc:	f7ff ff82 	bl	8013ee4 <std>
 8013fe0:	68a0      	ldr	r0, [r4, #8]
 8013fe2:	2201      	movs	r2, #1
 8013fe4:	2109      	movs	r1, #9
 8013fe6:	f7ff ff7d 	bl	8013ee4 <std>
 8013fea:	68e0      	ldr	r0, [r4, #12]
 8013fec:	2202      	movs	r2, #2
 8013fee:	2112      	movs	r1, #18
 8013ff0:	f7ff ff78 	bl	8013ee4 <std>
 8013ff4:	2301      	movs	r3, #1
 8013ff6:	61a3      	str	r3, [r4, #24]
 8013ff8:	e7d2      	b.n	8013fa0 <__sinit+0xc>
 8013ffa:	bf00      	nop
 8013ffc:	080181bc 	.word	0x080181bc
 8014000:	08013f2d 	.word	0x08013f2d

08014004 <__sfp>:
 8014004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014006:	4607      	mov	r7, r0
 8014008:	f7ff ffac 	bl	8013f64 <__sfp_lock_acquire>
 801400c:	4b1e      	ldr	r3, [pc, #120]	; (8014088 <__sfp+0x84>)
 801400e:	681e      	ldr	r6, [r3, #0]
 8014010:	69b3      	ldr	r3, [r6, #24]
 8014012:	b913      	cbnz	r3, 801401a <__sfp+0x16>
 8014014:	4630      	mov	r0, r6
 8014016:	f7ff ffbd 	bl	8013f94 <__sinit>
 801401a:	3648      	adds	r6, #72	; 0x48
 801401c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014020:	3b01      	subs	r3, #1
 8014022:	d503      	bpl.n	801402c <__sfp+0x28>
 8014024:	6833      	ldr	r3, [r6, #0]
 8014026:	b30b      	cbz	r3, 801406c <__sfp+0x68>
 8014028:	6836      	ldr	r6, [r6, #0]
 801402a:	e7f7      	b.n	801401c <__sfp+0x18>
 801402c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014030:	b9d5      	cbnz	r5, 8014068 <__sfp+0x64>
 8014032:	4b16      	ldr	r3, [pc, #88]	; (801408c <__sfp+0x88>)
 8014034:	60e3      	str	r3, [r4, #12]
 8014036:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801403a:	6665      	str	r5, [r4, #100]	; 0x64
 801403c:	f000 f86c 	bl	8014118 <__retarget_lock_init_recursive>
 8014040:	f7ff ff96 	bl	8013f70 <__sfp_lock_release>
 8014044:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014048:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801404c:	6025      	str	r5, [r4, #0]
 801404e:	61a5      	str	r5, [r4, #24]
 8014050:	2208      	movs	r2, #8
 8014052:	4629      	mov	r1, r5
 8014054:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014058:	f000 f87f 	bl	801415a <memset>
 801405c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014060:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014064:	4620      	mov	r0, r4
 8014066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014068:	3468      	adds	r4, #104	; 0x68
 801406a:	e7d9      	b.n	8014020 <__sfp+0x1c>
 801406c:	2104      	movs	r1, #4
 801406e:	4638      	mov	r0, r7
 8014070:	f7ff ff62 	bl	8013f38 <__sfmoreglue>
 8014074:	4604      	mov	r4, r0
 8014076:	6030      	str	r0, [r6, #0]
 8014078:	2800      	cmp	r0, #0
 801407a:	d1d5      	bne.n	8014028 <__sfp+0x24>
 801407c:	f7ff ff78 	bl	8013f70 <__sfp_lock_release>
 8014080:	230c      	movs	r3, #12
 8014082:	603b      	str	r3, [r7, #0]
 8014084:	e7ee      	b.n	8014064 <__sfp+0x60>
 8014086:	bf00      	nop
 8014088:	080181bc 	.word	0x080181bc
 801408c:	ffff0001 	.word	0xffff0001

08014090 <_fwalk_reent>:
 8014090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014094:	4606      	mov	r6, r0
 8014096:	4688      	mov	r8, r1
 8014098:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801409c:	2700      	movs	r7, #0
 801409e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80140a2:	f1b9 0901 	subs.w	r9, r9, #1
 80140a6:	d505      	bpl.n	80140b4 <_fwalk_reent+0x24>
 80140a8:	6824      	ldr	r4, [r4, #0]
 80140aa:	2c00      	cmp	r4, #0
 80140ac:	d1f7      	bne.n	801409e <_fwalk_reent+0xe>
 80140ae:	4638      	mov	r0, r7
 80140b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80140b4:	89ab      	ldrh	r3, [r5, #12]
 80140b6:	2b01      	cmp	r3, #1
 80140b8:	d907      	bls.n	80140ca <_fwalk_reent+0x3a>
 80140ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80140be:	3301      	adds	r3, #1
 80140c0:	d003      	beq.n	80140ca <_fwalk_reent+0x3a>
 80140c2:	4629      	mov	r1, r5
 80140c4:	4630      	mov	r0, r6
 80140c6:	47c0      	blx	r8
 80140c8:	4307      	orrs	r7, r0
 80140ca:	3568      	adds	r5, #104	; 0x68
 80140cc:	e7e9      	b.n	80140a2 <_fwalk_reent+0x12>
	...

080140d0 <__libc_init_array>:
 80140d0:	b570      	push	{r4, r5, r6, lr}
 80140d2:	4d0d      	ldr	r5, [pc, #52]	; (8014108 <__libc_init_array+0x38>)
 80140d4:	4c0d      	ldr	r4, [pc, #52]	; (801410c <__libc_init_array+0x3c>)
 80140d6:	1b64      	subs	r4, r4, r5
 80140d8:	10a4      	asrs	r4, r4, #2
 80140da:	2600      	movs	r6, #0
 80140dc:	42a6      	cmp	r6, r4
 80140de:	d109      	bne.n	80140f4 <__libc_init_array+0x24>
 80140e0:	4d0b      	ldr	r5, [pc, #44]	; (8014110 <__libc_init_array+0x40>)
 80140e2:	4c0c      	ldr	r4, [pc, #48]	; (8014114 <__libc_init_array+0x44>)
 80140e4:	f001 f802 	bl	80150ec <_init>
 80140e8:	1b64      	subs	r4, r4, r5
 80140ea:	10a4      	asrs	r4, r4, #2
 80140ec:	2600      	movs	r6, #0
 80140ee:	42a6      	cmp	r6, r4
 80140f0:	d105      	bne.n	80140fe <__libc_init_array+0x2e>
 80140f2:	bd70      	pop	{r4, r5, r6, pc}
 80140f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80140f8:	4798      	blx	r3
 80140fa:	3601      	adds	r6, #1
 80140fc:	e7ee      	b.n	80140dc <__libc_init_array+0xc>
 80140fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8014102:	4798      	blx	r3
 8014104:	3601      	adds	r6, #1
 8014106:	e7f2      	b.n	80140ee <__libc_init_array+0x1e>
 8014108:	080182ac 	.word	0x080182ac
 801410c:	080182ac 	.word	0x080182ac
 8014110:	080182ac 	.word	0x080182ac
 8014114:	080182b0 	.word	0x080182b0

08014118 <__retarget_lock_init_recursive>:
 8014118:	4770      	bx	lr

0801411a <__retarget_lock_acquire_recursive>:
 801411a:	4770      	bx	lr

0801411c <__retarget_lock_release_recursive>:
 801411c:	4770      	bx	lr

0801411e <memcmp>:
 801411e:	b510      	push	{r4, lr}
 8014120:	3901      	subs	r1, #1
 8014122:	4402      	add	r2, r0
 8014124:	4290      	cmp	r0, r2
 8014126:	d101      	bne.n	801412c <memcmp+0xe>
 8014128:	2000      	movs	r0, #0
 801412a:	e005      	b.n	8014138 <memcmp+0x1a>
 801412c:	7803      	ldrb	r3, [r0, #0]
 801412e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014132:	42a3      	cmp	r3, r4
 8014134:	d001      	beq.n	801413a <memcmp+0x1c>
 8014136:	1b18      	subs	r0, r3, r4
 8014138:	bd10      	pop	{r4, pc}
 801413a:	3001      	adds	r0, #1
 801413c:	e7f2      	b.n	8014124 <memcmp+0x6>

0801413e <memcpy>:
 801413e:	440a      	add	r2, r1
 8014140:	4291      	cmp	r1, r2
 8014142:	f100 33ff 	add.w	r3, r0, #4294967295
 8014146:	d100      	bne.n	801414a <memcpy+0xc>
 8014148:	4770      	bx	lr
 801414a:	b510      	push	{r4, lr}
 801414c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014150:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014154:	4291      	cmp	r1, r2
 8014156:	d1f9      	bne.n	801414c <memcpy+0xe>
 8014158:	bd10      	pop	{r4, pc}

0801415a <memset>:
 801415a:	4402      	add	r2, r0
 801415c:	4603      	mov	r3, r0
 801415e:	4293      	cmp	r3, r2
 8014160:	d100      	bne.n	8014164 <memset+0xa>
 8014162:	4770      	bx	lr
 8014164:	f803 1b01 	strb.w	r1, [r3], #1
 8014168:	e7f9      	b.n	801415e <memset+0x4>
	...

0801416c <sbrk_aligned>:
 801416c:	b570      	push	{r4, r5, r6, lr}
 801416e:	4e0e      	ldr	r6, [pc, #56]	; (80141a8 <sbrk_aligned+0x3c>)
 8014170:	460c      	mov	r4, r1
 8014172:	6831      	ldr	r1, [r6, #0]
 8014174:	4605      	mov	r5, r0
 8014176:	b911      	cbnz	r1, 801417e <sbrk_aligned+0x12>
 8014178:	f000 f94c 	bl	8014414 <_sbrk_r>
 801417c:	6030      	str	r0, [r6, #0]
 801417e:	4621      	mov	r1, r4
 8014180:	4628      	mov	r0, r5
 8014182:	f000 f947 	bl	8014414 <_sbrk_r>
 8014186:	1c43      	adds	r3, r0, #1
 8014188:	d00a      	beq.n	80141a0 <sbrk_aligned+0x34>
 801418a:	1cc4      	adds	r4, r0, #3
 801418c:	f024 0403 	bic.w	r4, r4, #3
 8014190:	42a0      	cmp	r0, r4
 8014192:	d007      	beq.n	80141a4 <sbrk_aligned+0x38>
 8014194:	1a21      	subs	r1, r4, r0
 8014196:	4628      	mov	r0, r5
 8014198:	f000 f93c 	bl	8014414 <_sbrk_r>
 801419c:	3001      	adds	r0, #1
 801419e:	d101      	bne.n	80141a4 <sbrk_aligned+0x38>
 80141a0:	f04f 34ff 	mov.w	r4, #4294967295
 80141a4:	4620      	mov	r0, r4
 80141a6:	bd70      	pop	{r4, r5, r6, pc}
 80141a8:	20018d80 	.word	0x20018d80

080141ac <_malloc_r>:
 80141ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141b0:	1ccd      	adds	r5, r1, #3
 80141b2:	f025 0503 	bic.w	r5, r5, #3
 80141b6:	3508      	adds	r5, #8
 80141b8:	2d0c      	cmp	r5, #12
 80141ba:	bf38      	it	cc
 80141bc:	250c      	movcc	r5, #12
 80141be:	2d00      	cmp	r5, #0
 80141c0:	4607      	mov	r7, r0
 80141c2:	db01      	blt.n	80141c8 <_malloc_r+0x1c>
 80141c4:	42a9      	cmp	r1, r5
 80141c6:	d905      	bls.n	80141d4 <_malloc_r+0x28>
 80141c8:	230c      	movs	r3, #12
 80141ca:	603b      	str	r3, [r7, #0]
 80141cc:	2600      	movs	r6, #0
 80141ce:	4630      	mov	r0, r6
 80141d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141d4:	4e2e      	ldr	r6, [pc, #184]	; (8014290 <_malloc_r+0xe4>)
 80141d6:	f000 fa9f 	bl	8014718 <__malloc_lock>
 80141da:	6833      	ldr	r3, [r6, #0]
 80141dc:	461c      	mov	r4, r3
 80141de:	bb34      	cbnz	r4, 801422e <_malloc_r+0x82>
 80141e0:	4629      	mov	r1, r5
 80141e2:	4638      	mov	r0, r7
 80141e4:	f7ff ffc2 	bl	801416c <sbrk_aligned>
 80141e8:	1c43      	adds	r3, r0, #1
 80141ea:	4604      	mov	r4, r0
 80141ec:	d14d      	bne.n	801428a <_malloc_r+0xde>
 80141ee:	6834      	ldr	r4, [r6, #0]
 80141f0:	4626      	mov	r6, r4
 80141f2:	2e00      	cmp	r6, #0
 80141f4:	d140      	bne.n	8014278 <_malloc_r+0xcc>
 80141f6:	6823      	ldr	r3, [r4, #0]
 80141f8:	4631      	mov	r1, r6
 80141fa:	4638      	mov	r0, r7
 80141fc:	eb04 0803 	add.w	r8, r4, r3
 8014200:	f000 f908 	bl	8014414 <_sbrk_r>
 8014204:	4580      	cmp	r8, r0
 8014206:	d13a      	bne.n	801427e <_malloc_r+0xd2>
 8014208:	6821      	ldr	r1, [r4, #0]
 801420a:	3503      	adds	r5, #3
 801420c:	1a6d      	subs	r5, r5, r1
 801420e:	f025 0503 	bic.w	r5, r5, #3
 8014212:	3508      	adds	r5, #8
 8014214:	2d0c      	cmp	r5, #12
 8014216:	bf38      	it	cc
 8014218:	250c      	movcc	r5, #12
 801421a:	4629      	mov	r1, r5
 801421c:	4638      	mov	r0, r7
 801421e:	f7ff ffa5 	bl	801416c <sbrk_aligned>
 8014222:	3001      	adds	r0, #1
 8014224:	d02b      	beq.n	801427e <_malloc_r+0xd2>
 8014226:	6823      	ldr	r3, [r4, #0]
 8014228:	442b      	add	r3, r5
 801422a:	6023      	str	r3, [r4, #0]
 801422c:	e00e      	b.n	801424c <_malloc_r+0xa0>
 801422e:	6822      	ldr	r2, [r4, #0]
 8014230:	1b52      	subs	r2, r2, r5
 8014232:	d41e      	bmi.n	8014272 <_malloc_r+0xc6>
 8014234:	2a0b      	cmp	r2, #11
 8014236:	d916      	bls.n	8014266 <_malloc_r+0xba>
 8014238:	1961      	adds	r1, r4, r5
 801423a:	42a3      	cmp	r3, r4
 801423c:	6025      	str	r5, [r4, #0]
 801423e:	bf18      	it	ne
 8014240:	6059      	strne	r1, [r3, #4]
 8014242:	6863      	ldr	r3, [r4, #4]
 8014244:	bf08      	it	eq
 8014246:	6031      	streq	r1, [r6, #0]
 8014248:	5162      	str	r2, [r4, r5]
 801424a:	604b      	str	r3, [r1, #4]
 801424c:	4638      	mov	r0, r7
 801424e:	f104 060b 	add.w	r6, r4, #11
 8014252:	f000 fa67 	bl	8014724 <__malloc_unlock>
 8014256:	f026 0607 	bic.w	r6, r6, #7
 801425a:	1d23      	adds	r3, r4, #4
 801425c:	1af2      	subs	r2, r6, r3
 801425e:	d0b6      	beq.n	80141ce <_malloc_r+0x22>
 8014260:	1b9b      	subs	r3, r3, r6
 8014262:	50a3      	str	r3, [r4, r2]
 8014264:	e7b3      	b.n	80141ce <_malloc_r+0x22>
 8014266:	6862      	ldr	r2, [r4, #4]
 8014268:	42a3      	cmp	r3, r4
 801426a:	bf0c      	ite	eq
 801426c:	6032      	streq	r2, [r6, #0]
 801426e:	605a      	strne	r2, [r3, #4]
 8014270:	e7ec      	b.n	801424c <_malloc_r+0xa0>
 8014272:	4623      	mov	r3, r4
 8014274:	6864      	ldr	r4, [r4, #4]
 8014276:	e7b2      	b.n	80141de <_malloc_r+0x32>
 8014278:	4634      	mov	r4, r6
 801427a:	6876      	ldr	r6, [r6, #4]
 801427c:	e7b9      	b.n	80141f2 <_malloc_r+0x46>
 801427e:	230c      	movs	r3, #12
 8014280:	603b      	str	r3, [r7, #0]
 8014282:	4638      	mov	r0, r7
 8014284:	f000 fa4e 	bl	8014724 <__malloc_unlock>
 8014288:	e7a1      	b.n	80141ce <_malloc_r+0x22>
 801428a:	6025      	str	r5, [r4, #0]
 801428c:	e7de      	b.n	801424c <_malloc_r+0xa0>
 801428e:	bf00      	nop
 8014290:	20018d7c 	.word	0x20018d7c

08014294 <iprintf>:
 8014294:	b40f      	push	{r0, r1, r2, r3}
 8014296:	4b0a      	ldr	r3, [pc, #40]	; (80142c0 <iprintf+0x2c>)
 8014298:	b513      	push	{r0, r1, r4, lr}
 801429a:	681c      	ldr	r4, [r3, #0]
 801429c:	b124      	cbz	r4, 80142a8 <iprintf+0x14>
 801429e:	69a3      	ldr	r3, [r4, #24]
 80142a0:	b913      	cbnz	r3, 80142a8 <iprintf+0x14>
 80142a2:	4620      	mov	r0, r4
 80142a4:	f7ff fe76 	bl	8013f94 <__sinit>
 80142a8:	ab05      	add	r3, sp, #20
 80142aa:	9a04      	ldr	r2, [sp, #16]
 80142ac:	68a1      	ldr	r1, [r4, #8]
 80142ae:	9301      	str	r3, [sp, #4]
 80142b0:	4620      	mov	r0, r4
 80142b2:	f000 fab3 	bl	801481c <_vfiprintf_r>
 80142b6:	b002      	add	sp, #8
 80142b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80142bc:	b004      	add	sp, #16
 80142be:	4770      	bx	lr
 80142c0:	20000034 	.word	0x20000034

080142c4 <rand>:
 80142c4:	4b16      	ldr	r3, [pc, #88]	; (8014320 <rand+0x5c>)
 80142c6:	b510      	push	{r4, lr}
 80142c8:	681c      	ldr	r4, [r3, #0]
 80142ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80142cc:	b9b3      	cbnz	r3, 80142fc <rand+0x38>
 80142ce:	2018      	movs	r0, #24
 80142d0:	f000 fa1a 	bl	8014708 <malloc>
 80142d4:	63a0      	str	r0, [r4, #56]	; 0x38
 80142d6:	b928      	cbnz	r0, 80142e4 <rand+0x20>
 80142d8:	4602      	mov	r2, r0
 80142da:	4b12      	ldr	r3, [pc, #72]	; (8014324 <rand+0x60>)
 80142dc:	4812      	ldr	r0, [pc, #72]	; (8014328 <rand+0x64>)
 80142de:	214e      	movs	r1, #78	; 0x4e
 80142e0:	f000 f8fe 	bl	80144e0 <__assert_func>
 80142e4:	4a11      	ldr	r2, [pc, #68]	; (801432c <rand+0x68>)
 80142e6:	4b12      	ldr	r3, [pc, #72]	; (8014330 <rand+0x6c>)
 80142e8:	e9c0 2300 	strd	r2, r3, [r0]
 80142ec:	4b11      	ldr	r3, [pc, #68]	; (8014334 <rand+0x70>)
 80142ee:	6083      	str	r3, [r0, #8]
 80142f0:	230b      	movs	r3, #11
 80142f2:	8183      	strh	r3, [r0, #12]
 80142f4:	2201      	movs	r2, #1
 80142f6:	2300      	movs	r3, #0
 80142f8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80142fc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80142fe:	4a0e      	ldr	r2, [pc, #56]	; (8014338 <rand+0x74>)
 8014300:	6920      	ldr	r0, [r4, #16]
 8014302:	6963      	ldr	r3, [r4, #20]
 8014304:	490d      	ldr	r1, [pc, #52]	; (801433c <rand+0x78>)
 8014306:	4342      	muls	r2, r0
 8014308:	fb01 2203 	mla	r2, r1, r3, r2
 801430c:	fba0 0101 	umull	r0, r1, r0, r1
 8014310:	1c43      	adds	r3, r0, #1
 8014312:	eb42 0001 	adc.w	r0, r2, r1
 8014316:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801431a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801431e:	bd10      	pop	{r4, pc}
 8014320:	20000034 	.word	0x20000034
 8014324:	080181c0 	.word	0x080181c0
 8014328:	080181d7 	.word	0x080181d7
 801432c:	abcd330e 	.word	0xabcd330e
 8014330:	e66d1234 	.word	0xe66d1234
 8014334:	0005deec 	.word	0x0005deec
 8014338:	5851f42d 	.word	0x5851f42d
 801433c:	4c957f2d 	.word	0x4c957f2d

08014340 <cleanup_glue>:
 8014340:	b538      	push	{r3, r4, r5, lr}
 8014342:	460c      	mov	r4, r1
 8014344:	6809      	ldr	r1, [r1, #0]
 8014346:	4605      	mov	r5, r0
 8014348:	b109      	cbz	r1, 801434e <cleanup_glue+0xe>
 801434a:	f7ff fff9 	bl	8014340 <cleanup_glue>
 801434e:	4621      	mov	r1, r4
 8014350:	4628      	mov	r0, r5
 8014352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014356:	f000 b9eb 	b.w	8014730 <_free_r>
	...

0801435c <_reclaim_reent>:
 801435c:	4b2c      	ldr	r3, [pc, #176]	; (8014410 <_reclaim_reent+0xb4>)
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	4283      	cmp	r3, r0
 8014362:	b570      	push	{r4, r5, r6, lr}
 8014364:	4604      	mov	r4, r0
 8014366:	d051      	beq.n	801440c <_reclaim_reent+0xb0>
 8014368:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801436a:	b143      	cbz	r3, 801437e <_reclaim_reent+0x22>
 801436c:	68db      	ldr	r3, [r3, #12]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d14a      	bne.n	8014408 <_reclaim_reent+0xac>
 8014372:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014374:	6819      	ldr	r1, [r3, #0]
 8014376:	b111      	cbz	r1, 801437e <_reclaim_reent+0x22>
 8014378:	4620      	mov	r0, r4
 801437a:	f000 f9d9 	bl	8014730 <_free_r>
 801437e:	6961      	ldr	r1, [r4, #20]
 8014380:	b111      	cbz	r1, 8014388 <_reclaim_reent+0x2c>
 8014382:	4620      	mov	r0, r4
 8014384:	f000 f9d4 	bl	8014730 <_free_r>
 8014388:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801438a:	b111      	cbz	r1, 8014392 <_reclaim_reent+0x36>
 801438c:	4620      	mov	r0, r4
 801438e:	f000 f9cf 	bl	8014730 <_free_r>
 8014392:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014394:	b111      	cbz	r1, 801439c <_reclaim_reent+0x40>
 8014396:	4620      	mov	r0, r4
 8014398:	f000 f9ca 	bl	8014730 <_free_r>
 801439c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801439e:	b111      	cbz	r1, 80143a6 <_reclaim_reent+0x4a>
 80143a0:	4620      	mov	r0, r4
 80143a2:	f000 f9c5 	bl	8014730 <_free_r>
 80143a6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80143a8:	b111      	cbz	r1, 80143b0 <_reclaim_reent+0x54>
 80143aa:	4620      	mov	r0, r4
 80143ac:	f000 f9c0 	bl	8014730 <_free_r>
 80143b0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80143b2:	b111      	cbz	r1, 80143ba <_reclaim_reent+0x5e>
 80143b4:	4620      	mov	r0, r4
 80143b6:	f000 f9bb 	bl	8014730 <_free_r>
 80143ba:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80143bc:	b111      	cbz	r1, 80143c4 <_reclaim_reent+0x68>
 80143be:	4620      	mov	r0, r4
 80143c0:	f000 f9b6 	bl	8014730 <_free_r>
 80143c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80143c6:	b111      	cbz	r1, 80143ce <_reclaim_reent+0x72>
 80143c8:	4620      	mov	r0, r4
 80143ca:	f000 f9b1 	bl	8014730 <_free_r>
 80143ce:	69a3      	ldr	r3, [r4, #24]
 80143d0:	b1e3      	cbz	r3, 801440c <_reclaim_reent+0xb0>
 80143d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80143d4:	4620      	mov	r0, r4
 80143d6:	4798      	blx	r3
 80143d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80143da:	b1b9      	cbz	r1, 801440c <_reclaim_reent+0xb0>
 80143dc:	4620      	mov	r0, r4
 80143de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80143e2:	f7ff bfad 	b.w	8014340 <cleanup_glue>
 80143e6:	5949      	ldr	r1, [r1, r5]
 80143e8:	b941      	cbnz	r1, 80143fc <_reclaim_reent+0xa0>
 80143ea:	3504      	adds	r5, #4
 80143ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80143ee:	2d80      	cmp	r5, #128	; 0x80
 80143f0:	68d9      	ldr	r1, [r3, #12]
 80143f2:	d1f8      	bne.n	80143e6 <_reclaim_reent+0x8a>
 80143f4:	4620      	mov	r0, r4
 80143f6:	f000 f99b 	bl	8014730 <_free_r>
 80143fa:	e7ba      	b.n	8014372 <_reclaim_reent+0x16>
 80143fc:	680e      	ldr	r6, [r1, #0]
 80143fe:	4620      	mov	r0, r4
 8014400:	f000 f996 	bl	8014730 <_free_r>
 8014404:	4631      	mov	r1, r6
 8014406:	e7ef      	b.n	80143e8 <_reclaim_reent+0x8c>
 8014408:	2500      	movs	r5, #0
 801440a:	e7ef      	b.n	80143ec <_reclaim_reent+0x90>
 801440c:	bd70      	pop	{r4, r5, r6, pc}
 801440e:	bf00      	nop
 8014410:	20000034 	.word	0x20000034

08014414 <_sbrk_r>:
 8014414:	b538      	push	{r3, r4, r5, lr}
 8014416:	4d06      	ldr	r5, [pc, #24]	; (8014430 <_sbrk_r+0x1c>)
 8014418:	2300      	movs	r3, #0
 801441a:	4604      	mov	r4, r0
 801441c:	4608      	mov	r0, r1
 801441e:	602b      	str	r3, [r5, #0]
 8014420:	f7ec fdee 	bl	8001000 <_sbrk>
 8014424:	1c43      	adds	r3, r0, #1
 8014426:	d102      	bne.n	801442e <_sbrk_r+0x1a>
 8014428:	682b      	ldr	r3, [r5, #0]
 801442a:	b103      	cbz	r3, 801442e <_sbrk_r+0x1a>
 801442c:	6023      	str	r3, [r4, #0]
 801442e:	bd38      	pop	{r3, r4, r5, pc}
 8014430:	20018d84 	.word	0x20018d84

08014434 <__sread>:
 8014434:	b510      	push	{r4, lr}
 8014436:	460c      	mov	r4, r1
 8014438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801443c:	f000 fcb2 	bl	8014da4 <_read_r>
 8014440:	2800      	cmp	r0, #0
 8014442:	bfab      	itete	ge
 8014444:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014446:	89a3      	ldrhlt	r3, [r4, #12]
 8014448:	181b      	addge	r3, r3, r0
 801444a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801444e:	bfac      	ite	ge
 8014450:	6563      	strge	r3, [r4, #84]	; 0x54
 8014452:	81a3      	strhlt	r3, [r4, #12]
 8014454:	bd10      	pop	{r4, pc}

08014456 <__swrite>:
 8014456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801445a:	461f      	mov	r7, r3
 801445c:	898b      	ldrh	r3, [r1, #12]
 801445e:	05db      	lsls	r3, r3, #23
 8014460:	4605      	mov	r5, r0
 8014462:	460c      	mov	r4, r1
 8014464:	4616      	mov	r6, r2
 8014466:	d505      	bpl.n	8014474 <__swrite+0x1e>
 8014468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801446c:	2302      	movs	r3, #2
 801446e:	2200      	movs	r2, #0
 8014470:	f000 f938 	bl	80146e4 <_lseek_r>
 8014474:	89a3      	ldrh	r3, [r4, #12]
 8014476:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801447a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801447e:	81a3      	strh	r3, [r4, #12]
 8014480:	4632      	mov	r2, r6
 8014482:	463b      	mov	r3, r7
 8014484:	4628      	mov	r0, r5
 8014486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801448a:	f000 b817 	b.w	80144bc <_write_r>

0801448e <__sseek>:
 801448e:	b510      	push	{r4, lr}
 8014490:	460c      	mov	r4, r1
 8014492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014496:	f000 f925 	bl	80146e4 <_lseek_r>
 801449a:	1c43      	adds	r3, r0, #1
 801449c:	89a3      	ldrh	r3, [r4, #12]
 801449e:	bf15      	itete	ne
 80144a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80144a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80144a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80144aa:	81a3      	strheq	r3, [r4, #12]
 80144ac:	bf18      	it	ne
 80144ae:	81a3      	strhne	r3, [r4, #12]
 80144b0:	bd10      	pop	{r4, pc}

080144b2 <__sclose>:
 80144b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80144b6:	f000 b831 	b.w	801451c <_close_r>
	...

080144bc <_write_r>:
 80144bc:	b538      	push	{r3, r4, r5, lr}
 80144be:	4d07      	ldr	r5, [pc, #28]	; (80144dc <_write_r+0x20>)
 80144c0:	4604      	mov	r4, r0
 80144c2:	4608      	mov	r0, r1
 80144c4:	4611      	mov	r1, r2
 80144c6:	2200      	movs	r2, #0
 80144c8:	602a      	str	r2, [r5, #0]
 80144ca:	461a      	mov	r2, r3
 80144cc:	f7ec fd47 	bl	8000f5e <_write>
 80144d0:	1c43      	adds	r3, r0, #1
 80144d2:	d102      	bne.n	80144da <_write_r+0x1e>
 80144d4:	682b      	ldr	r3, [r5, #0]
 80144d6:	b103      	cbz	r3, 80144da <_write_r+0x1e>
 80144d8:	6023      	str	r3, [r4, #0]
 80144da:	bd38      	pop	{r3, r4, r5, pc}
 80144dc:	20018d84 	.word	0x20018d84

080144e0 <__assert_func>:
 80144e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80144e2:	4614      	mov	r4, r2
 80144e4:	461a      	mov	r2, r3
 80144e6:	4b09      	ldr	r3, [pc, #36]	; (801450c <__assert_func+0x2c>)
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	4605      	mov	r5, r0
 80144ec:	68d8      	ldr	r0, [r3, #12]
 80144ee:	b14c      	cbz	r4, 8014504 <__assert_func+0x24>
 80144f0:	4b07      	ldr	r3, [pc, #28]	; (8014510 <__assert_func+0x30>)
 80144f2:	9100      	str	r1, [sp, #0]
 80144f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80144f8:	4906      	ldr	r1, [pc, #24]	; (8014514 <__assert_func+0x34>)
 80144fa:	462b      	mov	r3, r5
 80144fc:	f000 f8e0 	bl	80146c0 <fiprintf>
 8014500:	f000 fd22 	bl	8014f48 <abort>
 8014504:	4b04      	ldr	r3, [pc, #16]	; (8014518 <__assert_func+0x38>)
 8014506:	461c      	mov	r4, r3
 8014508:	e7f3      	b.n	80144f2 <__assert_func+0x12>
 801450a:	bf00      	nop
 801450c:	20000034 	.word	0x20000034
 8014510:	08018232 	.word	0x08018232
 8014514:	0801823f 	.word	0x0801823f
 8014518:	0801826d 	.word	0x0801826d

0801451c <_close_r>:
 801451c:	b538      	push	{r3, r4, r5, lr}
 801451e:	4d06      	ldr	r5, [pc, #24]	; (8014538 <_close_r+0x1c>)
 8014520:	2300      	movs	r3, #0
 8014522:	4604      	mov	r4, r0
 8014524:	4608      	mov	r0, r1
 8014526:	602b      	str	r3, [r5, #0]
 8014528:	f7ec fd35 	bl	8000f96 <_close>
 801452c:	1c43      	adds	r3, r0, #1
 801452e:	d102      	bne.n	8014536 <_close_r+0x1a>
 8014530:	682b      	ldr	r3, [r5, #0]
 8014532:	b103      	cbz	r3, 8014536 <_close_r+0x1a>
 8014534:	6023      	str	r3, [r4, #0]
 8014536:	bd38      	pop	{r3, r4, r5, pc}
 8014538:	20018d84 	.word	0x20018d84

0801453c <__sflush_r>:
 801453c:	898a      	ldrh	r2, [r1, #12]
 801453e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014542:	4605      	mov	r5, r0
 8014544:	0710      	lsls	r0, r2, #28
 8014546:	460c      	mov	r4, r1
 8014548:	d458      	bmi.n	80145fc <__sflush_r+0xc0>
 801454a:	684b      	ldr	r3, [r1, #4]
 801454c:	2b00      	cmp	r3, #0
 801454e:	dc05      	bgt.n	801455c <__sflush_r+0x20>
 8014550:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014552:	2b00      	cmp	r3, #0
 8014554:	dc02      	bgt.n	801455c <__sflush_r+0x20>
 8014556:	2000      	movs	r0, #0
 8014558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801455c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801455e:	2e00      	cmp	r6, #0
 8014560:	d0f9      	beq.n	8014556 <__sflush_r+0x1a>
 8014562:	2300      	movs	r3, #0
 8014564:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014568:	682f      	ldr	r7, [r5, #0]
 801456a:	602b      	str	r3, [r5, #0]
 801456c:	d032      	beq.n	80145d4 <__sflush_r+0x98>
 801456e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014570:	89a3      	ldrh	r3, [r4, #12]
 8014572:	075a      	lsls	r2, r3, #29
 8014574:	d505      	bpl.n	8014582 <__sflush_r+0x46>
 8014576:	6863      	ldr	r3, [r4, #4]
 8014578:	1ac0      	subs	r0, r0, r3
 801457a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801457c:	b10b      	cbz	r3, 8014582 <__sflush_r+0x46>
 801457e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014580:	1ac0      	subs	r0, r0, r3
 8014582:	2300      	movs	r3, #0
 8014584:	4602      	mov	r2, r0
 8014586:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014588:	6a21      	ldr	r1, [r4, #32]
 801458a:	4628      	mov	r0, r5
 801458c:	47b0      	blx	r6
 801458e:	1c43      	adds	r3, r0, #1
 8014590:	89a3      	ldrh	r3, [r4, #12]
 8014592:	d106      	bne.n	80145a2 <__sflush_r+0x66>
 8014594:	6829      	ldr	r1, [r5, #0]
 8014596:	291d      	cmp	r1, #29
 8014598:	d82c      	bhi.n	80145f4 <__sflush_r+0xb8>
 801459a:	4a2a      	ldr	r2, [pc, #168]	; (8014644 <__sflush_r+0x108>)
 801459c:	40ca      	lsrs	r2, r1
 801459e:	07d6      	lsls	r6, r2, #31
 80145a0:	d528      	bpl.n	80145f4 <__sflush_r+0xb8>
 80145a2:	2200      	movs	r2, #0
 80145a4:	6062      	str	r2, [r4, #4]
 80145a6:	04d9      	lsls	r1, r3, #19
 80145a8:	6922      	ldr	r2, [r4, #16]
 80145aa:	6022      	str	r2, [r4, #0]
 80145ac:	d504      	bpl.n	80145b8 <__sflush_r+0x7c>
 80145ae:	1c42      	adds	r2, r0, #1
 80145b0:	d101      	bne.n	80145b6 <__sflush_r+0x7a>
 80145b2:	682b      	ldr	r3, [r5, #0]
 80145b4:	b903      	cbnz	r3, 80145b8 <__sflush_r+0x7c>
 80145b6:	6560      	str	r0, [r4, #84]	; 0x54
 80145b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80145ba:	602f      	str	r7, [r5, #0]
 80145bc:	2900      	cmp	r1, #0
 80145be:	d0ca      	beq.n	8014556 <__sflush_r+0x1a>
 80145c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80145c4:	4299      	cmp	r1, r3
 80145c6:	d002      	beq.n	80145ce <__sflush_r+0x92>
 80145c8:	4628      	mov	r0, r5
 80145ca:	f000 f8b1 	bl	8014730 <_free_r>
 80145ce:	2000      	movs	r0, #0
 80145d0:	6360      	str	r0, [r4, #52]	; 0x34
 80145d2:	e7c1      	b.n	8014558 <__sflush_r+0x1c>
 80145d4:	6a21      	ldr	r1, [r4, #32]
 80145d6:	2301      	movs	r3, #1
 80145d8:	4628      	mov	r0, r5
 80145da:	47b0      	blx	r6
 80145dc:	1c41      	adds	r1, r0, #1
 80145de:	d1c7      	bne.n	8014570 <__sflush_r+0x34>
 80145e0:	682b      	ldr	r3, [r5, #0]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d0c4      	beq.n	8014570 <__sflush_r+0x34>
 80145e6:	2b1d      	cmp	r3, #29
 80145e8:	d001      	beq.n	80145ee <__sflush_r+0xb2>
 80145ea:	2b16      	cmp	r3, #22
 80145ec:	d101      	bne.n	80145f2 <__sflush_r+0xb6>
 80145ee:	602f      	str	r7, [r5, #0]
 80145f0:	e7b1      	b.n	8014556 <__sflush_r+0x1a>
 80145f2:	89a3      	ldrh	r3, [r4, #12]
 80145f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80145f8:	81a3      	strh	r3, [r4, #12]
 80145fa:	e7ad      	b.n	8014558 <__sflush_r+0x1c>
 80145fc:	690f      	ldr	r7, [r1, #16]
 80145fe:	2f00      	cmp	r7, #0
 8014600:	d0a9      	beq.n	8014556 <__sflush_r+0x1a>
 8014602:	0793      	lsls	r3, r2, #30
 8014604:	680e      	ldr	r6, [r1, #0]
 8014606:	bf08      	it	eq
 8014608:	694b      	ldreq	r3, [r1, #20]
 801460a:	600f      	str	r7, [r1, #0]
 801460c:	bf18      	it	ne
 801460e:	2300      	movne	r3, #0
 8014610:	eba6 0807 	sub.w	r8, r6, r7
 8014614:	608b      	str	r3, [r1, #8]
 8014616:	f1b8 0f00 	cmp.w	r8, #0
 801461a:	dd9c      	ble.n	8014556 <__sflush_r+0x1a>
 801461c:	6a21      	ldr	r1, [r4, #32]
 801461e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014620:	4643      	mov	r3, r8
 8014622:	463a      	mov	r2, r7
 8014624:	4628      	mov	r0, r5
 8014626:	47b0      	blx	r6
 8014628:	2800      	cmp	r0, #0
 801462a:	dc06      	bgt.n	801463a <__sflush_r+0xfe>
 801462c:	89a3      	ldrh	r3, [r4, #12]
 801462e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014632:	81a3      	strh	r3, [r4, #12]
 8014634:	f04f 30ff 	mov.w	r0, #4294967295
 8014638:	e78e      	b.n	8014558 <__sflush_r+0x1c>
 801463a:	4407      	add	r7, r0
 801463c:	eba8 0800 	sub.w	r8, r8, r0
 8014640:	e7e9      	b.n	8014616 <__sflush_r+0xda>
 8014642:	bf00      	nop
 8014644:	20400001 	.word	0x20400001

08014648 <_fflush_r>:
 8014648:	b538      	push	{r3, r4, r5, lr}
 801464a:	690b      	ldr	r3, [r1, #16]
 801464c:	4605      	mov	r5, r0
 801464e:	460c      	mov	r4, r1
 8014650:	b913      	cbnz	r3, 8014658 <_fflush_r+0x10>
 8014652:	2500      	movs	r5, #0
 8014654:	4628      	mov	r0, r5
 8014656:	bd38      	pop	{r3, r4, r5, pc}
 8014658:	b118      	cbz	r0, 8014662 <_fflush_r+0x1a>
 801465a:	6983      	ldr	r3, [r0, #24]
 801465c:	b90b      	cbnz	r3, 8014662 <_fflush_r+0x1a>
 801465e:	f7ff fc99 	bl	8013f94 <__sinit>
 8014662:	4b14      	ldr	r3, [pc, #80]	; (80146b4 <_fflush_r+0x6c>)
 8014664:	429c      	cmp	r4, r3
 8014666:	d11b      	bne.n	80146a0 <_fflush_r+0x58>
 8014668:	686c      	ldr	r4, [r5, #4]
 801466a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d0ef      	beq.n	8014652 <_fflush_r+0xa>
 8014672:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014674:	07d0      	lsls	r0, r2, #31
 8014676:	d404      	bmi.n	8014682 <_fflush_r+0x3a>
 8014678:	0599      	lsls	r1, r3, #22
 801467a:	d402      	bmi.n	8014682 <_fflush_r+0x3a>
 801467c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801467e:	f7ff fd4c 	bl	801411a <__retarget_lock_acquire_recursive>
 8014682:	4628      	mov	r0, r5
 8014684:	4621      	mov	r1, r4
 8014686:	f7ff ff59 	bl	801453c <__sflush_r>
 801468a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801468c:	07da      	lsls	r2, r3, #31
 801468e:	4605      	mov	r5, r0
 8014690:	d4e0      	bmi.n	8014654 <_fflush_r+0xc>
 8014692:	89a3      	ldrh	r3, [r4, #12]
 8014694:	059b      	lsls	r3, r3, #22
 8014696:	d4dd      	bmi.n	8014654 <_fflush_r+0xc>
 8014698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801469a:	f7ff fd3f 	bl	801411c <__retarget_lock_release_recursive>
 801469e:	e7d9      	b.n	8014654 <_fflush_r+0xc>
 80146a0:	4b05      	ldr	r3, [pc, #20]	; (80146b8 <_fflush_r+0x70>)
 80146a2:	429c      	cmp	r4, r3
 80146a4:	d101      	bne.n	80146aa <_fflush_r+0x62>
 80146a6:	68ac      	ldr	r4, [r5, #8]
 80146a8:	e7df      	b.n	801466a <_fflush_r+0x22>
 80146aa:	4b04      	ldr	r3, [pc, #16]	; (80146bc <_fflush_r+0x74>)
 80146ac:	429c      	cmp	r4, r3
 80146ae:	bf08      	it	eq
 80146b0:	68ec      	ldreq	r4, [r5, #12]
 80146b2:	e7da      	b.n	801466a <_fflush_r+0x22>
 80146b4:	0801817c 	.word	0x0801817c
 80146b8:	0801819c 	.word	0x0801819c
 80146bc:	0801815c 	.word	0x0801815c

080146c0 <fiprintf>:
 80146c0:	b40e      	push	{r1, r2, r3}
 80146c2:	b503      	push	{r0, r1, lr}
 80146c4:	4601      	mov	r1, r0
 80146c6:	ab03      	add	r3, sp, #12
 80146c8:	4805      	ldr	r0, [pc, #20]	; (80146e0 <fiprintf+0x20>)
 80146ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80146ce:	6800      	ldr	r0, [r0, #0]
 80146d0:	9301      	str	r3, [sp, #4]
 80146d2:	f000 f8a3 	bl	801481c <_vfiprintf_r>
 80146d6:	b002      	add	sp, #8
 80146d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80146dc:	b003      	add	sp, #12
 80146de:	4770      	bx	lr
 80146e0:	20000034 	.word	0x20000034

080146e4 <_lseek_r>:
 80146e4:	b538      	push	{r3, r4, r5, lr}
 80146e6:	4d07      	ldr	r5, [pc, #28]	; (8014704 <_lseek_r+0x20>)
 80146e8:	4604      	mov	r4, r0
 80146ea:	4608      	mov	r0, r1
 80146ec:	4611      	mov	r1, r2
 80146ee:	2200      	movs	r2, #0
 80146f0:	602a      	str	r2, [r5, #0]
 80146f2:	461a      	mov	r2, r3
 80146f4:	f7ec fc76 	bl	8000fe4 <_lseek>
 80146f8:	1c43      	adds	r3, r0, #1
 80146fa:	d102      	bne.n	8014702 <_lseek_r+0x1e>
 80146fc:	682b      	ldr	r3, [r5, #0]
 80146fe:	b103      	cbz	r3, 8014702 <_lseek_r+0x1e>
 8014700:	6023      	str	r3, [r4, #0]
 8014702:	bd38      	pop	{r3, r4, r5, pc}
 8014704:	20018d84 	.word	0x20018d84

08014708 <malloc>:
 8014708:	4b02      	ldr	r3, [pc, #8]	; (8014714 <malloc+0xc>)
 801470a:	4601      	mov	r1, r0
 801470c:	6818      	ldr	r0, [r3, #0]
 801470e:	f7ff bd4d 	b.w	80141ac <_malloc_r>
 8014712:	bf00      	nop
 8014714:	20000034 	.word	0x20000034

08014718 <__malloc_lock>:
 8014718:	4801      	ldr	r0, [pc, #4]	; (8014720 <__malloc_lock+0x8>)
 801471a:	f7ff bcfe 	b.w	801411a <__retarget_lock_acquire_recursive>
 801471e:	bf00      	nop
 8014720:	20018d78 	.word	0x20018d78

08014724 <__malloc_unlock>:
 8014724:	4801      	ldr	r0, [pc, #4]	; (801472c <__malloc_unlock+0x8>)
 8014726:	f7ff bcf9 	b.w	801411c <__retarget_lock_release_recursive>
 801472a:	bf00      	nop
 801472c:	20018d78 	.word	0x20018d78

08014730 <_free_r>:
 8014730:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014732:	2900      	cmp	r1, #0
 8014734:	d044      	beq.n	80147c0 <_free_r+0x90>
 8014736:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801473a:	9001      	str	r0, [sp, #4]
 801473c:	2b00      	cmp	r3, #0
 801473e:	f1a1 0404 	sub.w	r4, r1, #4
 8014742:	bfb8      	it	lt
 8014744:	18e4      	addlt	r4, r4, r3
 8014746:	f7ff ffe7 	bl	8014718 <__malloc_lock>
 801474a:	4a1e      	ldr	r2, [pc, #120]	; (80147c4 <_free_r+0x94>)
 801474c:	9801      	ldr	r0, [sp, #4]
 801474e:	6813      	ldr	r3, [r2, #0]
 8014750:	b933      	cbnz	r3, 8014760 <_free_r+0x30>
 8014752:	6063      	str	r3, [r4, #4]
 8014754:	6014      	str	r4, [r2, #0]
 8014756:	b003      	add	sp, #12
 8014758:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801475c:	f7ff bfe2 	b.w	8014724 <__malloc_unlock>
 8014760:	42a3      	cmp	r3, r4
 8014762:	d908      	bls.n	8014776 <_free_r+0x46>
 8014764:	6825      	ldr	r5, [r4, #0]
 8014766:	1961      	adds	r1, r4, r5
 8014768:	428b      	cmp	r3, r1
 801476a:	bf01      	itttt	eq
 801476c:	6819      	ldreq	r1, [r3, #0]
 801476e:	685b      	ldreq	r3, [r3, #4]
 8014770:	1949      	addeq	r1, r1, r5
 8014772:	6021      	streq	r1, [r4, #0]
 8014774:	e7ed      	b.n	8014752 <_free_r+0x22>
 8014776:	461a      	mov	r2, r3
 8014778:	685b      	ldr	r3, [r3, #4]
 801477a:	b10b      	cbz	r3, 8014780 <_free_r+0x50>
 801477c:	42a3      	cmp	r3, r4
 801477e:	d9fa      	bls.n	8014776 <_free_r+0x46>
 8014780:	6811      	ldr	r1, [r2, #0]
 8014782:	1855      	adds	r5, r2, r1
 8014784:	42a5      	cmp	r5, r4
 8014786:	d10b      	bne.n	80147a0 <_free_r+0x70>
 8014788:	6824      	ldr	r4, [r4, #0]
 801478a:	4421      	add	r1, r4
 801478c:	1854      	adds	r4, r2, r1
 801478e:	42a3      	cmp	r3, r4
 8014790:	6011      	str	r1, [r2, #0]
 8014792:	d1e0      	bne.n	8014756 <_free_r+0x26>
 8014794:	681c      	ldr	r4, [r3, #0]
 8014796:	685b      	ldr	r3, [r3, #4]
 8014798:	6053      	str	r3, [r2, #4]
 801479a:	4421      	add	r1, r4
 801479c:	6011      	str	r1, [r2, #0]
 801479e:	e7da      	b.n	8014756 <_free_r+0x26>
 80147a0:	d902      	bls.n	80147a8 <_free_r+0x78>
 80147a2:	230c      	movs	r3, #12
 80147a4:	6003      	str	r3, [r0, #0]
 80147a6:	e7d6      	b.n	8014756 <_free_r+0x26>
 80147a8:	6825      	ldr	r5, [r4, #0]
 80147aa:	1961      	adds	r1, r4, r5
 80147ac:	428b      	cmp	r3, r1
 80147ae:	bf04      	itt	eq
 80147b0:	6819      	ldreq	r1, [r3, #0]
 80147b2:	685b      	ldreq	r3, [r3, #4]
 80147b4:	6063      	str	r3, [r4, #4]
 80147b6:	bf04      	itt	eq
 80147b8:	1949      	addeq	r1, r1, r5
 80147ba:	6021      	streq	r1, [r4, #0]
 80147bc:	6054      	str	r4, [r2, #4]
 80147be:	e7ca      	b.n	8014756 <_free_r+0x26>
 80147c0:	b003      	add	sp, #12
 80147c2:	bd30      	pop	{r4, r5, pc}
 80147c4:	20018d7c 	.word	0x20018d7c

080147c8 <__sfputc_r>:
 80147c8:	6893      	ldr	r3, [r2, #8]
 80147ca:	3b01      	subs	r3, #1
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	b410      	push	{r4}
 80147d0:	6093      	str	r3, [r2, #8]
 80147d2:	da08      	bge.n	80147e6 <__sfputc_r+0x1e>
 80147d4:	6994      	ldr	r4, [r2, #24]
 80147d6:	42a3      	cmp	r3, r4
 80147d8:	db01      	blt.n	80147de <__sfputc_r+0x16>
 80147da:	290a      	cmp	r1, #10
 80147dc:	d103      	bne.n	80147e6 <__sfputc_r+0x1e>
 80147de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147e2:	f000 baf1 	b.w	8014dc8 <__swbuf_r>
 80147e6:	6813      	ldr	r3, [r2, #0]
 80147e8:	1c58      	adds	r0, r3, #1
 80147ea:	6010      	str	r0, [r2, #0]
 80147ec:	7019      	strb	r1, [r3, #0]
 80147ee:	4608      	mov	r0, r1
 80147f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147f4:	4770      	bx	lr

080147f6 <__sfputs_r>:
 80147f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147f8:	4606      	mov	r6, r0
 80147fa:	460f      	mov	r7, r1
 80147fc:	4614      	mov	r4, r2
 80147fe:	18d5      	adds	r5, r2, r3
 8014800:	42ac      	cmp	r4, r5
 8014802:	d101      	bne.n	8014808 <__sfputs_r+0x12>
 8014804:	2000      	movs	r0, #0
 8014806:	e007      	b.n	8014818 <__sfputs_r+0x22>
 8014808:	f814 1b01 	ldrb.w	r1, [r4], #1
 801480c:	463a      	mov	r2, r7
 801480e:	4630      	mov	r0, r6
 8014810:	f7ff ffda 	bl	80147c8 <__sfputc_r>
 8014814:	1c43      	adds	r3, r0, #1
 8014816:	d1f3      	bne.n	8014800 <__sfputs_r+0xa>
 8014818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801481c <_vfiprintf_r>:
 801481c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014820:	460d      	mov	r5, r1
 8014822:	b09d      	sub	sp, #116	; 0x74
 8014824:	4614      	mov	r4, r2
 8014826:	4698      	mov	r8, r3
 8014828:	4606      	mov	r6, r0
 801482a:	b118      	cbz	r0, 8014834 <_vfiprintf_r+0x18>
 801482c:	6983      	ldr	r3, [r0, #24]
 801482e:	b90b      	cbnz	r3, 8014834 <_vfiprintf_r+0x18>
 8014830:	f7ff fbb0 	bl	8013f94 <__sinit>
 8014834:	4b89      	ldr	r3, [pc, #548]	; (8014a5c <_vfiprintf_r+0x240>)
 8014836:	429d      	cmp	r5, r3
 8014838:	d11b      	bne.n	8014872 <_vfiprintf_r+0x56>
 801483a:	6875      	ldr	r5, [r6, #4]
 801483c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801483e:	07d9      	lsls	r1, r3, #31
 8014840:	d405      	bmi.n	801484e <_vfiprintf_r+0x32>
 8014842:	89ab      	ldrh	r3, [r5, #12]
 8014844:	059a      	lsls	r2, r3, #22
 8014846:	d402      	bmi.n	801484e <_vfiprintf_r+0x32>
 8014848:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801484a:	f7ff fc66 	bl	801411a <__retarget_lock_acquire_recursive>
 801484e:	89ab      	ldrh	r3, [r5, #12]
 8014850:	071b      	lsls	r3, r3, #28
 8014852:	d501      	bpl.n	8014858 <_vfiprintf_r+0x3c>
 8014854:	692b      	ldr	r3, [r5, #16]
 8014856:	b9eb      	cbnz	r3, 8014894 <_vfiprintf_r+0x78>
 8014858:	4629      	mov	r1, r5
 801485a:	4630      	mov	r0, r6
 801485c:	f000 fb06 	bl	8014e6c <__swsetup_r>
 8014860:	b1c0      	cbz	r0, 8014894 <_vfiprintf_r+0x78>
 8014862:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014864:	07dc      	lsls	r4, r3, #31
 8014866:	d50e      	bpl.n	8014886 <_vfiprintf_r+0x6a>
 8014868:	f04f 30ff 	mov.w	r0, #4294967295
 801486c:	b01d      	add	sp, #116	; 0x74
 801486e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014872:	4b7b      	ldr	r3, [pc, #492]	; (8014a60 <_vfiprintf_r+0x244>)
 8014874:	429d      	cmp	r5, r3
 8014876:	d101      	bne.n	801487c <_vfiprintf_r+0x60>
 8014878:	68b5      	ldr	r5, [r6, #8]
 801487a:	e7df      	b.n	801483c <_vfiprintf_r+0x20>
 801487c:	4b79      	ldr	r3, [pc, #484]	; (8014a64 <_vfiprintf_r+0x248>)
 801487e:	429d      	cmp	r5, r3
 8014880:	bf08      	it	eq
 8014882:	68f5      	ldreq	r5, [r6, #12]
 8014884:	e7da      	b.n	801483c <_vfiprintf_r+0x20>
 8014886:	89ab      	ldrh	r3, [r5, #12]
 8014888:	0598      	lsls	r0, r3, #22
 801488a:	d4ed      	bmi.n	8014868 <_vfiprintf_r+0x4c>
 801488c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801488e:	f7ff fc45 	bl	801411c <__retarget_lock_release_recursive>
 8014892:	e7e9      	b.n	8014868 <_vfiprintf_r+0x4c>
 8014894:	2300      	movs	r3, #0
 8014896:	9309      	str	r3, [sp, #36]	; 0x24
 8014898:	2320      	movs	r3, #32
 801489a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801489e:	f8cd 800c 	str.w	r8, [sp, #12]
 80148a2:	2330      	movs	r3, #48	; 0x30
 80148a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014a68 <_vfiprintf_r+0x24c>
 80148a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80148ac:	f04f 0901 	mov.w	r9, #1
 80148b0:	4623      	mov	r3, r4
 80148b2:	469a      	mov	sl, r3
 80148b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80148b8:	b10a      	cbz	r2, 80148be <_vfiprintf_r+0xa2>
 80148ba:	2a25      	cmp	r2, #37	; 0x25
 80148bc:	d1f9      	bne.n	80148b2 <_vfiprintf_r+0x96>
 80148be:	ebba 0b04 	subs.w	fp, sl, r4
 80148c2:	d00b      	beq.n	80148dc <_vfiprintf_r+0xc0>
 80148c4:	465b      	mov	r3, fp
 80148c6:	4622      	mov	r2, r4
 80148c8:	4629      	mov	r1, r5
 80148ca:	4630      	mov	r0, r6
 80148cc:	f7ff ff93 	bl	80147f6 <__sfputs_r>
 80148d0:	3001      	adds	r0, #1
 80148d2:	f000 80aa 	beq.w	8014a2a <_vfiprintf_r+0x20e>
 80148d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80148d8:	445a      	add	r2, fp
 80148da:	9209      	str	r2, [sp, #36]	; 0x24
 80148dc:	f89a 3000 	ldrb.w	r3, [sl]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	f000 80a2 	beq.w	8014a2a <_vfiprintf_r+0x20e>
 80148e6:	2300      	movs	r3, #0
 80148e8:	f04f 32ff 	mov.w	r2, #4294967295
 80148ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80148f0:	f10a 0a01 	add.w	sl, sl, #1
 80148f4:	9304      	str	r3, [sp, #16]
 80148f6:	9307      	str	r3, [sp, #28]
 80148f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80148fc:	931a      	str	r3, [sp, #104]	; 0x68
 80148fe:	4654      	mov	r4, sl
 8014900:	2205      	movs	r2, #5
 8014902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014906:	4858      	ldr	r0, [pc, #352]	; (8014a68 <_vfiprintf_r+0x24c>)
 8014908:	f7eb fc62 	bl	80001d0 <memchr>
 801490c:	9a04      	ldr	r2, [sp, #16]
 801490e:	b9d8      	cbnz	r0, 8014948 <_vfiprintf_r+0x12c>
 8014910:	06d1      	lsls	r1, r2, #27
 8014912:	bf44      	itt	mi
 8014914:	2320      	movmi	r3, #32
 8014916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801491a:	0713      	lsls	r3, r2, #28
 801491c:	bf44      	itt	mi
 801491e:	232b      	movmi	r3, #43	; 0x2b
 8014920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014924:	f89a 3000 	ldrb.w	r3, [sl]
 8014928:	2b2a      	cmp	r3, #42	; 0x2a
 801492a:	d015      	beq.n	8014958 <_vfiprintf_r+0x13c>
 801492c:	9a07      	ldr	r2, [sp, #28]
 801492e:	4654      	mov	r4, sl
 8014930:	2000      	movs	r0, #0
 8014932:	f04f 0c0a 	mov.w	ip, #10
 8014936:	4621      	mov	r1, r4
 8014938:	f811 3b01 	ldrb.w	r3, [r1], #1
 801493c:	3b30      	subs	r3, #48	; 0x30
 801493e:	2b09      	cmp	r3, #9
 8014940:	d94e      	bls.n	80149e0 <_vfiprintf_r+0x1c4>
 8014942:	b1b0      	cbz	r0, 8014972 <_vfiprintf_r+0x156>
 8014944:	9207      	str	r2, [sp, #28]
 8014946:	e014      	b.n	8014972 <_vfiprintf_r+0x156>
 8014948:	eba0 0308 	sub.w	r3, r0, r8
 801494c:	fa09 f303 	lsl.w	r3, r9, r3
 8014950:	4313      	orrs	r3, r2
 8014952:	9304      	str	r3, [sp, #16]
 8014954:	46a2      	mov	sl, r4
 8014956:	e7d2      	b.n	80148fe <_vfiprintf_r+0xe2>
 8014958:	9b03      	ldr	r3, [sp, #12]
 801495a:	1d19      	adds	r1, r3, #4
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	9103      	str	r1, [sp, #12]
 8014960:	2b00      	cmp	r3, #0
 8014962:	bfbb      	ittet	lt
 8014964:	425b      	neglt	r3, r3
 8014966:	f042 0202 	orrlt.w	r2, r2, #2
 801496a:	9307      	strge	r3, [sp, #28]
 801496c:	9307      	strlt	r3, [sp, #28]
 801496e:	bfb8      	it	lt
 8014970:	9204      	strlt	r2, [sp, #16]
 8014972:	7823      	ldrb	r3, [r4, #0]
 8014974:	2b2e      	cmp	r3, #46	; 0x2e
 8014976:	d10c      	bne.n	8014992 <_vfiprintf_r+0x176>
 8014978:	7863      	ldrb	r3, [r4, #1]
 801497a:	2b2a      	cmp	r3, #42	; 0x2a
 801497c:	d135      	bne.n	80149ea <_vfiprintf_r+0x1ce>
 801497e:	9b03      	ldr	r3, [sp, #12]
 8014980:	1d1a      	adds	r2, r3, #4
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	9203      	str	r2, [sp, #12]
 8014986:	2b00      	cmp	r3, #0
 8014988:	bfb8      	it	lt
 801498a:	f04f 33ff 	movlt.w	r3, #4294967295
 801498e:	3402      	adds	r4, #2
 8014990:	9305      	str	r3, [sp, #20]
 8014992:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014a78 <_vfiprintf_r+0x25c>
 8014996:	7821      	ldrb	r1, [r4, #0]
 8014998:	2203      	movs	r2, #3
 801499a:	4650      	mov	r0, sl
 801499c:	f7eb fc18 	bl	80001d0 <memchr>
 80149a0:	b140      	cbz	r0, 80149b4 <_vfiprintf_r+0x198>
 80149a2:	2340      	movs	r3, #64	; 0x40
 80149a4:	eba0 000a 	sub.w	r0, r0, sl
 80149a8:	fa03 f000 	lsl.w	r0, r3, r0
 80149ac:	9b04      	ldr	r3, [sp, #16]
 80149ae:	4303      	orrs	r3, r0
 80149b0:	3401      	adds	r4, #1
 80149b2:	9304      	str	r3, [sp, #16]
 80149b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149b8:	482c      	ldr	r0, [pc, #176]	; (8014a6c <_vfiprintf_r+0x250>)
 80149ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80149be:	2206      	movs	r2, #6
 80149c0:	f7eb fc06 	bl	80001d0 <memchr>
 80149c4:	2800      	cmp	r0, #0
 80149c6:	d03f      	beq.n	8014a48 <_vfiprintf_r+0x22c>
 80149c8:	4b29      	ldr	r3, [pc, #164]	; (8014a70 <_vfiprintf_r+0x254>)
 80149ca:	bb1b      	cbnz	r3, 8014a14 <_vfiprintf_r+0x1f8>
 80149cc:	9b03      	ldr	r3, [sp, #12]
 80149ce:	3307      	adds	r3, #7
 80149d0:	f023 0307 	bic.w	r3, r3, #7
 80149d4:	3308      	adds	r3, #8
 80149d6:	9303      	str	r3, [sp, #12]
 80149d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149da:	443b      	add	r3, r7
 80149dc:	9309      	str	r3, [sp, #36]	; 0x24
 80149de:	e767      	b.n	80148b0 <_vfiprintf_r+0x94>
 80149e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80149e4:	460c      	mov	r4, r1
 80149e6:	2001      	movs	r0, #1
 80149e8:	e7a5      	b.n	8014936 <_vfiprintf_r+0x11a>
 80149ea:	2300      	movs	r3, #0
 80149ec:	3401      	adds	r4, #1
 80149ee:	9305      	str	r3, [sp, #20]
 80149f0:	4619      	mov	r1, r3
 80149f2:	f04f 0c0a 	mov.w	ip, #10
 80149f6:	4620      	mov	r0, r4
 80149f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80149fc:	3a30      	subs	r2, #48	; 0x30
 80149fe:	2a09      	cmp	r2, #9
 8014a00:	d903      	bls.n	8014a0a <_vfiprintf_r+0x1ee>
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d0c5      	beq.n	8014992 <_vfiprintf_r+0x176>
 8014a06:	9105      	str	r1, [sp, #20]
 8014a08:	e7c3      	b.n	8014992 <_vfiprintf_r+0x176>
 8014a0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8014a0e:	4604      	mov	r4, r0
 8014a10:	2301      	movs	r3, #1
 8014a12:	e7f0      	b.n	80149f6 <_vfiprintf_r+0x1da>
 8014a14:	ab03      	add	r3, sp, #12
 8014a16:	9300      	str	r3, [sp, #0]
 8014a18:	462a      	mov	r2, r5
 8014a1a:	4b16      	ldr	r3, [pc, #88]	; (8014a74 <_vfiprintf_r+0x258>)
 8014a1c:	a904      	add	r1, sp, #16
 8014a1e:	4630      	mov	r0, r6
 8014a20:	f3af 8000 	nop.w
 8014a24:	4607      	mov	r7, r0
 8014a26:	1c78      	adds	r0, r7, #1
 8014a28:	d1d6      	bne.n	80149d8 <_vfiprintf_r+0x1bc>
 8014a2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a2c:	07d9      	lsls	r1, r3, #31
 8014a2e:	d405      	bmi.n	8014a3c <_vfiprintf_r+0x220>
 8014a30:	89ab      	ldrh	r3, [r5, #12]
 8014a32:	059a      	lsls	r2, r3, #22
 8014a34:	d402      	bmi.n	8014a3c <_vfiprintf_r+0x220>
 8014a36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a38:	f7ff fb70 	bl	801411c <__retarget_lock_release_recursive>
 8014a3c:	89ab      	ldrh	r3, [r5, #12]
 8014a3e:	065b      	lsls	r3, r3, #25
 8014a40:	f53f af12 	bmi.w	8014868 <_vfiprintf_r+0x4c>
 8014a44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a46:	e711      	b.n	801486c <_vfiprintf_r+0x50>
 8014a48:	ab03      	add	r3, sp, #12
 8014a4a:	9300      	str	r3, [sp, #0]
 8014a4c:	462a      	mov	r2, r5
 8014a4e:	4b09      	ldr	r3, [pc, #36]	; (8014a74 <_vfiprintf_r+0x258>)
 8014a50:	a904      	add	r1, sp, #16
 8014a52:	4630      	mov	r0, r6
 8014a54:	f000 f880 	bl	8014b58 <_printf_i>
 8014a58:	e7e4      	b.n	8014a24 <_vfiprintf_r+0x208>
 8014a5a:	bf00      	nop
 8014a5c:	0801817c 	.word	0x0801817c
 8014a60:	0801819c 	.word	0x0801819c
 8014a64:	0801815c 	.word	0x0801815c
 8014a68:	0801826e 	.word	0x0801826e
 8014a6c:	08018278 	.word	0x08018278
 8014a70:	00000000 	.word	0x00000000
 8014a74:	080147f7 	.word	0x080147f7
 8014a78:	08018274 	.word	0x08018274

08014a7c <_printf_common>:
 8014a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a80:	4616      	mov	r6, r2
 8014a82:	4699      	mov	r9, r3
 8014a84:	688a      	ldr	r2, [r1, #8]
 8014a86:	690b      	ldr	r3, [r1, #16]
 8014a88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014a8c:	4293      	cmp	r3, r2
 8014a8e:	bfb8      	it	lt
 8014a90:	4613      	movlt	r3, r2
 8014a92:	6033      	str	r3, [r6, #0]
 8014a94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014a98:	4607      	mov	r7, r0
 8014a9a:	460c      	mov	r4, r1
 8014a9c:	b10a      	cbz	r2, 8014aa2 <_printf_common+0x26>
 8014a9e:	3301      	adds	r3, #1
 8014aa0:	6033      	str	r3, [r6, #0]
 8014aa2:	6823      	ldr	r3, [r4, #0]
 8014aa4:	0699      	lsls	r1, r3, #26
 8014aa6:	bf42      	ittt	mi
 8014aa8:	6833      	ldrmi	r3, [r6, #0]
 8014aaa:	3302      	addmi	r3, #2
 8014aac:	6033      	strmi	r3, [r6, #0]
 8014aae:	6825      	ldr	r5, [r4, #0]
 8014ab0:	f015 0506 	ands.w	r5, r5, #6
 8014ab4:	d106      	bne.n	8014ac4 <_printf_common+0x48>
 8014ab6:	f104 0a19 	add.w	sl, r4, #25
 8014aba:	68e3      	ldr	r3, [r4, #12]
 8014abc:	6832      	ldr	r2, [r6, #0]
 8014abe:	1a9b      	subs	r3, r3, r2
 8014ac0:	42ab      	cmp	r3, r5
 8014ac2:	dc26      	bgt.n	8014b12 <_printf_common+0x96>
 8014ac4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014ac8:	1e13      	subs	r3, r2, #0
 8014aca:	6822      	ldr	r2, [r4, #0]
 8014acc:	bf18      	it	ne
 8014ace:	2301      	movne	r3, #1
 8014ad0:	0692      	lsls	r2, r2, #26
 8014ad2:	d42b      	bmi.n	8014b2c <_printf_common+0xb0>
 8014ad4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014ad8:	4649      	mov	r1, r9
 8014ada:	4638      	mov	r0, r7
 8014adc:	47c0      	blx	r8
 8014ade:	3001      	adds	r0, #1
 8014ae0:	d01e      	beq.n	8014b20 <_printf_common+0xa4>
 8014ae2:	6823      	ldr	r3, [r4, #0]
 8014ae4:	68e5      	ldr	r5, [r4, #12]
 8014ae6:	6832      	ldr	r2, [r6, #0]
 8014ae8:	f003 0306 	and.w	r3, r3, #6
 8014aec:	2b04      	cmp	r3, #4
 8014aee:	bf08      	it	eq
 8014af0:	1aad      	subeq	r5, r5, r2
 8014af2:	68a3      	ldr	r3, [r4, #8]
 8014af4:	6922      	ldr	r2, [r4, #16]
 8014af6:	bf0c      	ite	eq
 8014af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014afc:	2500      	movne	r5, #0
 8014afe:	4293      	cmp	r3, r2
 8014b00:	bfc4      	itt	gt
 8014b02:	1a9b      	subgt	r3, r3, r2
 8014b04:	18ed      	addgt	r5, r5, r3
 8014b06:	2600      	movs	r6, #0
 8014b08:	341a      	adds	r4, #26
 8014b0a:	42b5      	cmp	r5, r6
 8014b0c:	d11a      	bne.n	8014b44 <_printf_common+0xc8>
 8014b0e:	2000      	movs	r0, #0
 8014b10:	e008      	b.n	8014b24 <_printf_common+0xa8>
 8014b12:	2301      	movs	r3, #1
 8014b14:	4652      	mov	r2, sl
 8014b16:	4649      	mov	r1, r9
 8014b18:	4638      	mov	r0, r7
 8014b1a:	47c0      	blx	r8
 8014b1c:	3001      	adds	r0, #1
 8014b1e:	d103      	bne.n	8014b28 <_printf_common+0xac>
 8014b20:	f04f 30ff 	mov.w	r0, #4294967295
 8014b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b28:	3501      	adds	r5, #1
 8014b2a:	e7c6      	b.n	8014aba <_printf_common+0x3e>
 8014b2c:	18e1      	adds	r1, r4, r3
 8014b2e:	1c5a      	adds	r2, r3, #1
 8014b30:	2030      	movs	r0, #48	; 0x30
 8014b32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014b36:	4422      	add	r2, r4
 8014b38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014b3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014b40:	3302      	adds	r3, #2
 8014b42:	e7c7      	b.n	8014ad4 <_printf_common+0x58>
 8014b44:	2301      	movs	r3, #1
 8014b46:	4622      	mov	r2, r4
 8014b48:	4649      	mov	r1, r9
 8014b4a:	4638      	mov	r0, r7
 8014b4c:	47c0      	blx	r8
 8014b4e:	3001      	adds	r0, #1
 8014b50:	d0e6      	beq.n	8014b20 <_printf_common+0xa4>
 8014b52:	3601      	adds	r6, #1
 8014b54:	e7d9      	b.n	8014b0a <_printf_common+0x8e>
	...

08014b58 <_printf_i>:
 8014b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014b5c:	7e0f      	ldrb	r7, [r1, #24]
 8014b5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014b60:	2f78      	cmp	r7, #120	; 0x78
 8014b62:	4691      	mov	r9, r2
 8014b64:	4680      	mov	r8, r0
 8014b66:	460c      	mov	r4, r1
 8014b68:	469a      	mov	sl, r3
 8014b6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014b6e:	d807      	bhi.n	8014b80 <_printf_i+0x28>
 8014b70:	2f62      	cmp	r7, #98	; 0x62
 8014b72:	d80a      	bhi.n	8014b8a <_printf_i+0x32>
 8014b74:	2f00      	cmp	r7, #0
 8014b76:	f000 80d8 	beq.w	8014d2a <_printf_i+0x1d2>
 8014b7a:	2f58      	cmp	r7, #88	; 0x58
 8014b7c:	f000 80a3 	beq.w	8014cc6 <_printf_i+0x16e>
 8014b80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014b84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014b88:	e03a      	b.n	8014c00 <_printf_i+0xa8>
 8014b8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014b8e:	2b15      	cmp	r3, #21
 8014b90:	d8f6      	bhi.n	8014b80 <_printf_i+0x28>
 8014b92:	a101      	add	r1, pc, #4	; (adr r1, 8014b98 <_printf_i+0x40>)
 8014b94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014b98:	08014bf1 	.word	0x08014bf1
 8014b9c:	08014c05 	.word	0x08014c05
 8014ba0:	08014b81 	.word	0x08014b81
 8014ba4:	08014b81 	.word	0x08014b81
 8014ba8:	08014b81 	.word	0x08014b81
 8014bac:	08014b81 	.word	0x08014b81
 8014bb0:	08014c05 	.word	0x08014c05
 8014bb4:	08014b81 	.word	0x08014b81
 8014bb8:	08014b81 	.word	0x08014b81
 8014bbc:	08014b81 	.word	0x08014b81
 8014bc0:	08014b81 	.word	0x08014b81
 8014bc4:	08014d11 	.word	0x08014d11
 8014bc8:	08014c35 	.word	0x08014c35
 8014bcc:	08014cf3 	.word	0x08014cf3
 8014bd0:	08014b81 	.word	0x08014b81
 8014bd4:	08014b81 	.word	0x08014b81
 8014bd8:	08014d33 	.word	0x08014d33
 8014bdc:	08014b81 	.word	0x08014b81
 8014be0:	08014c35 	.word	0x08014c35
 8014be4:	08014b81 	.word	0x08014b81
 8014be8:	08014b81 	.word	0x08014b81
 8014bec:	08014cfb 	.word	0x08014cfb
 8014bf0:	682b      	ldr	r3, [r5, #0]
 8014bf2:	1d1a      	adds	r2, r3, #4
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	602a      	str	r2, [r5, #0]
 8014bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014bfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014c00:	2301      	movs	r3, #1
 8014c02:	e0a3      	b.n	8014d4c <_printf_i+0x1f4>
 8014c04:	6820      	ldr	r0, [r4, #0]
 8014c06:	6829      	ldr	r1, [r5, #0]
 8014c08:	0606      	lsls	r6, r0, #24
 8014c0a:	f101 0304 	add.w	r3, r1, #4
 8014c0e:	d50a      	bpl.n	8014c26 <_printf_i+0xce>
 8014c10:	680e      	ldr	r6, [r1, #0]
 8014c12:	602b      	str	r3, [r5, #0]
 8014c14:	2e00      	cmp	r6, #0
 8014c16:	da03      	bge.n	8014c20 <_printf_i+0xc8>
 8014c18:	232d      	movs	r3, #45	; 0x2d
 8014c1a:	4276      	negs	r6, r6
 8014c1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014c20:	485e      	ldr	r0, [pc, #376]	; (8014d9c <_printf_i+0x244>)
 8014c22:	230a      	movs	r3, #10
 8014c24:	e019      	b.n	8014c5a <_printf_i+0x102>
 8014c26:	680e      	ldr	r6, [r1, #0]
 8014c28:	602b      	str	r3, [r5, #0]
 8014c2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014c2e:	bf18      	it	ne
 8014c30:	b236      	sxthne	r6, r6
 8014c32:	e7ef      	b.n	8014c14 <_printf_i+0xbc>
 8014c34:	682b      	ldr	r3, [r5, #0]
 8014c36:	6820      	ldr	r0, [r4, #0]
 8014c38:	1d19      	adds	r1, r3, #4
 8014c3a:	6029      	str	r1, [r5, #0]
 8014c3c:	0601      	lsls	r1, r0, #24
 8014c3e:	d501      	bpl.n	8014c44 <_printf_i+0xec>
 8014c40:	681e      	ldr	r6, [r3, #0]
 8014c42:	e002      	b.n	8014c4a <_printf_i+0xf2>
 8014c44:	0646      	lsls	r6, r0, #25
 8014c46:	d5fb      	bpl.n	8014c40 <_printf_i+0xe8>
 8014c48:	881e      	ldrh	r6, [r3, #0]
 8014c4a:	4854      	ldr	r0, [pc, #336]	; (8014d9c <_printf_i+0x244>)
 8014c4c:	2f6f      	cmp	r7, #111	; 0x6f
 8014c4e:	bf0c      	ite	eq
 8014c50:	2308      	moveq	r3, #8
 8014c52:	230a      	movne	r3, #10
 8014c54:	2100      	movs	r1, #0
 8014c56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014c5a:	6865      	ldr	r5, [r4, #4]
 8014c5c:	60a5      	str	r5, [r4, #8]
 8014c5e:	2d00      	cmp	r5, #0
 8014c60:	bfa2      	ittt	ge
 8014c62:	6821      	ldrge	r1, [r4, #0]
 8014c64:	f021 0104 	bicge.w	r1, r1, #4
 8014c68:	6021      	strge	r1, [r4, #0]
 8014c6a:	b90e      	cbnz	r6, 8014c70 <_printf_i+0x118>
 8014c6c:	2d00      	cmp	r5, #0
 8014c6e:	d04d      	beq.n	8014d0c <_printf_i+0x1b4>
 8014c70:	4615      	mov	r5, r2
 8014c72:	fbb6 f1f3 	udiv	r1, r6, r3
 8014c76:	fb03 6711 	mls	r7, r3, r1, r6
 8014c7a:	5dc7      	ldrb	r7, [r0, r7]
 8014c7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014c80:	4637      	mov	r7, r6
 8014c82:	42bb      	cmp	r3, r7
 8014c84:	460e      	mov	r6, r1
 8014c86:	d9f4      	bls.n	8014c72 <_printf_i+0x11a>
 8014c88:	2b08      	cmp	r3, #8
 8014c8a:	d10b      	bne.n	8014ca4 <_printf_i+0x14c>
 8014c8c:	6823      	ldr	r3, [r4, #0]
 8014c8e:	07de      	lsls	r6, r3, #31
 8014c90:	d508      	bpl.n	8014ca4 <_printf_i+0x14c>
 8014c92:	6923      	ldr	r3, [r4, #16]
 8014c94:	6861      	ldr	r1, [r4, #4]
 8014c96:	4299      	cmp	r1, r3
 8014c98:	bfde      	ittt	le
 8014c9a:	2330      	movle	r3, #48	; 0x30
 8014c9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014ca0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014ca4:	1b52      	subs	r2, r2, r5
 8014ca6:	6122      	str	r2, [r4, #16]
 8014ca8:	f8cd a000 	str.w	sl, [sp]
 8014cac:	464b      	mov	r3, r9
 8014cae:	aa03      	add	r2, sp, #12
 8014cb0:	4621      	mov	r1, r4
 8014cb2:	4640      	mov	r0, r8
 8014cb4:	f7ff fee2 	bl	8014a7c <_printf_common>
 8014cb8:	3001      	adds	r0, #1
 8014cba:	d14c      	bne.n	8014d56 <_printf_i+0x1fe>
 8014cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8014cc0:	b004      	add	sp, #16
 8014cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cc6:	4835      	ldr	r0, [pc, #212]	; (8014d9c <_printf_i+0x244>)
 8014cc8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014ccc:	6829      	ldr	r1, [r5, #0]
 8014cce:	6823      	ldr	r3, [r4, #0]
 8014cd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8014cd4:	6029      	str	r1, [r5, #0]
 8014cd6:	061d      	lsls	r5, r3, #24
 8014cd8:	d514      	bpl.n	8014d04 <_printf_i+0x1ac>
 8014cda:	07df      	lsls	r7, r3, #31
 8014cdc:	bf44      	itt	mi
 8014cde:	f043 0320 	orrmi.w	r3, r3, #32
 8014ce2:	6023      	strmi	r3, [r4, #0]
 8014ce4:	b91e      	cbnz	r6, 8014cee <_printf_i+0x196>
 8014ce6:	6823      	ldr	r3, [r4, #0]
 8014ce8:	f023 0320 	bic.w	r3, r3, #32
 8014cec:	6023      	str	r3, [r4, #0]
 8014cee:	2310      	movs	r3, #16
 8014cf0:	e7b0      	b.n	8014c54 <_printf_i+0xfc>
 8014cf2:	6823      	ldr	r3, [r4, #0]
 8014cf4:	f043 0320 	orr.w	r3, r3, #32
 8014cf8:	6023      	str	r3, [r4, #0]
 8014cfa:	2378      	movs	r3, #120	; 0x78
 8014cfc:	4828      	ldr	r0, [pc, #160]	; (8014da0 <_printf_i+0x248>)
 8014cfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014d02:	e7e3      	b.n	8014ccc <_printf_i+0x174>
 8014d04:	0659      	lsls	r1, r3, #25
 8014d06:	bf48      	it	mi
 8014d08:	b2b6      	uxthmi	r6, r6
 8014d0a:	e7e6      	b.n	8014cda <_printf_i+0x182>
 8014d0c:	4615      	mov	r5, r2
 8014d0e:	e7bb      	b.n	8014c88 <_printf_i+0x130>
 8014d10:	682b      	ldr	r3, [r5, #0]
 8014d12:	6826      	ldr	r6, [r4, #0]
 8014d14:	6961      	ldr	r1, [r4, #20]
 8014d16:	1d18      	adds	r0, r3, #4
 8014d18:	6028      	str	r0, [r5, #0]
 8014d1a:	0635      	lsls	r5, r6, #24
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	d501      	bpl.n	8014d24 <_printf_i+0x1cc>
 8014d20:	6019      	str	r1, [r3, #0]
 8014d22:	e002      	b.n	8014d2a <_printf_i+0x1d2>
 8014d24:	0670      	lsls	r0, r6, #25
 8014d26:	d5fb      	bpl.n	8014d20 <_printf_i+0x1c8>
 8014d28:	8019      	strh	r1, [r3, #0]
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	6123      	str	r3, [r4, #16]
 8014d2e:	4615      	mov	r5, r2
 8014d30:	e7ba      	b.n	8014ca8 <_printf_i+0x150>
 8014d32:	682b      	ldr	r3, [r5, #0]
 8014d34:	1d1a      	adds	r2, r3, #4
 8014d36:	602a      	str	r2, [r5, #0]
 8014d38:	681d      	ldr	r5, [r3, #0]
 8014d3a:	6862      	ldr	r2, [r4, #4]
 8014d3c:	2100      	movs	r1, #0
 8014d3e:	4628      	mov	r0, r5
 8014d40:	f7eb fa46 	bl	80001d0 <memchr>
 8014d44:	b108      	cbz	r0, 8014d4a <_printf_i+0x1f2>
 8014d46:	1b40      	subs	r0, r0, r5
 8014d48:	6060      	str	r0, [r4, #4]
 8014d4a:	6863      	ldr	r3, [r4, #4]
 8014d4c:	6123      	str	r3, [r4, #16]
 8014d4e:	2300      	movs	r3, #0
 8014d50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014d54:	e7a8      	b.n	8014ca8 <_printf_i+0x150>
 8014d56:	6923      	ldr	r3, [r4, #16]
 8014d58:	462a      	mov	r2, r5
 8014d5a:	4649      	mov	r1, r9
 8014d5c:	4640      	mov	r0, r8
 8014d5e:	47d0      	blx	sl
 8014d60:	3001      	adds	r0, #1
 8014d62:	d0ab      	beq.n	8014cbc <_printf_i+0x164>
 8014d64:	6823      	ldr	r3, [r4, #0]
 8014d66:	079b      	lsls	r3, r3, #30
 8014d68:	d413      	bmi.n	8014d92 <_printf_i+0x23a>
 8014d6a:	68e0      	ldr	r0, [r4, #12]
 8014d6c:	9b03      	ldr	r3, [sp, #12]
 8014d6e:	4298      	cmp	r0, r3
 8014d70:	bfb8      	it	lt
 8014d72:	4618      	movlt	r0, r3
 8014d74:	e7a4      	b.n	8014cc0 <_printf_i+0x168>
 8014d76:	2301      	movs	r3, #1
 8014d78:	4632      	mov	r2, r6
 8014d7a:	4649      	mov	r1, r9
 8014d7c:	4640      	mov	r0, r8
 8014d7e:	47d0      	blx	sl
 8014d80:	3001      	adds	r0, #1
 8014d82:	d09b      	beq.n	8014cbc <_printf_i+0x164>
 8014d84:	3501      	adds	r5, #1
 8014d86:	68e3      	ldr	r3, [r4, #12]
 8014d88:	9903      	ldr	r1, [sp, #12]
 8014d8a:	1a5b      	subs	r3, r3, r1
 8014d8c:	42ab      	cmp	r3, r5
 8014d8e:	dcf2      	bgt.n	8014d76 <_printf_i+0x21e>
 8014d90:	e7eb      	b.n	8014d6a <_printf_i+0x212>
 8014d92:	2500      	movs	r5, #0
 8014d94:	f104 0619 	add.w	r6, r4, #25
 8014d98:	e7f5      	b.n	8014d86 <_printf_i+0x22e>
 8014d9a:	bf00      	nop
 8014d9c:	0801827f 	.word	0x0801827f
 8014da0:	08018290 	.word	0x08018290

08014da4 <_read_r>:
 8014da4:	b538      	push	{r3, r4, r5, lr}
 8014da6:	4d07      	ldr	r5, [pc, #28]	; (8014dc4 <_read_r+0x20>)
 8014da8:	4604      	mov	r4, r0
 8014daa:	4608      	mov	r0, r1
 8014dac:	4611      	mov	r1, r2
 8014dae:	2200      	movs	r2, #0
 8014db0:	602a      	str	r2, [r5, #0]
 8014db2:	461a      	mov	r2, r3
 8014db4:	f7ec f8b6 	bl	8000f24 <_read>
 8014db8:	1c43      	adds	r3, r0, #1
 8014dba:	d102      	bne.n	8014dc2 <_read_r+0x1e>
 8014dbc:	682b      	ldr	r3, [r5, #0]
 8014dbe:	b103      	cbz	r3, 8014dc2 <_read_r+0x1e>
 8014dc0:	6023      	str	r3, [r4, #0]
 8014dc2:	bd38      	pop	{r3, r4, r5, pc}
 8014dc4:	20018d84 	.word	0x20018d84

08014dc8 <__swbuf_r>:
 8014dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dca:	460e      	mov	r6, r1
 8014dcc:	4614      	mov	r4, r2
 8014dce:	4605      	mov	r5, r0
 8014dd0:	b118      	cbz	r0, 8014dda <__swbuf_r+0x12>
 8014dd2:	6983      	ldr	r3, [r0, #24]
 8014dd4:	b90b      	cbnz	r3, 8014dda <__swbuf_r+0x12>
 8014dd6:	f7ff f8dd 	bl	8013f94 <__sinit>
 8014dda:	4b21      	ldr	r3, [pc, #132]	; (8014e60 <__swbuf_r+0x98>)
 8014ddc:	429c      	cmp	r4, r3
 8014dde:	d12b      	bne.n	8014e38 <__swbuf_r+0x70>
 8014de0:	686c      	ldr	r4, [r5, #4]
 8014de2:	69a3      	ldr	r3, [r4, #24]
 8014de4:	60a3      	str	r3, [r4, #8]
 8014de6:	89a3      	ldrh	r3, [r4, #12]
 8014de8:	071a      	lsls	r2, r3, #28
 8014dea:	d52f      	bpl.n	8014e4c <__swbuf_r+0x84>
 8014dec:	6923      	ldr	r3, [r4, #16]
 8014dee:	b36b      	cbz	r3, 8014e4c <__swbuf_r+0x84>
 8014df0:	6923      	ldr	r3, [r4, #16]
 8014df2:	6820      	ldr	r0, [r4, #0]
 8014df4:	1ac0      	subs	r0, r0, r3
 8014df6:	6963      	ldr	r3, [r4, #20]
 8014df8:	b2f6      	uxtb	r6, r6
 8014dfa:	4283      	cmp	r3, r0
 8014dfc:	4637      	mov	r7, r6
 8014dfe:	dc04      	bgt.n	8014e0a <__swbuf_r+0x42>
 8014e00:	4621      	mov	r1, r4
 8014e02:	4628      	mov	r0, r5
 8014e04:	f7ff fc20 	bl	8014648 <_fflush_r>
 8014e08:	bb30      	cbnz	r0, 8014e58 <__swbuf_r+0x90>
 8014e0a:	68a3      	ldr	r3, [r4, #8]
 8014e0c:	3b01      	subs	r3, #1
 8014e0e:	60a3      	str	r3, [r4, #8]
 8014e10:	6823      	ldr	r3, [r4, #0]
 8014e12:	1c5a      	adds	r2, r3, #1
 8014e14:	6022      	str	r2, [r4, #0]
 8014e16:	701e      	strb	r6, [r3, #0]
 8014e18:	6963      	ldr	r3, [r4, #20]
 8014e1a:	3001      	adds	r0, #1
 8014e1c:	4283      	cmp	r3, r0
 8014e1e:	d004      	beq.n	8014e2a <__swbuf_r+0x62>
 8014e20:	89a3      	ldrh	r3, [r4, #12]
 8014e22:	07db      	lsls	r3, r3, #31
 8014e24:	d506      	bpl.n	8014e34 <__swbuf_r+0x6c>
 8014e26:	2e0a      	cmp	r6, #10
 8014e28:	d104      	bne.n	8014e34 <__swbuf_r+0x6c>
 8014e2a:	4621      	mov	r1, r4
 8014e2c:	4628      	mov	r0, r5
 8014e2e:	f7ff fc0b 	bl	8014648 <_fflush_r>
 8014e32:	b988      	cbnz	r0, 8014e58 <__swbuf_r+0x90>
 8014e34:	4638      	mov	r0, r7
 8014e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e38:	4b0a      	ldr	r3, [pc, #40]	; (8014e64 <__swbuf_r+0x9c>)
 8014e3a:	429c      	cmp	r4, r3
 8014e3c:	d101      	bne.n	8014e42 <__swbuf_r+0x7a>
 8014e3e:	68ac      	ldr	r4, [r5, #8]
 8014e40:	e7cf      	b.n	8014de2 <__swbuf_r+0x1a>
 8014e42:	4b09      	ldr	r3, [pc, #36]	; (8014e68 <__swbuf_r+0xa0>)
 8014e44:	429c      	cmp	r4, r3
 8014e46:	bf08      	it	eq
 8014e48:	68ec      	ldreq	r4, [r5, #12]
 8014e4a:	e7ca      	b.n	8014de2 <__swbuf_r+0x1a>
 8014e4c:	4621      	mov	r1, r4
 8014e4e:	4628      	mov	r0, r5
 8014e50:	f000 f80c 	bl	8014e6c <__swsetup_r>
 8014e54:	2800      	cmp	r0, #0
 8014e56:	d0cb      	beq.n	8014df0 <__swbuf_r+0x28>
 8014e58:	f04f 37ff 	mov.w	r7, #4294967295
 8014e5c:	e7ea      	b.n	8014e34 <__swbuf_r+0x6c>
 8014e5e:	bf00      	nop
 8014e60:	0801817c 	.word	0x0801817c
 8014e64:	0801819c 	.word	0x0801819c
 8014e68:	0801815c 	.word	0x0801815c

08014e6c <__swsetup_r>:
 8014e6c:	4b32      	ldr	r3, [pc, #200]	; (8014f38 <__swsetup_r+0xcc>)
 8014e6e:	b570      	push	{r4, r5, r6, lr}
 8014e70:	681d      	ldr	r5, [r3, #0]
 8014e72:	4606      	mov	r6, r0
 8014e74:	460c      	mov	r4, r1
 8014e76:	b125      	cbz	r5, 8014e82 <__swsetup_r+0x16>
 8014e78:	69ab      	ldr	r3, [r5, #24]
 8014e7a:	b913      	cbnz	r3, 8014e82 <__swsetup_r+0x16>
 8014e7c:	4628      	mov	r0, r5
 8014e7e:	f7ff f889 	bl	8013f94 <__sinit>
 8014e82:	4b2e      	ldr	r3, [pc, #184]	; (8014f3c <__swsetup_r+0xd0>)
 8014e84:	429c      	cmp	r4, r3
 8014e86:	d10f      	bne.n	8014ea8 <__swsetup_r+0x3c>
 8014e88:	686c      	ldr	r4, [r5, #4]
 8014e8a:	89a3      	ldrh	r3, [r4, #12]
 8014e8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014e90:	0719      	lsls	r1, r3, #28
 8014e92:	d42c      	bmi.n	8014eee <__swsetup_r+0x82>
 8014e94:	06dd      	lsls	r5, r3, #27
 8014e96:	d411      	bmi.n	8014ebc <__swsetup_r+0x50>
 8014e98:	2309      	movs	r3, #9
 8014e9a:	6033      	str	r3, [r6, #0]
 8014e9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014ea0:	81a3      	strh	r3, [r4, #12]
 8014ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8014ea6:	e03e      	b.n	8014f26 <__swsetup_r+0xba>
 8014ea8:	4b25      	ldr	r3, [pc, #148]	; (8014f40 <__swsetup_r+0xd4>)
 8014eaa:	429c      	cmp	r4, r3
 8014eac:	d101      	bne.n	8014eb2 <__swsetup_r+0x46>
 8014eae:	68ac      	ldr	r4, [r5, #8]
 8014eb0:	e7eb      	b.n	8014e8a <__swsetup_r+0x1e>
 8014eb2:	4b24      	ldr	r3, [pc, #144]	; (8014f44 <__swsetup_r+0xd8>)
 8014eb4:	429c      	cmp	r4, r3
 8014eb6:	bf08      	it	eq
 8014eb8:	68ec      	ldreq	r4, [r5, #12]
 8014eba:	e7e6      	b.n	8014e8a <__swsetup_r+0x1e>
 8014ebc:	0758      	lsls	r0, r3, #29
 8014ebe:	d512      	bpl.n	8014ee6 <__swsetup_r+0x7a>
 8014ec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014ec2:	b141      	cbz	r1, 8014ed6 <__swsetup_r+0x6a>
 8014ec4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014ec8:	4299      	cmp	r1, r3
 8014eca:	d002      	beq.n	8014ed2 <__swsetup_r+0x66>
 8014ecc:	4630      	mov	r0, r6
 8014ece:	f7ff fc2f 	bl	8014730 <_free_r>
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	6363      	str	r3, [r4, #52]	; 0x34
 8014ed6:	89a3      	ldrh	r3, [r4, #12]
 8014ed8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014edc:	81a3      	strh	r3, [r4, #12]
 8014ede:	2300      	movs	r3, #0
 8014ee0:	6063      	str	r3, [r4, #4]
 8014ee2:	6923      	ldr	r3, [r4, #16]
 8014ee4:	6023      	str	r3, [r4, #0]
 8014ee6:	89a3      	ldrh	r3, [r4, #12]
 8014ee8:	f043 0308 	orr.w	r3, r3, #8
 8014eec:	81a3      	strh	r3, [r4, #12]
 8014eee:	6923      	ldr	r3, [r4, #16]
 8014ef0:	b94b      	cbnz	r3, 8014f06 <__swsetup_r+0x9a>
 8014ef2:	89a3      	ldrh	r3, [r4, #12]
 8014ef4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014efc:	d003      	beq.n	8014f06 <__swsetup_r+0x9a>
 8014efe:	4621      	mov	r1, r4
 8014f00:	4630      	mov	r0, r6
 8014f02:	f000 f84d 	bl	8014fa0 <__smakebuf_r>
 8014f06:	89a0      	ldrh	r0, [r4, #12]
 8014f08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014f0c:	f010 0301 	ands.w	r3, r0, #1
 8014f10:	d00a      	beq.n	8014f28 <__swsetup_r+0xbc>
 8014f12:	2300      	movs	r3, #0
 8014f14:	60a3      	str	r3, [r4, #8]
 8014f16:	6963      	ldr	r3, [r4, #20]
 8014f18:	425b      	negs	r3, r3
 8014f1a:	61a3      	str	r3, [r4, #24]
 8014f1c:	6923      	ldr	r3, [r4, #16]
 8014f1e:	b943      	cbnz	r3, 8014f32 <__swsetup_r+0xc6>
 8014f20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014f24:	d1ba      	bne.n	8014e9c <__swsetup_r+0x30>
 8014f26:	bd70      	pop	{r4, r5, r6, pc}
 8014f28:	0781      	lsls	r1, r0, #30
 8014f2a:	bf58      	it	pl
 8014f2c:	6963      	ldrpl	r3, [r4, #20]
 8014f2e:	60a3      	str	r3, [r4, #8]
 8014f30:	e7f4      	b.n	8014f1c <__swsetup_r+0xb0>
 8014f32:	2000      	movs	r0, #0
 8014f34:	e7f7      	b.n	8014f26 <__swsetup_r+0xba>
 8014f36:	bf00      	nop
 8014f38:	20000034 	.word	0x20000034
 8014f3c:	0801817c 	.word	0x0801817c
 8014f40:	0801819c 	.word	0x0801819c
 8014f44:	0801815c 	.word	0x0801815c

08014f48 <abort>:
 8014f48:	b508      	push	{r3, lr}
 8014f4a:	2006      	movs	r0, #6
 8014f4c:	f000 f890 	bl	8015070 <raise>
 8014f50:	2001      	movs	r0, #1
 8014f52:	f7eb ffdd 	bl	8000f10 <_exit>

08014f56 <__swhatbuf_r>:
 8014f56:	b570      	push	{r4, r5, r6, lr}
 8014f58:	460e      	mov	r6, r1
 8014f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f5e:	2900      	cmp	r1, #0
 8014f60:	b096      	sub	sp, #88	; 0x58
 8014f62:	4614      	mov	r4, r2
 8014f64:	461d      	mov	r5, r3
 8014f66:	da08      	bge.n	8014f7a <__swhatbuf_r+0x24>
 8014f68:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014f6c:	2200      	movs	r2, #0
 8014f6e:	602a      	str	r2, [r5, #0]
 8014f70:	061a      	lsls	r2, r3, #24
 8014f72:	d410      	bmi.n	8014f96 <__swhatbuf_r+0x40>
 8014f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014f78:	e00e      	b.n	8014f98 <__swhatbuf_r+0x42>
 8014f7a:	466a      	mov	r2, sp
 8014f7c:	f000 f894 	bl	80150a8 <_fstat_r>
 8014f80:	2800      	cmp	r0, #0
 8014f82:	dbf1      	blt.n	8014f68 <__swhatbuf_r+0x12>
 8014f84:	9a01      	ldr	r2, [sp, #4]
 8014f86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014f8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014f8e:	425a      	negs	r2, r3
 8014f90:	415a      	adcs	r2, r3
 8014f92:	602a      	str	r2, [r5, #0]
 8014f94:	e7ee      	b.n	8014f74 <__swhatbuf_r+0x1e>
 8014f96:	2340      	movs	r3, #64	; 0x40
 8014f98:	2000      	movs	r0, #0
 8014f9a:	6023      	str	r3, [r4, #0]
 8014f9c:	b016      	add	sp, #88	; 0x58
 8014f9e:	bd70      	pop	{r4, r5, r6, pc}

08014fa0 <__smakebuf_r>:
 8014fa0:	898b      	ldrh	r3, [r1, #12]
 8014fa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014fa4:	079d      	lsls	r5, r3, #30
 8014fa6:	4606      	mov	r6, r0
 8014fa8:	460c      	mov	r4, r1
 8014faa:	d507      	bpl.n	8014fbc <__smakebuf_r+0x1c>
 8014fac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014fb0:	6023      	str	r3, [r4, #0]
 8014fb2:	6123      	str	r3, [r4, #16]
 8014fb4:	2301      	movs	r3, #1
 8014fb6:	6163      	str	r3, [r4, #20]
 8014fb8:	b002      	add	sp, #8
 8014fba:	bd70      	pop	{r4, r5, r6, pc}
 8014fbc:	ab01      	add	r3, sp, #4
 8014fbe:	466a      	mov	r2, sp
 8014fc0:	f7ff ffc9 	bl	8014f56 <__swhatbuf_r>
 8014fc4:	9900      	ldr	r1, [sp, #0]
 8014fc6:	4605      	mov	r5, r0
 8014fc8:	4630      	mov	r0, r6
 8014fca:	f7ff f8ef 	bl	80141ac <_malloc_r>
 8014fce:	b948      	cbnz	r0, 8014fe4 <__smakebuf_r+0x44>
 8014fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014fd4:	059a      	lsls	r2, r3, #22
 8014fd6:	d4ef      	bmi.n	8014fb8 <__smakebuf_r+0x18>
 8014fd8:	f023 0303 	bic.w	r3, r3, #3
 8014fdc:	f043 0302 	orr.w	r3, r3, #2
 8014fe0:	81a3      	strh	r3, [r4, #12]
 8014fe2:	e7e3      	b.n	8014fac <__smakebuf_r+0xc>
 8014fe4:	4b0d      	ldr	r3, [pc, #52]	; (801501c <__smakebuf_r+0x7c>)
 8014fe6:	62b3      	str	r3, [r6, #40]	; 0x28
 8014fe8:	89a3      	ldrh	r3, [r4, #12]
 8014fea:	6020      	str	r0, [r4, #0]
 8014fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014ff0:	81a3      	strh	r3, [r4, #12]
 8014ff2:	9b00      	ldr	r3, [sp, #0]
 8014ff4:	6163      	str	r3, [r4, #20]
 8014ff6:	9b01      	ldr	r3, [sp, #4]
 8014ff8:	6120      	str	r0, [r4, #16]
 8014ffa:	b15b      	cbz	r3, 8015014 <__smakebuf_r+0x74>
 8014ffc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015000:	4630      	mov	r0, r6
 8015002:	f000 f863 	bl	80150cc <_isatty_r>
 8015006:	b128      	cbz	r0, 8015014 <__smakebuf_r+0x74>
 8015008:	89a3      	ldrh	r3, [r4, #12]
 801500a:	f023 0303 	bic.w	r3, r3, #3
 801500e:	f043 0301 	orr.w	r3, r3, #1
 8015012:	81a3      	strh	r3, [r4, #12]
 8015014:	89a0      	ldrh	r0, [r4, #12]
 8015016:	4305      	orrs	r5, r0
 8015018:	81a5      	strh	r5, [r4, #12]
 801501a:	e7cd      	b.n	8014fb8 <__smakebuf_r+0x18>
 801501c:	08013f2d 	.word	0x08013f2d

08015020 <_raise_r>:
 8015020:	291f      	cmp	r1, #31
 8015022:	b538      	push	{r3, r4, r5, lr}
 8015024:	4604      	mov	r4, r0
 8015026:	460d      	mov	r5, r1
 8015028:	d904      	bls.n	8015034 <_raise_r+0x14>
 801502a:	2316      	movs	r3, #22
 801502c:	6003      	str	r3, [r0, #0]
 801502e:	f04f 30ff 	mov.w	r0, #4294967295
 8015032:	bd38      	pop	{r3, r4, r5, pc}
 8015034:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015036:	b112      	cbz	r2, 801503e <_raise_r+0x1e>
 8015038:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801503c:	b94b      	cbnz	r3, 8015052 <_raise_r+0x32>
 801503e:	4620      	mov	r0, r4
 8015040:	f000 f830 	bl	80150a4 <_getpid_r>
 8015044:	462a      	mov	r2, r5
 8015046:	4601      	mov	r1, r0
 8015048:	4620      	mov	r0, r4
 801504a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801504e:	f000 b817 	b.w	8015080 <_kill_r>
 8015052:	2b01      	cmp	r3, #1
 8015054:	d00a      	beq.n	801506c <_raise_r+0x4c>
 8015056:	1c59      	adds	r1, r3, #1
 8015058:	d103      	bne.n	8015062 <_raise_r+0x42>
 801505a:	2316      	movs	r3, #22
 801505c:	6003      	str	r3, [r0, #0]
 801505e:	2001      	movs	r0, #1
 8015060:	e7e7      	b.n	8015032 <_raise_r+0x12>
 8015062:	2400      	movs	r4, #0
 8015064:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015068:	4628      	mov	r0, r5
 801506a:	4798      	blx	r3
 801506c:	2000      	movs	r0, #0
 801506e:	e7e0      	b.n	8015032 <_raise_r+0x12>

08015070 <raise>:
 8015070:	4b02      	ldr	r3, [pc, #8]	; (801507c <raise+0xc>)
 8015072:	4601      	mov	r1, r0
 8015074:	6818      	ldr	r0, [r3, #0]
 8015076:	f7ff bfd3 	b.w	8015020 <_raise_r>
 801507a:	bf00      	nop
 801507c:	20000034 	.word	0x20000034

08015080 <_kill_r>:
 8015080:	b538      	push	{r3, r4, r5, lr}
 8015082:	4d07      	ldr	r5, [pc, #28]	; (80150a0 <_kill_r+0x20>)
 8015084:	2300      	movs	r3, #0
 8015086:	4604      	mov	r4, r0
 8015088:	4608      	mov	r0, r1
 801508a:	4611      	mov	r1, r2
 801508c:	602b      	str	r3, [r5, #0]
 801508e:	f7eb ff2d 	bl	8000eec <_kill>
 8015092:	1c43      	adds	r3, r0, #1
 8015094:	d102      	bne.n	801509c <_kill_r+0x1c>
 8015096:	682b      	ldr	r3, [r5, #0]
 8015098:	b103      	cbz	r3, 801509c <_kill_r+0x1c>
 801509a:	6023      	str	r3, [r4, #0]
 801509c:	bd38      	pop	{r3, r4, r5, pc}
 801509e:	bf00      	nop
 80150a0:	20018d84 	.word	0x20018d84

080150a4 <_getpid_r>:
 80150a4:	f7eb bf1a 	b.w	8000edc <_getpid>

080150a8 <_fstat_r>:
 80150a8:	b538      	push	{r3, r4, r5, lr}
 80150aa:	4d07      	ldr	r5, [pc, #28]	; (80150c8 <_fstat_r+0x20>)
 80150ac:	2300      	movs	r3, #0
 80150ae:	4604      	mov	r4, r0
 80150b0:	4608      	mov	r0, r1
 80150b2:	4611      	mov	r1, r2
 80150b4:	602b      	str	r3, [r5, #0]
 80150b6:	f7eb ff7a 	bl	8000fae <_fstat>
 80150ba:	1c43      	adds	r3, r0, #1
 80150bc:	d102      	bne.n	80150c4 <_fstat_r+0x1c>
 80150be:	682b      	ldr	r3, [r5, #0]
 80150c0:	b103      	cbz	r3, 80150c4 <_fstat_r+0x1c>
 80150c2:	6023      	str	r3, [r4, #0]
 80150c4:	bd38      	pop	{r3, r4, r5, pc}
 80150c6:	bf00      	nop
 80150c8:	20018d84 	.word	0x20018d84

080150cc <_isatty_r>:
 80150cc:	b538      	push	{r3, r4, r5, lr}
 80150ce:	4d06      	ldr	r5, [pc, #24]	; (80150e8 <_isatty_r+0x1c>)
 80150d0:	2300      	movs	r3, #0
 80150d2:	4604      	mov	r4, r0
 80150d4:	4608      	mov	r0, r1
 80150d6:	602b      	str	r3, [r5, #0]
 80150d8:	f7eb ff79 	bl	8000fce <_isatty>
 80150dc:	1c43      	adds	r3, r0, #1
 80150de:	d102      	bne.n	80150e6 <_isatty_r+0x1a>
 80150e0:	682b      	ldr	r3, [r5, #0]
 80150e2:	b103      	cbz	r3, 80150e6 <_isatty_r+0x1a>
 80150e4:	6023      	str	r3, [r4, #0]
 80150e6:	bd38      	pop	{r3, r4, r5, pc}
 80150e8:	20018d84 	.word	0x20018d84

080150ec <_init>:
 80150ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150ee:	bf00      	nop
 80150f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80150f2:	bc08      	pop	{r3}
 80150f4:	469e      	mov	lr, r3
 80150f6:	4770      	bx	lr

080150f8 <_fini>:
 80150f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150fa:	bf00      	nop
 80150fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80150fe:	bc08      	pop	{r3}
 8015100:	469e      	mov	lr, r3
 8015102:	4770      	bx	lr
